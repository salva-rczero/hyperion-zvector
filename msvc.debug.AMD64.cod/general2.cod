; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
?fct_table_lengths@?1??z900_translate_and_test_xxx_extended@@9@9 DD 0100H ; `z900_translate_and_test_xxx_extended'::`2'::fct_table_lengths
	DD	0100H
	DD	0200H
	DD	0200H
	DD	010000H
	DD	0100H
	DD	020000H
	DD	0200H
?fct_table_lengths@?1??s370_translate_and_test_xxx_extended@@9@9 DD 0100H ; `s370_translate_and_test_xxx_extended'::`2'::fct_table_lengths
	DD	0100H
	DD	0200H
	DD	0200H
	DD	010000H
	DD	0100H
	DD	020000H
	DD	0200H
CONST	ENDS
PUBLIC	s370_convert_utf16_to_utf32
PUBLIC	s370_convert_utf32_to_utf16
PUBLIC	s370_convert_utf32_to_utf8
PUBLIC	s370_convert_utf8_to_utf32
PUBLIC	s370_search_string_unicode
PUBLIC	s370_translate_and_test_reverse
PUBLIC	s370_translate_and_test_extended
PUBLIC	s370_translate_and_test_reverse_extended
PUBLIC	s370_translate_extended
PUBLIC	s370_test_under_mask_high
PUBLIC	s370_test_under_mask_low
PUBLIC	s370_search_string
PUBLIC	s370_or
PUBLIC	s370_or_character
PUBLIC	s370_or_immediate
PUBLIC	s370_or_register
PUBLIC	s370_pack
PUBLIC	s370_set_program_mask
PUBLIC	s370_shift_left_double
PUBLIC	s370_shift_left_double_logical
PUBLIC	s370_shift_left_single
PUBLIC	s370_shift_left_single_logical
PUBLIC	s370_shift_right_double
PUBLIC	s370_shift_right_double_logical
PUBLIC	s370_shift_right_single
PUBLIC	s370_shift_right_single_logical
PUBLIC	s370_store_characters_under_mask
PUBLIC	s370_store_clock
PUBLIC	s370_store_halfword
PUBLIC	s370_store_multiple
PUBLIC	s370_subtract
PUBLIC	s370_subtract_halfword
PUBLIC	s370_subtract_logical
PUBLIC	s370_subtract_logical_register
PUBLIC	s370_subtract_register
PUBLIC	s370_supervisor_call
PUBLIC	s370_test_and_set
PUBLIC	s370_test_under_mask
PUBLIC	s370_translate
PUBLIC	s370_translate_and_test
PUBLIC	s370_unpack
PUBLIC	s370_update_tree
PUBLIC	s370_9180
PUBLIC	s370_9140
PUBLIC	s370_9120
PUBLIC	s370_9110
PUBLIC	s370_9108
PUBLIC	s370_9104
PUBLIC	s370_9102
PUBLIC	s370_9101
PUBLIC	s370_1F00
PUBLIC	s370_1F01
PUBLIC	s370_1F02
PUBLIC	s370_1F03
PUBLIC	s370_1F04
PUBLIC	s370_1F05
PUBLIC	s370_1F06
PUBLIC	s370_1F07
PUBLIC	s370_1F08
PUBLIC	s370_1F09
PUBLIC	s370_1F0A
PUBLIC	s370_1F0B
PUBLIC	s370_1F0C
PUBLIC	s370_1F0D
PUBLIC	s370_1F0E
PUBLIC	s370_1F0F
PUBLIC	s370_1F10
PUBLIC	s370_1F11
PUBLIC	s370_1F12
PUBLIC	s370_1F13
PUBLIC	s370_1F14
PUBLIC	s370_1F15
PUBLIC	s370_1F16
PUBLIC	s370_1F17
PUBLIC	s370_1F18
PUBLIC	s370_1F19
PUBLIC	s370_1F1A
PUBLIC	s370_1F1B
PUBLIC	s370_1F1C
PUBLIC	s370_1F1D
PUBLIC	s370_1F1E
PUBLIC	s370_1F1F
PUBLIC	s370_1F20
PUBLIC	s370_1F21
PUBLIC	s370_1F22
PUBLIC	s370_1F23
PUBLIC	s370_1F24
PUBLIC	s370_1F25
PUBLIC	s370_1F26
PUBLIC	s370_1F27
PUBLIC	s370_1F28
PUBLIC	s370_1F29
PUBLIC	s370_1F2A
PUBLIC	s370_1F2B
PUBLIC	s370_1F2C
PUBLIC	s370_1F2D
PUBLIC	s370_1F2E
PUBLIC	s370_1F2F
PUBLIC	s370_1F30
PUBLIC	s370_1F31
PUBLIC	s370_1F32
PUBLIC	s370_1F33
PUBLIC	s370_1F34
PUBLIC	s370_1F35
PUBLIC	s370_1F36
PUBLIC	s370_1F37
PUBLIC	s370_1F38
PUBLIC	s370_1F39
PUBLIC	s370_1F3A
PUBLIC	s370_1F3B
PUBLIC	s370_1F3C
PUBLIC	s370_1F3D
PUBLIC	s370_1F3E
PUBLIC	s370_1F3F
PUBLIC	s370_1F40
PUBLIC	s370_1F41
PUBLIC	s370_1F42
PUBLIC	s370_1F43
PUBLIC	s370_1F44
PUBLIC	s370_1F45
PUBLIC	s370_1F46
PUBLIC	s370_1F47
PUBLIC	s370_1F48
PUBLIC	s370_1F49
PUBLIC	s370_1F4A
PUBLIC	s370_1F4B
PUBLIC	s370_1F4C
PUBLIC	s370_1F4D
PUBLIC	s370_1F4E
PUBLIC	s370_1F4F
PUBLIC	s370_1F50
PUBLIC	s370_1F51
PUBLIC	s370_1F52
PUBLIC	s370_1F53
PUBLIC	s370_1F54
PUBLIC	s370_1F55
PUBLIC	s370_1F56
PUBLIC	s370_1F57
PUBLIC	s370_1F58
PUBLIC	s370_1F59
PUBLIC	s370_1F5A
PUBLIC	s370_1F5B
PUBLIC	s370_1F5C
PUBLIC	s370_1F5D
PUBLIC	s370_1F5E
PUBLIC	s370_1F5F
PUBLIC	s370_1F60
PUBLIC	s370_1F61
PUBLIC	s370_1F62
PUBLIC	s370_1F63
PUBLIC	s370_1F64
PUBLIC	s370_1F65
PUBLIC	s370_1F66
PUBLIC	s370_1F67
PUBLIC	s370_1F68
PUBLIC	s370_1F69
PUBLIC	s370_1F6A
PUBLIC	s370_1F6B
PUBLIC	s370_1F6C
PUBLIC	s370_1F6D
PUBLIC	s370_1F6E
PUBLIC	s370_1F6F
PUBLIC	s370_1F70
PUBLIC	s370_1F71
PUBLIC	s370_1F72
PUBLIC	s370_1F73
PUBLIC	s370_1F74
PUBLIC	s370_1F75
PUBLIC	s370_1F76
PUBLIC	s370_1F77
PUBLIC	s370_1F78
PUBLIC	s370_1F79
PUBLIC	s370_1F7A
PUBLIC	s370_1F7B
PUBLIC	s370_1F7C
PUBLIC	s370_1F7D
PUBLIC	s370_1F7E
PUBLIC	s370_1F7F
PUBLIC	s370_1F80
PUBLIC	s370_1F81
PUBLIC	s370_1F82
PUBLIC	s370_1F83
PUBLIC	s370_1F84
PUBLIC	s370_1F85
PUBLIC	s370_1F86
PUBLIC	s370_1F87
PUBLIC	s370_1F88
PUBLIC	s370_1F89
PUBLIC	s370_1F8A
PUBLIC	s370_1F8B
PUBLIC	s370_1F8C
PUBLIC	s370_1F8D
PUBLIC	s370_1F8E
PUBLIC	s370_1F8F
PUBLIC	s370_1F90
PUBLIC	s370_1F91
PUBLIC	s370_1F92
PUBLIC	s370_1F93
PUBLIC	s370_1F94
PUBLIC	s370_1F95
PUBLIC	s370_1F96
PUBLIC	s370_1F97
PUBLIC	s370_1F98
PUBLIC	s370_1F99
PUBLIC	s370_1F9A
PUBLIC	s370_1F9B
PUBLIC	s370_1F9C
PUBLIC	s370_1F9D
PUBLIC	s370_1F9E
PUBLIC	s370_1F9F
PUBLIC	s370_1FA0
PUBLIC	s370_1FA1
PUBLIC	s370_1FA2
PUBLIC	s370_1FA3
PUBLIC	s370_1FA4
PUBLIC	s370_1FA5
PUBLIC	s370_1FA6
PUBLIC	s370_1FA7
PUBLIC	s370_1FA8
PUBLIC	s370_1FA9
PUBLIC	s370_1FAA
PUBLIC	s370_1FAB
PUBLIC	s370_1FAC
PUBLIC	s370_1FAD
PUBLIC	s370_1FAE
PUBLIC	s370_1FAF
PUBLIC	s370_1FB0
PUBLIC	s370_1FB1
PUBLIC	s370_1FB2
PUBLIC	s370_1FB3
PUBLIC	s370_1FB4
PUBLIC	s370_1FB5
PUBLIC	s370_1FB6
PUBLIC	s370_1FB7
PUBLIC	s370_1FB8
PUBLIC	s370_1FB9
PUBLIC	s370_1FBA
PUBLIC	s370_1FBB
PUBLIC	s370_1FBC
PUBLIC	s370_1FBD
PUBLIC	s370_1FBE
PUBLIC	s370_1FBF
PUBLIC	s370_1FC0
PUBLIC	s370_1FC1
PUBLIC	s370_1FC2
PUBLIC	s370_1FC3
PUBLIC	s370_1FC4
PUBLIC	s370_1FC5
PUBLIC	s370_1FC6
PUBLIC	s370_1FC7
PUBLIC	s370_1FC8
PUBLIC	s370_1FC9
PUBLIC	s370_1FCA
PUBLIC	s370_1FCB
PUBLIC	s370_1FCC
PUBLIC	s370_1FCD
PUBLIC	s370_1FCE
PUBLIC	s370_1FCF
PUBLIC	s370_1FD0
PUBLIC	s370_1FD1
PUBLIC	s370_1FD2
PUBLIC	s370_1FD3
PUBLIC	s370_1FD4
PUBLIC	s370_1FD5
PUBLIC	s370_1FD6
PUBLIC	s370_1FD7
PUBLIC	s370_1FD8
PUBLIC	s370_1FD9
PUBLIC	s370_1FDA
PUBLIC	s370_1FDB
PUBLIC	s370_1FDC
PUBLIC	s370_1FDD
PUBLIC	s370_1FDE
PUBLIC	s370_1FDF
PUBLIC	s370_1FE0
PUBLIC	s370_1FE1
PUBLIC	s370_1FE2
PUBLIC	s370_1FE3
PUBLIC	s370_1FE4
PUBLIC	s370_1FE5
PUBLIC	s370_1FE6
PUBLIC	s370_1FE7
PUBLIC	s370_1FE8
PUBLIC	s370_1FE9
PUBLIC	s370_1FEA
PUBLIC	s370_1FEB
PUBLIC	s370_1FEC
PUBLIC	s370_1FED
PUBLIC	s370_1FEE
PUBLIC	s370_1FEF
PUBLIC	s370_1FF0
PUBLIC	s370_1FF1
PUBLIC	s370_1FF2
PUBLIC	s370_1FF3
PUBLIC	s370_1FF4
PUBLIC	s370_1FF5
PUBLIC	s370_1FF6
PUBLIC	s370_1FF7
PUBLIC	s370_1FF8
PUBLIC	s370_1FF9
PUBLIC	s370_1FFA
PUBLIC	s370_1FFB
PUBLIC	s370_1FFC
PUBLIC	s370_1FFD
PUBLIC	s370_1FFE
PUBLIC	s370_1FFF
PUBLIC	cmpxchg4_x86
PUBLIC	cmpxchg1_x86
PUBLIC	fetch_hw_noswap
PUBLIC	store_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	store_fw_noswap
PUBLIC	fetch_dw_noswap
PUBLIC	store_dw_noswap
PUBLIC	_get_storekey_ptr
PUBLIC	_get_storekey1_ptr
PUBLIC	_get_storekey2_ptr
PUBLIC	s370__or_storage_key
PUBLIC	s370_or_2K_storage_key
PUBLIC	s370_or_storage_key
PUBLIC	s370_or_storage_key_by_ptr
PUBLIC	sub_logical
PUBLIC	sub_signed
PUBLIC	s370_per1_gra
PUBLIC	s370_maddr_l
PUBLIC	s370_vstore2_full
PUBLIC	s370_vstore4_full
PUBLIC	s370_vstore8_full
PUBLIC	s370_vfetch2_full
PUBLIC	s370_vfetch4_full
PUBLIC	s370_vstorec
PUBLIC	s370_vstoreb
PUBLIC	s370_vstore2
PUBLIC	s370_vstore4
PUBLIC	s370_vstore8
PUBLIC	s370_vfetchc
PUBLIC	s370_vfetchb
PUBLIC	s370_vfetch2
PUBLIC	s370_vfetch4
PUBLIC	s370_validate_operand
PUBLIC	s370_translate_and_test_xxx_extended
PUBLIC	s390_set_access_register
PUBLIC	s390_store_access_multiple
PUBLIC	s390_store_clock_extended
PUBLIC	s390_translate_extended
PUBLIC	s390_test_under_mask_high
PUBLIC	s390_test_under_mask_low
PUBLIC	s390_perform_locked_operation
PUBLIC	s390_search_string
PUBLIC	s390_or
PUBLIC	s390_or_character
PUBLIC	s390_or_immediate
PUBLIC	s390_or_register
PUBLIC	s390_pack
PUBLIC	s390_set_program_mask
PUBLIC	s390_shift_left_double
PUBLIC	s390_shift_left_double_logical
PUBLIC	s390_shift_left_single
PUBLIC	s390_shift_left_single_logical
PUBLIC	s390_shift_right_double
PUBLIC	s390_shift_right_double_logical
PUBLIC	s390_shift_right_single
PUBLIC	s390_shift_right_single_logical
PUBLIC	s390_store_characters_under_mask
PUBLIC	s390_store_clock
PUBLIC	s390_store_halfword
PUBLIC	s390_store_multiple
PUBLIC	s390_subtract
PUBLIC	s390_subtract_halfword
PUBLIC	s390_subtract_logical
PUBLIC	s390_subtract_logical_register
PUBLIC	s390_subtract_register
PUBLIC	s390_supervisor_call
PUBLIC	s390_test_and_set
PUBLIC	s390_test_under_mask
PUBLIC	s390_translate
PUBLIC	s390_translate_and_test
PUBLIC	s390_unpack
PUBLIC	s390_update_tree
PUBLIC	s390_9180
PUBLIC	s390_9140
PUBLIC	s390_9120
PUBLIC	s390_9110
PUBLIC	s390_9108
PUBLIC	s390_9104
PUBLIC	s390_9102
PUBLIC	s390_9101
PUBLIC	s390_1F00
PUBLIC	s390_1F01
PUBLIC	s390_1F02
PUBLIC	s390_1F03
PUBLIC	s390_1F04
PUBLIC	s390_1F05
PUBLIC	s390_1F06
PUBLIC	s390_1F07
PUBLIC	s390_1F08
PUBLIC	s390_1F09
PUBLIC	s390_1F0A
PUBLIC	s390_1F0B
PUBLIC	s390_1F0C
PUBLIC	s390_1F0D
PUBLIC	s390_1F0E
PUBLIC	s390_1F0F
PUBLIC	s390_1F10
PUBLIC	s390_1F11
PUBLIC	s390_1F12
PUBLIC	s390_1F13
PUBLIC	s390_1F14
PUBLIC	s390_1F15
PUBLIC	s390_1F16
PUBLIC	s390_1F17
PUBLIC	s390_1F18
PUBLIC	s390_1F19
PUBLIC	s390_1F1A
PUBLIC	s390_1F1B
PUBLIC	s390_1F1C
PUBLIC	s390_1F1D
PUBLIC	s390_1F1E
PUBLIC	s390_1F1F
PUBLIC	s390_1F20
PUBLIC	s390_1F21
PUBLIC	s390_1F22
PUBLIC	s390_1F23
PUBLIC	s390_1F24
PUBLIC	s390_1F25
PUBLIC	s390_1F26
PUBLIC	s390_1F27
PUBLIC	s390_1F28
PUBLIC	s390_1F29
PUBLIC	s390_1F2A
PUBLIC	s390_1F2B
PUBLIC	s390_1F2C
PUBLIC	s390_1F2D
PUBLIC	s390_1F2E
PUBLIC	s390_1F2F
PUBLIC	s390_1F30
PUBLIC	s390_1F31
PUBLIC	s390_1F32
PUBLIC	s390_1F33
PUBLIC	s390_1F34
PUBLIC	s390_1F35
PUBLIC	s390_1F36
PUBLIC	s390_1F37
PUBLIC	s390_1F38
PUBLIC	s390_1F39
PUBLIC	s390_1F3A
PUBLIC	s390_1F3B
PUBLIC	s390_1F3C
PUBLIC	s390_1F3D
PUBLIC	s390_1F3E
PUBLIC	s390_1F3F
PUBLIC	s390_1F40
PUBLIC	s390_1F41
PUBLIC	s390_1F42
PUBLIC	s390_1F43
PUBLIC	s390_1F44
PUBLIC	s390_1F45
PUBLIC	s390_1F46
PUBLIC	s390_1F47
PUBLIC	s390_1F48
PUBLIC	s390_1F49
PUBLIC	s390_1F4A
PUBLIC	s390_1F4B
PUBLIC	s390_1F4C
PUBLIC	s390_1F4D
PUBLIC	s390_1F4E
PUBLIC	s390_1F4F
PUBLIC	s390_1F50
PUBLIC	s390_1F51
PUBLIC	s390_1F52
PUBLIC	s390_1F53
PUBLIC	s390_1F54
PUBLIC	s390_1F55
PUBLIC	s390_1F56
PUBLIC	s390_1F57
PUBLIC	s390_1F58
PUBLIC	s390_1F59
PUBLIC	s390_1F5A
PUBLIC	s390_1F5B
PUBLIC	s390_1F5C
PUBLIC	s390_1F5D
PUBLIC	s390_1F5E
PUBLIC	s390_1F5F
PUBLIC	s390_1F60
PUBLIC	s390_1F61
PUBLIC	s390_1F62
PUBLIC	s390_1F63
PUBLIC	s390_1F64
PUBLIC	s390_1F65
PUBLIC	s390_1F66
PUBLIC	s390_1F67
PUBLIC	s390_1F68
PUBLIC	s390_1F69
PUBLIC	s390_1F6A
PUBLIC	s390_1F6B
PUBLIC	s390_1F6C
PUBLIC	s390_1F6D
PUBLIC	s390_1F6E
PUBLIC	s390_1F6F
PUBLIC	s390_1F70
PUBLIC	s390_1F71
PUBLIC	s390_1F72
PUBLIC	s390_1F73
PUBLIC	s390_1F74
PUBLIC	s390_1F75
PUBLIC	s390_1F76
PUBLIC	s390_1F77
PUBLIC	s390_1F78
PUBLIC	s390_1F79
PUBLIC	s390_1F7A
PUBLIC	s390_1F7B
PUBLIC	s390_1F7C
PUBLIC	s390_1F7D
PUBLIC	s390_1F7E
PUBLIC	s390_1F7F
PUBLIC	s390_1F80
PUBLIC	s390_1F81
PUBLIC	s390_1F82
PUBLIC	s390_1F83
PUBLIC	s390_1F84
PUBLIC	s390_1F85
PUBLIC	s390_1F86
PUBLIC	s390_1F87
PUBLIC	s390_1F88
PUBLIC	s390_1F89
PUBLIC	s390_1F8A
PUBLIC	s390_1F8B
PUBLIC	s390_1F8C
PUBLIC	s390_1F8D
PUBLIC	s390_1F8E
PUBLIC	s390_1F8F
PUBLIC	s390_1F90
PUBLIC	s390_1F91
PUBLIC	s390_1F92
PUBLIC	s390_1F93
PUBLIC	s390_1F94
PUBLIC	s390_1F95
PUBLIC	s390_1F96
PUBLIC	s390_1F97
PUBLIC	s390_1F98
PUBLIC	s390_1F99
PUBLIC	s390_1F9A
PUBLIC	s390_1F9B
PUBLIC	s390_1F9C
PUBLIC	s390_1F9D
PUBLIC	s390_1F9E
PUBLIC	s390_1F9F
PUBLIC	s390_1FA0
PUBLIC	s390_1FA1
PUBLIC	s390_1FA2
PUBLIC	s390_1FA3
PUBLIC	s390_1FA4
PUBLIC	s390_1FA5
PUBLIC	s390_1FA6
PUBLIC	s390_1FA7
PUBLIC	s390_1FA8
PUBLIC	s390_1FA9
PUBLIC	s390_1FAA
PUBLIC	s390_1FAB
PUBLIC	s390_1FAC
PUBLIC	s390_1FAD
PUBLIC	s390_1FAE
PUBLIC	s390_1FAF
PUBLIC	s390_1FB0
PUBLIC	s390_1FB1
PUBLIC	s390_1FB2
PUBLIC	s390_1FB3
PUBLIC	s390_1FB4
PUBLIC	s390_1FB5
PUBLIC	s390_1FB6
PUBLIC	s390_1FB7
PUBLIC	s390_1FB8
PUBLIC	s390_1FB9
PUBLIC	s390_1FBA
PUBLIC	s390_1FBB
PUBLIC	s390_1FBC
PUBLIC	s390_1FBD
PUBLIC	s390_1FBE
PUBLIC	s390_1FBF
PUBLIC	s390_1FC0
PUBLIC	s390_1FC1
PUBLIC	s390_1FC2
PUBLIC	s390_1FC3
PUBLIC	s390_1FC4
PUBLIC	s390_1FC5
PUBLIC	s390_1FC6
PUBLIC	s390_1FC7
PUBLIC	s390_1FC8
PUBLIC	s390_1FC9
PUBLIC	s390_1FCA
PUBLIC	s390_1FCB
PUBLIC	s390_1FCC
PUBLIC	s390_1FCD
PUBLIC	s390_1FCE
PUBLIC	s390_1FCF
PUBLIC	s390_1FD0
PUBLIC	s390_1FD1
PUBLIC	s390_1FD2
PUBLIC	s390_1FD3
PUBLIC	s390_1FD4
PUBLIC	s390_1FD5
PUBLIC	s390_1FD6
PUBLIC	s390_1FD7
PUBLIC	s390_1FD8
PUBLIC	s390_1FD9
PUBLIC	s390_1FDA
PUBLIC	s390_1FDB
PUBLIC	s390_1FDC
PUBLIC	s390_1FDD
PUBLIC	s390_1FDE
PUBLIC	s390_1FDF
PUBLIC	s390_1FE0
PUBLIC	s390_1FE1
PUBLIC	s390_1FE2
PUBLIC	s390_1FE3
PUBLIC	s390_1FE4
PUBLIC	s390_1FE5
PUBLIC	s390_1FE6
PUBLIC	s390_1FE7
PUBLIC	s390_1FE8
PUBLIC	s390_1FE9
PUBLIC	s390_1FEA
PUBLIC	s390_1FEB
PUBLIC	s390_1FEC
PUBLIC	s390_1FED
PUBLIC	s390_1FEE
PUBLIC	s390_1FEF
PUBLIC	s390_1FF0
PUBLIC	s390_1FF1
PUBLIC	s390_1FF2
PUBLIC	s390_1FF3
PUBLIC	s390_1FF4
PUBLIC	s390_1FF5
PUBLIC	s390_1FF6
PUBLIC	s390_1FF7
PUBLIC	s390_1FF8
PUBLIC	s390_1FF9
PUBLIC	s390_1FFA
PUBLIC	s390_1FFB
PUBLIC	s390_1FFC
PUBLIC	s390_1FFD
PUBLIC	s390_1FFE
PUBLIC	s390_1FFF
PUBLIC	s390__or_storage_key
PUBLIC	s390_or_4K_storage_key
PUBLIC	s390_or_storage_key
PUBLIC	s390_or_storage_key_by_ptr
PUBLIC	s390_maddr_l
PUBLIC	s390_vstore2_full
PUBLIC	s390_vstore4_full
PUBLIC	s390_vstore8_full
PUBLIC	s390_vfetch2_full
PUBLIC	s390_vfetch4_full
PUBLIC	s390_vstorec
PUBLIC	s390_vstoreb
PUBLIC	s390_vstore2
PUBLIC	s390_vstore4
PUBLIC	s390_vstore8
PUBLIC	s390_vfetchc
PUBLIC	s390_vfetchb
PUBLIC	s390_vfetch2
PUBLIC	s390_vfetch4
PUBLIC	s390_validate_operand
PUBLIC	z900_convert_utf16_to_utf32
PUBLIC	z900_convert_utf32_to_utf16
PUBLIC	z900_convert_utf32_to_utf8
PUBLIC	z900_convert_utf8_to_utf32
PUBLIC	z900_search_string_unicode
PUBLIC	z900_translate_and_test_reverse
PUBLIC	z900_translate_and_test_extended
PUBLIC	z900_translate_and_test_reverse_extended
PUBLIC	z900_set_access_register
PUBLIC	z900_store_access_multiple
PUBLIC	z900_store_clock_extended
PUBLIC	z900_translate_extended
PUBLIC	z900_test_under_mask_high
PUBLIC	z900_test_under_mask_low
PUBLIC	z900_perform_locked_operation
PUBLIC	z900_search_string
PUBLIC	z900_or
PUBLIC	z900_or_character
PUBLIC	z900_or_immediate
PUBLIC	z900_or_register
PUBLIC	z900_pack
PUBLIC	z900_set_program_mask
PUBLIC	z900_shift_left_double
PUBLIC	z900_shift_left_double_logical
PUBLIC	z900_shift_left_single
PUBLIC	z900_shift_left_single_logical
PUBLIC	z900_shift_right_double
PUBLIC	z900_shift_right_double_logical
PUBLIC	z900_shift_right_single
PUBLIC	z900_shift_right_single_logical
PUBLIC	z900_store_characters_under_mask
PUBLIC	z900_store_clock
PUBLIC	z900_store_halfword
PUBLIC	z900_store_multiple
PUBLIC	z900_subtract
PUBLIC	z900_subtract_halfword
PUBLIC	z900_subtract_logical
PUBLIC	z900_subtract_logical_register
PUBLIC	z900_subtract_register
PUBLIC	z900_supervisor_call
PUBLIC	z900_test_and_set
PUBLIC	z900_test_under_mask
PUBLIC	z900_translate
PUBLIC	z900_translate_and_test
PUBLIC	z900_unpack
PUBLIC	z900_update_tree
PUBLIC	z900_9180
PUBLIC	z900_9140
PUBLIC	z900_9120
PUBLIC	z900_9110
PUBLIC	z900_9108
PUBLIC	z900_9104
PUBLIC	z900_9102
PUBLIC	z900_9101
PUBLIC	z900_1F00
PUBLIC	z900_1F01
PUBLIC	z900_1F02
PUBLIC	z900_1F03
PUBLIC	z900_1F04
PUBLIC	z900_1F05
PUBLIC	z900_1F06
PUBLIC	z900_1F07
PUBLIC	z900_1F08
PUBLIC	z900_1F09
PUBLIC	z900_1F0A
PUBLIC	z900_1F0B
PUBLIC	z900_1F0C
PUBLIC	z900_1F0D
PUBLIC	z900_1F0E
PUBLIC	z900_1F0F
PUBLIC	z900_1F10
PUBLIC	z900_1F11
PUBLIC	z900_1F12
PUBLIC	z900_1F13
PUBLIC	z900_1F14
PUBLIC	z900_1F15
PUBLIC	z900_1F16
PUBLIC	z900_1F17
PUBLIC	z900_1F18
PUBLIC	z900_1F19
PUBLIC	z900_1F1A
PUBLIC	z900_1F1B
PUBLIC	z900_1F1C
PUBLIC	z900_1F1D
PUBLIC	z900_1F1E
PUBLIC	z900_1F1F
PUBLIC	z900_1F20
PUBLIC	z900_1F21
PUBLIC	z900_1F22
PUBLIC	z900_1F23
PUBLIC	z900_1F24
PUBLIC	z900_1F25
PUBLIC	z900_1F26
PUBLIC	z900_1F27
PUBLIC	z900_1F28
PUBLIC	z900_1F29
PUBLIC	z900_1F2A
PUBLIC	z900_1F2B
PUBLIC	z900_1F2C
PUBLIC	z900_1F2D
PUBLIC	z900_1F2E
PUBLIC	z900_1F2F
PUBLIC	z900_1F30
PUBLIC	z900_1F31
PUBLIC	z900_1F32
PUBLIC	z900_1F33
PUBLIC	z900_1F34
PUBLIC	z900_1F35
PUBLIC	z900_1F36
PUBLIC	z900_1F37
PUBLIC	z900_1F38
PUBLIC	z900_1F39
PUBLIC	z900_1F3A
PUBLIC	z900_1F3B
PUBLIC	z900_1F3C
PUBLIC	z900_1F3D
PUBLIC	z900_1F3E
PUBLIC	z900_1F3F
PUBLIC	z900_1F40
PUBLIC	z900_1F41
PUBLIC	z900_1F42
PUBLIC	z900_1F43
PUBLIC	z900_1F44
PUBLIC	z900_1F45
PUBLIC	z900_1F46
PUBLIC	z900_1F47
PUBLIC	z900_1F48
PUBLIC	z900_1F49
PUBLIC	z900_1F4A
PUBLIC	z900_1F4B
PUBLIC	z900_1F4C
PUBLIC	z900_1F4D
PUBLIC	z900_1F4E
PUBLIC	z900_1F4F
PUBLIC	z900_1F50
PUBLIC	z900_1F51
PUBLIC	z900_1F52
PUBLIC	z900_1F53
PUBLIC	z900_1F54
PUBLIC	z900_1F55
PUBLIC	z900_1F56
PUBLIC	z900_1F57
PUBLIC	z900_1F58
PUBLIC	z900_1F59
PUBLIC	z900_1F5A
PUBLIC	z900_1F5B
PUBLIC	z900_1F5C
PUBLIC	z900_1F5D
PUBLIC	z900_1F5E
PUBLIC	z900_1F5F
PUBLIC	z900_1F60
PUBLIC	z900_1F61
PUBLIC	z900_1F62
PUBLIC	z900_1F63
PUBLIC	z900_1F64
PUBLIC	z900_1F65
PUBLIC	z900_1F66
PUBLIC	z900_1F67
PUBLIC	z900_1F68
PUBLIC	z900_1F69
PUBLIC	z900_1F6A
PUBLIC	z900_1F6B
PUBLIC	z900_1F6C
PUBLIC	z900_1F6D
PUBLIC	z900_1F6E
PUBLIC	z900_1F6F
PUBLIC	z900_1F70
PUBLIC	z900_1F71
PUBLIC	z900_1F72
PUBLIC	z900_1F73
PUBLIC	z900_1F74
PUBLIC	z900_1F75
PUBLIC	z900_1F76
PUBLIC	z900_1F77
PUBLIC	z900_1F78
PUBLIC	z900_1F79
PUBLIC	z900_1F7A
PUBLIC	z900_1F7B
PUBLIC	z900_1F7C
PUBLIC	z900_1F7D
PUBLIC	z900_1F7E
PUBLIC	z900_1F7F
PUBLIC	z900_1F80
PUBLIC	z900_1F81
PUBLIC	z900_1F82
PUBLIC	z900_1F83
PUBLIC	z900_1F84
PUBLIC	z900_1F85
PUBLIC	z900_1F86
PUBLIC	z900_1F87
PUBLIC	z900_1F88
PUBLIC	z900_1F89
PUBLIC	z900_1F8A
PUBLIC	z900_1F8B
PUBLIC	z900_1F8C
PUBLIC	z900_1F8D
PUBLIC	z900_1F8E
PUBLIC	z900_1F8F
PUBLIC	z900_1F90
PUBLIC	z900_1F91
PUBLIC	z900_1F92
PUBLIC	z900_1F93
PUBLIC	z900_1F94
PUBLIC	z900_1F95
PUBLIC	z900_1F96
PUBLIC	z900_1F97
PUBLIC	z900_1F98
PUBLIC	z900_1F99
PUBLIC	z900_1F9A
PUBLIC	z900_1F9B
PUBLIC	z900_1F9C
PUBLIC	z900_1F9D
PUBLIC	z900_1F9E
PUBLIC	z900_1F9F
PUBLIC	z900_1FA0
PUBLIC	z900_1FA1
PUBLIC	z900_1FA2
PUBLIC	z900_1FA3
PUBLIC	z900_1FA4
PUBLIC	z900_1FA5
PUBLIC	z900_1FA6
PUBLIC	z900_1FA7
PUBLIC	z900_1FA8
PUBLIC	z900_1FA9
PUBLIC	z900_1FAA
PUBLIC	z900_1FAB
PUBLIC	z900_1FAC
PUBLIC	z900_1FAD
PUBLIC	z900_1FAE
PUBLIC	z900_1FAF
PUBLIC	z900_1FB0
PUBLIC	z900_1FB1
PUBLIC	z900_1FB2
PUBLIC	z900_1FB3
PUBLIC	z900_1FB4
PUBLIC	z900_1FB5
PUBLIC	z900_1FB6
PUBLIC	z900_1FB7
PUBLIC	z900_1FB8
PUBLIC	z900_1FB9
PUBLIC	z900_1FBA
PUBLIC	z900_1FBB
PUBLIC	z900_1FBC
PUBLIC	z900_1FBD
PUBLIC	z900_1FBE
PUBLIC	z900_1FBF
PUBLIC	z900_1FC0
PUBLIC	z900_1FC1
PUBLIC	z900_1FC2
PUBLIC	z900_1FC3
PUBLIC	z900_1FC4
PUBLIC	z900_1FC5
PUBLIC	z900_1FC6
PUBLIC	z900_1FC7
PUBLIC	z900_1FC8
PUBLIC	z900_1FC9
PUBLIC	z900_1FCA
PUBLIC	z900_1FCB
PUBLIC	z900_1FCC
PUBLIC	z900_1FCD
PUBLIC	z900_1FCE
PUBLIC	z900_1FCF
PUBLIC	z900_1FD0
PUBLIC	z900_1FD1
PUBLIC	z900_1FD2
PUBLIC	z900_1FD3
PUBLIC	z900_1FD4
PUBLIC	z900_1FD5
PUBLIC	z900_1FD6
PUBLIC	z900_1FD7
PUBLIC	z900_1FD8
PUBLIC	z900_1FD9
PUBLIC	z900_1FDA
PUBLIC	z900_1FDB
PUBLIC	z900_1FDC
PUBLIC	z900_1FDD
PUBLIC	z900_1FDE
PUBLIC	z900_1FDF
PUBLIC	z900_1FE0
PUBLIC	z900_1FE1
PUBLIC	z900_1FE2
PUBLIC	z900_1FE3
PUBLIC	z900_1FE4
PUBLIC	z900_1FE5
PUBLIC	z900_1FE6
PUBLIC	z900_1FE7
PUBLIC	z900_1FE8
PUBLIC	z900_1FE9
PUBLIC	z900_1FEA
PUBLIC	z900_1FEB
PUBLIC	z900_1FEC
PUBLIC	z900_1FED
PUBLIC	z900_1FEE
PUBLIC	z900_1FEF
PUBLIC	z900_1FF0
PUBLIC	z900_1FF1
PUBLIC	z900_1FF2
PUBLIC	z900_1FF3
PUBLIC	z900_1FF4
PUBLIC	z900_1FF5
PUBLIC	z900_1FF6
PUBLIC	z900_1FF7
PUBLIC	z900_1FF8
PUBLIC	z900_1FF9
PUBLIC	z900_1FFA
PUBLIC	z900_1FFB
PUBLIC	z900_1FFC
PUBLIC	z900_1FFD
PUBLIC	z900_1FFE
PUBLIC	z900_1FFF
PUBLIC	z900__or_storage_key
PUBLIC	z900_or_4K_storage_key
PUBLIC	z900_or_storage_key
PUBLIC	z900_or_storage_key_by_ptr
PUBLIC	z900_is_per3_event_suppressed
PUBLIC	z900_per3_zero
PUBLIC	z900_per3_zero_check
PUBLIC	z900_per3_zero_check2
PUBLIC	z900_per3_zero_lcheck
PUBLIC	z900_per3_zero_lcheck2
PUBLIC	z900_per3_zero_xcheck
PUBLIC	z900_per3_zero_xcheck2
PUBLIC	z900_maddr_l
PUBLIC	z900_vstore2_full
PUBLIC	z900_vstore4_full
PUBLIC	z900_vstore8_full
PUBLIC	z900_vfetch2_full
PUBLIC	z900_vfetch4_full
PUBLIC	z900_vfetch8_full
PUBLIC	z900_vstorec
PUBLIC	z900_vstoreb
PUBLIC	z900_vstore2
PUBLIC	z900_vstore4
PUBLIC	z900_vstore8
PUBLIC	z900_vfetchc
PUBLIC	z900_vfetchb
PUBLIC	z900_vfetch2
PUBLIC	z900_vfetch4
PUBLIC	z900_vfetch8
PUBLIC	z900_validate_operand
PUBLIC	z900_translate_and_test_xxx_extended
PUBLIC	??_C@_0CM@OMLMFJCF@C?3?2papa?2MyGit?2hyperion?9zvector?2@ ; `string'
PUBLIC	??_C@_0CM@JBMLKNGA@C?3?2papa?2MyGit?2hyperion?9zvector?2@ ; `string'
EXTRN	__report_rangecheckfailure:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	longjmp:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_ptt_pthread_trace:PROC
EXTRN	__imp_sched_yield:PROC
EXTRN	s370_fetch_int_timer:PROC
EXTRN	s370_store_int_timer:PROC
EXTRN	etod_clock:PROC
EXTRN	s370_store_psw:PROC
EXTRN	s370_load_psw:PROC
EXTRN	s390_load_psw:PROC
EXTRN	s390_store_psw:PROC
EXTRN	z900_load_psw:PROC
EXTRN	z900_store_psw:PROC
EXTRN	txf_maddr_l:PROC
EXTRN	z900_abort_transaction:PROC
EXTRN	ecpsvm_dosvc:PROC
EXTRN	s370_logical_to_main_l:PROC
EXTRN	s390_logical_to_main_l:PROC
EXTRN	z900_logical_to_main_l:PROC
EXTRN	s390_plo_cl:PROC
EXTRN	s390_plo_clg:PROC
EXTRN	s390_plo_cs:PROC
EXTRN	s390_plo_csg:PROC
EXTRN	s390_plo_dcs:PROC
EXTRN	s390_plo_dcsg:PROC
EXTRN	s390_plo_csst:PROC
EXTRN	s390_plo_csstg:PROC
EXTRN	s390_plo_csdst:PROC
EXTRN	s390_plo_csdstg:PROC
EXTRN	s390_plo_cstst:PROC
EXTRN	s390_plo_cststg:PROC
EXTRN	z900_plo_cl:PROC
EXTRN	z900_plo_clg:PROC
EXTRN	z900_plo_clgr:PROC
EXTRN	z900_plo_clx:PROC
EXTRN	z900_plo_cs:PROC
EXTRN	z900_plo_csg:PROC
EXTRN	z900_plo_csgr:PROC
EXTRN	z900_plo_csx:PROC
EXTRN	z900_plo_dcs:PROC
EXTRN	z900_plo_dcsg:PROC
EXTRN	z900_plo_dcsgr:PROC
EXTRN	z900_plo_dcsx:PROC
EXTRN	z900_plo_csst:PROC
EXTRN	z900_plo_csstg:PROC
EXTRN	z900_plo_csstgr:PROC
EXTRN	z900_plo_csstx:PROC
EXTRN	z900_plo_csdst:PROC
EXTRN	z900_plo_csdstg:PROC
EXTRN	z900_plo_csdstgr:PROC
EXTRN	z900_plo_csdstx:PROC
EXTRN	z900_plo_cstst:PROC
EXTRN	z900_plo_cststg:PROC
EXTRN	z900_plo_cststgr:PROC
EXTRN	z900_plo_cststx:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_pttclass:QWORD
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$s370_convert_utf16_to_utf32 DD imagerel $LN26
	DD	imagerel $LN26+1167
	DD	imagerel $unwind$s370_convert_utf16_to_utf32
$pdata$s370_convert_utf32_to_utf16 DD imagerel $LN21
	DD	imagerel $LN21+976
	DD	imagerel $unwind$s370_convert_utf32_to_utf16
$pdata$s370_convert_utf32_to_utf8 DD imagerel $LN30
	DD	imagerel $LN30+1348
	DD	imagerel $unwind$s370_convert_utf32_to_utf8
$pdata$s370_convert_utf8_to_utf32 DD imagerel $LN65
	DD	imagerel $LN65+2869
	DD	imagerel $unwind$s370_convert_utf8_to_utf32
$pdata$s370_search_string_unicode DD imagerel $LN14
	DD	imagerel $LN14+466
	DD	imagerel $unwind$s370_search_string_unicode
$pdata$s370_translate_and_test_reverse DD imagerel $LN24
	DD	imagerel $LN24+978
	DD	imagerel $unwind$s370_translate_and_test_reverse
$pdata$s370_translate_and_test_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_translate_and_test_extended
$pdata$s370_translate_and_test_reverse_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_translate_and_test_reverse_extended
$pdata$s370_translate_extended DD imagerel $LN15
	DD	imagerel $LN15+677
	DD	imagerel $unwind$s370_translate_extended
$pdata$s370_test_under_mask_high DD imagerel $LN16
	DD	imagerel $LN16+317
	DD	imagerel $unwind$s370_test_under_mask_high
$pdata$s370_test_under_mask_low DD imagerel $LN16
	DD	imagerel $LN16+317
	DD	imagerel $unwind$s370_test_under_mask_low
$pdata$s370_search_string DD imagerel $LN35
	DD	imagerel $LN35+998
	DD	imagerel $unwind$s370_search_string
$pdata$s370_or DD imagerel $LN26
	DD	imagerel $LN26+541
	DD	imagerel $unwind$s370_or
$pdata$s370_or_character DD imagerel $LN152
	DD	imagerel $LN152+3431
	DD	imagerel $unwind$s370_or_character
$pdata$s370_or_immediate DD imagerel $LN41
	DD	imagerel $LN41+516
	DD	imagerel $unwind$s370_or_immediate
$pdata$s370_or_register DD imagerel $LN17
	DD	imagerel $LN17+362
	DD	imagerel $unwind$s370_or_register
$pdata$s370_pack DD imagerel $LN17
	DD	imagerel $LN17+817
	DD	imagerel $unwind$s370_pack
$pdata$s370_set_program_mask DD imagerel $LN7
	DD	imagerel $LN7+174
	DD	imagerel $unwind$s370_set_program_mask
$pdata$s370_shift_left_double DD imagerel $LN33
	DD	imagerel $LN33+899
	DD	imagerel $unwind$s370_shift_left_double
$pdata$s370_shift_left_double_logical DD imagerel $LN18
	DD	imagerel $LN18+540
	DD	imagerel $unwind$s370_shift_left_double_logical
$pdata$s370_shift_left_single DD imagerel $LN30
	DD	imagerel $LN30+784
	DD	imagerel $unwind$s370_shift_left_single
$pdata$s370_shift_left_single_logical DD imagerel $LN19
	DD	imagerel $LN19+423
	DD	imagerel $unwind$s370_shift_left_single_logical
$pdata$s370_shift_right_double DD imagerel $LN22
	DD	imagerel $LN22+605
	DD	imagerel $unwind$s370_shift_right_double
$pdata$s370_shift_right_double_logical DD imagerel $LN18
	DD	imagerel $LN18+540
	DD	imagerel $unwind$s370_shift_right_double_logical
$pdata$s370_shift_right_single DD imagerel $LN25
	DD	imagerel $LN25+550
	DD	imagerel $unwind$s370_shift_right_single
$pdata$s370_shift_right_single_logical DD imagerel $LN19
	DD	imagerel $LN19+423
	DD	imagerel $unwind$s370_shift_right_single_logical
$pdata$s370_store_characters_under_mask DD imagerel $LN19
	DD	imagerel $LN19+608
	DD	imagerel $unwind$s370_store_characters_under_mask
$pdata$s370_store_clock DD imagerel $LN9
	DD	imagerel $LN9+405
	DD	imagerel $unwind$s370_store_clock
$pdata$s370_store_halfword DD imagerel $LN16
	DD	imagerel $LN16+321
	DD	imagerel $unwind$s370_store_halfword
$pdata$s370_store_multiple DD imagerel $LN67
	DD	imagerel $LN67+1501
	DD	imagerel $unwind$s370_store_multiple
$pdata$s370_subtract DD imagerel $LN25
	DD	imagerel $LN25+559
	DD	imagerel $unwind$s370_subtract
$pdata$s370_subtract_halfword DD imagerel $LN25
	DD	imagerel $LN25+560
	DD	imagerel $unwind$s370_subtract_halfword
$pdata$s370_subtract_logical DD imagerel $LN24
	DD	imagerel $LN24+508
	DD	imagerel $unwind$s370_subtract_logical
$pdata$s370_subtract_logical_register DD imagerel $LN21
	DD	imagerel $LN21+408
	DD	imagerel $unwind$s370_subtract_logical_register
$pdata$s370_subtract_register DD imagerel $LN16
	DD	imagerel $LN16+392
	DD	imagerel $unwind$s370_subtract_register
$pdata$s370_supervisor_call DD imagerel $LN31
	DD	imagerel $LN31+965
	DD	imagerel $unwind$s370_supervisor_call
$pdata$s370_test_and_set DD imagerel $LN48
	DD	imagerel $LN48+619
	DD	imagerel $unwind$s370_test_and_set
$pdata$s370_test_under_mask DD imagerel $LN12
	DD	imagerel $LN12+291
	DD	imagerel $unwind$s370_test_under_mask
$pdata$s370_translate DD imagerel $LN54
	DD	imagerel $LN54+1724
	DD	imagerel $unwind$s370_translate
$pdata$s370_translate_and_test DD imagerel $LN71
	DD	imagerel $LN71+1333
	DD	imagerel $unwind$s370_translate_and_test
$pdata$s370_unpack DD imagerel $LN17
	DD	imagerel $LN17+853
	DD	imagerel $unwind$s370_unpack
$pdata$s370_update_tree DD imagerel $LN35
	DD	imagerel $LN35+986
	DD	imagerel $unwind$s370_update_tree
$pdata$s370_9180 DD imagerel $LN10
	DD	imagerel $LN10+213
	DD	imagerel $unwind$s370_9180
$pdata$s370_9140 DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$s370_9140
$pdata$s370_9120 DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$s370_9120
$pdata$s370_9110 DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$s370_9110
$pdata$s370_9108 DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$s370_9108
$pdata$s370_9104 DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$s370_9104
$pdata$s370_9102 DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$s370_9102
$pdata$s370_9101 DD imagerel $LN10
	DD	imagerel $LN10+211
	DD	imagerel $unwind$s370_9101
$pdata$s370_1F00 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F00
$pdata$s370_1F01 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F01
$pdata$s370_1F02 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F02
$pdata$s370_1F03 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F03
$pdata$s370_1F04 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F04
$pdata$s370_1F05 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F05
$pdata$s370_1F06 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F06
$pdata$s370_1F07 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F07
$pdata$s370_1F08 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F08
$pdata$s370_1F09 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F09
$pdata$s370_1F0A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F0A
$pdata$s370_1F0B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F0B
$pdata$s370_1F0C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F0C
$pdata$s370_1F0D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F0D
$pdata$s370_1F0E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F0E
$pdata$s370_1F0F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F0F
$pdata$s370_1F10 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F10
$pdata$s370_1F11 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F11
$pdata$s370_1F12 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F12
$pdata$s370_1F13 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F13
$pdata$s370_1F14 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F14
$pdata$s370_1F15 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F15
$pdata$s370_1F16 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F16
$pdata$s370_1F17 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F17
$pdata$s370_1F18 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F18
$pdata$s370_1F19 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F19
$pdata$s370_1F1A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F1A
$pdata$s370_1F1B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F1B
$pdata$s370_1F1C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F1C
$pdata$s370_1F1D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F1D
$pdata$s370_1F1E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F1E
$pdata$s370_1F1F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F1F
$pdata$s370_1F20 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F20
$pdata$s370_1F21 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F21
$pdata$s370_1F22 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F22
$pdata$s370_1F23 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F23
$pdata$s370_1F24 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F24
$pdata$s370_1F25 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F25
$pdata$s370_1F26 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F26
$pdata$s370_1F27 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F27
$pdata$s370_1F28 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F28
$pdata$s370_1F29 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F29
$pdata$s370_1F2A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F2A
$pdata$s370_1F2B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F2B
$pdata$s370_1F2C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F2C
$pdata$s370_1F2D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F2D
$pdata$s370_1F2E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F2E
$pdata$s370_1F2F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F2F
$pdata$s370_1F30 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F30
$pdata$s370_1F31 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F31
$pdata$s370_1F32 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F32
$pdata$s370_1F33 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F33
$pdata$s370_1F34 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F34
$pdata$s370_1F35 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F35
$pdata$s370_1F36 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F36
$pdata$s370_1F37 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F37
$pdata$s370_1F38 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F38
$pdata$s370_1F39 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F39
$pdata$s370_1F3A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F3A
$pdata$s370_1F3B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F3B
$pdata$s370_1F3C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F3C
$pdata$s370_1F3D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F3D
$pdata$s370_1F3E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F3E
$pdata$s370_1F3F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F3F
$pdata$s370_1F40 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F40
$pdata$s370_1F41 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F41
$pdata$s370_1F42 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F42
$pdata$s370_1F43 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F43
$pdata$s370_1F44 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F44
$pdata$s370_1F45 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F45
$pdata$s370_1F46 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F46
$pdata$s370_1F47 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F47
$pdata$s370_1F48 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F48
$pdata$s370_1F49 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F49
$pdata$s370_1F4A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F4A
$pdata$s370_1F4B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F4B
$pdata$s370_1F4C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F4C
$pdata$s370_1F4D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F4D
$pdata$s370_1F4E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F4E
$pdata$s370_1F4F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F4F
$pdata$s370_1F50 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F50
$pdata$s370_1F51 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F51
$pdata$s370_1F52 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F52
$pdata$s370_1F53 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F53
$pdata$s370_1F54 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F54
$pdata$s370_1F55 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F55
$pdata$s370_1F56 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F56
$pdata$s370_1F57 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F57
$pdata$s370_1F58 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F58
$pdata$s370_1F59 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F59
$pdata$s370_1F5A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F5A
$pdata$s370_1F5B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F5B
$pdata$s370_1F5C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F5C
$pdata$s370_1F5D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F5D
$pdata$s370_1F5E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F5E
$pdata$s370_1F5F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F5F
$pdata$s370_1F60 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F60
$pdata$s370_1F61 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F61
$pdata$s370_1F62 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F62
$pdata$s370_1F63 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F63
$pdata$s370_1F64 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F64
$pdata$s370_1F65 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F65
$pdata$s370_1F66 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F66
$pdata$s370_1F67 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F67
$pdata$s370_1F68 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F68
$pdata$s370_1F69 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F69
$pdata$s370_1F6A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F6A
$pdata$s370_1F6B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F6B
$pdata$s370_1F6C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F6C
$pdata$s370_1F6D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F6D
$pdata$s370_1F6E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F6E
$pdata$s370_1F6F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F6F
$pdata$s370_1F70 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F70
$pdata$s370_1F71 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F71
$pdata$s370_1F72 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F72
$pdata$s370_1F73 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F73
$pdata$s370_1F74 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F74
$pdata$s370_1F75 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F75
$pdata$s370_1F76 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F76
$pdata$s370_1F77 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F77
$pdata$s370_1F78 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F78
$pdata$s370_1F79 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F79
$pdata$s370_1F7A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F7A
$pdata$s370_1F7B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F7B
$pdata$s370_1F7C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F7C
$pdata$s370_1F7D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F7D
$pdata$s370_1F7E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F7E
$pdata$s370_1F7F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F7F
$pdata$s370_1F80 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F80
$pdata$s370_1F81 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F81
$pdata$s370_1F82 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F82
$pdata$s370_1F83 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F83
$pdata$s370_1F84 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F84
$pdata$s370_1F85 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F85
$pdata$s370_1F86 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F86
$pdata$s370_1F87 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F87
$pdata$s370_1F88 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F88
$pdata$s370_1F89 DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F89
$pdata$s370_1F8A DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F8A
$pdata$s370_1F8B DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F8B
$pdata$s370_1F8C DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F8C
$pdata$s370_1F8D DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F8D
$pdata$s370_1F8E DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F8E
$pdata$s370_1F8F DD imagerel $LN18
	DD	imagerel $LN18+284
	DD	imagerel $unwind$s370_1F8F
$pdata$s370_1F90 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F90
$pdata$s370_1F91 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F91
$pdata$s370_1F92 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F92
$pdata$s370_1F93 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F93
$pdata$s370_1F94 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F94
$pdata$s370_1F95 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F95
$pdata$s370_1F96 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F96
$pdata$s370_1F97 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F97
$pdata$s370_1F98 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F98
$pdata$s370_1F99 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F99
$pdata$s370_1F9A DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F9A
$pdata$s370_1F9B DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F9B
$pdata$s370_1F9C DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F9C
$pdata$s370_1F9D DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F9D
$pdata$s370_1F9E DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F9E
$pdata$s370_1F9F DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1F9F
$pdata$s370_1FA0 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA0
$pdata$s370_1FA1 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA1
$pdata$s370_1FA2 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA2
$pdata$s370_1FA3 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA3
$pdata$s370_1FA4 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA4
$pdata$s370_1FA5 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA5
$pdata$s370_1FA6 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA6
$pdata$s370_1FA7 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA7
$pdata$s370_1FA8 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA8
$pdata$s370_1FA9 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FA9
$pdata$s370_1FAA DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FAA
$pdata$s370_1FAB DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FAB
$pdata$s370_1FAC DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FAC
$pdata$s370_1FAD DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FAD
$pdata$s370_1FAE DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FAE
$pdata$s370_1FAF DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FAF
$pdata$s370_1FB0 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB0
$pdata$s370_1FB1 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB1
$pdata$s370_1FB2 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB2
$pdata$s370_1FB3 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB3
$pdata$s370_1FB4 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB4
$pdata$s370_1FB5 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB5
$pdata$s370_1FB6 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB6
$pdata$s370_1FB7 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB7
$pdata$s370_1FB8 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB8
$pdata$s370_1FB9 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FB9
$pdata$s370_1FBA DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FBA
$pdata$s370_1FBB DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FBB
$pdata$s370_1FBC DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FBC
$pdata$s370_1FBD DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FBD
$pdata$s370_1FBE DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FBE
$pdata$s370_1FBF DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FBF
$pdata$s370_1FC0 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC0
$pdata$s370_1FC1 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC1
$pdata$s370_1FC2 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC2
$pdata$s370_1FC3 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC3
$pdata$s370_1FC4 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC4
$pdata$s370_1FC5 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC5
$pdata$s370_1FC6 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC6
$pdata$s370_1FC7 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC7
$pdata$s370_1FC8 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC8
$pdata$s370_1FC9 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FC9
$pdata$s370_1FCA DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FCA
$pdata$s370_1FCB DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FCB
$pdata$s370_1FCC DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FCC
$pdata$s370_1FCD DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FCD
$pdata$s370_1FCE DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FCE
$pdata$s370_1FCF DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FCF
$pdata$s370_1FD0 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD0
$pdata$s370_1FD1 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD1
$pdata$s370_1FD2 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD2
$pdata$s370_1FD3 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD3
$pdata$s370_1FD4 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD4
$pdata$s370_1FD5 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD5
$pdata$s370_1FD6 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD6
$pdata$s370_1FD7 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD7
$pdata$s370_1FD8 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD8
$pdata$s370_1FD9 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FD9
$pdata$s370_1FDA DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FDA
$pdata$s370_1FDB DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FDB
$pdata$s370_1FDC DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FDC
$pdata$s370_1FDD DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FDD
$pdata$s370_1FDE DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FDE
$pdata$s370_1FDF DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FDF
$pdata$s370_1FE0 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE0
$pdata$s370_1FE1 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE1
$pdata$s370_1FE2 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE2
$pdata$s370_1FE3 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE3
$pdata$s370_1FE4 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE4
$pdata$s370_1FE5 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE5
$pdata$s370_1FE6 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE6
$pdata$s370_1FE7 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE7
$pdata$s370_1FE8 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE8
$pdata$s370_1FE9 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FE9
$pdata$s370_1FEA DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FEA
$pdata$s370_1FEB DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FEB
$pdata$s370_1FEC DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FEC
$pdata$s370_1FED DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FED
$pdata$s370_1FEE DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FEE
$pdata$s370_1FEF DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FEF
$pdata$s370_1FF0 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF0
$pdata$s370_1FF1 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF1
$pdata$s370_1FF2 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF2
$pdata$s370_1FF3 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF3
$pdata$s370_1FF4 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF4
$pdata$s370_1FF5 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF5
$pdata$s370_1FF6 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF6
$pdata$s370_1FF7 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF7
$pdata$s370_1FF8 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF8
$pdata$s370_1FF9 DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FF9
$pdata$s370_1FFA DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FFA
$pdata$s370_1FFB DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FFB
$pdata$s370_1FFC DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FFC
$pdata$s370_1FFD DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FFD
$pdata$s370_1FFE DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FFE
$pdata$s370_1FFF DD imagerel $LN18
	DD	imagerel $LN18+282
	DD	imagerel $unwind$s370_1FFF
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmpxchg4_x86 DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$cmpxchg4_x86
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmpxchg1_x86 DD imagerel $LN3
	DD	imagerel $LN3+300
	DD	imagerel $unwind$cmpxchg1_x86
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_dw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_dw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$Interrupt_Lock_Obtained DD imagerel Interrupt_Lock_Obtained
	DD	imagerel Interrupt_Lock_Obtained+269
	DD	imagerel $unwind$Interrupt_Lock_Obtained
$pdata$Obtain_Interrupt_Lock DD imagerel Obtain_Interrupt_Lock
	DD	imagerel Obtain_Interrupt_Lock+88
	DD	imagerel $unwind$Obtain_Interrupt_Lock
$pdata$Release_Interrupt_Lock DD imagerel Release_Interrupt_Lock
	DD	imagerel Release_Interrupt_Lock+71
	DD	imagerel $unwind$Release_Interrupt_Lock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_get_storekey_ptr DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$_get_storekey_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+170
	DD	imagerel $unwind$s370__or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s370_or_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s370_or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_storage_key_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$s370_or_storage_key_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sub_logical DD imagerel $LN7
	DD	imagerel $LN7+110
	DD	imagerel $unwind$sub_logical
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sub_signed DD imagerel $LN11
	DD	imagerel $LN11+186
	DD	imagerel $unwind$sub_signed
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_per1_gra DD imagerel $LN7
	DD	imagerel $LN7+149
	DD	imagerel $unwind$s370_per1_gra
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_maddr_l DD imagerel $LN14
	DD	imagerel $LN14+474
	DD	imagerel $unwind$s370_maddr_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore2_full DD imagerel $LN3
	DD	imagerel $LN3+204
	DD	imagerel $unwind$s370_vstore2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore4_full DD imagerel $LN3
	DD	imagerel $LN3+313
	DD	imagerel $unwind$s370_vstore4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore8_full DD imagerel $LN3
	DD	imagerel $LN3+356
	DD	imagerel $unwind$s370_vstore8_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch2_full DD imagerel $LN3
	DD	imagerel $LN3+174
	DD	imagerel $unwind$s370_vfetch2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch4_full DD imagerel $LN3
	DD	imagerel $LN3+288
	DD	imagerel $unwind$s370_vfetch4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstorec DD imagerel $LN24
	DD	imagerel $LN24+597
	DD	imagerel $unwind$s370_vstorec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstoreb DD imagerel $LN18
	DD	imagerel $LN18+169
	DD	imagerel $unwind$s370_vstoreb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore2 DD imagerel $LN24
	DD	imagerel $LN24+267
	DD	imagerel $unwind$s370_vstore2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore4 DD imagerel $LN27
	DD	imagerel $LN27+289
	DD	imagerel $unwind$s370_vstore4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore8 DD imagerel $LN24
	DD	imagerel $LN24+253
	DD	imagerel $unwind$s370_vstore8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetchc DD imagerel $LN24
	DD	imagerel $LN24+528
	DD	imagerel $unwind$s370_vfetchc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetchb DD imagerel $LN18
	DD	imagerel $LN18+160
	DD	imagerel $unwind$s370_vfetchb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch2 DD imagerel $LN26
	DD	imagerel $LN26+275
	DD	imagerel $unwind$s370_vfetch2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch4 DD imagerel $LN26
	DD	imagerel $LN26+275
	DD	imagerel $unwind$s370_vfetch4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_validate_operand DD imagerel $LN24
	DD	imagerel $LN24+271
	DD	imagerel $unwind$s370_validate_operand
pdata	ENDS
pdata	SEGMENT
$pdata$s370_translate_and_test_xxx_extended DD imagerel $LN63
	DD	imagerel $LN63+1705
	DD	imagerel $unwind$s370_translate_and_test_xxx_extended
$pdata$s390_set_access_register DD imagerel $LN15
	DD	imagerel $LN15+290
	DD	imagerel $unwind$s390_set_access_register
$pdata$s390_store_access_multiple DD imagerel $LN22
	DD	imagerel $LN22+713
	DD	imagerel $unwind$s390_store_access_multiple
$pdata$s390_store_clock_extended DD imagerel $LN9
	DD	imagerel $LN9+433
	DD	imagerel $unwind$s390_store_clock_extended
$pdata$s390_translate_extended DD imagerel $LN15
	DD	imagerel $LN15+712
	DD	imagerel $unwind$s390_translate_extended
$pdata$s390_test_under_mask_high DD imagerel $LN16
	DD	imagerel $LN16+317
	DD	imagerel $unwind$s390_test_under_mask_high
$pdata$s390_test_under_mask_low DD imagerel $LN16
	DD	imagerel $LN16+317
	DD	imagerel $unwind$s390_test_under_mask_low
$pdata$s390_perform_locked_operation DD imagerel $LN61
	DD	imagerel $LN61+2180
	DD	imagerel $unwind$s390_perform_locked_operation
$pdata$s390_search_string DD imagerel $LN35
	DD	imagerel $LN35+1054
	DD	imagerel $unwind$s390_search_string
$pdata$s390_or DD imagerel $LN18
	DD	imagerel $LN18+402
	DD	imagerel $unwind$s390_or
$pdata$s390_or_character DD imagerel $LN92
	DD	imagerel $LN92+3037
	DD	imagerel $unwind$s390_or_character
$pdata$s390_or_immediate DD imagerel $LN11
	DD	imagerel $LN11+336
	DD	imagerel $unwind$s390_or_immediate
$pdata$s390_or_register DD imagerel $LN9
	DD	imagerel $LN9+210
	DD	imagerel $unwind$s390_or_register
$pdata$s390_pack DD imagerel $LN17
	DD	imagerel $LN17+867
	DD	imagerel $unwind$s390_pack
$pdata$s390_set_program_mask DD imagerel $LN7
	DD	imagerel $LN7+174
	DD	imagerel $unwind$s390_set_program_mask
$pdata$s390_shift_left_double DD imagerel $LN25
	DD	imagerel $LN25+731
	DD	imagerel $unwind$s390_shift_left_double
$pdata$s390_shift_left_double_logical DD imagerel $LN10
	DD	imagerel $LN10+384
	DD	imagerel $unwind$s390_shift_left_double_logical
$pdata$s390_shift_left_single DD imagerel $LN22
	DD	imagerel $LN22+642
	DD	imagerel $unwind$s390_shift_left_single
$pdata$s390_shift_left_single_logical DD imagerel $LN11
	DD	imagerel $LN11+284
	DD	imagerel $unwind$s390_shift_left_single_logical
$pdata$s390_shift_right_double DD imagerel $LN14
	DD	imagerel $LN14+449
	DD	imagerel $unwind$s390_shift_right_double
$pdata$s390_shift_right_double_logical DD imagerel $LN10
	DD	imagerel $LN10+384
	DD	imagerel $unwind$s390_shift_right_double_logical
$pdata$s390_shift_right_single DD imagerel $LN17
	DD	imagerel $LN17+411
	DD	imagerel $unwind$s390_shift_right_single
$pdata$s390_shift_right_single_logical DD imagerel $LN11
	DD	imagerel $LN11+284
	DD	imagerel $unwind$s390_shift_right_single_logical
$pdata$s390_store_characters_under_mask DD imagerel $LN19
	DD	imagerel $LN19+618
	DD	imagerel $unwind$s390_store_characters_under_mask
$pdata$s390_store_clock DD imagerel $LN9
	DD	imagerel $LN9+418
	DD	imagerel $unwind$s390_store_clock
$pdata$s390_store_halfword DD imagerel $LN16
	DD	imagerel $LN16+331
	DD	imagerel $unwind$s390_store_halfword
$pdata$s390_store_multiple DD imagerel $LN52
	DD	imagerel $LN52+1425
	DD	imagerel $unwind$s390_store_multiple
$pdata$s390_subtract DD imagerel $LN17
	DD	imagerel $LN17+420
	DD	imagerel $unwind$s390_subtract
$pdata$s390_subtract_halfword DD imagerel $LN17
	DD	imagerel $LN17+421
	DD	imagerel $unwind$s390_subtract_halfword
$pdata$s390_subtract_logical DD imagerel $LN16
	DD	imagerel $LN16+369
	DD	imagerel $unwind$s390_subtract_logical
$pdata$s390_subtract_logical_register DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$s390_subtract_logical_register
$pdata$s390_subtract_register DD imagerel $LN8
	DD	imagerel $LN8+243
	DD	imagerel $unwind$s390_subtract_register
$pdata$s390_supervisor_call DD imagerel $LN31
	DD	imagerel $LN31+1115
	DD	imagerel $unwind$s390_supervisor_call
$pdata$s390_test_and_set DD imagerel $LN18
	DD	imagerel $LN18+467
	DD	imagerel $unwind$s390_test_and_set
$pdata$s390_test_under_mask DD imagerel $LN12
	DD	imagerel $LN12+301
	DD	imagerel $unwind$s390_test_under_mask
$pdata$s390_translate DD imagerel $LN54
	DD	imagerel $LN54+1778
	DD	imagerel $unwind$s390_translate
$pdata$s390_translate_and_test DD imagerel $LN62
	DD	imagerel $LN62+1226
	DD	imagerel $unwind$s390_translate_and_test
$pdata$s390_unpack DD imagerel $LN17
	DD	imagerel $LN17+918
	DD	imagerel $unwind$s390_unpack
$pdata$s390_update_tree DD imagerel $LN19
	DD	imagerel $LN19+701
	DD	imagerel $unwind$s390_update_tree
$pdata$s390_9180 DD imagerel $LN10
	DD	imagerel $LN10+223
	DD	imagerel $unwind$s390_9180
$pdata$s390_9140 DD imagerel $LN10
	DD	imagerel $LN10+221
	DD	imagerel $unwind$s390_9140
$pdata$s390_9120 DD imagerel $LN10
	DD	imagerel $LN10+221
	DD	imagerel $unwind$s390_9120
$pdata$s390_9110 DD imagerel $LN10
	DD	imagerel $LN10+221
	DD	imagerel $unwind$s390_9110
$pdata$s390_9108 DD imagerel $LN10
	DD	imagerel $LN10+221
	DD	imagerel $unwind$s390_9108
$pdata$s390_9104 DD imagerel $LN10
	DD	imagerel $LN10+221
	DD	imagerel $unwind$s390_9104
$pdata$s390_9102 DD imagerel $LN10
	DD	imagerel $LN10+221
	DD	imagerel $unwind$s390_9102
$pdata$s390_9101 DD imagerel $LN10
	DD	imagerel $LN10+221
	DD	imagerel $unwind$s390_9101
$pdata$s390_1F00 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F00
$pdata$s390_1F01 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F01
$pdata$s390_1F02 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F02
$pdata$s390_1F03 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F03
$pdata$s390_1F04 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F04
$pdata$s390_1F05 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F05
$pdata$s390_1F06 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F06
$pdata$s390_1F07 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F07
$pdata$s390_1F08 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F08
$pdata$s390_1F09 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F09
$pdata$s390_1F0A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F0A
$pdata$s390_1F0B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F0B
$pdata$s390_1F0C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F0C
$pdata$s390_1F0D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F0D
$pdata$s390_1F0E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F0E
$pdata$s390_1F0F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F0F
$pdata$s390_1F10 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F10
$pdata$s390_1F11 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F11
$pdata$s390_1F12 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F12
$pdata$s390_1F13 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F13
$pdata$s390_1F14 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F14
$pdata$s390_1F15 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F15
$pdata$s390_1F16 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F16
$pdata$s390_1F17 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F17
$pdata$s390_1F18 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F18
$pdata$s390_1F19 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F19
$pdata$s390_1F1A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F1A
$pdata$s390_1F1B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F1B
$pdata$s390_1F1C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F1C
$pdata$s390_1F1D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F1D
$pdata$s390_1F1E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F1E
$pdata$s390_1F1F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F1F
$pdata$s390_1F20 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F20
$pdata$s390_1F21 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F21
$pdata$s390_1F22 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F22
$pdata$s390_1F23 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F23
$pdata$s390_1F24 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F24
$pdata$s390_1F25 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F25
$pdata$s390_1F26 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F26
$pdata$s390_1F27 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F27
$pdata$s390_1F28 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F28
$pdata$s390_1F29 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F29
$pdata$s390_1F2A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F2A
$pdata$s390_1F2B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F2B
$pdata$s390_1F2C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F2C
$pdata$s390_1F2D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F2D
$pdata$s390_1F2E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F2E
$pdata$s390_1F2F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F2F
$pdata$s390_1F30 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F30
$pdata$s390_1F31 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F31
$pdata$s390_1F32 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F32
$pdata$s390_1F33 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F33
$pdata$s390_1F34 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F34
$pdata$s390_1F35 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F35
$pdata$s390_1F36 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F36
$pdata$s390_1F37 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F37
$pdata$s390_1F38 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F38
$pdata$s390_1F39 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F39
$pdata$s390_1F3A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F3A
$pdata$s390_1F3B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F3B
$pdata$s390_1F3C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F3C
$pdata$s390_1F3D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F3D
$pdata$s390_1F3E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F3E
$pdata$s390_1F3F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F3F
$pdata$s390_1F40 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F40
$pdata$s390_1F41 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F41
$pdata$s390_1F42 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F42
$pdata$s390_1F43 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F43
$pdata$s390_1F44 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F44
$pdata$s390_1F45 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F45
$pdata$s390_1F46 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F46
$pdata$s390_1F47 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F47
$pdata$s390_1F48 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F48
$pdata$s390_1F49 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F49
$pdata$s390_1F4A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F4A
$pdata$s390_1F4B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F4B
$pdata$s390_1F4C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F4C
$pdata$s390_1F4D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F4D
$pdata$s390_1F4E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F4E
$pdata$s390_1F4F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F4F
$pdata$s390_1F50 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F50
$pdata$s390_1F51 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F51
$pdata$s390_1F52 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F52
$pdata$s390_1F53 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F53
$pdata$s390_1F54 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F54
$pdata$s390_1F55 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F55
$pdata$s390_1F56 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F56
$pdata$s390_1F57 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F57
$pdata$s390_1F58 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F58
$pdata$s390_1F59 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F59
$pdata$s390_1F5A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F5A
$pdata$s390_1F5B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F5B
$pdata$s390_1F5C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F5C
$pdata$s390_1F5D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F5D
$pdata$s390_1F5E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F5E
$pdata$s390_1F5F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F5F
$pdata$s390_1F60 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F60
$pdata$s390_1F61 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F61
$pdata$s390_1F62 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F62
$pdata$s390_1F63 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F63
$pdata$s390_1F64 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F64
$pdata$s390_1F65 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F65
$pdata$s390_1F66 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F66
$pdata$s390_1F67 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F67
$pdata$s390_1F68 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F68
$pdata$s390_1F69 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F69
$pdata$s390_1F6A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F6A
$pdata$s390_1F6B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F6B
$pdata$s390_1F6C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F6C
$pdata$s390_1F6D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F6D
$pdata$s390_1F6E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F6E
$pdata$s390_1F6F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F6F
$pdata$s390_1F70 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F70
$pdata$s390_1F71 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F71
$pdata$s390_1F72 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F72
$pdata$s390_1F73 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F73
$pdata$s390_1F74 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F74
$pdata$s390_1F75 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F75
$pdata$s390_1F76 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F76
$pdata$s390_1F77 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F77
$pdata$s390_1F78 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F78
$pdata$s390_1F79 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F79
$pdata$s390_1F7A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F7A
$pdata$s390_1F7B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F7B
$pdata$s390_1F7C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F7C
$pdata$s390_1F7D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F7D
$pdata$s390_1F7E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F7E
$pdata$s390_1F7F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F7F
$pdata$s390_1F80 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F80
$pdata$s390_1F81 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F81
$pdata$s390_1F82 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F82
$pdata$s390_1F83 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F83
$pdata$s390_1F84 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F84
$pdata$s390_1F85 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F85
$pdata$s390_1F86 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F86
$pdata$s390_1F87 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F87
$pdata$s390_1F88 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F88
$pdata$s390_1F89 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F89
$pdata$s390_1F8A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F8A
$pdata$s390_1F8B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F8B
$pdata$s390_1F8C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F8C
$pdata$s390_1F8D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F8D
$pdata$s390_1F8E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F8E
$pdata$s390_1F8F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F8F
$pdata$s390_1F90 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F90
$pdata$s390_1F91 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F91
$pdata$s390_1F92 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F92
$pdata$s390_1F93 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F93
$pdata$s390_1F94 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F94
$pdata$s390_1F95 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F95
$pdata$s390_1F96 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F96
$pdata$s390_1F97 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F97
$pdata$s390_1F98 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F98
$pdata$s390_1F99 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F99
$pdata$s390_1F9A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F9A
$pdata$s390_1F9B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F9B
$pdata$s390_1F9C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F9C
$pdata$s390_1F9D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F9D
$pdata$s390_1F9E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F9E
$pdata$s390_1F9F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1F9F
$pdata$s390_1FA0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA0
$pdata$s390_1FA1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA1
$pdata$s390_1FA2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA2
$pdata$s390_1FA3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA3
$pdata$s390_1FA4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA4
$pdata$s390_1FA5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA5
$pdata$s390_1FA6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA6
$pdata$s390_1FA7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA7
$pdata$s390_1FA8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA8
$pdata$s390_1FA9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FA9
$pdata$s390_1FAA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FAA
$pdata$s390_1FAB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FAB
$pdata$s390_1FAC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FAC
$pdata$s390_1FAD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FAD
$pdata$s390_1FAE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FAE
$pdata$s390_1FAF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FAF
$pdata$s390_1FB0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB0
$pdata$s390_1FB1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB1
$pdata$s390_1FB2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB2
$pdata$s390_1FB3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB3
$pdata$s390_1FB4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB4
$pdata$s390_1FB5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB5
$pdata$s390_1FB6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB6
$pdata$s390_1FB7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB7
$pdata$s390_1FB8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB8
$pdata$s390_1FB9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FB9
$pdata$s390_1FBA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FBA
$pdata$s390_1FBB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FBB
$pdata$s390_1FBC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FBC
$pdata$s390_1FBD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FBD
$pdata$s390_1FBE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FBE
$pdata$s390_1FBF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FBF
$pdata$s390_1FC0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC0
$pdata$s390_1FC1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC1
$pdata$s390_1FC2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC2
$pdata$s390_1FC3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC3
$pdata$s390_1FC4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC4
$pdata$s390_1FC5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC5
$pdata$s390_1FC6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC6
$pdata$s390_1FC7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC7
$pdata$s390_1FC8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC8
$pdata$s390_1FC9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FC9
$pdata$s390_1FCA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FCA
$pdata$s390_1FCB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FCB
$pdata$s390_1FCC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FCC
$pdata$s390_1FCD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FCD
$pdata$s390_1FCE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FCE
$pdata$s390_1FCF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FCF
$pdata$s390_1FD0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD0
$pdata$s390_1FD1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD1
$pdata$s390_1FD2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD2
$pdata$s390_1FD3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD3
$pdata$s390_1FD4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD4
$pdata$s390_1FD5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD5
$pdata$s390_1FD6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD6
$pdata$s390_1FD7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD7
$pdata$s390_1FD8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD8
$pdata$s390_1FD9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FD9
$pdata$s390_1FDA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FDA
$pdata$s390_1FDB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FDB
$pdata$s390_1FDC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FDC
$pdata$s390_1FDD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FDD
$pdata$s390_1FDE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FDE
$pdata$s390_1FDF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FDF
$pdata$s390_1FE0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE0
$pdata$s390_1FE1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE1
$pdata$s390_1FE2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE2
$pdata$s390_1FE3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE3
$pdata$s390_1FE4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE4
$pdata$s390_1FE5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE5
$pdata$s390_1FE6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE6
$pdata$s390_1FE7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE7
$pdata$s390_1FE8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE8
$pdata$s390_1FE9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FE9
$pdata$s390_1FEA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FEA
$pdata$s390_1FEB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FEB
$pdata$s390_1FEC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FEC
$pdata$s390_1FED DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FED
$pdata$s390_1FEE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FEE
$pdata$s390_1FEF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FEF
$pdata$s390_1FF0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF0
$pdata$s390_1FF1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF1
$pdata$s390_1FF2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF2
$pdata$s390_1FF3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF3
$pdata$s390_1FF4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF4
$pdata$s390_1FF5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF5
$pdata$s390_1FF6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF6
$pdata$s390_1FF7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF7
$pdata$s390_1FF8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF8
$pdata$s390_1FF9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FF9
$pdata$s390_1FFA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FFA
$pdata$s390_1FFB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FFB
$pdata$s390_1FFC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FFC
$pdata$s390_1FFD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FFD
$pdata$s390_1FFE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FFE
$pdata$s390_1FFF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$s390_1FFF
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+159
	DD	imagerel $unwind$s390__or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s390_or_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s390_or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_storage_key_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$s390_or_storage_key_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_maddr_l DD imagerel $LN14
	DD	imagerel $LN14+474
	DD	imagerel $unwind$s390_maddr_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstore2_full DD imagerel $LN3
	DD	imagerel $LN3+210
	DD	imagerel $unwind$s390_vstore2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstore4_full DD imagerel $LN3
	DD	imagerel $LN3+321
	DD	imagerel $unwind$s390_vstore4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstore8_full DD imagerel $LN3
	DD	imagerel $LN3+364
	DD	imagerel $unwind$s390_vstore8_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vfetch2_full DD imagerel $LN3
	DD	imagerel $LN3+180
	DD	imagerel $unwind$s390_vfetch2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vfetch4_full DD imagerel $LN3
	DD	imagerel $LN3+296
	DD	imagerel $unwind$s390_vfetch4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstorec DD imagerel $LN9
	DD	imagerel $LN9+498
	DD	imagerel $unwind$s390_vstorec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstoreb DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$s390_vstoreb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstore2 DD imagerel $LN9
	DD	imagerel $LN9+179
	DD	imagerel $unwind$s390_vstore2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstore4 DD imagerel $LN12
	DD	imagerel $LN12+200
	DD	imagerel $unwind$s390_vstore4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vstore8 DD imagerel $LN9
	DD	imagerel $LN9+168
	DD	imagerel $unwind$s390_vstore8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vfetchc DD imagerel $LN9
	DD	imagerel $LN9+432
	DD	imagerel $unwind$s390_vfetchc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vfetchb DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$s390_vfetchb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vfetch2 DD imagerel $LN11
	DD	imagerel $LN11+187
	DD	imagerel $unwind$s390_vfetch2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_vfetch4 DD imagerel $LN11
	DD	imagerel $LN11+186
	DD	imagerel $unwind$s390_vfetch4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_validate_operand DD imagerel $LN8
	DD	imagerel $LN8+185
	DD	imagerel $unwind$s390_validate_operand
pdata	ENDS
pdata	SEGMENT
$pdata$z900_convert_utf16_to_utf32 DD imagerel $LN50
	DD	imagerel $LN50+1799
	DD	imagerel $unwind$z900_convert_utf16_to_utf32
$pdata$z900_convert_utf32_to_utf16 DD imagerel $LN45
	DD	imagerel $LN45+1653
	DD	imagerel $unwind$z900_convert_utf32_to_utf16
$pdata$z900_convert_utf32_to_utf8 DD imagerel $LN54
	DD	imagerel $LN54+2036
	DD	imagerel $unwind$z900_convert_utf32_to_utf8
$pdata$z900_convert_utf8_to_utf32 DD imagerel $LN89
	DD	imagerel $LN89+3515
	DD	imagerel $unwind$z900_convert_utf8_to_utf32
$pdata$z900_search_string_unicode DD imagerel $LN28
	DD	imagerel $LN28+731
	DD	imagerel $unwind$z900_search_string_unicode
$pdata$z900_translate_and_test_reverse DD imagerel $LN30
	DD	imagerel $LN30+1221
	DD	imagerel $unwind$z900_translate_and_test_reverse
$pdata$z900_translate_and_test_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_translate_and_test_extended
$pdata$z900_translate_and_test_reverse_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_translate_and_test_reverse_extended
$pdata$z900_set_access_register DD imagerel $LN19
	DD	imagerel $LN19+400
	DD	imagerel $unwind$z900_set_access_register
$pdata$z900_store_access_multiple DD imagerel $LN22
	DD	imagerel $LN22+762
	DD	imagerel $unwind$z900_store_access_multiple
$pdata$z900_store_clock_extended DD imagerel $LN9
	DD	imagerel $LN9+471
	DD	imagerel $unwind$z900_store_clock_extended
$pdata$z900_translate_extended DD imagerel $LN31
	DD	imagerel $LN31+1048
	DD	imagerel $unwind$z900_translate_extended
$pdata$z900_test_under_mask_high DD imagerel $LN16
	DD	imagerel $LN16+317
	DD	imagerel $unwind$z900_test_under_mask_high
$pdata$z900_test_under_mask_low DD imagerel $LN16
	DD	imagerel $LN16+317
	DD	imagerel $unwind$z900_test_under_mask_low
$pdata$z900_perform_locked_operation DD imagerel $LN89
	DD	imagerel $LN89+3196
	DD	imagerel $unwind$z900_perform_locked_operation
$pdata$z900_search_string DD imagerel $LN59
	DD	imagerel $LN59+1426
	DD	imagerel $unwind$z900_search_string
$pdata$z900_or DD imagerel $LN18
	DD	imagerel $LN18+440
	DD	imagerel $unwind$z900_or
$pdata$z900_or_character DD imagerel $LN96
	DD	imagerel $LN96+3249
	DD	imagerel $unwind$z900_or_character
$pdata$z900_or_immediate DD imagerel $LN11
	DD	imagerel $LN11+364
	DD	imagerel $unwind$z900_or_immediate
$pdata$z900_or_register DD imagerel $LN9
	DD	imagerel $LN9+210
	DD	imagerel $unwind$z900_or_register
$pdata$z900_pack DD imagerel $LN21
	DD	imagerel $LN21+1120
	DD	imagerel $unwind$z900_pack
$pdata$z900_set_program_mask DD imagerel $LN7
	DD	imagerel $LN7+174
	DD	imagerel $unwind$z900_set_program_mask
$pdata$z900_shift_left_double DD imagerel $LN25
	DD	imagerel $LN25+746
	DD	imagerel $unwind$z900_shift_left_double
$pdata$z900_shift_left_double_logical DD imagerel $LN10
	DD	imagerel $LN10+399
	DD	imagerel $unwind$z900_shift_left_double_logical
$pdata$z900_shift_left_single DD imagerel $LN22
	DD	imagerel $LN22+657
	DD	imagerel $unwind$z900_shift_left_single
$pdata$z900_shift_left_single_logical DD imagerel $LN11
	DD	imagerel $LN11+299
	DD	imagerel $unwind$z900_shift_left_single_logical
$pdata$z900_shift_right_double DD imagerel $LN14
	DD	imagerel $LN14+464
	DD	imagerel $unwind$z900_shift_right_double
$pdata$z900_shift_right_double_logical DD imagerel $LN10
	DD	imagerel $LN10+399
	DD	imagerel $unwind$z900_shift_right_double_logical
$pdata$z900_shift_right_single DD imagerel $LN17
	DD	imagerel $LN17+426
	DD	imagerel $unwind$z900_shift_right_single
$pdata$z900_shift_right_single_logical DD imagerel $LN11
	DD	imagerel $LN11+299
	DD	imagerel $unwind$z900_shift_right_single_logical
$pdata$z900_store_characters_under_mask DD imagerel $LN19
	DD	imagerel $LN19+646
	DD	imagerel $unwind$z900_store_characters_under_mask
$pdata$z900_store_clock DD imagerel $LN12
	DD	imagerel $LN12+527
	DD	imagerel $unwind$z900_store_clock
$pdata$z900_store_halfword DD imagerel $LN16
	DD	imagerel $LN16+369
	DD	imagerel $unwind$z900_store_halfword
$pdata$z900_store_multiple DD imagerel $LN52
	DD	imagerel $LN52+1472
	DD	imagerel $unwind$z900_store_multiple
$pdata$z900_subtract DD imagerel $LN17
	DD	imagerel $LN17+458
	DD	imagerel $unwind$z900_subtract
$pdata$z900_subtract_halfword DD imagerel $LN17
	DD	imagerel $LN17+459
	DD	imagerel $unwind$z900_subtract_halfword
$pdata$z900_subtract_logical DD imagerel $LN16
	DD	imagerel $LN16+407
	DD	imagerel $unwind$z900_subtract_logical
$pdata$z900_subtract_logical_register DD imagerel $LN13
	DD	imagerel $LN13+259
	DD	imagerel $unwind$z900_subtract_logical_register
$pdata$z900_subtract_register DD imagerel $LN8
	DD	imagerel $LN8+243
	DD	imagerel $unwind$z900_subtract_register
$pdata$z900_supervisor_call DD imagerel $LN33
	DD	imagerel $LN33+1001
	DD	imagerel $unwind$z900_supervisor_call
$pdata$z900_test_and_set DD imagerel $LN22
	DD	imagerel $LN22+571
	DD	imagerel $unwind$z900_test_and_set
$pdata$z900_test_under_mask DD imagerel $LN12
	DD	imagerel $LN12+329
	DD	imagerel $unwind$z900_test_under_mask
$pdata$z900_translate DD imagerel $LN58
	DD	imagerel $LN58+1986
	DD	imagerel $unwind$z900_translate
$pdata$z900_translate_and_test DD imagerel $LN68
	DD	imagerel $LN68+1444
	DD	imagerel $unwind$z900_translate_and_test
$pdata$z900_unpack DD imagerel $LN21
	DD	imagerel $LN21+1111
	DD	imagerel $unwind$z900_unpack
$pdata$z900_update_tree DD imagerel $LN85
	DD	imagerel $LN85+2439
	DD	imagerel $unwind$z900_update_tree
$pdata$z900_9180 DD imagerel $LN10
	DD	imagerel $LN10+251
	DD	imagerel $unwind$z900_9180
$pdata$z900_9140 DD imagerel $LN10
	DD	imagerel $LN10+249
	DD	imagerel $unwind$z900_9140
$pdata$z900_9120 DD imagerel $LN10
	DD	imagerel $LN10+249
	DD	imagerel $unwind$z900_9120
$pdata$z900_9110 DD imagerel $LN10
	DD	imagerel $LN10+249
	DD	imagerel $unwind$z900_9110
$pdata$z900_9108 DD imagerel $LN10
	DD	imagerel $LN10+249
	DD	imagerel $unwind$z900_9108
$pdata$z900_9104 DD imagerel $LN10
	DD	imagerel $LN10+249
	DD	imagerel $unwind$z900_9104
$pdata$z900_9102 DD imagerel $LN10
	DD	imagerel $LN10+249
	DD	imagerel $unwind$z900_9102
$pdata$z900_9101 DD imagerel $LN10
	DD	imagerel $LN10+249
	DD	imagerel $unwind$z900_9101
$pdata$z900_1F00 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F00
$pdata$z900_1F01 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F01
$pdata$z900_1F02 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F02
$pdata$z900_1F03 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F03
$pdata$z900_1F04 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F04
$pdata$z900_1F05 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F05
$pdata$z900_1F06 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F06
$pdata$z900_1F07 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F07
$pdata$z900_1F08 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F08
$pdata$z900_1F09 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F09
$pdata$z900_1F0A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F0A
$pdata$z900_1F0B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F0B
$pdata$z900_1F0C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F0C
$pdata$z900_1F0D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F0D
$pdata$z900_1F0E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F0E
$pdata$z900_1F0F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F0F
$pdata$z900_1F10 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F10
$pdata$z900_1F11 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F11
$pdata$z900_1F12 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F12
$pdata$z900_1F13 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F13
$pdata$z900_1F14 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F14
$pdata$z900_1F15 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F15
$pdata$z900_1F16 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F16
$pdata$z900_1F17 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F17
$pdata$z900_1F18 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F18
$pdata$z900_1F19 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F19
$pdata$z900_1F1A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F1A
$pdata$z900_1F1B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F1B
$pdata$z900_1F1C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F1C
$pdata$z900_1F1D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F1D
$pdata$z900_1F1E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F1E
$pdata$z900_1F1F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F1F
$pdata$z900_1F20 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F20
$pdata$z900_1F21 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F21
$pdata$z900_1F22 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F22
$pdata$z900_1F23 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F23
$pdata$z900_1F24 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F24
$pdata$z900_1F25 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F25
$pdata$z900_1F26 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F26
$pdata$z900_1F27 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F27
$pdata$z900_1F28 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F28
$pdata$z900_1F29 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F29
$pdata$z900_1F2A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F2A
$pdata$z900_1F2B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F2B
$pdata$z900_1F2C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F2C
$pdata$z900_1F2D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F2D
$pdata$z900_1F2E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F2E
$pdata$z900_1F2F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F2F
$pdata$z900_1F30 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F30
$pdata$z900_1F31 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F31
$pdata$z900_1F32 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F32
$pdata$z900_1F33 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F33
$pdata$z900_1F34 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F34
$pdata$z900_1F35 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F35
$pdata$z900_1F36 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F36
$pdata$z900_1F37 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F37
$pdata$z900_1F38 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F38
$pdata$z900_1F39 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F39
$pdata$z900_1F3A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F3A
$pdata$z900_1F3B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F3B
$pdata$z900_1F3C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F3C
$pdata$z900_1F3D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F3D
$pdata$z900_1F3E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F3E
$pdata$z900_1F3F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F3F
$pdata$z900_1F40 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F40
$pdata$z900_1F41 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F41
$pdata$z900_1F42 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F42
$pdata$z900_1F43 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F43
$pdata$z900_1F44 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F44
$pdata$z900_1F45 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F45
$pdata$z900_1F46 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F46
$pdata$z900_1F47 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F47
$pdata$z900_1F48 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F48
$pdata$z900_1F49 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F49
$pdata$z900_1F4A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F4A
$pdata$z900_1F4B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F4B
$pdata$z900_1F4C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F4C
$pdata$z900_1F4D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F4D
$pdata$z900_1F4E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F4E
$pdata$z900_1F4F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F4F
$pdata$z900_1F50 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F50
$pdata$z900_1F51 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F51
$pdata$z900_1F52 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F52
$pdata$z900_1F53 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F53
$pdata$z900_1F54 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F54
$pdata$z900_1F55 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F55
$pdata$z900_1F56 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F56
$pdata$z900_1F57 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F57
$pdata$z900_1F58 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F58
$pdata$z900_1F59 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F59
$pdata$z900_1F5A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F5A
$pdata$z900_1F5B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F5B
$pdata$z900_1F5C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F5C
$pdata$z900_1F5D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F5D
$pdata$z900_1F5E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F5E
$pdata$z900_1F5F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F5F
$pdata$z900_1F60 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F60
$pdata$z900_1F61 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F61
$pdata$z900_1F62 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F62
$pdata$z900_1F63 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F63
$pdata$z900_1F64 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F64
$pdata$z900_1F65 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F65
$pdata$z900_1F66 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F66
$pdata$z900_1F67 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F67
$pdata$z900_1F68 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F68
$pdata$z900_1F69 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F69
$pdata$z900_1F6A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F6A
$pdata$z900_1F6B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F6B
$pdata$z900_1F6C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F6C
$pdata$z900_1F6D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F6D
$pdata$z900_1F6E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F6E
$pdata$z900_1F6F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F6F
$pdata$z900_1F70 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F70
$pdata$z900_1F71 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F71
$pdata$z900_1F72 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F72
$pdata$z900_1F73 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F73
$pdata$z900_1F74 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F74
$pdata$z900_1F75 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F75
$pdata$z900_1F76 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F76
$pdata$z900_1F77 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F77
$pdata$z900_1F78 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F78
$pdata$z900_1F79 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F79
$pdata$z900_1F7A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F7A
$pdata$z900_1F7B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F7B
$pdata$z900_1F7C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F7C
$pdata$z900_1F7D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F7D
$pdata$z900_1F7E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F7E
$pdata$z900_1F7F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F7F
$pdata$z900_1F80 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F80
$pdata$z900_1F81 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F81
$pdata$z900_1F82 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F82
$pdata$z900_1F83 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F83
$pdata$z900_1F84 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F84
$pdata$z900_1F85 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F85
$pdata$z900_1F86 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F86
$pdata$z900_1F87 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F87
$pdata$z900_1F88 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F88
$pdata$z900_1F89 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F89
$pdata$z900_1F8A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F8A
$pdata$z900_1F8B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F8B
$pdata$z900_1F8C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F8C
$pdata$z900_1F8D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F8D
$pdata$z900_1F8E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F8E
$pdata$z900_1F8F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F8F
$pdata$z900_1F90 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F90
$pdata$z900_1F91 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F91
$pdata$z900_1F92 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F92
$pdata$z900_1F93 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F93
$pdata$z900_1F94 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F94
$pdata$z900_1F95 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F95
$pdata$z900_1F96 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F96
$pdata$z900_1F97 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F97
$pdata$z900_1F98 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F98
$pdata$z900_1F99 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F99
$pdata$z900_1F9A DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F9A
$pdata$z900_1F9B DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F9B
$pdata$z900_1F9C DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F9C
$pdata$z900_1F9D DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F9D
$pdata$z900_1F9E DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F9E
$pdata$z900_1F9F DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1F9F
$pdata$z900_1FA0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA0
$pdata$z900_1FA1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA1
$pdata$z900_1FA2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA2
$pdata$z900_1FA3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA3
$pdata$z900_1FA4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA4
$pdata$z900_1FA5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA5
$pdata$z900_1FA6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA6
$pdata$z900_1FA7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA7
$pdata$z900_1FA8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA8
$pdata$z900_1FA9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FA9
$pdata$z900_1FAA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FAA
$pdata$z900_1FAB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FAB
$pdata$z900_1FAC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FAC
$pdata$z900_1FAD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FAD
$pdata$z900_1FAE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FAE
$pdata$z900_1FAF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FAF
$pdata$z900_1FB0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB0
$pdata$z900_1FB1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB1
$pdata$z900_1FB2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB2
$pdata$z900_1FB3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB3
$pdata$z900_1FB4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB4
$pdata$z900_1FB5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB5
$pdata$z900_1FB6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB6
$pdata$z900_1FB7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB7
$pdata$z900_1FB8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB8
$pdata$z900_1FB9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FB9
$pdata$z900_1FBA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FBA
$pdata$z900_1FBB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FBB
$pdata$z900_1FBC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FBC
$pdata$z900_1FBD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FBD
$pdata$z900_1FBE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FBE
$pdata$z900_1FBF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FBF
$pdata$z900_1FC0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC0
$pdata$z900_1FC1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC1
$pdata$z900_1FC2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC2
$pdata$z900_1FC3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC3
$pdata$z900_1FC4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC4
$pdata$z900_1FC5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC5
$pdata$z900_1FC6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC6
$pdata$z900_1FC7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC7
$pdata$z900_1FC8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC8
$pdata$z900_1FC9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FC9
$pdata$z900_1FCA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FCA
$pdata$z900_1FCB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FCB
$pdata$z900_1FCC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FCC
$pdata$z900_1FCD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FCD
$pdata$z900_1FCE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FCE
$pdata$z900_1FCF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FCF
$pdata$z900_1FD0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD0
$pdata$z900_1FD1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD1
$pdata$z900_1FD2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD2
$pdata$z900_1FD3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD3
$pdata$z900_1FD4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD4
$pdata$z900_1FD5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD5
$pdata$z900_1FD6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD6
$pdata$z900_1FD7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD7
$pdata$z900_1FD8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD8
$pdata$z900_1FD9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FD9
$pdata$z900_1FDA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FDA
$pdata$z900_1FDB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FDB
$pdata$z900_1FDC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FDC
$pdata$z900_1FDD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FDD
$pdata$z900_1FDE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FDE
$pdata$z900_1FDF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FDF
$pdata$z900_1FE0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE0
$pdata$z900_1FE1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE1
$pdata$z900_1FE2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE2
$pdata$z900_1FE3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE3
$pdata$z900_1FE4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE4
$pdata$z900_1FE5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE5
$pdata$z900_1FE6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE6
$pdata$z900_1FE7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE7
$pdata$z900_1FE8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE8
$pdata$z900_1FE9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FE9
$pdata$z900_1FEA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FEA
$pdata$z900_1FEB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FEB
$pdata$z900_1FEC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FEC
$pdata$z900_1FED DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FED
$pdata$z900_1FEE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FEE
$pdata$z900_1FEF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FEF
$pdata$z900_1FF0 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF0
$pdata$z900_1FF1 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF1
$pdata$z900_1FF2 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF2
$pdata$z900_1FF3 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF3
$pdata$z900_1FF4 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF4
$pdata$z900_1FF5 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF5
$pdata$z900_1FF6 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF6
$pdata$z900_1FF7 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF7
$pdata$z900_1FF8 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF8
$pdata$z900_1FF9 DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FF9
$pdata$z900_1FFA DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FFA
$pdata$z900_1FFB DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FFB
$pdata$z900_1FFC DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FFC
$pdata$z900_1FFD DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FFD
$pdata$z900_1FFE DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FFE
$pdata$z900_1FFF DD imagerel $LN10
	DD	imagerel $LN10+163
	DD	imagerel $unwind$z900_1FFF
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+159
	DD	imagerel $unwind$z900__or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$z900_or_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$z900_or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_storage_key_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$z900_or_storage_key_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_per3_zero DD imagerel $LN12
	DD	imagerel $LN12+215
	DD	imagerel $unwind$z900_per3_zero
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_per3_zero_check DD imagerel $LN6
	DD	imagerel $LN6+101
	DD	imagerel $unwind$z900_per3_zero_check
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_per3_zero_check2 DD imagerel $LN9
	DD	imagerel $LN9+189
	DD	imagerel $unwind$z900_per3_zero_check2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_per3_zero_lcheck DD imagerel $LN8
	DD	imagerel $LN8+190
	DD	imagerel $unwind$z900_per3_zero_lcheck
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_per3_zero_lcheck2 DD imagerel $LN14
	DD	imagerel $LN14+366
	DD	imagerel $unwind$z900_per3_zero_lcheck2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_per3_zero_xcheck DD imagerel $LN6
	DD	imagerel $LN6+108
	DD	imagerel $unwind$z900_per3_zero_xcheck
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_per3_zero_xcheck2 DD imagerel $LN18
	DD	imagerel $LN18+485
	DD	imagerel $unwind$z900_per3_zero_xcheck2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_maddr_l DD imagerel $LN18
	DD	imagerel $LN18+657
	DD	imagerel $unwind$z900_maddr_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstore2_full DD imagerel $LN3
	DD	imagerel $LN3+216
	DD	imagerel $unwind$z900_vstore2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstore4_full DD imagerel $LN3
	DD	imagerel $LN3+332
	DD	imagerel $unwind$z900_vstore4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstore8_full DD imagerel $LN3
	DD	imagerel $LN3+375
	DD	imagerel $unwind$z900_vstore8_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetch2_full DD imagerel $LN3
	DD	imagerel $LN3+186
	DD	imagerel $unwind$z900_vfetch2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetch4_full DD imagerel $LN3
	DD	imagerel $LN3+307
	DD	imagerel $unwind$z900_vfetch4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetch8_full DD imagerel $LN3
	DD	imagerel $LN3+307
	DD	imagerel $unwind$z900_vfetch8_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstorec DD imagerel $LN9
	DD	imagerel $LN9+511
	DD	imagerel $unwind$z900_vstorec
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstoreb DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$z900_vstoreb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstore2 DD imagerel $LN9
	DD	imagerel $LN9+188
	DD	imagerel $unwind$z900_vstore2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstore4 DD imagerel $LN12
	DD	imagerel $LN12+209
	DD	imagerel $unwind$z900_vstore4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vstore8 DD imagerel $LN9
	DD	imagerel $LN9+174
	DD	imagerel $unwind$z900_vstore8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetchc DD imagerel $LN9
	DD	imagerel $LN9+445
	DD	imagerel $unwind$z900_vfetchc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetchb DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$z900_vfetchb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetch2 DD imagerel $LN11
	DD	imagerel $LN11+196
	DD	imagerel $unwind$z900_vfetch2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetch4 DD imagerel $LN11
	DD	imagerel $LN11+195
	DD	imagerel $unwind$z900_vfetch4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_vfetch8 DD imagerel $LN8
	DD	imagerel $LN8+157
	DD	imagerel $unwind$z900_vfetch8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_validate_operand DD imagerel $LN8
	DD	imagerel $LN8+195
	DD	imagerel $unwind$z900_validate_operand
pdata	ENDS
pdata	SEGMENT
$pdata$z900_translate_and_test_xxx_extended DD imagerel $LN84
	DD	imagerel $LN84+2316
	DD	imagerel $unwind$z900_translate_and_test_xxx_extended
pdata	ENDS
_DATA	SEGMENT
$SG185707 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:407', 00H
	ORG $+2
$SG185708 DB	'*PLO', 00H
	ORG $+3
$SG185710 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:419', 00H
	ORG $+2
$SG185725 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:526', 00H
	ORG $+2
$SG185728 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:530', 00H
	ORG $+2
$SG185729 DB	'*PLO', 00H
	ORG $+3
$SG202795 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:140', 00H
	ORG $+2
$SG202849 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:302', 00H
	ORG $+2
$SG202905 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:367', 00H
	ORG $+2
$SG202935 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:407', 00H
	ORG $+2
$SG202936 DB	'*PLO', 00H
	ORG $+3
$SG202938 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:419', 00H
	ORG $+2
$SG202965 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:526', 00H
	ORG $+2
$SG202968 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:530', 00H
	ORG $+2
$SG202969 DB	'*PLO', 00H
	ORG $+3
$SG203021 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:555', 00H
	ORG $+2
$SG203057 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:719', 00H
	ORG $+2
$SG206617 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:1557', 00H
	ORG $+1
$SG206654 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:1630', 00H
	ORG $+1
$SG206898 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:1828', 00H
	ORG $+1
$SG206953 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:1904', 00H
	ORG $+1
$SG207006 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:2010', 00H
	ORG $+1
$SG207046 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:2110', 00H
	ORG $+1
$SG207094 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:2183', 00H
	ORG $+1
$SG207421 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:2961', 00H
	ORG $+1
$SG207472 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:3056', 00H
	ORG $+1
$SG207537 DB	'C:\papa\MyGit\hyperion-zvector\general2.c:3209', 00H
_DATA	ENDS
;	COMDAT ??_C@_0CM@JBMLKNGA@C?3?2papa?2MyGit?2hyperion?9zvector?2@
_DATA	SEGMENT
??_C@_0CM@JBMLKNGA@C?3?2papa?2MyGit?2hyperion?9zvector?2@ DB 'C:\papa\MyG'
	DB	'it\hyperion-zvector\inline.h:555', 00H	; `string'
_DATA	ENDS
;	COMDAT ??_C@_0CM@OMLMFJCF@C?3?2papa?2MyGit?2hyperion?9zvector?2@
_DATA	SEGMENT
??_C@_0CM@OMLMFJCF@C?3?2papa?2MyGit?2hyperion?9zvector?2@ DB 'C:\papa\MyG'
	DB	'it\hyperion-zvector\inline.h:550', 00H	; `string'
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_validate_operand DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetch8 DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetch4 DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetch2 DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetchb DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetchc DD 031901H
	DD	07015a219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstore8 DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstore4 DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstore2 DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstoreb DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstorec DD 031901H
	DD	07015c219H
	DD	06014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01eH
	DW	011fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetch8_full DD 032319H
	DD	07010c214H
	DD	0600fH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01eH
	DW	011fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetch4_full DD 032319H
	DD	07010a214H
	DD	0600fH
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vfetch2_full DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0163H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstore8_full DD 032919H
	DD	07016c21aH
	DD	06015H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstore4_full DD 031901H
	DD	07015a219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_vstore2_full DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_maddr_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_per3_zero_xcheck2 DD 011201H
	DD	0a212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_per3_zero_xcheck DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_per3_zero_lcheck2 DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_per3_zero_lcheck DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_per3_zero_check2 DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_per3_zero_check DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_per3_zero DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_storage_key_by_ptr DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_validate_operand DD 011601H
	DD	08216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vfetch4 DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vfetch2 DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vfetchb DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vfetchc DD 031901H
	DD	07015a219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstore8 DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstore4 DD 011601H
	DD	08216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstore2 DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstoreb DD 011601H
	DD	08216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstorec DD 031901H
	DD	07015c219H
	DD	06014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01dH
	DW	0114H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vfetch4_full DD 032219H
	DD	0700fa213H
	DD	0600eH
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vfetch2_full DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	023H
	DW	0158H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstore8_full DD 032819H
	DD	07015c219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstore4_full DD 031801H
	DD	07014a218H
	DD	06013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_vstore2_full DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_maddr_l DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_storage_key_by_ptr DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_validate_operand DD 011601H
	DD	08216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch4 DD 011101H
	DD	0a211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch2 DD 011101H
	DD	0a211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetchb DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetchc DD 031901H
	DD	07015a219H
	DD	06014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore8 DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore4 DD 011601H
	DD	0a216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore2 DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstoreb DD 011601H
	DD	08216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstorec DD 031901H
	DD	07015c219H
	DD	06014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01dH
	DW	010cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch4_full DD 032219H
	DD	0700fa213H
	DD	0600eH
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch2_full DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	023H
	DW	0150H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore8_full DD 032819H
	DD	07015c219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore4_full DD 031801H
	DD	07014a218H
	DD	06013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore2_full DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_maddr_l DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_per1_gra DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sub_signed DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sub_logical DD 011201H
	DD	02212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_storage_key_by_ptr DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_2K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_get_storekey_ptr DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_dw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmpxchg1_x86 DD 011201H
	DD	0c212H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	035H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmpxchg4_x86 DD 011201H
	DD	02212H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_translate_and_test_xxx_extended
	DD	025H
	DD	08f4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_translate_and_test
	DD	025H
	DD	058cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_store_multiple
	DD	01bH
	DD	05a8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_store_clock
	DD	01aH
	DD	01fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_translate_extended
	DD	025H
	DD	0400H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_store_clock_extended
	DD	018H
	DD	01c5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_translate_and_test_reverse
	DD	025H
	DD	04adH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_translate_and_test
	DD	025H
	DD	04b2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_store_multiple
	DD	01bH
	DD	0579H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_store_clock
	DD	01aH
	DD	018eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_translate_extended
	DD	025H
	DD	02b0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_store_clock_extended
	DD	018H
	DD	019fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_translate_and_test_xxx_extended
	DD	025H
	DD	0691H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_translate_and_test
	DD	025H
	DD	051dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_store_multiple
	DD	01bH
	DD	05c5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_store_clock
	DD	01aH
	DD	0181H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_translate_extended
	DD	025H
	DD	028dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_translate_and_test_reverse
	DD	025H
	DD	03baH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_or_immediate
	DD	0115H
	DD	011dH
	DD	0131H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_or_immediate
	DD	0f9H
	DD	0101H
	DD	0115H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_or_immediate
	DD	0157H
	DD	015fH
	DD	0173H
voltbl	ENDS
xdata	SEGMENT
$unwind$s370_convert_utf16_to_utf32 DD 021101H
	DD	0110111H
$unwind$s370_convert_utf32_to_utf16 DD 010e01H
	DD	0c20eH
$unwind$s370_convert_utf32_to_utf8 DD 010e01H
	DD	0c20eH
$unwind$s370_convert_utf8_to_utf32 DD 021101H
	DD	0130111H
$unwind$s370_search_string_unicode DD 010e01H
	DD	0820eH
$unwind$s370_translate_and_test_reverse DD 032c19H
	DD	0400112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0184H
	DD	070H
	DD	040H
$unwind$s370_translate_and_test_extended DD 010e01H
	DD	0420eH
$unwind$s370_translate_and_test_reverse_extended DD 010e01H
	DD	0420eH
$unwind$s370_translate_extended DD 032c19H
	DD	0380112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0144H
	DD	070H
	DD	040H
$unwind$s370_test_under_mask_high DD 010e01H
	DD	0a20eH
$unwind$s370_test_under_mask_low DD 010e01H
	DD	0a20eH
$unwind$s370_search_string DD 010e01H
	DD	0e20eH
$unwind$s370_or DD 010e01H
	DD	0a20eH
$unwind$s370_or_character DD 021101H
	DD	0210111H
$unwind$s370_or_immediate DD 010e01H
	DD	0e20eH
$unwind$s370_or_register DD 010e01H
	DD	0820eH
$unwind$s370_pack DD 010e01H
	DD	0c20eH
$unwind$s370_set_program_mask DD 010e01H
	DD	0220eH
$unwind$s370_shift_left_double DD 010e01H
	DD	0e20eH
$unwind$s370_shift_left_double_logical DD 010e01H
	DD	0a20eH
$unwind$s370_shift_left_single DD 010e01H
	DD	0c20eH
$unwind$s370_shift_left_single_logical DD 010e01H
	DD	0a20eH
$unwind$s370_shift_right_double DD 010e01H
	DD	0c20eH
$unwind$s370_shift_right_double_logical DD 010e01H
	DD	0a20eH
$unwind$s370_shift_right_single DD 010e01H
	DD	0a20eH
$unwind$s370_shift_right_single_logical DD 010e01H
	DD	0a20eH
$unwind$s370_store_characters_under_mask DD 010e01H
	DD	0a20eH
$unwind$s370_store_clock DD 031f19H
	DD	0700ce210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$s370_store_halfword DD 010e01H
	DD	0820eH
$unwind$s370_store_multiple DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$s370_subtract DD 010e01H
	DD	0a20eH
$unwind$s370_subtract_halfword DD 010e01H
	DD	0a20eH
$unwind$s370_subtract_logical DD 010e01H
	DD	0a20eH
$unwind$s370_subtract_logical_register DD 010e01H
	DD	0820eH
$unwind$s370_subtract_register DD 010e01H
	DD	0820eH
$unwind$s370_supervisor_call DD 010e01H
	DD	0c20eH
$unwind$s370_test_and_set DD 010e01H
	DD	0c20eH
$unwind$s370_test_under_mask DD 010e01H
	DD	0820eH
$unwind$s370_translate DD 021101H
	DD	0150111H
$unwind$s370_translate_and_test DD 032c19H
	DD	0600112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0284H
	DD	070H
	DD	040H
$unwind$s370_unpack DD 010e01H
	DD	0e20eH
$unwind$s370_update_tree DD 010e01H
	DD	0820eH
$unwind$s370_9180 DD 010e01H
	DD	0620eH
$unwind$s370_9140 DD 010e01H
	DD	0620eH
$unwind$s370_9120 DD 010e01H
	DD	0620eH
$unwind$s370_9110 DD 010e01H
	DD	0620eH
$unwind$s370_9108 DD 010e01H
	DD	0620eH
$unwind$s370_9104 DD 010e01H
	DD	0620eH
$unwind$s370_9102 DD 010e01H
	DD	0620eH
$unwind$s370_9101 DD 010e01H
	DD	0620eH
$unwind$s370_1F00 DD 010e01H
	DD	0620eH
$unwind$s370_1F01 DD 010e01H
	DD	0620eH
$unwind$s370_1F02 DD 010e01H
	DD	0620eH
$unwind$s370_1F03 DD 010e01H
	DD	0620eH
$unwind$s370_1F04 DD 010e01H
	DD	0620eH
$unwind$s370_1F05 DD 010e01H
	DD	0620eH
$unwind$s370_1F06 DD 010e01H
	DD	0620eH
$unwind$s370_1F07 DD 010e01H
	DD	0620eH
$unwind$s370_1F08 DD 010e01H
	DD	0620eH
$unwind$s370_1F09 DD 010e01H
	DD	0620eH
$unwind$s370_1F0A DD 010e01H
	DD	0620eH
$unwind$s370_1F0B DD 010e01H
	DD	0620eH
$unwind$s370_1F0C DD 010e01H
	DD	0620eH
$unwind$s370_1F0D DD 010e01H
	DD	0620eH
$unwind$s370_1F0E DD 010e01H
	DD	0620eH
$unwind$s370_1F0F DD 010e01H
	DD	0620eH
$unwind$s370_1F10 DD 010e01H
	DD	0620eH
$unwind$s370_1F11 DD 010e01H
	DD	0620eH
$unwind$s370_1F12 DD 010e01H
	DD	0620eH
$unwind$s370_1F13 DD 010e01H
	DD	0620eH
$unwind$s370_1F14 DD 010e01H
	DD	0620eH
$unwind$s370_1F15 DD 010e01H
	DD	0620eH
$unwind$s370_1F16 DD 010e01H
	DD	0620eH
$unwind$s370_1F17 DD 010e01H
	DD	0620eH
$unwind$s370_1F18 DD 010e01H
	DD	0620eH
$unwind$s370_1F19 DD 010e01H
	DD	0620eH
$unwind$s370_1F1A DD 010e01H
	DD	0620eH
$unwind$s370_1F1B DD 010e01H
	DD	0620eH
$unwind$s370_1F1C DD 010e01H
	DD	0620eH
$unwind$s370_1F1D DD 010e01H
	DD	0620eH
$unwind$s370_1F1E DD 010e01H
	DD	0620eH
$unwind$s370_1F1F DD 010e01H
	DD	0620eH
$unwind$s370_1F20 DD 010e01H
	DD	0620eH
$unwind$s370_1F21 DD 010e01H
	DD	0620eH
$unwind$s370_1F22 DD 010e01H
	DD	0620eH
$unwind$s370_1F23 DD 010e01H
	DD	0620eH
$unwind$s370_1F24 DD 010e01H
	DD	0620eH
$unwind$s370_1F25 DD 010e01H
	DD	0620eH
$unwind$s370_1F26 DD 010e01H
	DD	0620eH
$unwind$s370_1F27 DD 010e01H
	DD	0620eH
$unwind$s370_1F28 DD 010e01H
	DD	0620eH
$unwind$s370_1F29 DD 010e01H
	DD	0620eH
$unwind$s370_1F2A DD 010e01H
	DD	0620eH
$unwind$s370_1F2B DD 010e01H
	DD	0620eH
$unwind$s370_1F2C DD 010e01H
	DD	0620eH
$unwind$s370_1F2D DD 010e01H
	DD	0620eH
$unwind$s370_1F2E DD 010e01H
	DD	0620eH
$unwind$s370_1F2F DD 010e01H
	DD	0620eH
$unwind$s370_1F30 DD 010e01H
	DD	0620eH
$unwind$s370_1F31 DD 010e01H
	DD	0620eH
$unwind$s370_1F32 DD 010e01H
	DD	0620eH
$unwind$s370_1F33 DD 010e01H
	DD	0620eH
$unwind$s370_1F34 DD 010e01H
	DD	0620eH
$unwind$s370_1F35 DD 010e01H
	DD	0620eH
$unwind$s370_1F36 DD 010e01H
	DD	0620eH
$unwind$s370_1F37 DD 010e01H
	DD	0620eH
$unwind$s370_1F38 DD 010e01H
	DD	0620eH
$unwind$s370_1F39 DD 010e01H
	DD	0620eH
$unwind$s370_1F3A DD 010e01H
	DD	0620eH
$unwind$s370_1F3B DD 010e01H
	DD	0620eH
$unwind$s370_1F3C DD 010e01H
	DD	0620eH
$unwind$s370_1F3D DD 010e01H
	DD	0620eH
$unwind$s370_1F3E DD 010e01H
	DD	0620eH
$unwind$s370_1F3F DD 010e01H
	DD	0620eH
$unwind$s370_1F40 DD 010e01H
	DD	0620eH
$unwind$s370_1F41 DD 010e01H
	DD	0620eH
$unwind$s370_1F42 DD 010e01H
	DD	0620eH
$unwind$s370_1F43 DD 010e01H
	DD	0620eH
$unwind$s370_1F44 DD 010e01H
	DD	0620eH
$unwind$s370_1F45 DD 010e01H
	DD	0620eH
$unwind$s370_1F46 DD 010e01H
	DD	0620eH
$unwind$s370_1F47 DD 010e01H
	DD	0620eH
$unwind$s370_1F48 DD 010e01H
	DD	0620eH
$unwind$s370_1F49 DD 010e01H
	DD	0620eH
$unwind$s370_1F4A DD 010e01H
	DD	0620eH
$unwind$s370_1F4B DD 010e01H
	DD	0620eH
$unwind$s370_1F4C DD 010e01H
	DD	0620eH
$unwind$s370_1F4D DD 010e01H
	DD	0620eH
$unwind$s370_1F4E DD 010e01H
	DD	0620eH
$unwind$s370_1F4F DD 010e01H
	DD	0620eH
$unwind$s370_1F50 DD 010e01H
	DD	0620eH
$unwind$s370_1F51 DD 010e01H
	DD	0620eH
$unwind$s370_1F52 DD 010e01H
	DD	0620eH
$unwind$s370_1F53 DD 010e01H
	DD	0620eH
$unwind$s370_1F54 DD 010e01H
	DD	0620eH
$unwind$s370_1F55 DD 010e01H
	DD	0620eH
$unwind$s370_1F56 DD 010e01H
	DD	0620eH
$unwind$s370_1F57 DD 010e01H
	DD	0620eH
$unwind$s370_1F58 DD 010e01H
	DD	0620eH
$unwind$s370_1F59 DD 010e01H
	DD	0620eH
$unwind$s370_1F5A DD 010e01H
	DD	0620eH
$unwind$s370_1F5B DD 010e01H
	DD	0620eH
$unwind$s370_1F5C DD 010e01H
	DD	0620eH
$unwind$s370_1F5D DD 010e01H
	DD	0620eH
$unwind$s370_1F5E DD 010e01H
	DD	0620eH
$unwind$s370_1F5F DD 010e01H
	DD	0620eH
$unwind$s370_1F60 DD 010e01H
	DD	0620eH
$unwind$s370_1F61 DD 010e01H
	DD	0620eH
$unwind$s370_1F62 DD 010e01H
	DD	0620eH
$unwind$s370_1F63 DD 010e01H
	DD	0620eH
$unwind$s370_1F64 DD 010e01H
	DD	0620eH
$unwind$s370_1F65 DD 010e01H
	DD	0620eH
$unwind$s370_1F66 DD 010e01H
	DD	0620eH
$unwind$s370_1F67 DD 010e01H
	DD	0620eH
$unwind$s370_1F68 DD 010e01H
	DD	0620eH
$unwind$s370_1F69 DD 010e01H
	DD	0620eH
$unwind$s370_1F6A DD 010e01H
	DD	0620eH
$unwind$s370_1F6B DD 010e01H
	DD	0620eH
$unwind$s370_1F6C DD 010e01H
	DD	0620eH
$unwind$s370_1F6D DD 010e01H
	DD	0620eH
$unwind$s370_1F6E DD 010e01H
	DD	0620eH
$unwind$s370_1F6F DD 010e01H
	DD	0620eH
$unwind$s370_1F70 DD 010e01H
	DD	0620eH
$unwind$s370_1F71 DD 010e01H
	DD	0620eH
$unwind$s370_1F72 DD 010e01H
	DD	0620eH
$unwind$s370_1F73 DD 010e01H
	DD	0620eH
$unwind$s370_1F74 DD 010e01H
	DD	0620eH
$unwind$s370_1F75 DD 010e01H
	DD	0620eH
$unwind$s370_1F76 DD 010e01H
	DD	0620eH
$unwind$s370_1F77 DD 010e01H
	DD	0620eH
$unwind$s370_1F78 DD 010e01H
	DD	0620eH
$unwind$s370_1F79 DD 010e01H
	DD	0620eH
$unwind$s370_1F7A DD 010e01H
	DD	0620eH
$unwind$s370_1F7B DD 010e01H
	DD	0620eH
$unwind$s370_1F7C DD 010e01H
	DD	0620eH
$unwind$s370_1F7D DD 010e01H
	DD	0620eH
$unwind$s370_1F7E DD 010e01H
	DD	0620eH
$unwind$s370_1F7F DD 010e01H
	DD	0620eH
$unwind$s370_1F80 DD 010e01H
	DD	0620eH
$unwind$s370_1F81 DD 010e01H
	DD	0620eH
$unwind$s370_1F82 DD 010e01H
	DD	0620eH
$unwind$s370_1F83 DD 010e01H
	DD	0620eH
$unwind$s370_1F84 DD 010e01H
	DD	0620eH
$unwind$s370_1F85 DD 010e01H
	DD	0620eH
$unwind$s370_1F86 DD 010e01H
	DD	0620eH
$unwind$s370_1F87 DD 010e01H
	DD	0620eH
$unwind$s370_1F88 DD 010e01H
	DD	0620eH
$unwind$s370_1F89 DD 010e01H
	DD	0620eH
$unwind$s370_1F8A DD 010e01H
	DD	0620eH
$unwind$s370_1F8B DD 010e01H
	DD	0620eH
$unwind$s370_1F8C DD 010e01H
	DD	0620eH
$unwind$s370_1F8D DD 010e01H
	DD	0620eH
$unwind$s370_1F8E DD 010e01H
	DD	0620eH
$unwind$s370_1F8F DD 010e01H
	DD	0620eH
$unwind$s370_1F90 DD 010e01H
	DD	0620eH
$unwind$s370_1F91 DD 010e01H
	DD	0620eH
$unwind$s370_1F92 DD 010e01H
	DD	0620eH
$unwind$s370_1F93 DD 010e01H
	DD	0620eH
$unwind$s370_1F94 DD 010e01H
	DD	0620eH
$unwind$s370_1F95 DD 010e01H
	DD	0620eH
$unwind$s370_1F96 DD 010e01H
	DD	0620eH
$unwind$s370_1F97 DD 010e01H
	DD	0620eH
$unwind$s370_1F98 DD 010e01H
	DD	0620eH
$unwind$s370_1F99 DD 010e01H
	DD	0620eH
$unwind$s370_1F9A DD 010e01H
	DD	0620eH
$unwind$s370_1F9B DD 010e01H
	DD	0620eH
$unwind$s370_1F9C DD 010e01H
	DD	0620eH
$unwind$s370_1F9D DD 010e01H
	DD	0620eH
$unwind$s370_1F9E DD 010e01H
	DD	0620eH
$unwind$s370_1F9F DD 010e01H
	DD	0620eH
$unwind$s370_1FA0 DD 010e01H
	DD	0620eH
$unwind$s370_1FA1 DD 010e01H
	DD	0620eH
$unwind$s370_1FA2 DD 010e01H
	DD	0620eH
$unwind$s370_1FA3 DD 010e01H
	DD	0620eH
$unwind$s370_1FA4 DD 010e01H
	DD	0620eH
$unwind$s370_1FA5 DD 010e01H
	DD	0620eH
$unwind$s370_1FA6 DD 010e01H
	DD	0620eH
$unwind$s370_1FA7 DD 010e01H
	DD	0620eH
$unwind$s370_1FA8 DD 010e01H
	DD	0620eH
$unwind$s370_1FA9 DD 010e01H
	DD	0620eH
$unwind$s370_1FAA DD 010e01H
	DD	0620eH
$unwind$s370_1FAB DD 010e01H
	DD	0620eH
$unwind$s370_1FAC DD 010e01H
	DD	0620eH
$unwind$s370_1FAD DD 010e01H
	DD	0620eH
$unwind$s370_1FAE DD 010e01H
	DD	0620eH
$unwind$s370_1FAF DD 010e01H
	DD	0620eH
$unwind$s370_1FB0 DD 010e01H
	DD	0620eH
$unwind$s370_1FB1 DD 010e01H
	DD	0620eH
$unwind$s370_1FB2 DD 010e01H
	DD	0620eH
$unwind$s370_1FB3 DD 010e01H
	DD	0620eH
$unwind$s370_1FB4 DD 010e01H
	DD	0620eH
$unwind$s370_1FB5 DD 010e01H
	DD	0620eH
$unwind$s370_1FB6 DD 010e01H
	DD	0620eH
$unwind$s370_1FB7 DD 010e01H
	DD	0620eH
$unwind$s370_1FB8 DD 010e01H
	DD	0620eH
$unwind$s370_1FB9 DD 010e01H
	DD	0620eH
$unwind$s370_1FBA DD 010e01H
	DD	0620eH
$unwind$s370_1FBB DD 010e01H
	DD	0620eH
$unwind$s370_1FBC DD 010e01H
	DD	0620eH
$unwind$s370_1FBD DD 010e01H
	DD	0620eH
$unwind$s370_1FBE DD 010e01H
	DD	0620eH
$unwind$s370_1FBF DD 010e01H
	DD	0620eH
$unwind$s370_1FC0 DD 010e01H
	DD	0620eH
$unwind$s370_1FC1 DD 010e01H
	DD	0620eH
$unwind$s370_1FC2 DD 010e01H
	DD	0620eH
$unwind$s370_1FC3 DD 010e01H
	DD	0620eH
$unwind$s370_1FC4 DD 010e01H
	DD	0620eH
$unwind$s370_1FC5 DD 010e01H
	DD	0620eH
$unwind$s370_1FC6 DD 010e01H
	DD	0620eH
$unwind$s370_1FC7 DD 010e01H
	DD	0620eH
$unwind$s370_1FC8 DD 010e01H
	DD	0620eH
$unwind$s370_1FC9 DD 010e01H
	DD	0620eH
$unwind$s370_1FCA DD 010e01H
	DD	0620eH
$unwind$s370_1FCB DD 010e01H
	DD	0620eH
$unwind$s370_1FCC DD 010e01H
	DD	0620eH
$unwind$s370_1FCD DD 010e01H
	DD	0620eH
$unwind$s370_1FCE DD 010e01H
	DD	0620eH
$unwind$s370_1FCF DD 010e01H
	DD	0620eH
$unwind$s370_1FD0 DD 010e01H
	DD	0620eH
$unwind$s370_1FD1 DD 010e01H
	DD	0620eH
$unwind$s370_1FD2 DD 010e01H
	DD	0620eH
$unwind$s370_1FD3 DD 010e01H
	DD	0620eH
$unwind$s370_1FD4 DD 010e01H
	DD	0620eH
$unwind$s370_1FD5 DD 010e01H
	DD	0620eH
$unwind$s370_1FD6 DD 010e01H
	DD	0620eH
$unwind$s370_1FD7 DD 010e01H
	DD	0620eH
$unwind$s370_1FD8 DD 010e01H
	DD	0620eH
$unwind$s370_1FD9 DD 010e01H
	DD	0620eH
$unwind$s370_1FDA DD 010e01H
	DD	0620eH
$unwind$s370_1FDB DD 010e01H
	DD	0620eH
$unwind$s370_1FDC DD 010e01H
	DD	0620eH
$unwind$s370_1FDD DD 010e01H
	DD	0620eH
$unwind$s370_1FDE DD 010e01H
	DD	0620eH
$unwind$s370_1FDF DD 010e01H
	DD	0620eH
$unwind$s370_1FE0 DD 010e01H
	DD	0620eH
$unwind$s370_1FE1 DD 010e01H
	DD	0620eH
$unwind$s370_1FE2 DD 010e01H
	DD	0620eH
$unwind$s370_1FE3 DD 010e01H
	DD	0620eH
$unwind$s370_1FE4 DD 010e01H
	DD	0620eH
$unwind$s370_1FE5 DD 010e01H
	DD	0620eH
$unwind$s370_1FE6 DD 010e01H
	DD	0620eH
$unwind$s370_1FE7 DD 010e01H
	DD	0620eH
$unwind$s370_1FE8 DD 010e01H
	DD	0620eH
$unwind$s370_1FE9 DD 010e01H
	DD	0620eH
$unwind$s370_1FEA DD 010e01H
	DD	0620eH
$unwind$s370_1FEB DD 010e01H
	DD	0620eH
$unwind$s370_1FEC DD 010e01H
	DD	0620eH
$unwind$s370_1FED DD 010e01H
	DD	0620eH
$unwind$s370_1FEE DD 010e01H
	DD	0620eH
$unwind$s370_1FEF DD 010e01H
	DD	0620eH
$unwind$s370_1FF0 DD 010e01H
	DD	0620eH
$unwind$s370_1FF1 DD 010e01H
	DD	0620eH
$unwind$s370_1FF2 DD 010e01H
	DD	0620eH
$unwind$s370_1FF3 DD 010e01H
	DD	0620eH
$unwind$s370_1FF4 DD 010e01H
	DD	0620eH
$unwind$s370_1FF5 DD 010e01H
	DD	0620eH
$unwind$s370_1FF6 DD 010e01H
	DD	0620eH
$unwind$s370_1FF7 DD 010e01H
	DD	0620eH
$unwind$s370_1FF8 DD 010e01H
	DD	0620eH
$unwind$s370_1FF9 DD 010e01H
	DD	0620eH
$unwind$s370_1FFA DD 010e01H
	DD	0620eH
$unwind$s370_1FFB DD 010e01H
	DD	0620eH
$unwind$s370_1FFC DD 010e01H
	DD	0620eH
$unwind$s370_1FFD DD 010e01H
	DD	0620eH
$unwind$s370_1FFE DD 010e01H
	DD	0620eH
$unwind$s370_1FFF DD 010e01H
	DD	0620eH
$unwind$Interrupt_Lock_Obtained DD 010e01H
	DD	0420eH
$unwind$Obtain_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$Release_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$s370_translate_and_test_xxx_extended DD 032c19H
	DD	0700112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0304H
	DD	070H
	DD	040H
$unwind$s390_set_access_register DD 010e01H
	DD	0220eH
$unwind$s390_store_access_multiple DD 021101H
	DD	0110111H
$unwind$s390_store_clock_extended DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$s390_translate_extended DD 032c19H
	DD	0380112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0144H
	DD	070H
	DD	040H
$unwind$s390_test_under_mask_high DD 010e01H
	DD	0a20eH
$unwind$s390_test_under_mask_low DD 010e01H
	DD	0a20eH
$unwind$s390_perform_locked_operation DD 010e01H
	DD	0e20eH
$unwind$s390_search_string DD 010e01H
	DD	0e20eH
$unwind$s390_or DD 010e01H
	DD	0a20eH
$unwind$s390_or_character DD 021101H
	DD	01d0111H
$unwind$s390_or_immediate DD 010e01H
	DD	0c20eH
$unwind$s390_or_register DD 010e01H
	DD	0420eH
$unwind$s390_pack DD 010e01H
	DD	0c20eH
$unwind$s390_set_program_mask DD 010e01H
	DD	0220eH
$unwind$s390_shift_left_double DD 010e01H
	DD	0e20eH
$unwind$s390_shift_left_double_logical DD 010e01H
	DD	0820eH
$unwind$s390_shift_left_single DD 010e01H
	DD	0c20eH
$unwind$s390_shift_left_single_logical DD 010e01H
	DD	0820eH
$unwind$s390_shift_right_double DD 010e01H
	DD	0a20eH
$unwind$s390_shift_right_double_logical DD 010e01H
	DD	0820eH
$unwind$s390_shift_right_single DD 010e01H
	DD	0a20eH
$unwind$s390_shift_right_single_logical DD 010e01H
	DD	0820eH
$unwind$s390_store_characters_under_mask DD 010e01H
	DD	0a20eH
$unwind$s390_store_clock DD 031f19H
	DD	0700ce210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$s390_store_halfword DD 010e01H
	DD	0820eH
$unwind$s390_store_multiple DD 022319H
	DD	0210111H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$s390_subtract DD 010e01H
	DD	0820eH
$unwind$s390_subtract_halfword DD 010e01H
	DD	0820eH
$unwind$s390_subtract_logical DD 010e01H
	DD	0820eH
$unwind$s390_subtract_logical_register DD 010e01H
	DD	0820eH
$unwind$s390_subtract_register DD 010e01H
	DD	0820eH
$unwind$s390_supervisor_call DD 010e01H
	DD	0e20eH
$unwind$s390_test_and_set DD 010e01H
	DD	0a20eH
$unwind$s390_test_under_mask DD 010e01H
	DD	0820eH
$unwind$s390_translate DD 021101H
	DD	0150111H
$unwind$s390_translate_and_test DD 032c19H
	DD	0600112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0284H
	DD	070H
	DD	040H
$unwind$s390_unpack DD 010e01H
	DD	0e20eH
$unwind$s390_update_tree DD 010e01H
	DD	0620eH
$unwind$s390_9180 DD 010e01H
	DD	0620eH
$unwind$s390_9140 DD 010e01H
	DD	0620eH
$unwind$s390_9120 DD 010e01H
	DD	0620eH
$unwind$s390_9110 DD 010e01H
	DD	0620eH
$unwind$s390_9108 DD 010e01H
	DD	0620eH
$unwind$s390_9104 DD 010e01H
	DD	0620eH
$unwind$s390_9102 DD 010e01H
	DD	0620eH
$unwind$s390_9101 DD 010e01H
	DD	0620eH
$unwind$s390_1F00 DD 010e01H
	DD	0620eH
$unwind$s390_1F01 DD 010e01H
	DD	0620eH
$unwind$s390_1F02 DD 010e01H
	DD	0620eH
$unwind$s390_1F03 DD 010e01H
	DD	0620eH
$unwind$s390_1F04 DD 010e01H
	DD	0620eH
$unwind$s390_1F05 DD 010e01H
	DD	0620eH
$unwind$s390_1F06 DD 010e01H
	DD	0620eH
$unwind$s390_1F07 DD 010e01H
	DD	0620eH
$unwind$s390_1F08 DD 010e01H
	DD	0620eH
$unwind$s390_1F09 DD 010e01H
	DD	0620eH
$unwind$s390_1F0A DD 010e01H
	DD	0620eH
$unwind$s390_1F0B DD 010e01H
	DD	0620eH
$unwind$s390_1F0C DD 010e01H
	DD	0620eH
$unwind$s390_1F0D DD 010e01H
	DD	0620eH
$unwind$s390_1F0E DD 010e01H
	DD	0620eH
$unwind$s390_1F0F DD 010e01H
	DD	0620eH
$unwind$s390_1F10 DD 010e01H
	DD	0620eH
$unwind$s390_1F11 DD 010e01H
	DD	0620eH
$unwind$s390_1F12 DD 010e01H
	DD	0620eH
$unwind$s390_1F13 DD 010e01H
	DD	0620eH
$unwind$s390_1F14 DD 010e01H
	DD	0620eH
$unwind$s390_1F15 DD 010e01H
	DD	0620eH
$unwind$s390_1F16 DD 010e01H
	DD	0620eH
$unwind$s390_1F17 DD 010e01H
	DD	0620eH
$unwind$s390_1F18 DD 010e01H
	DD	0620eH
$unwind$s390_1F19 DD 010e01H
	DD	0620eH
$unwind$s390_1F1A DD 010e01H
	DD	0620eH
$unwind$s390_1F1B DD 010e01H
	DD	0620eH
$unwind$s390_1F1C DD 010e01H
	DD	0620eH
$unwind$s390_1F1D DD 010e01H
	DD	0620eH
$unwind$s390_1F1E DD 010e01H
	DD	0620eH
$unwind$s390_1F1F DD 010e01H
	DD	0620eH
$unwind$s390_1F20 DD 010e01H
	DD	0620eH
$unwind$s390_1F21 DD 010e01H
	DD	0620eH
$unwind$s390_1F22 DD 010e01H
	DD	0620eH
$unwind$s390_1F23 DD 010e01H
	DD	0620eH
$unwind$s390_1F24 DD 010e01H
	DD	0620eH
$unwind$s390_1F25 DD 010e01H
	DD	0620eH
$unwind$s390_1F26 DD 010e01H
	DD	0620eH
$unwind$s390_1F27 DD 010e01H
	DD	0620eH
$unwind$s390_1F28 DD 010e01H
	DD	0620eH
$unwind$s390_1F29 DD 010e01H
	DD	0620eH
$unwind$s390_1F2A DD 010e01H
	DD	0620eH
$unwind$s390_1F2B DD 010e01H
	DD	0620eH
$unwind$s390_1F2C DD 010e01H
	DD	0620eH
$unwind$s390_1F2D DD 010e01H
	DD	0620eH
$unwind$s390_1F2E DD 010e01H
	DD	0620eH
$unwind$s390_1F2F DD 010e01H
	DD	0620eH
$unwind$s390_1F30 DD 010e01H
	DD	0620eH
$unwind$s390_1F31 DD 010e01H
	DD	0620eH
$unwind$s390_1F32 DD 010e01H
	DD	0620eH
$unwind$s390_1F33 DD 010e01H
	DD	0620eH
$unwind$s390_1F34 DD 010e01H
	DD	0620eH
$unwind$s390_1F35 DD 010e01H
	DD	0620eH
$unwind$s390_1F36 DD 010e01H
	DD	0620eH
$unwind$s390_1F37 DD 010e01H
	DD	0620eH
$unwind$s390_1F38 DD 010e01H
	DD	0620eH
$unwind$s390_1F39 DD 010e01H
	DD	0620eH
$unwind$s390_1F3A DD 010e01H
	DD	0620eH
$unwind$s390_1F3B DD 010e01H
	DD	0620eH
$unwind$s390_1F3C DD 010e01H
	DD	0620eH
$unwind$s390_1F3D DD 010e01H
	DD	0620eH
$unwind$s390_1F3E DD 010e01H
	DD	0620eH
$unwind$s390_1F3F DD 010e01H
	DD	0620eH
$unwind$s390_1F40 DD 010e01H
	DD	0620eH
$unwind$s390_1F41 DD 010e01H
	DD	0620eH
$unwind$s390_1F42 DD 010e01H
	DD	0620eH
$unwind$s390_1F43 DD 010e01H
	DD	0620eH
$unwind$s390_1F44 DD 010e01H
	DD	0620eH
$unwind$s390_1F45 DD 010e01H
	DD	0620eH
$unwind$s390_1F46 DD 010e01H
	DD	0620eH
$unwind$s390_1F47 DD 010e01H
	DD	0620eH
$unwind$s390_1F48 DD 010e01H
	DD	0620eH
$unwind$s390_1F49 DD 010e01H
	DD	0620eH
$unwind$s390_1F4A DD 010e01H
	DD	0620eH
$unwind$s390_1F4B DD 010e01H
	DD	0620eH
$unwind$s390_1F4C DD 010e01H
	DD	0620eH
$unwind$s390_1F4D DD 010e01H
	DD	0620eH
$unwind$s390_1F4E DD 010e01H
	DD	0620eH
$unwind$s390_1F4F DD 010e01H
	DD	0620eH
$unwind$s390_1F50 DD 010e01H
	DD	0620eH
$unwind$s390_1F51 DD 010e01H
	DD	0620eH
$unwind$s390_1F52 DD 010e01H
	DD	0620eH
$unwind$s390_1F53 DD 010e01H
	DD	0620eH
$unwind$s390_1F54 DD 010e01H
	DD	0620eH
$unwind$s390_1F55 DD 010e01H
	DD	0620eH
$unwind$s390_1F56 DD 010e01H
	DD	0620eH
$unwind$s390_1F57 DD 010e01H
	DD	0620eH
$unwind$s390_1F58 DD 010e01H
	DD	0620eH
$unwind$s390_1F59 DD 010e01H
	DD	0620eH
$unwind$s390_1F5A DD 010e01H
	DD	0620eH
$unwind$s390_1F5B DD 010e01H
	DD	0620eH
$unwind$s390_1F5C DD 010e01H
	DD	0620eH
$unwind$s390_1F5D DD 010e01H
	DD	0620eH
$unwind$s390_1F5E DD 010e01H
	DD	0620eH
$unwind$s390_1F5F DD 010e01H
	DD	0620eH
$unwind$s390_1F60 DD 010e01H
	DD	0620eH
$unwind$s390_1F61 DD 010e01H
	DD	0620eH
$unwind$s390_1F62 DD 010e01H
	DD	0620eH
$unwind$s390_1F63 DD 010e01H
	DD	0620eH
$unwind$s390_1F64 DD 010e01H
	DD	0620eH
$unwind$s390_1F65 DD 010e01H
	DD	0620eH
$unwind$s390_1F66 DD 010e01H
	DD	0620eH
$unwind$s390_1F67 DD 010e01H
	DD	0620eH
$unwind$s390_1F68 DD 010e01H
	DD	0620eH
$unwind$s390_1F69 DD 010e01H
	DD	0620eH
$unwind$s390_1F6A DD 010e01H
	DD	0620eH
$unwind$s390_1F6B DD 010e01H
	DD	0620eH
$unwind$s390_1F6C DD 010e01H
	DD	0620eH
$unwind$s390_1F6D DD 010e01H
	DD	0620eH
$unwind$s390_1F6E DD 010e01H
	DD	0620eH
$unwind$s390_1F6F DD 010e01H
	DD	0620eH
$unwind$s390_1F70 DD 010e01H
	DD	0620eH
$unwind$s390_1F71 DD 010e01H
	DD	0620eH
$unwind$s390_1F72 DD 010e01H
	DD	0620eH
$unwind$s390_1F73 DD 010e01H
	DD	0620eH
$unwind$s390_1F74 DD 010e01H
	DD	0620eH
$unwind$s390_1F75 DD 010e01H
	DD	0620eH
$unwind$s390_1F76 DD 010e01H
	DD	0620eH
$unwind$s390_1F77 DD 010e01H
	DD	0620eH
$unwind$s390_1F78 DD 010e01H
	DD	0620eH
$unwind$s390_1F79 DD 010e01H
	DD	0620eH
$unwind$s390_1F7A DD 010e01H
	DD	0620eH
$unwind$s390_1F7B DD 010e01H
	DD	0620eH
$unwind$s390_1F7C DD 010e01H
	DD	0620eH
$unwind$s390_1F7D DD 010e01H
	DD	0620eH
$unwind$s390_1F7E DD 010e01H
	DD	0620eH
$unwind$s390_1F7F DD 010e01H
	DD	0620eH
$unwind$s390_1F80 DD 010e01H
	DD	0620eH
$unwind$s390_1F81 DD 010e01H
	DD	0620eH
$unwind$s390_1F82 DD 010e01H
	DD	0620eH
$unwind$s390_1F83 DD 010e01H
	DD	0620eH
$unwind$s390_1F84 DD 010e01H
	DD	0620eH
$unwind$s390_1F85 DD 010e01H
	DD	0620eH
$unwind$s390_1F86 DD 010e01H
	DD	0620eH
$unwind$s390_1F87 DD 010e01H
	DD	0620eH
$unwind$s390_1F88 DD 010e01H
	DD	0620eH
$unwind$s390_1F89 DD 010e01H
	DD	0620eH
$unwind$s390_1F8A DD 010e01H
	DD	0620eH
$unwind$s390_1F8B DD 010e01H
	DD	0620eH
$unwind$s390_1F8C DD 010e01H
	DD	0620eH
$unwind$s390_1F8D DD 010e01H
	DD	0620eH
$unwind$s390_1F8E DD 010e01H
	DD	0620eH
$unwind$s390_1F8F DD 010e01H
	DD	0620eH
$unwind$s390_1F90 DD 010e01H
	DD	0620eH
$unwind$s390_1F91 DD 010e01H
	DD	0620eH
$unwind$s390_1F92 DD 010e01H
	DD	0620eH
$unwind$s390_1F93 DD 010e01H
	DD	0620eH
$unwind$s390_1F94 DD 010e01H
	DD	0620eH
$unwind$s390_1F95 DD 010e01H
	DD	0620eH
$unwind$s390_1F96 DD 010e01H
	DD	0620eH
$unwind$s390_1F97 DD 010e01H
	DD	0620eH
$unwind$s390_1F98 DD 010e01H
	DD	0620eH
$unwind$s390_1F99 DD 010e01H
	DD	0620eH
$unwind$s390_1F9A DD 010e01H
	DD	0620eH
$unwind$s390_1F9B DD 010e01H
	DD	0620eH
$unwind$s390_1F9C DD 010e01H
	DD	0620eH
$unwind$s390_1F9D DD 010e01H
	DD	0620eH
$unwind$s390_1F9E DD 010e01H
	DD	0620eH
$unwind$s390_1F9F DD 010e01H
	DD	0620eH
$unwind$s390_1FA0 DD 010e01H
	DD	0620eH
$unwind$s390_1FA1 DD 010e01H
	DD	0620eH
$unwind$s390_1FA2 DD 010e01H
	DD	0620eH
$unwind$s390_1FA3 DD 010e01H
	DD	0620eH
$unwind$s390_1FA4 DD 010e01H
	DD	0620eH
$unwind$s390_1FA5 DD 010e01H
	DD	0620eH
$unwind$s390_1FA6 DD 010e01H
	DD	0620eH
$unwind$s390_1FA7 DD 010e01H
	DD	0620eH
$unwind$s390_1FA8 DD 010e01H
	DD	0620eH
$unwind$s390_1FA9 DD 010e01H
	DD	0620eH
$unwind$s390_1FAA DD 010e01H
	DD	0620eH
$unwind$s390_1FAB DD 010e01H
	DD	0620eH
$unwind$s390_1FAC DD 010e01H
	DD	0620eH
$unwind$s390_1FAD DD 010e01H
	DD	0620eH
$unwind$s390_1FAE DD 010e01H
	DD	0620eH
$unwind$s390_1FAF DD 010e01H
	DD	0620eH
$unwind$s390_1FB0 DD 010e01H
	DD	0620eH
$unwind$s390_1FB1 DD 010e01H
	DD	0620eH
$unwind$s390_1FB2 DD 010e01H
	DD	0620eH
$unwind$s390_1FB3 DD 010e01H
	DD	0620eH
$unwind$s390_1FB4 DD 010e01H
	DD	0620eH
$unwind$s390_1FB5 DD 010e01H
	DD	0620eH
$unwind$s390_1FB6 DD 010e01H
	DD	0620eH
$unwind$s390_1FB7 DD 010e01H
	DD	0620eH
$unwind$s390_1FB8 DD 010e01H
	DD	0620eH
$unwind$s390_1FB9 DD 010e01H
	DD	0620eH
$unwind$s390_1FBA DD 010e01H
	DD	0620eH
$unwind$s390_1FBB DD 010e01H
	DD	0620eH
$unwind$s390_1FBC DD 010e01H
	DD	0620eH
$unwind$s390_1FBD DD 010e01H
	DD	0620eH
$unwind$s390_1FBE DD 010e01H
	DD	0620eH
$unwind$s390_1FBF DD 010e01H
	DD	0620eH
$unwind$s390_1FC0 DD 010e01H
	DD	0620eH
$unwind$s390_1FC1 DD 010e01H
	DD	0620eH
$unwind$s390_1FC2 DD 010e01H
	DD	0620eH
$unwind$s390_1FC3 DD 010e01H
	DD	0620eH
$unwind$s390_1FC4 DD 010e01H
	DD	0620eH
$unwind$s390_1FC5 DD 010e01H
	DD	0620eH
$unwind$s390_1FC6 DD 010e01H
	DD	0620eH
$unwind$s390_1FC7 DD 010e01H
	DD	0620eH
$unwind$s390_1FC8 DD 010e01H
	DD	0620eH
$unwind$s390_1FC9 DD 010e01H
	DD	0620eH
$unwind$s390_1FCA DD 010e01H
	DD	0620eH
$unwind$s390_1FCB DD 010e01H
	DD	0620eH
$unwind$s390_1FCC DD 010e01H
	DD	0620eH
$unwind$s390_1FCD DD 010e01H
	DD	0620eH
$unwind$s390_1FCE DD 010e01H
	DD	0620eH
$unwind$s390_1FCF DD 010e01H
	DD	0620eH
$unwind$s390_1FD0 DD 010e01H
	DD	0620eH
$unwind$s390_1FD1 DD 010e01H
	DD	0620eH
$unwind$s390_1FD2 DD 010e01H
	DD	0620eH
$unwind$s390_1FD3 DD 010e01H
	DD	0620eH
$unwind$s390_1FD4 DD 010e01H
	DD	0620eH
$unwind$s390_1FD5 DD 010e01H
	DD	0620eH
$unwind$s390_1FD6 DD 010e01H
	DD	0620eH
$unwind$s390_1FD7 DD 010e01H
	DD	0620eH
$unwind$s390_1FD8 DD 010e01H
	DD	0620eH
$unwind$s390_1FD9 DD 010e01H
	DD	0620eH
$unwind$s390_1FDA DD 010e01H
	DD	0620eH
$unwind$s390_1FDB DD 010e01H
	DD	0620eH
$unwind$s390_1FDC DD 010e01H
	DD	0620eH
$unwind$s390_1FDD DD 010e01H
	DD	0620eH
$unwind$s390_1FDE DD 010e01H
	DD	0620eH
$unwind$s390_1FDF DD 010e01H
	DD	0620eH
$unwind$s390_1FE0 DD 010e01H
	DD	0620eH
$unwind$s390_1FE1 DD 010e01H
	DD	0620eH
$unwind$s390_1FE2 DD 010e01H
	DD	0620eH
$unwind$s390_1FE3 DD 010e01H
	DD	0620eH
$unwind$s390_1FE4 DD 010e01H
	DD	0620eH
$unwind$s390_1FE5 DD 010e01H
	DD	0620eH
$unwind$s390_1FE6 DD 010e01H
	DD	0620eH
$unwind$s390_1FE7 DD 010e01H
	DD	0620eH
$unwind$s390_1FE8 DD 010e01H
	DD	0620eH
$unwind$s390_1FE9 DD 010e01H
	DD	0620eH
$unwind$s390_1FEA DD 010e01H
	DD	0620eH
$unwind$s390_1FEB DD 010e01H
	DD	0620eH
$unwind$s390_1FEC DD 010e01H
	DD	0620eH
$unwind$s390_1FED DD 010e01H
	DD	0620eH
$unwind$s390_1FEE DD 010e01H
	DD	0620eH
$unwind$s390_1FEF DD 010e01H
	DD	0620eH
$unwind$s390_1FF0 DD 010e01H
	DD	0620eH
$unwind$s390_1FF1 DD 010e01H
	DD	0620eH
$unwind$s390_1FF2 DD 010e01H
	DD	0620eH
$unwind$s390_1FF3 DD 010e01H
	DD	0620eH
$unwind$s390_1FF4 DD 010e01H
	DD	0620eH
$unwind$s390_1FF5 DD 010e01H
	DD	0620eH
$unwind$s390_1FF6 DD 010e01H
	DD	0620eH
$unwind$s390_1FF7 DD 010e01H
	DD	0620eH
$unwind$s390_1FF8 DD 010e01H
	DD	0620eH
$unwind$s390_1FF9 DD 010e01H
	DD	0620eH
$unwind$s390_1FFA DD 010e01H
	DD	0620eH
$unwind$s390_1FFB DD 010e01H
	DD	0620eH
$unwind$s390_1FFC DD 010e01H
	DD	0620eH
$unwind$s390_1FFD DD 010e01H
	DD	0620eH
$unwind$s390_1FFE DD 010e01H
	DD	0620eH
$unwind$s390_1FFF DD 010e01H
	DD	0620eH
$unwind$z900_convert_utf16_to_utf32 DD 021101H
	DD	0150111H
$unwind$z900_convert_utf32_to_utf16 DD 021101H
	DD	0130111H
$unwind$z900_convert_utf32_to_utf8 DD 021101H
	DD	0130111H
$unwind$z900_convert_utf8_to_utf32 DD 021101H
	DD	0170111H
$unwind$z900_search_string_unicode DD 010e01H
	DD	0a20eH
$unwind$z900_translate_and_test_reverse DD 032c19H
	DD	0400112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0184H
	DD	070H
	DD	040H
$unwind$z900_translate_and_test_extended DD 010e01H
	DD	0420eH
$unwind$z900_translate_and_test_reverse_extended DD 010e01H
	DD	0420eH
$unwind$z900_set_access_register DD 010e01H
	DD	0620eH
$unwind$z900_store_access_multiple DD 021101H
	DD	0110111H
$unwind$z900_store_clock_extended DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$z900_translate_extended DD 032c19H
	DD	0400112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0184H
	DD	070H
	DD	040H
$unwind$z900_test_under_mask_high DD 010e01H
	DD	0a20eH
$unwind$z900_test_under_mask_low DD 010e01H
	DD	0a20eH
$unwind$z900_perform_locked_operation DD 010e01H
	DD	0e20eH
$unwind$z900_search_string DD 010e01H
	DD	0e20eH
$unwind$z900_or DD 010e01H
	DD	0a20eH
$unwind$z900_or_character DD 021101H
	DD	01f0111H
$unwind$z900_or_immediate DD 010e01H
	DD	0c20eH
$unwind$z900_or_register DD 010e01H
	DD	0420eH
$unwind$z900_pack DD 010e01H
	DD	0e20eH
$unwind$z900_set_program_mask DD 010e01H
	DD	0220eH
$unwind$z900_shift_left_double DD 010e01H
	DD	0e20eH
$unwind$z900_shift_left_double_logical DD 010e01H
	DD	0a20eH
$unwind$z900_shift_left_single DD 010e01H
	DD	0c20eH
$unwind$z900_shift_left_single_logical DD 010e01H
	DD	0820eH
$unwind$z900_shift_right_double DD 010e01H
	DD	0a20eH
$unwind$z900_shift_right_double_logical DD 010e01H
	DD	0a20eH
$unwind$z900_shift_right_single DD 010e01H
	DD	0a20eH
$unwind$z900_shift_right_single_logical DD 010e01H
	DD	0820eH
$unwind$z900_store_characters_under_mask DD 010e01H
	DD	0c20eH
$unwind$z900_store_clock DD 031f19H
	DD	0700ce210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$z900_store_halfword DD 010e01H
	DD	0820eH
$unwind$z900_store_multiple DD 022319H
	DD	0210111H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$z900_subtract DD 010e01H
	DD	0a20eH
$unwind$z900_subtract_halfword DD 010e01H
	DD	0a20eH
$unwind$z900_subtract_logical DD 010e01H
	DD	0a20eH
$unwind$z900_subtract_logical_register DD 010e01H
	DD	0820eH
$unwind$z900_subtract_register DD 010e01H
	DD	0820eH
$unwind$z900_supervisor_call DD 010e01H
	DD	0c20eH
$unwind$z900_test_and_set DD 010e01H
	DD	0a20eH
$unwind$z900_test_under_mask DD 010e01H
	DD	0820eH
$unwind$z900_translate DD 021101H
	DD	0170111H
$unwind$z900_translate_and_test DD 032c19H
	DD	0600112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0284H
	DD	070H
	DD	040H
$unwind$z900_unpack DD 010e01H
	DD	0e20eH
$unwind$z900_update_tree DD 021101H
	DD	0190111H
$unwind$z900_9180 DD 010e01H
	DD	0620eH
$unwind$z900_9140 DD 010e01H
	DD	0620eH
$unwind$z900_9120 DD 010e01H
	DD	0620eH
$unwind$z900_9110 DD 010e01H
	DD	0620eH
$unwind$z900_9108 DD 010e01H
	DD	0620eH
$unwind$z900_9104 DD 010e01H
	DD	0620eH
$unwind$z900_9102 DD 010e01H
	DD	0620eH
$unwind$z900_9101 DD 010e01H
	DD	0620eH
$unwind$z900_1F00 DD 010e01H
	DD	0620eH
$unwind$z900_1F01 DD 010e01H
	DD	0620eH
$unwind$z900_1F02 DD 010e01H
	DD	0620eH
$unwind$z900_1F03 DD 010e01H
	DD	0620eH
$unwind$z900_1F04 DD 010e01H
	DD	0620eH
$unwind$z900_1F05 DD 010e01H
	DD	0620eH
$unwind$z900_1F06 DD 010e01H
	DD	0620eH
$unwind$z900_1F07 DD 010e01H
	DD	0620eH
$unwind$z900_1F08 DD 010e01H
	DD	0620eH
$unwind$z900_1F09 DD 010e01H
	DD	0620eH
$unwind$z900_1F0A DD 010e01H
	DD	0620eH
$unwind$z900_1F0B DD 010e01H
	DD	0620eH
$unwind$z900_1F0C DD 010e01H
	DD	0620eH
$unwind$z900_1F0D DD 010e01H
	DD	0620eH
$unwind$z900_1F0E DD 010e01H
	DD	0620eH
$unwind$z900_1F0F DD 010e01H
	DD	0620eH
$unwind$z900_1F10 DD 010e01H
	DD	0620eH
$unwind$z900_1F11 DD 010e01H
	DD	0620eH
$unwind$z900_1F12 DD 010e01H
	DD	0620eH
$unwind$z900_1F13 DD 010e01H
	DD	0620eH
$unwind$z900_1F14 DD 010e01H
	DD	0620eH
$unwind$z900_1F15 DD 010e01H
	DD	0620eH
$unwind$z900_1F16 DD 010e01H
	DD	0620eH
$unwind$z900_1F17 DD 010e01H
	DD	0620eH
$unwind$z900_1F18 DD 010e01H
	DD	0620eH
$unwind$z900_1F19 DD 010e01H
	DD	0620eH
$unwind$z900_1F1A DD 010e01H
	DD	0620eH
$unwind$z900_1F1B DD 010e01H
	DD	0620eH
$unwind$z900_1F1C DD 010e01H
	DD	0620eH
$unwind$z900_1F1D DD 010e01H
	DD	0620eH
$unwind$z900_1F1E DD 010e01H
	DD	0620eH
$unwind$z900_1F1F DD 010e01H
	DD	0620eH
$unwind$z900_1F20 DD 010e01H
	DD	0620eH
$unwind$z900_1F21 DD 010e01H
	DD	0620eH
$unwind$z900_1F22 DD 010e01H
	DD	0620eH
$unwind$z900_1F23 DD 010e01H
	DD	0620eH
$unwind$z900_1F24 DD 010e01H
	DD	0620eH
$unwind$z900_1F25 DD 010e01H
	DD	0620eH
$unwind$z900_1F26 DD 010e01H
	DD	0620eH
$unwind$z900_1F27 DD 010e01H
	DD	0620eH
$unwind$z900_1F28 DD 010e01H
	DD	0620eH
$unwind$z900_1F29 DD 010e01H
	DD	0620eH
$unwind$z900_1F2A DD 010e01H
	DD	0620eH
$unwind$z900_1F2B DD 010e01H
	DD	0620eH
$unwind$z900_1F2C DD 010e01H
	DD	0620eH
$unwind$z900_1F2D DD 010e01H
	DD	0620eH
$unwind$z900_1F2E DD 010e01H
	DD	0620eH
$unwind$z900_1F2F DD 010e01H
	DD	0620eH
$unwind$z900_1F30 DD 010e01H
	DD	0620eH
$unwind$z900_1F31 DD 010e01H
	DD	0620eH
$unwind$z900_1F32 DD 010e01H
	DD	0620eH
$unwind$z900_1F33 DD 010e01H
	DD	0620eH
$unwind$z900_1F34 DD 010e01H
	DD	0620eH
$unwind$z900_1F35 DD 010e01H
	DD	0620eH
$unwind$z900_1F36 DD 010e01H
	DD	0620eH
$unwind$z900_1F37 DD 010e01H
	DD	0620eH
$unwind$z900_1F38 DD 010e01H
	DD	0620eH
$unwind$z900_1F39 DD 010e01H
	DD	0620eH
$unwind$z900_1F3A DD 010e01H
	DD	0620eH
$unwind$z900_1F3B DD 010e01H
	DD	0620eH
$unwind$z900_1F3C DD 010e01H
	DD	0620eH
$unwind$z900_1F3D DD 010e01H
	DD	0620eH
$unwind$z900_1F3E DD 010e01H
	DD	0620eH
$unwind$z900_1F3F DD 010e01H
	DD	0620eH
$unwind$z900_1F40 DD 010e01H
	DD	0620eH
$unwind$z900_1F41 DD 010e01H
	DD	0620eH
$unwind$z900_1F42 DD 010e01H
	DD	0620eH
$unwind$z900_1F43 DD 010e01H
	DD	0620eH
$unwind$z900_1F44 DD 010e01H
	DD	0620eH
$unwind$z900_1F45 DD 010e01H
	DD	0620eH
$unwind$z900_1F46 DD 010e01H
	DD	0620eH
$unwind$z900_1F47 DD 010e01H
	DD	0620eH
$unwind$z900_1F48 DD 010e01H
	DD	0620eH
$unwind$z900_1F49 DD 010e01H
	DD	0620eH
$unwind$z900_1F4A DD 010e01H
	DD	0620eH
$unwind$z900_1F4B DD 010e01H
	DD	0620eH
$unwind$z900_1F4C DD 010e01H
	DD	0620eH
$unwind$z900_1F4D DD 010e01H
	DD	0620eH
$unwind$z900_1F4E DD 010e01H
	DD	0620eH
$unwind$z900_1F4F DD 010e01H
	DD	0620eH
$unwind$z900_1F50 DD 010e01H
	DD	0620eH
$unwind$z900_1F51 DD 010e01H
	DD	0620eH
$unwind$z900_1F52 DD 010e01H
	DD	0620eH
$unwind$z900_1F53 DD 010e01H
	DD	0620eH
$unwind$z900_1F54 DD 010e01H
	DD	0620eH
$unwind$z900_1F55 DD 010e01H
	DD	0620eH
$unwind$z900_1F56 DD 010e01H
	DD	0620eH
$unwind$z900_1F57 DD 010e01H
	DD	0620eH
$unwind$z900_1F58 DD 010e01H
	DD	0620eH
$unwind$z900_1F59 DD 010e01H
	DD	0620eH
$unwind$z900_1F5A DD 010e01H
	DD	0620eH
$unwind$z900_1F5B DD 010e01H
	DD	0620eH
$unwind$z900_1F5C DD 010e01H
	DD	0620eH
$unwind$z900_1F5D DD 010e01H
	DD	0620eH
$unwind$z900_1F5E DD 010e01H
	DD	0620eH
$unwind$z900_1F5F DD 010e01H
	DD	0620eH
$unwind$z900_1F60 DD 010e01H
	DD	0620eH
$unwind$z900_1F61 DD 010e01H
	DD	0620eH
$unwind$z900_1F62 DD 010e01H
	DD	0620eH
$unwind$z900_1F63 DD 010e01H
	DD	0620eH
$unwind$z900_1F64 DD 010e01H
	DD	0620eH
$unwind$z900_1F65 DD 010e01H
	DD	0620eH
$unwind$z900_1F66 DD 010e01H
	DD	0620eH
$unwind$z900_1F67 DD 010e01H
	DD	0620eH
$unwind$z900_1F68 DD 010e01H
	DD	0620eH
$unwind$z900_1F69 DD 010e01H
	DD	0620eH
$unwind$z900_1F6A DD 010e01H
	DD	0620eH
$unwind$z900_1F6B DD 010e01H
	DD	0620eH
$unwind$z900_1F6C DD 010e01H
	DD	0620eH
$unwind$z900_1F6D DD 010e01H
	DD	0620eH
$unwind$z900_1F6E DD 010e01H
	DD	0620eH
$unwind$z900_1F6F DD 010e01H
	DD	0620eH
$unwind$z900_1F70 DD 010e01H
	DD	0620eH
$unwind$z900_1F71 DD 010e01H
	DD	0620eH
$unwind$z900_1F72 DD 010e01H
	DD	0620eH
$unwind$z900_1F73 DD 010e01H
	DD	0620eH
$unwind$z900_1F74 DD 010e01H
	DD	0620eH
$unwind$z900_1F75 DD 010e01H
	DD	0620eH
$unwind$z900_1F76 DD 010e01H
	DD	0620eH
$unwind$z900_1F77 DD 010e01H
	DD	0620eH
$unwind$z900_1F78 DD 010e01H
	DD	0620eH
$unwind$z900_1F79 DD 010e01H
	DD	0620eH
$unwind$z900_1F7A DD 010e01H
	DD	0620eH
$unwind$z900_1F7B DD 010e01H
	DD	0620eH
$unwind$z900_1F7C DD 010e01H
	DD	0620eH
$unwind$z900_1F7D DD 010e01H
	DD	0620eH
$unwind$z900_1F7E DD 010e01H
	DD	0620eH
$unwind$z900_1F7F DD 010e01H
	DD	0620eH
$unwind$z900_1F80 DD 010e01H
	DD	0620eH
$unwind$z900_1F81 DD 010e01H
	DD	0620eH
$unwind$z900_1F82 DD 010e01H
	DD	0620eH
$unwind$z900_1F83 DD 010e01H
	DD	0620eH
$unwind$z900_1F84 DD 010e01H
	DD	0620eH
$unwind$z900_1F85 DD 010e01H
	DD	0620eH
$unwind$z900_1F86 DD 010e01H
	DD	0620eH
$unwind$z900_1F87 DD 010e01H
	DD	0620eH
$unwind$z900_1F88 DD 010e01H
	DD	0620eH
$unwind$z900_1F89 DD 010e01H
	DD	0620eH
$unwind$z900_1F8A DD 010e01H
	DD	0620eH
$unwind$z900_1F8B DD 010e01H
	DD	0620eH
$unwind$z900_1F8C DD 010e01H
	DD	0620eH
$unwind$z900_1F8D DD 010e01H
	DD	0620eH
$unwind$z900_1F8E DD 010e01H
	DD	0620eH
$unwind$z900_1F8F DD 010e01H
	DD	0620eH
$unwind$z900_1F90 DD 010e01H
	DD	0620eH
$unwind$z900_1F91 DD 010e01H
	DD	0620eH
$unwind$z900_1F92 DD 010e01H
	DD	0620eH
$unwind$z900_1F93 DD 010e01H
	DD	0620eH
$unwind$z900_1F94 DD 010e01H
	DD	0620eH
$unwind$z900_1F95 DD 010e01H
	DD	0620eH
$unwind$z900_1F96 DD 010e01H
	DD	0620eH
$unwind$z900_1F97 DD 010e01H
	DD	0620eH
$unwind$z900_1F98 DD 010e01H
	DD	0620eH
$unwind$z900_1F99 DD 010e01H
	DD	0620eH
$unwind$z900_1F9A DD 010e01H
	DD	0620eH
$unwind$z900_1F9B DD 010e01H
	DD	0620eH
$unwind$z900_1F9C DD 010e01H
	DD	0620eH
$unwind$z900_1F9D DD 010e01H
	DD	0620eH
$unwind$z900_1F9E DD 010e01H
	DD	0620eH
$unwind$z900_1F9F DD 010e01H
	DD	0620eH
$unwind$z900_1FA0 DD 010e01H
	DD	0620eH
$unwind$z900_1FA1 DD 010e01H
	DD	0620eH
$unwind$z900_1FA2 DD 010e01H
	DD	0620eH
$unwind$z900_1FA3 DD 010e01H
	DD	0620eH
$unwind$z900_1FA4 DD 010e01H
	DD	0620eH
$unwind$z900_1FA5 DD 010e01H
	DD	0620eH
$unwind$z900_1FA6 DD 010e01H
	DD	0620eH
$unwind$z900_1FA7 DD 010e01H
	DD	0620eH
$unwind$z900_1FA8 DD 010e01H
	DD	0620eH
$unwind$z900_1FA9 DD 010e01H
	DD	0620eH
$unwind$z900_1FAA DD 010e01H
	DD	0620eH
$unwind$z900_1FAB DD 010e01H
	DD	0620eH
$unwind$z900_1FAC DD 010e01H
	DD	0620eH
$unwind$z900_1FAD DD 010e01H
	DD	0620eH
$unwind$z900_1FAE DD 010e01H
	DD	0620eH
$unwind$z900_1FAF DD 010e01H
	DD	0620eH
$unwind$z900_1FB0 DD 010e01H
	DD	0620eH
$unwind$z900_1FB1 DD 010e01H
	DD	0620eH
$unwind$z900_1FB2 DD 010e01H
	DD	0620eH
$unwind$z900_1FB3 DD 010e01H
	DD	0620eH
$unwind$z900_1FB4 DD 010e01H
	DD	0620eH
$unwind$z900_1FB5 DD 010e01H
	DD	0620eH
$unwind$z900_1FB6 DD 010e01H
	DD	0620eH
$unwind$z900_1FB7 DD 010e01H
	DD	0620eH
$unwind$z900_1FB8 DD 010e01H
	DD	0620eH
$unwind$z900_1FB9 DD 010e01H
	DD	0620eH
$unwind$z900_1FBA DD 010e01H
	DD	0620eH
$unwind$z900_1FBB DD 010e01H
	DD	0620eH
$unwind$z900_1FBC DD 010e01H
	DD	0620eH
$unwind$z900_1FBD DD 010e01H
	DD	0620eH
$unwind$z900_1FBE DD 010e01H
	DD	0620eH
$unwind$z900_1FBF DD 010e01H
	DD	0620eH
$unwind$z900_1FC0 DD 010e01H
	DD	0620eH
$unwind$z900_1FC1 DD 010e01H
	DD	0620eH
$unwind$z900_1FC2 DD 010e01H
	DD	0620eH
$unwind$z900_1FC3 DD 010e01H
	DD	0620eH
$unwind$z900_1FC4 DD 010e01H
	DD	0620eH
$unwind$z900_1FC5 DD 010e01H
	DD	0620eH
$unwind$z900_1FC6 DD 010e01H
	DD	0620eH
$unwind$z900_1FC7 DD 010e01H
	DD	0620eH
$unwind$z900_1FC8 DD 010e01H
	DD	0620eH
$unwind$z900_1FC9 DD 010e01H
	DD	0620eH
$unwind$z900_1FCA DD 010e01H
	DD	0620eH
$unwind$z900_1FCB DD 010e01H
	DD	0620eH
$unwind$z900_1FCC DD 010e01H
	DD	0620eH
$unwind$z900_1FCD DD 010e01H
	DD	0620eH
$unwind$z900_1FCE DD 010e01H
	DD	0620eH
$unwind$z900_1FCF DD 010e01H
	DD	0620eH
$unwind$z900_1FD0 DD 010e01H
	DD	0620eH
$unwind$z900_1FD1 DD 010e01H
	DD	0620eH
$unwind$z900_1FD2 DD 010e01H
	DD	0620eH
$unwind$z900_1FD3 DD 010e01H
	DD	0620eH
$unwind$z900_1FD4 DD 010e01H
	DD	0620eH
$unwind$z900_1FD5 DD 010e01H
	DD	0620eH
$unwind$z900_1FD6 DD 010e01H
	DD	0620eH
$unwind$z900_1FD7 DD 010e01H
	DD	0620eH
$unwind$z900_1FD8 DD 010e01H
	DD	0620eH
$unwind$z900_1FD9 DD 010e01H
	DD	0620eH
$unwind$z900_1FDA DD 010e01H
	DD	0620eH
$unwind$z900_1FDB DD 010e01H
	DD	0620eH
$unwind$z900_1FDC DD 010e01H
	DD	0620eH
$unwind$z900_1FDD DD 010e01H
	DD	0620eH
$unwind$z900_1FDE DD 010e01H
	DD	0620eH
$unwind$z900_1FDF DD 010e01H
	DD	0620eH
$unwind$z900_1FE0 DD 010e01H
	DD	0620eH
$unwind$z900_1FE1 DD 010e01H
	DD	0620eH
$unwind$z900_1FE2 DD 010e01H
	DD	0620eH
$unwind$z900_1FE3 DD 010e01H
	DD	0620eH
$unwind$z900_1FE4 DD 010e01H
	DD	0620eH
$unwind$z900_1FE5 DD 010e01H
	DD	0620eH
$unwind$z900_1FE6 DD 010e01H
	DD	0620eH
$unwind$z900_1FE7 DD 010e01H
	DD	0620eH
$unwind$z900_1FE8 DD 010e01H
	DD	0620eH
$unwind$z900_1FE9 DD 010e01H
	DD	0620eH
$unwind$z900_1FEA DD 010e01H
	DD	0620eH
$unwind$z900_1FEB DD 010e01H
	DD	0620eH
$unwind$z900_1FEC DD 010e01H
	DD	0620eH
$unwind$z900_1FED DD 010e01H
	DD	0620eH
$unwind$z900_1FEE DD 010e01H
	DD	0620eH
$unwind$z900_1FEF DD 010e01H
	DD	0620eH
$unwind$z900_1FF0 DD 010e01H
	DD	0620eH
$unwind$z900_1FF1 DD 010e01H
	DD	0620eH
$unwind$z900_1FF2 DD 010e01H
	DD	0620eH
$unwind$z900_1FF3 DD 010e01H
	DD	0620eH
$unwind$z900_1FF4 DD 010e01H
	DD	0620eH
$unwind$z900_1FF5 DD 010e01H
	DD	0620eH
$unwind$z900_1FF6 DD 010e01H
	DD	0620eH
$unwind$z900_1FF7 DD 010e01H
	DD	0620eH
$unwind$z900_1FF8 DD 010e01H
	DD	0620eH
$unwind$z900_1FF9 DD 010e01H
	DD	0620eH
$unwind$z900_1FFA DD 010e01H
	DD	0620eH
$unwind$z900_1FFB DD 010e01H
	DD	0620eH
$unwind$z900_1FFC DD 010e01H
	DD	0620eH
$unwind$z900_1FFD DD 010e01H
	DD	0620eH
$unwind$z900_1FFE DD 010e01H
	DD	0620eH
$unwind$z900_1FFF DD 010e01H
	DD	0620eH
$unwind$z900_translate_and_test_xxx_extended DD 032c19H
	DD	0580112H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0244H
	DD	070H
	DD	040H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
a_bit$ = 0
isReverse$ = 1
r1$ = 4
temp_h$ = 8
temp_l$ = 12
fc$ = 16
buf_addr$ = 24
l_bit$ = 32
f_bit$ = 33
buf_main_addr$ = 40
processed$ = 48
buf_len$ = 56
m3$ = 64
arg_ch$ = 68
r2$ = 72
temp$1 = 76
i$ = 80
fc_addr$ = 88
fc_page_no$ = 96
tv144 = 104
tv150 = 108
tv152 = 112
tv191 = 116
max_process$ = 120
tv384 = 124
tv130 = 128
tv132 = 132
tv136 = 136
tv138 = 140
tv142 = 144
fct_page_no$ = 152
fct_work_page_addr$ = 160
fct_addr$ = 168
tv177 = 176
fct_page_addr$ = 184
fct_work_end_addr$ = 192
fct_main_page_addr$ = 256
__$ArrayPad$ = 576
inst$ = 720
regs$ = 728
z900_translate_and_test_xxx_extended PROC

; 3153 : {

$LN84:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec c0 02
	00 00		 sub	 rsp, 704		; 000002c0H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 40 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3154 :     int   r1;                   /* Operand-1 register number         */
; 3155 :     int   r2;                   /* Operand-2 register number         */
; 3156 :     int   m3;                   /* Operand-3 mask value              */
; 3157 : 
; 3158 :     bool  a_bit;                /* (A) Argument-Character Control    */
; 3159 :     bool  f_bit;                /* (F) Function-Code Control         */
; 3160 :     bool  l_bit;                /* (L) Argument-Character Limit      */
; 3161 : 
; 3162 :     bool  isReverse;            /* true == TRTRE, false == TRTE      */
; 3163 : 
; 3164 :     U32   arg_ch;               /* Argument character                */
; 3165 :     U32   fc;                   /* Function-Code                     */
; 3166 :     U16   temp_l;               /* Work - low byte                   */
; 3167 :     U16   temp_h;               /* Work - high byte                  */
; 3168 : 
; 3169 :     int   processed;            /* # bytes processed                 */
; 3170 :     int   max_process;          /* Max to process on current page    */
; 3171 :     int   i;                    /* Work iterator                     */
; 3172 : 
; 3173 :     VADR  buf_addr;             /* First argument address            */
; 3174 :     GREG  buf_len;              /* First argument length             */
; 3175 :     BYTE* buf_main_addr;        /* Buffer real address */
; 3176 : 
; 3177 :     VADR  fc_page_no;           /* Function-Code - page number       */
; 3178 :     VADR  fc_addr;              /* Function-Code - address           */
; 3179 : 
; 3180 :     VADR  fct_addr;             /* Function-code table address       */
; 3181 :     VADR  fct_page_no;          /* Function-Code Table - page number */
; 3182 :     VADR  fct_page_addr;        /* Function-Code TABLE - page addr   */
; 3183 : 
; 3184 :     VADR  fct_work_page_addr;   /* Work                              */
; 3185 :     VADR  fct_work_end_addr;    /* Work                              */
; 3186 : 
; 3187 :     CACHE_ALIGN                 /* FC Table - direct mainstor addrs  */
; 3188 :     BYTE* fct_main_page_addr[ FCT_REAL_MAX_PAGES ];
; 3189 : 
; 3190 :     /* Function Code Table Lengths lookup table indexed by 'm3' mask */
; 3191 : 
; 3192 :     static const int fct_table_lengths[ 8 ] =
; 3193 :     {                           /*      A   F   L       (index)      */
; 3194 :                                 /*    -------------    ---------     */
; 3195 :         256,                    /*      0   0   0          0         */
; 3196 :         256,                    /*      0   0   1          1         */
; 3197 :         512,                    /*      0   1   0          2         */
; 3198 :         512,                    /*      0   1   1          3         */
; 3199 :         64*1024,                /*      1   0   0          4         */
; 3200 :         256,                    /*      1   0   1          5         */
; 3201 :         128*1024,               /*      1   1   0          6         */
; 3202 :         512                     /*      1   1   1          7         */
; 3203 :     };
; 3204 : 
; 3205 :     RRF_M( inst, regs, r1, r2, m3 );

  0002c	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00034	e8 00 00 00 00	 call	 fetch_fw_noswap
  00039	8b c8		 mov	 ecx, eax
  0003b	e8 00 00 00 00	 call	 _byteswap_ulong
  00040	89 45 4c	 mov	 DWORD PTR temp$1[rbp], eax
  00043	8b 45 4c	 mov	 eax, DWORD PTR temp$1[rbp]
  00046	83 e0 0f	 and	 eax, 15
  00049	89 45 48	 mov	 DWORD PTR r2$[rbp], eax
  0004c	8b 45 4c	 mov	 eax, DWORD PTR temp$1[rbp]
  0004f	c1 e8 04	 shr	 eax, 4
  00052	83 e0 0f	 and	 eax, 15
  00055	89 45 04	 mov	 DWORD PTR r1$[rbp], eax
  00058	8b 45 4c	 mov	 eax, DWORD PTR temp$1[rbp]
  0005b	c1 e8 0c	 shr	 eax, 12
  0005e	83 e0 0f	 and	 eax, 15
  00061	89 45 40	 mov	 DWORD PTR m3$[rbp], eax
$LN4@z900_trans:
  00064	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00070	48 83 c0 04	 add	 rax, 4
  00074	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00080	33 c0		 xor	 eax, eax
  00082	83 f8 04	 cmp	 eax, 4
  00085	74 0f		 je	 SHORT $LN22@z900_trans
  00087	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0008f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN22@z900_trans:
  00096	33 c0		 xor	 eax, eax
  00098	85 c0		 test	 eax, eax
  0009a	75 c8		 jne	 SHORT $LN4@z900_trans

; 3206 :     PER_ZEROADDR_CHECK( regs, 1 );

  0009c	ba 01 00 00 00	 mov	 edx, 1
  000a1	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	e8 00 00 00 00	 call	 z900_per3_zero_check

; 3207 :     PER_ZEROADDR_LCHECK( regs, r1, r1+1 );

  000ae	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  000b1	ff c0		 inc	 eax
  000b3	44 8b c0	 mov	 r8d, eax
  000b6	8b 55 04	 mov	 edx, DWORD PTR r1$[rbp]
  000b9	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	e8 00 00 00 00	 call	 z900_per3_zero_lcheck
$LN7@z900_trans:

; 3208 : 
; 3209 :     TXFC_INSTR_CHECK( regs );

  000c6	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ce	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  000d5	85 c0		 test	 eax, eax
  000d7	74 3f		 je	 SHORT $LN23@z900_trans
  000d9	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000e1	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  000e7	0f ba e8 0f	 bts	 eax, 15
  000eb	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f3	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  000f9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG207537
  00100	41 b8 0b 00 00
	00		 mov	 r8d, 11
  00106	ba 02 00 00 00	 mov	 edx, 2
  0010b	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00113	e8 00 00 00 00	 call	 z900_abort_transaction
$LN23@z900_trans:
  00118	33 c0		 xor	 eax, eax
  0011a	85 c0		 test	 eax, eax
  0011c	75 a8		 jne	 SHORT $LN7@z900_trans

; 3210 : 
; 3211 :     a_bit = ((m3 & 0x08) ? true : false);

  0011e	8b 45 40	 mov	 eax, DWORD PTR m3$[rbp]
  00121	83 e0 08	 and	 eax, 8
  00124	85 c0		 test	 eax, eax
  00126	74 0c		 je	 SHORT $LN56@z900_trans
  00128	c7 85 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv130[rbp], 1
  00132	eb 0a		 jmp	 SHORT $LN57@z900_trans
$LN56@z900_trans:
  00134	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv130[rbp], 0
$LN57@z900_trans:
  0013e	83 bd 80 00 00
	00 00		 cmp	 DWORD PTR tv130[rbp], 0
  00145	75 0c		 jne	 SHORT $LN58@z900_trans
  00147	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv132[rbp], 0
  00151	eb 0a		 jmp	 SHORT $LN59@z900_trans
$LN58@z900_trans:
  00153	c7 85 84 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv132[rbp], 1
$LN59@z900_trans:
  0015d	0f b6 85 84 00
	00 00		 movzx	 eax, BYTE PTR tv132[rbp]
  00164	88 45 00	 mov	 BYTE PTR a_bit$[rbp], al

; 3212 :     f_bit = ((m3 & 0x04) ? true : false);

  00167	8b 45 40	 mov	 eax, DWORD PTR m3$[rbp]
  0016a	83 e0 04	 and	 eax, 4
  0016d	85 c0		 test	 eax, eax
  0016f	74 0c		 je	 SHORT $LN60@z900_trans
  00171	c7 85 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv136[rbp], 1
  0017b	eb 0a		 jmp	 SHORT $LN61@z900_trans
$LN60@z900_trans:
  0017d	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv136[rbp], 0
$LN61@z900_trans:
  00187	83 bd 88 00 00
	00 00		 cmp	 DWORD PTR tv136[rbp], 0
  0018e	75 0c		 jne	 SHORT $LN62@z900_trans
  00190	c7 85 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv138[rbp], 0
  0019a	eb 0a		 jmp	 SHORT $LN63@z900_trans
$LN62@z900_trans:
  0019c	c7 85 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv138[rbp], 1
$LN63@z900_trans:
  001a6	0f b6 85 8c 00
	00 00		 movzx	 eax, BYTE PTR tv138[rbp]
  001ad	88 45 21	 mov	 BYTE PTR f_bit$[rbp], al

; 3213 :     l_bit = ((m3 & 0x02) ? true : false);

  001b0	8b 45 40	 mov	 eax, DWORD PTR m3$[rbp]
  001b3	83 e0 02	 and	 eax, 2
  001b6	85 c0		 test	 eax, eax
  001b8	74 0c		 je	 SHORT $LN64@z900_trans
  001ba	c7 85 90 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv142[rbp], 1
  001c4	eb 0a		 jmp	 SHORT $LN65@z900_trans
$LN64@z900_trans:
  001c6	c7 85 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv142[rbp], 0
$LN65@z900_trans:
  001d0	83 bd 90 00 00
	00 00		 cmp	 DWORD PTR tv142[rbp], 0
  001d7	75 09		 jne	 SHORT $LN66@z900_trans
  001d9	c7 45 68 00 00
	00 00		 mov	 DWORD PTR tv144[rbp], 0
  001e0	eb 07		 jmp	 SHORT $LN67@z900_trans
$LN66@z900_trans:
  001e2	c7 45 68 01 00
	00 00		 mov	 DWORD PTR tv144[rbp], 1
$LN67@z900_trans:
  001e9	0f b6 45 68	 movzx	 eax, BYTE PTR tv144[rbp]
  001ed	88 45 20	 mov	 BYTE PTR l_bit$[rbp], al

; 3214 : 
; 3215 :     isReverse = (inst[1] == 0XBD);  // TRTRE instruction?

  001f0	b8 01 00 00 00	 mov	 eax, 1
  001f5	48 6b c0 01	 imul	 rax, rax, 1
  001f9	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00201	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00205	3d bd 00 00 00	 cmp	 eax, 189		; 000000bdH
  0020a	75 09		 jne	 SHORT $LN68@z900_trans
  0020c	c7 45 6c 01 00
	00 00		 mov	 DWORD PTR tv150[rbp], 1
  00213	eb 07		 jmp	 SHORT $LN69@z900_trans
$LN68@z900_trans:
  00215	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR tv150[rbp], 0
$LN69@z900_trans:
  0021c	83 7d 6c 00	 cmp	 DWORD PTR tv150[rbp], 0
  00220	75 09		 jne	 SHORT $LN70@z900_trans
  00222	c7 45 70 00 00
	00 00		 mov	 DWORD PTR tv152[rbp], 0
  00229	eb 07		 jmp	 SHORT $LN71@z900_trans
$LN70@z900_trans:
  0022b	c7 45 70 01 00
	00 00		 mov	 DWORD PTR tv152[rbp], 1
$LN71@z900_trans:
  00232	0f b6 45 70	 movzx	 eax, BYTE PTR tv152[rbp]
  00236	88 45 01	 mov	 BYTE PTR isReverse$[rbp], al

; 3216 : 
; 3217 :     buf_addr = regs->GR( r1 ) & ADDRESS_MAXWRAP( regs );

  00239	48 63 45 04	 movsxd	 rax, DWORD PTR r1$[rbp]
  0023d	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00245	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0024d	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00254	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0025c	48 23 c2	 and	 rax, rdx
  0025f	48 89 45 18	 mov	 QWORD PTR buf_addr$[rbp], rax

; 3218 :     buf_len  = GR_A( r1 + 1, regs );

  00263	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0026b	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00271	83 e0 01	 and	 eax, 1
  00274	85 c0		 test	 eax, eax
  00276	74 20		 je	 SHORT $LN72@z900_trans
  00278	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  0027b	ff c0		 inc	 eax
  0027d	48 98		 cdqe
  0027f	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00287	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0028f	48 89 85 b0 00
	00 00		 mov	 QWORD PTR tv177[rbp], rax
  00296	eb 1d		 jmp	 SHORT $LN73@z900_trans
$LN72@z900_trans:
  00298	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  0029b	ff c0		 inc	 eax
  0029d	48 98		 cdqe
  0029f	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002a7	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  002ae	48 89 85 b0 00
	00 00		 mov	 QWORD PTR tv177[rbp], rax
$LN73@z900_trans:
  002b5	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR tv177[rbp]
  002bc	48 89 45 38	 mov	 QWORD PTR buf_len$[rbp], rax

; 3219 : 
; 3220 :     if (unlikely((a_bit && (buf_len & 1)) || r1 & 0x01))

  002c0	0f b6 45 00	 movzx	 eax, BYTE PTR a_bit$[rbp]
  002c4	85 c0		 test	 eax, eax
  002c6	74 0d		 je	 SHORT $LN74@z900_trans
  002c8	48 8b 45 38	 mov	 rax, QWORD PTR buf_len$[rbp]
  002cc	48 83 e0 01	 and	 rax, 1
  002d0	48 85 c0	 test	 rax, rax
  002d3	75 13		 jne	 SHORT $LN75@z900_trans
$LN74@z900_trans:
  002d5	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  002d8	83 e0 01	 and	 eax, 1
  002db	85 c0		 test	 eax, eax
  002dd	75 09		 jne	 SHORT $LN75@z900_trans
  002df	c7 45 74 00 00
	00 00		 mov	 DWORD PTR tv191[rbp], 0
  002e6	eb 07		 jmp	 SHORT $LN79@z900_trans
$LN75@z900_trans:
  002e8	c7 45 74 01 00
	00 00		 mov	 DWORD PTR tv191[rbp], 1
$LN79@z900_trans:
  002ef	83 7d 74 00	 cmp	 DWORD PTR tv191[rbp], 0
  002f3	74 1b		 je	 SHORT $LN24@z900_trans

; 3221 :         regs->program_interrupt( regs, PGM_SPECIFICATION_EXCEPTION );

  002f5	ba 06 00 00 00	 mov	 edx, 6
  002fa	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00302	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0030a	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN24@z900_trans:

; 3222 : 
; 3223 :     /* Fast exit path */
; 3224 :     if (buf_len == 0)

  00310	48 83 7d 38 00	 cmp	 QWORD PTR buf_len$[rbp], 0
  00315	75 11		 jne	 SHORT $LN25@z900_trans

; 3225 :     {
; 3226 :         regs->psw.cc =  0;

  00317	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0031f	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 3227 :         return;

  00323	e9 cc 05 00 00	 jmp	 $LN1@z900_trans
$LN25@z900_trans:

; 3228 :     }
; 3229 : 
; 3230 :     /* Initialize fct_... variables */
; 3231 : 
; 3232 :     fct_addr           = regs->GR( 1 ) & ADDRESS_MAXWRAP( regs );

  00328	b8 08 00 00 00	 mov	 eax, 8
  0032d	48 6b c0 01	 imul	 rax, rax, 1
  00331	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00339	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00341	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00348	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  00350	48 23 c2	 and	 rax, rdx
  00353	48 89 85 a8 00
	00 00		 mov	 QWORD PTR fct_addr$[rbp], rax

; 3233 :     fct_work_end_addr  = fct_addr + fct_table_lengths[ m3 >> 1 ];

  0035a	8b 45 40	 mov	 eax, DWORD PTR m3$[rbp]
  0035d	d1 f8		 sar	 eax, 1
  0035f	48 98		 cdqe
  00361	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fct_table_lengths@?1??z900_translate_and_test_xxx_extended@@9@9
  00368	48 63 04 81	 movsxd	 rax, DWORD PTR [rcx+rax*4]
  0036c	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR fct_addr$[rbp]
  00373	48 03 c8	 add	 rcx, rax
  00376	48 8b c1	 mov	 rax, rcx
  00379	48 89 85 c0 00
	00 00		 mov	 QWORD PTR fct_work_end_addr$[rbp], rax

; 3234 :     fct_page_addr      = fct_addr & PAGEFRAME_PAGEMASK;

  00380	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR fct_addr$[rbp]
  00387	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0038d	48 89 85 b8 00
	00 00		 mov	 QWORD PTR fct_page_addr$[rbp], rax

; 3235 :     fct_page_no        = fct_page_addr >> PAGEFRAME_PAGESHIFT;

  00394	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR fct_page_addr$[rbp]
  0039b	48 c1 e8 0c	 shr	 rax, 12
  0039f	48 89 85 98 00
	00 00		 mov	 QWORD PTR fct_page_no$[rbp], rax

; 3236 :     fct_work_page_addr = fct_page_addr;

  003a6	48 8b 85 b8 00
	00 00		 mov	 rax, QWORD PTR fct_page_addr$[rbp]
  003ad	48 89 85 a0 00
	00 00		 mov	 QWORD PTR fct_work_page_addr$[rbp], rax

; 3237 : 
; 3238 :     /* Build function code table mainstor address table
; 3239 :        (but only for the pages that cover the FC table)
; 3240 :     */
; 3241 :     for (i=0; fct_work_page_addr < fct_work_end_addr; fct_work_page_addr += PAGEFRAME_PAGESIZE, ++i)

  003b4	c7 45 50 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  003bb	eb 1c		 jmp	 SHORT $LN10@z900_trans
$LN8@z900_trans:
  003bd	48 8b 85 a0 00
	00 00		 mov	 rax, QWORD PTR fct_work_page_addr$[rbp]
  003c4	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  003ca	48 89 85 a0 00
	00 00		 mov	 QWORD PTR fct_work_page_addr$[rbp], rax
  003d1	8b 45 50	 mov	 eax, DWORD PTR i$[rbp]
  003d4	ff c0		 inc	 eax
  003d6	89 45 50	 mov	 DWORD PTR i$[rbp], eax
$LN10@z900_trans:
  003d9	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR fct_work_end_addr$[rbp]
  003e0	48 39 85 a0 00
	00 00		 cmp	 QWORD PTR fct_work_page_addr$[rbp], rax
  003e7	73 60		 jae	 SHORT $LN9@z900_trans

; 3242 :     {
; 3243 :         fct_main_page_addr[i] = MADDRL( fct_work_page_addr & ADDRESS_MAXWRAP( regs ),

  003e9	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003f1	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  003f8	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR fct_work_page_addr$[rbp]
  003ff	48 23 c8	 and	 rcx, rax
  00402	48 8b c1	 mov	 rax, rcx
  00405	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0040d	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00411	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00415	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0041d	4c 8b 8c 24 d8
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00425	41 b8 01 00 00
	00		 mov	 r8d, 1
  0042b	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00430	48 8b c8	 mov	 rcx, rax
  00433	e8 00 00 00 00	 call	 z900_maddr_l
  00438	48 63 4d 50	 movsxd	 rcx, DWORD PTR i$[rbp]
  0043c	48 89 84 cd 00
	01 00 00	 mov	 QWORD PTR fct_main_page_addr$[rbp+rcx*8], rax

; 3244 :                                         PAGEFRAME_PAGESIZE, 1, regs, ACCTYPE_READ,
; 3245 :                                         regs->psw.pkey );
; 3246 :     }

  00444	e9 74 ff ff ff	 jmp	 $LN8@z900_trans
$LN9@z900_trans:

; 3247 : 
; 3248 :     /*  Determine CC=3 length:
; 3249 : 
; 3250 :         POP : SA22-7832-13 Page 7-418:
; 3251 : 
; 3252 :            "The amount of processing that results in the setting
; 3253 :             of condition code 3 is determined by the CPU on the
; 3254 :             basis of improving system performance, and it may
; 3255 :             be a different amount each time the instruction is
; 3256 :             executed."
; 3257 : 
; 3258 :         CC=3 :  Processed first operand to end of page and
; 3259 :                 indicate more data remaining.
; 3260 :     */
; 3261 : 
; 3262 :     /* Get on-page maximum process length */
; 3263 :     if (isReverse)

  00449	0f b6 45 01	 movzx	 eax, BYTE PTR isReverse$[rbp]
  0044d	85 c0		 test	 eax, eax
  0044f	74 12		 je	 SHORT $LN26@z900_trans

; 3264 :         /* TRTRE instruction */
; 3265 :         max_process = (buf_addr & PAGEFRAME_BYTEMASK) + 1;

  00451	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  00455	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0045b	48 ff c0	 inc	 rax
  0045e	89 45 78	 mov	 DWORD PTR max_process$[rbp], eax
  00461	eb 18		 jmp	 SHORT $LN27@z900_trans
$LN26@z900_trans:

; 3266 :     else
; 3267 :         /* TRTE instruction */
; 3268 :         max_process = PAGEFRAME_PAGESIZE - ( buf_addr & PAGEFRAME_BYTEMASK );

  00463	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  00467	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0046d	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00472	48 2b c8	 sub	 rcx, rax
  00475	48 8b c1	 mov	 rax, rcx
  00478	89 45 78	 mov	 DWORD PTR max_process$[rbp], eax
$LN27@z900_trans:

; 3269 : 
; 3270 :     /* Get buffer mainstor address - a bit = 1 page cross checked later */
; 3271 :     buf_main_addr = MADDRL( buf_addr, 1, r1, regs, ACCTYPE_READ, regs->psw.pkey );

  0047b	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00483	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00487	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0048b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00493	4c 8b 8c 24 d8
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0049b	44 8b 45 04	 mov	 r8d, DWORD PTR r1$[rbp]
  0049f	ba 01 00 00 00	 mov	 edx, 1
  004a4	48 8b 4d 18	 mov	 rcx, QWORD PTR buf_addr$[rbp]
  004a8	e8 00 00 00 00	 call	 z900_maddr_l
  004ad	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3272 : 
; 3273 :     fc = 0;

  004b1	c7 45 10 00 00
	00 00		 mov	 DWORD PTR fc$[rbp], 0

; 3274 :     processed = 0;

  004b8	c7 45 30 00 00
	00 00		 mov	 DWORD PTR processed$[rbp], 0
$LN11@z900_trans:

; 3275 :     while (buf_len && !fc && processed < max_process)

  004bf	48 83 7d 38 00	 cmp	 QWORD PTR buf_len$[rbp], 0
  004c4	0f 84 dc 02 00
	00		 je	 $LN12@z900_trans
  004ca	83 7d 10 00	 cmp	 DWORD PTR fc$[rbp], 0
  004ce	0f 85 d2 02 00
	00		 jne	 $LN12@z900_trans
  004d4	8b 45 78	 mov	 eax, DWORD PTR max_process$[rbp]
  004d7	39 45 30	 cmp	 DWORD PTR processed$[rbp], eax
  004da	0f 8d c6 02 00
	00		 jge	 $LN12@z900_trans

; 3276 :     {
; 3277 :         if (a_bit)

  004e0	0f b6 45 00	 movzx	 eax, BYTE PTR a_bit$[rbp]
  004e4	85 c0		 test	 eax, eax
  004e6	0f 84 87 00 00
	00		 je	 $LN28@z900_trans

; 3278 :         {
; 3279 :             /* Does arg cross page boundary? (last byte of page?) */
; 3280 :             if ((buf_addr & PAGEFRAME_BYTEMASK) == PAGEFRAME_BYTEMASK)

  004ec	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  004f0	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  004f6	48 3d ff 0f 00
	00		 cmp	 rax, 4095		; 00000fffH
  004fc	75 4c		 jne	 SHORT $LN30@z900_trans

; 3281 :             {
; 3282 :                 /* Yes! Piece together the argument */
; 3283 :                 temp_h  =  *buf_main_addr;

  004fe	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  00502	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00505	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3284 :                 temp_l  =  *MADDRL( buf_addr+1, 1 , r1, regs, ACCTYPE_READ, regs->psw.pkey );

  00509	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  0050d	48 ff c0	 inc	 rax
  00510	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00518	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0051c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00520	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00528	4c 8b 8c 24 d8
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00530	44 8b 45 04	 mov	 r8d, DWORD PTR r1$[rbp]
  00534	ba 01 00 00 00	 mov	 edx, 1
  00539	48 8b c8	 mov	 rcx, rax
  0053c	e8 00 00 00 00	 call	 z900_maddr_l
  00541	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00544	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax

; 3285 :             }

  00548	eb 17		 jmp	 SHORT $LN31@z900_trans
$LN30@z900_trans:

; 3286 :             else
; 3287 :             {
; 3288 :                 // the following fails on sparc 64 : alignment
; 3289 :                 // arg_ch = CSWAP16( *(U16*) buf_main_addr );
; 3290 :                 // so
; 3291 :                 temp_h  =  *(buf_main_addr +0);

  0054a	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  0054e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00551	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3292 :                 temp_l  =  *(buf_main_addr +1);

  00555	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  00559	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0055d	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax
$LN31@z900_trans:

; 3293 :             }
; 3294 :             arg_ch  =   (temp_h << 8) | temp_l;

  00561	0f b7 45 08	 movzx	 eax, WORD PTR temp_h$[rbp]
  00565	c1 e0 08	 shl	 eax, 8
  00568	0f b7 4d 0c	 movzx	 ecx, WORD PTR temp_l$[rbp]
  0056c	0b c1		 or	 eax, ecx
  0056e	89 45 44	 mov	 DWORD PTR arg_ch$[rbp], eax

; 3295 :         }

  00571	eb 0a		 jmp	 SHORT $LN29@z900_trans
$LN28@z900_trans:

; 3296 :         else
; 3297 :         {
; 3298 :             arg_ch = *buf_main_addr;

  00573	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  00577	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0057a	89 45 44	 mov	 DWORD PTR arg_ch$[rbp], eax
$LN29@z900_trans:

; 3299 :         }
; 3300 : 
; 3301 :         if (l_bit && arg_ch > 255)

  0057d	0f b6 45 20	 movzx	 eax, BYTE PTR l_bit$[rbp]
  00581	85 c0		 test	 eax, eax
  00583	74 15		 je	 SHORT $LN32@z900_trans
  00585	81 7d 44 ff 00
	00 00		 cmp	 DWORD PTR arg_ch$[rbp], 255 ; 000000ffH
  0058c	76 0c		 jbe	 SHORT $LN32@z900_trans

; 3302 :             fc = 0;

  0058e	c7 45 10 00 00
	00 00		 mov	 DWORD PTR fc$[rbp], 0
  00595	e9 3e 01 00 00	 jmp	 $LN33@z900_trans
$LN32@z900_trans:

; 3303 :         else
; 3304 :         {
; 3305 :             if (f_bit)

  0059a	0f b6 45 21	 movzx	 eax, BYTE PTR f_bit$[rbp]
  0059e	85 c0		 test	 eax, eax
  005a0	0f 84 e7 00 00
	00		 je	 $LN34@z900_trans

; 3306 :             {
; 3307 :                 fc_addr    = fct_addr + (arg_ch * 2);

  005a6	8b 45 44	 mov	 eax, DWORD PTR arg_ch$[rbp]
  005a9	d1 e0		 shl	 eax, 1
  005ab	8b c0		 mov	 eax, eax
  005ad	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR fct_addr$[rbp]
  005b4	48 03 c8	 add	 rcx, rax
  005b7	48 8b c1	 mov	 rax, rcx
  005ba	48 89 45 58	 mov	 QWORD PTR fc_addr$[rbp], rax

; 3308 :                 fc_page_no = fc_addr >> PAGEFRAME_PAGESHIFT;

  005be	48 8b 45 58	 mov	 rax, QWORD PTR fc_addr$[rbp]
  005c2	48 c1 e8 0c	 shr	 rax, 12
  005c6	48 89 45 60	 mov	 QWORD PTR fc_page_no$[rbp], rax

; 3309 : 
; 3310 :                 /* NOTE: The user *should* have specified a double-word
; 3311 :                          aligned FC table address, but since they might
; 3312 :                          not have, we still need to always perform the
; 3313 :                          below check. */
; 3314 : 
; 3315 :                 /* Does FC cross page boundary? (last byte of page?) */
; 3316 :                 if ((fc_addr & PAGEFRAME_BYTEMASK) == PAGEFRAME_BYTEMASK)

  005ca	48 8b 45 58	 mov	 rax, QWORD PTR fc_addr$[rbp]
  005ce	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  005d4	48 3d ff 0f 00
	00		 cmp	 rax, 4095		; 00000fffH
  005da	75 46		 jne	 SHORT $LN36@z900_trans

; 3317 :                 {
; 3318 :                     /* Yes! Piece together the FC */
; 3319 :                     temp_h  =  *(fct_main_page_addr[ fc_page_no - fct_page_no + 0 ] + PAGEFRAME_BYTEMASK ); // (last byte of page)

  005dc	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR fct_page_no$[rbp]
  005e3	48 8b 4d 60	 mov	 rcx, QWORD PTR fc_page_no$[rbp]
  005e7	48 2b c8	 sub	 rcx, rax
  005ea	48 8b c1	 mov	 rax, rcx
  005ed	48 8b 84 c5 00
	01 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  005f5	0f b6 80 ff 0f
	00 00		 movzx	 eax, BYTE PTR [rax+4095]
  005fc	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3320 :                     temp_l  =  *(fct_main_page_addr[ fc_page_no - fct_page_no + 1 ] );                      // (first byte of next page)

  00600	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR fct_page_no$[rbp]
  00607	48 8b 4d 60	 mov	 rcx, QWORD PTR fc_page_no$[rbp]
  0060b	48 2b c8	 sub	 rcx, rax
  0060e	48 8b c1	 mov	 rax, rcx
  00611	48 8b 84 c5 08
	01 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8+8]
  00619	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0061c	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax

; 3321 :                 }

  00620	eb 59		 jmp	 SHORT $LN37@z900_trans
$LN36@z900_trans:

; 3322 :                 else
; 3323 :                 {
; 3324 :                     // fc =  CSWAP16( *(U16*) (fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK)));
; 3325 :                     temp_h  =  *( fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK) +0 );

  00622	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR fct_page_no$[rbp]
  00629	48 8b 4d 60	 mov	 rcx, QWORD PTR fc_page_no$[rbp]
  0062d	48 2b c8	 sub	 rcx, rax
  00630	48 8b c1	 mov	 rax, rcx
  00633	48 8b 4d 58	 mov	 rcx, QWORD PTR fc_addr$[rbp]
  00637	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0063e	48 8b 84 c5 00
	01 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  00646	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0064a	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3326 :                     temp_l  =  *( fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK) +1 );

  0064e	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR fct_page_no$[rbp]
  00655	48 8b 4d 60	 mov	 rcx, QWORD PTR fc_page_no$[rbp]
  00659	48 2b c8	 sub	 rcx, rax
  0065c	48 8b c1	 mov	 rax, rcx
  0065f	48 8b 4d 58	 mov	 rcx, QWORD PTR fc_addr$[rbp]
  00663	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0066a	48 8b 84 c5 00
	01 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  00672	0f b6 44 08 01	 movzx	 eax, BYTE PTR [rax+rcx+1]
  00677	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax
$LN37@z900_trans:

; 3327 :                 }
; 3328 :                 fc  =   (temp_h << 8) | temp_l;

  0067b	0f b7 45 08	 movzx	 eax, WORD PTR temp_h$[rbp]
  0067f	c1 e0 08	 shl	 eax, 8
  00682	0f b7 4d 0c	 movzx	 ecx, WORD PTR temp_l$[rbp]
  00686	0b c1		 or	 eax, ecx
  00688	89 45 10	 mov	 DWORD PTR fc$[rbp], eax

; 3329 :             }

  0068b	eb 4b		 jmp	 SHORT $LN35@z900_trans
$LN34@z900_trans:

; 3330 :             else
; 3331 :             {
; 3332 :                 fc_addr     =  fct_addr + arg_ch;

  0068d	8b 45 44	 mov	 eax, DWORD PTR arg_ch$[rbp]
  00690	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR fct_addr$[rbp]
  00697	48 03 c8	 add	 rcx, rax
  0069a	48 8b c1	 mov	 rax, rcx
  0069d	48 89 45 58	 mov	 QWORD PTR fc_addr$[rbp], rax

; 3333 :                 fc_page_no  =  fc_addr >> PAGEFRAME_PAGESHIFT;

  006a1	48 8b 45 58	 mov	 rax, QWORD PTR fc_addr$[rbp]
  006a5	48 c1 e8 0c	 shr	 rax, 12
  006a9	48 89 45 60	 mov	 QWORD PTR fc_page_no$[rbp], rax

; 3334 :                 fc          =  *(fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK));

  006ad	48 8b 85 98 00
	00 00		 mov	 rax, QWORD PTR fct_page_no$[rbp]
  006b4	48 8b 4d 60	 mov	 rcx, QWORD PTR fc_page_no$[rbp]
  006b8	48 2b c8	 sub	 rcx, rax
  006bb	48 8b c1	 mov	 rax, rcx
  006be	48 8b 4d 58	 mov	 rcx, QWORD PTR fc_addr$[rbp]
  006c2	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  006c9	48 8b 84 c5 00
	01 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  006d1	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  006d5	89 45 10	 mov	 DWORD PTR fc$[rbp], eax
$LN35@z900_trans:
$LN33@z900_trans:

; 3335 :             }
; 3336 :         }
; 3337 : 
; 3338 :         if (!fc)

  006d8	83 7d 10 00	 cmp	 DWORD PTR fc$[rbp], 0
  006dc	0f 85 bf 00 00
	00		 jne	 $LN38@z900_trans

; 3339 :         {
; 3340 :             if (a_bit)

  006e2	0f b6 45 00	 movzx	 eax, BYTE PTR a_bit$[rbp]
  006e6	85 c0		 test	 eax, eax
  006e8	74 51		 je	 SHORT $LN39@z900_trans

; 3341 :             {
; 3342 :                 processed          +=  2;

  006ea	8b 45 30	 mov	 eax, DWORD PTR processed$[rbp]
  006ed	83 c0 02	 add	 eax, 2
  006f0	89 45 30	 mov	 DWORD PTR processed$[rbp], eax

; 3343 :                 buf_len            -=  2;

  006f3	48 8b 45 38	 mov	 rax, QWORD PTR buf_len$[rbp]
  006f7	48 83 e8 02	 sub	 rax, 2
  006fb	48 89 45 38	 mov	 QWORD PTR buf_len$[rbp], rax

; 3344 : 
; 3345 :                 if (isReverse)

  006ff	0f b6 45 01	 movzx	 eax, BYTE PTR isReverse$[rbp]
  00703	85 c0		 test	 eax, eax
  00705	74 1a		 je	 SHORT $LN41@z900_trans

; 3346 :                 {
; 3347 :                     buf_main_addr  -=  2;

  00707	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  0070b	48 83 e8 02	 sub	 rax, 2
  0070f	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3348 :                     buf_addr       -=  2;

  00713	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  00717	48 83 e8 02	 sub	 rax, 2
  0071b	48 89 45 18	 mov	 QWORD PTR buf_addr$[rbp], rax

; 3349 :                 }

  0071f	eb 18		 jmp	 SHORT $LN42@z900_trans
$LN41@z900_trans:

; 3350 :                 else
; 3351 :                 {
; 3352 :                     buf_main_addr  +=  2;

  00721	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  00725	48 83 c0 02	 add	 rax, 2
  00729	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3353 :                     buf_addr       +=  2;

  0072d	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  00731	48 83 c0 02	 add	 rax, 2
  00735	48 89 45 18	 mov	 QWORD PTR buf_addr$[rbp], rax
$LN42@z900_trans:

; 3354 :                 }
; 3355 :             }

  00739	eb 49		 jmp	 SHORT $LN40@z900_trans
$LN39@z900_trans:

; 3356 :             else
; 3357 :             {
; 3358 :                 processed          +=  1;

  0073b	8b 45 30	 mov	 eax, DWORD PTR processed$[rbp]
  0073e	ff c0		 inc	 eax
  00740	89 45 30	 mov	 DWORD PTR processed$[rbp], eax

; 3359 :                 buf_len            -=  1;

  00743	48 8b 45 38	 mov	 rax, QWORD PTR buf_len$[rbp]
  00747	48 ff c8	 dec	 rax
  0074a	48 89 45 38	 mov	 QWORD PTR buf_len$[rbp], rax

; 3360 : 
; 3361 :                 if (isReverse)

  0074e	0f b6 45 01	 movzx	 eax, BYTE PTR isReverse$[rbp]
  00752	85 c0		 test	 eax, eax
  00754	74 18		 je	 SHORT $LN43@z900_trans

; 3362 :                 {
; 3363 :                     buf_main_addr  -=  1;

  00756	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  0075a	48 ff c8	 dec	 rax
  0075d	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3364 :                     buf_addr       -=  1;

  00761	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  00765	48 ff c8	 dec	 rax
  00768	48 89 45 18	 mov	 QWORD PTR buf_addr$[rbp], rax

; 3365 :                 }

  0076c	eb 16		 jmp	 SHORT $LN44@z900_trans
$LN43@z900_trans:

; 3366 :                 else
; 3367 :                 {
; 3368 :                     buf_main_addr  +=  1;

  0076e	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  00772	48 ff c0	 inc	 rax
  00775	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3369 :                     buf_addr       +=  1;

  00779	48 8b 45 18	 mov	 rax, QWORD PTR buf_addr$[rbp]
  0077d	48 ff c0	 inc	 rax
  00780	48 89 45 18	 mov	 QWORD PTR buf_addr$[rbp], rax
$LN44@z900_trans:
$LN40@z900_trans:

; 3370 :                 }
; 3371 :             }
; 3372 : 
; 3373 :             buf_addr &= ADDRESS_MAXWRAP( regs );

  00784	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0078c	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00793	48 8b 4d 18	 mov	 rcx, QWORD PTR buf_addr$[rbp]
  00797	48 23 c8	 and	 rcx, rax
  0079a	48 8b c1	 mov	 rax, rcx
  0079d	48 89 45 18	 mov	 QWORD PTR buf_addr$[rbp], rax
$LN38@z900_trans:

; 3374 :         }
; 3375 :     } /* end while */

  007a1	e9 19 fd ff ff	 jmp	 $LN11@z900_trans
$LN12@z900_trans:
$LN15@z900_trans:

; 3376 : 
; 3377 :     /* Commit registers */
; 3378 :     SET_GR_A( r1 + 0, regs, buf_addr );

  007a6	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007ae	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  007b4	83 e0 01	 and	 eax, 1
  007b7	85 c0		 test	 eax, eax
  007b9	74 1b		 je	 SHORT $LN45@z900_trans
  007bb	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  007be	48 98		 cdqe
  007c0	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007c8	48 8b 55 18	 mov	 rdx, QWORD PTR buf_addr$[rbp]
  007cc	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  007d4	eb 17		 jmp	 SHORT $LN46@z900_trans
$LN45@z900_trans:
  007d6	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  007d9	48 98		 cdqe
  007db	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007e3	8b 55 18	 mov	 edx, DWORD PTR buf_addr$[rbp]
  007e6	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN46@z900_trans:
  007ed	33 c0		 xor	 eax, eax
  007ef	85 c0		 test	 eax, eax
  007f1	75 b3		 jne	 SHORT $LN15@z900_trans
$LN18@z900_trans:

; 3379 :     SET_GR_A( r1 + 1, regs, buf_len );

  007f3	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007fb	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00801	83 e0 01	 and	 eax, 1
  00804	85 c0		 test	 eax, eax
  00806	74 1d		 je	 SHORT $LN47@z900_trans
  00808	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  0080b	ff c0		 inc	 eax
  0080d	48 98		 cdqe
  0080f	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00817	48 8b 55 38	 mov	 rdx, QWORD PTR buf_len$[rbp]
  0081b	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00823	eb 19		 jmp	 SHORT $LN48@z900_trans
$LN47@z900_trans:
  00825	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  00828	ff c0		 inc	 eax
  0082a	48 98		 cdqe
  0082c	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00834	8b 55 38	 mov	 edx, DWORD PTR buf_len$[rbp]
  00837	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN48@z900_trans:
  0083e	33 c0		 xor	 eax, eax
  00840	85 c0		 test	 eax, eax
  00842	75 af		 jne	 SHORT $LN18@z900_trans

; 3380 : 
; 3381 :     /* Check if CPU determined number of bytes have been processed */
; 3382 :     if (buf_len && !fc)

  00844	48 83 7d 38 00	 cmp	 QWORD PTR buf_len$[rbp], 0
  00849	74 17		 je	 SHORT $LN49@z900_trans
  0084b	83 7d 10 00	 cmp	 DWORD PTR fc$[rbp], 0
  0084f	75 11		 jne	 SHORT $LN49@z900_trans

; 3383 :     {
; 3384 :         regs->psw.cc = 3;

  00851	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00859	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 3385 :         return;

  0085d	e9 92 00 00 00	 jmp	 $LN1@z900_trans
$LN49@z900_trans:

; 3386 :     }
; 3387 : 
; 3388 :     /* Set function code */
; 3389 :     if (likely(r2 != r1 && r2 != (r1 + 1)))

  00862	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  00865	39 45 48	 cmp	 DWORD PTR r2$[rbp], eax
  00868	74 13		 je	 SHORT $LN80@z900_trans
  0086a	8b 45 04	 mov	 eax, DWORD PTR r1$[rbp]
  0086d	ff c0		 inc	 eax
  0086f	39 45 48	 cmp	 DWORD PTR r2$[rbp], eax
  00872	74 09		 je	 SHORT $LN80@z900_trans
  00874	c7 45 7c 01 00
	00 00		 mov	 DWORD PTR tv384[rbp], 1
  0087b	eb 07		 jmp	 SHORT $LN83@z900_trans
$LN80@z900_trans:
  0087d	c7 45 7c 00 00
	00 00		 mov	 DWORD PTR tv384[rbp], 0
$LN83@z900_trans:
  00884	83 7d 7c 00	 cmp	 DWORD PTR tv384[rbp], 0
  00888	74 4a		 je	 SHORT $LN50@z900_trans
$LN21@z900_trans:

; 3390 :         SET_GR_A( r2, regs, fc );

  0088a	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00892	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00898	83 e0 01	 and	 eax, 1
  0089b	85 c0		 test	 eax, eax
  0089d	74 19		 je	 SHORT $LN51@z900_trans
  0089f	48 63 45 48	 movsxd	 rax, DWORD PTR r2$[rbp]
  008a3	8b 4d 10	 mov	 ecx, DWORD PTR fc$[rbp]
  008a6	48 8b 94 24 d8
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  008ae	48 89 8c c2 80
	02 00 00	 mov	 QWORD PTR [rdx+rax*8+640], rcx
  008b6	eb 16		 jmp	 SHORT $LN52@z900_trans
$LN51@z900_trans:
  008b8	48 63 45 48	 movsxd	 rax, DWORD PTR r2$[rbp]
  008bc	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008c4	8b 55 10	 mov	 edx, DWORD PTR fc$[rbp]
  008c7	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN52@z900_trans:
  008ce	33 c0		 xor	 eax, eax
  008d0	85 c0		 test	 eax, eax
  008d2	75 b6		 jne	 SHORT $LN21@z900_trans
$LN50@z900_trans:

; 3391 : 
; 3392 :     /* Set condition code */
; 3393 :     if (fc)

  008d4	83 7d 10 00	 cmp	 DWORD PTR fc$[rbp], 0
  008d8	74 0e		 je	 SHORT $LN53@z900_trans

; 3394 :         regs->psw.cc = 1;

  008da	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008e2	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1
  008e6	eb 0c		 jmp	 SHORT $LN54@z900_trans
$LN53@z900_trans:

; 3395 :     else
; 3396 :         regs->psw.cc = 0;

  008e8	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN54@z900_trans:
$LN1@z900_trans:

; 3397 : }

  008f4	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  008fb	48 33 cc	 xor	 rcx, rsp
  008fe	e8 00 00 00 00	 call	 __security_check_cookie
  00903	48 81 c4 c0 02
	00 00		 add	 rsp, 704		; 000002c0H
  0090a	5d		 pop	 rbp
  0090b	c3		 ret	 0
z900_translate_and_test_xxx_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_validate_operand
_TEXT	SEGMENT
tv81 = 48
addr$ = 80
arn$ = 88
len$ = 96
acctype$ = 104
regs$ = 112
z900_validate_operand PROC				; COMDAT

; 1376 : {

$LN8:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1377 :     /* Translate address of leftmost operand byte */
; 1378 :     MADDR( addr, arn, regs, acctype, regs->psw.pkey );

  00017	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  0001c	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00020	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00024	8b 44 24 68	 mov	 eax, DWORD PTR acctype$[rsp]
  00028	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0002c	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  00031	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  00040	e8 00 00 00 00	 call	 z900_maddr_l

; 1379 : 
; 1380 :     /* Translate next page if boundary crossed */
; 1381 :     if (CROSSPAGE( addr, len ))

  00045	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  0004a	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00050	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  00055	2b 4c 24 60	 sub	 ecx, DWORD PTR len$[rsp]
  00059	3b c1		 cmp	 eax, ecx
  0005b	7e 0a		 jle	 SHORT $LN6@z900_valid
  0005d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  00065	eb 08		 jmp	 SHORT $LN7@z900_valid
$LN6@z900_valid:
  00067	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN7@z900_valid:
  0006f	83 7c 24 30 00	 cmp	 DWORD PTR tv81[rsp], 0
  00074	74 48		 je	 SHORT $LN2@z900_valid

; 1382 :     {
; 1383 :         MADDR( (addr + len) & ADDRESS_MAXWRAP( regs ),

  00076	48 63 44 24 60	 movsxd	 rax, DWORD PTR len$[rsp]
  0007b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  00080	48 03 c8	 add	 rcx, rax
  00083	48 8b c1	 mov	 rax, rcx
  00086	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 23 81 90 00
	00 00		 and	 rax, QWORD PTR [rcx+144]
  00092	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  00097	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0009b	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0009f	8b 4c 24 68	 mov	 ecx, DWORD PTR acctype$[rsp]
  000a3	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000a7	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  000ac	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  000b1	ba 01 00 00 00	 mov	 edx, 1
  000b6	48 8b c8	 mov	 rcx, rax
  000b9	e8 00 00 00 00	 call	 z900_maddr_l
$LN2@z900_valid:

; 1384 :                arn, regs, acctype, regs->psw.pkey );
; 1385 :     }
; 1386 : #if defined( FEATURE_INTERVAL_TIMER )
; 1387 :     else
; 1388 :         ITIMER_SYNC( addr, len, regs );
; 1389 : #endif
; 1390 : }

  000be	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c2	c3		 ret	 0
z900_validate_operand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetch8
_TEXT	SEGMENT
tv70 = 48
mn$1 = 56
addr$ = 80
arn$ = 88
regs$ = 96
z900_vfetch8 PROC					; COMDAT

; 711  : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 712  : #if defined( OPTION_SINGLE_CPU_DW ) && defined( ASSIST_STORE_DW )
; 713  :     if(likely(!((VADR_L)addr & 0x07)))
; 714  :     {
; 715  :         /* doubleword aligned fetch */
; 716  :         U64 *mn;
; 717  :         ITIMER_SYNC( addr, 8-1, regs );
; 718  :         mn = (U64*)MADDRL( addr, 8, arn, regs, ACCTYPE_READ, regs->psw.pkey );
; 719  :         if (regs->cpubit == regs->sysblk->started_mask)
; 720  :             return CSWAP64( *mn );
; 721  :         return fetch_dw( mn );
; 722  :     }
; 723  :     else
; 724  : #endif
; 725  :     {
; 726  :         if (likely(((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-7)))

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  00017	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0001d	48 3d f8 0f 00
	00		 cmp	 rax, 4088		; 00000ff8H
  00023	77 0a		 ja	 SHORT $LN6@z900_vfetc
  00025	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  0002d	eb 08		 jmp	 SHORT $LN7@z900_vfetc
$LN6@z900_vfetc:
  0002f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN7@z900_vfetc:
  00037	83 7c 24 30 00	 cmp	 DWORD PTR tv70[rsp], 0
  0003c	74 47		 je	 SHORT $LN2@z900_vfetc

; 727  :         {
; 728  :             /* unaligned, non-crossing doubleword fetch */
; 729  :             BYTE *mn;
; 730  :             ITIMER_SYNC( addr, 8-1, regs );
; 731  :             mn = MADDRL( addr, 8, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  0003e	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00043	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00047	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0004b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00053	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  00058	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  0005d	ba 08 00 00 00	 mov	 edx, 8
  00062	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  00067	e8 00 00 00 00	 call	 z900_maddr_l
  0006c	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 732  :             return fetch_dw( mn );

  00071	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  00076	e8 00 00 00 00	 call	 fetch_dw_noswap
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 _byteswap_uint64
  00083	eb 13		 jmp	 SHORT $LN1@z900_vfetc
$LN2@z900_vfetc:

; 733  :         }
; 734  :     }
; 735  :     /* page crossing doubleword fetch */
; 736  :     return ARCH_DEP( vfetch8_full )( addr, arn, regs );

  00085	4c 8b 44 24 60	 mov	 r8, QWORD PTR regs$[rsp]
  0008a	8b 54 24 58	 mov	 edx, DWORD PTR arn$[rsp]
  0008e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  00093	e8 00 00 00 00	 call	 z900_vfetch8_full
$LN1@z900_vfetc:

; 737  : }

  00098	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009c	c3		 ret	 0
z900_vfetch8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetch4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
mn$1 = 56
addr$ = 80
arn$ = 88
regs$ = 96
z900_vfetch4 PROC					; COMDAT

; 695  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 696  :     if ((likely(!((VADR_L)addr & 0x03))
; 697  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3) )))

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  00017	48 83 e0 03	 and	 rax, 3
  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0a		 jne	 SHORT $LN5@z900_vfetc
  00020	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00028	eb 08		 jmp	 SHORT $LN6@z900_vfetc
$LN5@z900_vfetc:
  0002a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN6@z900_vfetc:
  00032	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00037	74 0a		 je	 SHORT $LN9@z900_vfetc
  00039	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN10@z900_vfetc
$LN9@z900_vfetc:
  00043	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN10@z900_vfetc:
  0004b	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  00050	75 13		 jne	 SHORT $LN3@z900_vfetc
  00052	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  00057	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0005d	48 3d fc 0f 00
	00		 cmp	 rax, 4092		; 00000ffcH
  00063	77 46		 ja	 SHORT $LN2@z900_vfetc
$LN3@z900_vfetc:

; 698  :     {
; 699  :         BYTE *mn;
; 700  :         ITIMER_SYNC( addr, 4-1, regs );
; 701  :         mn = MADDRL( addr, 4,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00065	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  0006a	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0006e	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00072	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0007a	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0007f	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00084	ba 04 00 00 00	 mov	 edx, 4
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  0008e	e8 00 00 00 00	 call	 z900_maddr_l
  00093	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 702  :         return fetch_fw( mn );

  00098	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  0009d	e8 00 00 00 00	 call	 fetch_fw_noswap
  000a2	8b c8		 mov	 ecx, eax
  000a4	e8 00 00 00 00	 call	 _byteswap_ulong
  000a9	eb 13		 jmp	 SHORT $LN1@z900_vfetc
$LN2@z900_vfetc:

; 703  :     }
; 704  :     return ARCH_DEP( vfetch4_full )( addr, arn, regs );

  000ab	4c 8b 44 24 60	 mov	 r8, QWORD PTR regs$[rsp]
  000b0	8b 54 24 58	 mov	 edx, DWORD PTR arn$[rsp]
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  000b9	e8 00 00 00 00	 call	 z900_vfetch4_full
$LN1@z900_vfetc:

; 705  : }

  000be	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c2	c3		 ret	 0
z900_vfetch4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetch2
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
mn$1 = 56
addr$ = 80
arn$ = 88
regs$ = 96
z900_vfetch2 PROC					; COMDAT

; 679  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 680  :     if (likely(!((VADR_L)addr & 0x01))
; 681  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK ))

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  00017	48 83 e0 01	 and	 rax, 1
  0001b	48 85 c0	 test	 rax, rax
  0001e	75 0a		 jne	 SHORT $LN5@z900_vfetc
  00020	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00028	eb 08		 jmp	 SHORT $LN6@z900_vfetc
$LN5@z900_vfetc:
  0002a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN6@z900_vfetc:
  00032	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00037	74 0a		 je	 SHORT $LN9@z900_vfetc
  00039	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN10@z900_vfetc
$LN9@z900_vfetc:
  00043	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN10@z900_vfetc:
  0004b	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  00050	75 13		 jne	 SHORT $LN3@z900_vfetc
  00052	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  00057	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0005d	48 3d ff 0f 00
	00		 cmp	 rax, 4095		; 00000fffH
  00063	74 47		 je	 SHORT $LN2@z900_vfetc
$LN3@z900_vfetc:

; 682  :     {
; 683  :         BYTE *mn;
; 684  :         ITIMER_SYNC( addr, 2-1, regs );
; 685  :         mn = MADDRL( addr, 2,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00065	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  0006a	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0006e	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00072	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0007a	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0007f	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00084	ba 02 00 00 00	 mov	 edx, 2
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  0008e	e8 00 00 00 00	 call	 z900_maddr_l
  00093	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 686  :         return fetch_hw( mn );

  00098	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  0009d	e8 00 00 00 00	 call	 fetch_hw_noswap
  000a2	0f b7 c8	 movzx	 ecx, ax
  000a5	e8 00 00 00 00	 call	 _byteswap_ushort
  000aa	eb 13		 jmp	 SHORT $LN1@z900_vfetc
$LN2@z900_vfetc:

; 687  :     }
; 688  :     return ARCH_DEP( vfetch2_full )( addr, arn, regs );

  000ac	4c 8b 44 24 60	 mov	 r8, QWORD PTR regs$[rsp]
  000b1	8b 54 24 58	 mov	 edx, DWORD PTR arn$[rsp]
  000b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  000ba	e8 00 00 00 00	 call	 z900_vfetch2_full
$LN1@z900_vfetc:

; 689  : }

  000bf	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c3	c3		 ret	 0
z900_vfetch2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetchb
_TEXT	SEGMENT
mn$ = 48
addr$ = 80
arn$ = 88
regs$ = 96
z900_vfetchb PROC					; COMDAT

; 667  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 668  : BYTE   *mn;                             /* Main storage address      */
; 669  : 
; 670  :     ITIMER_SYNC( addr, 1-1, regs );
; 671  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00012	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00017	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001b	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0001f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00027	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0002c	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00031	ba 01 00 00 00	 mov	 edx, 1
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  0003b	e8 00 00 00 00	 call	 z900_maddr_l
  00040	48 89 44 24 30	 mov	 QWORD PTR mn$[rsp], rax

; 672  :     return *mn;

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR mn$[rsp]
  0004a	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 673  : }

  0004d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00051	c3		 ret	 0
z900_vfetchb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetchc
_TEXT	SEGMENT
len2$ = 48
tv76 = 52
main1$ = 56
main2$ = 64
dest$ = 112
len$ = 120
addr$ = 128
arn$ = 136
regs$ = 144
z900_vfetchc PROC					; COMDAT

; 631  : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 632  : BYTE   *main1, *main2;                  /* Main storage addresses    */
; 633  : int     len2;                           /* Length to copy on page    */
; 634  : 
; 635  :     if (NOCROSSPAGE( addr, len ))

  00019	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00021	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00027	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR len$[rsp]
  0002c	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  00031	2b d1		 sub	 edx, ecx
  00033	8b ca		 mov	 ecx, edx
  00035	3b c1		 cmp	 eax, ecx
  00037	7f 0a		 jg	 SHORT $LN7@z900_vfetc
  00039	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv76[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN8@z900_vfetc
$LN7@z900_vfetc:
  00043	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN8@z900_vfetc:
  0004b	83 7c 24 34 00	 cmp	 DWORD PTR tv76[rsp], 0
  00050	74 63		 je	 SHORT $LN2@z900_vfetc

; 636  :     {
; 637  :         ITIMER_SYNC( addr, len, regs );
; 638  :         main1 = MADDRL( addr, len + 1, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00052	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00057	ff c0		 inc	 eax
  00059	48 98		 cdqe
  0005b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00063	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00067	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0006b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00073	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0007b	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00083	48 8b d0	 mov	 rdx, rax
  00086	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0008e	e8 00 00 00 00	 call	 z900_maddr_l
  00093	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 639  :         memcpy( dest, main1, len + 1 );

  00098	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  0009d	ff c0		 inc	 eax
  0009f	48 98		 cdqe
  000a1	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dest$[rsp]
  000a6	48 8b 74 24 38	 mov	 rsi, QWORD PTR main1$[rsp]
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	f3 a4		 rep movsb

; 640  :     }

  000b0	e9 01 01 00 00	 jmp	 $LN3@z900_vfetc
$LN2@z900_vfetc:

; 641  :     else
; 642  :     {
; 643  :         len2 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  000b5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  000bd	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  000c3	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000c8	48 2b c8	 sub	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	89 44 24 30	 mov	 DWORD PTR len2$[rsp], eax

; 644  :         main1 = MADDRL( addr, len2, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  000d2	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  000d7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000df	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  000e3	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  000e7	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000ef	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000f7	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000ff	48 8b d0	 mov	 rdx, rax
  00102	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0010a	e8 00 00 00 00	 call	 z900_maddr_l
  0010f	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 645  :         main2 = MADDRL( (addr + len2) & ADDRESS_MAXWRAP( regs ), len + 1 - len2,

  00114	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00119	ff c0		 inc	 eax
  0011b	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  0011f	48 98		 cdqe
  00121	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  00126	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  0012e	48 03 d1	 add	 rdx, rcx
  00131	48 8b ca	 mov	 rcx, rdx
  00134	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0013c	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  00143	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0014b	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0014f	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00153	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0015b	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00163	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0016b	48 8b d0	 mov	 rdx, rax
  0016e	e8 00 00 00 00	 call	 z900_maddr_l
  00173	48 89 44 24 40	 mov	 QWORD PTR main2$[rsp], rax

; 646  :                         arn, regs, ACCTYPE_READ, regs->psw.pkey );
; 647  :         memcpy(        dest,        main1,           len2 );

  00178	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  0017d	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dest$[rsp]
  00182	48 8b 74 24 38	 mov	 rsi, QWORD PTR main1$[rsp]
  00187	48 8b c8	 mov	 rcx, rax
  0018a	f3 a4		 rep movsb

; 648  :         memcpy( (BYTE*)dest + len2, main2, len + 1 - len2 );

  0018c	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00191	ff c0		 inc	 eax
  00193	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  00197	48 98		 cdqe
  00199	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  0019e	48 8b 54 24 70	 mov	 rdx, QWORD PTR dest$[rsp]
  001a3	48 03 d1	 add	 rdx, rcx
  001a6	48 8b ca	 mov	 rcx, rdx
  001a9	48 8b f9	 mov	 rdi, rcx
  001ac	48 8b 74 24 40	 mov	 rsi, QWORD PTR main2$[rsp]
  001b1	48 8b c8	 mov	 rcx, rax
  001b4	f3 a4		 rep movsb
$LN3@z900_vfetc:

; 649  :     }
; 650  : }

  001b6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ba	5f		 pop	 rdi
  001bb	5e		 pop	 rsi
  001bc	c3		 ret	 0
z900_vfetchc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstore8
_TEXT	SEGMENT
tv70 = 48
mn$1 = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
z900_vstore8 PROC					; COMDAT

; 577  : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 578  : #if defined( OPTION_SINGLE_CPU_DW ) && defined( ASSIST_STORE_DW )
; 579  :     /* Check alignement. If aligned then we are guaranteed
; 580  :        not to cross a page boundary */
; 581  :     if (likely(!((VADR_L)addr & 0x07)))
; 582  :     {
; 583  :         /* Most common case : Aligned */
; 584  :         U64 *mn;
; 585  :         mn = (U64*)MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );
; 586  :         if (regs->cpubit == regs->sysblk->started_mask)
; 587  :             *mn = CSWAP64( value );
; 588  :         else
; 589  :             STORE_DW( mn, value );
; 590  :     }
; 591  :     else
; 592  : #endif
; 593  :     {
; 594  :         /* We're not aligned. So we have to check whether we are
; 595  :            crossing a page boundary. This cannot be the same
; 596  :            code as above because casting U64* to a non aligned
; 597  :            pointer may break on those architectures mandating
; 598  :            strict alignement */
; 599  :         if (likely(((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-7)))

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR addr$[rsp]
  0001d	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00023	48 3d f8 0f 00
	00		 cmp	 rax, 4088		; 00000ff8H
  00029	77 0a		 ja	 SHORT $LN7@z900_vstor
  0002b	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00033	eb 08		 jmp	 SHORT $LN8@z900_vstor
$LN7@z900_vstor:
  00035	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN8@z900_vstor:
  0003d	83 7c 24 30 00	 cmp	 DWORD PTR tv70[rsp], 0
  00042	74 4c		 je	 SHORT $LN2@z900_vstor

; 600  :         {
; 601  :             /* Non aligned but not crossing page boundary */
; 602  :             BYTE *mn;
; 603  :             mn = MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00044	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00049	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0004d	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00051	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00059	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  0005e	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00063	ba 08 00 00 00	 mov	 edx, 8
  00068	48 8b 4c 24 58	 mov	 rcx, QWORD PTR addr$[rsp]
  0006d	e8 00 00 00 00	 call	 z900_maddr_l
  00072	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 604  :             /* invoking STORE_DW ensures endianness correctness */
; 605  :             STORE_DW( mn, value );

  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value$[rsp]
  0007c	e8 00 00 00 00	 call	 _byteswap_uint64
  00081	48 8b d0	 mov	 rdx, rax
  00084	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  00089	e8 00 00 00 00	 call	 store_dw_noswap

; 606  :         }

  0008e	eb 19		 jmp	 SHORT $LN3@z900_vstor
$LN2@z900_vstor:

; 607  :         else
; 608  :             /* Crossing page boundary */
; 609  :             ARCH_DEP( vstore8_full )( value, addr, arn, regs );

  00090	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00095	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  0009a	48 8b 54 24 58	 mov	 rdx, QWORD PTR addr$[rsp]
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value$[rsp]
  000a4	e8 00 00 00 00	 call	 z900_vstore8_full
$LN3@z900_vstor:

; 610  :     }
; 611  :     ITIMER_UPDATE( addr, 8-1, regs );
; 612  : }

  000a9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ad	c3		 ret	 0
z900_vstore8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstore4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
mn$1 = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
z900_vstore4 PROC					; COMDAT

; 559  : {

$LN12:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 560  :     /* Most common case : Aligned & not crossing page boundary */
; 561  :     if (likely(!((VADR_L)addr & 0x03))
; 562  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3)))

  00017	48 8b 44 24 58	 mov	 rax, QWORD PTR addr$[rsp]
  0001c	48 83 e0 03	 and	 rax, 3
  00020	48 85 c0	 test	 rax, rax
  00023	75 0a		 jne	 SHORT $LN6@z900_vstor
  00025	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  0002d	eb 08		 jmp	 SHORT $LN7@z900_vstor
$LN6@z900_vstor:
  0002f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN7@z900_vstor:
  00037	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  0003c	74 0a		 je	 SHORT $LN10@z900_vstor
  0003e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00046	eb 08		 jmp	 SHORT $LN11@z900_vstor
$LN10@z900_vstor:
  00048	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN11@z900_vstor:
  00050	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  00055	75 13		 jne	 SHORT $LN4@z900_vstor
  00057	48 8b 44 24 58	 mov	 rax, QWORD PTR addr$[rsp]
  0005c	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00062	48 3d fc 0f 00
	00		 cmp	 rax, 4092		; 00000ffcH
  00068	77 4a		 ja	 SHORT $LN2@z900_vstor
$LN4@z900_vstor:

; 563  :     {
; 564  :         BYTE *mn;
; 565  :         mn = MADDRL( addr, 4, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00073	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00077	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007f	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00084	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00089	ba 04 00 00 00	 mov	 edx, 4
  0008e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR addr$[rsp]
  00093	e8 00 00 00 00	 call	 z900_maddr_l
  00098	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 566  :         STORE_FW( mn, value );

  0009d	8b 4c 24 50	 mov	 ecx, DWORD PTR value$[rsp]
  000a1	e8 00 00 00 00	 call	 _byteswap_ulong
  000a6	8b d0		 mov	 edx, eax
  000a8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  000ad	e8 00 00 00 00	 call	 store_fw_noswap

; 567  :         ITIMER_UPDATE( addr, 4-1, regs );
; 568  :     }

  000b2	eb 18		 jmp	 SHORT $LN3@z900_vstor
$LN2@z900_vstor:

; 569  :     else
; 570  :         ARCH_DEP( vstore4_full )( value, addr, arn, regs );

  000b4	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  000b9	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  000be	48 8b 54 24 58	 mov	 rdx, QWORD PTR addr$[rsp]
  000c3	8b 4c 24 50	 mov	 ecx, DWORD PTR value$[rsp]
  000c7	e8 00 00 00 00	 call	 z900_vstore4_full
$LN3@z900_vstor:

; 571  : }

  000cc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d0	c3		 ret	 0
z900_vstore4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstore2
_TEXT	SEGMENT
tv73 = 48
mn$1 = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
z900_vstore2 PROC					; COMDAT

; 541  : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 542  :     /* Most common case : Aligned & not crossing page boundary */
; 543  :     if (likely(!((VADR_L)addr & 1)

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR addr$[rsp]
  0001d	48 83 e0 01	 and	 rax, 1
  00021	48 85 c0	 test	 rax, rax
  00024	74 1d		 je	 SHORT $LN5@z900_vstor
  00026	48 8b 44 24 58	 mov	 rax, QWORD PTR addr$[rsp]
  0002b	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00031	48 3d ff 0f 00
	00		 cmp	 rax, 4095		; 00000fffH
  00037	75 0a		 jne	 SHORT $LN5@z900_vstor
  00039	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
  00041	eb 08		 jmp	 SHORT $LN8@z900_vstor
$LN5@z900_vstor:
  00043	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
$LN8@z900_vstor:
  0004b	83 7c 24 30 00	 cmp	 DWORD PTR tv73[rsp], 0
  00050	74 4c		 je	 SHORT $LN2@z900_vstor

; 544  :         || ((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK))
; 545  :     {
; 546  :         BYTE* mn;
; 547  :         mn = MADDRL( addr, 2, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00052	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00057	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0005b	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0005f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00067	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  0006c	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00071	ba 02 00 00 00	 mov	 edx, 2
  00076	48 8b 4c 24 58	 mov	 rcx, QWORD PTR addr$[rsp]
  0007b	e8 00 00 00 00	 call	 z900_maddr_l
  00080	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 548  :         STORE_HW( mn, value );

  00085	0f b7 4c 24 50	 movzx	 ecx, WORD PTR value$[rsp]
  0008a	e8 00 00 00 00	 call	 _byteswap_ushort
  0008f	0f b7 d0	 movzx	 edx, ax
  00092	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  00097	e8 00 00 00 00	 call	 store_hw_noswap

; 549  :         ITIMER_UPDATE( addr, 2-1, regs );
; 550  :     }

  0009c	eb 19		 jmp	 SHORT $LN3@z900_vstor
$LN2@z900_vstor:

; 551  :     else
; 552  :         ARCH_DEP( vstore2_full )( value, addr, arn, regs );

  0009e	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  000a3	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  000a8	48 8b 54 24 58	 mov	 rdx, QWORD PTR addr$[rsp]
  000ad	0f b7 4c 24 50	 movzx	 ecx, WORD PTR value$[rsp]
  000b2	e8 00 00 00 00	 call	 z900_vstore2_full
$LN3@z900_vstor:

; 553  : }

  000b7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bb	c3		 ret	 0
z900_vstore2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstoreb
_TEXT	SEGMENT
main1$ = 48
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
z900_vstoreb PROC					; COMDAT

; 529  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 530  : BYTE   *main1;                          /* Mainstor address          */
; 531  : 
; 532  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00017	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0001c	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00020	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00024	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0002c	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00031	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR addr$[rsp]
  00040	e8 00 00 00 00	 call	 z900_maddr_l
  00045	48 89 44 24 30	 mov	 QWORD PTR main1$[rsp], rax

; 533  :     *main1 = value;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR main1$[rsp]
  0004f	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR value$[rsp]
  00054	88 08		 mov	 BYTE PTR [rax], cl

; 534  :     ITIMER_UPDATE( addr, 1-1, regs );
; 535  : }

  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
z900_vstoreb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstorec
_TEXT	SEGMENT
len2$ = 48
tv76 = 52
sk$ = 56
tv83 = 64
main1$ = 72
main2$ = 80
src$ = 128
len$ = 136
addr$ = 144
arn$ = 152
regs$ = 160
z900_vstorec PROC					; COMDAT

; 489  : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 490  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 491  : BYTE   *sk;                             /* Storage key addresses     */
; 492  : int     len2;                           /* Length to end of page     */
; 493  : 
; 494  :     if (NOCROSSPAGE( addr,len ))

  00019	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00021	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00027	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR len$[rsp]
  0002f	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  00034	2b d1		 sub	 edx, ecx
  00036	8b ca		 mov	 ecx, edx
  00038	3b c1		 cmp	 eax, ecx
  0003a	7f 0a		 jg	 SHORT $LN7@z900_vstor
  0003c	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv76[rsp], 1
  00044	eb 08		 jmp	 SHORT $LN8@z900_vstor
$LN7@z900_vstor:
  00046	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN8@z900_vstor:
  0004e	83 7c 24 34 00	 cmp	 DWORD PTR tv76[rsp], 0
  00053	74 70		 je	 SHORT $LN2@z900_vstor

; 495  :     {
; 496  :         memcpy( MADDRL( addr, len+1, arn, regs, ACCTYPE_WRITE, regs->psw.pkey ),

  00055	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  0005d	ff c0		 inc	 eax
  0005f	48 98		 cdqe
  00061	48 89 44 24 40	 mov	 QWORD PTR tv83[rsp], rax
  00066	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR len$[rsp]
  0006e	ff c1		 inc	 ecx
  00070	48 63 c9	 movsxd	 rcx, ecx
  00073	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0007b	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0007f	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00083	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008b	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00093	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0009b	48 8b d1	 mov	 rdx, rcx
  0009e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  000a6	e8 00 00 00 00	 call	 z900_maddr_l
  000ab	48 8b f8	 mov	 rdi, rax
  000ae	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR src$[rsp]
  000b6	48 8b 44 24 40	 mov	 rax, QWORD PTR tv83[rsp]
  000bb	48 8b c8	 mov	 rcx, rax
  000be	f3 a4		 rep movsb

; 497  :                src, len + 1);
; 498  :         ITIMER_UPDATE( addr, len, regs );
; 499  :     }

  000c0	e9 33 01 00 00	 jmp	 $LN3@z900_vstor
$LN2@z900_vstor:

; 500  :     else
; 501  :     {
; 502  :         len2 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  000c5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  000cd	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  000d3	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000d8	48 2b c8	 sub	 rcx, rax
  000db	48 8b c1	 mov	 rax, rcx
  000de	89 44 24 30	 mov	 DWORD PTR len2$[rsp], eax

; 503  :         main1 = MADDRL( addr, len2, arn, regs, ACCTYPE_WRITE_SKP,

  000e2	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  000e7	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ef	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  000f3	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  000f7	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  000ff	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00107	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0010f	48 8b d0	 mov	 rdx, rax
  00112	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0011a	e8 00 00 00 00	 call	 z900_maddr_l
  0011f	48 89 44 24 48	 mov	 QWORD PTR main1$[rsp], rax

; 504  :                         regs->psw.pkey );
; 505  :         sk = regs->dat.storkey;

  00124	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012c	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00133	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 506  :         main2 = MADDRL( (addr + len2) & ADDRESS_MAXWRAP( regs ),

  00138	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  00140	ff c0		 inc	 eax
  00142	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  00146	48 98		 cdqe
  00148	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  0014d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  00155	48 03 d1	 add	 rdx, rcx
  00158	48 8b ca	 mov	 rcx, rdx
  0015b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00163	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  0016a	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00172	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00176	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0017a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00182	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0018a	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00192	48 8b d0	 mov	 rdx, rax
  00195	e8 00 00 00 00	 call	 z900_maddr_l
  0019a	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 507  :                         len+1-len2, arn,
; 508  :                         regs, ACCTYPE_WRITE, regs->psw.pkey );
; 509  :         *sk |= (STORKEY_REF | STORKEY_CHANGE);

  0019f	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  001a4	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001a7	83 c8 06	 or	 eax, 6
  001aa	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  001af	88 01		 mov	 BYTE PTR [rcx], al

; 510  :         memcpy( main1, src, len2 );

  001b1	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  001b6	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main1$[rsp]
  001bb	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR src$[rsp]
  001c3	48 8b c8	 mov	 rcx, rax
  001c6	f3 a4		 rep movsb

; 511  :         memcpy( main2, (BYTE*)src + len2, len + 1 - len2 );

  001c8	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  001d0	ff c0		 inc	 eax
  001d2	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  001d6	48 98		 cdqe
  001d8	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  001dd	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  001e5	48 03 d1	 add	 rdx, rcx
  001e8	48 8b ca	 mov	 rcx, rdx
  001eb	48 8b 7c 24 50	 mov	 rdi, QWORD PTR main2$[rsp]
  001f0	48 8b f1	 mov	 rsi, rcx
  001f3	48 8b c8	 mov	 rcx, rax
  001f6	f3 a4		 rep movsb
$LN3@z900_vstor:

; 512  :     }
; 513  : }

  001f8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001fc	5f		 pop	 rdi
  001fd	5e		 pop	 rsi
  001fe	c3		 ret	 0
z900_vstorec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetch8_full
_TEXT	SEGMENT
len$ = 48
mn$ = 56
temp$ = 64
__$ArrayPad$ = 80
addr$ = 128
arn$ = 136
regs$ = 144
z900_vfetch8_full PROC					; COMDAT

; 457  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 458  : BYTE   *mn;                             /* Main storage addresses    */
; 459  : int     len;                            /* Length to end of page     */
; 460  : BYTE    temp[16];                       /* Copy destination          */
; 461  : 
; 462  :     /* Get absolute address of first byte of operand */
; 463  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00023	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0002b	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00031	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00036	48 2b c8	 sub	 rcx, rax
  00039	48 8b c1	 mov	 rax, rcx
  0003c	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 464  :     mn = MADDRL( addr, len, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00040	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00045	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0004d	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00051	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00055	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0005d	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00065	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00078	e8 00 00 00 00	 call	 z900_maddr_l
  0007d	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 465  :     memcpy( temp, mn, len);

  00082	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00087	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  0008c	48 8b f9	 mov	 rdi, rcx
  0008f	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  00094	48 8b c8	 mov	 rcx, rax
  00097	f3 a4		 rep movsb

; 466  :     mn = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 8 - len, arn, regs,

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  000a2	48 98		 cdqe
  000a4	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  000a9	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  000b1	48 03 d1	 add	 rdx, rcx
  000b4	48 8b ca	 mov	 rcx, rdx
  000b7	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000bf	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  000c6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000ce	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000d2	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000d6	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000de	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000e6	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000ee	48 8b d0	 mov	 rdx, rax
  000f1	e8 00 00 00 00	 call	 z900_maddr_l
  000f6	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 467  :                  ACCTYPE_READ, regs->psw.pkey );
; 468  :     memcpy( temp+len, mn, 8 );

  000fb	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00100	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$[rsp]
  00105	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00108	48 89 4c 04 40	 mov	 QWORD PTR temp$[rsp+rax], rcx

; 469  :     return fetch_dw( temp );

  0010d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  00112	e8 00 00 00 00	 call	 fetch_dw_noswap
  00117	48 8b c8	 mov	 rcx, rax
  0011a	e8 00 00 00 00	 call	 _byteswap_uint64

; 470  : }

  0011f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00124	48 33 cc	 xor	 rcx, rsp
  00127	e8 00 00 00 00	 call	 __security_check_cookie
  0012c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00130	5f		 pop	 rdi
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
z900_vfetch8_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetch4_full
_TEXT	SEGMENT
len$ = 48
mn$ = 56
temp$ = 64
__$ArrayPad$ = 72
addr$ = 112
arn$ = 120
regs$ = 128
z900_vfetch4_full PROC					; COMDAT

; 428  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 429  : BYTE   *mn;                             /* Main storage addresses    */
; 430  : int     len;                            /* Length to end of page     */
; 431  : BYTE    temp[8];                        /* Copy destination          */
; 432  : 
; 433  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00023	48 8b 44 24 70	 mov	 rax, QWORD PTR addr$[rsp]
  00028	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0002e	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00033	48 2b c8	 sub	 rcx, rax
  00036	48 8b c1	 mov	 rax, rcx
  00039	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 434  :     mn = MADDRL( addr, len, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  0003d	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00042	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0004a	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0004e	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00052	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0005a	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00062	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR addr$[rsp]
  0006f	e8 00 00 00 00	 call	 z900_maddr_l
  00074	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 435  :     memcpy( temp, mn, len);

  00079	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0007e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  00083	48 8b f9	 mov	 rdi, rcx
  00086	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  0008b	48 8b c8	 mov	 rcx, rax
  0008e	f3 a4		 rep movsb

; 436  :     mn = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4 - len, arn, regs,

  00090	b8 04 00 00 00	 mov	 eax, 4
  00095	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00099	48 98		 cdqe
  0009b	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  000a0	48 8b 54 24 70	 mov	 rdx, QWORD PTR addr$[rsp]
  000a5	48 03 d1	 add	 rdx, rcx
  000a8	48 8b ca	 mov	 rcx, rdx
  000ab	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000b3	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  000ba	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000c2	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000c6	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000ca	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000d2	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000da	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  000df	48 8b d0	 mov	 rdx, rax
  000e2	e8 00 00 00 00	 call	 z900_maddr_l
  000e7	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 437  :                   ACCTYPE_READ, regs->psw.pkey );
; 438  :     memcpy( temp+len, mn, 4 - len);

  000ec	b8 04 00 00 00	 mov	 eax, 4
  000f1	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  000f5	48 98		 cdqe
  000f7	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  000fc	48 8d 4c 0c 40	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  00101	48 8b f9	 mov	 rdi, rcx
  00104	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  00109	48 8b c8	 mov	 rcx, rax
  0010c	f3 a4		 rep movsb

; 439  :     return fetch_fw( temp );

  0010e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  00113	e8 00 00 00 00	 call	 fetch_fw_noswap
  00118	8b c8		 mov	 ecx, eax
  0011a	e8 00 00 00 00	 call	 _byteswap_ulong

; 440  : }

  0011f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00124	48 33 cc	 xor	 rcx, rsp
  00127	e8 00 00 00 00	 call	 __security_check_cookie
  0012c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00130	5f		 pop	 rdi
  00131	5e		 pop	 rsi
  00132	c3		 ret	 0
z900_vfetch4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vfetch2_full
_TEXT	SEGMENT
value$ = 48
mn$ = 56
addr$ = 80
arn$ = 88
regs$ = 96
z900_vfetch2_full PROC					; COMDAT

; 401  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 402  : BYTE   *mn;                             /* Main storage addresses    */
; 403  : U16     value;
; 404  : 
; 405  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00012	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00017	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001b	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0001f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00027	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0002c	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00031	ba 01 00 00 00	 mov	 edx, 1
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  0003b	e8 00 00 00 00	 call	 z900_maddr_l
  00040	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 406  :     value = *mn << 8;

  00045	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  0004a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0004d	c1 e0 08	 shl	 eax, 8
  00050	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 407  :     mn = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  0005a	48 ff c0	 inc	 rax
  0005d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00062	48 23 81 90 00
	00 00		 and	 rax, QWORD PTR [rcx+144]
  00069	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00072	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00076	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0007e	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  00083	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00088	ba 01 00 00 00	 mov	 edx, 1
  0008d	48 8b c8	 mov	 rcx, rax
  00090	e8 00 00 00 00	 call	 z900_maddr_l
  00095	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 408  :                  ACCTYPE_READ, regs->psw.pkey );
; 409  :     value |= *mn;

  0009a	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  0009f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000a2	0f b7 4c 24 30	 movzx	 ecx, WORD PTR value$[rsp]
  000a7	0b c8		 or	 ecx, eax
  000a9	8b c1		 mov	 eax, ecx
  000ab	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 410  :     return value;

  000b0	0f b7 44 24 30	 movzx	 eax, WORD PTR value$[rsp]

; 411  : }

  000b5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b9	c3		 ret	 0
z900_vfetch2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstore8_full
_TEXT	SEGMENT
len$ = 48
sk$ = 56
main1$ = 64
main2$ = 72
temp$ = 80
__$ArrayPad$ = 88
value$ = 128
addr$ = 136
arn$ = 144
regs$ = 152
z900_vstore8_full PROC					; COMDAT

; 369  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 370  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 371  : BYTE   *sk;                             /* Storage key addresses     */
; 372  : int     len;                            /* Length to end of page     */
; 373  : BYTE    temp[8];                        /* Copied value              */
; 374  : 
; 375  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00029	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00031	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00037	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0003c	48 2b c8	 sub	 rcx, rax
  0003f	48 8b c1	 mov	 rax, rcx
  00042	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 376  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00046	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0004b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00053	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00057	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0005b	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00063	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0006b	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00073	48 8b d0	 mov	 rdx, rax
  00076	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0007e	e8 00 00 00 00	 call	 z900_maddr_l
  00083	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 377  :     sk = regs->dat.storkey;

  00088	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00090	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00097	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 378  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 8-len, arn, regs,

  0009c	b8 08 00 00 00	 mov	 eax, 8
  000a1	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  000a5	48 98		 cdqe
  000a7	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  000ac	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  000b4	48 03 d1	 add	 rdx, rcx
  000b7	48 8b ca	 mov	 rcx, rdx
  000ba	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000c2	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  000c9	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000d1	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000d5	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000d9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e1	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000e9	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000f1	48 8b d0	 mov	 rdx, rax
  000f4	e8 00 00 00 00	 call	 z900_maddr_l
  000f9	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 379  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 380  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000fe	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  00103	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00106	83 c8 06	 or	 eax, 6
  00109	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  0010e	88 01		 mov	 BYTE PTR [rcx], al

; 381  :     STORE_DW( temp, value );

  00110	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00118	e8 00 00 00 00	 call	 _byteswap_uint64
  0011d	48 8b d0	 mov	 rdx, rax
  00120	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  00125	e8 00 00 00 00	 call	 store_dw_noswap

; 382  :     memcpy( main1, temp,       len );

  0012a	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0012f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  00134	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  00139	48 8b f1	 mov	 rsi, rcx
  0013c	48 8b c8	 mov	 rcx, rax
  0013f	f3 a4		 rep movsb

; 383  :     memcpy( main2, temp+len, 8-len );

  00141	b8 08 00 00 00	 mov	 eax, 8
  00146	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0014a	48 98		 cdqe
  0014c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  00151	48 8d 4c 0c 50	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  00156	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  0015b	48 8b f1	 mov	 rsi, rcx
  0015e	48 8b c8	 mov	 rcx, rax
  00161	f3 a4		 rep movsb

; 384  : }

  00163	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00168	48 33 cc	 xor	 rcx, rsp
  0016b	e8 00 00 00 00	 call	 __security_check_cookie
  00170	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00174	5f		 pop	 rdi
  00175	5e		 pop	 rsi
  00176	c3		 ret	 0
z900_vstore8_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstore4_full
_TEXT	SEGMENT
len$ = 48
temp$ = 52
sk$ = 56
main1$ = 64
main2$ = 72
value$ = 112
addr$ = 120
arn$ = 128
regs$ = 136
z900_vstore4_full PROC					; COMDAT

; 335  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 336  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 337  : BYTE   *sk;                             /* Storage key addresses     */
; 338  : int     len;                            /* Length to end of page     */
; 339  : BYTE    temp[4];                        /* Copied value              */
; 340  : 
; 341  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00019	48 8b 44 24 78	 mov	 rax, QWORD PTR addr$[rsp]
  0001e	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00024	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00029	48 2b c8	 sub	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 342  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00033	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00038	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00040	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00044	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00048	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00050	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00058	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00060	48 8b d0	 mov	 rdx, rax
  00063	48 8b 4c 24 78	 mov	 rcx, QWORD PTR addr$[rsp]
  00068	e8 00 00 00 00	 call	 z900_maddr_l
  0006d	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 343  :     sk = regs->dat.storkey;

  00072	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0007a	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00081	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 344  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4-len, arn, regs,

  00086	b8 04 00 00 00	 mov	 eax, 4
  0008b	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0008f	48 98		 cdqe
  00091	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  00096	48 8b 54 24 78	 mov	 rdx, QWORD PTR addr$[rsp]
  0009b	48 03 d1	 add	 rdx, rcx
  0009e	48 8b ca	 mov	 rcx, rdx
  000a1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000a9	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  000b0	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000b8	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000bc	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000c0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c8	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000d0	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000d8	48 8b d0	 mov	 rdx, rax
  000db	e8 00 00 00 00	 call	 z900_maddr_l
  000e0	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 345  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 346  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000e5	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  000ea	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000ed	83 c8 06	 or	 eax, 6
  000f0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  000f5	88 01		 mov	 BYTE PTR [rcx], al

; 347  :     STORE_FW( temp, value );

  000f7	8b 4c 24 70	 mov	 ecx, DWORD PTR value$[rsp]
  000fb	e8 00 00 00 00	 call	 _byteswap_ulong
  00100	8b d0		 mov	 edx, eax
  00102	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  00107	e8 00 00 00 00	 call	 store_fw_noswap

; 348  :     memcpy( main1, temp,       len );

  0010c	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00111	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  00116	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  0011b	48 8b f1	 mov	 rsi, rcx
  0011e	48 8b c8	 mov	 rcx, rax
  00121	f3 a4		 rep movsb

; 349  :     memcpy( main2, temp+len, 4-len );

  00123	b8 04 00 00 00	 mov	 eax, 4
  00128	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0012c	48 98		 cdqe
  0012e	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  00133	48 8d 4c 0c 34	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  00138	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  0013d	48 8b f1	 mov	 rsi, rcx
  00140	48 8b c8	 mov	 rcx, rax
  00143	f3 a4		 rep movsb

; 350  : }

  00145	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00149	5f		 pop	 rdi
  0014a	5e		 pop	 rsi
  0014b	c3		 ret	 0
z900_vstore4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT z900_vstore2_full
_TEXT	SEGMENT
sk$ = 48
main1$ = 56
main2$ = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
z900_vstore2_full PROC					; COMDAT

; 308  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 309  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 310  : BYTE   *sk;                             /* Storage key addresses     */
; 311  : 
; 312  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00018	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0001d	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00021	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00025	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0002d	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00032	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00037	ba 01 00 00 00	 mov	 edx, 1
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR addr$[rsp]
  00041	e8 00 00 00 00	 call	 z900_maddr_l
  00046	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 313  :     sk = regs->dat.storkey;

  0004b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00050	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00057	48 89 44 24 30	 mov	 QWORD PTR sk$[rsp], rax

; 314  :     main2 = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  0005c	48 8b 44 24 68	 mov	 rax, QWORD PTR addr$[rsp]
  00061	48 ff c0	 inc	 rax
  00064	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00069	48 23 81 90 00
	00 00		 and	 rax, QWORD PTR [rcx+144]
  00070	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00075	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00079	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0007d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00085	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0008a	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0008f	ba 01 00 00 00	 mov	 edx, 1
  00094	48 8b c8	 mov	 rcx, rax
  00097	e8 00 00 00 00	 call	 z900_maddr_l
  0009c	48 89 44 24 40	 mov	 QWORD PTR main2$[rsp], rax

; 315  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 316  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000a1	48 8b 44 24 30	 mov	 rax, QWORD PTR sk$[rsp]
  000a6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000a9	83 c8 06	 or	 eax, 6
  000ac	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sk$[rsp]
  000b1	88 01		 mov	 BYTE PTR [rcx], al

; 317  :     *main1 = value >> 8;

  000b3	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000b8	c1 f8 08	 sar	 eax, 8
  000bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR main1$[rsp]
  000c0	88 01		 mov	 BYTE PTR [rcx], al

; 318  :     *main2 = value & 0xFF;

  000c2	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000c7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000cc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR main2$[rsp]
  000d1	88 01		 mov	 BYTE PTR [rcx], al

; 319  : }

  000d3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d7	c3		 ret	 0
z900_vstore2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dat.h
;	COMDAT z900_maddr_l
_TEXT	SEGMENT
tlbix$ = 48
aea_crn$ = 52
tv70 = 56
maddr$ = 64
addr$ = 96
len$ = 104
arn$ = 112
regs$ = 120
acctype$ = 128
akey$ = 136
z900_maddr_l PROC					; COMDAT

; 307  : {

$LN18:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 308  :     /* Note: ALL of the below conditions must be true for a TLB hit
; 309  :        to occur.  If ANY of them are false, then it's a TLB miss,
; 310  :        requiring us to then perform a full DAT address translation.
; 311  : 
; 312  :        Note too that on the grand scheme of things the order/sequence
; 313  :        of the below tests (if statements) is completely unimportant
; 314  :        since ALL conditions must be checked anyway in order for a hit
; 315  :        to occur, and it doesn't matter that a miss tests a few extra
; 316  :        conditions since it's going to do a full translation anyway!
; 317  :        (which is many, many instructions)
; 318  :     */
; 319  : 
; 320  :     int  aea_crn  = (arn >= USE_ARMODE) ? 0 : regs->AEA_AR( arn );

  00018	83 7c 24 70 10	 cmp	 DWORD PTR arn$[rsp], 16
  0001d	7c 0a		 jl	 SHORT $LN16@z900_maddr
  0001f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00027	eb 19		 jmp	 SHORT $LN17@z900_maddr
$LN16@z900_maddr:
  00029	8b 44 24 70	 mov	 eax, DWORD PTR arn$[rsp]
  0002d	83 c0 05	 add	 eax, 5
  00030	48 98		 cdqe
  00032	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00037	8b 84 81 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+3220]
  0003e	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
$LN17@z900_maddr:
  00042	8b 44 24 38	 mov	 eax, DWORD PTR tv70[rsp]
  00046	89 44 24 34	 mov	 DWORD PTR aea_crn$[rsp], eax

; 321  :     U16  tlbix    = TLBIX( addr );

  0004a	48 8b 44 24 60	 mov	 rax, QWORD PTR addr$[rsp]
  0004f	48 c1 e8 0c	 shr	 rax, 12
  00053	48 25 ff 03 00
	00		 and	 rax, 1023		; 000003ffH
  00059	66 89 44 24 30	 mov	 WORD PTR tlbix$[rsp], ax

; 322  :     BYTE *maddr   = NULL;

  0005e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maddr$[rsp], 0

; 323  : 
; 324  :     /* Non-zero AEA Control Register number? */
; 325  :     if (aea_crn)

  00067	83 7c 24 34 00	 cmp	 DWORD PTR aea_crn$[rsp], 0
  0006c	0f 84 2d 01 00
	00		 je	 $LN2@z900_maddr

; 326  :     {
; 327  :         /* Same Addess Space Designator as before? */
; 328  :         /* Or if not, is address in a common segment? */
; 329  :         if (0
; 330  :             || (regs->CR( aea_crn ) == regs->tlb.TLB_ASD( tlbix ))
; 331  :             || (regs->AEA_COMMON( aea_crn ) & regs->tlb.common[ tlbix ])

  00072	33 c0		 xor	 eax, eax
  00074	85 c0		 test	 eax, eax
  00076	75 5a		 jne	 SHORT $LN4@z900_maddr
  00078	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  0007c	ff c0		 inc	 eax
  0007e	48 98		 cdqe
  00080	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00085	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0008a	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0008f	49 8b 8c c8 60
	b0 00 00	 mov	 rcx, QWORD PTR [r8+rcx*8+45152]
  00097	48 39 8c c2 00
	06 00 00	 cmp	 QWORD PTR [rdx+rax*8+1536], rcx
  0009f	74 31		 je	 SHORT $LN4@z900_maddr
  000a1	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  000a5	ff c0		 inc	 eax
  000a7	48 98		 cdqe
  000a9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  000b6	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000bb	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000c0	0f b6 8c 0a 60
	54 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+87136]
  000c8	23 c1		 and	 eax, ecx
  000ca	85 c0		 test	 eax, eax
  000cc	0f 84 cd 00 00
	00		 je	 $LN3@z900_maddr
$LN4@z900_maddr:

; 332  :         )
; 333  :         {
; 334  :             /* Storage Key zero? */
; 335  :             /* Or if not, same Storage Key as before? */
; 336  :             if (0
; 337  :                 || akey == 0
; 338  :                 || akey == regs->tlb.skey[ tlbix ]

  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 2e		 jne	 SHORT $LN6@z900_maddr
  000d8	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000e0	85 c0		 test	 eax, eax
  000e2	74 22		 je	 SHORT $LN6@z900_maddr
  000e4	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000ec	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000f1	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f6	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  000fe	3b c1		 cmp	 eax, ecx
  00100	0f 85 99 00 00
	00		 jne	 $LN5@z900_maddr
$LN6@z900_maddr:

; 339  :             )
; 340  :             {
; 341  :                 /* Does the page address match the one in the TLB? */
; 342  :                 /* (does a TLB entry exist for this page address?) */
; 343  :                 if (
; 344  :                     ((addr & TLBID_PAGEMASK) | regs->tlbID)
; 345  :                     ==

  00106	48 8b 44 24 60	 mov	 rax, QWORD PTR addr$[rsp]
  0010b	48 25 00 00 c0
	ff		 and	 rax, -4194304		; ffffffffffc00000H
  00111	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00116	8b 89 58 b0 00
	00		 mov	 ecx, DWORD PTR [rcx+45144]
  0011c	48 0b c1	 or	 rax, rcx
  0011f	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00124	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00129	48 3b 84 ca 60
	d0 00 00	 cmp	 rax, QWORD PTR [rdx+rcx*8+53344]
  00131	75 6c		 jne	 SHORT $LN7@z900_maddr

; 346  :                     regs->tlb.TLB_VADDR( tlbix )
; 347  :                 )
; 348  :                 {
; 349  :                     /* Is storage being accessed same way as before? */
; 350  :                     if (acctype & regs->tlb.acc[ tlbix ])

  00133	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  00138	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0013d	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  00145	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR acctype$[rsp]
  0014c	23 c8		 and	 ecx, eax
  0014e	8b c1		 mov	 eax, ecx
  00150	85 c0		 test	 eax, eax
  00152	74 4b		 je	 SHORT $LN8@z900_maddr

; 351  :                     {
; 352  :                         /*------------------------------------------*/
; 353  :                         /* TLB hit: use previously translated value */
; 354  :                         /*------------------------------------------*/
; 355  : 
; 356  :                         if (acctype & ACC_CHECK)

  00154	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	74 1e		 je	 SHORT $LN9@z900_maddr

; 357  :                             regs->dat.storkey = regs->tlb.storkey[ tlbix ];

  00162	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  00167	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0016c	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00171	48 8b 84 c2 60
	30 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+77920]
  00179	48 89 81 28 08
	00 00		 mov	 QWORD PTR [rcx+2088], rax
$LN9@z900_maddr:

; 358  : 
; 359  :                         maddr = MAINADDR( regs->tlb.main[tlbix], addr );

  00180	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  00185	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0018a	48 8b 54 24 60	 mov	 rdx, QWORD PTR addr$[rsp]
  0018f	48 8b 84 c1 60
	10 01 00	 mov	 rax, QWORD PTR [rcx+rax*8+69728]
  00197	48 33 c2	 xor	 rax, rdx
  0019a	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN8@z900_maddr:
$LN7@z900_maddr:
$LN5@z900_maddr:
$LN3@z900_maddr:
$LN2@z900_maddr:

; 360  :                     }
; 361  :                 }
; 362  :             }
; 363  :         }
; 364  :     }
; 365  : 
; 366  :     /*---------------------------------------*/
; 367  :     /* TLB miss: do full address translation */
; 368  :     /*---------------------------------------*/
; 369  :     if (!maddr)

  0019f	48 83 7c 24 40
	00		 cmp	 QWORD PTR maddr$[rsp], 0
  001a5	75 36		 jne	 SHORT $LN10@z900_maddr

; 370  :         maddr = ARCH_DEP( logical_to_main_l )( addr, arn, regs, acctype, akey, len );

  001a7	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001ac	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001b1	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  001b9	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  001bd	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acctype$[rsp]
  001c5	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001ca	8b 54 24 70	 mov	 edx, DWORD PTR arn$[rsp]
  001ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR addr$[rsp]
  001d3	e8 00 00 00 00	 call	 z900_logical_to_main_l
  001d8	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN10@z900_maddr:

; 371  : 
; 372  : #if defined( FEATURE_073_TRANSACT_EXEC_FACILITY )
; 373  :     if (FACILITY_ENABLED( 073_TRANSACT_EXEC, regs ))

  001dd	b8 01 00 00 00	 mov	 eax, 1
  001e2	48 6b c0 09	 imul	 rax, rax, 9
  001e6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001eb	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  001f3	83 e0 40	 and	 eax, 64			; 00000040H
  001f6	85 c0		 test	 eax, eax
  001f8	0f 84 89 00 00
	00		 je	 $LN11@z900_maddr

; 374  :     {
; 375  :         /* SA22-7832-12 Principles of Operation, page 5-99:
; 376  : 
; 377  :              "Storage accesses for instruction and DAT- and ART-
; 378  :               table fetches follow the non-transactional rules."
; 379  :         */
; 380  :         if (0
; 381  :             || !regs
; 382  :             || !regs->txf_tnd
; 383  :             || arn == USE_INST_SPACE    /* Instruction fetching */
; 384  :             || arn == USE_REAL_ADDR     /* Address translation  */

  001fe	33 c0		 xor	 eax, eax
  00200	85 c0		 test	 eax, eax
  00202	75 26		 jne	 SHORT $LN13@z900_maddr
  00204	48 83 7c 24 78
	00		 cmp	 QWORD PTR regs$[rsp], 0
  0020a	74 1e		 je	 SHORT $LN13@z900_maddr
  0020c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00211	0f b6 80 58 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3672]
  00218	85 c0		 test	 eax, eax
  0021a	74 0e		 je	 SHORT $LN13@z900_maddr
  0021c	83 7c 24 70 ff	 cmp	 DWORD PTR arn$[rsp], -1
  00221	74 07		 je	 SHORT $LN13@z900_maddr
  00223	83 7c 24 70 fe	 cmp	 DWORD PTR arn$[rsp], -2
  00228	75 07		 jne	 SHORT $LN12@z900_maddr
$LN13@z900_maddr:

; 385  :         )
; 386  :             return maddr;

  0022a	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
  0022f	eb 5b		 jmp	 SHORT $LN1@z900_maddr
$LN12@z900_maddr:

; 387  : 
; 388  :         /* Quick exit if NTSTG call */
; 389  :         if (regs->txf_NTSTG)

  00231	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00236	0f b6 80 4b 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3659]
  0023d	85 c0		 test	 eax, eax
  0023f	74 13		 je	 SHORT $LN14@z900_maddr

; 390  :         {
; 391  :             regs->txf_NTSTG = false;

  00241	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00246	c6 80 4b 0e 00
	00 00		 mov	 BYTE PTR [rax+3659], 0

; 392  :             return maddr;

  0024d	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
  00252	eb 38		 jmp	 SHORT $LN1@z900_maddr
$LN14@z900_maddr:

; 393  :         }
; 394  : 
; 395  :         /* Translate to alternate TXF address */
; 396  :         maddr = TXF_MADDRL( addr, len, arn, regs, acctype, maddr );

  00254	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
  00259	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0025e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  00265	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00269	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0026e	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00273	48 8b 54 24 68	 mov	 rdx, QWORD PTR len$[rsp]
  00278	48 8b 4c 24 60	 mov	 rcx, QWORD PTR addr$[rsp]
  0027d	e8 00 00 00 00	 call	 txf_maddr_l
  00282	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN11@z900_maddr:

; 397  :     }
; 398  : #endif
; 399  : 
; 400  :     return maddr;

  00287	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
$LN1@z900_maddr:

; 401  : }

  0028c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00290	c3		 ret	 0
z900_maddr_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_per3_zero_xcheck2
_TEXT	SEGMENT
tv81 = 32
tv131 = 40
tv150 = 48
tv181 = 56
tv166 = 64
regs$ = 96
x2$ = 104
b2$ = 112
z900_per3_zero_xcheck2 PROC				; COMDAT

; 765  : {

$LN18:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 766  : #if defined( FEATURE_PER_ZERO_ADDRESS_DETECTION_FACILITY )
; 767  :     if (0
; 768  :         || (!b2 && x2 && GR_A( x2, regs ) == 0)
; 769  :         || (!x2 && b2 && GR_A( b2, regs ) == 0)
; 770  :         || ( b2 && x2 && (0

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	0f 85 ba 01 00
	00		 jne	 $LN3@z900_per3_
  0001c	83 7c 24 70 00	 cmp	 DWORD PTR b2$[rsp], 0
  00021	75 54		 jne	 SHORT $LN4@z900_per3_
  00023	83 7c 24 68 00	 cmp	 DWORD PTR x2$[rsp], 0
  00028	74 4d		 je	 SHORT $LN4@z900_per3_
  0002a	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  0002f	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00035	83 e0 01	 and	 eax, 1
  00038	85 c0		 test	 eax, eax
  0003a	74 19		 je	 SHORT $LN8@z900_per3_
  0003c	48 63 44 24 68	 movsxd	 rax, DWORD PTR x2$[rsp]
  00041	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00046	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0004e	48 89 44 24 20	 mov	 QWORD PTR tv81[rsp], rax
  00053	eb 16		 jmp	 SHORT $LN9@z900_per3_
$LN8@z900_per3_:
  00055	48 63 44 24 68	 movsxd	 rax, DWORD PTR x2$[rsp]
  0005a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00066	48 89 44 24 20	 mov	 QWORD PTR tv81[rsp], rax
$LN9@z900_per3_:
  0006b	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv81[rsp], 0
  00071	0f 84 5f 01 00
	00		 je	 $LN3@z900_per3_
$LN4@z900_per3_:
  00077	83 7c 24 68 00	 cmp	 DWORD PTR x2$[rsp], 0
  0007c	75 54		 jne	 SHORT $LN5@z900_per3_
  0007e	83 7c 24 70 00	 cmp	 DWORD PTR b2$[rsp], 0
  00083	74 4d		 je	 SHORT $LN5@z900_per3_
  00085	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00090	83 e0 01	 and	 eax, 1
  00093	85 c0		 test	 eax, eax
  00095	74 19		 je	 SHORT $LN10@z900_per3_
  00097	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  0009c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  000a1	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000a9	48 89 44 24 28	 mov	 QWORD PTR tv131[rsp], rax
  000ae	eb 16		 jmp	 SHORT $LN11@z900_per3_
$LN10@z900_per3_:
  000b0	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  000b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  000ba	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c1	48 89 44 24 28	 mov	 QWORD PTR tv131[rsp], rax
$LN11@z900_per3_:
  000c6	48 83 7c 24 28
	00		 cmp	 QWORD PTR tv131[rsp], 0
  000cc	0f 84 04 01 00
	00		 je	 $LN3@z900_per3_
$LN5@z900_per3_:
  000d2	83 7c 24 70 00	 cmp	 DWORD PTR b2$[rsp], 0
  000d7	0f 84 03 01 00
	00		 je	 $LN2@z900_per3_
  000dd	83 7c 24 68 00	 cmp	 DWORD PTR x2$[rsp], 0
  000e2	0f 84 f8 00 00
	00		 je	 $LN2@z900_per3_
  000e8	33 c0		 xor	 eax, eax
  000ea	85 c0		 test	 eax, eax
  000ec	0f 85 e4 00 00
	00		 jne	 $LN6@z900_per3_
  000f2	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  000f7	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 19		 je	 SHORT $LN12@z900_per3_
  00104	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  00109	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00116	48 89 44 24 30	 mov	 QWORD PTR tv150[rsp], rax
  0011b	eb 16		 jmp	 SHORT $LN13@z900_per3_
$LN12@z900_per3_:
  0011d	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  00122	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00127	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0012e	48 89 44 24 30	 mov	 QWORD PTR tv150[rsp], rax
$LN13@z900_per3_:
  00133	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv150[rsp], 0
  00139	0f 84 97 00 00
	00		 je	 $LN6@z900_per3_
  0013f	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00144	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0014a	83 e0 01	 and	 eax, 1
  0014d	85 c0		 test	 eax, eax
  0014f	74 19		 je	 SHORT $LN14@z900_per3_
  00151	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  00156	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0015b	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00163	48 89 44 24 40	 mov	 QWORD PTR tv166[rsp], rax
  00168	eb 16		 jmp	 SHORT $LN15@z900_per3_
$LN14@z900_per3_:
  0016a	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  0016f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00174	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0017b	48 89 44 24 40	 mov	 QWORD PTR tv166[rsp], rax
$LN15@z900_per3_:
  00180	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00185	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0018b	83 e0 01	 and	 eax, 1
  0018e	85 c0		 test	 eax, eax
  00190	74 19		 je	 SHORT $LN16@z900_per3_
  00192	48 63 44 24 68	 movsxd	 rax, DWORD PTR x2$[rsp]
  00197	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0019c	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001a4	48 89 44 24 38	 mov	 QWORD PTR tv181[rsp], rax
  001a9	eb 16		 jmp	 SHORT $LN17@z900_per3_
$LN16@z900_per3_:
  001ab	48 63 44 24 68	 movsxd	 rax, DWORD PTR x2$[rsp]
  001b0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  001b5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001bc	48 89 44 24 38	 mov	 QWORD PTR tv181[rsp], rax
$LN17@z900_per3_:
  001c1	48 8b 44 24 38	 mov	 rax, QWORD PTR tv181[rsp]
  001c6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv166[rsp]
  001cb	48 03 c8	 add	 rcx, rax
  001ce	48 8b c1	 mov	 rax, rcx
  001d1	48 85 c0	 test	 rax, rax
  001d4	75 0a		 jne	 SHORT $LN2@z900_per3_
$LN6@z900_per3_:
$LN3@z900_per3_:

; 771  :                           || GR_A( b2, regs ) == 0
; 772  :                           || GR_A( b2, regs ) + GR_A( x2, regs ) == 0
; 773  :                          )
; 774  :            )
; 775  :     )
; 776  :         ARCH_DEP( per3_zero )( regs );

  001d6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  001db	e8 00 00 00 00	 call	 z900_per3_zero
$LN2@z900_per3_:

; 777  : #else
; 778  :     UNREFERENCED( regs );
; 779  :     UNREFERENCED( x2 );
; 780  :     UNREFERENCED( b2 );
; 781  : #endif
; 782  : }

  001e0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001e4	c3		 ret	 0
z900_per3_zero_xcheck2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_per3_zero_xcheck
_TEXT	SEGMENT
tv79 = 32
regs$ = 64
b1$ = 72
z900_per3_zero_xcheck PROC				; COMDAT

; 754  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 755  : #if defined( FEATURE_PER_ZERO_ADDRESS_DETECTION_FACILITY )
; 756  :     if (b1 && GR_A( b1, regs ) == 0)

  0000d	83 7c 24 48 00	 cmp	 DWORD PTR b1$[rsp], 0
  00012	74 53		 je	 SHORT $LN2@z900_per3_
  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  00019	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0001f	83 e0 01	 and	 eax, 1
  00022	85 c0		 test	 eax, eax
  00024	74 19		 je	 SHORT $LN4@z900_per3_
  00026	48 63 44 24 48	 movsxd	 rax, DWORD PTR b1$[rsp]
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00030	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00038	48 89 44 24 20	 mov	 QWORD PTR tv79[rsp], rax
  0003d	eb 16		 jmp	 SHORT $LN5@z900_per3_
$LN4@z900_per3_:
  0003f	48 63 44 24 48	 movsxd	 rax, DWORD PTR b1$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00049	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00050	48 89 44 24 20	 mov	 QWORD PTR tv79[rsp], rax
$LN5@z900_per3_:
  00055	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv79[rsp], 0
  0005b	75 0a		 jne	 SHORT $LN2@z900_per3_

; 757  :         ARCH_DEP( per3_zero )( regs );

  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00062	e8 00 00 00 00	 call	 z900_per3_zero
$LN2@z900_per3_:

; 758  : #else
; 759  :     UNREFERENCED( regs );
; 760  :     UNREFERENCED( b1 );
; 761  : #endif
; 762  : }

  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	c3		 ret	 0
z900_per3_zero_xcheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_per3_zero_lcheck2
_TEXT	SEGMENT
tv80 = 32
tv128 = 40
tv145 = 48
tv161 = 56
regs$ = 80
r1$ = 88
l1$ = 96
r2$ = 104
l2$ = 112
z900_per3_zero_lcheck2 PROC				; COMDAT

; 677  : {

$LN14:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 678  : #if defined( FEATURE_PER_ZERO_ADDRESS_DETECTION_FACILITY )
; 679  :     if (0
; 680  :         || (1
; 681  :             && GR_A( l1, regs ) != 0
; 682  :             && GR_A( r1, regs ) == 0
; 683  :            )
; 684  :         || (1

  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	0f 85 3e 01 00
	00		 jne	 $LN3@z900_per3_
  00021	33 c0		 xor	 eax, eax
  00023	83 f8 01	 cmp	 eax, 1
  00026	0f 84 96 00 00
	00		 je	 $LN4@z900_per3_
  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$[rsp]
  00031	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00037	83 e0 01	 and	 eax, 1
  0003a	85 c0		 test	 eax, eax
  0003c	74 19		 je	 SHORT $LN6@z900_per3_
  0003e	48 63 44 24 60	 movsxd	 rax, DWORD PTR l1$[rsp]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00048	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00050	48 89 44 24 20	 mov	 QWORD PTR tv80[rsp], rax
  00055	eb 16		 jmp	 SHORT $LN7@z900_per3_
$LN6@z900_per3_:
  00057	48 63 44 24 60	 movsxd	 rax, DWORD PTR l1$[rsp]
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00061	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00068	48 89 44 24 20	 mov	 QWORD PTR tv80[rsp], rax
$LN7@z900_per3_:
  0006d	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv80[rsp], 0
  00073	74 4d		 je	 SHORT $LN4@z900_per3_
  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$[rsp]
  0007a	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00080	83 e0 01	 and	 eax, 1
  00083	85 c0		 test	 eax, eax
  00085	74 19		 je	 SHORT $LN8@z900_per3_
  00087	48 63 44 24 58	 movsxd	 rax, DWORD PTR r1$[rsp]
  0008c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00091	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00099	48 89 44 24 28	 mov	 QWORD PTR tv128[rsp], rax
  0009e	eb 16		 jmp	 SHORT $LN9@z900_per3_
$LN8@z900_per3_:
  000a0	48 63 44 24 58	 movsxd	 rax, DWORD PTR r1$[rsp]
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  000aa	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b1	48 89 44 24 28	 mov	 QWORD PTR tv128[rsp], rax
$LN9@z900_per3_:
  000b6	48 83 7c 24 28
	00		 cmp	 QWORD PTR tv128[rsp], 0
  000bc	0f 84 9d 00 00
	00		 je	 $LN3@z900_per3_
$LN4@z900_per3_:
  000c2	33 c0		 xor	 eax, eax
  000c4	83 f8 01	 cmp	 eax, 1
  000c7	0f 84 9c 00 00
	00		 je	 $LN2@z900_per3_
  000cd	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$[rsp]
  000d2	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000d8	83 e0 01	 and	 eax, 1
  000db	85 c0		 test	 eax, eax
  000dd	74 19		 je	 SHORT $LN10@z900_per3_
  000df	48 63 44 24 70	 movsxd	 rax, DWORD PTR l2$[rsp]
  000e4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  000e9	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000f1	48 89 44 24 30	 mov	 QWORD PTR tv145[rsp], rax
  000f6	eb 16		 jmp	 SHORT $LN11@z900_per3_
$LN10@z900_per3_:
  000f8	48 63 44 24 70	 movsxd	 rax, DWORD PTR l2$[rsp]
  000fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00102	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00109	48 89 44 24 30	 mov	 QWORD PTR tv145[rsp], rax
$LN11@z900_per3_:
  0010e	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv145[rsp], 0
  00114	74 53		 je	 SHORT $LN2@z900_per3_
  00116	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$[rsp]
  0011b	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00121	83 e0 01	 and	 eax, 1
  00124	85 c0		 test	 eax, eax
  00126	74 19		 je	 SHORT $LN12@z900_per3_
  00128	48 63 44 24 68	 movsxd	 rax, DWORD PTR r2$[rsp]
  0012d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0013a	48 89 44 24 38	 mov	 QWORD PTR tv161[rsp], rax
  0013f	eb 16		 jmp	 SHORT $LN13@z900_per3_
$LN12@z900_per3_:
  00141	48 63 44 24 68	 movsxd	 rax, DWORD PTR r2$[rsp]
  00146	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  0014b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00152	48 89 44 24 38	 mov	 QWORD PTR tv161[rsp], rax
$LN13@z900_per3_:
  00157	48 83 7c 24 38
	00		 cmp	 QWORD PTR tv161[rsp], 0
  0015d	75 0a		 jne	 SHORT $LN2@z900_per3_
$LN3@z900_per3_:

; 685  :             && GR_A( l2, regs ) != 0
; 686  :             && GR_A( r2, regs ) == 0
; 687  :            )
; 688  :     )
; 689  :         ARCH_DEP( per3_zero )( regs );

  0015f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00164	e8 00 00 00 00	 call	 z900_per3_zero
$LN2@z900_per3_:

; 690  : #else
; 691  :     UNREFERENCED( regs );
; 692  :     UNREFERENCED( r1 );
; 693  :     UNREFERENCED( l1 );
; 694  :     UNREFERENCED( r2 );
; 695  :     UNREFERENCED( l2 );
; 696  : #endif
; 697  : }

  00169	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0016d	c3		 ret	 0
z900_per3_zero_lcheck2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_per3_zero_lcheck
_TEXT	SEGMENT
tv79 = 32
tv95 = 40
regs$ = 64
r1$ = 72
l1$ = 80
z900_per3_zero_lcheck PROC				; COMDAT

; 662  : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 663  : #if defined( FEATURE_PER_ZERO_ADDRESS_DETECTION_FACILITY )
; 664  :     if (1
; 665  :         && GR_A( l1, regs ) != 0
; 666  :         && GR_A( r1, regs ) == 0

  00012	33 c0		 xor	 eax, eax
  00014	83 f8 01	 cmp	 eax, 1
  00017	0f 84 9c 00 00
	00		 je	 $LN2@z900_per3_
  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  00022	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00028	83 e0 01	 and	 eax, 1
  0002b	85 c0		 test	 eax, eax
  0002d	74 19		 je	 SHORT $LN4@z900_per3_
  0002f	48 63 44 24 50	 movsxd	 rax, DWORD PTR l1$[rsp]
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00039	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00041	48 89 44 24 20	 mov	 QWORD PTR tv79[rsp], rax
  00046	eb 16		 jmp	 SHORT $LN5@z900_per3_
$LN4@z900_per3_:
  00048	48 63 44 24 50	 movsxd	 rax, DWORD PTR l1$[rsp]
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00059	48 89 44 24 20	 mov	 QWORD PTR tv79[rsp], rax
$LN5@z900_per3_:
  0005e	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv79[rsp], 0
  00064	74 53		 je	 SHORT $LN2@z900_per3_
  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  0006b	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00071	83 e0 01	 and	 eax, 1
  00074	85 c0		 test	 eax, eax
  00076	74 19		 je	 SHORT $LN6@z900_per3_
  00078	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  0007d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00082	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0008a	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
  0008f	eb 16		 jmp	 SHORT $LN7@z900_per3_
$LN6@z900_per3_:
  00091	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  00096	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000a2	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
$LN7@z900_per3_:
  000a7	48 83 7c 24 28
	00		 cmp	 QWORD PTR tv95[rsp], 0
  000ad	75 0a		 jne	 SHORT $LN2@z900_per3_

; 667  :     )
; 668  :         ARCH_DEP( per3_zero )( regs );

  000af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  000b4	e8 00 00 00 00	 call	 z900_per3_zero
$LN2@z900_per3_:

; 669  : #else
; 670  :     UNREFERENCED( regs );
; 671  :     UNREFERENCED( r1 );
; 672  :     UNREFERENCED( l1 );
; 673  : #endif
; 674  : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
z900_per3_zero_lcheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_per3_zero_check2
_TEXT	SEGMENT
tv79 = 32
tv95 = 40
regs$ = 64
r1$ = 72
r2$ = 80
z900_per3_zero_check2 PROC				; COMDAT

; 640  : {

$LN9:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  : #if defined( FEATURE_PER_ZERO_ADDRESS_DETECTION_FACILITY )
; 642  :     if (0
; 643  :         || GR_A( r1, regs ) == 0
; 644  :         || GR_A( r2, regs ) == 0

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	0f 85 92 00 00
	00		 jne	 $LN3@z900_per3_
  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  00021	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00027	83 e0 01	 and	 eax, 1
  0002a	85 c0		 test	 eax, eax
  0002c	74 19		 je	 SHORT $LN5@z900_per3_
  0002e	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00038	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00040	48 89 44 24 20	 mov	 QWORD PTR tv79[rsp], rax
  00045	eb 16		 jmp	 SHORT $LN6@z900_per3_
$LN5@z900_per3_:
  00047	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00051	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00058	48 89 44 24 20	 mov	 QWORD PTR tv79[rsp], rax
$LN6@z900_per3_:
  0005d	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv79[rsp], 0
  00063	74 49		 je	 SHORT $LN3@z900_per3_
  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  0006a	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00070	83 e0 01	 and	 eax, 1
  00073	85 c0		 test	 eax, eax
  00075	74 19		 je	 SHORT $LN7@z900_per3_
  00077	48 63 44 24 50	 movsxd	 rax, DWORD PTR r2$[rsp]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00089	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
  0008e	eb 16		 jmp	 SHORT $LN8@z900_per3_
$LN7@z900_per3_:
  00090	48 63 44 24 50	 movsxd	 rax, DWORD PTR r2$[rsp]
  00095	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  0009a	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000a1	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
$LN8@z900_per3_:
  000a6	48 83 7c 24 28
	00		 cmp	 QWORD PTR tv95[rsp], 0
  000ac	75 0a		 jne	 SHORT $LN2@z900_per3_
$LN3@z900_per3_:

; 645  :     )
; 646  :         ARCH_DEP( per3_zero )( regs );

  000ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  000b3	e8 00 00 00 00	 call	 z900_per3_zero
$LN2@z900_per3_:

; 647  : #else
; 648  :     UNREFERENCED( regs );
; 649  :     UNREFERENCED( r1 );
; 650  :     UNREFERENCED( r2 );
; 651  : #endif
; 652  : }

  000b8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bc	c3		 ret	 0
z900_per3_zero_check2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_per3_zero_check
_TEXT	SEGMENT
tv78 = 32
regs$ = 64
r1$ = 72
z900_per3_zero_check PROC				; COMDAT

; 629  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 630  : #if defined( FEATURE_PER_ZERO_ADDRESS_DETECTION_FACILITY )
; 631  :     if (GR_A( r1, regs ) == 0)

  0000d	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  00012	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00018	83 e0 01	 and	 eax, 1
  0001b	85 c0		 test	 eax, eax
  0001d	74 19		 je	 SHORT $LN4@z900_per3_
  0001f	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00029	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00031	48 89 44 24 20	 mov	 QWORD PTR tv78[rsp], rax
  00036	eb 16		 jmp	 SHORT $LN5@z900_per3_
$LN4@z900_per3_:
  00038	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00042	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00049	48 89 44 24 20	 mov	 QWORD PTR tv78[rsp], rax
$LN5@z900_per3_:
  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv78[rsp], 0
  00054	75 0a		 jne	 SHORT $LN2@z900_per3_

; 632  :         ARCH_DEP( per3_zero )( regs );

  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  0005b	e8 00 00 00 00	 call	 z900_per3_zero
$LN2@z900_per3_:

; 633  : #else
; 634  :     UNREFERENCED( regs );
; 635  :     UNREFERENCED( r1 );
; 636  : #endif
; 637  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
z900_per3_zero_check ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_per3_zero
_TEXT	SEGMENT
tv75 = 32
regs$ = 64
z900_per3_zero PROC					; COMDAT

; 602  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 603  : #if defined( FEATURE_PER_ZERO_ADDRESS_DETECTION_FACILITY )
; 604  :     if (1
; 605  :         && EN_IC_PER_ZEROADDR( regs )
; 606  :         && !IS_PER_SUPRESS( regs, CR9_ZEROADDR )

  00009	33 c0		 xor	 eax, eax
  0000b	83 f8 01	 cmp	 eax, 1
  0000e	0f 84 be 00 00
	00		 je	 $LN5@z900_per3_
  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  00019	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  0001f	c1 e8 02	 shr	 eax, 2
  00022	83 e0 01	 and	 eax, 1
  00025	85 c0		 test	 eax, eax
  00027	74 0a		 je	 SHORT $LN10@z900_per3_
  00029	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00031	eb 08		 jmp	 SHORT $LN11@z900_per3_
$LN10@z900_per3_:
  00033	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN11@z900_per3_:
  0003b	83 7c 24 20 00	 cmp	 DWORD PTR tv75[rsp], 0
  00040	0f 84 8c 00 00
	00		 je	 $LN5@z900_per3_
  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  0004b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0004e	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00053	85 c0		 test	 eax, eax
  00055	74 7b		 je	 SHORT $LN5@z900_per3_
  00057	ba 00 00 00 04	 mov	 edx, 67108864		; 04000000H
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00061	e8 00 00 00 00	 call	 z900_is_per3_event_suppressed
  00066	0f b6 c0	 movzx	 eax, al
  00069	85 c0		 test	 eax, eax
  0006b	75 65		 jne	 SHORT $LN5@z900_per3_

; 607  :     )
; 608  :     {
; 609  :         regs->peradr = regs->periaddr;

  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  00072	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00077	48 8b 89 e8 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2280]
  0007e	48 89 88 d8 08
	00 00		 mov	 QWORD PTR [rax+2264], rcx
$LN4@z900_per3_:

; 610  :         ON_IC_PER_ZEROADDR( regs );

  00085	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  0008d	0f ba e8 12	 bts	 eax, 18
  00091	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00096	89 41 4c	 mov	 DWORD PTR [rcx+76], eax
  00099	33 c0		 xor	 eax, eax
  0009b	85 c0		 test	 eax, eax
  0009d	75 e6		 jne	 SHORT $LN4@z900_per3_

; 611  :         if (OPEN_IC_PER_ZEROADDR( regs ))

  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	8b 49 4c	 mov	 ecx, DWORD PTR [rcx+76]
  000ac	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000af	23 c1		 and	 eax, ecx
  000b1	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  000b6	85 c0		 test	 eax, eax
  000b8	74 18		 je	 SHORT $LN6@z900_per3_

; 612  :             RETURN_INTCHECK( regs );

  000ba	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  000c5	ba ff ff ff ff	 mov	 edx, -1
  000ca	48 8b c8	 mov	 rcx, rax
  000cd	e8 00 00 00 00	 call	 longjmp
$LN6@z900_per3_:
$LN5@z900_per3_:
$LN7@z900_per3_:

; 613  :     }
; 614  : #else
; 615  :     UNREFERENCED( regs );
; 616  : #endif
; 617  : }

  000d2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d6	c3		 ret	 0
z900_per3_zero ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT z900_is_per3_event_suppressed
_TEXT	SEGMENT
regs$ = 8
cr9_per_event$ = 16
z900_is_per3_event_suppressed PROC			; COMDAT

; 566  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 567  : #if !defined( FEATURE_PER3 )
; 568  :     UNREFERENCED( regs );
; 569  :     UNREFERENCED( cr9_per_event );
; 570  : #else
; 571  :     /* DON'T suppress this event if Event Suppression isn't enabled */
; 572  :     if (!(regs->CR_L(9) & CR9_SUPPRESS))

  00009	b8 08 00 00 00	 mov	 eax, 8
  0000e	48 6b c0 0a	 imul	 rax, rax, 10
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  00017	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  0001e	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00023	85 c0		 test	 eax, eax
  00025	75 04		 jne	 SHORT $LN2@z900_is_pe

; 573  :         return false;

  00027	32 c0		 xor	 al, al
  00029	eb 78		 jmp	 SHORT $LN1@z900_is_pe
$LN2@z900_is_pe:

; 574  : 
; 575  :     /* Is this PER event one that is ALLOWED to be suppressed? */
; 576  :     if (cr9_per_event & CR9_SUPPRESSABLE)

  0002b	8b 44 24 10	 mov	 eax, DWORD PTR cr9_per_event$[rsp]
  0002f	25 00 00 00 ed	 and	 eax, -318767104		; ed000000H
  00034	85 c0		 test	 eax, eax
  00036	74 69		 je	 SHORT $LN3@z900_is_pe

; 577  :     {
; 578  :         /* Is there an active transaction? */
; 579  :         if (regs->txf_tnd)

  00038	48 8b 44 24 08	 mov	 rax, QWORD PTR regs$[rsp]
  0003d	0f b6 80 58 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3672]
  00044	85 c0		 test	 eax, eax
  00046	74 04		 je	 SHORT $LN4@z900_is_pe

; 580  :             return true;        /* Yes, then suppress it! */

  00048	b0 01		 mov	 al, 1
  0004a	eb 57		 jmp	 SHORT $LN1@z900_is_pe
$LN4@z900_is_pe:

; 581  : 
; 582  :         /* Suppress instruction-fetch events for TBEGIN/TBEGINC */
; 583  :         if (1
; 584  :             && cr9_per_event & CR9_IF
; 585  :             && *(regs->ip+0) == 0xE5
; 586  :             && (0

  0004c	33 c0		 xor	 eax, eax
  0004e	83 f8 01	 cmp	 eax, 1
  00051	74 4e		 je	 SHORT $LN5@z900_is_pe
  00053	8b 44 24 10	 mov	 eax, DWORD PTR cr9_per_event$[rsp]
  00057	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0005c	85 c0		 test	 eax, eax
  0005e	74 41		 je	 SHORT $LN5@z900_is_pe
  00060	48 8b 44 24 08	 mov	 rax, QWORD PTR regs$[rsp]
  00065	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00069	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006c	3d e5 00 00 00	 cmp	 eax, 229		; 000000e5H
  00071	75 2e		 jne	 SHORT $LN5@z900_is_pe
  00073	33 c0		 xor	 eax, eax
  00075	85 c0		 test	 eax, eax
  00077	75 24		 jne	 SHORT $LN6@z900_is_pe
  00079	48 8b 44 24 08	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00086	83 f8 60	 cmp	 eax, 96			; 00000060H
  00089	74 12		 je	 SHORT $LN6@z900_is_pe
  0008b	48 8b 44 24 08	 mov	 rax, QWORD PTR regs$[rsp]
  00090	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00094	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00098	83 f8 61	 cmp	 eax, 97			; 00000061H
  0009b	75 04		 jne	 SHORT $LN5@z900_is_pe
$LN6@z900_is_pe:

; 587  :                 || *(regs->ip+1) == 0x60
; 588  :                 || *(regs->ip+1) == 0x61
; 589  :                )
; 590  :         )
; 591  :             return true;        /* TBEGIN/TBEGINC: suppress it! */

  0009d	b0 01		 mov	 al, 1
  0009f	eb 02		 jmp	 SHORT $LN1@z900_is_pe
$LN5@z900_is_pe:
$LN3@z900_is_pe:

; 592  :     }
; 593  : #endif
; 594  :     /* Otherwise DON'T suppress this PER event */
; 595  :     return false;

  000a1	32 c0		 xor	 al, al
$LN1@z900_is_pe:

; 596  : }

  000a3	c3		 ret	 0
z900_is_per3_event_suppressed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_storage_key_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
bits$ = 72
z900_or_storage_key_by_ptr PROC				; COMDAT

; 328  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 329  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  00020	48 2b c8	 sub	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx
  00026	48 c1 e0 0b	 shl	 rax, 11
  0002a	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 330  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 331  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 332  : #else
; 333  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0002f	0f b6 54 24 48	 movzx	 edx, BYTE PTR bits$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00039	e8 00 00 00 00	 call	 z900_or_4K_storage_key

; 334  : #endif
; 335  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
z900_or_storage_key_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
z900_or_storage_key PROC				; COMDAT

; 290  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 291  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 292  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 293  : #else
; 294  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 z900_or_4K_storage_key

; 295  : #endif
; 296  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
z900_or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
z900_or_4K_storage_key PROC				; COMDAT

; 242  :   inline void  ARCH_DEP( or_4K_storage_key )      (              U64 abs, BYTE bits ) {        ARCH_DEP( _or_storage_key      )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 z900__or_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
z900_or_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
z900__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@z900__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@z900__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 50		 je	 SHORT $LN5@z900__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00046	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00049	0b c8		 or	 ecx, eax
  0004b	8b c1		 mov	 eax, ecx
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00052	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  00054	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00061	0b c8		 or	 ecx, eax
  00063	8b c1		 mov	 eax, ecx
  00065	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006a	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  0006c	eb 2c		 jmp	 SHORT $LN6@z900__or_s
$LN5@z900__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  0006e	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00078	e8 00 00 00 00	 call	 _get_storekey_ptr
  0007d	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  00082	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008f	0b c8		 or	 ecx, eax
  00091	8b c1		 mov	 eax, ecx
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00098	88 01		 mov	 BYTE PTR [rcx], al
$LN6@z900__or_s:

; 202  :     }
; 203  : }

  0009a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009e	c3		 ret	 0
z900__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FFF PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FFF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FFF
$LN7@z900_1FFF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FFF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FFF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FFF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FFF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FFE PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FFE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FFE
$LN7@z900_1FFE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FFE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FFE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FFE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FFE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FFD PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FFD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FFD
$LN7@z900_1FFD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FFD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FFD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FFD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FFD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FFC PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FFC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FFC
$LN7@z900_1FFC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FFC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FFC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FFC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FFC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FFB PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FFB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FFB
$LN7@z900_1FFB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FFB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FFB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FFB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FFB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FFA PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FFA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FFA
$LN7@z900_1FFA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FFA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FFA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FFA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FFA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF9 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF9
$LN7@z900_1FF9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF8 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF8
$LN7@z900_1FF8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF7 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF7
$LN7@z900_1FF7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF6 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF6
$LN7@z900_1FF6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF5 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF5
$LN7@z900_1FF5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF4 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF4
$LN7@z900_1FF4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF3 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF3
$LN7@z900_1FF3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF2 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF2
$LN7@z900_1FF2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF1 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF1
$LN7@z900_1FF1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FF0 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FF0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FF0
$LN7@z900_1FF0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FF0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FF0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FF0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FF0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FEF PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FEF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FEF
$LN7@z900_1FEF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FEF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FEF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FEF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FEF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FEE PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FEE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FEE
$LN7@z900_1FEE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FEE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FEE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FEE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FEE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FED PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FED:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FED
$LN7@z900_1FED:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FED
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FED:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FED
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FED ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FEC PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FEC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FEC
$LN7@z900_1FEC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FEC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FEC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FEC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FEC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FEB PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FEB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FEB
$LN7@z900_1FEB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FEB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FEB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FEB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FEB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FEA PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FEA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FEA
$LN7@z900_1FEA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FEA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FEA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FEA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FEA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE9 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE9
$LN7@z900_1FE9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE8 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE8
$LN7@z900_1FE8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE7 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE7
$LN7@z900_1FE7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE6 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE6
$LN7@z900_1FE6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE5 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE5
$LN7@z900_1FE5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE4 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE4
$LN7@z900_1FE4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE3 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE3
$LN7@z900_1FE3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE2 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE2
$LN7@z900_1FE2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE1 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE1
$LN7@z900_1FE1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FE0 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FE0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FE0
$LN7@z900_1FE0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FE0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FE0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FE0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FE0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FDF PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FDF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FDF
$LN7@z900_1FDF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FDF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FDF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FDF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FDE PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FDE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FDE
$LN7@z900_1FDE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FDE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FDE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FDE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FDE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FDD PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FDD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FDD
$LN7@z900_1FDD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FDD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FDD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FDD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FDD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FDC PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FDC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FDC
$LN7@z900_1FDC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FDC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FDC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FDC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FDC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FDB PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FDB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FDB
$LN7@z900_1FDB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FDB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FDB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FDB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FDB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FDA PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FDA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FDA
$LN7@z900_1FDA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FDA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FDA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FDA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FDA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD9 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD9
$LN7@z900_1FD9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD8 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD8
$LN7@z900_1FD8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD7 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD7
$LN7@z900_1FD7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD6 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD6
$LN7@z900_1FD6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD5 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD5
$LN7@z900_1FD5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD4 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD4
$LN7@z900_1FD4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD3 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD3
$LN7@z900_1FD3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD2 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD2
$LN7@z900_1FD2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD1 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD1
$LN7@z900_1FD1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FD0 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FD0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FD0
$LN7@z900_1FD0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FD0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FD0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FD0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FD0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FCF PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FCF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FCF
$LN7@z900_1FCF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FCF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FCF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FCF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FCF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FCE PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FCE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FCE
$LN7@z900_1FCE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FCE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FCE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FCE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FCE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FCD PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FCD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FCD
$LN7@z900_1FCD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FCD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FCD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FCD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FCD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FCC PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FCC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FCC
$LN7@z900_1FCC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FCC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FCC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FCC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FCC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FCB PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FCB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FCB
$LN7@z900_1FCB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FCB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FCB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FCB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FCB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FCA PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FCA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FCA
$LN7@z900_1FCA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FCA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FCA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FCA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FCA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC9 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC9
$LN7@z900_1FC9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC8 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC8
$LN7@z900_1FC8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC7 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC7
$LN7@z900_1FC7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC6 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC6
$LN7@z900_1FC6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC5 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC5
$LN7@z900_1FC5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC4 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC4
$LN7@z900_1FC4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC3 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC3
$LN7@z900_1FC3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC2 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC2
$LN7@z900_1FC2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC1 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC1
$LN7@z900_1FC1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FC0 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FC0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FC0
$LN7@z900_1FC0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FC0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FC0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FC0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FC0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FBF PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FBF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FBF
$LN7@z900_1FBF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FBF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FBF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FBF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FBF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FBE PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FBE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FBE
$LN7@z900_1FBE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FBE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FBE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FBE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FBE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FBD PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FBD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FBD
$LN7@z900_1FBD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FBD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FBD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FBD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FBD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FBC PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FBC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FBC
$LN7@z900_1FBC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FBC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FBC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FBC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FBC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FBB PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FBB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FBB
$LN7@z900_1FBB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FBB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FBB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FBB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FBA PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FBA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FBA
$LN7@z900_1FBA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FBA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FBA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FBA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FBA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB9 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB9
$LN7@z900_1FB9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB8 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB8
$LN7@z900_1FB8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB7 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB7
$LN7@z900_1FB7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB6 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB6
$LN7@z900_1FB6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB5 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB5
$LN7@z900_1FB5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB4 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB4
$LN7@z900_1FB4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB3 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB3
$LN7@z900_1FB3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB2 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB2
$LN7@z900_1FB2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB1 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB1
$LN7@z900_1FB1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FB0 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FB0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FB0
$LN7@z900_1FB0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FB0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FB0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FB0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FB0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FAF PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FAF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FAF
$LN7@z900_1FAF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FAF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FAF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FAF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FAF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FAE PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FAE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FAE
$LN7@z900_1FAE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FAE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FAE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FAE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FAE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FAD PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FAD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FAD
$LN7@z900_1FAD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FAD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FAD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FAD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FAD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FAC PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FAC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FAC
$LN7@z900_1FAC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FAC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FAC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FAC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FAC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FAB PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FAB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FAB
$LN7@z900_1FAB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FAB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FAB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FAB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FAB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FAA PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FAA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FAA
$LN7@z900_1FAA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FAA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FAA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FAA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FAA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA9 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA9
$LN7@z900_1FA9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA8 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA8
$LN7@z900_1FA8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA7 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA7
$LN7@z900_1FA7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA6 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA6
$LN7@z900_1FA6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA5 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA5
$LN7@z900_1FA5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA4 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA4
$LN7@z900_1FA4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA3 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA3
$LN7@z900_1FA3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA2 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA2
$LN7@z900_1FA2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA1 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA1
$LN7@z900_1FA1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1FA0 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1FA0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1FA0
$LN7@z900_1FA0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1FA0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1FA0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1FA0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1FA0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F9F PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F9F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F9F
$LN7@z900_1F9F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F9F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F9F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F9F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F9F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F9E PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F9E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F9E
$LN7@z900_1F9E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F9E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F9E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F9E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F9E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F9D PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F9D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F9D
$LN7@z900_1F9D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F9D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F9D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F9D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F9D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F9C PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F9C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F9C
$LN7@z900_1F9C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F9C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F9C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F9C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F9C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F9B PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F9B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F9B
$LN7@z900_1F9B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F9B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F9B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F9B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F9B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F9A PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F9A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F9A
$LN7@z900_1F9A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F9A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F9A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F9A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F9A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F99 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F99:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F99
$LN7@z900_1F99:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F99
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F99:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F99
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F99 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F98 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F98:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F98
$LN7@z900_1F98:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F98
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F98:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F98
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F98 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F97 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F97:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F97
$LN7@z900_1F97:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F97
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F97:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F97
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F97 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F96 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F96:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F96
$LN7@z900_1F96:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F96
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F96:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F96
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F96 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F95 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F95:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F95
$LN7@z900_1F95:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F95
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F95:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F95
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F95 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F94 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F94:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F94
$LN7@z900_1F94:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F94
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F94:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F94
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F94 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F93 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F93:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F93
$LN7@z900_1F93:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F93
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F93:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F93
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F93 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F92 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F92:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F92
$LN7@z900_1F92:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F92
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F92:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F92
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F92 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F91 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F91:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F91
$LN7@z900_1F91:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F91
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F91:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F91
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F91 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F90 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F90:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F90
$LN7@z900_1F90:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F90
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F90:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F90
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F90 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F8F PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F8F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F8F
$LN7@z900_1F8F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F8F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F8F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F8F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F8F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F8E PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F8E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F8E
$LN7@z900_1F8E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F8E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F8E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F8E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F8E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F8D PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F8D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F8D
$LN7@z900_1F8D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F8D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F8D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F8D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F8D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F8C PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F8C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F8C
$LN7@z900_1F8C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F8C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F8C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F8C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F8C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F8B PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F8B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F8B
$LN7@z900_1F8B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F8B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F8B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F8B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F8B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F8A PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F8A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F8A
$LN7@z900_1F8A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F8A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F8A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F8A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F8A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F89 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F89:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F89
$LN7@z900_1F89:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F89
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F89:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F89
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F89 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F88 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F88:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F88
$LN7@z900_1F88:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F88
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F88:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F88
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F88 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F87 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F87:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F87
$LN7@z900_1F87:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F87
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F87:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F87
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F87 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F86 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F86:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F86
$LN7@z900_1F86:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F86
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F86:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F86
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F85 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F85:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F85
$LN7@z900_1F85:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F85
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F85:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F85
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F85 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F84 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F84:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F84
$LN7@z900_1F84:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F84
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F84:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F84
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F84 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F83 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F83:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F83
$LN7@z900_1F83:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F83
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F83:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F83
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F83 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F82 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F82:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F82
$LN7@z900_1F82:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F82
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F82:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F82
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F82 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F81 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F81:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F81
$LN7@z900_1F81:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F81
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F81:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F81
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F81 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F80 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F80:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F80
$LN7@z900_1F80:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F80
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F80:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F80
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F80 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F7F PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F7F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F7F
$LN7@z900_1F7F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F7F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F7F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F7F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F7F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F7E PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F7E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F7E
$LN7@z900_1F7E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F7E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F7E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F7E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F7E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F7D PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F7D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F7D
$LN7@z900_1F7D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F7D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F7D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F7D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F7D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F7C PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F7C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F7C
$LN7@z900_1F7C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F7C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F7C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F7C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F7C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F7B PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F7B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F7B
$LN7@z900_1F7B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F7B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F7B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F7B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F7B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F7A PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F7A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F7A
$LN7@z900_1F7A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F7A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F7A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F7A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F7A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F79 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F79:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F79
$LN7@z900_1F79:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F79
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F79:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F79
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F79 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F78 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F78:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F78
$LN7@z900_1F78:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F78
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F78:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F78
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F78 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F77 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F77:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F77
$LN7@z900_1F77:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F77
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F77:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F77
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F77 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F76 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F76:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F76
$LN7@z900_1F76:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F76
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F76:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F76
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F76 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F75 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F75:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F75
$LN7@z900_1F75:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F75
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F75:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F75
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F75 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F74 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F74:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F74
$LN7@z900_1F74:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F74
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F74:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F74
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F74 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F73 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F73:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F73
$LN7@z900_1F73:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F73
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F73:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F73
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F73 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F72 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F72:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F72
$LN7@z900_1F72:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F72
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F72:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F72
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F72 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F71 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F71:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F71
$LN7@z900_1F71:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F71
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F71:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F71
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F71 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F70 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F70:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F70
$LN7@z900_1F70:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F70
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F70:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F70
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F70 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F6F PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F6F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F6F
$LN7@z900_1F6F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F6F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F6F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F6F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F6F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F6E PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F6E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F6E
$LN7@z900_1F6E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F6E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F6E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F6E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F6E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F6D PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F6D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F6D
$LN7@z900_1F6D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F6D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F6D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F6D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F6D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F6C PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F6C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F6C
$LN7@z900_1F6C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F6C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F6C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F6C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F6C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F6B PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F6B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F6B
$LN7@z900_1F6B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F6B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F6B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F6B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F6B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F6A PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F6A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F6A
$LN7@z900_1F6A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F6A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F6A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F6A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F6A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F69 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F69:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F69
$LN7@z900_1F69:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F69
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F69:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F69
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F69 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F68 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F68:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F68
$LN7@z900_1F68:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F68
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F68:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F68
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F68 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F67 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F67:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F67
$LN7@z900_1F67:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F67
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F67:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F67
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F67 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F66 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F66:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F66
$LN7@z900_1F66:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F66
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F66:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F66
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F66 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F65 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F65:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F65
$LN7@z900_1F65:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F65
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F65:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F65
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F65 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F64 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F64:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F64
$LN7@z900_1F64:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F64
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F64:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F64
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F63 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F63:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F63
$LN7@z900_1F63:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F63
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F63:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F63
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F63 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F62 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F62:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F62
$LN7@z900_1F62:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F62
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F62:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F62
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F62 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F61 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F61:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F61
$LN7@z900_1F61:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F61
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F61:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F61
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F61 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F60 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F60:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F60
$LN7@z900_1F60:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F60
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F60:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F60
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F60 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F5F PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F5F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F5F
$LN7@z900_1F5F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F5F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F5F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F5F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F5F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F5E PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F5E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F5E
$LN7@z900_1F5E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F5E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F5E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F5E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F5E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F5D PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F5D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F5D
$LN7@z900_1F5D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F5D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F5D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F5D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F5D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F5C PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F5C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F5C
$LN7@z900_1F5C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F5C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F5C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F5C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F5C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F5B PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F5B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F5B
$LN7@z900_1F5B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F5B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F5B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F5B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F5B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F5A PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F5A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F5A
$LN7@z900_1F5A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F5A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F5A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F5A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F5A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F59 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F59:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F59
$LN7@z900_1F59:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F59
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F59:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F59
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F59 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F58 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F58:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F58
$LN7@z900_1F58:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F58
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F58:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F58
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F58 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F57 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F57:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F57
$LN7@z900_1F57:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F57
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F57:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F57
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F57 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F56 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F56:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F56
$LN7@z900_1F56:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F56
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F56:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F56
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F56 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F55 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F55:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F55
$LN7@z900_1F55:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F55
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F55:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F55
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F55 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F54 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F54:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F54
$LN7@z900_1F54:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F54
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F54:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F54
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F54 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F53 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F53:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F53
$LN7@z900_1F53:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F53
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F53:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F53
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F53 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F52 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F52:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F52
$LN7@z900_1F52:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F52
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F52:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F52
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F52 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F51 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F51:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F51
$LN7@z900_1F51:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F51
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F51:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F51
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F51 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F50 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F50:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F50
$LN7@z900_1F50:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F50
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F50:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F50
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F50 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F4F PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F4F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F4F
$LN7@z900_1F4F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F4F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F4F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F4F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F4F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F4E PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F4E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F4E
$LN7@z900_1F4E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F4E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F4E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F4E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F4E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F4D PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F4D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F4D
$LN7@z900_1F4D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F4D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F4D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F4D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F4D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F4C PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F4C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F4C
$LN7@z900_1F4C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F4C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F4C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F4C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F4C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F4B PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F4B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F4B
$LN7@z900_1F4B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F4B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F4B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F4B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F4B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F4A PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F4A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F4A
$LN7@z900_1F4A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F4A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F4A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F4A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F4A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F49 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F49:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F49
$LN7@z900_1F49:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F49
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F49:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F49
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F49 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F48 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F48:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F48
$LN7@z900_1F48:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F48
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F48:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F48
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F48 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F47 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F47:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F47
$LN7@z900_1F47:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F47
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F47:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F47
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F47 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F46 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F46:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F46
$LN7@z900_1F46:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F46
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F46:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F46
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F46 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F45 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F45:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F45
$LN7@z900_1F45:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F45
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F45:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F45
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F45 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F44 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F44:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F44
$LN7@z900_1F44:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F44
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F44:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F44
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F44 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F43 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F43:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F43
$LN7@z900_1F43:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F43
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F43:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F43
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F43 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F42 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F42:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F42
$LN7@z900_1F42:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F42
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F42:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F42
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F42 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F41 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F41:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F41
$LN7@z900_1F41:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F41
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F41:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F41
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F41 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F40 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F40:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F40
$LN7@z900_1F40:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F40
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F40:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F40
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F40 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F3F PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F3F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F3F
$LN7@z900_1F3F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F3F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F3F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F3F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F3F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F3E PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F3E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F3E
$LN7@z900_1F3E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F3E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F3E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F3E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F3E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F3D PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F3D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F3D
$LN7@z900_1F3D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F3D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F3D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F3D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F3D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F3C PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F3C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F3C
$LN7@z900_1F3C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F3C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F3C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F3C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F3C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F3B PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F3B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F3B
$LN7@z900_1F3B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F3B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F3B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F3B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F3B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F3A PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F3A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F3A
$LN7@z900_1F3A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F3A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F3A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F3A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F3A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F39 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F39:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F39
$LN7@z900_1F39:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F39
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F39:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F39
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F39 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F38 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F38:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F38
$LN7@z900_1F38:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F38
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F38:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F38
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F38 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F37 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F37:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F37
$LN7@z900_1F37:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F37
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F37:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F37
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F37 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F36 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F36:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F36
$LN7@z900_1F36:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F36
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F36:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F36
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F35 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F35:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F35
$LN7@z900_1F35:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F35
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F35:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F35
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F35 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F34 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F34:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F34
$LN7@z900_1F34:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F34
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F34:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F34
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F34 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F33 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F33:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F33
$LN7@z900_1F33:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F33
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F33:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F33
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F33 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F32 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F32:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F32
$LN7@z900_1F32:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F32
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F32:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F32
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F31 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F31:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F31
$LN7@z900_1F31:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F31
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F31:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F31
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F31 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F30 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F30:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F30
$LN7@z900_1F30:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F30
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F30:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F30
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F30 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F2F PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F2F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F2F
$LN7@z900_1F2F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F2F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F2F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F2F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F2F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F2E PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F2E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F2E
$LN7@z900_1F2E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F2E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F2E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F2E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F2E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F2D PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F2D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F2D
$LN7@z900_1F2D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F2D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F2D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F2D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F2C PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F2C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F2C
$LN7@z900_1F2C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F2C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F2C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F2C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F2C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F2B PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F2B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F2B
$LN7@z900_1F2B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F2B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F2B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F2B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F2B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F2A PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F2A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F2A
$LN7@z900_1F2A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F2A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F2A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F2A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F2A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F29 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F29:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F29
$LN7@z900_1F29:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F29
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F29:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F29
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F29 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F28 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F28:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F28
$LN7@z900_1F28:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F28
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F28:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F28
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F28 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F27 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F27:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F27
$LN7@z900_1F27:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F27
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F27:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F27
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F27 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F26 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F26:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F26
$LN7@z900_1F26:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F26
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F26:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F26
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F26 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F25 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F25:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F25
$LN7@z900_1F25:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F25
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F25:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F25
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F25 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F24 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F24:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F24
$LN7@z900_1F24:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F24
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F24:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F24
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F23 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F23:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F23
$LN7@z900_1F23:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F23
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F23:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F23
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F23 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F22 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F22:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F22
$LN7@z900_1F22:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F22
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F22:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F22
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F22 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F21 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F21:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F21
$LN7@z900_1F21:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F21
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F21:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F21
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F21 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F20 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F20:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F20
$LN7@z900_1F20:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F20
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F20:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F20
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F1F PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F1F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F1F
$LN7@z900_1F1F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F1F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F1F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F1F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F1F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F1E PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F1E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F1E
$LN7@z900_1F1E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F1E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F1E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F1E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F1E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F1D PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F1D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F1D
$LN7@z900_1F1D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F1D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F1D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F1D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F1D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F1C PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F1C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F1C
$LN7@z900_1F1C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F1C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F1C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F1C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F1C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F1B PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F1B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F1B
$LN7@z900_1F1B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F1B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F1B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F1B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F1B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F1A PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F1A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F1A
$LN7@z900_1F1A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F1A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F1A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F1A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F1A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F19 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F19:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F19
$LN7@z900_1F19:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F19
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F19:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F19
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F19 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F18 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F18:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F18
$LN7@z900_1F18:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F18
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F18:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F18
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F18 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F17 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F17:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F17
$LN7@z900_1F17:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F17
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F17:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F17
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F17 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F16 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F16:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F16
$LN7@z900_1F16:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F16
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F16:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F16
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F15 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F15:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F15
$LN7@z900_1F15:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F15
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F15:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F15
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F15 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F14 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F14:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F14
$LN7@z900_1F14:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F14
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F14:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F14
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F14 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F13 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F13:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F13
$LN7@z900_1F13:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F13
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F13:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F13
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F13 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F12 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F12:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F12
$LN7@z900_1F12:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F12
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F12:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F12
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F11 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F11:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F11
$LN7@z900_1F11:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F11
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F11:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F11
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F11 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F10 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F10:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F10
$LN7@z900_1F10:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F10
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F10:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F10
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F0F PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F0F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F0F
$LN7@z900_1F0F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F0F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F0F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F0F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F0F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F0E PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F0E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F0E
$LN7@z900_1F0E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F0E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F0E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F0E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F0E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F0D PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F0D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F0D
$LN7@z900_1F0D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F0D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F0D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F0D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F0D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F0C PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F0C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F0C
$LN7@z900_1F0C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F0C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F0C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F0C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F0C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F0B PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F0B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F0B
$LN7@z900_1F0B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F0B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F0B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F0B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F0B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F0A PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F0A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F0A
$LN7@z900_1F0A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F0A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F0A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F0A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F0A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F09 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F09:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F09
$LN7@z900_1F09:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F09
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F09:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F09
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F09 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F08 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F08:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F08
$LN7@z900_1F08:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F08
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F08:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F08
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F08 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F07 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F07:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F07
$LN7@z900_1F07:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F07
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F07:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F07
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F07 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F06 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F06:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F06
$LN7@z900_1F06:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F06
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F06:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F06
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F06 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F05 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F05:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F05
$LN7@z900_1F05:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F05
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F05:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F05
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F05 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F04 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F04:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F04
$LN7@z900_1F04:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F04
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F04:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F04
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F04 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F03 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F03:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F03
$LN7@z900_1F03:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F03
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F03:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F03
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F03 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F02 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F02:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F02
$LN7@z900_1F02:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F02
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F02:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F02
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F02 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F01 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F01:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F01
$LN7@z900_1F01:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F01
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F01:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F01
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F01 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
z900_1F00 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900_1F00:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@z900_1F00
$LN7@z900_1F00:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@z900_1F00
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@z900_1F00:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@z900_1F00
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
z900_1F00 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9101 PROC

; 1720 : TMgen( 01 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9101
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9101:
$LN4@z900_9101:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9101
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9101:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9101
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	83 e0 01	 and	 eax, 1
  000dc	85 c0		 test	 eax, eax
  000de	74 0b		 je	 SHORT $LN7@z900_9101
  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000e9	eb 09		 jmp	 SHORT $LN8@z900_9101
$LN7@z900_9101:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9101:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	c3		 ret	 0
z900_9101 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9102 PROC

; 1719 : TMgen( 02 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9102
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9102:
$LN4@z900_9102:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9102
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9102:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9102
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	83 e0 02	 and	 eax, 2
  000dc	85 c0		 test	 eax, eax
  000de	74 0b		 je	 SHORT $LN7@z900_9102
  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000e9	eb 09		 jmp	 SHORT $LN8@z900_9102
$LN7@z900_9102:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9102:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	c3		 ret	 0
z900_9102 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9104 PROC

; 1718 : TMgen( 04 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9104
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9104:
$LN4@z900_9104:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9104
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9104:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9104
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	83 e0 04	 and	 eax, 4
  000dc	85 c0		 test	 eax, eax
  000de	74 0b		 je	 SHORT $LN7@z900_9104
  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000e9	eb 09		 jmp	 SHORT $LN8@z900_9104
$LN7@z900_9104:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9104:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	c3		 ret	 0
z900_9104 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9108 PROC

; 1717 : TMgen( 08 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9108
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9108:
$LN4@z900_9108:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9108
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9108:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9108
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	83 e0 08	 and	 eax, 8
  000dc	85 c0		 test	 eax, eax
  000de	74 0b		 je	 SHORT $LN7@z900_9108
  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000e9	eb 09		 jmp	 SHORT $LN8@z900_9108
$LN7@z900_9108:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9108:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	c3		 ret	 0
z900_9108 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9110 PROC

; 1716 : TMgen( 10 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9110
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9110:
$LN4@z900_9110:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9110
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9110:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9110
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	83 e0 10	 and	 eax, 16
  000dc	85 c0		 test	 eax, eax
  000de	74 0b		 je	 SHORT $LN7@z900_9110
  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000e9	eb 09		 jmp	 SHORT $LN8@z900_9110
$LN7@z900_9110:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9110:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	c3		 ret	 0
z900_9110 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9120 PROC

; 1715 : TMgen( 20 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9120
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9120:
$LN4@z900_9120:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9120
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9120:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9120
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	83 e0 20	 and	 eax, 32			; 00000020H
  000dc	85 c0		 test	 eax, eax
  000de	74 0b		 je	 SHORT $LN7@z900_9120
  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000e9	eb 09		 jmp	 SHORT $LN8@z900_9120
$LN7@z900_9120:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9120:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	c3		 ret	 0
z900_9120 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9140 PROC

; 1714 : TMgen( 40 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9140
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9140:
$LN4@z900_9140:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9140
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9140:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9140
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	83 e0 40	 and	 eax, 64			; 00000040H
  000dc	85 c0		 test	 eax, eax
  000de	74 0b		 je	 SHORT $LN7@z900_9140
  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000e9	eb 09		 jmp	 SHORT $LN8@z900_9140
$LN7@z900_9140:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9140:
  000f4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f8	c3		 ret	 0
z900_9140 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b1$ = 32
temp$1 = 36
effective_addr1$ = 40
inst$ = 64
regs$ = 72
z900_9180 PROC

; 1713 : TMgen( 80 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 20	 mov	 DWORD PTR b1$[rsp], eax
  00041	83 7c 24 20 00	 cmp	 DWORD PTR b1$[rsp], 0
  00046	74 3e		 je	 SHORT $LN5@z900_9180
  00048	48 63 44 24 20	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 28	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_9180:
$LN4@z900_9180:
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN6@z900_9180
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_9180:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_9180
  000b5	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
  000c3	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000c8	8b 54 24 20	 mov	 edx, DWORD PTR b1$[rsp]
  000cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d1	e8 00 00 00 00	 call	 z900_vfetchb
  000d6	0f b6 c0	 movzx	 eax, al
  000d9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000de	85 c0		 test	 eax, eax
  000e0	74 0b		 je	 SHORT $LN7@z900_9180
  000e2	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000eb	eb 09		 jmp	 SHORT $LN8@z900_9180
$LN7@z900_9180:
  000ed	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000f2	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_9180:
  000f6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fa	c3		 ret	 0
z900_9180 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
a64$ = 32
nodeaddr$ = 40
nodecode$ = 48
index$ = 56
nodedata$ = 64
tv135 = 72
tv132 = 80
tv153 = 88
tv150 = 96
tv171 = 104
tv175 = 112
tv194 = 120
tv191 = 128
tv257 = 136
tv296 = 144
tv317 = 152
tv337 = 160
tv356 = 168
tv377 = 176
inst$ = 208
regs$ = 216
z900_update_tree PROC

; 2168 : {

$LN85:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 2169 : GREG    index;                          /* tree index                */
; 2170 : GREG    nodecode;                       /* current node's codeword   */
; 2171 : GREG    nodedata;                       /* current node's other data */
; 2172 : VADR    nodeaddr;                       /* work addr of current node */
; 2173 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2174 : BYTE    a64 = regs->psw.amode64;        /* 64-bit mode flag          */

  00011	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00019	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0001f	83 e0 01	 and	 eax, 1
  00022	88 44 24 20	 mov	 BYTE PTR a64$[rsp], al
$LN4@z900_updat:

; 2175 : #endif
; 2176 : #if defined( FEATURE_PER1 )
; 2177 : U16     rmask = 0x0000;
; 2178 : #endif
; 2179 : 
; 2180 :     E(inst, regs);

  00026	33 c0		 xor	 eax, eax
  00028	85 c0		 test	 eax, eax
  0002a	75 fa		 jne	 SHORT $LN4@z900_updat
$LN7@z900_updat:
  0002c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00034	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00038	48 83 c0 02	 add	 rax, 2
  0003c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00044	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00048	33 c0		 xor	 eax, eax
  0004a	83 f8 02	 cmp	 eax, 2
  0004d	74 0f		 je	 SHORT $LN32@z900_updat
  0004f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00057	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN32@z900_updat:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 c8		 jne	 SHORT $LN7@z900_updat

; 2181 :     PER_ZEROADDR_CHECK( regs, 4 );

  00064	ba 04 00 00 00	 mov	 edx, 4
  00069	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00071	e8 00 00 00 00	 call	 z900_per3_zero_check
$LN10@z900_updat:

; 2182 : 
; 2183 :     TXFC_INSTR_CHECK( regs );

  00076	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  00085	85 c0		 test	 eax, eax
  00087	74 3f		 je	 SHORT $LN33@z900_updat
  00089	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00091	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  00097	0f ba e8 0f	 bts	 eax, 15
  0009b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000a3	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  000a9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG207094
  000b0	41 b8 0b 00 00
	00		 mov	 r8d, 11
  000b6	ba 02 00 00 00	 mov	 edx, 2
  000bb	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c3	e8 00 00 00 00	 call	 z900_abort_transaction
$LN33@z900_updat:
  000c8	33 c0		 xor	 eax, eax
  000ca	85 c0		 test	 eax, eax
  000cc	75 a8		 jne	 SHORT $LN10@z900_updat

; 2184 : 
; 2185 :     /*
; 2186 :     **  GR0, GR1    node values (codeword and other data) of node
; 2187 :     **              with "highest encountered codeword value"
; 2188 :     **  GR2, GR3    node values (codeword and other data) from whichever
; 2189 :     **              node we happened to have encountered that had a code-
; 2190 :     **              word value equal to our current "highest encountered
; 2191 :     **              codeword value" (e.g. GR0)  (cc0 only)
; 2192 :     **  GR4         pointer to one node BEFORE the beginning of the tree
; 2193 :     **  GR5         current node index (tree displacement to current node)
; 2194 :     */
; 2195 : 
; 2196 :     /* Check GR4, GR5 for proper alignment */
; 2197 :     if (0
; 2198 :         || ( GR_A(4,regs) & UPT_ALIGN_MASK )
; 2199 :         || ( GR_A(5,regs) & UPT_ALIGN_MASK )

  000ce	33 c0		 xor	 eax, eax
  000d0	85 c0		 test	 eax, eax
  000d2	0f 85 0c 01 00
	00		 jne	 $LN35@z900_updat
  000d8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000e0	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000e6	83 e0 01	 and	 eax, 1
  000e9	85 c0		 test	 eax, eax
  000eb	74 20		 je	 SHORT $LN57@z900_updat
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 04	 imul	 rax, rax, 4
  000f6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fe	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  00106	48 89 44 24 50	 mov	 QWORD PTR tv132[rsp], rax
  0010b	eb 1d		 jmp	 SHORT $LN58@z900_updat
$LN57@z900_updat:
  0010d	b8 08 00 00 00	 mov	 eax, 8
  00112	48 6b c0 04	 imul	 rax, rax, 4
  00116	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011e	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00125	48 89 44 24 50	 mov	 QWORD PTR tv132[rsp], rax
$LN58@z900_updat:
  0012a	0f b6 44 24 20	 movzx	 eax, BYTE PTR a64$[rsp]
  0012f	85 c0		 test	 eax, eax
  00131	74 0b		 je	 SHORT $LN59@z900_updat
  00133	48 c7 44 24 48
	0f 00 00 00	 mov	 QWORD PTR tv135[rsp], 15
  0013c	eb 09		 jmp	 SHORT $LN60@z900_updat
$LN59@z900_updat:
  0013e	48 c7 44 24 48
	07 00 00 00	 mov	 QWORD PTR tv135[rsp], 7
$LN60@z900_updat:
  00147	48 8b 44 24 48	 mov	 rax, QWORD PTR tv135[rsp]
  0014c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv132[rsp]
  00151	48 23 c8	 and	 rcx, rax
  00154	48 8b c1	 mov	 rax, rcx
  00157	48 85 c0	 test	 rax, rax
  0015a	0f 85 84 00 00
	00		 jne	 $LN35@z900_updat
  00160	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0016e	83 e0 01	 and	 eax, 1
  00171	85 c0		 test	 eax, eax
  00173	74 20		 je	 SHORT $LN61@z900_updat
  00175	b8 08 00 00 00	 mov	 eax, 8
  0017a	48 6b c0 05	 imul	 rax, rax, 5
  0017e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00186	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  0018e	48 89 44 24 60	 mov	 QWORD PTR tv150[rsp], rax
  00193	eb 1d		 jmp	 SHORT $LN62@z900_updat
$LN61@z900_updat:
  00195	b8 08 00 00 00	 mov	 eax, 8
  0019a	48 6b c0 05	 imul	 rax, rax, 5
  0019e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001a6	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  001ad	48 89 44 24 60	 mov	 QWORD PTR tv150[rsp], rax
$LN62@z900_updat:
  001b2	0f b6 44 24 20	 movzx	 eax, BYTE PTR a64$[rsp]
  001b7	85 c0		 test	 eax, eax
  001b9	74 0b		 je	 SHORT $LN63@z900_updat
  001bb	48 c7 44 24 58
	0f 00 00 00	 mov	 QWORD PTR tv153[rsp], 15
  001c4	eb 09		 jmp	 SHORT $LN64@z900_updat
$LN63@z900_updat:
  001c6	48 c7 44 24 58
	07 00 00 00	 mov	 QWORD PTR tv153[rsp], 7
$LN64@z900_updat:
  001cf	48 8b 44 24 58	 mov	 rax, QWORD PTR tv153[rsp]
  001d4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv150[rsp]
  001d9	48 23 c8	 and	 rcx, rax
  001dc	48 8b c1	 mov	 rax, rcx
  001df	48 85 c0	 test	 rax, rax
  001e2	74 1b		 je	 SHORT $LN34@z900_updat
$LN35@z900_updat:

; 2200 :     )
; 2201 :         regs->program_interrupt (regs, PGM_SPECIFICATION_EXCEPTION);

  001e4	ba 06 00 00 00	 mov	 edx, 6
  001e9	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001f9	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN34@z900_updat:
$LN11@z900_updat:

; 2202 : 
; 2203 :     /* Bubble the tree by moving successively higher nodes towards the
; 2204 :        front (beginning) of the tree, only stopping whenever we either:
; 2205 : 
; 2206 :             1. reach the beginning of the tree, -OR-
; 2207 :             2. encounter a node with a negative codeword value, -OR-
; 2208 :             3. encounter a node whose codeword is equal to
; 2209 :                our current "highest encountered codeword".
; 2210 : 
; 2211 :        Thus, when we're done, GR0 & GR1 will then contain the node values
; 2212 :        of the node with the highest encountered codeword value, and all
; 2213 :        other traversed nodes will have been reordered into descending code-
; 2214 :        word sequence (i.e. from highest codeword value to lowest codeword
; 2215 :        value; this is after all an instruction used for sorting/merging).
; 2216 :     */
; 2217 : 
; 2218 :     for (;;)
; 2219 :     {
; 2220 :         /* Calculate index value of next node to be examined (half
; 2221 :            as far from beginning of tree to where we currently are)
; 2222 :         */
; 2223 :         index = (GR_A(5,regs) >> 1) & UPT_SHIFT_MASK;

  001ff	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00207	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0020d	83 e0 01	 and	 eax, 1
  00210	85 c0		 test	 eax, eax
  00212	74 20		 je	 SHORT $LN65@z900_updat
  00214	b8 08 00 00 00	 mov	 eax, 8
  00219	48 6b c0 05	 imul	 rax, rax, 5
  0021d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00225	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  0022d	48 89 44 24 68	 mov	 QWORD PTR tv171[rsp], rax
  00232	eb 1d		 jmp	 SHORT $LN66@z900_updat
$LN65@z900_updat:
  00234	b8 08 00 00 00	 mov	 eax, 8
  00239	48 6b c0 05	 imul	 rax, rax, 5
  0023d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00245	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0024c	48 89 44 24 68	 mov	 QWORD PTR tv171[rsp], rax
$LN66@z900_updat:
  00251	0f b6 44 24 20	 movzx	 eax, BYTE PTR a64$[rsp]
  00256	85 c0		 test	 eax, eax
  00258	74 0b		 je	 SHORT $LN67@z900_updat
  0025a	48 c7 44 24 70
	f0 ff ff ff	 mov	 QWORD PTR tv175[rsp], -16
  00263	eb 09		 jmp	 SHORT $LN68@z900_updat
$LN67@z900_updat:
  00265	48 c7 44 24 70
	f8 ff ff ff	 mov	 QWORD PTR tv175[rsp], -8
$LN68@z900_updat:
  0026e	48 8b 44 24 68	 mov	 rax, QWORD PTR tv171[rsp]
  00273	48 d1 e8	 shr	 rax, 1
  00276	48 23 44 24 70	 and	 rax, QWORD PTR tv175[rsp]
  0027b	48 89 44 24 38	 mov	 QWORD PTR index$[rsp], rax

; 2224 : 
; 2225 :         /* Exit with cc1 when we've gone as far as we can go */
; 2226 :         if ( !index )

  00280	48 83 7c 24 38
	00		 cmp	 QWORD PTR index$[rsp], 0
  00286	75 11		 jne	 SHORT $LN36@z900_updat

; 2227 :         {
; 2228 :             regs->psw.cc = 1;

  00288	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00290	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2229 :             break;

  00294	e9 8f 06 00 00	 jmp	 $LN12@z900_updat
$LN36@z900_updat:

; 2230 :         }
; 2231 : 
; 2232 :         /* Exit with cc3 when we encounter a negative codeword value
; 2233 :            (i.e. any codeword value with its highest-order bit on)
; 2234 :         */
; 2235 :         if ( GR_A(0,regs) & UPT_HIGH_BIT )

  00299	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002a1	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  002a7	83 e0 01	 and	 eax, 1
  002aa	85 c0		 test	 eax, eax
  002ac	74 23		 je	 SHORT $LN69@z900_updat
  002ae	b8 08 00 00 00	 mov	 eax, 8
  002b3	48 6b c0 00	 imul	 rax, rax, 0
  002b7	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002bf	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  002c7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv191[rsp], rax
  002cf	eb 20		 jmp	 SHORT $LN70@z900_updat
$LN69@z900_updat:
  002d1	b8 08 00 00 00	 mov	 eax, 8
  002d6	48 6b c0 00	 imul	 rax, rax, 0
  002da	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002e2	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  002e9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv191[rsp], rax
$LN70@z900_updat:
  002f1	0f b6 44 24 20	 movzx	 eax, BYTE PTR a64$[rsp]
  002f6	85 c0		 test	 eax, eax
  002f8	74 11		 je	 SHORT $LN71@z900_updat
  002fa	48 b8 00 00 00
	00 00 00 00 80	 mov	 rax, -9223372036854775808 ; 8000000000000000H
  00304	48 89 44 24 78	 mov	 QWORD PTR tv194[rsp], rax
  00309	eb 0a		 jmp	 SHORT $LN72@z900_updat
$LN71@z900_updat:
  0030b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00310	48 89 44 24 78	 mov	 QWORD PTR tv194[rsp], rax
$LN72@z900_updat:
  00315	48 8b 44 24 78	 mov	 rax, QWORD PTR tv194[rsp]
  0031a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv191[rsp]
  00322	48 23 c8	 and	 rcx, rax
  00325	48 8b c1	 mov	 rax, rcx
  00328	48 85 c0	 test	 rax, rax
  0032b	74 11		 je	 SHORT $LN37@z900_updat

; 2236 :         {
; 2237 :             regs->psw.cc = 3;

  0032d	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00335	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 2238 :             break;

  00339	e9 ea 05 00 00	 jmp	 $LN12@z900_updat
$LN37@z900_updat:

; 2239 :         }
; 2240 : 
; 2241 :         /* Retrieve this node's values for closer examination... */
; 2242 : 
; 2243 :         nodeaddr = regs->GR(4) + index;

  0033e	b8 08 00 00 00	 mov	 eax, 8
  00343	48 6b c0 04	 imul	 rax, rax, 4
  00347	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0034f	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  00357	48 03 44 24 38	 add	 rax, QWORD PTR index$[rsp]
  0035c	48 89 44 24 28	 mov	 QWORD PTR nodeaddr$[rsp], rax

; 2244 : 
; 2245 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2246 :         if ( a64 )

  00361	0f b6 44 24 20	 movzx	 eax, BYTE PTR a64$[rsp]
  00366	85 c0		 test	 eax, eax
  00368	74 68		 je	 SHORT $LN38@z900_updat

; 2247 :         {
; 2248 :             nodecode = ARCH_DEP(vfetch8) ( (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  0036a	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00372	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00379	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nodeaddr$[rsp]
  0037e	48 23 c8	 and	 rcx, rax
  00381	48 8b c1	 mov	 rax, rcx
  00384	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0038c	ba 04 00 00 00	 mov	 edx, 4
  00391	48 8b c8	 mov	 rcx, rax
  00394	e8 00 00 00 00	 call	 z900_vfetch8
  00399	48 89 44 24 30	 mov	 QWORD PTR nodecode$[rsp], rax

; 2249 :             nodedata = ARCH_DEP(vfetch8) ( (nodeaddr+8) & ADDRESS_MAXWRAP(regs), AR4, regs );

  0039e	48 8b 44 24 28	 mov	 rax, QWORD PTR nodeaddr$[rsp]
  003a3	48 83 c0 08	 add	 rax, 8
  003a7	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003af	48 23 81 90 00
	00 00		 and	 rax, QWORD PTR [rcx+144]
  003b6	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003be	ba 04 00 00 00	 mov	 edx, 4
  003c3	48 8b c8	 mov	 rcx, rax
  003c6	e8 00 00 00 00	 call	 z900_vfetch8
  003cb	48 89 44 24 40	 mov	 QWORD PTR nodedata$[rsp], rax

; 2250 :         }

  003d0	eb 6a		 jmp	 SHORT $LN39@z900_updat
$LN38@z900_updat:

; 2251 :         else
; 2252 : #endif
; 2253 :         {
; 2254 :             nodecode = ARCH_DEP(vfetch4) ( (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  003d2	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003da	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  003e1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nodeaddr$[rsp]
  003e6	48 23 c8	 and	 rcx, rax
  003e9	48 8b c1	 mov	 rax, rcx
  003ec	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003f4	ba 04 00 00 00	 mov	 edx, 4
  003f9	48 8b c8	 mov	 rcx, rax
  003fc	e8 00 00 00 00	 call	 z900_vfetch4
  00401	8b c0		 mov	 eax, eax
  00403	48 89 44 24 30	 mov	 QWORD PTR nodecode$[rsp], rax

; 2255 :             nodedata = ARCH_DEP(vfetch4) ( (nodeaddr+4) & ADDRESS_MAXWRAP(regs), AR4, regs );

  00408	48 8b 44 24 28	 mov	 rax, QWORD PTR nodeaddr$[rsp]
  0040d	48 83 c0 04	 add	 rax, 4
  00411	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00419	48 23 81 90 00
	00 00		 and	 rax, QWORD PTR [rcx+144]
  00420	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00428	ba 04 00 00 00	 mov	 edx, 4
  0042d	48 8b c8	 mov	 rcx, rax
  00430	e8 00 00 00 00	 call	 z900_vfetch4
  00435	8b c0		 mov	 eax, eax
  00437	48 89 44 24 40	 mov	 QWORD PTR nodedata$[rsp], rax
$LN39@z900_updat:
$LN16@z900_updat:

; 2256 :         }
; 2257 : 
; 2258 :         /* GR5 must remain UNCHANGED if the execution of a unit of operation
; 2259 :            is nullified or suppressed! Thus it must ONLY be updated/committed
; 2260 :            AFTER we've successfully retrieved the node data (since the storage
; 2261 :            access could cause a program-check thereby nullifying/suppressing
; 2262 :            the instruction's "current unit of operation")
; 2263 :         */
; 2264 :         SET_GR_A(5,regs,index);     // (do AFTER node data is accessed!)

  0043c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00444	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0044a	83 e0 01	 and	 eax, 1
  0044d	85 c0		 test	 eax, eax
  0044f	74 20		 je	 SHORT $LN40@z900_updat
  00451	b8 08 00 00 00	 mov	 eax, 8
  00456	48 6b c0 05	 imul	 rax, rax, 5
  0045a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00462	48 8b 54 24 38	 mov	 rdx, QWORD PTR index$[rsp]
  00467	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  0046f	eb 1c		 jmp	 SHORT $LN41@z900_updat
$LN40@z900_updat:
  00471	b8 08 00 00 00	 mov	 eax, 8
  00476	48 6b c0 05	 imul	 rax, rax, 5
  0047a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00482	8b 54 24 38	 mov	 edx, DWORD PTR index$[rsp]
  00486	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN41@z900_updat:
  0048d	33 c0		 xor	 eax, eax
  0048f	85 c0		 test	 eax, eax
  00491	75 a9		 jne	 SHORT $LN16@z900_updat

; 2265 : #if defined( FEATURE_PER1 )
; 2266 :         rmask |= PER_GRA_MASK( 5 );
; 2267 : #endif
; 2268 : 
; 2269 :         /* Exit with cc0 whenever we reach a node whose codeword is equal
; 2270 :            to our current "highest encountered" codeword value (i.e. any
; 2271 :            node whose codeword matches our current "highest" (GR0) value)
; 2272 :         */
; 2273 :         if ( nodecode == GR_A(0,regs) )

  00493	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0049b	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  004a1	83 e0 01	 and	 eax, 1
  004a4	85 c0		 test	 eax, eax
  004a6	74 23		 je	 SHORT $LN73@z900_updat
  004a8	b8 08 00 00 00	 mov	 eax, 8
  004ad	48 6b c0 00	 imul	 rax, rax, 0
  004b1	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004b9	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  004c1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv257[rsp], rax
  004c9	eb 20		 jmp	 SHORT $LN74@z900_updat
$LN73@z900_updat:
  004cb	b8 08 00 00 00	 mov	 eax, 8
  004d0	48 6b c0 00	 imul	 rax, rax, 0
  004d4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004dc	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  004e3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv257[rsp], rax
$LN74@z900_updat:
  004eb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv257[rsp]
  004f3	48 39 44 24 30	 cmp	 QWORD PTR nodecode$[rsp], rax
  004f8	0f 85 bf 00 00
	00		 jne	 $LN42@z900_updat
$LN19@z900_updat:

; 2274 :         {
; 2275 :             /* Load GR2 and GR3 with the equal codeword node's values */
; 2276 :             SET_GR_A(2,regs,nodecode);

  004fe	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00506	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0050c	83 e0 01	 and	 eax, 1
  0050f	85 c0		 test	 eax, eax
  00511	74 20		 je	 SHORT $LN43@z900_updat
  00513	b8 08 00 00 00	 mov	 eax, 8
  00518	48 6b c0 02	 imul	 rax, rax, 2
  0051c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00524	48 8b 54 24 30	 mov	 rdx, QWORD PTR nodecode$[rsp]
  00529	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  00531	eb 1c		 jmp	 SHORT $LN44@z900_updat
$LN43@z900_updat:
  00533	b8 08 00 00 00	 mov	 eax, 8
  00538	48 6b c0 02	 imul	 rax, rax, 2
  0053c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00544	8b 54 24 30	 mov	 edx, DWORD PTR nodecode$[rsp]
  00548	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN44@z900_updat:
  0054f	33 c0		 xor	 eax, eax
  00551	85 c0		 test	 eax, eax
  00553	75 a9		 jne	 SHORT $LN19@z900_updat
$LN22@z900_updat:

; 2277 :             SET_GR_A(3,regs,nodedata);

  00555	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0055d	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00563	83 e0 01	 and	 eax, 1
  00566	85 c0		 test	 eax, eax
  00568	74 20		 je	 SHORT $LN45@z900_updat
  0056a	b8 08 00 00 00	 mov	 eax, 8
  0056f	48 6b c0 03	 imul	 rax, rax, 3
  00573	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0057b	48 8b 54 24 40	 mov	 rdx, QWORD PTR nodedata$[rsp]
  00580	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  00588	eb 1c		 jmp	 SHORT $LN46@z900_updat
$LN45@z900_updat:
  0058a	b8 08 00 00 00	 mov	 eax, 8
  0058f	48 6b c0 03	 imul	 rax, rax, 3
  00593	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0059b	8b 54 24 40	 mov	 edx, DWORD PTR nodedata$[rsp]
  0059f	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN46@z900_updat:
  005a6	33 c0		 xor	 eax, eax
  005a8	85 c0		 test	 eax, eax
  005aa	75 a9		 jne	 SHORT $LN22@z900_updat

; 2278 :             regs->psw.cc = 0;

  005ac	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005b4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2279 : #if defined( FEATURE_PER1 )
; 2280 :             rmask |= PER_GRA_MASK2( 2, 3 );
; 2281 :             PER_GRA_CHECK( regs, rmask );
; 2282 : #endif
; 2283 :             return;

  005b8	e9 c2 03 00 00	 jmp	 $LN1@z900_updat
$LN42@z900_updat:

; 2284 :         }
; 2285 : 
; 2286 :         /* Keep resequencing the tree's nodes, moving successively higher
; 2287 :            nodes to the front (beginning of tree)...
; 2288 :         */
; 2289 :         if ( nodecode < GR_A(0,regs) )

  005bd	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005c5	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  005cb	83 e0 01	 and	 eax, 1
  005ce	85 c0		 test	 eax, eax
  005d0	74 23		 je	 SHORT $LN75@z900_updat
  005d2	b8 08 00 00 00	 mov	 eax, 8
  005d7	48 6b c0 00	 imul	 rax, rax, 0
  005db	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005e3	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  005eb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv296[rsp], rax
  005f3	eb 20		 jmp	 SHORT $LN76@z900_updat
$LN75@z900_updat:
  005f5	b8 08 00 00 00	 mov	 eax, 8
  005fa	48 6b c0 00	 imul	 rax, rax, 0
  005fe	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00606	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0060d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv296[rsp], rax
$LN76@z900_updat:
  00615	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv296[rsp]
  0061d	48 39 44 24 30	 cmp	 QWORD PTR nodecode$[rsp], rax
  00622	73 05		 jae	 SHORT $LN47@z900_updat

; 2290 :             continue;

  00624	e9 d6 fb ff ff	 jmp	 $LN11@z900_updat
$LN47@z900_updat:

; 2291 : 
; 2292 :         /* This node has a codeword value higher than our currently saved
; 2293 :            highest encountered codeword value (GR0). Swap our GR0/1 values
; 2294 :            with this node's values, such that GR0/1 always hold the values
; 2295 :            from the node with the highest encountered codeword value...
; 2296 :         */
; 2297 : 
; 2298 :         /* Store obsolete GR0 and GR1 values into this node's entry */
; 2299 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2300 :         if ( a64 )

  00629	0f b6 44 24 20	 movzx	 eax, BYTE PTR a64$[rsp]
  0062e	85 c0		 test	 eax, eax
  00630	0f 84 23 01 00
	00		 je	 $LN48@z900_updat

; 2301 :         {
; 2302 :             ARCH_DEP(vstore8) ( GR_A(0,regs), (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  00636	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0063e	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00644	83 e0 01	 and	 eax, 1
  00647	85 c0		 test	 eax, eax
  00649	74 23		 je	 SHORT $LN77@z900_updat
  0064b	b8 08 00 00 00	 mov	 eax, 8
  00650	48 6b c0 00	 imul	 rax, rax, 0
  00654	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065c	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  00664	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv317[rsp], rax
  0066c	eb 20		 jmp	 SHORT $LN78@z900_updat
$LN77@z900_updat:
  0066e	b8 08 00 00 00	 mov	 eax, 8
  00673	48 6b c0 00	 imul	 rax, rax, 0
  00677	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0067f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00686	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv317[rsp], rax
$LN78@z900_updat:
  0068e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00696	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0069d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nodeaddr$[rsp]
  006a2	48 23 c8	 and	 rcx, rax
  006a5	48 8b c1	 mov	 rax, rcx
  006a8	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  006b0	41 b8 04 00 00
	00		 mov	 r8d, 4
  006b6	48 8b d0	 mov	 rdx, rax
  006b9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv317[rsp]
  006c1	e8 00 00 00 00	 call	 z900_vstore8

; 2303 :             ARCH_DEP(vstore8) ( GR_A(1,regs), (nodeaddr+8) & ADDRESS_MAXWRAP(regs), AR4, regs );

  006c6	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006ce	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  006d4	83 e0 01	 and	 eax, 1
  006d7	85 c0		 test	 eax, eax
  006d9	74 23		 je	 SHORT $LN79@z900_updat
  006db	b8 08 00 00 00	 mov	 eax, 8
  006e0	48 6b c0 01	 imul	 rax, rax, 1
  006e4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006ec	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  006f4	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv337[rsp], rax
  006fc	eb 20		 jmp	 SHORT $LN80@z900_updat
$LN79@z900_updat:
  006fe	b8 08 00 00 00	 mov	 eax, 8
  00703	48 6b c0 01	 imul	 rax, rax, 1
  00707	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0070f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00716	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv337[rsp], rax
$LN80@z900_updat:
  0071e	48 8b 44 24 28	 mov	 rax, QWORD PTR nodeaddr$[rsp]
  00723	48 83 c0 08	 add	 rax, 8
  00727	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0072f	48 23 81 90 00
	00 00		 and	 rax, QWORD PTR [rcx+144]
  00736	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0073e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00744	48 8b d0	 mov	 rdx, rax
  00747	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv337[rsp]
  0074f	e8 00 00 00 00	 call	 z900_vstore8

; 2304 :         }

  00754	e9 1c 01 00 00	 jmp	 $LN49@z900_updat
$LN48@z900_updat:

; 2305 :         else
; 2306 : #endif
; 2307 :         {
; 2308 :             ARCH_DEP(vstore4) ( GR_A(0,regs), (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  00759	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00761	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00767	83 e0 01	 and	 eax, 1
  0076a	85 c0		 test	 eax, eax
  0076c	74 23		 je	 SHORT $LN81@z900_updat
  0076e	b8 08 00 00 00	 mov	 eax, 8
  00773	48 6b c0 00	 imul	 rax, rax, 0
  00777	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0077f	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  00787	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv356[rsp], rax
  0078f	eb 20		 jmp	 SHORT $LN82@z900_updat
$LN81@z900_updat:
  00791	b8 08 00 00 00	 mov	 eax, 8
  00796	48 6b c0 00	 imul	 rax, rax, 0
  0079a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007a2	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  007a9	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv356[rsp], rax
$LN82@z900_updat:
  007b1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007b9	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  007c0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nodeaddr$[rsp]
  007c5	48 23 c8	 and	 rcx, rax
  007c8	48 8b c1	 mov	 rax, rcx
  007cb	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  007d3	41 b8 04 00 00
	00		 mov	 r8d, 4
  007d9	48 8b d0	 mov	 rdx, rax
  007dc	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv356[rsp]
  007e3	e8 00 00 00 00	 call	 z900_vstore4

; 2309 :             ARCH_DEP(vstore4) ( GR_A(1,regs), (nodeaddr+4) & ADDRESS_MAXWRAP(regs), AR4, regs );

  007e8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007f0	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  007f6	83 e0 01	 and	 eax, 1
  007f9	85 c0		 test	 eax, eax
  007fb	74 23		 je	 SHORT $LN83@z900_updat
  007fd	b8 08 00 00 00	 mov	 eax, 8
  00802	48 6b c0 01	 imul	 rax, rax, 1
  00806	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0080e	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  00816	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv377[rsp], rax
  0081e	eb 20		 jmp	 SHORT $LN84@z900_updat
$LN83@z900_updat:
  00820	b8 08 00 00 00	 mov	 eax, 8
  00825	48 6b c0 01	 imul	 rax, rax, 1
  00829	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00831	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00838	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv377[rsp], rax
$LN84@z900_updat:
  00840	48 8b 44 24 28	 mov	 rax, QWORD PTR nodeaddr$[rsp]
  00845	48 83 c0 04	 add	 rax, 4
  00849	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00851	48 23 81 90 00
	00 00		 and	 rax, QWORD PTR [rcx+144]
  00858	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00860	41 b8 04 00 00
	00		 mov	 r8d, 4
  00866	48 8b d0	 mov	 rdx, rax
  00869	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv377[rsp]
  00870	e8 00 00 00 00	 call	 z900_vstore4
$LN49@z900_updat:
$LN25@z900_updat:

; 2310 :         }
; 2311 : 
; 2312 :         /* Update GR0 and GR1 with the new "highest encountered" values */
; 2313 :         SET_GR_A(0,regs,nodecode);

  00875	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0087d	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00883	83 e0 01	 and	 eax, 1
  00886	85 c0		 test	 eax, eax
  00888	74 20		 je	 SHORT $LN50@z900_updat
  0088a	b8 08 00 00 00	 mov	 eax, 8
  0088f	48 6b c0 00	 imul	 rax, rax, 0
  00893	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0089b	48 8b 54 24 30	 mov	 rdx, QWORD PTR nodecode$[rsp]
  008a0	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  008a8	eb 1c		 jmp	 SHORT $LN51@z900_updat
$LN50@z900_updat:
  008aa	b8 08 00 00 00	 mov	 eax, 8
  008af	48 6b c0 00	 imul	 rax, rax, 0
  008b3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008bb	8b 54 24 30	 mov	 edx, DWORD PTR nodecode$[rsp]
  008bf	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN51@z900_updat:
  008c6	33 c0		 xor	 eax, eax
  008c8	85 c0		 test	 eax, eax
  008ca	75 a9		 jne	 SHORT $LN25@z900_updat
$LN28@z900_updat:

; 2314 :         SET_GR_A(1,regs,nodedata);

  008cc	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008d4	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  008da	83 e0 01	 and	 eax, 1
  008dd	85 c0		 test	 eax, eax
  008df	74 20		 je	 SHORT $LN52@z900_updat
  008e1	b8 08 00 00 00	 mov	 eax, 8
  008e6	48 6b c0 01	 imul	 rax, rax, 1
  008ea	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008f2	48 8b 54 24 40	 mov	 rdx, QWORD PTR nodedata$[rsp]
  008f7	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  008ff	eb 1c		 jmp	 SHORT $LN53@z900_updat
$LN52@z900_updat:
  00901	b8 08 00 00 00	 mov	 eax, 8
  00906	48 6b c0 01	 imul	 rax, rax, 1
  0090a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00912	8b 54 24 40	 mov	 edx, DWORD PTR nodedata$[rsp]
  00916	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN53@z900_updat:
  0091d	33 c0		 xor	 eax, eax
  0091f	85 c0		 test	 eax, eax
  00921	75 a9		 jne	 SHORT $LN28@z900_updat

; 2315 : #if defined( FEATURE_PER1 )
; 2316 :         rmask |= PER_GRA_MASK2( 0, 1 );
; 2317 : #endif
; 2318 :     }

  00923	e9 d7 f8 ff ff	 jmp	 $LN11@z900_updat
$LN12@z900_updat:
$LN31@z900_updat:

; 2319 : 
; 2320 :     /* Commit GR5 with the actual index value we stopped on */
; 2321 :     SET_GR_A(5,regs,index);

  00928	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00930	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00936	83 e0 01	 and	 eax, 1
  00939	85 c0		 test	 eax, eax
  0093b	74 20		 je	 SHORT $LN54@z900_updat
  0093d	b8 08 00 00 00	 mov	 eax, 8
  00942	48 6b c0 05	 imul	 rax, rax, 5
  00946	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0094e	48 8b 54 24 38	 mov	 rdx, QWORD PTR index$[rsp]
  00953	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  0095b	eb 1c		 jmp	 SHORT $LN55@z900_updat
$LN54@z900_updat:
  0095d	b8 08 00 00 00	 mov	 eax, 8
  00962	48 6b c0 05	 imul	 rax, rax, 5
  00966	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0096e	8b 54 24 38	 mov	 edx, DWORD PTR index$[rsp]
  00972	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN55@z900_updat:
  00979	33 c0		 xor	 eax, eax
  0097b	85 c0		 test	 eax, eax
  0097d	75 a9		 jne	 SHORT $LN31@z900_updat
$LN1@z900_updat:

; 2322 : 
; 2323 : #if defined( FEATURE_PER1 )
; 2324 :     /* Check for PER 1 GRA event */
; 2325 :     rmask |= PER_GRA_MASK( 5 );
; 2326 :     PER_GRA_CHECK( regs, rmask );
; 2327 : #endif
; 2328 : }

  0097f	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00986	c3		 ret	 0
z900_update_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 48
rbyte$ = 49
lbyte$ = 50
effective_addr1$ = 56
b1$ = 64
effective_addr2$ = 72
b2$ = 80
i$ = 84
temp$1 = 88
l1$ = 92
l2$ = 96
j$ = 100
tv200 = 104
inst$ = 128
regs$ = 136
z900_unpack PROC

; 2098 : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2099 : int     l1, l2;                         /* Register numbers          */
; 2100 : int     b1, b2;                         /* Base registers            */
; 2101 : VADR    effective_addr1,
; 2102 :         effective_addr2;                /* Effective addressES       */
; 2103 : int     i, j;                           /* Loop counters             */
; 2104 : BYTE    sbyte;                          /* Source operand byte       */
; 2105 : BYTE    rbyte;                          /* Right result byte of pair */
; 2106 : BYTE    lbyte;                          /* Left result byte of pair  */
; 2107 : 
; 2108 :     SS(inst, regs, l1, l2, b1, effective_addr1, b2, effective_addr2);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	8b c0		 mov	 eax, eax
  00038	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0003d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00041	c1 e8 0c	 shr	 eax, 12
  00044	83 e0 0f	 and	 eax, 15
  00047	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  0004b	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0004f	c1 e8 10	 shr	 eax, 16
  00052	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00057	8b c0		 mov	 eax, eax
  00059	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0005e	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00062	c1 e8 1c	 shr	 eax, 28
  00065	83 e0 0f	 and	 eax, 15
  00068	89 44 24 40	 mov	 DWORD PTR b1$[rsp], eax
  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00081	83 e0 0f	 and	 eax, 15
  00084	89 44 24 60	 mov	 DWORD PTR l2$[rsp], eax
  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00099	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009d	c1 f8 04	 sar	 eax, 4
  000a0	83 e0 0f	 and	 eax, 15
  000a3	89 44 24 5c	 mov	 DWORD PTR l1$[rsp], eax
  000a7	83 7c 24 40 00	 cmp	 DWORD PTR b1$[rsp], 0
  000ac	74 44		 je	 SHORT $LN11@z900_unpac
  000ae	48 63 44 24 40	 movsxd	 rax, DWORD PTR b1$[rsp]
  000b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
  000d3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000db	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000e7	48 23 c8	 and	 rcx, rax
  000ea	48 8b c1	 mov	 rax, rcx
  000ed	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN11@z900_unpac:
  000f2	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  000f7	74 44		 je	 SHORT $LN12@z900_unpac
  000f9	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000fe	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00106	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0010e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00113	48 03 c8	 add	 rcx, rax
  00116	48 8b c1	 mov	 rax, rcx
  00119	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0011e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00126	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0012d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00132	48 23 c8	 and	 rcx, rax
  00135	48 8b c1	 mov	 rax, rcx
  00138	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN12@z900_unpac:
$LN4@z900_unpac:
  0013d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00145	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00149	48 83 c0 06	 add	 rax, 6
  0014d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00155	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00159	33 c0		 xor	 eax, eax
  0015b	83 f8 06	 cmp	 eax, 6
  0015e	74 0f		 je	 SHORT $LN13@z900_unpac
  00160	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@z900_unpac:
  0016f	33 c0		 xor	 eax, eax
  00171	85 c0		 test	 eax, eax
  00173	75 c8		 jne	 SHORT $LN4@z900_unpac

; 2109 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );

  00175	44 8b 44 24 50	 mov	 r8d, DWORD PTR b2$[rsp]
  0017a	8b 54 24 40	 mov	 edx, DWORD PTR b1$[rsp]
  0017e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00186	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2
$LN7@z900_unpac:

; 2110 :     TXFC_INSTR_CHECK( regs );

  0018b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00193	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  0019a	85 c0		 test	 eax, eax
  0019c	74 3f		 je	 SHORT $LN14@z900_unpac
  0019e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a6	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  001ac	0f ba e8 0f	 bts	 eax, 15
  001b0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b8	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  001be	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG207046
  001c5	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001cb	ba 02 00 00 00	 mov	 edx, 2
  001d0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001d8	e8 00 00 00 00	 call	 z900_abort_transaction
$LN14@z900_unpac:
  001dd	33 c0		 xor	 eax, eax
  001df	85 c0		 test	 eax, eax
  001e1	75 a8		 jne	 SHORT $LN7@z900_unpac

; 2111 : 
; 2112 :     /* If operand 1 crosses a page, make sure both pages are accessible */
; 2113 :     if((effective_addr1 & PAGEFRAME_PAGEMASK) !=

  001e3	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  001e8	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  001ee	48 63 4c 24 5c	 movsxd	 rcx, DWORD PTR l1$[rsp]
  001f3	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  001f8	48 03 d1	 add	 rdx, rcx
  001fb	48 8b ca	 mov	 rcx, rdx
  001fe	48 81 e1 00 f0
	ff ff		 and	 rcx, -4096		; fffffffffffff000H
  00205	48 3b c1	 cmp	 rax, rcx
  00208	74 26		 je	 SHORT $LN15@z900_unpac

; 2114 :         ((effective_addr1 + l1) & PAGEFRAME_PAGEMASK))
; 2115 :         ARCH_DEP(validate_operand) (effective_addr1, b1, l1, ACCTYPE_WRITE_SKP, regs);

  0020a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00212	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00217	41 b9 01 00 00
	00		 mov	 r9d, 1
  0021d	44 8b 44 24 5c	 mov	 r8d, DWORD PTR l1$[rsp]
  00222	8b 54 24 40	 mov	 edx, DWORD PTR b1$[rsp]
  00226	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0022b	e8 00 00 00 00	 call	 z900_validate_operand
$LN15@z900_unpac:

; 2116 : 
; 2117 :     /* If operand 2 crosses a page, make sure both pages are accessible */
; 2118 :     if((effective_addr2 & PAGEFRAME_PAGEMASK) !=

  00230	48 8b 44 24 48	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  00235	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0023b	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR l2$[rsp]
  00240	48 8b 54 24 48	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  00245	48 03 d1	 add	 rdx, rcx
  00248	48 8b ca	 mov	 rcx, rdx
  0024b	48 81 e1 00 f0
	ff ff		 and	 rcx, -4096		; fffffffffffff000H
  00252	48 3b c1	 cmp	 rax, rcx
  00255	74 26		 je	 SHORT $LN16@z900_unpac

; 2119 :         ((effective_addr2 + l2) & PAGEFRAME_PAGEMASK))
; 2120 :         ARCH_DEP(validate_operand) (effective_addr2, b2, l2, ACCTYPE_READ, regs);

  00257	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0025f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00264	41 b9 04 00 00
	00		 mov	 r9d, 4
  0026a	44 8b 44 24 60	 mov	 r8d, DWORD PTR l2$[rsp]
  0026f	8b 54 24 50	 mov	 edx, DWORD PTR b2$[rsp]
  00273	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00278	e8 00 00 00 00	 call	 z900_validate_operand
$LN16@z900_unpac:

; 2121 : 
; 2122 :     /* Exchange the digits in the rightmost byte */
; 2123 :     effective_addr1 += l1;

  0027d	48 63 44 24 5c	 movsxd	 rax, DWORD PTR l1$[rsp]
  00282	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  00287	48 03 c8	 add	 rcx, rax
  0028a	48 8b c1	 mov	 rax, rcx
  0028d	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax

; 2124 :     effective_addr2 += l2;

  00292	48 63 44 24 60	 movsxd	 rax, DWORD PTR l2$[rsp]
  00297	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0029c	48 03 c8	 add	 rcx, rax
  0029f	48 8b c1	 mov	 rax, rcx
  002a2	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 2125 :     sbyte = ARCH_DEP(vfetchb) ( effective_addr2, b2, regs );

  002a7	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002af	8b 54 24 50	 mov	 edx, DWORD PTR b2$[rsp]
  002b3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  002b8	e8 00 00 00 00	 call	 z900_vfetchb
  002bd	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 2126 :     rbyte = ((sbyte << 4) | (sbyte >> 4)) & 0xff;

  002c1	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002c6	c1 e0 04	 shl	 eax, 4
  002c9	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR sbyte$[rsp]
  002ce	c1 f9 04	 sar	 ecx, 4
  002d1	0b c1		 or	 eax, ecx
  002d3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002d8	88 44 24 31	 mov	 BYTE PTR rbyte$[rsp], al

; 2127 :     ARCH_DEP(vstoreb) ( rbyte, effective_addr1, b1, regs );

  002dc	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002e4	44 8b 44 24 40	 mov	 r8d, DWORD PTR b1$[rsp]
  002e9	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  002ee	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR rbyte$[rsp]
  002f3	e8 00 00 00 00	 call	 z900_vstoreb

; 2128 : 
; 2129 :     /* Process remaining bytes from right to left */
; 2130 :     for (i = l1, j = l2; i > 0; i--)

  002f8	8b 44 24 5c	 mov	 eax, DWORD PTR l1$[rsp]
  002fc	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
  00300	8b 44 24 60	 mov	 eax, DWORD PTR l2$[rsp]
  00304	89 44 24 64	 mov	 DWORD PTR j$[rsp], eax
  00308	eb 0a		 jmp	 SHORT $LN10@z900_unpac
$LN8@z900_unpac:
  0030a	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  0030e	ff c8		 dec	 eax
  00310	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN10@z900_unpac:
  00314	83 7c 24 54 00	 cmp	 DWORD PTR i$[rsp], 0
  00319	0f 8e 33 01 00
	00		 jle	 $LN9@z900_unpac

; 2131 :     {
; 2132 :         /* Fetch source byte from second operand */
; 2133 :         if (j-- > 0)

  0031f	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  00323	89 44 24 68	 mov	 DWORD PTR tv200[rsp], eax
  00327	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  0032b	ff c8		 dec	 eax
  0032d	89 44 24 64	 mov	 DWORD PTR j$[rsp], eax
  00331	83 7c 24 68 00	 cmp	 DWORD PTR tv200[rsp], 0
  00336	7e 4b		 jle	 SHORT $LN17@z900_unpac

; 2134 :         {
; 2135 :             sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  00338	48 8b 44 24 48	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  0033d	48 ff c8	 dec	 rax
  00340	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00345	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0034d	8b 54 24 50	 mov	 edx, DWORD PTR b2$[rsp]
  00351	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00356	e8 00 00 00 00	 call	 z900_vfetchb
  0035b	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 2136 :             rbyte = (sbyte & 0x0F) | 0xF0;

  0035f	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  00364	83 e0 0f	 and	 eax, 15
  00367	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  0036c	88 44 24 31	 mov	 BYTE PTR rbyte$[rsp], al

; 2137 :             lbyte = (sbyte >> 4) | 0xF0;

  00370	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  00375	c1 f8 04	 sar	 eax, 4
  00378	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  0037d	88 44 24 32	 mov	 BYTE PTR lbyte$[rsp], al

; 2138 :         }

  00381	eb 0a		 jmp	 SHORT $LN18@z900_unpac
$LN17@z900_unpac:

; 2139 :         else
; 2140 :         {
; 2141 :             rbyte = 0xF0;

  00383	c6 44 24 31 f0	 mov	 BYTE PTR rbyte$[rsp], 240 ; 000000f0H

; 2142 :             lbyte = 0xF0;

  00388	c6 44 24 32 f0	 mov	 BYTE PTR lbyte$[rsp], 240 ; 000000f0H
$LN18@z900_unpac:

; 2143 :         }
; 2144 : 
; 2145 :         /* Store unpacked bytes at first operand address */
; 2146 :         ARCH_DEP(vstoreb) ( rbyte, --effective_addr1, b1, regs );

  0038d	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  00392	48 ff c8	 dec	 rax
  00395	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0039a	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003a2	44 8b 44 24 40	 mov	 r8d, DWORD PTR b1$[rsp]
  003a7	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  003ac	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR rbyte$[rsp]
  003b1	e8 00 00 00 00	 call	 z900_vstoreb

; 2147 :         if (--i > 0)

  003b6	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  003ba	ff c8		 dec	 eax
  003bc	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
  003c0	83 7c 24 54 00	 cmp	 DWORD PTR i$[rsp], 0
  003c5	7e 48		 jle	 SHORT $LN19@z900_unpac

; 2148 :         {
; 2149 :             effective_addr1 &= ADDRESS_MAXWRAP(regs);

  003c7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003cf	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  003d6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  003db	48 23 c8	 and	 rcx, rax
  003de	48 8b c1	 mov	 rax, rcx
  003e1	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax

; 2150 :             ARCH_DEP(vstoreb) ( lbyte, --effective_addr1, b1, regs );

  003e6	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  003eb	48 ff c8	 dec	 rax
  003ee	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
  003f3	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003fb	44 8b 44 24 40	 mov	 r8d, DWORD PTR b1$[rsp]
  00400	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  00405	0f b6 4c 24 32	 movzx	 ecx, BYTE PTR lbyte$[rsp]
  0040a	e8 00 00 00 00	 call	 z900_vstoreb
$LN19@z900_unpac:

; 2151 :         }
; 2152 : 
; 2153 :         /* Wraparound according to addressing mode */
; 2154 :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  0040f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00417	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0041e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  00423	48 23 c8	 and	 rcx, rax
  00426	48 8b c1	 mov	 rax, rcx
  00429	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax

; 2155 :         effective_addr2 &= ADDRESS_MAXWRAP(regs);

  0042e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00436	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0043d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00442	48 23 c8	 and	 rcx, rax
  00445	48 8b c1	 mov	 rax, rcx
  00448	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 2156 : 
; 2157 :     } /* end for(i) */

  0044d	e9 b8 fe ff ff	 jmp	 $LN8@z900_unpac
$LN9@z900_unpac:

; 2158 : 
; 2159 : }

  00452	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00456	c3		 ret	 0
z900_unpack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 0
i$ = 4
op2crosses$ = 8
op1crosses$ = 9
dbyte$ = 10
len$ = 12
effective_addr1$ = 16
b1$ = 24
b2$ = 28
temp$1 = 32
effective_addr2$ = 40
tv161 = 48
tv163 = 52
tv180 = 56
tv182 = 60
tv197 = 64
tv205 = 68
tv242 = 72
tv304 = 76
cc$ = 80
op1$ = 128
op2$ = 384
__$ArrayPad$ = 640
inst$ = 784
regs$ = 792
z900_translate_and_test PROC

; 1890 : {

$LN68:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 00 03
	00 00		 sub	 rsp, 768		; 00000300H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 80 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1891 : CACHE_ALIGN BYTE op1[256], op2[256];    /* Operand work areas        */
; 1892 : VADR    effective_addr1;                /* Effective address         */
; 1893 : VADR    effective_addr2;                /* Effective address         */
; 1894 : int     b1, b2;                         /* Base registers            */
; 1895 : int     len;                            /* Length - 1                */
; 1896 : int     i;                              /* work variable             */
; 1897 : int     cc = 0;                         /* Condition code            */

  0002c	c7 45 50 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 1898 : BYTE    dbyte, sbyte = 0;               /* Byte work areas           */

  00033	c6 45 00 00	 mov	 BYTE PTR sbyte$[rbp], 0

; 1899 : bool    op1crosses, op2crosses;         /* Operand crosses Page Bdy  */
; 1900 : 
; 1901 :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00037	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0003f	48 83 c0 02	 add	 rax, 2
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 fetch_fw_noswap
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 _byteswap_ulong
  00052	89 45 20	 mov	 DWORD PTR temp$1[rbp], eax
  00055	8b 45 20	 mov	 eax, DWORD PTR temp$1[rbp]
  00058	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005d	8b c0		 mov	 eax, eax
  0005f	48 89 45 28	 mov	 QWORD PTR effective_addr2$[rbp], rax
  00063	8b 45 20	 mov	 eax, DWORD PTR temp$1[rbp]
  00066	c1 e8 0c	 shr	 eax, 12
  00069	83 e0 0f	 and	 eax, 15
  0006c	89 45 1c	 mov	 DWORD PTR b2$[rbp], eax
  0006f	8b 45 20	 mov	 eax, DWORD PTR temp$1[rbp]
  00072	c1 e8 10	 shr	 eax, 16
  00075	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0007a	8b c0		 mov	 eax, eax
  0007c	48 89 45 10	 mov	 QWORD PTR effective_addr1$[rbp], rax
  00080	8b 45 20	 mov	 eax, DWORD PTR temp$1[rbp]
  00083	c1 e8 1c	 shr	 eax, 28
  00086	83 e0 0f	 and	 eax, 15
  00089	89 45 18	 mov	 DWORD PTR b1$[rbp], eax
  0008c	b8 01 00 00 00	 mov	 eax, 1
  00091	48 6b c0 01	 imul	 rax, rax, 1
  00095	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0009d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000a1	89 45 0c	 mov	 DWORD PTR len$[rbp], eax
  000a4	83 7d 18 00	 cmp	 DWORD PTR b1$[rbp], 0
  000a8	74 3f		 je	 SHORT $LN20@z900_trans
  000aa	48 63 45 18	 movsxd	 rax, DWORD PTR b1$[rbp]
  000ae	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b6	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000be	48 8b 4d 10	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  000c2	48 03 c8	 add	 rcx, rax
  000c5	48 8b c1	 mov	 rax, rcx
  000c8	48 89 45 10	 mov	 QWORD PTR effective_addr1$[rbp], rax
  000cc	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000db	48 8b 4d 10	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  000df	48 23 c8	 and	 rcx, rax
  000e2	48 8b c1	 mov	 rax, rcx
  000e5	48 89 45 10	 mov	 QWORD PTR effective_addr1$[rbp], rax
$LN20@z900_trans:
  000e9	83 7d 1c 00	 cmp	 DWORD PTR b2$[rbp], 0
  000ed	74 3f		 je	 SHORT $LN21@z900_trans
  000ef	48 63 45 1c	 movsxd	 rax, DWORD PTR b2$[rbp]
  000f3	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00103	48 8b 4d 28	 mov	 rcx, QWORD PTR effective_addr2$[rbp]
  00107	48 03 c8	 add	 rcx, rax
  0010a	48 8b c1	 mov	 rax, rcx
  0010d	48 89 45 28	 mov	 QWORD PTR effective_addr2$[rbp], rax
  00111	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00119	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00120	48 8b 4d 28	 mov	 rcx, QWORD PTR effective_addr2$[rbp]
  00124	48 23 c8	 and	 rcx, rax
  00127	48 8b c1	 mov	 rax, rcx
  0012a	48 89 45 28	 mov	 QWORD PTR effective_addr2$[rbp], rax
$LN21@z900_trans:
$LN4@z900_trans:
  0012e	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00136	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0013a	48 83 c0 06	 add	 rax, 6
  0013e	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00146	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0014a	33 c0		 xor	 eax, eax
  0014c	83 f8 06	 cmp	 eax, 6
  0014f	74 0f		 je	 SHORT $LN22@z900_trans
  00151	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00159	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN22@z900_trans:
  00160	33 c0		 xor	 eax, eax
  00162	85 c0		 test	 eax, eax
  00164	75 c8		 jne	 SHORT $LN4@z900_trans

; 1902 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );

  00166	44 8b 45 1c	 mov	 r8d, DWORD PTR b2$[rbp]
  0016a	8b 55 18	 mov	 edx, DWORD PTR b1$[rbp]
  0016d	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00175	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2
$LN7@z900_trans:

; 1903 : 
; 1904 :     TXFC_INSTR_CHECK( regs );

  0017a	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00182	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  00189	85 c0		 test	 eax, eax
  0018b	74 3f		 je	 SHORT $LN23@z900_trans
  0018d	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00195	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  0019b	0f ba e8 0f	 bts	 eax, 15
  0019f	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001a7	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  001ad	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206953
  001b4	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001ba	ba 02 00 00 00	 mov	 edx, 2
  001bf	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001c7	e8 00 00 00 00	 call	 z900_abort_transaction
$LN23@z900_trans:
  001cc	33 c0		 xor	 eax, eax
  001ce	85 c0		 test	 eax, eax
  001d0	75 a8		 jne	 SHORT $LN7@z900_trans

; 1905 : 
; 1906 :     /* Copy operand-1 data to work area if within same page */
; 1907 :     if (!(op1crosses = CROSSPAGE( effective_addr1, len )))

  001d2	48 8b 45 10	 mov	 rax, QWORD PTR effective_addr1$[rbp]
  001d6	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  001dc	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  001e1	2b 4d 0c	 sub	 ecx, DWORD PTR len$[rbp]
  001e4	3b c1		 cmp	 eax, ecx
  001e6	7e 09		 jle	 SHORT $LN44@z900_trans
  001e8	c7 45 30 01 00
	00 00		 mov	 DWORD PTR tv161[rbp], 1
  001ef	eb 07		 jmp	 SHORT $LN45@z900_trans
$LN44@z900_trans:
  001f1	c7 45 30 00 00
	00 00		 mov	 DWORD PTR tv161[rbp], 0
$LN45@z900_trans:
  001f8	83 7d 30 00	 cmp	 DWORD PTR tv161[rbp], 0
  001fc	75 09		 jne	 SHORT $LN46@z900_trans
  001fe	c7 45 34 00 00
	00 00		 mov	 DWORD PTR tv163[rbp], 0
  00205	eb 07		 jmp	 SHORT $LN47@z900_trans
$LN46@z900_trans:
  00207	c7 45 34 01 00
	00 00		 mov	 DWORD PTR tv163[rbp], 1
$LN47@z900_trans:
  0020e	0f b6 45 34	 movzx	 eax, BYTE PTR tv163[rbp]
  00212	88 45 09	 mov	 BYTE PTR op1crosses$[rbp], al
  00215	0f b6 45 09	 movzx	 eax, BYTE PTR op1crosses$[rbp]
  00219	85 c0		 test	 eax, eax
  0021b	75 25		 jne	 SHORT $LN24@z900_trans

; 1908 :         ARCH_DEP( vfetchc )( op1, len, effective_addr1, b1, regs );

  0021d	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00225	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022a	44 8b 4d 18	 mov	 r9d, DWORD PTR b1$[rbp]
  0022e	4c 8b 45 10	 mov	 r8, QWORD PTR effective_addr1$[rbp]
  00232	0f b6 55 0c	 movzx	 edx, BYTE PTR len$[rbp]
  00236	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR op1$[rbp]
  0023d	e8 00 00 00 00	 call	 z900_vfetchc
$LN24@z900_trans:

; 1909 : 
; 1910 :     /* Copy operand-2 data to work area if within same page */
; 1911 :     if (!(op2crosses = CROSSPAGE( effective_addr2, 256-1 )))

  00242	48 8b 45 28	 mov	 rax, QWORD PTR effective_addr2$[rbp]
  00246	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0024c	3d 00 0f 00 00	 cmp	 eax, 3840		; 00000f00H
  00251	7e 09		 jle	 SHORT $LN50@z900_trans
  00253	c7 45 38 01 00
	00 00		 mov	 DWORD PTR tv180[rbp], 1
  0025a	eb 07		 jmp	 SHORT $LN51@z900_trans
$LN50@z900_trans:
  0025c	c7 45 38 00 00
	00 00		 mov	 DWORD PTR tv180[rbp], 0
$LN51@z900_trans:
  00263	83 7d 38 00	 cmp	 DWORD PTR tv180[rbp], 0
  00267	75 09		 jne	 SHORT $LN52@z900_trans
  00269	c7 45 3c 00 00
	00 00		 mov	 DWORD PTR tv182[rbp], 0
  00270	eb 07		 jmp	 SHORT $LN53@z900_trans
$LN52@z900_trans:
  00272	c7 45 3c 01 00
	00 00		 mov	 DWORD PTR tv182[rbp], 1
$LN53@z900_trans:
  00279	0f b6 45 3c	 movzx	 eax, BYTE PTR tv182[rbp]
  0027d	88 45 08	 mov	 BYTE PTR op2crosses$[rbp], al
  00280	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  00284	85 c0		 test	 eax, eax
  00286	75 23		 jne	 SHORT $LN25@z900_trans

; 1912 :         ARCH_DEP( vfetchc )( op2, 256-1, effective_addr2, b2, regs );

  00288	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00290	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00295	44 8b 4d 1c	 mov	 r9d, DWORD PTR b2$[rbp]
  00299	4c 8b 45 28	 mov	 r8, QWORD PTR effective_addr2$[rbp]
  0029d	b2 ff		 mov	 dl, 255			; 000000ffH
  0029f	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR op2$[rbp]
  002a6	e8 00 00 00 00	 call	 z900_vfetchc
$LN25@z900_trans:

; 1913 : 
; 1914 :     /* Process first operand from left to right */
; 1915 :     if (unlikely( op1crosses ))

  002ab	0f b6 45 09	 movzx	 eax, BYTE PTR op1crosses$[rbp]
  002af	85 c0		 test	 eax, eax
  002b1	74 09		 je	 SHORT $LN56@z900_trans
  002b3	c7 45 40 01 00
	00 00		 mov	 DWORD PTR tv197[rbp], 1
  002ba	eb 07		 jmp	 SHORT $LN57@z900_trans
$LN56@z900_trans:
  002bc	c7 45 40 00 00
	00 00		 mov	 DWORD PTR tv197[rbp], 0
$LN57@z900_trans:
  002c3	83 7d 40 00	 cmp	 DWORD PTR tv197[rbp], 0
  002c7	0f 84 e6 00 00
	00		 je	 $LN26@z900_trans

; 1916 :     {
; 1917 :         /* Operand-1 crosses a page boundary */
; 1918 :         if (unlikely( op2crosses ))

  002cd	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  002d1	85 c0		 test	 eax, eax
  002d3	74 09		 je	 SHORT $LN60@z900_trans
  002d5	c7 45 44 01 00
	00 00		 mov	 DWORD PTR tv205[rbp], 1
  002dc	eb 07		 jmp	 SHORT $LN61@z900_trans
$LN60@z900_trans:
  002de	c7 45 44 00 00
	00 00		 mov	 DWORD PTR tv205[rbp], 0
$LN61@z900_trans:
  002e5	83 7d 44 00	 cmp	 DWORD PTR tv205[rbp], 0
  002e9	74 6f		 je	 SHORT $LN28@z900_trans

; 1919 :         {
; 1920 :             /* WORST case: BOTH operands cross a page boundary */
; 1921 :             for (i=0; i <= len; i++)

  002eb	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  002f2	eb 08		 jmp	 SHORT $LN10@z900_trans
$LN8@z900_trans:
  002f4	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  002f7	ff c0		 inc	 eax
  002f9	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN10@z900_trans:
  002fc	8b 45 0c	 mov	 eax, DWORD PTR len$[rbp]
  002ff	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00302	7f 54		 jg	 SHORT $LN9@z900_trans

; 1922 :             {
; 1923 :                 dbyte = ARCH_DEP( vfetchb )( effective_addr1+i, b1, regs );

  00304	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00308	48 8b 4d 10	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  0030c	48 03 c8	 add	 rcx, rax
  0030f	48 8b c1	 mov	 rax, rcx
  00312	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0031a	8b 55 18	 mov	 edx, DWORD PTR b1$[rbp]
  0031d	48 8b c8	 mov	 rcx, rax
  00320	e8 00 00 00 00	 call	 z900_vfetchb
  00325	88 45 0a	 mov	 BYTE PTR dbyte$[rbp], al

; 1924 :                 if ((sbyte = ARCH_DEP( vfetchb )( effective_addr2+dbyte, b2, regs )))

  00328	0f b6 45 0a	 movzx	 eax, BYTE PTR dbyte$[rbp]
  0032c	48 8b 4d 28	 mov	 rcx, QWORD PTR effective_addr2$[rbp]
  00330	48 03 c8	 add	 rcx, rax
  00333	48 8b c1	 mov	 rax, rcx
  00336	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0033e	8b 55 1c	 mov	 edx, DWORD PTR b2$[rbp]
  00341	48 8b c8	 mov	 rcx, rax
  00344	e8 00 00 00 00	 call	 z900_vfetchb
  00349	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  0034c	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  00350	85 c0		 test	 eax, eax
  00352	74 02		 je	 SHORT $LN30@z900_trans

; 1925 :                     break;

  00354	eb 02		 jmp	 SHORT $LN9@z900_trans
$LN30@z900_trans:

; 1926 :             }

  00356	eb 9c		 jmp	 SHORT $LN8@z900_trans
$LN9@z900_trans:

; 1927 :         }

  00358	eb 54		 jmp	 SHORT $LN29@z900_trans
$LN28@z900_trans:

; 1928 :         else /* Only operand-1 crosses a page boundary */
; 1929 :         {
; 1930 :             for (i=0; i <= len; i++)

  0035a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00361	eb 08		 jmp	 SHORT $LN13@z900_trans
$LN11@z900_trans:
  00363	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00366	ff c0		 inc	 eax
  00368	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN13@z900_trans:
  0036b	8b 45 0c	 mov	 eax, DWORD PTR len$[rbp]
  0036e	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00371	7f 3b		 jg	 SHORT $LN12@z900_trans

; 1931 :                 if ((sbyte = op2[ ARCH_DEP( vfetchb )( effective_addr1+i, b1, regs ) ]))

  00373	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00377	48 8b 4d 10	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  0037b	48 03 c8	 add	 rcx, rax
  0037e	48 8b c1	 mov	 rax, rcx
  00381	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00389	8b 55 18	 mov	 edx, DWORD PTR b1$[rbp]
  0038c	48 8b c8	 mov	 rcx, rax
  0038f	e8 00 00 00 00	 call	 z900_vfetchb
  00394	0f b6 c0	 movzx	 eax, al
  00397	0f b6 84 05 80
	01 00 00	 movzx	 eax, BYTE PTR op2$[rbp+rax]
  0039f	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  003a2	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  003a6	85 c0		 test	 eax, eax
  003a8	74 02		 je	 SHORT $LN31@z900_trans

; 1932 :                     break;

  003aa	eb 02		 jmp	 SHORT $LN12@z900_trans
$LN31@z900_trans:
  003ac	eb b5		 jmp	 SHORT $LN11@z900_trans
$LN12@z900_trans:
$LN29@z900_trans:

; 1933 :         }
; 1934 :     }

  003ae	e9 ad 00 00 00	 jmp	 $LN27@z900_trans
$LN26@z900_trans:

; 1935 :     else /* Operand-1 does NOT cross a page boundary */
; 1936 :     {
; 1937 :        if (unlikely( op2crosses ))

  003b3	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  003b7	85 c0		 test	 eax, eax
  003b9	74 09		 je	 SHORT $LN64@z900_trans
  003bb	c7 45 48 01 00
	00 00		 mov	 DWORD PTR tv242[rbp], 1
  003c2	eb 07		 jmp	 SHORT $LN65@z900_trans
$LN64@z900_trans:
  003c4	c7 45 48 00 00
	00 00		 mov	 DWORD PTR tv242[rbp], 0
$LN65@z900_trans:
  003cb	83 7d 48 00	 cmp	 DWORD PTR tv242[rbp], 0
  003cf	74 53		 je	 SHORT $LN32@z900_trans

; 1938 :        {
; 1939 :             /* But operand-2 DOES cross a page boundary */
; 1940 :             for (i=0; i <= len; i++)

  003d1	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  003d8	eb 08		 jmp	 SHORT $LN16@z900_trans
$LN14@z900_trans:
  003da	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  003dd	ff c0		 inc	 eax
  003df	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN16@z900_trans:
  003e2	8b 45 0c	 mov	 eax, DWORD PTR len$[rbp]
  003e5	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  003e8	7f 38		 jg	 SHORT $LN15@z900_trans

; 1941 :                 if ((sbyte = ARCH_DEP( vfetchb )( effective_addr2+op1[i], b2, regs )))

  003ea	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  003ee	0f b6 84 05 80
	00 00 00	 movzx	 eax, BYTE PTR op1$[rbp+rax]
  003f6	48 8b 4d 28	 mov	 rcx, QWORD PTR effective_addr2$[rbp]
  003fa	48 03 c8	 add	 rcx, rax
  003fd	48 8b c1	 mov	 rax, rcx
  00400	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00408	8b 55 1c	 mov	 edx, DWORD PTR b2$[rbp]
  0040b	48 8b c8	 mov	 rcx, rax
  0040e	e8 00 00 00 00	 call	 z900_vfetchb
  00413	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  00416	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  0041a	85 c0		 test	 eax, eax
  0041c	74 02		 je	 SHORT $LN34@z900_trans

; 1942 :                     break;

  0041e	eb 02		 jmp	 SHORT $LN15@z900_trans
$LN34@z900_trans:
  00420	eb b8		 jmp	 SHORT $LN14@z900_trans
$LN15@z900_trans:

; 1943 :        }

  00422	eb 3c		 jmp	 SHORT $LN33@z900_trans
$LN32@z900_trans:

; 1944 :        else /* BEST case: NEITHER operand crosses a page boundary */
; 1945 :        {
; 1946 :             for (i=0; i <= len; i++)

  00424	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0042b	eb 08		 jmp	 SHORT $LN19@z900_trans
$LN17@z900_trans:
  0042d	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00430	ff c0		 inc	 eax
  00432	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN19@z900_trans:
  00435	8b 45 0c	 mov	 eax, DWORD PTR len$[rbp]
  00438	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0043b	7f 23		 jg	 SHORT $LN18@z900_trans

; 1947 :                 if ((sbyte = op2[ op1[i] ]))

  0043d	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00441	0f b6 84 05 80
	00 00 00	 movzx	 eax, BYTE PTR op1$[rbp+rax]
  00449	0f b6 84 05 80
	01 00 00	 movzx	 eax, BYTE PTR op2$[rbp+rax]
  00451	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  00454	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  00458	85 c0		 test	 eax, eax
  0045a	74 02		 je	 SHORT $LN35@z900_trans

; 1948 :                     break;

  0045c	eb 02		 jmp	 SHORT $LN18@z900_trans
$LN35@z900_trans:
  0045e	eb cd		 jmp	 SHORT $LN17@z900_trans
$LN18@z900_trans:
$LN33@z900_trans:
$LN27@z900_trans:

; 1949 :        }
; 1950 :     }
; 1951 : 
; 1952 :     /* Test for non-zero function byte */
; 1953 :     if (sbyte != 0)

  00460	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  00464	85 c0		 test	 eax, eax
  00466	0f 84 11 01 00
	00		 je	 $LN36@z900_trans

; 1954 :     {
; 1955 :         effective_addr1 += i;

  0046c	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00470	48 8b 4d 10	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  00474	48 03 c8	 add	 rcx, rax
  00477	48 8b c1	 mov	 rax, rcx
  0047a	48 89 45 10	 mov	 QWORD PTR effective_addr1$[rbp], rax

; 1956 :         effective_addr1 &= ADDRESS_MAXWRAP( regs );

  0047e	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00486	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0048d	48 8b 4d 10	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  00491	48 23 c8	 and	 rcx, rax
  00494	48 8b c1	 mov	 rax, rcx
  00497	48 89 45 10	 mov	 QWORD PTR effective_addr1$[rbp], rax

; 1957 : 
; 1958 :         /* Store address of argument byte in register 1 */
; 1959 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 1960 :         if (regs->psw.amode64)

  0049b	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004a3	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  004a9	83 e0 01	 and	 eax, 1
  004ac	85 c0		 test	 eax, eax
  004ae	74 1f		 je	 SHORT $LN37@z900_trans

; 1961 :             regs->GR_G(1) = effective_addr1;

  004b0	b8 08 00 00 00	 mov	 eax, 8
  004b5	48 6b c0 01	 imul	 rax, rax, 1
  004b9	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004c1	48 8b 55 10	 mov	 rdx, QWORD PTR effective_addr1$[rbp]
  004c5	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  004cd	eb 74		 jmp	 SHORT $LN38@z900_trans
$LN37@z900_trans:

; 1962 :         else
; 1963 : #endif
; 1964 :         if (regs->psw.amode)

  004cf	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004d7	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  004dd	d1 e8		 shr	 eax, 1
  004df	83 e0 01	 and	 eax, 1
  004e2	85 c0		 test	 eax, eax
  004e4	74 1d		 je	 SHORT $LN39@z900_trans

; 1965 :             regs->GR_L(1) = effective_addr1;

  004e6	b8 08 00 00 00	 mov	 eax, 8
  004eb	48 6b c0 01	 imul	 rax, rax, 1
  004ef	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004f7	8b 55 10	 mov	 edx, DWORD PTR effective_addr1$[rbp]
  004fa	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
  00501	eb 40		 jmp	 SHORT $LN40@z900_trans
$LN39@z900_trans:

; 1966 :         else
; 1967 :             regs->GR_LA24(1) = effective_addr1;

  00503	b8 08 00 00 00	 mov	 eax, 8
  00508	48 6b c0 01	 imul	 rax, rax, 1
  0050c	8b 4d 10	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  0050f	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00515	48 8b 94 24 18
	03 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0051d	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  00524	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00529	0b c1		 or	 eax, ecx
  0052b	b9 08 00 00 00	 mov	 ecx, 8
  00530	48 6b c9 01	 imul	 rcx, rcx, 1
  00534	48 8b 94 24 18
	03 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0053c	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN40@z900_trans:
$LN38@z900_trans:

; 1968 : 
; 1969 :         /* Store function byte in low-order byte of reg.2 */
; 1970 :         regs->GR_LHLCL(2) = sbyte;

  00543	b8 08 00 00 00	 mov	 eax, 8
  00548	48 6b c0 02	 imul	 rax, rax, 2
  0054c	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00554	0f b6 55 00	 movzx	 edx, BYTE PTR sbyte$[rbp]
  00558	88 94 01 80 02
	00 00		 mov	 BYTE PTR [rcx+rax+640], dl

; 1971 : 
; 1972 :         /* Set condition code 2 if argument byte was last byte
; 1973 :            of first operand, otherwise set condition code 1 */
; 1974 :         cc = (i == len) ? 2 : 1;

  0055f	8b 45 0c	 mov	 eax, DWORD PTR len$[rbp]
  00562	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00565	75 09		 jne	 SHORT $LN66@z900_trans
  00567	c7 45 4c 02 00
	00 00		 mov	 DWORD PTR tv304[rbp], 2
  0056e	eb 07		 jmp	 SHORT $LN67@z900_trans
$LN66@z900_trans:
  00570	c7 45 4c 01 00
	00 00		 mov	 DWORD PTR tv304[rbp], 1
$LN67@z900_trans:
  00577	8b 45 4c	 mov	 eax, DWORD PTR tv304[rbp]
  0057a	89 45 50	 mov	 DWORD PTR cc$[rbp], eax
$LN36@z900_trans:

; 1975 :     }
; 1976 : 
; 1977 :     /* Update the condition code */
; 1978 :     regs->psw.cc = cc;

  0057d	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00585	0f b6 4d 50	 movzx	 ecx, BYTE PTR cc$[rbp]
  00589	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1979 : 
; 1980 : #if defined( FEATURE_PER1 )
; 1981 :     /* Check for PER 1 GRA event */
; 1982 :     if (sbyte != 0) // were GR1 and GR2 modified?
; 1983 :         PER_GRA_CHECK( regs, PER_GRA_MASK2( 1, 2 ));
; 1984 : #endif
; 1985 : }

  0058c	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00593	48 33 cc	 xor	 rcx, rsp
  00596	e8 00 00 00 00	 call	 __security_check_cookie
  0059b	48 81 c4 00 03
	00 00		 add	 rsp, 768		; 00000300H
  005a2	5d		 pop	 rbp
  005a3	c3		 ret	 0
z900_translate_and_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
n$ = 52
b$ = 56
len$ = 60
b2$ = 64
len2$ = 68
b1$ = 72
effective_addr2$ = 80
temp$1 = 88
dest$ = 96
dest2$ = 104
effective_addr1$ = 112
tab$ = 120
tv171 = 128
tv200 = 132
tv343 = 136
tv371 = 140
tab2$ = 144
tv277 = 152
tv316 = 160
inst$ = 192
regs$ = 200
z900_translate PROC

; 1817 : {

$LN58:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1818 : int     len, len2 = -1;                 /* Lengths                   */

  00011	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR len2$[rsp], -1

; 1819 : int     b1, b2;                         /* Values of base field      */
; 1820 : int     i, b, n;                        /* Work variables            */
; 1821 : VADR    effective_addr1;                /* Effective address         */
; 1822 : VADR    effective_addr2;                /* Effective address         */
; 1823 : BYTE   *dest, *dest2 = NULL, *tab, *tab2; /* Mainstor pointers       */

  00019	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR dest2$[rsp], 0

; 1824 : 
; 1825 :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00022	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002a	48 83 c0 02	 add	 rax, 2
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 fetch_fw_noswap
  00036	8b c8		 mov	 ecx, eax
  00038	e8 00 00 00 00	 call	 _byteswap_ulong
  0003d	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  00041	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004a	8b c0		 mov	 eax, eax
  0004c	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00051	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00055	c1 e8 0c	 shr	 eax, 12
  00058	83 e0 0f	 and	 eax, 15
  0005b	89 44 24 40	 mov	 DWORD PTR b2$[rsp], eax
  0005f	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00063	c1 e8 10	 shr	 eax, 16
  00066	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0006b	8b c0		 mov	 eax, eax
  0006d	48 89 44 24 70	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00072	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00076	c1 e8 1c	 shr	 eax, 28
  00079	83 e0 0f	 and	 eax, 15
  0007c	89 44 24 48	 mov	 DWORD PTR b1$[rsp], eax
  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	48 6b c0 01	 imul	 rax, rax, 1
  00089	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00091	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00095	89 44 24 3c	 mov	 DWORD PTR len$[rsp], eax
  00099	83 7c 24 48 00	 cmp	 DWORD PTR b1$[rsp], 0
  0009e	74 44		 je	 SHORT $LN32@z900_trans
  000a0	48 63 44 24 48	 movsxd	 rax, DWORD PTR b1$[rsp]
  000a5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ad	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000b5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000ba	48 03 c8	 add	 rcx, rax
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	48 89 44 24 70	 mov	 QWORD PTR effective_addr1$[rsp], rax
  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000cd	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000d4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000d9	48 23 c8	 and	 rcx, rax
  000dc	48 8b c1	 mov	 rax, rcx
  000df	48 89 44 24 70	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN32@z900_trans:
  000e4	83 7c 24 40 00	 cmp	 DWORD PTR b2$[rsp], 0
  000e9	74 44		 je	 SHORT $LN33@z900_trans
  000eb	48 63 44 24 40	 movsxd	 rax, DWORD PTR b2$[rsp]
  000f0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f8	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00100	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00105	48 03 c8	 add	 rcx, rax
  00108	48 8b c1	 mov	 rax, rcx
  0010b	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00110	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00118	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0011f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00124	48 23 c8	 and	 rcx, rax
  00127	48 8b c1	 mov	 rax, rcx
  0012a	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN33@z900_trans:
$LN4@z900_trans:
  0012f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00137	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0013b	48 83 c0 06	 add	 rax, 6
  0013f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00147	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0014b	33 c0		 xor	 eax, eax
  0014d	83 f8 06	 cmp	 eax, 6
  00150	74 0f		 je	 SHORT $LN34@z900_trans
  00152	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0015a	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN34@z900_trans:
  00161	33 c0		 xor	 eax, eax
  00163	85 c0		 test	 eax, eax
  00165	75 c8		 jne	 SHORT $LN4@z900_trans

; 1826 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );

  00167	44 8b 44 24 40	 mov	 r8d, DWORD PTR b2$[rsp]
  0016c	8b 54 24 48	 mov	 edx, DWORD PTR b1$[rsp]
  00170	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00178	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2
$LN7@z900_trans:

; 1827 : 
; 1828 :     TXFC_INSTR_CHECK( regs );

  0017d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00185	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  0018c	85 c0		 test	 eax, eax
  0018e	74 3f		 je	 SHORT $LN35@z900_trans
  00190	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00198	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  0019e	0f ba e8 0f	 bts	 eax, 15
  001a2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001aa	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  001b0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206898
  001b7	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001bd	ba 02 00 00 00	 mov	 edx, 2
  001c2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001ca	e8 00 00 00 00	 call	 z900_abort_transaction
$LN35@z900_trans:
  001cf	33 c0		 xor	 eax, eax
  001d1	85 c0		 test	 eax, eax
  001d3	75 a8		 jne	 SHORT $LN7@z900_trans

; 1829 : 
; 1830 :     /* Get destination pointer */
; 1831 :     dest = MADDRL( effective_addr1, len+1, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  001d5	8b 44 24 3c	 mov	 eax, DWORD PTR len$[rsp]
  001d9	ff c0		 inc	 eax
  001db	48 98		 cdqe
  001dd	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001e5	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  001e9	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001ed	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001f5	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001fd	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  00202	48 8b d0	 mov	 rdx, rax
  00205	48 8b 4c 24 70	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0020a	e8 00 00 00 00	 call	 z900_maddr_l
  0020f	48 89 44 24 60	 mov	 QWORD PTR dest$[rsp], rax

; 1832 : 
; 1833 :     /* Get pointer to next page if destination crosses a boundary */
; 1834 :     if (CROSSPAGE( effective_addr1, len ))

  00214	48 8b 44 24 70	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  00219	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0021f	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  00224	2b 4c 24 3c	 sub	 ecx, DWORD PTR len$[rsp]
  00228	3b c1		 cmp	 eax, ecx
  0022a	7e 0d		 jle	 SHORT $LN44@z900_trans
  0022c	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv171[rsp], 1
  00237	eb 0b		 jmp	 SHORT $LN45@z900_trans
$LN44@z900_trans:
  00239	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv171[rsp], 0
$LN45@z900_trans:
  00244	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv171[rsp], 0
  0024c	0f 84 89 00 00
	00		 je	 $LN36@z900_trans

; 1835 :     {
; 1836 :         len2 = len;

  00252	8b 44 24 3c	 mov	 eax, DWORD PTR len$[rsp]
  00256	89 44 24 44	 mov	 DWORD PTR len2$[rsp], eax

; 1837 :         len = PAGEFRAME_BYTEMASK - (effective_addr1 & PAGEFRAME_BYTEMASK);

  0025a	48 8b 44 24 70	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  0025f	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00265	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  0026a	48 2b c8	 sub	 rcx, rax
  0026d	48 8b c1	 mov	 rax, rcx
  00270	89 44 24 3c	 mov	 DWORD PTR len$[rsp], eax

; 1838 :         len2 -= (len + 1);

  00274	8b 44 24 3c	 mov	 eax, DWORD PTR len$[rsp]
  00278	ff c0		 inc	 eax
  0027a	8b 4c 24 44	 mov	 ecx, DWORD PTR len2$[rsp]
  0027e	2b c8		 sub	 ecx, eax
  00280	8b c1		 mov	 eax, ecx
  00282	89 44 24 44	 mov	 DWORD PTR len2$[rsp], eax

; 1839 :         dest2 = MADDRL((effective_addr1+len+1) & ADDRESS_MAXWRAP( regs ),

  00286	48 63 44 24 44	 movsxd	 rax, DWORD PTR len2$[rsp]
  0028b	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR len$[rsp]
  00290	48 8b 54 24 70	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  00295	48 8d 4c 0a 01	 lea	 rcx, QWORD PTR [rdx+rcx+1]
  0029a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002a2	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  002a9	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002b1	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  002b5	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  002b9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002c1	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002c9	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  002ce	48 8b d0	 mov	 rdx, rax
  002d1	e8 00 00 00 00	 call	 z900_maddr_l
  002d6	48 89 44 24 68	 mov	 QWORD PTR dest2$[rsp], rax
$LN36@z900_trans:

; 1840 :                   len2, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );
; 1841 :     }
; 1842 : 
; 1843 :     /* Fast path if table does not cross a boundary */
; 1844 :     if (NOCROSSPAGE( effective_addr2, 255 ))

  002db	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  002e0	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  002e6	3d 00 0f 00 00	 cmp	 eax, 3840		; 00000f00H
  002eb	7f 0d		 jg	 SHORT $LN48@z900_trans
  002ed	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv200[rsp], 1
  002f8	eb 0b		 jmp	 SHORT $LN49@z900_trans
$LN48@z900_trans:
  002fa	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv200[rsp], 0
$LN49@z900_trans:
  00305	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR tv200[rsp], 0
  0030d	0f 84 c8 00 00
	00		 je	 $LN37@z900_trans

; 1845 :     {
; 1846 :         tab = MADDRL(effective_addr2, 256, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  00313	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0031b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0031f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00323	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0032b	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00333	44 8b 44 24 40	 mov	 r8d, DWORD PTR b2$[rsp]
  00338	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0033d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00342	e8 00 00 00 00	 call	 z900_maddr_l
  00347	48 89 44 24 78	 mov	 QWORD PTR tab$[rsp], rax

; 1847 :         /* Perform translate function */
; 1848 :         for (i=0; i <= len;  i++) dest [i] = tab[dest [i]];

  0034c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00354	eb 0a		 jmp	 SHORT $LN10@z900_trans
$LN8@z900_trans:
  00356	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0035a	ff c0		 inc	 eax
  0035c	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN10@z900_trans:
  00360	8b 44 24 3c	 mov	 eax, DWORD PTR len$[rsp]
  00364	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00368	7f 27		 jg	 SHORT $LN9@z900_trans
  0036a	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0036f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  00374	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00378	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  0037d	48 8b 54 24 60	 mov	 rdx, QWORD PTR dest$[rsp]
  00382	4c 8b 44 24 78	 mov	 r8, QWORD PTR tab$[rsp]
  00387	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  0038c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0038f	eb c5		 jmp	 SHORT $LN8@z900_trans
$LN9@z900_trans:

; 1849 :         for (i=0; i <= len2; i++) dest2[i] = tab[dest2[i]];

  00391	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00399	eb 0a		 jmp	 SHORT $LN13@z900_trans
$LN11@z900_trans:
  0039b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0039f	ff c0		 inc	 eax
  003a1	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@z900_trans:
  003a5	8b 44 24 44	 mov	 eax, DWORD PTR len2$[rsp]
  003a9	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  003ad	7f 27		 jg	 SHORT $LN12@z900_trans
  003af	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  003b4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest2$[rsp]
  003b9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003bd	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  003c2	48 8b 54 24 68	 mov	 rdx, QWORD PTR dest2$[rsp]
  003c7	4c 8b 44 24 78	 mov	 r8, QWORD PTR tab$[rsp]
  003cc	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  003d1	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  003d4	eb c5		 jmp	 SHORT $LN11@z900_trans
$LN12@z900_trans:

; 1850 :     }

  003d6	e9 df 03 00 00	 jmp	 $LN38@z900_trans
$LN37@z900_trans:

; 1851 :     else /* Translate table spans a boundary */
; 1852 :     {
; 1853 :         n = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  003db	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  003e0	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  003e6	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003eb	48 2b c8	 sub	 rcx, rax
  003ee	48 8b c1	 mov	 rax, rcx
  003f1	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 1854 :         b = dest[0];

  003f5	b8 01 00 00 00	 mov	 eax, 1
  003fa	48 6b c0 00	 imul	 rax, rax, 0
  003fe	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  00403	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00407	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax

; 1855 : 
; 1856 :         /* Referenced part of the table may or may not span boundary */
; 1857 :         if (b < n)

  0040b	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  0040f	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00413	0f 8d 40 01 00
	00		 jge	 $LN39@z900_trans

; 1858 :         {
; 1859 :             tab = MADDRL(effective_addr2, n, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  00419	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  0041e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00426	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0042a	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0042e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00436	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0043e	44 8b 44 24 40	 mov	 r8d, DWORD PTR b2$[rsp]
  00443	48 8b d0	 mov	 rdx, rax
  00446	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0044b	e8 00 00 00 00	 call	 z900_maddr_l
  00450	48 89 44 24 78	 mov	 QWORD PTR tab$[rsp], rax

; 1860 :             for (i=1; i <= len  && b < n; i++) b = dest [i];

  00455	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  0045d	eb 0a		 jmp	 SHORT $LN16@z900_trans
$LN14@z900_trans:
  0045f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00463	ff c0		 inc	 eax
  00465	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@z900_trans:
  00469	8b 44 24 3c	 mov	 eax, DWORD PTR len$[rsp]
  0046d	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00471	7f 1e		 jg	 SHORT $LN15@z900_trans
  00473	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00477	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  0047b	7d 14		 jge	 SHORT $LN15@z900_trans
  0047d	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00482	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  00487	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0048b	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  0048f	eb ce		 jmp	 SHORT $LN14@z900_trans
$LN15@z900_trans:

; 1861 :             for (i=0; i <= len2 && b < n; i++) b = dest2[i];

  00491	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00499	eb 0a		 jmp	 SHORT $LN19@z900_trans
$LN17@z900_trans:
  0049b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0049f	ff c0		 inc	 eax
  004a1	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@z900_trans:
  004a5	8b 44 24 44	 mov	 eax, DWORD PTR len2$[rsp]
  004a9	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  004ad	7f 1e		 jg	 SHORT $LN18@z900_trans
  004af	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  004b3	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  004b7	7d 14		 jge	 SHORT $LN18@z900_trans
  004b9	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  004be	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest2$[rsp]
  004c3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  004c7	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  004cb	eb ce		 jmp	 SHORT $LN17@z900_trans
$LN18@z900_trans:

; 1862 : 
; 1863 :             tab2 = b < n ? NULL

  004cd	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  004d1	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  004d5	7d 0e		 jge	 SHORT $LN50@z900_trans
  004d7	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv277[rsp], 0
  004e3	eb 5f		 jmp	 SHORT $LN51@z900_trans
$LN50@z900_trans:
  004e5	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  004ea	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  004ee	48 98		 cdqe
  004f0	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR n$[rsp]
  004f5	48 8b 54 24 50	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  004fa	48 03 d1	 add	 rdx, rcx
  004fd	48 8b ca	 mov	 rcx, rdx
  00500	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00508	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  0050f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00517	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0051b	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0051f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00527	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0052f	44 8b 44 24 40	 mov	 r8d, DWORD PTR b2$[rsp]
  00534	48 8b d0	 mov	 rdx, rax
  00537	e8 00 00 00 00	 call	 z900_maddr_l
  0053c	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv277[rsp], rax
$LN51@z900_trans:
  00544	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv277[rsp]
  0054c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tab2$[rsp], rax

; 1864 :                          : MADDRL((effective_addr2+n) & ADDRESS_MAXWRAP( regs ),
; 1865 :                             256 - n, b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1866 :         }

  00554	e9 3b 01 00 00	 jmp	 $LN40@z900_trans
$LN39@z900_trans:

; 1867 :         else
; 1868 :         {
; 1869 :             tab2 = MADDRL((effective_addr2+n) & ADDRESS_MAXWRAP( regs ),

  00559	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0055e	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  00562	48 98		 cdqe
  00564	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR n$[rsp]
  00569	48 8b 54 24 50	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  0056e	48 03 d1	 add	 rdx, rcx
  00571	48 8b ca	 mov	 rcx, rdx
  00574	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0057c	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  00583	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0058b	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0058f	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00593	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0059b	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  005a3	44 8b 44 24 40	 mov	 r8d, DWORD PTR b2$[rsp]
  005a8	48 8b d0	 mov	 rdx, rax
  005ab	e8 00 00 00 00	 call	 z900_maddr_l
  005b0	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tab2$[rsp], rax

; 1870 :                   256 - n, b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1871 :             for (i=1; i <= len  && b >= n; i++) b = dest [i];

  005b8	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  005c0	eb 0a		 jmp	 SHORT $LN22@z900_trans
$LN20@z900_trans:
  005c2	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  005c6	ff c0		 inc	 eax
  005c8	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@z900_trans:
  005cc	8b 44 24 3c	 mov	 eax, DWORD PTR len$[rsp]
  005d0	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  005d4	7f 1e		 jg	 SHORT $LN21@z900_trans
  005d6	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  005da	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  005de	7c 14		 jl	 SHORT $LN21@z900_trans
  005e0	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  005e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  005ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005ee	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  005f2	eb ce		 jmp	 SHORT $LN20@z900_trans
$LN21@z900_trans:

; 1872 :             for (i=0; i <= len2 && b >= n; i++) b = dest2[i];

  005f4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005fc	eb 0a		 jmp	 SHORT $LN25@z900_trans
$LN23@z900_trans:
  005fe	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00602	ff c0		 inc	 eax
  00604	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@z900_trans:
  00608	8b 44 24 44	 mov	 eax, DWORD PTR len2$[rsp]
  0060c	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00610	7f 1e		 jg	 SHORT $LN24@z900_trans
  00612	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00616	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  0061a	7c 14		 jl	 SHORT $LN24@z900_trans
  0061c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00621	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest2$[rsp]
  00626	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0062a	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  0062e	eb ce		 jmp	 SHORT $LN23@z900_trans
$LN24@z900_trans:

; 1873 : 
; 1874 :             tab = b >= n ? NULL

  00630	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00634	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00638	7c 0e		 jl	 SHORT $LN52@z900_trans
  0063a	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv316[rsp], 0
  00646	eb 3f		 jmp	 SHORT $LN53@z900_trans
$LN52@z900_trans:
  00648	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  0064d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00655	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00659	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0065d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00665	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0066d	44 8b 44 24 40	 mov	 r8d, DWORD PTR b2$[rsp]
  00672	48 8b d0	 mov	 rdx, rax
  00675	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0067a	e8 00 00 00 00	 call	 z900_maddr_l
  0067f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
$LN53@z900_trans:
  00687	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv316[rsp]
  0068f	48 89 44 24 78	 mov	 QWORD PTR tab$[rsp], rax
$LN40@z900_trans:

; 1875 :                          : MADDRL(effective_addr2, n,
; 1876 :                                   b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1877 :         }
; 1878 : 
; 1879 :         /* Perform translate function */
; 1880 :         for (i=0; i <= len;  i++) dest [i] = dest [i] < n ? tab[dest [i]] : tab2[dest [i]-n];

  00694	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0069c	eb 0a		 jmp	 SHORT $LN28@z900_trans
$LN26@z900_trans:
  0069e	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  006a2	ff c0		 inc	 eax
  006a4	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@z900_trans:
  006a8	8b 44 24 3c	 mov	 eax, DWORD PTR len$[rsp]
  006ac	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  006b0	7f 75		 jg	 SHORT $LN27@z900_trans
  006b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  006b7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  006bc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006c0	3b 44 24 34	 cmp	 eax, DWORD PTR n$[rsp]
  006c4	7d 20		 jge	 SHORT $LN54@z900_trans
  006c6	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  006cb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  006d0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006d4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tab$[rsp]
  006d9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006dd	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv343[rsp], eax
  006e4	eb 27		 jmp	 SHORT $LN55@z900_trans
$LN54@z900_trans:
  006e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  006eb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  006f0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006f4	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  006f8	48 98		 cdqe
  006fa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tab2$[rsp]
  00702	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00706	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv343[rsp], eax
$LN55@z900_trans:
  0070d	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00712	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  00717	0f b6 94 24 88
	00 00 00	 movzx	 edx, BYTE PTR tv343[rsp]
  0071f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00722	e9 77 ff ff ff	 jmp	 $LN26@z900_trans
$LN27@z900_trans:

; 1881 :         for (i=0; i <= len2; i++) dest2[i] = dest2[i] < n ? tab[dest2[i]] : tab2[dest2[i]-n];

  00727	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0072f	eb 0a		 jmp	 SHORT $LN31@z900_trans
$LN29@z900_trans:
  00731	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00735	ff c0		 inc	 eax
  00737	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN31@z900_trans:
  0073b	8b 44 24 44	 mov	 eax, DWORD PTR len2$[rsp]
  0073f	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00743	7f 75		 jg	 SHORT $LN30@z900_trans
  00745	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0074a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest2$[rsp]
  0074f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00753	3b 44 24 34	 cmp	 eax, DWORD PTR n$[rsp]
  00757	7d 20		 jge	 SHORT $LN56@z900_trans
  00759	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0075e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest2$[rsp]
  00763	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00767	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tab$[rsp]
  0076c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00770	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv371[rsp], eax
  00777	eb 27		 jmp	 SHORT $LN57@z900_trans
$LN56@z900_trans:
  00779	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0077e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest2$[rsp]
  00783	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00787	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  0078b	48 98		 cdqe
  0078d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tab2$[rsp]
  00795	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00799	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv371[rsp], eax
$LN57@z900_trans:
  007a0	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  007a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest2$[rsp]
  007aa	0f b6 94 24 8c
	00 00 00	 movzx	 edx, BYTE PTR tv371[rsp]
  007b2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  007b5	e9 77 ff ff ff	 jmp	 $LN29@z900_trans
$LN30@z900_trans:
$LN38@z900_trans:

; 1882 :     }
; 1883 : }

  007ba	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  007c1	c3		 ret	 0
z900_translate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tbyte$ = 32
i2$ = 33
b1$ = 36
temp$1 = 40
tv138 = 44
tv139 = 48
effective_addr1$ = 56
inst$ = 80
regs$ = 88
z900_test_under_mask PROC

; 1729 : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1730 : BYTE    i2;                             /* Immediate operand         */
; 1731 : int     b1;                             /* Base of effective addr    */
; 1732 : VADR    effective_addr1;                /* Effective address         */
; 1733 : BYTE    tbyte;                          /* Work byte                 */
; 1734 : 
; 1735 :     SI(inst, regs, i2, b1, effective_addr1);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  00041	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004d	88 44 24 21	 mov	 BYTE PTR i2$[rsp], al
  00051	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00056	74 3e		 je	 SHORT $LN5@z900_test_
  00058	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0005d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00062	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0006a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0007a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0007f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00086	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0008b	48 23 c8	 and	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 89 44 24 38	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_test_:
$LN4@z900_test_:
  00096	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009f	48 83 c0 04	 add	 rax, 4
  000a3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000a8	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ac	33 c0		 xor	 eax, eax
  000ae	83 f8 04	 cmp	 eax, 4
  000b1	74 0c		 je	 SHORT $LN6@z900_test_
  000b3	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000b8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_test_:
  000bf	33 c0		 xor	 eax, eax
  000c1	85 c0		 test	 eax, eax
  000c3	75 d1		 jne	 SHORT $LN4@z900_test_

; 1736 :     PER_ZEROADDR_XCHECK( regs, b1 );

  000c5	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000c9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000ce	e8 00 00 00 00	 call	 z900_per3_zero_xcheck

; 1737 : 
; 1738 :     /* Fetch byte from operand address */
; 1739 :     tbyte = ARCH_DEP(vfetchb) ( effective_addr1, b1, regs );

  000d3	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000d8	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000dc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000e1	e8 00 00 00 00	 call	 z900_vfetchb
  000e6	88 44 24 20	 mov	 BYTE PTR tbyte$[rsp], al

; 1740 : 
; 1741 :     /* AND with immediate operand mask */
; 1742 :     tbyte &= i2;

  000ea	0f b6 44 24 21	 movzx	 eax, BYTE PTR i2$[rsp]
  000ef	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tbyte$[rsp]
  000f4	23 c8		 and	 ecx, eax
  000f6	8b c1		 mov	 eax, ecx
  000f8	88 44 24 20	 mov	 BYTE PTR tbyte$[rsp], al

; 1743 : 
; 1744 :     /* Set condition code according to result */
; 1745 :     regs->psw.cc =

  000fc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tbyte$[rsp]
  00101	85 c0		 test	 eax, eax
  00103	75 0a		 jne	 SHORT $LN10@z900_test_
  00105	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
  0010d	eb 28		 jmp	 SHORT $LN11@z900_test_
$LN10@z900_test_:
  0010f	0f b6 44 24 20	 movzx	 eax, BYTE PTR tbyte$[rsp]
  00114	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR i2$[rsp]
  00119	3b c1		 cmp	 eax, ecx
  0011b	75 0a		 jne	 SHORT $LN8@z900_test_
  0011d	c7 44 24 2c 03
	00 00 00	 mov	 DWORD PTR tv138[rsp], 3
  00125	eb 08		 jmp	 SHORT $LN9@z900_test_
$LN8@z900_test_:
  00127	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
$LN9@z900_test_:
  0012f	8b 44 24 2c	 mov	 eax, DWORD PTR tv138[rsp]
  00133	89 44 24 30	 mov	 DWORD PTR tv139[rsp], eax
$LN11@z900_test_:
  00137	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0013c	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR tv139[rsp]
  00141	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1746 :             ( tbyte == 0 ) ? 0 :            /* result all zeroes */
; 1747 :             ( tbyte == i2) ? 3 :            /* result all ones   */
; 1748 :             1 ;                             /* result mixed      */
; 1749 : }

  00144	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00148	c3		 ret	 0
z900_test_under_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
old$ = 48
b2$ = 52
temp$1 = 56
effective_addr2$ = 64
main2$ = 72
inst$ = 96
regs$ = 104
z900_test_and_set PROC

; 1621 : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1622 : int     b2;                             /* Base of effective addr    */
; 1623 : VADR    effective_addr2;                /* Effective address         */
; 1624 : BYTE   *main2;                          /* Mainstor address          */
; 1625 : BYTE    old;                            /* Old value                 */
; 1626 : 
; 1627 :     S(inst, regs, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 38	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 34	 mov	 DWORD PTR b2$[rsp], eax
  00041	83 7c 24 34 00	 cmp	 DWORD PTR b2$[rsp], 0
  00046	74 3e		 je	 SHORT $LN10@z900_test_
  00048	48 63 44 24 34	 movsxd	 rax, DWORD PTR b2$[rsp]
  0004d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00052	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0005f	48 03 c8	 add	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 23 c8	 and	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN10@z900_test_:
$LN4@z900_test_:
  00086	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0008b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0008f	48 83 c0 04	 add	 rax, 4
  00093	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00098	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0c		 je	 SHORT $LN11@z900_test_
  000a3	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN11@z900_test_:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 d1		 jne	 SHORT $LN4@z900_test_

; 1628 :     PER_ZEROADDR_XCHECK( regs, b2 );

  000b5	8b 54 24 34	 mov	 edx, DWORD PTR b2$[rsp]
  000b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	e8 00 00 00 00	 call	 z900_per3_zero_xcheck
$LN7@z900_test_:

; 1629 : 
; 1630 :     TXFC_INSTR_CHECK( regs );

  000c3	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000c8	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  000cf	85 c0		 test	 eax, eax
  000d1	74 36		 je	 SHORT $LN12@z900_test_
  000d3	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  000de	0f ba e8 0f	 bts	 eax, 15
  000e2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000e7	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  000ed	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206654
  000f4	41 b8 0b 00 00
	00		 mov	 r8d, 11
  000fa	ba 02 00 00 00	 mov	 edx, 2
  000ff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00104	e8 00 00 00 00	 call	 z900_abort_transaction
$LN12@z900_test_:
  00109	33 c0		 xor	 eax, eax
  0010b	85 c0		 test	 eax, eax
  0010d	75 b4		 jne	 SHORT $LN7@z900_test_

; 1631 : 
; 1632 :     ITIMER_SYNC(effective_addr2,0,regs);
; 1633 : 
; 1634 :     /* Perform serialization before and after operation */
; 1635 :     PERFORM_SERIALIZATION( regs );

  0010f	0f ae f0	 mfence

; 1636 :     {
; 1637 :         /* Get operand absolute address */
; 1638 :         main2 = MADDR (effective_addr2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey);

  00112	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00117	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0011b	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0011f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00127	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  0012c	44 8b 44 24 34	 mov	 r8d, DWORD PTR b2$[rsp]
  00131	ba 01 00 00 00	 mov	 edx, 1
  00136	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0013b	e8 00 00 00 00	 call	 z900_maddr_l
  00140	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 1639 : 
; 1640 :         /* MAINLOCK may be required if cmpxchg assists unavailable */
; 1641 :         OBTAIN_MAINLOCK( regs );
; 1642 :         {
; 1643 :             /* Get old value */
; 1644 :             old = *main2;

  00145	48 8b 44 24 48	 mov	 rax, QWORD PTR main2$[rsp]
  0014a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0014d	88 44 24 30	 mov	 BYTE PTR old$[rsp], al

; 1645 : 
; 1646 :             /* Attempt to exchange the values */
; 1647 :             /*  The WHILE statement that follows could lead to a        */
; 1648 :             /*  TS-style lock release never being noticed, because      */
; 1649 :             /*  because such release statements are implemented using   */
; 1650 :             /*  regular instructions such as MVI or even ST which set   */
; 1651 :             /*  [the most significant bit of] the mem_lockbyte to zero; */
; 1652 :             /*  these are NOT being protected using _MAINLOCK.  In the  */
; 1653 :             /*  absence of a machine assist for "cmpxchg1" it is then   */
; 1654 :             /*  possible that this reset occurs in between the test     */
; 1655 :             /*  IF (old == mem_lockbyte), and the updating of           */
; 1656 :             /*  mem_lockbyte = 255;  As this update in the case         */
; 1657 :             /*  old == 255 is not needed to start with, we have         */
; 1658 :             /*  inserted the test IF (old != 255) in front of the       */
; 1659 :             /*  original WHILE statement.                               */
; 1660 :             /*  (The above bug WAS experienced running VM on an ARM     */
; 1661 :             /*  Raspberry PI; this correction fixed it.)                */
; 1662 :             /*                              (Peter J. Jansen, May 2015) */
; 1663 :             if (old != 255)

  00151	0f b6 44 24 30	 movzx	 eax, BYTE PTR old$[rsp]
  00156	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0015b	74 1a		 je	 SHORT $LN13@z900_test_
$LN8@z900_test_:

; 1664 :                 while (cmpxchg1( &old, 255, main2 ));

  0015d	4c 8b 44 24 48	 mov	 r8, QWORD PTR main2$[rsp]
  00162	b2 ff		 mov	 dl, 255			; 000000ffH
  00164	48 8d 4c 24 30	 lea	 rcx, QWORD PTR old$[rsp]
  00169	e8 00 00 00 00	 call	 cmpxchg1_x86
  0016e	0f b6 c0	 movzx	 eax, al
  00171	85 c0		 test	 eax, eax
  00173	74 02		 je	 SHORT $LN9@z900_test_
  00175	eb e6		 jmp	 SHORT $LN8@z900_test_
$LN9@z900_test_:
$LN13@z900_test_:

; 1665 :             regs->psw.cc = old >> 7;

  00177	0f b6 44 24 30	 movzx	 eax, BYTE PTR old$[rsp]
  0017c	c1 f8 07	 sar	 eax, 7
  0017f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00184	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1666 :         }
; 1667 :         RELEASE_MAINLOCK( regs );
; 1668 :     }
; 1669 :     PERFORM_SERIALIZATION( regs );

  00187	0f ae f0	 mfence

; 1670 : 
; 1671 :     if (regs->psw.cc == 1)

  0018a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0018f	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  00193	83 f8 01	 cmp	 eax, 1
  00196	0f 85 9a 00 00
	00		 jne	 $LN14@z900_test_

; 1672 :     {
; 1673 : #if defined( _FEATURE_SIE )
; 1674 :         if(SIE_STATE_BIT_ON(regs, IC0, TS1))

  0019c	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001a1	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  001a7	d1 e8		 shr	 eax, 1
  001a9	83 e0 01	 and	 eax, 1
  001ac	85 c0		 test	 eax, eax
  001ae	74 70		 je	 SHORT $LN16@z900_test_
  001b0	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001b5	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  001bc	b9 01 00 00 00	 mov	 ecx, 1
  001c1	48 6b c9 00	 imul	 rcx, rcx, 0
  001c5	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  001ca	83 e0 08	 and	 eax, 8
  001cd	85 c0		 test	 eax, eax
  001cf	74 4f		 je	 SHORT $LN16@z900_test_

; 1675 :         {
; 1676 :             if( !OPEN_IC_PER(regs) )

  001d1	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001db	8b 49 4c	 mov	 ecx, DWORD PTR [rcx+76]
  001de	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001e1	23 c1		 and	 eax, ecx
  001e3	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  001e8	85 c0		 test	 eax, eax
  001ea	75 1a		 jne	 SHORT $LN18@z900_test_

; 1677 :                 longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  001ec	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001f1	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  001f7	ba fc ff ff ff	 mov	 edx, -4
  001fc	48 8b c8	 mov	 rcx, rax
  001ff	e8 00 00 00 00	 call	 longjmp
  00204	eb 18		 jmp	 SHORT $LN19@z900_test_
$LN18@z900_test_:

; 1678 :             else
; 1679 :                 longjmp(regs->progjmp, SIE_INTERCEPT_INSTCOMP);

  00206	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0020b	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00211	ba fb ff ff ff	 mov	 edx, -5
  00216	48 8b c8	 mov	 rcx, rax
  00219	e8 00 00 00 00	 call	 longjmp
$LN19@z900_test_:

; 1680 :         }

  0021e	eb 16		 jmp	 SHORT $LN17@z900_test_
$LN16@z900_test_:

; 1681 :         else
; 1682 : #endif
; 1683 :             if (sysblk.cpus > 1)

  00220	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00227	83 b8 04 01 00
	00 01		 cmp	 DWORD PTR [rax+260], 1
  0022e	7e 06		 jle	 SHORT $LN20@z900_test_

; 1684 :                 sched_yield();

  00230	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN20@z900_test_:
$LN17@z900_test_:
$LN14@z900_test_:
$LN21@z900_test_:

; 1685 :     }
; 1686 :     else
; 1687 :     {
; 1688 :         ITIMER_UPDATE(effective_addr2,0,regs);
; 1689 :     }
; 1690 : }

  00236	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0023a	c3		 ret	 0
z900_test_and_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
tv207 = 52
tv214 = 56
tv221 = 60
tv223 = 64
rc$ = 68
psa$ = 72
px$ = 80
inst$ = 112
regs$ = 120
z900_supervisor_call PROC

; 1549 : {

$LN33:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1550 : BYTE    i;                              /* Instruction byte 1        */
; 1551 : PSA    *psa;                            /* -> prefixed storage area  */
; 1552 : RADR    px;                             /* prefix                    */
; 1553 : int     rc;                             /* Return code               */
; 1554 : 
; 1555 :     RR_SVC(inst, regs, i);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	88 44 24 30	 mov	 BYTE PTR i$[rsp], al
$LN4@z900_super:
  00024	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00029	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0002d	48 83 c0 02	 add	 rax, 2
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00036	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0003a	33 c0		 xor	 eax, eax
  0003c	83 f8 02	 cmp	 eax, 2
  0003f	74 0c		 je	 SHORT $LN14@z900_super
  00041	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00046	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN14@z900_super:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 d1		 jne	 SHORT $LN4@z900_super
$LN7@z900_super:

; 1556 : 
; 1557 :     TXF_INSTR_CHECK( regs );

  00053	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00058	0f b6 80 58 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3672]
  0005f	85 c0		 test	 eax, eax
  00061	74 36		 je	 SHORT $LN15@z900_super
  00063	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00068	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  0006e	0f ba e8 0c	 bts	 eax, 12
  00072	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00077	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  0007d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206617
  00084	41 b8 0b 00 00
	00		 mov	 r8d, 11
  0008a	ba 02 00 00 00	 mov	 edx, 2
  0008f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00094	e8 00 00 00 00	 call	 z900_abort_transaction
$LN15@z900_super:
  00099	33 c0		 xor	 eax, eax
  0009b	85 c0		 test	 eax, eax
  0009d	75 b4		 jne	 SHORT $LN7@z900_super

; 1558 : 
; 1559 : #if defined( FEATURE_ECPSVM )
; 1560 :     if(ecpsvm_dosvc(regs,i)==0)
; 1561 :     {
; 1562 :         return;
; 1563 :     }
; 1564 : #endif
; 1565 : 
; 1566 : #if defined( _FEATURE_SIE )
; 1567 :     if(SIE_MODE(regs) &&

  0009f	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000a4	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  000aa	d1 e8		 shr	 eax, 1
  000ac	83 e0 01	 and	 eax, 1
  000af	85 c0		 test	 eax, eax
  000b1	0f 84 0f 01 00
	00		 je	 $LN16@z900_super
  000b7	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000bc	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000c3	b9 01 00 00 00	 mov	 ecx, 1
  000c8	48 6b c9 00	 imul	 rcx, rcx, 0
  000cc	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  000d1	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000d6	85 c0		 test	 eax, eax
  000d8	0f 85 d0 00 00
	00		 jne	 $LN17@z900_super
  000de	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e3	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000ea	b9 01 00 00 00	 mov	 ecx, 1
  000ef	48 6b c9 00	 imul	 rcx, rcx, 0
  000f3	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  000f8	83 e0 40	 and	 eax, 64			; 00000040H
  000fb	85 c0		 test	 eax, eax
  000fd	74 27		 je	 SHORT $LN18@z900_super
  000ff	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00104	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  0010b	b9 01 00 00 00	 mov	 ecx, 1
  00110	48 6b c9 01	 imul	 rcx, rcx, 1
  00114	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00119	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  0011e	3b c1		 cmp	 eax, ecx
  00120	0f 84 88 00 00
	00		 je	 $LN17@z900_super
$LN18@z900_super:
  00126	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0012b	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00132	b9 01 00 00 00	 mov	 ecx, 1
  00137	48 6b c9 00	 imul	 rcx, rcx, 0
  0013b	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00140	83 e0 20	 and	 eax, 32			; 00000020H
  00143	85 c0		 test	 eax, eax
  00145	74 23		 je	 SHORT $LN19@z900_super
  00147	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0014c	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00153	b9 01 00 00 00	 mov	 ecx, 1
  00158	48 6b c9 02	 imul	 rcx, rcx, 2
  0015c	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00161	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  00166	3b c1		 cmp	 eax, ecx
  00168	74 44		 je	 SHORT $LN17@z900_super
$LN19@z900_super:
  0016a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0016f	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00176	b9 01 00 00 00	 mov	 ecx, 1
  0017b	48 6b c9 00	 imul	 rcx, rcx, 0
  0017f	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00184	83 e0 10	 and	 eax, 16
  00187	85 c0		 test	 eax, eax
  00189	74 3b		 je	 SHORT $LN16@z900_super
  0018b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00190	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00197	b9 01 00 00 00	 mov	 ecx, 1
  0019c	48 6b c9 03	 imul	 rcx, rcx, 3
  001a0	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  001a5	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  001aa	3b c1		 cmp	 eax, ecx
  001ac	75 18		 jne	 SHORT $LN16@z900_super
$LN17@z900_super:

; 1568 :       ( (regs->siebk->svc_ctl[0] & SIE_SVC0_ALL)
; 1569 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_1N) &&
; 1570 :               regs->siebk->svc_ctl[1] == i)
; 1571 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_2N) &&
; 1572 :               regs->siebk->svc_ctl[2] == i)
; 1573 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_3N) &&
; 1574 :               regs->siebk->svc_ctl[3] == i) ))
; 1575 :         longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  001ae	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001b3	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  001b9	ba fc ff ff ff	 mov	 edx, -4
  001be	48 8b c8	 mov	 rcx, rax
  001c1	e8 00 00 00 00	 call	 longjmp
$LN16@z900_super:

; 1576 : #endif
; 1577 : 
; 1578 :     px = regs->PX;

  001c6	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001cb	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001cf	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax
$LN10@z900_super:

; 1579 :     SIE_TRANSLATE(&px, ACCTYPE_WRITE, regs);

  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  001df	d1 e8		 shr	 eax, 1
  001e1	83 e0 01	 and	 eax, 1
  001e4	85 c0		 test	 eax, eax
  001e6	74 6b		 je	 SHORT $LN20@z900_super
  001e8	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001ed	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  001f3	c1 e8 02	 shr	 eax, 2
  001f6	83 e0 01	 and	 eax, 1
  001f9	85 c0		 test	 eax, eax
  001fb	75 56		 jne	 SHORT $LN20@z900_super
  001fd	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00202	48 8b 80 98 08
	00 00		 mov	 rax, QWORD PTR [rax+2200]
  00209	48 03 44 24 50	 add	 rax, QWORD PTR px$[rsp]
  0020e	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR [rsp+40], 1
  00217	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  0021c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00222	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00227	4c 8b 81 68 08
	00 00		 mov	 r8, QWORD PTR [rcx+2152]
  0022e	ba fd ff ff ff	 mov	 edx, -3
  00233	48 8b c8	 mov	 rcx, rax
  00236	e8 00 00 00 00	 call	 z900_logical_to_main_l
  0023b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00240	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00247	48 8b 80 08 08
	00 00		 mov	 rax, QWORD PTR [rax+2056]
  0024e	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax
$LN20@z900_super:
  00253	33 c0		 xor	 eax, eax
  00255	85 c0		 test	 eax, eax
  00257	0f 85 77 ff ff
	ff		 jne	 $LN10@z900_super

; 1580 : 
; 1581 :     /* Set the main storage reference and change bits */
; 1582 :     ARCH_DEP( or_storage_key )( px, (STORKEY_REF | STORKEY_CHANGE) );

  0025d	b2 06		 mov	 dl, 6
  0025f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR px$[rsp]
  00264	e8 00 00 00 00	 call	 z900_or_storage_key

; 1583 : 
; 1584 :     /* Use the I-byte to set the SVC interruption code */
; 1585 :     regs->psw.intcode = i;

  00269	0f b6 44 24 30	 movzx	 eax, BYTE PTR i$[rsp]
  0026e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00273	66 89 81 98 00
	00 00		 mov	 WORD PTR [rcx+152], ax

; 1586 : 
; 1587 :     /* Point to PSA in main storage */
; 1588 :     psa = (void*)(regs->mainstor + px);

  0027a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0027f	48 8b 80 48 08
	00 00		 mov	 rax, QWORD PTR [rax+2120]
  00286	48 03 44 24 50	 add	 rax, QWORD PTR px$[rsp]
  0028b	48 89 44 24 48	 mov	 QWORD PTR psa$[rsp], rax

; 1589 : 
; 1590 : #if defined( FEATURE_BCMODE )
; 1591 :     /* For ECMODE, store SVC interrupt code at PSA+X'88' */
; 1592 :     if ( ECMODE(&regs->psw) )
; 1593 : #endif
; 1594 :     {
; 1595 :         psa->svcint[0] = 0;

  00290	b8 01 00 00 00	 mov	 eax, 1
  00295	48 6b c0 00	 imul	 rax, rax, 0
  00299	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  0029e	c6 84 01 88 00
	00 00 00	 mov	 BYTE PTR [rcx+rax+136], 0

; 1596 :         psa->svcint[1] = REAL_ILC(regs);

  002a6	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002ab	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  002b1	83 e0 01	 and	 eax, 1
  002b4	85 c0		 test	 eax, eax
  002b6	75 0a		 jne	 SHORT $LN23@z900_super
  002b8	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv207[rsp], 1
  002c0	eb 08		 jmp	 SHORT $LN24@z900_super
$LN23@z900_super:
  002c2	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv207[rsp], 0
$LN24@z900_super:
  002ca	83 7c 24 34 00	 cmp	 DWORD PTR tv207[rsp], 0
  002cf	74 0a		 je	 SHORT $LN27@z900_super
  002d1	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv214[rsp], 1
  002d9	eb 08		 jmp	 SHORT $LN28@z900_super
$LN27@z900_super:
  002db	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv214[rsp], 0
$LN28@z900_super:
  002e3	83 7c 24 38 00	 cmp	 DWORD PTR tv214[rsp], 0
  002e8	74 12		 je	 SHORT $LN31@z900_super
  002ea	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002ef	0f b6 80 9a 00
	00 00		 movzx	 eax, BYTE PTR [rax+154]
  002f6	89 44 24 40	 mov	 DWORD PTR tv223[rsp], eax
  002fa	eb 2e		 jmp	 SHORT $LN32@z900_super
$LN31@z900_super:
  002fc	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00301	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00307	d1 e8		 shr	 eax, 1
  00309	83 e0 01	 and	 eax, 1
  0030c	85 c0		 test	 eax, eax
  0030e	74 0a		 je	 SHORT $LN29@z900_super
  00310	c7 44 24 3c 06
	00 00 00	 mov	 DWORD PTR tv221[rsp], 6
  00318	eb 08		 jmp	 SHORT $LN30@z900_super
$LN29@z900_super:
  0031a	c7 44 24 3c 04
	00 00 00	 mov	 DWORD PTR tv221[rsp], 4
$LN30@z900_super:
  00322	8b 44 24 3c	 mov	 eax, DWORD PTR tv221[rsp]
  00326	89 44 24 40	 mov	 DWORD PTR tv223[rsp], eax
$LN32@z900_super:
  0032a	b8 01 00 00 00	 mov	 eax, 1
  0032f	48 6b c0 01	 imul	 rax, rax, 1
  00333	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  00338	0f b6 54 24 40	 movzx	 edx, BYTE PTR tv223[rsp]
  0033d	88 94 01 88 00
	00 00		 mov	 BYTE PTR [rcx+rax+136], dl

; 1597 :         psa->svcint[2] = 0;

  00344	b8 01 00 00 00	 mov	 eax, 1
  00349	48 6b c0 02	 imul	 rax, rax, 2
  0034d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  00352	c6 84 01 88 00
	00 00 00	 mov	 BYTE PTR [rcx+rax+136], 0

; 1598 :         psa->svcint[3] = i;

  0035a	b8 01 00 00 00	 mov	 eax, 1
  0035f	48 6b c0 03	 imul	 rax, rax, 3
  00363	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  00368	0f b6 54 24 30	 movzx	 edx, BYTE PTR i$[rsp]
  0036d	88 94 01 88 00
	00 00		 mov	 BYTE PTR [rcx+rax+136], dl

; 1599 :     }
; 1600 : 
; 1601 :     /* Store current PSW at PSA+X'20' */
; 1602 :     ARCH_DEP(store_psw) ( regs, psa->svcold );

  00374	48 8b 44 24 48	 mov	 rax, QWORD PTR psa$[rsp]
  00379	48 05 40 01 00
	00		 add	 rax, 320		; 00000140H
  0037f	48 8b d0	 mov	 rdx, rax
  00382	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00387	e8 00 00 00 00	 call	 z900_store_psw

; 1603 : 
; 1604 :     /* Load new PSW from PSA+X'60' */
; 1605 :     if ( (rc = ARCH_DEP(load_psw) ( regs, psa->svcnew ) ) )

  0038c	48 8b 44 24 48	 mov	 rax, QWORD PTR psa$[rsp]
  00391	48 05 c0 01 00
	00		 add	 rax, 448		; 000001c0H
  00397	48 8b d0	 mov	 rdx, rax
  0039a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0039f	e8 00 00 00 00	 call	 z900_load_psw
  003a4	89 44 24 44	 mov	 DWORD PTR rc$[rsp], eax
  003a8	83 7c 24 44 00	 cmp	 DWORD PTR rc$[rsp], 0
  003ad	74 14		 je	 SHORT $LN21@z900_super

; 1606 :         regs->program_interrupt (regs, rc);

  003af	8b 54 24 44	 mov	 edx, DWORD PTR rc$[rsp]
  003b3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  003b8	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003bd	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN21@z900_super:

; 1607 : 
; 1608 :     /* Perform serialization and checkpoint synchronization */
; 1609 :     PERFORM_SERIALIZATION (regs);

  003c3	0f ae f0	 mfence
$LN13@z900_super:

; 1610 :     PERFORM_CHKPT_SYNC (regs);

  003c6	33 c0		 xor	 eax, eax
  003c8	85 c0		 test	 eax, eax
  003ca	75 fa		 jne	 SHORT $LN13@z900_super

; 1611 : 
; 1612 :     RETURN_INTCHECK(regs);

  003cc	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003d1	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  003d7	ba ff ff ff ff	 mov	 edx, -1
  003dc	48 8b c8	 mov	 rcx, rax
  003df	e8 00 00 00 00	 call	 longjmp
$LN22@z900_super:

; 1613 : 
; 1614 : }

  003e4	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003e8	c3		 ret	 0
z900_supervisor_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$1 = 32
r1$ = 36
r2$ = 40
tv94 = 48
inst$ = 80
regs$ = 88
z900_subtract_register PROC

; 1342 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1343 : int     r1, r2;                         /* Values of R fields        */
; 1344 : 
; 1345 :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 20	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 28	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 24	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_subtr:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 02	 cmp	 eax, 2
  00058	74 0c		 je	 SHORT $LN5@z900_subtr
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@z900_subtr:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@z900_subtr

; 1346 : 
; 1347 :     /* Subtract signed operands and set condition code */
; 1348 :     regs->psw.cc =

  0006c	48 63 44 24 28	 movsxd	 rax, DWORD PTR r2$[rsp]
  00071	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00076	48 63 54 24 24	 movsxd	 rdx, DWORD PTR r1$[rsp]
  0007b	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00080	49 8d 94 d0 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx*8+640]
  00088	48 89 54 24 30	 mov	 QWORD PTR tv94[rsp], rdx
  0008d	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00092	45 8b 84 c0 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax*8+640]
  0009a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0009f	8b 94 c8 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx*8+640]
  000a6	48 8b 44 24 30	 mov	 rax, QWORD PTR tv94[rsp]
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	e8 00 00 00 00	 call	 sub_signed
  000b3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000b8	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1349 :             sub_signed (&(regs->GR_L(r1)),
; 1350 :                     regs->GR_L(r1),
; 1351 :                     regs->GR_L(r2));
; 1352 : 
; 1353 :     /* Program check if fixed-point overflow */
; 1354 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  000bb	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000c0	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  000c4	83 f8 03	 cmp	 eax, 3
  000c7	75 25		 jne	 SHORT $LN6@z900_subtr
  000c9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ce	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  000d2	83 e0 08	 and	 eax, 8
  000d5	85 c0		 test	 eax, eax
  000d7	74 15		 je	 SHORT $LN6@z900_subtr

; 1355 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  000d9	ba 08 00 00 00	 mov	 edx, 8
  000de	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000e3	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e8	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN6@z900_subtr:

; 1356 : 
; 1357 :     /* Check for PER 1 GRA event */
; 1358 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1359 : }

  000ee	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f2	c3		 ret	 0
z900_subtract_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
i$1 = 36
tv80 = 40
r2$ = 44
tv138 = 48
inst$ = 80
regs$ = 88
z900_subtract_logical_register PROC

; 1495 : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1496 : int     r1, r2;                         /* Values of R fields        */
; 1497 : 
; 1498 :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 2c	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_subtr:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 02	 cmp	 eax, 2
  00058	74 0c		 je	 SHORT $LN5@z900_subtr
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@z900_subtr:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@z900_subtr

; 1499 : 
; 1500 :     /* Subtract unsigned operands and set condition code */
; 1501 :     if (likely(r1 == r2))

  0006c	8b 44 24 2c	 mov	 eax, DWORD PTR r2$[rsp]
  00070	39 44 24 20	 cmp	 DWORD PTR r1$[rsp], eax
  00074	75 0a		 jne	 SHORT $LN11@z900_subtr
  00076	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  0007e	eb 08		 jmp	 SHORT $LN12@z900_subtr
$LN11@z900_subtr:
  00080	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN12@z900_subtr:
  00088	83 7c 24 28 00	 cmp	 DWORD PTR tv80[rsp], 0
  0008d	74 20		 je	 SHORT $LN6@z900_subtr

; 1502 :     {
; 1503 :         regs->psw.cc = 2;

  0008f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00094	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 1504 :         regs->GR_L(r1) = 0;

  00098	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0009d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000a2	c7 84 c1 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*8+640], 0

; 1505 :     }

  000ad	eb 4f		 jmp	 SHORT $LN7@z900_subtr
$LN6@z900_subtr:

; 1506 :     else
; 1507 :         regs->psw.cc =

  000af	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r2$[rsp]
  000b4	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  000b9	48 63 54 24 20	 movsxd	 rdx, DWORD PTR r1$[rsp]
  000be	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000c3	49 8d 94 d0 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx*8+640]
  000cb	48 89 54 24 30	 mov	 QWORD PTR tv138[rsp], rdx
  000d0	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000d5	45 8b 84 c0 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax*8+640]
  000dd	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e2	8b 94 c8 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx*8+640]
  000e9	48 8b 44 24 30	 mov	 rax, QWORD PTR tv138[rsp]
  000ee	48 8b c8	 mov	 rcx, rax
  000f1	e8 00 00 00 00	 call	 sub_logical
  000f6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN7@z900_subtr:

; 1508 :             sub_logical (&(regs->GR_L(r1)),
; 1509 :                            regs->GR_L(r1),
; 1510 :                            regs->GR_L(r2));
; 1511 : 
; 1512 :     /* Check for PER 1 GRA event */
; 1513 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1514 : }

  000fe	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00102	c3		 ret	 0
z900_subtract_logical_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
temp$1 = 32
b2$ = 36
x2$ = 40
tv78 = 44
tv89 = 48
r1$ = 52
n$ = 56
effective_addr2$ = 64
inst$ = 96
regs$ = 104
z900_subtract_logical PROC

; 1521 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1522 : int     r1;                             /* Value of R field          */
; 1523 : int     x2;                             /* Index register            */
; 1524 : int     b2;                             /* Base of effective addr    */
; 1525 : VADR    effective_addr2;                /* Effective address         */
; 1526 : U32     n;                              /* 32-bit operand values     */
; 1527 : 
; 1528 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 20	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 10	 shr	 eax, 16
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR x2$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 14	 shr	 eax, 20
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 34	 mov	 DWORD PTR r1$[rsp], eax
  0004f	83 7c 24 28 00	 cmp	 DWORD PTR x2$[rsp], 0
  00054	74 0a		 je	 SHORT $LN12@z900_subtr
  00056	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN13@z900_subtr
$LN12@z900_subtr:
  00060	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN13@z900_subtr:
  00068	83 7c 24 2c 00	 cmp	 DWORD PTR tv78[rsp], 0
  0006d	74 22		 je	 SHORT $LN5@z900_subtr
  0006f	48 63 44 24 28	 movsxd	 rax, DWORD PTR x2$[rsp]
  00074	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00079	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00086	48 03 c8	 add	 rcx, rax
  00089	48 8b c1	 mov	 rax, rcx
  0008c	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN5@z900_subtr:
  00091	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00095	c1 e8 0c	 shr	 eax, 12
  00098	83 e0 0f	 and	 eax, 15
  0009b	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  0009f	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a4	74 0a		 je	 SHORT $LN14@z900_subtr
  000a6	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000ae	eb 08		 jmp	 SHORT $LN15@z900_subtr
$LN14@z900_subtr:
  000b0	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN15@z900_subtr:
  000b8	83 7c 24 30 00	 cmp	 DWORD PTR tv89[rsp], 0
  000bd	74 22		 je	 SHORT $LN6@z900_subtr
  000bf	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  000c4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c9	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_subtr:
  000e1	33 c0		 xor	 eax, eax
  000e3	83 f8 04	 cmp	 eax, 4
  000e6	74 1c		 je	 SHORT $LN7@z900_subtr
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000f4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000f9	48 23 c8	 and	 rcx, rax
  000fc	48 8b c1	 mov	 rax, rcx
  000ff	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN7@z900_subtr:
$LN4@z900_subtr:
  00104	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00109	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010d	48 83 c0 04	 add	 rax, 4
  00111	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00116	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0011a	33 c0		 xor	 eax, eax
  0011c	83 f8 04	 cmp	 eax, 4
  0011f	74 0c		 je	 SHORT $LN8@z900_subtr
  00121	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00126	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@z900_subtr:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 d1		 jne	 SHORT $LN4@z900_subtr

; 1529 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );

  00133	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00138	8b 54 24 28	 mov	 edx, DWORD PTR x2$[rsp]
  0013c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2

; 1530 : 
; 1531 :     /* Load second operand from operand address */
; 1532 :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00146	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0014b	8b 54 24 24	 mov	 edx, DWORD PTR b2$[rsp]
  0014f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00154	e8 00 00 00 00	 call	 z900_vfetch4
  00159	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1533 : 
; 1534 :     /* Subtract unsigned operands and set condition code */
; 1535 :     regs->psw.cc =

  0015d	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  00162	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00167	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0016c	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  00174	44 8b 44 24 38	 mov	 r8d, DWORD PTR n$[rsp]
  00179	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0017e	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  00185	e8 00 00 00 00	 call	 sub_logical
  0018a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0018f	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1536 :             sub_logical (&(regs->GR_L(r1)),
; 1537 :                     regs->GR_L(r1),
; 1538 :                     n);
; 1539 : 
; 1540 :     /* Check for PER 1 GRA event */
; 1541 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1542 : }

  00192	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00196	c3		 ret	 0
z900_subtract_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
temp$1 = 32
b2$ = 36
x2$ = 40
tv78 = 44
tv89 = 48
r1$ = 52
n$ = 56
effective_addr2$ = 64
inst$ = 96
regs$ = 104
z900_subtract_halfword PROC

; 1398 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1399 : int     r1;                             /* Value of R field          */
; 1400 : int     x2;                             /* Index register            */
; 1401 : int     b2;                             /* Base of effective addr    */
; 1402 : VADR    effective_addr2;                /* Effective address         */
; 1403 : U32     n;                              /* 32-bit operand values     */
; 1404 : 
; 1405 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 20	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 10	 shr	 eax, 16
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR x2$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 14	 shr	 eax, 20
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 34	 mov	 DWORD PTR r1$[rsp], eax
  0004f	83 7c 24 28 00	 cmp	 DWORD PTR x2$[rsp], 0
  00054	74 0a		 je	 SHORT $LN13@z900_subtr
  00056	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN14@z900_subtr
$LN13@z900_subtr:
  00060	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN14@z900_subtr:
  00068	83 7c 24 2c 00	 cmp	 DWORD PTR tv78[rsp], 0
  0006d	74 22		 je	 SHORT $LN5@z900_subtr
  0006f	48 63 44 24 28	 movsxd	 rax, DWORD PTR x2$[rsp]
  00074	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00079	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00086	48 03 c8	 add	 rcx, rax
  00089	48 8b c1	 mov	 rax, rcx
  0008c	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN5@z900_subtr:
  00091	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00095	c1 e8 0c	 shr	 eax, 12
  00098	83 e0 0f	 and	 eax, 15
  0009b	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  0009f	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a4	74 0a		 je	 SHORT $LN15@z900_subtr
  000a6	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000ae	eb 08		 jmp	 SHORT $LN16@z900_subtr
$LN15@z900_subtr:
  000b0	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN16@z900_subtr:
  000b8	83 7c 24 30 00	 cmp	 DWORD PTR tv89[rsp], 0
  000bd	74 22		 je	 SHORT $LN6@z900_subtr
  000bf	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  000c4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c9	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_subtr:
  000e1	33 c0		 xor	 eax, eax
  000e3	83 f8 04	 cmp	 eax, 4
  000e6	74 1c		 je	 SHORT $LN7@z900_subtr
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000f4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000f9	48 23 c8	 and	 rcx, rax
  000fc	48 8b c1	 mov	 rax, rcx
  000ff	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN7@z900_subtr:
$LN4@z900_subtr:
  00104	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00109	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010d	48 83 c0 04	 add	 rax, 4
  00111	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00116	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0011a	33 c0		 xor	 eax, eax
  0011c	83 f8 04	 cmp	 eax, 4
  0011f	74 0c		 je	 SHORT $LN8@z900_subtr
  00121	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00126	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@z900_subtr:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 d1		 jne	 SHORT $LN4@z900_subtr

; 1406 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );

  00133	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00138	8b 54 24 28	 mov	 edx, DWORD PTR x2$[rsp]
  0013c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2

; 1407 : 
; 1408 :     /* Load 2 bytes from operand address */
; 1409 :     n = (S16)ARCH_DEP(vfetch2) ( effective_addr2, b2, regs );

  00146	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0014b	8b 54 24 24	 mov	 edx, DWORD PTR b2$[rsp]
  0014f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00154	e8 00 00 00 00	 call	 z900_vfetch2
  00159	98		 cwde
  0015a	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1410 : 
; 1411 :     /* Subtract signed operands and set condition code */
; 1412 :     regs->psw.cc =

  0015e	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  00163	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00168	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0016d	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  00175	44 8b 44 24 38	 mov	 r8d, DWORD PTR n$[rsp]
  0017a	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0017f	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  00186	e8 00 00 00 00	 call	 sub_signed
  0018b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00190	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1413 :             sub_signed (&(regs->GR_L(r1)),
; 1414 :                     regs->GR_L(r1),
; 1415 :                     n);
; 1416 : 
; 1417 :     /* Program check if fixed-point overflow */
; 1418 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  00193	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00198	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  0019c	83 f8 03	 cmp	 eax, 3
  0019f	75 25		 jne	 SHORT $LN9@z900_subtr
  001a1	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001a6	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  001aa	83 e0 08	 and	 eax, 8
  001ad	85 c0		 test	 eax, eax
  001af	74 15		 je	 SHORT $LN9@z900_subtr

; 1419 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  001b1	ba 08 00 00 00	 mov	 edx, 8
  001b6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001bb	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001c0	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@z900_subtr:

; 1420 : 
; 1421 :     /* Check for PER 1 GRA event */
; 1422 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1423 : }

  001c6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ca	c3		 ret	 0
z900_subtract_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
temp$1 = 32
b2$ = 36
x2$ = 40
tv78 = 44
tv89 = 48
r1$ = 52
n$ = 56
effective_addr2$ = 64
inst$ = 96
regs$ = 104
z900_subtract PROC

; 1366 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1367 : int     r1;                             /* Value of R field          */
; 1368 : int     x2;                             /* Index register            */
; 1369 : int     b2;                             /* Base of effective addr    */
; 1370 : VADR    effective_addr2;                /* Effective address         */
; 1371 : U32     n;                              /* 32-bit operand values     */
; 1372 : 
; 1373 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 20	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 10	 shr	 eax, 16
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR x2$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 14	 shr	 eax, 20
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 34	 mov	 DWORD PTR r1$[rsp], eax
  0004f	83 7c 24 28 00	 cmp	 DWORD PTR x2$[rsp], 0
  00054	74 0a		 je	 SHORT $LN13@z900_subtr
  00056	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN14@z900_subtr
$LN13@z900_subtr:
  00060	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN14@z900_subtr:
  00068	83 7c 24 2c 00	 cmp	 DWORD PTR tv78[rsp], 0
  0006d	74 22		 je	 SHORT $LN5@z900_subtr
  0006f	48 63 44 24 28	 movsxd	 rax, DWORD PTR x2$[rsp]
  00074	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00079	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00086	48 03 c8	 add	 rcx, rax
  00089	48 8b c1	 mov	 rax, rcx
  0008c	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN5@z900_subtr:
  00091	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00095	c1 e8 0c	 shr	 eax, 12
  00098	83 e0 0f	 and	 eax, 15
  0009b	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  0009f	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a4	74 0a		 je	 SHORT $LN15@z900_subtr
  000a6	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000ae	eb 08		 jmp	 SHORT $LN16@z900_subtr
$LN15@z900_subtr:
  000b0	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN16@z900_subtr:
  000b8	83 7c 24 30 00	 cmp	 DWORD PTR tv89[rsp], 0
  000bd	74 22		 je	 SHORT $LN6@z900_subtr
  000bf	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  000c4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c9	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_subtr:
  000e1	33 c0		 xor	 eax, eax
  000e3	83 f8 04	 cmp	 eax, 4
  000e6	74 1c		 je	 SHORT $LN7@z900_subtr
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000f4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000f9	48 23 c8	 and	 rcx, rax
  000fc	48 8b c1	 mov	 rax, rcx
  000ff	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN7@z900_subtr:
$LN4@z900_subtr:
  00104	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00109	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010d	48 83 c0 04	 add	 rax, 4
  00111	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00116	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0011a	33 c0		 xor	 eax, eax
  0011c	83 f8 04	 cmp	 eax, 4
  0011f	74 0c		 je	 SHORT $LN8@z900_subtr
  00121	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00126	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@z900_subtr:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 d1		 jne	 SHORT $LN4@z900_subtr

; 1374 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );

  00133	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00138	8b 54 24 28	 mov	 edx, DWORD PTR x2$[rsp]
  0013c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2

; 1375 : 
; 1376 :     /* Load second operand from operand address */
; 1377 :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00146	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0014b	8b 54 24 24	 mov	 edx, DWORD PTR b2$[rsp]
  0014f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00154	e8 00 00 00 00	 call	 z900_vfetch4
  00159	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1378 : 
; 1379 :     /* Subtract signed operands and set condition code */
; 1380 :     regs->psw.cc =

  0015d	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  00162	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00167	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0016c	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  00174	44 8b 44 24 38	 mov	 r8d, DWORD PTR n$[rsp]
  00179	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0017e	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  00185	e8 00 00 00 00	 call	 sub_signed
  0018a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0018f	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1381 :             sub_signed (&(regs->GR_L(r1)),
; 1382 :                     regs->GR_L(r1),
; 1383 :                     n);
; 1384 : 
; 1385 :     /* Program check if fixed-point overflow */
; 1386 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  00192	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00197	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  0019b	83 f8 03	 cmp	 eax, 3
  0019e	75 25		 jne	 SHORT $LN9@z900_subtr
  001a0	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001a5	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  001a9	83 e0 08	 and	 eax, 8
  001ac	85 c0		 test	 eax, eax
  001ae	74 15		 je	 SHORT $LN9@z900_subtr

; 1387 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  001b0	ba 08 00 00 00	 mov	 edx, 8
  001b5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001ba	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001bf	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@z900_subtr:

; 1388 : 
; 1389 :     /* Check for PER 1 GRA event */
; 1390 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1391 : }

  001c5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c9	c3		 ret	 0
z900_subtract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
n$ = 52
m$ = 56
r1$ = 60
effective_addr2$ = 64
b2$ = 72
temp$1 = 76
p1$ = 80
b2$2 = 88
b1$3 = 96
tv146 = 104
tv151 = 108
tv157 = 112
tv204 = 116
tv210 = 120
bp1$ = 128
p2$ = 136
r3$ = 144
tv172 = 152
tv226 = 160
tv242 = 168
rwork$4 = 176
__$ArrayPad$ = 240
inst$ = 272
regs$ = 280
z900_store_multiple PROC

; 1256 : {

$LN52:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1257 : int     r1, r3;                         /* Register numbers          */
; 1258 : int     b2;                             /* effective address base    */
; 1259 : VADR    effective_addr2;                /* effective address         */
; 1260 : int     i, m, n;                        /* Integer work areas        */
; 1261 : U32    *p1, *p2;                        /* Mainstor pointers         */
; 1262 : BYTE   *bp1;                            /* Unaligned mainstor ptr    */
; 1263 : 
; 1264 :     RS( inst, regs, r1, r3, b2, effective_addr2 );

  00023	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	e8 00 00 00 00	 call	 fetch_fw_noswap
  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 _byteswap_ulong
  00037	89 44 24 4c	 mov	 DWORD PTR temp$1[rsp], eax
  0003b	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0003f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00044	8b c0		 mov	 eax, eax
  00046	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0004b	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0004f	c1 e8 0c	 shr	 eax, 12
  00052	83 e0 0f	 and	 eax, 15
  00055	89 44 24 48	 mov	 DWORD PTR b2$[rsp], eax
  00059	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0005d	c1 e8 10	 shr	 eax, 16
  00060	83 e0 0f	 and	 eax, 15
  00063	89 84 24 90 00
	00 00		 mov	 DWORD PTR r3$[rsp], eax
  0006a	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0006e	c1 e8 14	 shr	 eax, 20
  00071	83 e0 0f	 and	 eax, 15
  00074	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
  00078	83 7c 24 48 00	 cmp	 DWORD PTR b2$[rsp], 0
  0007d	74 4b		 je	 SHORT $LN26@z900_store
  0007f	48 63 44 24 48	 movsxd	 rax, DWORD PTR b2$[rsp]
  00084	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0008c	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  000a4	33 c0		 xor	 eax, eax
  000a6	83 f8 04	 cmp	 eax, 4
  000a9	74 1f		 je	 SHORT $LN27@z900_store
  000ab	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b3	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000bf	48 23 c8	 and	 rcx, rax
  000c2	48 8b c1	 mov	 rax, rcx
  000c5	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN27@z900_store:
$LN26@z900_store:
$LN4@z900_store:
  000ca	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d2	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000d6	48 83 c0 04	 add	 rax, 4
  000da	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e2	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000e6	33 c0		 xor	 eax, eax
  000e8	83 f8 04	 cmp	 eax, 4
  000eb	74 0f		 je	 SHORT $LN28@z900_store
  000ed	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000f5	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN28@z900_store:
  000fc	33 c0		 xor	 eax, eax
  000fe	85 c0		 test	 eax, eax
  00100	75 c8		 jne	 SHORT $LN4@z900_store

; 1265 :     PER_ZEROADDR_XCHECK( regs, b2 );

  00102	8b 54 24 48	 mov	 edx, DWORD PTR b2$[rsp]
  00106	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	e8 00 00 00 00	 call	 z900_per3_zero_xcheck

; 1266 : 
; 1267 :     /* Calculate number of bytes to store */
; 1268 :     n = (((r3 - r1) & 0xF) + 1) << 2;

  00113	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  00117	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR r3$[rsp]
  0011e	2b c8		 sub	 ecx, eax
  00120	8b c1		 mov	 eax, ecx
  00122	83 e0 0f	 and	 eax, 15
  00125	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [rax*4+4]
  0012c	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 1269 : 
; 1270 :     /* Calculate number of bytes to next boundary */
; 1271 :     m = PAGEFRAME_PAGESIZE - ((VADR_L)effective_addr2 & PAGEFRAME_BYTEMASK);

  00130	48 8b 44 24 40	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  00135	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0013b	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00140	48 2b c8	 sub	 rcx, rax
  00143	48 8b c1	 mov	 rax, rcx
  00146	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax

; 1272 : 
; 1273 :     /* Get address of first page */
; 1274 :     bp1 = (BYTE*) MADDRL( effective_addr2, n, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0014a	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  0014f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00157	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0015b	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0015f	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00167	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0016f	44 8b 44 24 48	 mov	 r8d, DWORD PTR b2$[rsp]
  00174	48 8b d0	 mov	 rdx, rax
  00177	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0017c	e8 00 00 00 00	 call	 z900_maddr_l
  00181	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR bp1$[rsp], rax

; 1275 :     p1  = (U32*)  bp1;

  00189	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bp1$[rsp]
  00191	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax

; 1276 : 
; 1277 :     if (likely( n <= m ))

  00196	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  0019a	39 44 24 34	 cmp	 DWORD PTR n$[rsp], eax
  0019e	7f 0a		 jg	 SHORT $LN38@z900_store
  001a0	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  001a8	eb 08		 jmp	 SHORT $LN39@z900_store
$LN38@z900_store:
  001aa	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN39@z900_store:
  001b2	83 7c 24 68 00	 cmp	 DWORD PTR tv146[rsp], 0
  001b7	0f 84 29 01 00
	00		 je	 $LN29@z900_store

; 1278 :     {
; 1279 :         /* boundary not crossed */
; 1280 :         n >>= 2;

  001bd	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  001c1	c1 f8 02	 sar	 eax, 2
  001c4	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 1281 :         if (likely(!(((uintptr_t)effective_addr2) & 0x03)))

  001c8	48 8b 44 24 40	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  001cd	48 83 e0 03	 and	 rax, 3
  001d1	48 85 c0	 test	 rax, rax
  001d4	75 0a		 jne	 SHORT $LN40@z900_store
  001d6	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv151[rsp], 1
  001de	eb 08		 jmp	 SHORT $LN41@z900_store
$LN40@z900_store:
  001e0	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
$LN41@z900_store:
  001e8	83 7c 24 6c 00	 cmp	 DWORD PTR tv151[rsp], 0
  001ed	74 0a		 je	 SHORT $LN44@z900_store
  001ef	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  001f7	eb 08		 jmp	 SHORT $LN45@z900_store
$LN44@z900_store:
  001f9	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN45@z900_store:
  00201	83 7c 24 70 00	 cmp	 DWORD PTR tv157[rsp], 0
  00206	74 71		 je	 SHORT $LN31@z900_store

; 1282 :         {
; 1283 :             for (i=0; i < n; i++)

  00208	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00210	eb 0a		 jmp	 SHORT $LN7@z900_store
$LN5@z900_store:
  00212	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00216	ff c0		 inc	 eax
  00218	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@z900_store:
  0021c	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00220	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00224	7d 51		 jge	 SHORT $LN6@z900_store

; 1284 :                 store_fw( p1++, regs->GR_L( (r1 + i) & 0xF ));

  00226	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  0022b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
  00233	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00237	8b 4c 24 3c	 mov	 ecx, DWORD PTR r1$[rsp]
  0023b	03 c8		 add	 ecx, eax
  0023d	8b c1		 mov	 eax, ecx
  0023f	83 e0 0f	 and	 eax, 15
  00242	48 98		 cdqe
  00244	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0024c	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  00253	e8 00 00 00 00	 call	 _byteswap_ulong
  00258	8b d0		 mov	 edx, eax
  0025a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv172[rsp]
  00262	e8 00 00 00 00	 call	 store_fw_noswap
  00267	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  0026c	48 83 c0 04	 add	 rax, 4
  00270	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax
  00275	eb 9b		 jmp	 SHORT $LN5@z900_store
$LN6@z900_store:

; 1285 :         }

  00277	eb 68		 jmp	 SHORT $LN32@z900_store
$LN31@z900_store:

; 1286 :         else
; 1287 :         {
; 1288 :             for (i=0; i < n; i++, bp1 += 4)

  00279	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00281	eb 1e		 jmp	 SHORT $LN10@z900_store
$LN8@z900_store:
  00283	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00287	ff c0		 inc	 eax
  00289	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
  0028d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bp1$[rsp]
  00295	48 83 c0 04	 add	 rax, 4
  00299	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR bp1$[rsp], rax
$LN10@z900_store:
  002a1	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  002a5	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  002a9	7d 36		 jge	 SHORT $LN9@z900_store

; 1289 :                 store_fw( bp1, regs->GR_L( (r1 + i) & 0xF ));

  002ab	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  002af	8b 4c 24 3c	 mov	 ecx, DWORD PTR r1$[rsp]
  002b3	03 c8		 add	 ecx, eax
  002b5	8b c1		 mov	 eax, ecx
  002b7	83 e0 0f	 and	 eax, 15
  002ba	48 98		 cdqe
  002bc	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002c4	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  002cb	e8 00 00 00 00	 call	 _byteswap_ulong
  002d0	8b d0		 mov	 edx, eax
  002d2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR bp1$[rsp]
  002da	e8 00 00 00 00	 call	 store_fw_noswap
  002df	eb a2		 jmp	 SHORT $LN8@z900_store
$LN9@z900_store:
$LN32@z900_store:

; 1290 :         }
; 1291 :         ITIMER_UPDATE( effective_addr2, (n*4)-1, regs );
; 1292 :     }

  002e1	e9 c2 02 00 00	 jmp	 $LN30@z900_store
$LN29@z900_store:

; 1293 :     else
; 1294 :     {
; 1295 :         /* boundary crossed, get address of the 2nd page */
; 1296 :         effective_addr2 += m;

  002e6	48 63 44 24 38	 movsxd	 rax, DWORD PTR m$[rsp]
  002eb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  002f0	48 03 c8	 add	 rcx, rax
  002f3	48 8b c1	 mov	 rax, rcx
  002f6	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 1297 :         effective_addr2 &= ADDRESS_MAXWRAP( regs );

  002fb	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00303	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0030a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0030f	48 23 c8	 and	 rcx, rax
  00312	48 8b c1	 mov	 rax, rcx
  00315	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 1298 : 
; 1299 :         p2 = (U32*) MADDRL(effective_addr2, n - m, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0031a	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  0031e	8b 4c 24 34	 mov	 ecx, DWORD PTR n$[rsp]
  00322	2b c8		 sub	 ecx, eax
  00324	8b c1		 mov	 eax, ecx
  00326	48 98		 cdqe
  00328	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00330	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00334	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00338	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00340	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00348	44 8b 44 24 48	 mov	 r8d, DWORD PTR b2$[rsp]
  0034d	48 8b d0	 mov	 rdx, rax
  00350	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00355	e8 00 00 00 00	 call	 z900_maddr_l
  0035a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR p2$[rsp], rax

; 1300 :         if (likely( !(m & 0x3) ))

  00362	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  00366	83 e0 03	 and	 eax, 3
  00369	85 c0		 test	 eax, eax
  0036b	75 0a		 jne	 SHORT $LN46@z900_store
  0036d	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv204[rsp], 1
  00375	eb 08		 jmp	 SHORT $LN47@z900_store
$LN46@z900_store:
  00377	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv204[rsp], 0
$LN47@z900_store:
  0037f	83 7c 24 74 00	 cmp	 DWORD PTR tv204[rsp], 0
  00384	74 0a		 je	 SHORT $LN50@z900_store
  00386	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv210[rsp], 1
  0038e	eb 08		 jmp	 SHORT $LN51@z900_store
$LN50@z900_store:
  00390	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv210[rsp], 0
$LN51@z900_store:
  00398	83 7c 24 78 00	 cmp	 DWORD PTR tv210[rsp], 0
  0039d	0f 84 fa 00 00
	00		 je	 $LN33@z900_store

; 1301 :         {
; 1302 :             /* word aligned */
; 1303 :             m >>= 2;

  003a3	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  003a7	c1 f8 02	 sar	 eax, 2
  003aa	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax

; 1304 : 
; 1305 :             for (i=0; i < m; i++)

  003ae	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003b6	eb 0a		 jmp	 SHORT $LN13@z900_store
$LN11@z900_store:
  003b8	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003bc	ff c0		 inc	 eax
  003be	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@z900_store:
  003c2	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  003c6	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  003ca	7d 51		 jge	 SHORT $LN12@z900_store

; 1306 :                 store_fw( p1++, regs->GR_L( (r1 + i) & 0xF ));

  003cc	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  003d1	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv226[rsp], rax
  003d9	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003dd	8b 4c 24 3c	 mov	 ecx, DWORD PTR r1$[rsp]
  003e1	03 c8		 add	 ecx, eax
  003e3	8b c1		 mov	 eax, ecx
  003e5	83 e0 0f	 and	 eax, 15
  003e8	48 98		 cdqe
  003ea	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003f2	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  003f9	e8 00 00 00 00	 call	 _byteswap_ulong
  003fe	8b d0		 mov	 edx, eax
  00400	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv226[rsp]
  00408	e8 00 00 00 00	 call	 store_fw_noswap
  0040d	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  00412	48 83 c0 04	 add	 rax, 4
  00416	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax
  0041b	eb 9b		 jmp	 SHORT $LN11@z900_store
$LN12@z900_store:

; 1307 : 
; 1308 :             n >>= 2;

  0041d	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00421	c1 f8 02	 sar	 eax, 2
  00424	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 1309 : 
; 1310 :             for (; i < n; i++)

  00428	eb 0a		 jmp	 SHORT $LN16@z900_store
$LN14@z900_store:
  0042a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0042e	ff c0		 inc	 eax
  00430	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@z900_store:
  00434	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00438	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0043c	7d 5a		 jge	 SHORT $LN15@z900_store

; 1311 :                 store_fw( p2++, regs->GR_L( (r1 + i) & 0xF ));

  0043e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  00446	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv242[rsp], rax
  0044e	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00452	8b 4c 24 3c	 mov	 ecx, DWORD PTR r1$[rsp]
  00456	03 c8		 add	 ecx, eax
  00458	8b c1		 mov	 eax, ecx
  0045a	83 e0 0f	 and	 eax, 15
  0045d	48 98		 cdqe
  0045f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00467	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  0046e	e8 00 00 00 00	 call	 _byteswap_ulong
  00473	8b d0		 mov	 edx, eax
  00475	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv242[rsp]
  0047d	e8 00 00 00 00	 call	 store_fw_noswap
  00482	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  0048a	48 83 c0 04	 add	 rax, 4
  0048e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR p2$[rsp], rax
  00496	eb 92		 jmp	 SHORT $LN14@z900_store
$LN15@z900_store:

; 1312 :         }

  00498	e9 0b 01 00 00	 jmp	 $LN34@z900_store
$LN33@z900_store:

; 1313 :         else
; 1314 :         {
; 1315 :             /* worst case */
; 1316 :             U32 rwork[16];
; 1317 :             BYTE *b1, *b2;
; 1318 : 
; 1319 :             for (i=0; i < (n >> 2); i++)

  0049d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  004a5	eb 0a		 jmp	 SHORT $LN19@z900_store
$LN17@z900_store:
  004a7	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  004ab	ff c0		 inc	 eax
  004ad	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@z900_store:
  004b1	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  004b5	c1 f8 02	 sar	 eax, 2
  004b8	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  004bc	7d 33		 jge	 SHORT $LN18@z900_store

; 1320 :                 rwork[i] = CSWAP32( regs->GR_L( (r1 + i) & 0xF ));

  004be	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  004c2	8b 4c 24 3c	 mov	 ecx, DWORD PTR r1$[rsp]
  004c6	03 c8		 add	 ecx, eax
  004c8	8b c1		 mov	 eax, ecx
  004ca	83 e0 0f	 and	 eax, 15
  004cd	48 98		 cdqe
  004cf	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004d7	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  004de	e8 00 00 00 00	 call	 _byteswap_ulong
  004e3	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  004e8	89 84 8c b0 00
	00 00		 mov	 DWORD PTR rwork$4[rsp+rcx*4], eax
  004ef	eb b6		 jmp	 SHORT $LN17@z900_store
$LN18@z900_store:

; 1321 : 
; 1322 :             b1 = (BYTE*) &rwork[0];

  004f1	b8 04 00 00 00	 mov	 eax, 4
  004f6	48 6b c0 00	 imul	 rax, rax, 0
  004fa	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR rwork$4[rsp+rax]
  00502	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax

; 1323 :             b2 = (BYTE*) p1;

  00507	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  0050c	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax

; 1324 : 
; 1325 :             for (i=0; i < m; i++)

  00511	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00519	eb 0a		 jmp	 SHORT $LN22@z900_store
$LN20@z900_store:
  0051b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0051f	ff c0		 inc	 eax
  00521	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@z900_store:
  00525	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  00529	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0052d	7d 2b		 jge	 SHORT $LN21@z900_store

; 1326 :                 *b2++ = *b1++;

  0052f	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00534	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b1$3[rsp]
  00539	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0053c	88 08		 mov	 BYTE PTR [rax], cl
  0053e	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00543	48 ff c0	 inc	 rax
  00546	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax
  0054b	48 8b 44 24 60	 mov	 rax, QWORD PTR b1$3[rsp]
  00550	48 ff c0	 inc	 rax
  00553	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax
  00558	eb c1		 jmp	 SHORT $LN20@z900_store
$LN21@z900_store:

; 1327 : 
; 1328 :             b2 = (BYTE*) p2;

  0055a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  00562	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax

; 1329 : 
; 1330 :             for (; i < n; i++)

  00567	eb 0a		 jmp	 SHORT $LN25@z900_store
$LN23@z900_store:
  00569	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0056d	ff c0		 inc	 eax
  0056f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@z900_store:
  00573	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00577	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0057b	7d 2b		 jge	 SHORT $LN24@z900_store

; 1331 :                 *b2++ = *b1++;

  0057d	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00582	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b1$3[rsp]
  00587	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0058a	88 08		 mov	 BYTE PTR [rax], cl
  0058c	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00591	48 ff c0	 inc	 rax
  00594	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax
  00599	48 8b 44 24 60	 mov	 rax, QWORD PTR b1$3[rsp]
  0059e	48 ff c0	 inc	 rax
  005a1	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax
  005a6	eb c1		 jmp	 SHORT $LN23@z900_store
$LN24@z900_store:
$LN34@z900_store:
$LN30@z900_store:

; 1332 :         }
; 1333 :     }
; 1334 : 
; 1335 : } /* end DEF_INST( store_multiple ) */

  005a8	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005b0	48 33 cc	 xor	 rcx, rsp
  005b3	e8 00 00 00 00	 call	 __security_check_cookie
  005b8	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  005bf	c3		 ret	 0
z900_store_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
temp$1 = 32
b2$ = 36
x2$ = 40
tv78 = 44
tv89 = 48
r1$ = 52
effective_addr2$ = 56
inst$ = 80
regs$ = 88
z900_store_halfword PROC

; 1238 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1239 : int     r1;                             /* Value of R field          */
; 1240 : int     x2;                             /* Index register            */
; 1241 : int     b2;                             /* Base of effective addr    */
; 1242 : VADR    effective_addr2;                /* Effective address         */
; 1243 : 
; 1244 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 20	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 10	 shr	 eax, 16
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR x2$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 14	 shr	 eax, 20
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 34	 mov	 DWORD PTR r1$[rsp], eax
  0004f	83 7c 24 28 00	 cmp	 DWORD PTR x2$[rsp], 0
  00054	74 0a		 je	 SHORT $LN12@z900_store
  00056	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN13@z900_store
$LN12@z900_store:
  00060	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN13@z900_store:
  00068	83 7c 24 2c 00	 cmp	 DWORD PTR tv78[rsp], 0
  0006d	74 22		 je	 SHORT $LN5@z900_store
  0006f	48 63 44 24 28	 movsxd	 rax, DWORD PTR x2$[rsp]
  00074	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00079	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00081	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00086	48 03 c8	 add	 rcx, rax
  00089	48 8b c1	 mov	 rax, rcx
  0008c	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN5@z900_store:
  00091	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00095	c1 e8 0c	 shr	 eax, 12
  00098	83 e0 0f	 and	 eax, 15
  0009b	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  0009f	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a4	74 0a		 je	 SHORT $LN14@z900_store
  000a6	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000ae	eb 08		 jmp	 SHORT $LN15@z900_store
$LN14@z900_store:
  000b0	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN15@z900_store:
  000b8	83 7c 24 30 00	 cmp	 DWORD PTR tv89[rsp], 0
  000bd	74 22		 je	 SHORT $LN6@z900_store
  000bf	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  000c4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000c9	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000d1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_store:
  000e1	33 c0		 xor	 eax, eax
  000e3	83 f8 04	 cmp	 eax, 4
  000e6	74 1c		 je	 SHORT $LN7@z900_store
  000e8	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000f4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000f9	48 23 c8	 and	 rcx, rax
  000fc	48 8b c1	 mov	 rax, rcx
  000ff	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN7@z900_store:
$LN4@z900_store:
  00104	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00109	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010d	48 83 c0 04	 add	 rax, 4
  00111	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00116	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0011a	33 c0		 xor	 eax, eax
  0011c	83 f8 04	 cmp	 eax, 4
  0011f	74 0c		 je	 SHORT $LN8@z900_store
  00121	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00126	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@z900_store:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 d1		 jne	 SHORT $LN4@z900_store

; 1245 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );

  00133	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00138	8b 54 24 28	 mov	 edx, DWORD PTR x2$[rsp]
  0013c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2

; 1246 : 
; 1247 :     /* Store rightmost 2 bytes of R1 register at operand address */
; 1248 :     ARCH_DEP(vstore2) ( regs->GR_LHL(r1), effective_addr2, b2, regs );

  00146	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  0014b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR regs$[rsp]
  00150	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00155	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  0015a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0015f	0f b7 8c c1 80
	02 00 00	 movzx	 ecx, WORD PTR [rcx+rax*8+640]
  00167	e8 00 00 00 00	 call	 z900_vstore2

; 1249 : }

  0016c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00170	c3		 ret	 0
z900_store_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b2$ = 32
temp$1 = 36
effective_addr2$ = 40
dreg$ = 48
$T2 = 64
ETOD$ = 80
__$ArrayPad$ = 96
inst$ = 144
regs$ = 152
z900_store_clock PROC

; 1127 : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1128 : int     b2;                             /* Base of effective addr    */
; 1129 : VADR    effective_addr2;                /* Effective address         */
; 1130 : U64     dreg;                           /* Double word work area     */
; 1131 : ETOD    ETOD;                           /* Extended TOD clock        */
; 1132 : 
; 1133 :     S( inst, regs, b2, effective_addr2 );

  0001f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00027	e8 00 00 00 00	 call	 fetch_fw_noswap
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 _byteswap_ulong
  00033	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00037	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00040	8b c0		 mov	 eax, eax
  00042	48 89 44 24 28	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00047	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0004b	c1 e8 0c	 shr	 eax, 12
  0004e	83 e0 0f	 and	 eax, 15
  00051	89 44 24 20	 mov	 DWORD PTR b2$[rsp], eax
  00055	83 7c 24 20 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005a	74 44		 je	 SHORT $LN5@z900_store
  0005c	48 63 44 24 20	 movsxd	 rax, DWORD PTR b2$[rsp]
  00061	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00069	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00071	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00076	48 03 c8	 add	 rcx, rax
  00079	48 8b c1	 mov	 rax, rcx
  0007c	48 89 44 24 28	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00081	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00089	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00090	48 8b 4c 24 28	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00095	48 23 c8	 and	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	48 89 44 24 28	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN5@z900_store:
$LN4@z900_store:
  000a0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000a8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ac	48 83 c0 04	 add	 rax, 4
  000b0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b8	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bc	33 c0		 xor	 eax, eax
  000be	83 f8 04	 cmp	 eax, 4
  000c1	74 0f		 je	 SHORT $LN6@z900_store
  000c3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_store:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 c8		 jne	 SHORT $LN4@z900_store

; 1134 :     PER_ZEROADDR_XCHECK( regs, b2 );

  000d8	8b 54 24 20	 mov	 edx, DWORD PTR b2$[rsp]
  000dc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e4	e8 00 00 00 00	 call	 z900_per3_zero_xcheck

; 1135 : 
; 1136 : #if defined( _FEATURE_SIE )
; 1137 : 
; 1138 :     if (SIE_STATE_BIT_ON( regs, IC2, STCK ))

  000e9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000f1	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  000f7	d1 e8		 shr	 eax, 1
  000f9	83 e0 01	 and	 eax, 1
  000fc	85 c0		 test	 eax, eax
  000fe	74 41		 je	 SHORT $LN7@z900_store
  00100	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00108	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  0010f	b9 01 00 00 00	 mov	 ecx, 1
  00114	48 6b c9 02	 imul	 rcx, rcx, 2
  00118	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  0011d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00122	85 c0		 test	 eax, eax
  00124	74 1b		 je	 SHORT $LN7@z900_store

; 1139 :         longjmp( regs->progjmp, SIE_INTERCEPT_INST );

  00126	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012e	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00134	ba fc ff ff ff	 mov	 edx, -4
  00139	48 8b c8	 mov	 rcx, rax
  0013c	e8 00 00 00 00	 call	 longjmp
$LN7@z900_store:

; 1140 : #endif
; 1141 : 
; 1142 : #if defined( FEATURE_025_STORE_CLOCK_FAST_FACILITY )
; 1143 : 
; 1144 :     if (inst[1] == 0x7C) // STCKF only

  00141	b8 01 00 00 00	 mov	 eax, 1
  00146	48 6b c0 01	 imul	 rax, rax, 1
  0014a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00152	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00156	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  00159	75 1a		 jne	 SHORT $LN8@z900_store

; 1145 :     {
; 1146 :         /* Retrieve the TOD clock value without embedded CPU address */
; 1147 :         etod_clock( regs, &ETOD, ETOD_fast );

  0015b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00161	48 8d 54 24 50	 lea	 rdx, QWORD PTR ETOD$[rsp]
  00166	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0016e	e8 00 00 00 00	 call	 etod_clock

; 1148 :     }

  00173	eb 1b		 jmp	 SHORT $LN9@z900_store
$LN8@z900_store:

; 1149 :     else
; 1150 : #endif
; 1151 :     {
; 1152 :         /* Perform serialization before fetching clock */
; 1153 :         PERFORM_SERIALIZATION( regs );

  00175	0f ae f0	 mfence

; 1154 : 
; 1155 :         /* Retrieve the TOD clock value with embedded CPU address*/
; 1156 :         etod_clock( regs, &ETOD, ETOD_standard );

  00178	41 b8 02 00 00
	00		 mov	 r8d, 2
  0017e	48 8d 54 24 50	 lea	 rdx, QWORD PTR ETOD$[rsp]
  00183	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0018b	e8 00 00 00 00	 call	 etod_clock
$LN9@z900_store:

; 1157 :     }
; 1158 : 
; 1159 :     /* Shift out epoch */
; 1160 :     dreg = ETOD2TOD( ETOD );

  00190	48 8d 44 24 40	 lea	 rax, QWORD PTR $T2[rsp]
  00195	48 8d 4c 24 50	 lea	 rcx, QWORD PTR ETOD$[rsp]
  0019a	48 8b f8	 mov	 rdi, rax
  0019d	48 8b f1	 mov	 rsi, rcx
  001a0	b9 10 00 00 00	 mov	 ecx, 16
  001a5	f3 a4		 rep movsb
  001a7	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  001ac	e8 00 00 00 00	 call	 ETOD2TOD
  001b1	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 1161 : 
; 1162 : // /*debug*/logmsg("Store TOD clock=%16.16"PRIX64"\n", dreg);
; 1163 : 
; 1164 :     /* Store TOD clock value at operand address */
; 1165 :     ARCH_DEP( vstore8 )( dreg, effective_addr2, b2, regs );

  001b6	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001be	44 8b 44 24 20	 mov	 r8d, DWORD PTR b2$[rsp]
  001c3	48 8b 54 24 28	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  001c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dreg$[rsp]
  001cd	e8 00 00 00 00	 call	 z900_vstore8

; 1166 : 
; 1167 : #if defined( FEATURE_025_STORE_CLOCK_FAST_FACILITY )
; 1168 : 
; 1169 :     if (inst[1] != 0x7C) // not STCKF

  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 01	 imul	 rax, rax, 1
  001db	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  001e3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  001e7	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  001ea	74 03		 je	 SHORT $LN10@z900_store

; 1170 : #endif
; 1171 :     {
; 1172 :         /* Perform serialization after storing clock */
; 1173 :         PERFORM_SERIALIZATION( regs );

  001ec	0f ae f0	 mfence
$LN10@z900_store:

; 1174 :     }
; 1175 : 
; 1176 :     /* Set condition code zero */
; 1177 :     regs->psw.cc = 0;

  001ef	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001f7	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN11@z900_store:

; 1178 : }

  001fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00200	48 33 cc	 xor	 rcx, rsp
  00203	e8 00 00 00 00	 call	 __security_check_cookie
  00208	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0020c	5f		 pop	 rdi
  0020d	5e		 pop	 rsi
  0020e	c3		 ret	 0
z900_store_clock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
r1$ = 52
b2$ = 56
rbyte$ = 60
r3$ = 64
temp$1 = 68
tv94 = 72
effective_addr2$ = 80
inst$ = 112
regs$ = 120
z900_store_characters_under_mask PROC

; 1075 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1076 : int     r1, r3;                         /* Register numbers          */
; 1077 : int     b2;                             /* effective address base    */
; 1078 : VADR    effective_addr2;                /* effective address         */
; 1079 : int     i;                              /* Integer work area         */
; 1080 : BYTE    rbyte[4];                       /* Byte work area            */
; 1081 : 
; 1082 :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 44	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 38	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 34	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 38 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN7@z900_store
  00064	48 63 44 24 38	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN8@z900_store
  0008d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN8@z900_store:
$LN7@z900_store:
$LN4@z900_store:
  000a9	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN9@z900_store
  000c6	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN9@z900_store:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_store

; 1083 :     PER_ZEROADDR_XCHECK( regs, b2 );

  000d8	8b 54 24 38	 mov	 edx, DWORD PTR b2$[rsp]
  000dc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000e1	e8 00 00 00 00	 call	 z900_per3_zero_xcheck

; 1084 : 
; 1085 :     switch (r3) {

  000e6	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  000ea	89 44 24 48	 mov	 DWORD PTR tv94[rsp], eax
  000ee	83 7c 24 48 07	 cmp	 DWORD PTR tv94[rsp], 7
  000f3	74 09		 je	 SHORT $LN10@z900_store
  000f5	83 7c 24 48 0f	 cmp	 DWORD PTR tv94[rsp], 15
  000fa	74 4c		 je	 SHORT $LN11@z900_store
  000fc	eb 74		 jmp	 SHORT $LN12@z900_store
$LN10@z900_store:

; 1086 : 
; 1087 :     case 7:
; 1088 :         /* Optimized case */
; 1089 :         store_fw(rbyte, regs->GR_L(r1));

  000fe	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  00103	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00108	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  0010f	e8 00 00 00 00	 call	 _byteswap_ulong
  00114	8b d0		 mov	 edx, eax
  00116	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR rbyte$[rsp]
  0011b	e8 00 00 00 00	 call	 store_fw_noswap

; 1090 :         ARCH_DEP(vstorec) (rbyte+1, 2, effective_addr2, b2, regs);

  00120	48 8d 44 24 3d	 lea	 rax, QWORD PTR rbyte$[rsp+1]
  00125	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0012a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0012f	44 8b 4c 24 38	 mov	 r9d, DWORD PTR b2$[rsp]
  00134	4c 8b 44 24 50	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00139	b2 02		 mov	 dl, 2
  0013b	48 8b c8	 mov	 rcx, rax
  0013e	e8 00 00 00 00	 call	 z900_vstorec

; 1091 :         break;

  00143	e9 39 01 00 00	 jmp	 $LN5@z900_store
$LN11@z900_store:

; 1092 : 
; 1093 :     case 15:
; 1094 :         /* Optimized case */
; 1095 :         ARCH_DEP(vstore4) (regs->GR_L(r1), effective_addr2, b2, regs);

  00148	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  0014d	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00152	44 8b 44 24 38	 mov	 r8d, DWORD PTR b2$[rsp]
  00157	48 8b 54 24 50	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  0015c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00161	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  00168	e8 00 00 00 00	 call	 z900_vstore4

; 1096 :         break;

  0016d	e9 0f 01 00 00	 jmp	 $LN5@z900_store
$LN12@z900_store:

; 1097 : 
; 1098 :     default:
; 1099 :         /* Extract value from register by mask */
; 1100 :         i = 0;

  00172	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 1101 :         if (r3 & 0x8) rbyte[i++] = (regs->GR_L(r1) >> 24) & 0xFF;

  0017a	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  0017e	83 e0 08	 and	 eax, 8
  00181	85 c0		 test	 eax, eax
  00183	74 2c		 je	 SHORT $LN13@z900_store
  00185	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  0018a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0018f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00196	c1 e8 18	 shr	 eax, 24
  00199	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0019e	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  001a3	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  001a7	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001ab	ff c0		 inc	 eax
  001ad	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@z900_store:

; 1102 :         if (r3 & 0x4) rbyte[i++] = (regs->GR_L(r1) >> 16) & 0xFF;

  001b1	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  001b5	83 e0 04	 and	 eax, 4
  001b8	85 c0		 test	 eax, eax
  001ba	74 2c		 je	 SHORT $LN14@z900_store
  001bc	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  001c1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001c6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001cd	c1 e8 10	 shr	 eax, 16
  001d0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001d5	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  001da	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  001de	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001e2	ff c0		 inc	 eax
  001e4	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN14@z900_store:

; 1103 :         if (r3 & 0x2) rbyte[i++] = (regs->GR_L(r1) >>  8) & 0xFF;

  001e8	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  001ec	83 e0 02	 and	 eax, 2
  001ef	85 c0		 test	 eax, eax
  001f1	74 2c		 je	 SHORT $LN15@z900_store
  001f3	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  001f8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001fd	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00204	c1 e8 08	 shr	 eax, 8
  00207	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0020c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  00211	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  00215	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00219	ff c0		 inc	 eax
  0021b	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN15@z900_store:

; 1104 :         if (r3 & 0x1) rbyte[i++] = (regs->GR_L(r1)      ) & 0xFF;

  0021f	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  00223	83 e0 01	 and	 eax, 1
  00226	85 c0		 test	 eax, eax
  00228	74 29		 je	 SHORT $LN16@z900_store
  0022a	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  0022f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00234	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0023b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00240	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  00245	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  00249	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0024d	ff c0		 inc	 eax
  0024f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@z900_store:

; 1105 : 
; 1106 :         if (i)

  00253	83 7c 24 30 00	 cmp	 DWORD PTR i$[rsp], 0
  00258	74 27		 je	 SHORT $LN17@z900_store

; 1107 :             ARCH_DEP(vstorec) (rbyte, i-1, effective_addr2, b2, regs);

  0025a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0025e	ff c8		 dec	 eax
  00260	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00265	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0026a	44 8b 4c 24 38	 mov	 r9d, DWORD PTR b2$[rsp]
  0026f	4c 8b 44 24 50	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00274	0f b6 d0	 movzx	 edx, al
  00277	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR rbyte$[rsp]
  0027c	e8 00 00 00 00	 call	 z900_vstorec
$LN17@z900_store:
$LN5@z900_store:

; 1108 : #if defined( MODEL_DEPENDENT_STCM )
; 1109 :         /* If the mask is all zero, we nevertheless access one byte
; 1110 :            from the storage operand, because POP states that an
; 1111 :            access exception may be recognized on the first byte */
; 1112 :         else
; 1113 :             ARCH_DEP(validate_operand) (effective_addr2, b2, 0,
; 1114 :                                         ACCTYPE_WRITE, regs);
; 1115 : #endif
; 1116 :         break;
; 1117 : 
; 1118 :     } /* switch (r3) */
; 1119 : }

  00281	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00285	c3		 ret	 0
z900_store_characters_under_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
temp$1 = 32
b2$ = 36
n$ = 40
r1$ = 44
tv138 = 48
r3$ = 52
effective_addr2$ = 56
inst$ = 80
regs$ = 88
z900_shift_right_single_logical PROC

; 1009 : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1010 : int     r1, r3;                         /* Register numbers          */
; 1011 : int     b2;                             /* effective address base    */
; 1012 : VADR    effective_addr2;                /* effective address         */
; 1013 : U32     n;                              /* Integer work areas        */
; 1014 : 
; 1015 :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 20	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 34	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 2c	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN5@z900_shift
  00064	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN6@z900_shift
  0008d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_shift:
$LN5@z900_shift:
$LN4@z900_shift:
  000a9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN7@z900_shift
  000c6	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@z900_shift:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_shift

; 1016 : 
; 1017 :     /* Use rightmost six bits of operand address as shift count */
; 1018 :     n = effective_addr2 & 0x3F;

  000d8	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  000dd	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  000e1	89 44 24 28	 mov	 DWORD PTR n$[rsp], eax

; 1019 : 
; 1020 :     /* Shift the R1 register */
; 1021 :     regs->GR_L(r1) = n > 31 ? 0 : regs->GR_L(r1) >> n;

  000e5	83 7c 24 28 1f	 cmp	 DWORD PTR n$[rsp], 31
  000ea	76 0a		 jbe	 SHORT $LN9@z900_shift
  000ec	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
  000f4	eb 1b		 jmp	 SHORT $LN10@z900_shift
$LN9@z900_shift:
  000f6	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  000fb	8b 4c 24 28	 mov	 ecx, DWORD PTR n$[rsp]
  000ff	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00104	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  0010b	d3 e8		 shr	 eax, cl
  0010d	89 44 24 30	 mov	 DWORD PTR tv138[rsp], eax
$LN10@z900_shift:
  00111	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00116	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0011b	8b 54 24 30	 mov	 edx, DWORD PTR tv138[rsp]
  0011f	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 1022 : 
; 1023 :     /* Check for PER 1 GRA event */
; 1024 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1025 : }

  00126	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012a	c3		 ret	 0
z900_shift_right_single_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
temp$1 = 36
b2$ = 40
tv138 = 44
n$ = 48
tv145 = 52
tv159 = 56
tv160 = 60
effective_addr2$ = 64
r3$ = 72
inst$ = 96
regs$ = 104
z900_shift_right_single PROC

; 980  : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 981  : int     r1, r3;                         /* Register numbers          */
; 982  : int     b2;                             /* effective address base    */
; 983  : VADR    effective_addr2;                /* effective address         */
; 984  : U32     n;                              /* Integer work areas        */
; 985  : 
; 986  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 48	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN5@z900_shift
  00064	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN6@z900_shift
  0008d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_shift:
$LN5@z900_shift:
$LN4@z900_shift:
  000a9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN7@z900_shift
  000c6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@z900_shift:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_shift

; 987  : 
; 988  :     /* Use rightmost six bits of operand address as shift count */
; 989  :     n = effective_addr2 & 0x3F;

  000d8	48 8b 44 24 40	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  000dd	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  000e1	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 990  : 
; 991  :     /* Shift the signed value of the R1 register */
; 992  :     regs->GR_L(r1) = n > 30 ?

  000e5	83 7c 24 30 1e	 cmp	 DWORD PTR n$[rsp], 30
  000ea	76 30		 jbe	 SHORT $LN11@z900_shift
  000ec	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000f1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000f6	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  000fe	7d 0a		 jge	 SHORT $LN9@z900_shift
  00100	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR tv138[rsp], -1
  00108	eb 08		 jmp	 SHORT $LN10@z900_shift
$LN9@z900_shift:
  0010a	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN10@z900_shift:
  00112	8b 44 24 2c	 mov	 eax, DWORD PTR tv138[rsp]
  00116	89 44 24 34	 mov	 DWORD PTR tv145[rsp], eax
  0011a	eb 1b		 jmp	 SHORT $LN12@z900_shift
$LN11@z900_shift:
  0011c	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00121	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  00125	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0012a	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  00131	d3 f8		 sar	 eax, cl
  00133	89 44 24 34	 mov	 DWORD PTR tv145[rsp], eax
$LN12@z900_shift:
  00137	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0013c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	8b 54 24 34	 mov	 edx, DWORD PTR tv145[rsp]
  00145	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 993  :                     ((S32)regs->GR_L(r1) < 0 ? -1 : 0) :
; 994  :                     (S32)regs->GR_L(r1) >> n;
; 995  : 
; 996  :     /* Set the condition code */
; 997  :     regs->psw.cc = ((S32)regs->GR_L(r1) > 0) ? 2 :

  0014c	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00151	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00156	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0015e	7e 0a		 jle	 SHORT $LN15@z900_shift
  00160	c7 44 24 3c 02
	00 00 00	 mov	 DWORD PTR tv160[rsp], 2
  00168	eb 2e		 jmp	 SHORT $LN16@z900_shift
$LN15@z900_shift:
  0016a	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0016f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00174	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0017c	7d 0a		 jge	 SHORT $LN13@z900_shift
  0017e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv159[rsp], 1
  00186	eb 08		 jmp	 SHORT $LN14@z900_shift
$LN13@z900_shift:
  00188	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv159[rsp], 0
$LN14@z900_shift:
  00190	8b 44 24 38	 mov	 eax, DWORD PTR tv159[rsp]
  00194	89 44 24 3c	 mov	 DWORD PTR tv160[rsp], eax
$LN16@z900_shift:
  00198	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0019d	0f b6 4c 24 3c	 movzx	 ecx, BYTE PTR tv160[rsp]
  001a2	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 998  :                    (((S32)regs->GR_L(r1) < 0) ? 1 : 0);
; 999  : 
; 1000 :     /* Check for PER 1 GRA event */
; 1001 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1002 : }

  001a5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a9	c3		 ret	 0
z900_shift_right_single ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
temp$1 = 36
b2$ = 40
n$ = 44
r3$ = 48
effective_addr2$ = 56
dreg$ = 64
inst$ = 96
regs$ = 104
z900_shift_right_double_logical PROC

; 951  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 952  : int     r1, r3;                         /* Register numbers          */
; 953  : int     b2;                             /* effective address base    */
; 954  : VADR    effective_addr2;                /* effective address         */
; 955  : U32     n;                              /* 32-bit operand values     */
; 956  : U64     dreg;                           /* Double register work area */
; 957  : 
; 958  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 30	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN5@z900_shift
  00064	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN6@z900_shift
  0008d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_shift:
$LN5@z900_shift:
$LN4@z900_shift:
  000a9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN7@z900_shift
  000c6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@z900_shift:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_shift

; 959  : 
; 960  :     ODD_CHECK(r1, regs);

  000d8	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000dc	83 e0 01	 and	 eax, 1
  000df	85 c0		 test	 eax, eax
  000e1	74 15		 je	 SHORT $LN8@z900_shift
  000e3	ba 06 00 00 00	 mov	 edx, 6
  000e8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000ed	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000f2	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@z900_shift:

; 961  : 
; 962  :         /* Use rightmost six bits of operand address as shift count */
; 963  :     n = effective_addr2 & 0x3F;

  000f8	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  000fd	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00101	89 44 24 2c	 mov	 DWORD PTR n$[rsp], eax

; 964  : 
; 965  :     /* Shift the R1 and R1+1 registers */
; 966  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  00105	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0010a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00116	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0011a	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0011e	ff c1		 inc	 ecx
  00120	48 63 c9	 movsxd	 rcx, ecx
  00123	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00128	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  0012f	48 0b c1	 or	 rax, rcx
  00132	48 89 44 24 40	 mov	 QWORD PTR dreg$[rsp], rax

; 967  :     dreg >>= n;

  00137	8b 44 24 2c	 mov	 eax, DWORD PTR n$[rsp]
  0013b	0f b6 c8	 movzx	 ecx, al
  0013e	48 8b 44 24 40	 mov	 rax, QWORD PTR dreg$[rsp]
  00143	48 d3 e8	 shr	 rax, cl
  00146	48 89 44 24 40	 mov	 QWORD PTR dreg$[rsp], rax

; 968  :     regs->GR_L(r1) = dreg >> 32;

  0014b	48 8b 44 24 40	 mov	 rax, QWORD PTR dreg$[rsp]
  00150	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00154	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00159	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0015e	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 969  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00165	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0016a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dreg$[rsp]
  0016f	48 23 c8	 and	 rcx, rax
  00172	48 8b c1	 mov	 rax, rcx
  00175	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00179	ff c1		 inc	 ecx
  0017b	48 63 c9	 movsxd	 rcx, ecx
  0017e	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 970  : 
; 971  :     /* Check for PER 1 GRA event */
; 972  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 973  : }

  0018a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0018e	c3		 ret	 0
z900_shift_right_double_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
temp$1 = 36
dreg$ = 40
b2$ = 48
tv165 = 52
tv166 = 56
effective_addr2$ = 64
n$ = 72
r3$ = 76
inst$ = 96
regs$ = 104
z900_shift_right_double PROC

; 919  : {

$LN14:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 920  : int     r1, r3;                         /* Register numbers          */
; 921  : int     b2;                             /* effective address base    */
; 922  : VADR    effective_addr2;                /* effective address         */
; 923  : U32     n;                              /* 32-bit operand values     */
; 924  : U64     dreg;                           /* Double register work area */
; 925  : 
; 926  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 30	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 4c	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 30 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN5@z900_shift
  00064	48 63 44 24 30	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN6@z900_shift
  0008d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 40	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_shift:
$LN5@z900_shift:
$LN4@z900_shift:
  000a9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN7@z900_shift
  000c6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@z900_shift:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_shift

; 927  : 
; 928  :     ODD_CHECK(r1, regs);

  000d8	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000dc	83 e0 01	 and	 eax, 1
  000df	85 c0		 test	 eax, eax
  000e1	74 15		 je	 SHORT $LN8@z900_shift
  000e3	ba 06 00 00 00	 mov	 edx, 6
  000e8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000ed	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000f2	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@z900_shift:

; 929  : 
; 930  :     /* Use rightmost six bits of operand address as shift count */
; 931  :     n = effective_addr2 & 0x3F;

  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  000fd	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00101	89 44 24 48	 mov	 DWORD PTR n$[rsp], eax

; 932  : 
; 933  :     /* Shift the R1 and R1+1 registers */
; 934  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  00105	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0010a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00116	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0011a	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0011e	ff c1		 inc	 ecx
  00120	48 63 c9	 movsxd	 rcx, ecx
  00123	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00128	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  0012f	48 0b c1	 or	 rax, rcx
  00132	48 89 44 24 28	 mov	 QWORD PTR dreg$[rsp], rax

; 935  :     dreg = (U64)((S64)dreg >> n);

  00137	8b 44 24 48	 mov	 eax, DWORD PTR n$[rsp]
  0013b	0f b6 c8	 movzx	 ecx, al
  0013e	48 8b 44 24 28	 mov	 rax, QWORD PTR dreg$[rsp]
  00143	48 d3 f8	 sar	 rax, cl
  00146	48 89 44 24 28	 mov	 QWORD PTR dreg$[rsp], rax

; 936  :     regs->GR_L(r1) = dreg >> 32;

  0014b	48 8b 44 24 28	 mov	 rax, QWORD PTR dreg$[rsp]
  00150	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00154	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00159	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0015e	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 937  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00165	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0016a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dreg$[rsp]
  0016f	48 23 c8	 and	 rcx, rax
  00172	48 8b c1	 mov	 rax, rcx
  00175	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00179	ff c1		 inc	 ecx
  0017b	48 63 c9	 movsxd	 rcx, ecx
  0017e	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 938  : 
; 939  :     /* Set the condition code */
; 940  :     regs->psw.cc = (S64)dreg > 0 ? 2 : (S64)dreg < 0 ? 1 : 0;

  0018a	48 83 7c 24 28
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  00190	7e 0a		 jle	 SHORT $LN12@z900_shift
  00192	c7 44 24 38 02
	00 00 00	 mov	 DWORD PTR tv166[rsp], 2
  0019a	eb 22		 jmp	 SHORT $LN13@z900_shift
$LN12@z900_shift:
  0019c	48 83 7c 24 28
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  001a2	7d 0a		 jge	 SHORT $LN10@z900_shift
  001a4	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv165[rsp], 1
  001ac	eb 08		 jmp	 SHORT $LN11@z900_shift
$LN10@z900_shift:
  001ae	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv165[rsp], 0
$LN11@z900_shift:
  001b6	8b 44 24 34	 mov	 eax, DWORD PTR tv165[rsp]
  001ba	89 44 24 38	 mov	 DWORD PTR tv166[rsp], eax
$LN13@z900_shift:
  001be	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001c3	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv166[rsp]
  001c8	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 941  : 
; 942  :     /* Check for PER 1 GRA event */
; 943  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 944  : }

  001cb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001cf	c3		 ret	 0
z900_shift_right_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
temp$1 = 32
b2$ = 36
n$ = 40
r1$ = 44
tv138 = 48
r3$ = 52
effective_addr2$ = 56
inst$ = 80
regs$ = 88
z900_shift_left_single_logical PROC

; 896  : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 897  : int     r1, r3;                         /* Register numbers          */
; 898  : int     b2;                             /* effective address base    */
; 899  : VADR    effective_addr2;                /* effective address         */
; 900  : U32     n;                              /* Integer work areas        */
; 901  : 
; 902  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 20	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 34	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 2c	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN5@z900_shift
  00064	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN6@z900_shift
  0008d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_shift:
$LN5@z900_shift:
$LN4@z900_shift:
  000a9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN7@z900_shift
  000c6	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@z900_shift:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_shift

; 903  : 
; 904  :     /* Use rightmost six bits of operand address as shift count */
; 905  :     n = effective_addr2 & 0x3F;

  000d8	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  000dd	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  000e1	89 44 24 28	 mov	 DWORD PTR n$[rsp], eax

; 906  : 
; 907  :     /* Shift the R1 register */
; 908  :     regs->GR_L(r1) = n > 31 ? 0 : regs->GR_L(r1) << n;

  000e5	83 7c 24 28 1f	 cmp	 DWORD PTR n$[rsp], 31
  000ea	76 0a		 jbe	 SHORT $LN9@z900_shift
  000ec	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
  000f4	eb 1b		 jmp	 SHORT $LN10@z900_shift
$LN9@z900_shift:
  000f6	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  000fb	8b 4c 24 28	 mov	 ecx, DWORD PTR n$[rsp]
  000ff	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00104	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  0010b	d3 e0		 shl	 eax, cl
  0010d	89 44 24 30	 mov	 DWORD PTR tv138[rsp], eax
$LN10@z900_shift:
  00111	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00116	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0011b	8b 54 24 30	 mov	 edx, DWORD PTR tv138[rsp]
  0011f	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 909  : 
; 910  :     /* Check for PER 1 GRA event */
; 911  :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 912  : }

  00126	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012a	c3		 ret	 0
z900_shift_left_single_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
temp$1 = 36
n1$ = 40
n$ = 44
i$ = 48
b2$ = 52
tv151 = 56
n2$ = 60
j$ = 64
tv199 = 68
tv200 = 72
effective_addr2$ = 80
r3$ = 88
inst$ = 112
regs$ = 120
z900_shift_left_single PROC

; 836  : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 837  : int     r1, r3;                         /* Register numbers          */
; 838  : int     b2;                             /* effective address base    */
; 839  : VADR    effective_addr2;                /* effective address         */
; 840  : U32     n, n1, n2;                      /* 32-bit operand values     */
; 841  : U32     i, j;                           /* Integer work areas        */
; 842  : 
; 843  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 34	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 58	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 34 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN8@z900_shift
  00064	48 63 44 24 34	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN9@z900_shift
  0008d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN9@z900_shift:
$LN8@z900_shift:
$LN4@z900_shift:
  000a9	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN10@z900_shift
  000c6	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@z900_shift:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_shift

; 844  : 
; 845  :     /* Use rightmost six bits of operand address as shift count */
; 846  :     n = effective_addr2 & 0x3F;

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  000dd	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  000e1	89 44 24 2c	 mov	 DWORD PTR n$[rsp], eax

; 847  : 
; 848  :     /* Fast path if no possible overflow */
; 849  :     if (regs->GR_L(r1) < 0x10000 && n < 16)

  000e5	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000ea	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000ef	81 bc c1 80 02
	00 00 00 00 01
	00		 cmp	 DWORD PTR [rcx+rax*8+640], 65536 ; 00010000H
  000fa	73 67		 jae	 SHORT $LN11@z900_shift
  000fc	83 7c 24 2c 10	 cmp	 DWORD PTR n$[rsp], 16
  00101	73 60		 jae	 SHORT $LN11@z900_shift

; 850  :     {
; 851  :         regs->GR_L(r1) <<= n;

  00103	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00108	8b 4c 24 2c	 mov	 ecx, DWORD PTR n$[rsp]
  0010c	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00111	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  00118	d3 e0		 shl	 eax, cl
  0011a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  0011f	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00124	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 852  :         regs->psw.cc = regs->GR_L(r1) ? 2 : 0;

  0012b	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00130	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00135	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0013d	74 0a		 je	 SHORT $LN16@z900_shift
  0013f	c7 44 24 38 02
	00 00 00	 mov	 DWORD PTR tv151[rsp], 2
  00147	eb 08		 jmp	 SHORT $LN17@z900_shift
$LN16@z900_shift:
  00149	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
$LN17@z900_shift:
  00151	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00156	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv151[rsp]
  0015b	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 853  :         return;

  0015e	e9 29 01 00 00	 jmp	 $LN1@z900_shift
$LN11@z900_shift:

; 854  :     }
; 855  : 
; 856  :     /* Load the numeric and sign portions from the R1 register */
; 857  :     n1 = regs->GR_L(r1) & 0x7FFFFFFF;

  00163	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00168	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0016d	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00174	0f ba f0 1f	 btr	 eax, 31
  00178	89 44 24 28	 mov	 DWORD PTR n1$[rsp], eax

; 858  :     n2 = regs->GR_L(r1) & 0x80000000;

  0017c	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00181	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00186	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0018d	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00192	89 44 24 3c	 mov	 DWORD PTR n2$[rsp], eax

; 859  : 
; 860  :     /* Shift the numeric portion left n positions */
; 861  :     for (i = 0, j = 0; i < n; i++)

  00196	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0019e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  001a6	eb 0a		 jmp	 SHORT $LN7@z900_shift
$LN5@z900_shift:
  001a8	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001ac	ff c0		 inc	 eax
  001ae	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@z900_shift:
  001b2	8b 44 24 2c	 mov	 eax, DWORD PTR n$[rsp]
  001b6	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  001ba	73 23		 jae	 SHORT $LN6@z900_shift

; 862  :     {
; 863  :         /* Shift bits 1-31 left one bit position */
; 864  :         n1 <<= 1;

  001bc	8b 44 24 28	 mov	 eax, DWORD PTR n1$[rsp]
  001c0	d1 e0		 shl	 eax, 1
  001c2	89 44 24 28	 mov	 DWORD PTR n1$[rsp], eax

; 865  : 
; 866  :         /* Overflow if bit shifted out is unlike the sign bit */
; 867  :         if ((n1 & 0x80000000) != n2)

  001c6	8b 44 24 28	 mov	 eax, DWORD PTR n1$[rsp]
  001ca	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001cf	3b 44 24 3c	 cmp	 eax, DWORD PTR n2$[rsp]
  001d3	74 08		 je	 SHORT $LN12@z900_shift

; 868  :             j = 1;

  001d5	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1
$LN12@z900_shift:

; 869  :     }

  001dd	eb c9		 jmp	 SHORT $LN5@z900_shift
$LN6@z900_shift:

; 870  : 
; 871  :     /* Load the updated value into the R1 register */
; 872  :     regs->GR_L(r1) = (n1 & 0x7FFFFFFF) | n2;

  001df	8b 44 24 28	 mov	 eax, DWORD PTR n1$[rsp]
  001e3	0f ba f0 1f	 btr	 eax, 31
  001e7	0b 44 24 3c	 or	 eax, DWORD PTR n2$[rsp]
  001eb	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  001f0	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  001f5	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 873  : 
; 874  :     /* Condition code 3 and program check if overflow occurred */
; 875  :     if (j)

  001fc	83 7c 24 40 00	 cmp	 DWORD PTR j$[rsp], 0
  00201	74 30		 je	 SHORT $LN13@z900_shift

; 876  :     {
; 877  :         regs->psw.cc = 3;

  00203	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00208	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 878  :         if ( FOMASK(&regs->psw) )

  0020c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00211	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00215	83 e0 08	 and	 eax, 8
  00218	85 c0		 test	 eax, eax
  0021a	74 15		 je	 SHORT $LN14@z900_shift

; 879  :             regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  0021c	ba 08 00 00 00	 mov	 edx, 8
  00221	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00226	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0022b	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@z900_shift:

; 880  :         return;

  00231	eb 59		 jmp	 SHORT $LN1@z900_shift
$LN13@z900_shift:

; 881  :     }
; 882  : 
; 883  :     /* Set the condition code */
; 884  :     regs->psw.cc = (S32)regs->GR_L(r1) > 0 ? 2 :

  00233	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00238	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0023d	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  00245	7e 0a		 jle	 SHORT $LN20@z900_shift
  00247	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR tv200[rsp], 2
  0024f	eb 2e		 jmp	 SHORT $LN21@z900_shift
$LN20@z900_shift:
  00251	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00256	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0025b	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  00263	7d 0a		 jge	 SHORT $LN18@z900_shift
  00265	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv199[rsp], 1
  0026d	eb 08		 jmp	 SHORT $LN19@z900_shift
$LN18@z900_shift:
  0026f	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv199[rsp], 0
$LN19@z900_shift:
  00277	8b 44 24 44	 mov	 eax, DWORD PTR tv199[rsp]
  0027b	89 44 24 48	 mov	 DWORD PTR tv200[rsp], eax
$LN21@z900_shift:
  0027f	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00284	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR tv200[rsp]
  00289	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@z900_shift:

; 885  :                    (S32)regs->GR_L(r1) < 0 ? 1 : 0;
; 886  : 
; 887  :     /* Check for PER 1 GRA event */
; 888  :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 889  : }

  0028c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00290	c3		 ret	 0
z900_shift_left_single ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
temp$1 = 36
b2$ = 40
n$ = 44
r3$ = 48
effective_addr2$ = 56
dreg$ = 64
inst$ = 96
regs$ = 104
z900_shift_left_double_logical PROC

; 807  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 808  : int     r1, r3;                         /* Register numbers          */
; 809  : int     b2;                             /* effective address base    */
; 810  : VADR    effective_addr2;                /* effective address         */
; 811  : U32     n;                              /* 32-bit operand values     */
; 812  : U64     dreg;                           /* Double register work area */
; 813  : 
; 814  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 30	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 45		 je	 SHORT $LN5@z900_shift
  00064	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00076	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0007b	48 03 c8	 add	 rcx, rax
  0007e	48 8b c1	 mov	 rax, rcx
  00081	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00086	33 c0		 xor	 eax, eax
  00088	83 f8 04	 cmp	 eax, 4
  0008b	74 1c		 je	 SHORT $LN6@z900_shift
  0008d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00092	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00099	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0009e	48 23 c8	 and	 rcx, rax
  000a1	48 8b c1	 mov	 rax, rcx
  000a4	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_shift:
$LN5@z900_shift:
$LN4@z900_shift:
  000a9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b2	48 83 c0 04	 add	 rax, 4
  000b6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000bf	33 c0		 xor	 eax, eax
  000c1	83 f8 04	 cmp	 eax, 4
  000c4	74 0c		 je	 SHORT $LN7@z900_shift
  000c6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@z900_shift:
  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 d1		 jne	 SHORT $LN4@z900_shift

; 815  : 
; 816  :     ODD_CHECK(r1, regs);

  000d8	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000dc	83 e0 01	 and	 eax, 1
  000df	85 c0		 test	 eax, eax
  000e1	74 15		 je	 SHORT $LN8@z900_shift
  000e3	ba 06 00 00 00	 mov	 edx, 6
  000e8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000ed	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000f2	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@z900_shift:

; 817  : 
; 818  :     /* Use rightmost six bits of operand address as shift count */
; 819  :     n = effective_addr2 & 0x3F;

  000f8	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  000fd	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00101	89 44 24 2c	 mov	 DWORD PTR n$[rsp], eax

; 820  : 
; 821  :     /* Shift the R1 and R1+1 registers */
; 822  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  00105	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0010a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00116	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0011a	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0011e	ff c1		 inc	 ecx
  00120	48 63 c9	 movsxd	 rcx, ecx
  00123	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00128	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  0012f	48 0b c1	 or	 rax, rcx
  00132	48 89 44 24 40	 mov	 QWORD PTR dreg$[rsp], rax

; 823  :     dreg <<= n;

  00137	8b 44 24 2c	 mov	 eax, DWORD PTR n$[rsp]
  0013b	0f b6 c8	 movzx	 ecx, al
  0013e	48 8b 44 24 40	 mov	 rax, QWORD PTR dreg$[rsp]
  00143	48 d3 e0	 shl	 rax, cl
  00146	48 89 44 24 40	 mov	 QWORD PTR dreg$[rsp], rax

; 824  :     regs->GR_L(r1) = dreg >> 32;

  0014b	48 8b 44 24 40	 mov	 rax, QWORD PTR dreg$[rsp]
  00150	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00154	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00159	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0015e	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 825  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00165	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0016a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dreg$[rsp]
  0016f	48 23 c8	 and	 rcx, rax
  00172	48 8b c1	 mov	 rax, rcx
  00175	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00179	ff c1		 inc	 ecx
  0017b	48 63 c9	 movsxd	 rcx, ecx
  0017e	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 826  : 
; 827  :     /* Check for PER 1 GRA event */
; 828  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 829  : }

  0018a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0018e	c3		 ret	 0
z900_shift_left_double_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
temp$1 = 36
dreg$ = 40
i$ = 48
b2$ = 52
tv147 = 56
tv152 = 60
m$ = 64
j$ = 68
tv194 = 72
tv195 = 76
effective_addr2$ = 80
n$ = 88
h$ = 92
r3$ = 96
inst$ = 128
regs$ = 136
z900_shift_left_double PROC

; 749  : {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 750  : int     r1, r3;                         /* Register numbers          */
; 751  : int     b2;                             /* effective address base    */
; 752  : VADR    effective_addr2;                /* effective address         */
; 753  : U32     n;                              /* 32-bit operand values     */
; 754  : U64     dreg;                           /* Double register work area */
; 755  : U32     h, i, j, m;                     /* Integer work areas        */
; 756  : 
; 757  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00016	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 _byteswap_ulong
  00022	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00026	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0002a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002f	8b c0		 mov	 eax, eax
  00031	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00036	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0003a	c1 e8 0c	 shr	 eax, 12
  0003d	83 e0 0f	 and	 eax, 15
  00040	89 44 24 34	 mov	 DWORD PTR b2$[rsp], eax
  00044	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00048	c1 e8 10	 shr	 eax, 16
  0004b	83 e0 0f	 and	 eax, 15
  0004e	89 44 24 60	 mov	 DWORD PTR r3$[rsp], eax
  00052	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00056	c1 e8 14	 shr	 eax, 20
  00059	83 e0 0f	 and	 eax, 15
  0005c	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  00060	83 7c 24 34 00	 cmp	 DWORD PTR b2$[rsp], 0
  00065	74 4b		 je	 SHORT $LN8@z900_shift
  00067	48 63 44 24 34	 movsxd	 rax, DWORD PTR b2$[rsp]
  0006c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0007c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00081	48 03 c8	 add	 rcx, rax
  00084	48 8b c1	 mov	 rax, rcx
  00087	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0008c	33 c0		 xor	 eax, eax
  0008e	83 f8 04	 cmp	 eax, 4
  00091	74 1f		 je	 SHORT $LN9@z900_shift
  00093	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000a7	48 23 c8	 and	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	48 89 44 24 50	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN9@z900_shift:
$LN8@z900_shift:
$LN4@z900_shift:
  000b2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ba	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000be	48 83 c0 04	 add	 rax, 4
  000c2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ca	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ce	33 c0		 xor	 eax, eax
  000d0	83 f8 04	 cmp	 eax, 4
  000d3	74 0f		 je	 SHORT $LN10@z900_shift
  000d5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000dd	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@z900_shift:
  000e4	33 c0		 xor	 eax, eax
  000e6	85 c0		 test	 eax, eax
  000e8	75 c8		 jne	 SHORT $LN4@z900_shift

; 758  : 
; 759  :     ODD_CHECK(r1, regs);

  000ea	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000ee	83 e0 01	 and	 eax, 1
  000f1	85 c0		 test	 eax, eax
  000f3	74 1b		 je	 SHORT $LN11@z900_shift
  000f5	ba 06 00 00 00	 mov	 edx, 6
  000fa	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00102	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010a	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@z900_shift:

; 760  : 
; 761  :     /* Use rightmost six bits of operand address as shift count */
; 762  :     n = effective_addr2 & 0x3F;

  00110	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  00115	48 83 e0 3f	 and	 rax, 63			; 0000003fH
  00119	89 44 24 58	 mov	 DWORD PTR n$[rsp], eax

; 763  : 
; 764  :     /* Load the signed value from the R1 and R1+1 registers */
; 765  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  0011d	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00122	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0012a	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00131	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00135	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00139	ff c1		 inc	 ecx
  0013b	48 63 c9	 movsxd	 rcx, ecx
  0013e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00146	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  0014d	48 0b c1	 or	 rax, rcx
  00150	48 89 44 24 28	 mov	 QWORD PTR dreg$[rsp], rax

; 766  :     m = ((S64)dreg < 0) ? 1 : 0;

  00155	48 83 7c 24 28
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  0015b	7d 0a		 jge	 SHORT $LN17@z900_shift
  0015d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  00165	eb 08		 jmp	 SHORT $LN18@z900_shift
$LN17@z900_shift:
  00167	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN18@z900_shift:
  0016f	8b 44 24 38	 mov	 eax, DWORD PTR tv147[rsp]
  00173	89 44 24 40	 mov	 DWORD PTR m$[rsp], eax

; 767  : 
; 768  :     /* Shift the numeric portion of the value */
; 769  :     for (i = 0, j = 0; i < n; i++)

  00177	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0017f	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00187	eb 0a		 jmp	 SHORT $LN7@z900_shift
$LN5@z900_shift:
  00189	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0018d	ff c0		 inc	 eax
  0018f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@z900_shift:
  00193	8b 44 24 58	 mov	 eax, DWORD PTR n$[rsp]
  00197	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0019b	73 43		 jae	 SHORT $LN6@z900_shift

; 770  :     {
; 771  :         /* Shift bits 1-63 left one bit position */
; 772  :         dreg <<= 1;

  0019d	48 8b 44 24 28	 mov	 rax, QWORD PTR dreg$[rsp]
  001a2	48 d1 e0	 shl	 rax, 1
  001a5	48 89 44 24 28	 mov	 QWORD PTR dreg$[rsp], rax

; 773  : 
; 774  :         /* Overflow if bit shifted out is unlike the sign bit */
; 775  :         h = ((S64)dreg < 0) ? 1 : 0;

  001aa	48 83 7c 24 28
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  001b0	7d 0a		 jge	 SHORT $LN19@z900_shift
  001b2	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv152[rsp], 1
  001ba	eb 08		 jmp	 SHORT $LN20@z900_shift
$LN19@z900_shift:
  001bc	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
$LN20@z900_shift:
  001c4	8b 44 24 3c	 mov	 eax, DWORD PTR tv152[rsp]
  001c8	89 44 24 5c	 mov	 DWORD PTR h$[rsp], eax

; 776  :         if (h != m)

  001cc	8b 44 24 40	 mov	 eax, DWORD PTR m$[rsp]
  001d0	39 44 24 5c	 cmp	 DWORD PTR h$[rsp], eax
  001d4	74 08		 je	 SHORT $LN12@z900_shift

; 777  :             j = 1;

  001d6	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1
$LN12@z900_shift:

; 778  :     }

  001de	eb a9		 jmp	 SHORT $LN5@z900_shift
$LN6@z900_shift:

; 779  : 
; 780  :     /* Load updated value into the R1 and R1+1 registers */
; 781  :     regs->GR_L(r1) = (dreg >> 32) & 0x7FFFFFFF;

  001e0	48 8b 44 24 28	 mov	 rax, QWORD PTR dreg$[rsp]
  001e5	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  001e9	48 25 ff ff ff
	7f		 and	 rax, 2147483647		; 7fffffffH
  001ef	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  001f4	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001fc	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 782  :     if (m)

  00203	83 7c 24 40 00	 cmp	 DWORD PTR m$[rsp], 0
  00208	74 2c		 je	 SHORT $LN13@z900_shift

; 783  :         regs->GR_L(r1) |= 0x80000000;

  0020a	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0020f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00217	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0021e	0f ba e8 1f	 bts	 eax, 31
  00222	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00227	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0022f	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN13@z900_shift:

; 784  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00236	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0023b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dreg$[rsp]
  00240	48 23 c8	 and	 rcx, rax
  00243	48 8b c1	 mov	 rax, rcx
  00246	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0024a	ff c1		 inc	 ecx
  0024c	48 63 c9	 movsxd	 rcx, ecx
  0024f	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00257	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 785  : 
; 786  :     /* Condition code 3 and program check if overflow occurred */
; 787  :     if (j)

  0025e	83 7c 24 44 00	 cmp	 DWORD PTR j$[rsp], 0
  00263	74 3c		 je	 SHORT $LN14@z900_shift

; 788  :     {
; 789  :         regs->psw.cc = 3;

  00265	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0026d	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 790  :         if ( FOMASK(&regs->psw) )

  00271	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00279	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  0027d	83 e0 08	 and	 eax, 8
  00280	85 c0		 test	 eax, eax
  00282	74 1b		 je	 SHORT $LN15@z900_shift

; 791  :             regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  00284	ba 08 00 00 00	 mov	 edx, 8
  00289	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00291	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00299	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN15@z900_shift:

; 792  :         return;

  0029f	eb 44		 jmp	 SHORT $LN1@z900_shift
$LN14@z900_shift:

; 793  :     }
; 794  : 
; 795  :     /* Set the condition code */
; 796  :     regs->psw.cc = (S64)dreg > 0 ? 2 : (S64)dreg < 0 ? 1 : 0;

  002a1	48 83 7c 24 28
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  002a7	7e 0a		 jle	 SHORT $LN23@z900_shift
  002a9	c7 44 24 4c 02
	00 00 00	 mov	 DWORD PTR tv195[rsp], 2
  002b1	eb 22		 jmp	 SHORT $LN24@z900_shift
$LN23@z900_shift:
  002b3	48 83 7c 24 28
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  002b9	7d 0a		 jge	 SHORT $LN21@z900_shift
  002bb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv194[rsp], 1
  002c3	eb 08		 jmp	 SHORT $LN22@z900_shift
$LN21@z900_shift:
  002c5	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv194[rsp], 0
$LN22@z900_shift:
  002cd	8b 44 24 48	 mov	 eax, DWORD PTR tv194[rsp]
  002d1	89 44 24 4c	 mov	 DWORD PTR tv195[rsp], eax
$LN24@z900_shift:
  002d5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002dd	0f b6 4c 24 4c	 movzx	 ecx, BYTE PTR tv195[rsp]
  002e2	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@z900_shift:

; 797  : 
; 798  :     /* Check for PER 1 GRA event */
; 799  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 800  : }

  002e5	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002e9	c3		 ret	 0
z900_shift_left_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$1 = 0
r1$ = 4
r2$ = 8
inst$ = 32
regs$ = 40
z900_set_program_mask PROC

; 732  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 733  : int     r1, r2;                         /* Values of R fields        */
; 734  : 
; 735  :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 20	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
  00023	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00026	83 e0 0f	 and	 eax, 15
  00029	89 44 24 08	 mov	 DWORD PTR r2$[rsp], eax
  0002d	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00030	c1 f8 04	 sar	 eax, 4
  00033	83 e0 0f	 and	 eax, 15
  00036	89 44 24 04	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_set_p:
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0003f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00043	48 83 c0 02	 add	 rax, 2
  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  0004c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00050	33 c0		 xor	 eax, eax
  00052	83 f8 02	 cmp	 eax, 2
  00055	74 0c		 je	 SHORT $LN5@z900_set_p
  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0005c	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@z900_set_p:
  00063	33 c0		 xor	 eax, eax
  00065	85 c0		 test	 eax, eax
  00067	75 d1		 jne	 SHORT $LN4@z900_set_p

; 736  : 
; 737  :     /* Set condition code from bits 2-3 of R1 register */
; 738  :     regs->psw.cc = ( regs->GR_L(r1) & 0x30000000 ) >> 28;

  00069	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0006e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00073	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007a	25 00 00 00 30	 and	 eax, 805306368		; 30000000H
  0007f	c1 e8 1c	 shr	 eax, 28
  00082	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00087	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 739  : 
; 740  :     /* Set program mask from bits 4-7 of R1 register */
; 741  :     regs->psw.progmask = ( regs->GR_L(r1) >> 24) & PSW_PROGMASK;

  0008a	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0008f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00094	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0009b	c1 e8 18	 shr	 eax, 24
  0009e	83 e0 0f	 and	 eax, 15
  000a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000a6	88 41 7d	 mov	 BYTE PTR [rcx+125], al

; 742  : }

  000a9	48 83 c4 18	 add	 rsp, 24
  000ad	c3		 ret	 0
z900_set_program_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 48
dbyte$ = 49
effective_addr2$ = 56
b2$ = 64
effective_addr1$ = 72
j$ = 80
b1$ = 84
temp$1 = 88
l1$ = 92
l2$ = 96
i$ = 100
tv200 = 104
tv211 = 108
inst$ = 128
regs$ = 136
z900_pack PROC

; 291  : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 292  : int     l1, l2;                         /* Lenght values             */
; 293  : int     b1, b2;                         /* Values of base registers  */
; 294  : VADR    effective_addr1,
; 295  :         effective_addr2;                /* Effective addresses       */
; 296  : int     i, j;                           /* Loop counters             */
; 297  : BYTE    sbyte;                          /* Source operand byte       */
; 298  : BYTE    dbyte;                          /* Destination operand byte  */
; 299  : 
; 300  :     SS(inst, regs, l1, l2, b1, effective_addr1, b2, effective_addr2);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	8b c0		 mov	 eax, eax
  00038	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0003d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00041	c1 e8 0c	 shr	 eax, 12
  00044	83 e0 0f	 and	 eax, 15
  00047	89 44 24 40	 mov	 DWORD PTR b2$[rsp], eax
  0004b	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0004f	c1 e8 10	 shr	 eax, 16
  00052	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00057	8b c0		 mov	 eax, eax
  00059	48 89 44 24 48	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0005e	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00062	c1 e8 1c	 shr	 eax, 28
  00065	83 e0 0f	 and	 eax, 15
  00068	89 44 24 54	 mov	 DWORD PTR b1$[rsp], eax
  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00081	83 e0 0f	 and	 eax, 15
  00084	89 44 24 60	 mov	 DWORD PTR l2$[rsp], eax
  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00099	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009d	c1 f8 04	 sar	 eax, 4
  000a0	83 e0 0f	 and	 eax, 15
  000a3	89 44 24 5c	 mov	 DWORD PTR l1$[rsp], eax
  000a7	83 7c 24 54 00	 cmp	 DWORD PTR b1$[rsp], 0
  000ac	74 44		 je	 SHORT $LN11@z900_pack
  000ae	48 63 44 24 54	 movsxd	 rax, DWORD PTR b1$[rsp]
  000b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 89 44 24 48	 mov	 QWORD PTR effective_addr1$[rsp], rax
  000d3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000db	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000e2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000e7	48 23 c8	 and	 rcx, rax
  000ea	48 8b c1	 mov	 rax, rcx
  000ed	48 89 44 24 48	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN11@z900_pack:
  000f2	83 7c 24 40 00	 cmp	 DWORD PTR b2$[rsp], 0
  000f7	74 44		 je	 SHORT $LN12@z900_pack
  000f9	48 63 44 24 40	 movsxd	 rax, DWORD PTR b2$[rsp]
  000fe	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00106	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0010e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00113	48 03 c8	 add	 rcx, rax
  00116	48 8b c1	 mov	 rax, rcx
  00119	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0011e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00126	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0012d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00132	48 23 c8	 and	 rcx, rax
  00135	48 8b c1	 mov	 rax, rcx
  00138	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN12@z900_pack:
$LN4@z900_pack:
  0013d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00145	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00149	48 83 c0 06	 add	 rax, 6
  0014d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00155	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00159	33 c0		 xor	 eax, eax
  0015b	83 f8 06	 cmp	 eax, 6
  0015e	74 0f		 je	 SHORT $LN13@z900_pack
  00160	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@z900_pack:
  0016f	33 c0		 xor	 eax, eax
  00171	85 c0		 test	 eax, eax
  00173	75 c8		 jne	 SHORT $LN4@z900_pack

; 301  :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );

  00175	44 8b 44 24 40	 mov	 r8d, DWORD PTR b2$[rsp]
  0017a	8b 54 24 54	 mov	 edx, DWORD PTR b1$[rsp]
  0017e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00186	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2
$LN7@z900_pack:

; 302  :     TXFC_INSTR_CHECK( regs );

  0018b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00193	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  0019a	85 c0		 test	 eax, eax
  0019c	74 3f		 je	 SHORT $LN14@z900_pack
  0019e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a6	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  001ac	0f ba e8 0f	 bts	 eax, 15
  001b0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b8	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  001be	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG202849
  001c5	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001cb	ba 02 00 00 00	 mov	 edx, 2
  001d0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001d8	e8 00 00 00 00	 call	 z900_abort_transaction
$LN14@z900_pack:
  001dd	33 c0		 xor	 eax, eax
  001df	85 c0		 test	 eax, eax
  001e1	75 a8		 jne	 SHORT $LN7@z900_pack

; 303  : 
; 304  :     /* If operand 1 crosses a page, make sure both pages are accessible */
; 305  :     if((effective_addr1 & PAGEFRAME_PAGEMASK) !=

  001e3	48 8b 44 24 48	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  001e8	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  001ee	48 63 4c 24 5c	 movsxd	 rcx, DWORD PTR l1$[rsp]
  001f3	48 8b 54 24 48	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  001f8	48 03 d1	 add	 rdx, rcx
  001fb	48 8b ca	 mov	 rcx, rdx
  001fe	48 81 e1 00 f0
	ff ff		 and	 rcx, -4096		; fffffffffffff000H
  00205	48 3b c1	 cmp	 rax, rcx
  00208	74 26		 je	 SHORT $LN15@z900_pack

; 306  :         ((effective_addr1 + l1) & PAGEFRAME_PAGEMASK))
; 307  :         ARCH_DEP(validate_operand) (effective_addr1, b1, l1, ACCTYPE_WRITE_SKP, regs);

  0020a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00212	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00217	41 b9 01 00 00
	00		 mov	 r9d, 1
  0021d	44 8b 44 24 5c	 mov	 r8d, DWORD PTR l1$[rsp]
  00222	8b 54 24 54	 mov	 edx, DWORD PTR b1$[rsp]
  00226	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0022b	e8 00 00 00 00	 call	 z900_validate_operand
$LN15@z900_pack:

; 308  : 
; 309  :     /* If operand 2 crosses a page, make sure both pages are accessible */
; 310  :     if((effective_addr2 & PAGEFRAME_PAGEMASK) !=

  00230	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  00235	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0023b	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR l2$[rsp]
  00240	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  00245	48 03 d1	 add	 rdx, rcx
  00248	48 8b ca	 mov	 rcx, rdx
  0024b	48 81 e1 00 f0
	ff ff		 and	 rcx, -4096		; fffffffffffff000H
  00252	48 3b c1	 cmp	 rax, rcx
  00255	74 26		 je	 SHORT $LN16@z900_pack

; 311  :         ((effective_addr2 + l2) & PAGEFRAME_PAGEMASK))
; 312  :         ARCH_DEP(validate_operand) (effective_addr2, b2, l2, ACCTYPE_READ, regs);

  00257	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0025f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00264	41 b9 04 00 00
	00		 mov	 r9d, 4
  0026a	44 8b 44 24 60	 mov	 r8d, DWORD PTR l2$[rsp]
  0026f	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  00273	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00278	e8 00 00 00 00	 call	 z900_validate_operand
$LN16@z900_pack:

; 313  : 
; 314  :     /* Exchange the digits in the rightmost byte */
; 315  :     effective_addr1 += l1;

  0027d	48 63 44 24 5c	 movsxd	 rax, DWORD PTR l1$[rsp]
  00282	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  00287	48 03 c8	 add	 rcx, rax
  0028a	48 8b c1	 mov	 rax, rcx
  0028d	48 89 44 24 48	 mov	 QWORD PTR effective_addr1$[rsp], rax

; 316  :     effective_addr2 += l2;

  00292	48 63 44 24 60	 movsxd	 rax, DWORD PTR l2$[rsp]
  00297	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0029c	48 03 c8	 add	 rcx, rax
  0029f	48 8b c1	 mov	 rax, rcx
  002a2	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 317  :     sbyte = ARCH_DEP(vfetchb) ( effective_addr2, b2, regs );

  002a7	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002af	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  002b3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  002b8	e8 00 00 00 00	 call	 z900_vfetchb
  002bd	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 318  :     dbyte = ( (sbyte << 4) | (sbyte >> 4) ) & 0xff;

  002c1	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002c6	c1 e0 04	 shl	 eax, 4
  002c9	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR sbyte$[rsp]
  002ce	c1 f9 04	 sar	 ecx, 4
  002d1	0b c1		 or	 eax, ecx
  002d3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002d8	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al

; 319  :     ARCH_DEP(vstoreb) ( dbyte, effective_addr1, b1, regs );

  002dc	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002e4	44 8b 44 24 54	 mov	 r8d, DWORD PTR b1$[rsp]
  002e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  002ee	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  002f3	e8 00 00 00 00	 call	 z900_vstoreb

; 320  : 
; 321  :     /* Process remaining bytes from right to left */
; 322  :     for (i = l1, j = l2; i > 0; i--)

  002f8	8b 44 24 5c	 mov	 eax, DWORD PTR l1$[rsp]
  002fc	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
  00300	8b 44 24 60	 mov	 eax, DWORD PTR l2$[rsp]
  00304	89 44 24 50	 mov	 DWORD PTR j$[rsp], eax
  00308	eb 0a		 jmp	 SHORT $LN10@z900_pack
$LN8@z900_pack:
  0030a	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0030e	ff c8		 dec	 eax
  00310	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN10@z900_pack:
  00314	83 7c 24 64 00	 cmp	 DWORD PTR i$[rsp], 0
  00319	0f 8e 3c 01 00
	00		 jle	 $LN9@z900_pack

; 323  :     {
; 324  :         /* Fetch source bytes from second operand */
; 325  :         if (j-- > 0)

  0031f	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  00323	89 44 24 68	 mov	 DWORD PTR tv200[rsp], eax
  00327	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  0032b	ff c8		 dec	 eax
  0032d	89 44 24 50	 mov	 DWORD PTR j$[rsp], eax
  00331	83 7c 24 68 00	 cmp	 DWORD PTR tv200[rsp], 0
  00336	0f 8e ae 00 00
	00		 jle	 $LN17@z900_pack

; 326  :         {
; 327  :             sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  0033c	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  00341	48 ff c8	 dec	 rax
  00344	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00349	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00351	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  00355	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0035a	e8 00 00 00 00	 call	 z900_vfetchb
  0035f	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 328  :             dbyte = sbyte & 0x0F;

  00363	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  00368	83 e0 0f	 and	 eax, 15
  0036b	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al

; 329  : 
; 330  :             if (j-- > 0)

  0036f	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  00373	89 44 24 6c	 mov	 DWORD PTR tv211[rsp], eax
  00377	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  0037b	ff c8		 dec	 eax
  0037d	89 44 24 50	 mov	 DWORD PTR j$[rsp], eax
  00381	83 7c 24 6c 00	 cmp	 DWORD PTR tv211[rsp], 0
  00386	7e 60		 jle	 SHORT $LN19@z900_pack

; 331  :             {
; 332  :                 effective_addr2 &= ADDRESS_MAXWRAP(regs);

  00388	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00390	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00397	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0039c	48 23 c8	 and	 rcx, rax
  0039f	48 8b c1	 mov	 rax, rcx
  003a2	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 333  :                 sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  003a7	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  003ac	48 ff c8	 dec	 rax
  003af	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  003b4	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003bc	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  003c0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  003c5	e8 00 00 00 00	 call	 z900_vfetchb
  003ca	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 334  :                 dbyte |= (sbyte << 4) & 0xff;

  003ce	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  003d3	c1 e0 04	 shl	 eax, 4
  003d6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003db	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  003e0	0b c8		 or	 ecx, eax
  003e2	8b c1		 mov	 eax, ecx
  003e4	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al
$LN19@z900_pack:

; 335  :             }
; 336  :         }

  003e8	eb 05		 jmp	 SHORT $LN18@z900_pack
$LN17@z900_pack:

; 337  :         else
; 338  :         {
; 339  :             dbyte = 0;

  003ea	c6 44 24 31 00	 mov	 BYTE PTR dbyte$[rsp], 0
$LN18@z900_pack:

; 340  :         }
; 341  : 
; 342  :         /* Store packed digits at first operand address */
; 343  :         ARCH_DEP(vstoreb) ( dbyte, --effective_addr1, b1, regs );

  003ef	48 8b 44 24 48	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  003f4	48 ff c8	 dec	 rax
  003f7	48 89 44 24 48	 mov	 QWORD PTR effective_addr1$[rsp], rax
  003fc	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00404	44 8b 44 24 54	 mov	 r8d, DWORD PTR b1$[rsp]
  00409	48 8b 54 24 48	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  0040e	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  00413	e8 00 00 00 00	 call	 z900_vstoreb

; 344  : 
; 345  :         /* Wraparound according to addressing mode */
; 346  :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  00418	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00420	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00427	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0042c	48 23 c8	 and	 rcx, rax
  0042f	48 8b c1	 mov	 rax, rcx
  00432	48 89 44 24 48	 mov	 QWORD PTR effective_addr1$[rsp], rax

; 347  :         effective_addr2 &= ADDRESS_MAXWRAP(regs);

  00437	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0043f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00446	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0044b	48 23 c8	 and	 rcx, rax
  0044e	48 8b c1	 mov	 rax, rcx
  00451	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 348  : 
; 349  :     } /* end for(i) */

  00456	e9 af fe ff ff	 jmp	 $LN8@z900_pack
$LN9@z900_pack:

; 350  : 
; 351  : }

  0045b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0045f	c3		 ret	 0
z900_pack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$1 = 0
r1$ = 4
tv92 = 8
tv94 = 12
r2$ = 16
inst$ = 48
regs$ = 56
z900_or_register PROC

; 55   : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 56   : int     r1, r2;                         /* Values of R fields        */
; 57   : 
; 58   :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
  00023	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00026	83 e0 0f	 and	 eax, 15
  00029	89 44 24 10	 mov	 DWORD PTR r2$[rsp], eax
  0002d	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00030	c1 f8 04	 sar	 eax, 4
  00033	83 e0 0f	 and	 eax, 15
  00036	89 44 24 04	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_or_re:
  0003a	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  0003f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00043	48 83 c0 02	 add	 rax, 2
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  0004c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00050	33 c0		 xor	 eax, eax
  00052	83 f8 02	 cmp	 eax, 2
  00055	74 0c		 je	 SHORT $LN5@z900_or_re
  00057	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  0005c	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@z900_or_re:
  00063	33 c0		 xor	 eax, eax
  00065	85 c0		 test	 eax, eax
  00067	75 d1		 jne	 SHORT $LN4@z900_or_re

; 59   : 
; 60   :     /* OR second operand with first and set condition code */
; 61   :     regs->psw.cc = ( regs->GR_L(r1) |= regs->GR_L(r2) ) ? 1 : 0;

  00069	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0006e	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00073	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00078	4c 8b 44 24 38	 mov	 r8, QWORD PTR regs$[rsp]
  0007d	41 8b 8c c8 80
	02 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+640]
  00085	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  0008c	0b c1		 or	 eax, ecx
  0008e	89 44 24 08	 mov	 DWORD PTR tv92[rsp], eax
  00092	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  0009c	8b 54 24 08	 mov	 edx, DWORD PTR tv92[rsp]
  000a0	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
  000a7	83 7c 24 08 00	 cmp	 DWORD PTR tv92[rsp], 0
  000ac	74 0a		 je	 SHORT $LN7@z900_or_re
  000ae	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  000b6	eb 08		 jmp	 SHORT $LN8@z900_or_re
$LN7@z900_or_re:
  000b8	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN8@z900_or_re:
  000c0	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  000c5	0f b6 4c 24 0c	 movzx	 ecx, BYTE PTR tv94[rsp]
  000ca	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 62   : 
; 63   :     /* Check for PER 1 GRA event */
; 64   :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 65   : }

  000cd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d1	c3		 ret	 0
z900_or_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i2$ = 48
b1$ = 52
temp$1 = 56
tv141 = 60
effective_addr1$ = 64
tv145 = 72
dest$ = 80
inst$ = 112
regs$ = 120
z900_or_immediate PROC

; 97   : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 98   : BYTE    i2;                             /* Immediate operand byte    */
; 99   : int     b1;                             /* Base of effective addr    */
; 100  : VADR    effective_addr1;                /* Effective address         */
; 101  : BYTE   *dest;                           /* Pointer to target byte    */
; 102  : 
; 103  :     SI(inst, regs, i2, b1, effective_addr1);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 38	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 40	 mov	 QWORD PTR effective_addr1$[rsp], rax
  00033	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 34	 mov	 DWORD PTR b1$[rsp], eax
  00041	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004d	88 44 24 30	 mov	 BYTE PTR i2$[rsp], al
  00051	83 7c 24 34 00	 cmp	 DWORD PTR b1$[rsp], 0
  00056	74 3e		 je	 SHORT $LN5@z900_or_im
  00058	48 63 44 24 34	 movsxd	 rax, DWORD PTR b1$[rsp]
  0005d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00062	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0006a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	48 89 44 24 40	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0007a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0007f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0008b	48 23 c8	 and	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 89 44 24 40	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN5@z900_or_im:
$LN4@z900_or_im:
  00096	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009f	48 83 c0 04	 add	 rax, 4
  000a3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a8	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ac	33 c0		 xor	 eax, eax
  000ae	83 f8 04	 cmp	 eax, 4
  000b1	74 0c		 je	 SHORT $LN6@z900_or_im
  000b3	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000b8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_or_im:
  000bf	33 c0		 xor	 eax, eax
  000c1	85 c0		 test	 eax, eax
  000c3	75 d1		 jne	 SHORT $LN4@z900_or_im

; 104  :     PER_ZEROADDR_XCHECK( regs, b1 );

  000c5	8b 54 24 34	 mov	 edx, DWORD PTR b1$[rsp]
  000c9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000ce	e8 00 00 00 00	 call	 z900_per3_zero_xcheck

; 105  : 
; 106  :     ITIMER_SYNC(effective_addr1, 0, regs);
; 107  :     /* Get byte mainstor address */
; 108  :     dest = MADDR (effective_addr1, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  000d3	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000dc	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000e0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000e8	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  000ed	44 8b 44 24 34	 mov	 r8d, DWORD PTR b1$[rsp]
  000f2	ba 01 00 00 00	 mov	 edx, 1
  000f7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000fc	e8 00 00 00 00	 call	 z900_maddr_l
  00101	48 89 44 24 50	 mov	 QWORD PTR dest$[rsp], rax

; 109  : 
; 110  :     /* MAINLOCK may be required if cmpxchg assists unavailable */
; 111  :     OBTAIN_MAINLOCK( regs );
; 112  :     {
; 113  :         /* OR byte with immediate operand, setting condition code */
; 114  :         regs->psw.cc = (H_ATOMIC_OP( dest, i2, or, Or, | ) != 0);

  00106	48 8b 44 24 50	 mov	 rax, QWORD PTR dest$[rsp]
  0010b	48 89 44 24 48	 mov	 QWORD PTR tv145[rsp], rax
  00110	48 8b 44 24 48	 mov	 rax, QWORD PTR tv145[rsp]
  00115	0f 0d 08	 prefetchw BYTE PTR [rax]
  00118	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv145[rsp]
  0011d	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
$LL10@z900_or_im:
  00120	0f b6 d0	 movzx	 edx, al
  00123	0a 54 24 30	 or	 dl, BYTE PTR i2$[rsp]
  00127	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv145[rsp]
  0012c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv145[rsp]
  00131	f0 0f b0 11	 lock cmpxchg BYTE PTR [rcx], dl
  00135	75 e9		 jne	 SHORT $LL10@z900_or_im
  00137	0f b6 c0	 movzx	 eax, al
  0013a	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i2$[rsp]
  0013f	0b c1		 or	 eax, ecx
  00141	8b c0		 mov	 eax, eax
  00143	48 85 c0	 test	 rax, rax
  00146	74 0a		 je	 SHORT $LN8@z900_or_im
  00148	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv141[rsp], 1
  00150	eb 08		 jmp	 SHORT $LN9@z900_or_im
$LN8@z900_or_im:
  00152	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN9@z900_or_im:
  0015a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0015f	0f b6 4c 24 3c	 movzx	 ecx, BYTE PTR tv141[rsp]
  00164	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 115  :     }
; 116  :     RELEASE_MAINLOCK( regs );
; 117  : 
; 118  :     ITIMER_UPDATE(effective_addr1, 0, regs);
; 119  : }

  00167	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0016b	c3		 ret	 0
z900_or_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
len2$ = 52
dest1$ = 56
len$ = 64
cc$ = 68
source1$ = 72
len3$ = 80
dest2$ = 88
source2$ = 96
b2$ = 104
b1$ = 108
effective_addr2$ = 112
temp$1 = 120
effective_addr1$ = 128
tv152 = 136
tv157 = 140
tv182 = 144
tv215 = 148
tv227 = 152
tv312 = 156
tv378 = 160
tv390 = 164
tv402 = 168
tv414 = 172
tv425 = 176
tv437 = 180
tv449 = 184
tv239 = 188
tv268 = 192
tv280 = 196
tv324 = 200
tv336 = 204
tv366 = 208
sk1$ = 216
sk2$ = 224
inst$ = 256
regs$ = 264
z900_or_character PROC

; 126  : {

$LN96:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H

; 127  : int     len, len2, len3;                /* Lengths to copy           */
; 128  : int     b1, b2;                         /* Base register numbers     */
; 129  : VADR    effective_addr1;                /* Virtual address           */
; 130  : VADR    effective_addr2;                /* Virtual address           */
; 131  : BYTE   *dest1, *dest2;                  /* Destination addresses     */
; 132  : BYTE   *source1, *source2;              /* Source addresses          */
; 133  : BYTE   *sk1, *sk2;                      /* Storage key addresses     */
; 134  : int     i;                              /* Loop counter              */
; 135  : int     cc = 0;                         /* Condition code            */

  00011	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR cc$[rsp], 0

; 136  : 
; 137  :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00019	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00021	48 83 c0 02	 add	 rax, 2
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 fetch_fw_noswap
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 _byteswap_ulong
  00034	89 44 24 78	 mov	 DWORD PTR temp$1[rsp], eax
  00038	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  0003c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00041	8b c0		 mov	 eax, eax
  00043	48 89 44 24 70	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00048	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 0c	 shr	 eax, 12
  0004f	83 e0 0f	 and	 eax, 15
  00052	89 44 24 68	 mov	 DWORD PTR b2$[rsp], eax
  00056	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  0005a	c1 e8 10	 shr	 eax, 16
  0005d	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00062	8b c0		 mov	 eax, eax
  00064	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR effective_addr1$[rsp], rax
  0006c	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00070	c1 e8 1c	 shr	 eax, 28
  00073	83 e0 0f	 and	 eax, 15
  00076	89 44 24 6c	 mov	 DWORD PTR b1$[rsp], eax
  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	48 6b c0 01	 imul	 rax, rax, 1
  00083	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0008b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008f	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
  00093	83 7c 24 6c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00098	74 50		 je	 SHORT $LN47@z900_or_ch
  0009a	48 63 44 24 6c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0009f	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000a7	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000af	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000b7	48 03 c8	 add	 rcx, rax
  000ba	48 8b c1	 mov	 rax, rcx
  000bd	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR effective_addr1$[rsp], rax
  000c5	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000cd	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000d4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  000dc	48 23 c8	 and	 rcx, rax
  000df	48 8b c1	 mov	 rax, rcx
  000e2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR effective_addr1$[rsp], rax
$LN47@z900_or_ch:
  000ea	83 7c 24 68 00	 cmp	 DWORD PTR b2$[rsp], 0
  000ef	74 44		 je	 SHORT $LN48@z900_or_ch
  000f1	48 63 44 24 68	 movsxd	 rax, DWORD PTR b2$[rsp]
  000f6	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fe	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00106	48 8b 4c 24 70	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0010b	48 03 c8	 add	 rcx, rax
  0010e	48 8b c1	 mov	 rax, rcx
  00111	48 89 44 24 70	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00116	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00125	48 8b 4c 24 70	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0012a	48 23 c8	 and	 rcx, rax
  0012d	48 8b c1	 mov	 rax, rcx
  00130	48 89 44 24 70	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN48@z900_or_ch:
$LN4@z900_or_ch:
  00135	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00141	48 83 c0 06	 add	 rax, 6
  00145	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0014d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00151	33 c0		 xor	 eax, eax
  00153	83 f8 06	 cmp	 eax, 6
  00156	74 0f		 je	 SHORT $LN49@z900_or_ch
  00158	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00160	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN49@z900_or_ch:
  00167	33 c0		 xor	 eax, eax
  00169	85 c0		 test	 eax, eax
  0016b	75 c8		 jne	 SHORT $LN4@z900_or_ch

; 138  :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );

  0016d	44 8b 44 24 68	 mov	 r8d, DWORD PTR b2$[rsp]
  00172	8b 54 24 6c	 mov	 edx, DWORD PTR b1$[rsp]
  00176	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0017e	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2
$LN7@z900_or_ch:

; 139  : 
; 140  :     TXFC_INSTR_CHECK( regs );

  00183	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0018b	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  00192	85 c0		 test	 eax, eax
  00194	74 3f		 je	 SHORT $LN50@z900_or_ch
  00196	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019e	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  001a4	0f ba e8 0f	 bts	 eax, 15
  001a8	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b0	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  001b6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG202795
  001bd	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001c3	ba 02 00 00 00	 mov	 edx, 2
  001c8	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001d0	e8 00 00 00 00	 call	 z900_abort_transaction
$LN50@z900_or_ch:
  001d5	33 c0		 xor	 eax, eax
  001d7	85 c0		 test	 eax, eax
  001d9	75 a8		 jne	 SHORT $LN7@z900_or_ch

; 141  : 
; 142  :     ITIMER_SYNC( effective_addr1, len, regs );
; 143  :     ITIMER_SYNC( effective_addr2, len, regs );
; 144  : 
; 145  :     /* Quick out for 1 byte (no boundary crossed) */
; 146  :     if (unlikely( !len ))

  001db	83 7c 24 40 00	 cmp	 DWORD PTR len$[rsp], 0
  001e0	75 0d		 jne	 SHORT $LN76@z900_or_ch
  001e2	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv152[rsp], 1
  001ed	eb 0b		 jmp	 SHORT $LN77@z900_or_ch
$LN76@z900_or_ch:
  001ef	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv152[rsp], 0
$LN77@z900_or_ch:
  001fa	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv152[rsp], 0
  00202	74 0d		 je	 SHORT $LN80@z900_or_ch
  00204	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv157[rsp], 1
  0020f	eb 0b		 jmp	 SHORT $LN81@z900_or_ch
$LN80@z900_or_ch:
  00211	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv157[rsp], 0
$LN81@z900_or_ch:
  0021c	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR tv157[rsp], 0
  00224	0f 84 cc 00 00
	00		 je	 $LN51@z900_or_ch

; 147  :     {
; 148  :         source1 = MADDR( effective_addr2,  b2, regs, ACCTYPE_READ,  regs->psw.pkey );

  0022a	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00232	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00236	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0023a	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00242	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0024a	44 8b 44 24 68	 mov	 r8d, DWORD PTR b2$[rsp]
  0024f	ba 01 00 00 00	 mov	 edx, 1
  00254	48 8b 4c 24 70	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00259	e8 00 00 00 00	 call	 z900_maddr_l
  0025e	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax

; 149  :         dest1   = MADDR( effective_addr1,  b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00263	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0026b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0026f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00273	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0027b	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00283	44 8b 44 24 6c	 mov	 r8d, DWORD PTR b1$[rsp]
  00288	ba 01 00 00 00	 mov	 edx, 1
  0028d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  00295	e8 00 00 00 00	 call	 z900_maddr_l
  0029a	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax

; 150  :         *dest1 |= *source1;

  0029f	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  002a4	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  002ac	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  002af	0b c8		 or	 ecx, eax
  002b1	8b c1		 mov	 eax, ecx
  002b3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  002b8	88 01		 mov	 BYTE PTR [rcx], al

; 151  :         regs->psw.cc = (*dest1 != 0);

  002ba	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  002bf	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002c2	85 c0		 test	 eax, eax
  002c4	74 0d		 je	 SHORT $LN82@z900_or_ch
  002c6	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv182[rsp], 1
  002d1	eb 0b		 jmp	 SHORT $LN83@z900_or_ch
$LN82@z900_or_ch:
  002d3	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv182[rsp], 0
$LN83@z900_or_ch:
  002de	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002e6	0f b6 8c 24 90
	00 00 00	 movzx	 ecx, BYTE PTR tv182[rsp]
  002ee	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 152  :         ITIMER_UPDATE( effective_addr1, len, regs );
; 153  :         return;

  002f1	e9 b3 09 00 00	 jmp	 $LN1@z900_or_ch
$LN51@z900_or_ch:

; 154  :     }
; 155  : 
; 156  :     /* There are several scenarios (in optimal order):
; 157  :      * (1) dest boundary and source boundary not crossed
; 158  :      * (2) dest boundary not crossed and source boundary crossed
; 159  :      * (3) dest boundary crossed and source boundary not crossed
; 160  :      * (4) dest boundary and source boundary are crossed
; 161  :      *     (a) dest and source boundary cross at the same time
; 162  :      *     (b) dest boundary crossed first
; 163  :      *     (c) source boundary crossed first
; 164  :      */
; 165  : 
; 166  :     /* Translate addresses of leftmost operand bytes */
; 167  :     dest1 = MADDRL( effective_addr1, len+1, b1, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  002f6	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  002fa	ff c0		 inc	 eax
  002fc	48 98		 cdqe
  002fe	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00306	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0030a	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0030e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00316	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0031e	44 8b 44 24 6c	 mov	 r8d, DWORD PTR b1$[rsp]
  00323	48 8b d0	 mov	 rdx, rax
  00326	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR effective_addr1$[rsp]
  0032e	e8 00 00 00 00	 call	 z900_maddr_l
  00333	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax

; 168  :     sk1 = regs->dat.storkey;

  00338	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00340	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00347	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR sk1$[rsp], rax

; 169  :     source1 = MADDRL( effective_addr2, len+1, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  0034f	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00353	ff c0		 inc	 eax
  00355	48 98		 cdqe
  00357	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0035f	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00363	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00367	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0036f	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00377	44 8b 44 24 68	 mov	 r8d, DWORD PTR b2$[rsp]
  0037c	48 8b d0	 mov	 rdx, rax
  0037f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00384	e8 00 00 00 00	 call	 z900_maddr_l
  00389	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax

; 170  : 
; 171  :     if (NOCROSSPAGE( effective_addr1, len ))

  0038e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  00396	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0039c	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  003a1	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  003a5	3b c1		 cmp	 eax, ecx
  003a7	7f 0d		 jg	 SHORT $LN86@z900_or_ch
  003a9	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv215[rsp], 1
  003b4	eb 0b		 jmp	 SHORT $LN87@z900_or_ch
$LN86@z900_or_ch:
  003b6	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv215[rsp], 0
$LN87@z900_or_ch:
  003c1	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR tv215[rsp], 0
  003c9	0f 84 3c 02 00
	00		 je	 $LN52@z900_or_ch

; 172  :     {
; 173  :         if (NOCROSSPAGE( effective_addr2, len ))

  003cf	48 8b 44 24 70	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  003d4	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  003da	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  003df	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  003e3	3b c1		 cmp	 eax, ecx
  003e5	7f 0d		 jg	 SHORT $LN90@z900_or_ch
  003e7	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv227[rsp], 1
  003f2	eb 0b		 jmp	 SHORT $LN91@z900_or_ch
$LN90@z900_or_ch:
  003f4	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv227[rsp], 0
$LN91@z900_or_ch:
  003ff	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv227[rsp], 0
  00407	74 7b		 je	 SHORT $LN54@z900_or_ch

; 174  :         {
; 175  :             /* (1) - No boundaries are crossed */
; 176  :             for (i=0; i <= len; i++)

  00409	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00411	eb 0a		 jmp	 SHORT $LN10@z900_or_ch
$LN8@z900_or_ch:
  00413	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00417	ff c0		 inc	 eax
  00419	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN10@z900_or_ch:
  0041d	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00421	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00425	7f 58		 jg	 SHORT $LN9@z900_or_ch

; 177  :                 if ((*dest1++ |= *source1++))

  00427	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  0042c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0042f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00434	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00437	0b c8		 or	 ecx, eax
  00439	8b c1		 mov	 eax, ecx
  0043b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00440	88 01		 mov	 BYTE PTR [rcx], al
  00442	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00447	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0044a	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv239[rsp], eax
  00451	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00456	48 ff c0	 inc	 rax
  00459	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  0045e	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00463	48 ff c0	 inc	 rax
  00466	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  0046b	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR tv239[rsp], 0
  00473	74 08		 je	 SHORT $LN56@z900_or_ch

; 178  :                     cc = 1;

  00475	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN56@z900_or_ch:
  0047d	eb 94		 jmp	 SHORT $LN8@z900_or_ch
$LN9@z900_or_ch:

; 179  :         }

  0047f	e9 73 01 00 00	 jmp	 $LN55@z900_or_ch
$LN54@z900_or_ch:

; 180  :         else
; 181  :         {
; 182  :              /* (2) - Second operand crosses a boundary */
; 183  :              len2 = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  00484	48 8b 44 24 70	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  00489	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0048f	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00494	48 2b c8	 sub	 rcx, rax
  00497	48 8b c1	 mov	 rax, rcx
  0049a	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 184  :              source2 = MADDRL((effective_addr2 + len2) & ADDRESS_MAXWRAP( regs ),

  0049e	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  004a2	ff c0		 inc	 eax
  004a4	2b 44 24 34	 sub	 eax, DWORD PTR len2$[rsp]
  004a8	48 98		 cdqe
  004aa	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len2$[rsp]
  004af	48 8b 54 24 70	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  004b4	48 03 d1	 add	 rdx, rcx
  004b7	48 8b ca	 mov	 rcx, rdx
  004ba	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004c2	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  004c9	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004d1	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  004d5	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  004d9	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  004e1	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004e9	44 8b 44 24 68	 mov	 r8d, DWORD PTR b2$[rsp]
  004ee	48 8b d0	 mov	 rdx, rax
  004f1	e8 00 00 00 00	 call	 z900_maddr_l
  004f6	48 89 44 24 60	 mov	 QWORD PTR source2$[rsp], rax

; 185  :               len + 1 - len2,  b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 186  :              for (i=0; i < len2; i++)

  004fb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00503	eb 0a		 jmp	 SHORT $LN13@z900_or_ch
$LN11@z900_or_ch:
  00505	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00509	ff c0		 inc	 eax
  0050b	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@z900_or_ch:
  0050f	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00513	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00517	7d 58		 jge	 SHORT $LN12@z900_or_ch

; 187  :                  if ( (*dest1++ |= *source1++) )

  00519	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  0051e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00521	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00526	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00529	0b c8		 or	 ecx, eax
  0052b	8b c1		 mov	 eax, ecx
  0052d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00532	88 01		 mov	 BYTE PTR [rcx], al
  00534	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00539	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0053c	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv268[rsp], eax
  00543	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00548	48 ff c0	 inc	 rax
  0054b	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00550	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00555	48 ff c0	 inc	 rax
  00558	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  0055d	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR tv268[rsp], 0
  00565	74 08		 je	 SHORT $LN57@z900_or_ch

; 188  :                      cc = 1;

  00567	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN57@z900_or_ch:
  0056f	eb 94		 jmp	 SHORT $LN11@z900_or_ch
$LN12@z900_or_ch:

; 189  : 
; 190  :              len2 = len - len2;

  00571	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00575	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00579	2b c8		 sub	 ecx, eax
  0057b	8b c1		 mov	 eax, ecx
  0057d	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 191  : 
; 192  :              for (i=0; i <= len2; i++)

  00581	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00589	eb 0a		 jmp	 SHORT $LN16@z900_or_ch
$LN14@z900_or_ch:
  0058b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0058f	ff c0		 inc	 eax
  00591	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@z900_or_ch:
  00595	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00599	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0059d	7f 58		 jg	 SHORT $LN15@z900_or_ch

; 193  :                  if ( (*dest1++ |= *source2++) )

  0059f	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  005a4	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  005a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  005ac	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  005af	0b c8		 or	 ecx, eax
  005b1	8b c1		 mov	 eax, ecx
  005b3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  005b8	88 01		 mov	 BYTE PTR [rcx], al
  005ba	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  005bf	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  005c2	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv280[rsp], eax
  005c9	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  005ce	48 ff c0	 inc	 rax
  005d1	48 89 44 24 60	 mov	 QWORD PTR source2$[rsp], rax
  005d6	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  005db	48 ff c0	 inc	 rax
  005de	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  005e3	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR tv280[rsp], 0
  005eb	74 08		 je	 SHORT $LN58@z900_or_ch

; 194  :                      cc = 1;

  005ed	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN58@z900_or_ch:
  005f5	eb 94		 jmp	 SHORT $LN14@z900_or_ch
$LN15@z900_or_ch:
$LN55@z900_or_ch:

; 195  :         }
; 196  :         ARCH_DEP( or_storage_key_by_ptr )( sk1, (STORKEY_REF | STORKEY_CHANGE) );

  005f7	b2 06		 mov	 dl, 6
  005f9	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR sk1$[rsp]
  00601	e8 00 00 00 00	 call	 z900_or_storage_key_by_ptr

; 197  :     }

  00606	e9 8e 06 00 00	 jmp	 $LN53@z900_or_ch
$LN52@z900_or_ch:

; 198  :     else
; 199  :     {
; 200  :         /* First operand crosses a boundary */
; 201  :         len2 = PAGEFRAME_PAGESIZE - (effective_addr1 & PAGEFRAME_BYTEMASK);

  0060b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR effective_addr1$[rsp]
  00613	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00619	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0061e	48 2b c8	 sub	 rcx, rax
  00621	48 8b c1	 mov	 rax, rcx
  00624	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 202  :         dest2 = MADDRL((effective_addr1 + len2) & ADDRESS_MAXWRAP( regs ),

  00628	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0062c	ff c0		 inc	 eax
  0062e	2b 44 24 34	 sub	 eax, DWORD PTR len2$[rsp]
  00632	48 98		 cdqe
  00634	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR len2$[rsp]
  00639	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR effective_addr1$[rsp]
  00641	48 03 d1	 add	 rdx, rcx
  00644	48 8b ca	 mov	 rcx, rdx
  00647	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0064f	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  00656	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0065e	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00662	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00666	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0066e	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00676	44 8b 44 24 6c	 mov	 r8d, DWORD PTR b1$[rsp]
  0067b	48 8b d0	 mov	 rdx, rax
  0067e	e8 00 00 00 00	 call	 z900_maddr_l
  00683	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax

; 203  :          len + 1 - len2,b1, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );
; 204  :         sk2 = regs->dat.storkey;

  00688	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00690	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00697	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR sk2$[rsp], rax

; 205  : 
; 206  :         if (NOCROSSPAGE( effective_addr2, len ))

  0069f	48 8b 44 24 70	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  006a4	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  006aa	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  006af	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  006b3	3b c1		 cmp	 eax, ecx
  006b5	7f 0d		 jg	 SHORT $LN94@z900_or_ch
  006b7	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv312[rsp], 1
  006c2	eb 0b		 jmp	 SHORT $LN95@z900_or_ch
$LN94@z900_or_ch:
  006c4	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv312[rsp], 0
$LN95@z900_or_ch:
  006cf	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR tv312[rsp], 0
  006d7	0f 84 01 01 00
	00		 je	 $LN59@z900_or_ch

; 207  :         {
; 208  :              /* (3) - First operand crosses a boundary */
; 209  :              for (i=0; i < len2; i++)

  006dd	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  006e5	eb 0a		 jmp	 SHORT $LN19@z900_or_ch
$LN17@z900_or_ch:
  006e7	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  006eb	ff c0		 inc	 eax
  006ed	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@z900_or_ch:
  006f1	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  006f5	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  006f9	7d 58		 jge	 SHORT $LN18@z900_or_ch

; 210  :                  if ((*dest1++ |= *source1++))

  006fb	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00700	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00703	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00708	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0070b	0b c8		 or	 ecx, eax
  0070d	8b c1		 mov	 eax, ecx
  0070f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00714	88 01		 mov	 BYTE PTR [rcx], al
  00716	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  0071b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0071e	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv324[rsp], eax
  00725	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  0072a	48 ff c0	 inc	 rax
  0072d	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00732	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00737	48 ff c0	 inc	 rax
  0073a	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  0073f	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR tv324[rsp], 0
  00747	74 08		 je	 SHORT $LN61@z900_or_ch

; 211  :                      cc = 1;

  00749	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN61@z900_or_ch:
  00751	eb 94		 jmp	 SHORT $LN17@z900_or_ch
$LN18@z900_or_ch:

; 212  : 
; 213  :              len2 = len - len2;

  00753	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00757	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  0075b	2b c8		 sub	 ecx, eax
  0075d	8b c1		 mov	 eax, ecx
  0075f	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 214  : 
; 215  :              for (i=0; i <= len2; i++)

  00763	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0076b	eb 0a		 jmp	 SHORT $LN22@z900_or_ch
$LN20@z900_or_ch:
  0076d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00771	ff c0		 inc	 eax
  00773	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@z900_or_ch:
  00777	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0077b	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0077f	7f 58		 jg	 SHORT $LN21@z900_or_ch

; 216  :                  if ((*dest2++ |= *source1++))

  00781	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00786	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00789	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  0078e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00791	0b c8		 or	 ecx, eax
  00793	8b c1		 mov	 eax, ecx
  00795	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  0079a	88 01		 mov	 BYTE PTR [rcx], al
  0079c	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  007a1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007a4	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv336[rsp], eax
  007ab	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  007b0	48 ff c0	 inc	 rax
  007b3	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  007b8	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  007bd	48 ff c0	 inc	 rax
  007c0	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  007c5	83 bc 24 cc 00
	00 00 00	 cmp	 DWORD PTR tv336[rsp], 0
  007cd	74 08		 je	 SHORT $LN62@z900_or_ch

; 217  :                      cc = 1;

  007cf	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN62@z900_or_ch:
  007d7	eb 94		 jmp	 SHORT $LN20@z900_or_ch
$LN21@z900_or_ch:

; 218  :         }

  007d9	e9 9d 04 00 00	 jmp	 $LN60@z900_or_ch
$LN59@z900_or_ch:

; 219  :         else
; 220  :         {
; 221  :             /* (4) - Both operands cross a boundary */
; 222  :             len3 = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  007de	48 8b 44 24 70	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  007e3	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  007e9	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  007ee	48 2b c8	 sub	 rcx, rax
  007f1	48 8b c1	 mov	 rax, rcx
  007f4	89 44 24 50	 mov	 DWORD PTR len3$[rsp], eax

; 223  :             source2 = MADDRL((effective_addr2 + len3) & ADDRESS_MAXWRAP( regs ),

  007f8	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  007fc	ff c0		 inc	 eax
  007fe	2b 44 24 50	 sub	 eax, DWORD PTR len3$[rsp]
  00802	48 98		 cdqe
  00804	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len3$[rsp]
  00809	48 8b 54 24 70	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  0080e	48 03 d1	 add	 rdx, rcx
  00811	48 8b ca	 mov	 rcx, rdx
  00814	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0081c	48 23 8a 90 00
	00 00		 and	 rcx, QWORD PTR [rdx+144]
  00823	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0082b	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0082f	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00833	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0083b	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00843	44 8b 44 24 68	 mov	 r8d, DWORD PTR b2$[rsp]
  00848	48 8b d0	 mov	 rdx, rax
  0084b	e8 00 00 00 00	 call	 z900_maddr_l
  00850	48 89 44 24 60	 mov	 QWORD PTR source2$[rsp], rax

; 224  :              len + 1 - len3,  b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 225  :             if (len2 == len3)

  00855	8b 44 24 50	 mov	 eax, DWORD PTR len3$[rsp]
  00859	39 44 24 34	 cmp	 DWORD PTR len2$[rsp], eax
  0085d	0f 85 01 01 00
	00		 jne	 $LN63@z900_or_ch

; 226  :             {
; 227  :                 /* (4a) - Both operands cross at the same time */
; 228  :                 for (i=0; i < len2; i++)

  00863	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0086b	eb 0a		 jmp	 SHORT $LN25@z900_or_ch
$LN23@z900_or_ch:
  0086d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00871	ff c0		 inc	 eax
  00873	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@z900_or_ch:
  00877	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0087b	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0087f	7d 58		 jge	 SHORT $LN24@z900_or_ch

; 229  :                     if ((*dest1++ |= *source1++))

  00881	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00886	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00889	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0088e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00891	0b c8		 or	 ecx, eax
  00893	8b c1		 mov	 eax, ecx
  00895	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0089a	88 01		 mov	 BYTE PTR [rcx], al
  0089c	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  008a1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008a4	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv366[rsp], eax
  008ab	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  008b0	48 ff c0	 inc	 rax
  008b3	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  008b8	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  008bd	48 ff c0	 inc	 rax
  008c0	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  008c5	83 bc 24 d0 00
	00 00 00	 cmp	 DWORD PTR tv366[rsp], 0
  008cd	74 08		 je	 SHORT $LN65@z900_or_ch

; 230  :                         cc = 1;

  008cf	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN65@z900_or_ch:
  008d7	eb 94		 jmp	 SHORT $LN23@z900_or_ch
$LN24@z900_or_ch:

; 231  : 
; 232  :                 len2 = len - len2;

  008d9	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  008dd	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  008e1	2b c8		 sub	 ecx, eax
  008e3	8b c1		 mov	 eax, ecx
  008e5	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 233  : 
; 234  :                 for (i=0; i <= len2; i++)

  008e9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  008f1	eb 0a		 jmp	 SHORT $LN28@z900_or_ch
$LN26@z900_or_ch:
  008f3	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  008f7	ff c0		 inc	 eax
  008f9	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@z900_or_ch:
  008fd	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00901	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00905	7f 58		 jg	 SHORT $LN27@z900_or_ch

; 235  :                     if ((*dest2++ |= *source2++))

  00907	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  0090c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0090f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00914	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00917	0b c8		 or	 ecx, eax
  00919	8b c1		 mov	 eax, ecx
  0091b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00920	88 01		 mov	 BYTE PTR [rcx], al
  00922	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00927	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0092a	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv378[rsp], eax
  00931	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  00936	48 ff c0	 inc	 rax
  00939	48 89 44 24 60	 mov	 QWORD PTR source2$[rsp], rax
  0093e	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00943	48 ff c0	 inc	 rax
  00946	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  0094b	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv378[rsp], 0
  00953	74 08		 je	 SHORT $LN66@z900_or_ch

; 236  :                         cc = 1;

  00955	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN66@z900_or_ch:
  0095d	eb 94		 jmp	 SHORT $LN26@z900_or_ch
$LN27@z900_or_ch:

; 237  :             }

  0095f	e9 17 03 00 00	 jmp	 $LN64@z900_or_ch
$LN63@z900_or_ch:

; 238  :             else if (len2 < len3)

  00964	8b 44 24 50	 mov	 eax, DWORD PTR len3$[rsp]
  00968	39 44 24 34	 cmp	 DWORD PTR len2$[rsp], eax
  0096c	0f 8d 87 01 00
	00		 jge	 $LN67@z900_or_ch

; 239  :             {
; 240  :                 /* (4b) - First operand crosses first */
; 241  :                 for (i=0; i < len2; i++)

  00972	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0097a	eb 0a		 jmp	 SHORT $LN31@z900_or_ch
$LN29@z900_or_ch:
  0097c	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00980	ff c0		 inc	 eax
  00982	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN31@z900_or_ch:
  00986	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0098a	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0098e	7d 58		 jge	 SHORT $LN30@z900_or_ch

; 242  :                     if ((*dest1++ |= *source1++))

  00990	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00995	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00998	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0099d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  009a0	0b c8		 or	 ecx, eax
  009a2	8b c1		 mov	 eax, ecx
  009a4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  009a9	88 01		 mov	 BYTE PTR [rcx], al
  009ab	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  009b0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009b3	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv390[rsp], eax
  009ba	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  009bf	48 ff c0	 inc	 rax
  009c2	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  009c7	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  009cc	48 ff c0	 inc	 rax
  009cf	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  009d4	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR tv390[rsp], 0
  009dc	74 08		 je	 SHORT $LN69@z900_or_ch

; 243  :                         cc = 1;

  009de	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN69@z900_or_ch:
  009e6	eb 94		 jmp	 SHORT $LN29@z900_or_ch
$LN30@z900_or_ch:

; 244  : 
; 245  :                 len2 = len3 - len2;

  009e8	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  009ec	8b 4c 24 50	 mov	 ecx, DWORD PTR len3$[rsp]
  009f0	2b c8		 sub	 ecx, eax
  009f2	8b c1		 mov	 eax, ecx
  009f4	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 246  : 
; 247  :                 for (i=0; i < len2; i++)

  009f8	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00a00	eb 0a		 jmp	 SHORT $LN34@z900_or_ch
$LN32@z900_or_ch:
  00a02	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00a06	ff c0		 inc	 eax
  00a08	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN34@z900_or_ch:
  00a0c	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00a10	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00a14	7d 58		 jge	 SHORT $LN33@z900_or_ch

; 248  :                     if ((*dest2++ |= *source1++))

  00a16	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00a1b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a1e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00a23	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00a26	0b c8		 or	 ecx, eax
  00a28	8b c1		 mov	 eax, ecx
  00a2a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00a2f	88 01		 mov	 BYTE PTR [rcx], al
  00a31	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00a36	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a39	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv402[rsp], eax
  00a40	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00a45	48 ff c0	 inc	 rax
  00a48	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00a4d	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00a52	48 ff c0	 inc	 rax
  00a55	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  00a5a	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv402[rsp], 0
  00a62	74 08		 je	 SHORT $LN70@z900_or_ch

; 249  :                         cc = 1;

  00a64	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN70@z900_or_ch:
  00a6c	eb 94		 jmp	 SHORT $LN32@z900_or_ch
$LN33@z900_or_ch:

; 250  : 
; 251  :                 len2 = len - len3;

  00a6e	8b 44 24 50	 mov	 eax, DWORD PTR len3$[rsp]
  00a72	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00a76	2b c8		 sub	 ecx, eax
  00a78	8b c1		 mov	 eax, ecx
  00a7a	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 252  : 
; 253  :                 for (i=0; i <= len2; i++)

  00a7e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00a86	eb 0a		 jmp	 SHORT $LN37@z900_or_ch
$LN35@z900_or_ch:
  00a88	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00a8c	ff c0		 inc	 eax
  00a8e	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN37@z900_or_ch:
  00a92	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00a96	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00a9a	7f 58		 jg	 SHORT $LN36@z900_or_ch

; 254  :                     if ((*dest2++ |= *source2++))

  00a9c	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  00aa1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00aa4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00aa9	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00aac	0b c8		 or	 ecx, eax
  00aae	8b c1		 mov	 eax, ecx
  00ab0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00ab5	88 01		 mov	 BYTE PTR [rcx], al
  00ab7	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00abc	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00abf	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv414[rsp], eax
  00ac6	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  00acb	48 ff c0	 inc	 rax
  00ace	48 89 44 24 60	 mov	 QWORD PTR source2$[rsp], rax
  00ad3	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00ad8	48 ff c0	 inc	 rax
  00adb	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  00ae0	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR tv414[rsp], 0
  00ae8	74 08		 je	 SHORT $LN71@z900_or_ch

; 255  :                         cc = 1;

  00aea	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN71@z900_or_ch:
  00af2	eb 94		 jmp	 SHORT $LN35@z900_or_ch
$LN36@z900_or_ch:

; 256  :             }

  00af4	e9 82 01 00 00	 jmp	 $LN68@z900_or_ch
$LN67@z900_or_ch:

; 257  :             else
; 258  :             {
; 259  :                 /* (4c) - Second operand crosses first */
; 260  :                 for ( i = 0; i < len3; i++)

  00af9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00b01	eb 0a		 jmp	 SHORT $LN40@z900_or_ch
$LN38@z900_or_ch:
  00b03	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00b07	ff c0		 inc	 eax
  00b09	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN40@z900_or_ch:
  00b0d	8b 44 24 50	 mov	 eax, DWORD PTR len3$[rsp]
  00b11	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00b15	7d 58		 jge	 SHORT $LN39@z900_or_ch

; 261  :                     if ((*dest1++ |= *source1++))

  00b17	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00b1c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b1f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00b24	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00b27	0b c8		 or	 ecx, eax
  00b29	8b c1		 mov	 eax, ecx
  00b2b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00b30	88 01		 mov	 BYTE PTR [rcx], al
  00b32	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00b37	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b3a	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv425[rsp], eax
  00b41	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00b46	48 ff c0	 inc	 rax
  00b49	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00b4e	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00b53	48 ff c0	 inc	 rax
  00b56	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00b5b	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR tv425[rsp], 0
  00b63	74 08		 je	 SHORT $LN72@z900_or_ch

; 262  :                         cc = 1;

  00b65	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN72@z900_or_ch:
  00b6d	eb 94		 jmp	 SHORT $LN38@z900_or_ch
$LN39@z900_or_ch:

; 263  : 
; 264  :                 len3 = len2 - len3;

  00b6f	8b 44 24 50	 mov	 eax, DWORD PTR len3$[rsp]
  00b73	8b 4c 24 34	 mov	 ecx, DWORD PTR len2$[rsp]
  00b77	2b c8		 sub	 ecx, eax
  00b79	8b c1		 mov	 eax, ecx
  00b7b	89 44 24 50	 mov	 DWORD PTR len3$[rsp], eax

; 265  : 
; 266  :                 for (i=0; i < len3; i++)

  00b7f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00b87	eb 0a		 jmp	 SHORT $LN43@z900_or_ch
$LN41@z900_or_ch:
  00b89	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00b8d	ff c0		 inc	 eax
  00b8f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN43@z900_or_ch:
  00b93	8b 44 24 50	 mov	 eax, DWORD PTR len3$[rsp]
  00b97	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00b9b	7d 58		 jge	 SHORT $LN42@z900_or_ch

; 267  :                     if ((*dest1++ |= *source2++))

  00b9d	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  00ba2	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00ba5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00baa	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00bad	0b c8		 or	 ecx, eax
  00baf	8b c1		 mov	 eax, ecx
  00bb1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00bb6	88 01		 mov	 BYTE PTR [rcx], al
  00bb8	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00bbd	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00bc0	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv437[rsp], eax
  00bc7	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  00bcc	48 ff c0	 inc	 rax
  00bcf	48 89 44 24 60	 mov	 QWORD PTR source2$[rsp], rax
  00bd4	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00bd9	48 ff c0	 inc	 rax
  00bdc	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00be1	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR tv437[rsp], 0
  00be9	74 08		 je	 SHORT $LN73@z900_or_ch

; 268  :                         cc = 1;

  00beb	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN73@z900_or_ch:
  00bf3	eb 94		 jmp	 SHORT $LN41@z900_or_ch
$LN42@z900_or_ch:

; 269  : 
; 270  :                 len3 = len - len2;

  00bf5	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00bf9	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00bfd	2b c8		 sub	 ecx, eax
  00bff	8b c1		 mov	 eax, ecx
  00c01	89 44 24 50	 mov	 DWORD PTR len3$[rsp], eax

; 271  : 
; 272  :                 for (i=0; i <= len3; i++)

  00c05	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00c0d	eb 0a		 jmp	 SHORT $LN46@z900_or_ch
$LN44@z900_or_ch:
  00c0f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00c13	ff c0		 inc	 eax
  00c15	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN46@z900_or_ch:
  00c19	8b 44 24 50	 mov	 eax, DWORD PTR len3$[rsp]
  00c1d	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00c21	7f 58		 jg	 SHORT $LN45@z900_or_ch

; 273  :                     if ((*dest2++ |= *source2++))

  00c23	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  00c28	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00c2b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00c30	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00c33	0b c8		 or	 ecx, eax
  00c35	8b c1		 mov	 eax, ecx
  00c37	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00c3c	88 01		 mov	 BYTE PTR [rcx], al
  00c3e	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00c43	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00c46	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv449[rsp], eax
  00c4d	48 8b 44 24 60	 mov	 rax, QWORD PTR source2$[rsp]
  00c52	48 ff c0	 inc	 rax
  00c55	48 89 44 24 60	 mov	 QWORD PTR source2$[rsp], rax
  00c5a	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00c5f	48 ff c0	 inc	 rax
  00c62	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  00c67	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR tv449[rsp], 0
  00c6f	74 08		 je	 SHORT $LN74@z900_or_ch

; 274  :                         cc = 1;

  00c71	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN74@z900_or_ch:
  00c79	eb 94		 jmp	 SHORT $LN44@z900_or_ch
$LN45@z900_or_ch:
$LN68@z900_or_ch:
$LN64@z900_or_ch:
$LN60@z900_or_ch:

; 275  :             }
; 276  :         }
; 277  :         ARCH_DEP( or_storage_key_by_ptr )( sk1, (STORKEY_REF | STORKEY_CHANGE) );

  00c7b	b2 06		 mov	 dl, 6
  00c7d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR sk1$[rsp]
  00c85	e8 00 00 00 00	 call	 z900_or_storage_key_by_ptr

; 278  :         ARCH_DEP( or_storage_key_by_ptr )( sk2, (STORKEY_REF | STORKEY_CHANGE) );

  00c8a	b2 06		 mov	 dl, 6
  00c8c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR sk2$[rsp]
  00c94	e8 00 00 00 00	 call	 z900_or_storage_key_by_ptr
$LN53@z900_or_ch:

; 279  :     }
; 280  : 
; 281  :     regs->psw.cc = cc;

  00c99	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ca1	0f b6 4c 24 44	 movzx	 ecx, BYTE PTR cc$[rsp]
  00ca6	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@z900_or_ch:

; 282  : 
; 283  :     ITIMER_UPDATE( effective_addr1, len, regs );
; 284  : }

  00ca9	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  00cb0	c3		 ret	 0
z900_or_character ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
temp$1 = 32
b2$ = 36
x2$ = 40
effective_addr2$ = 48
tv78 = 56
tv89 = 60
r1$ = 64
tv156 = 68
tv158 = 72
n$ = 76
inst$ = 96
regs$ = 104
z900_or	PROC

; 72   : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 73   : int     r1;                             /* Value of R field          */
; 74   : int     x2;                             /* Index register            */
; 75   : int     b2;                             /* Base of effective addr    */
; 76   : VADR    effective_addr2;                /* Effective address         */
; 77   : U32     n;                              /* 32-bit operand values     */
; 78   : 
; 79   :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 20	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	8b c0		 mov	 eax, eax
  0002e	48 89 44 24 30	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00033	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 10	 shr	 eax, 16
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 28	 mov	 DWORD PTR x2$[rsp], eax
  00041	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 14	 shr	 eax, 20
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax
  0004f	83 7c 24 28 00	 cmp	 DWORD PTR x2$[rsp], 0
  00054	74 0a		 je	 SHORT $LN12@z900_or
  00056	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  0005e	eb 08		 jmp	 SHORT $LN13@z900_or
$LN12@z900_or:
  00060	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN13@z900_or:
  00068	83 7c 24 38 00	 cmp	 DWORD PTR tv78[rsp], 0
  0006d	74 22		 je	 SHORT $LN5@z900_or
  0006f	48 63 44 24 28	 movsxd	 rax, DWORD PTR x2$[rsp]
  00074	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00079	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00086	48 03 c8	 add	 rcx, rax
  00089	48 8b c1	 mov	 rax, rcx
  0008c	48 89 44 24 30	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN5@z900_or:
  00091	8b 44 24 20	 mov	 eax, DWORD PTR temp$1[rsp]
  00095	c1 e8 0c	 shr	 eax, 12
  00098	83 e0 0f	 and	 eax, 15
  0009b	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  0009f	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a4	74 0a		 je	 SHORT $LN14@z900_or
  000a6	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000ae	eb 08		 jmp	 SHORT $LN15@z900_or
$LN14@z900_or:
  000b0	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN15@z900_or:
  000b8	83 7c 24 3c 00	 cmp	 DWORD PTR tv89[rsp], 0
  000bd	74 22		 je	 SHORT $LN6@z900_or
  000bf	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  000c4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c9	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 89 44 24 30	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN6@z900_or:
  000e1	33 c0		 xor	 eax, eax
  000e3	83 f8 04	 cmp	 eax, 4
  000e6	74 1c		 je	 SHORT $LN7@z900_or
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000f4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000f9	48 23 c8	 and	 rcx, rax
  000fc	48 8b c1	 mov	 rax, rcx
  000ff	48 89 44 24 30	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN7@z900_or:
$LN4@z900_or:
  00104	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00109	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010d	48 83 c0 04	 add	 rax, 4
  00111	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00116	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0011a	33 c0		 xor	 eax, eax
  0011c	83 f8 04	 cmp	 eax, 4
  0011f	74 0c		 je	 SHORT $LN8@z900_or
  00121	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00126	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@z900_or:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 d1		 jne	 SHORT $LN4@z900_or

; 80   :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );

  00133	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00138	8b 54 24 28	 mov	 edx, DWORD PTR x2$[rsp]
  0013c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2

; 81   : 
; 82   :     /* Load second operand from operand address */
; 83   :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00146	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0014b	8b 54 24 24	 mov	 edx, DWORD PTR b2$[rsp]
  0014f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00154	e8 00 00 00 00	 call	 z900_vfetch4
  00159	89 44 24 4c	 mov	 DWORD PTR n$[rsp], eax

; 84   : 
; 85   :     /* OR second operand with first and set condition code */
; 86   :     regs->psw.cc = ( regs->GR_L(r1) |= n ) ? 1 : 0;

  0015d	48 63 44 24 40	 movsxd	 rax, DWORD PTR r1$[rsp]
  00162	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00167	8b 54 24 4c	 mov	 edx, DWORD PTR n$[rsp]
  0016b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00172	0b c2		 or	 eax, edx
  00174	89 44 24 44	 mov	 DWORD PTR tv156[rsp], eax
  00178	48 63 44 24 40	 movsxd	 rax, DWORD PTR r1$[rsp]
  0017d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00182	8b 54 24 44	 mov	 edx, DWORD PTR tv156[rsp]
  00186	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
  0018d	83 7c 24 44 00	 cmp	 DWORD PTR tv156[rsp], 0
  00192	74 0a		 je	 SHORT $LN16@z900_or
  00194	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  0019c	eb 08		 jmp	 SHORT $LN17@z900_or
$LN16@z900_or:
  0019e	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN17@z900_or:
  001a6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001ab	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR tv158[rsp]
  001b0	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 87   : 
; 88   :     /* Check for PER 1 GRA event */
; 89   :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 90   : }

  001b3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001b7	c3		 ret	 0
z900_or	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
addr2$ = 48
termchar$ = 56
cpu_length$ = 60
r2$ = 64
i$ = 68
r1$ = 72
dist$ = 76
main2$ = 80
i$1 = 88
tv158 = 92
tv173 = 96
addr1$ = 104
inst$ = 128
regs$ = 136
z900_search_string PROC

; 543  : {

$LN59:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 544  : int     r1, r2;                         /* Values of R fields        */
; 545  : int     i;                              /* Loop counter              */
; 546  : int     dist;                           /* length working distance   */
; 547  : int     cpu_length;                     /* CPU determined length     */
; 548  : VADR    addr1, addr2;                   /* End/start addresses       */
; 549  : BYTE    *main2;                         /* Operand-2 mainstor addr   */
; 550  : BYTE    termchar;                       /* Terminating character     */
; 551  : 
; 552  :     RRE( inst, regs, r1, r2 );

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0001f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00023	89 44 24 58	 mov	 DWORD PTR i$1[rsp], eax
  00027	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  0002b	83 e0 0f	 and	 eax, 15
  0002e	89 44 24 40	 mov	 DWORD PTR r2$[rsp], eax
  00032	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  00036	c1 f8 04	 sar	 eax, 4
  00039	83 e0 0f	 and	 eax, 15
  0003c	89 44 24 48	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_searc:
  00040	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00048	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004c	48 83 c0 04	 add	 rax, 4
  00050	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00058	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0005c	33 c0		 xor	 eax, eax
  0005e	83 f8 04	 cmp	 eax, 4
  00061	74 0f		 je	 SHORT $LN28@z900_searc
  00063	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN28@z900_searc:
  00072	33 c0		 xor	 eax, eax
  00074	85 c0		 test	 eax, eax
  00076	75 c8		 jne	 SHORT $LN4@z900_searc

; 553  :     PER_ZEROADDR_CHECK( regs, r2 );

  00078	8b 54 24 40	 mov	 edx, DWORD PTR r2$[rsp]
  0007c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00084	e8 00 00 00 00	 call	 z900_per3_zero_check
$LN7@z900_searc:

; 554  : 
; 555  :     TXFC_INSTR_CHECK( regs );

  00089	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00091	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  00098	85 c0		 test	 eax, eax
  0009a	74 3f		 je	 SHORT $LN29@z900_searc
  0009c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000a4	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  000aa	0f ba e8 0f	 bts	 eax, 15
  000ae	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b6	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  000bc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG203021
  000c3	41 b8 0b 00 00
	00		 mov	 r8d, 11
  000c9	ba 02 00 00 00	 mov	 edx, 2
  000ce	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d6	e8 00 00 00 00	 call	 z900_abort_transaction
$LN29@z900_searc:
  000db	33 c0		 xor	 eax, eax
  000dd	85 c0		 test	 eax, eax
  000df	75 a8		 jne	 SHORT $LN7@z900_searc

; 556  : 
; 557  :     /* Program check if bits 0-23 of register 0 not zero */
; 558  :     if ((regs->GR_L(0) & 0xFFFFFF00) != 0)

  000e1	b8 08 00 00 00	 mov	 eax, 8
  000e6	48 6b c0 00	 imul	 rax, rax, 0
  000ea	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  000f9	25 00 ff ff ff	 and	 eax, -256		; ffffff00H
  000fe	85 c0		 test	 eax, eax
  00100	74 1b		 je	 SHORT $LN30@z900_searc

; 559  :         regs->program_interrupt( regs, PGM_SPECIFICATION_EXCEPTION );

  00102	ba 06 00 00 00	 mov	 edx, 6
  00107	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00117	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN30@z900_searc:

; 560  : 
; 561  :     /* Load string terminating character from register 0 bits 24-31 */
; 562  :     termchar = regs->GR_LHLCL(0);

  0011d	b8 08 00 00 00	 mov	 eax, 8
  00122	48 6b c0 00	 imul	 rax, rax, 0
  00126	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0012e	0f b6 84 01 80
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+640]
  00136	88 44 24 38	 mov	 BYTE PTR termchar$[rsp], al

; 563  : 
; 564  :     /* Determine the operand end and start addresses */
; 565  :     addr1 = regs->GR( r1 ) & ADDRESS_MAXWRAP( regs );

  0013a	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  0013f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00147	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0014f	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00156	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0015e	48 23 c2	 and	 rax, rdx
  00161	48 89 44 24 68	 mov	 QWORD PTR addr1$[rsp], rax

; 566  :     addr2 = regs->GR( r2 ) & ADDRESS_MAXWRAP( regs );

  00166	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  0016b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00173	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0017b	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00182	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0018a	48 23 c2	 and	 rax, rdx
  0018d	48 89 44 24 30	 mov	 QWORD PTR addr2$[rsp], rax

; 567  : 
; 568  :     /* Set the minimum CPU determined length per the specification  */
; 569  :     cpu_length = 256;

  00192	c7 44 24 3c 00
	01 00 00	 mov	 DWORD PTR cpu_length$[rsp], 256 ; 00000100H

; 570  : 
; 571  :     /* Should the second operand cross a page boundary, we need to
; 572  :        break up the search into two parts (one part in each page)
; 573  :        to meet the minimum requirement of 256 CPU determined bytes. */
; 574  :     if (unlikely( CROSSPAGEL( addr2, cpu_length )))

  0019a	48 8b 44 24 30	 mov	 rax, QWORD PTR addr2$[rsp]
  0019f	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  001a5	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  001aa	2b 4c 24 3c	 sub	 ecx, DWORD PTR cpu_length$[rsp]
  001ae	3b c1		 cmp	 eax, ecx
  001b0	7e 0a		 jle	 SHORT $LN49@z900_searc
  001b2	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  001ba	eb 08		 jmp	 SHORT $LN50@z900_searc
$LN49@z900_searc:
  001bc	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN50@z900_searc:
  001c4	83 7c 24 5c 00	 cmp	 DWORD PTR tv158[rsp], 0
  001c9	74 0a		 je	 SHORT $LN57@z900_searc
  001cb	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv173[rsp], 1
  001d3	eb 08		 jmp	 SHORT $LN58@z900_searc
$LN57@z900_searc:
  001d5	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
$LN58@z900_searc:
  001dd	83 7c 24 60 00	 cmp	 DWORD PTR tv173[rsp], 0
  001e2	0f 84 e9 01 00
	00		 je	 $LN31@z900_searc

; 575  :     {
; 576  :         /* Compute the distance to the end of operand-2's page */
; 577  :         dist = PAGEFRAME_PAGESIZE - (addr2 & PAGEFRAME_BYTEMASK);

  001e8	48 8b 44 24 30	 mov	 rax, QWORD PTR addr2$[rsp]
  001ed	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  001f3	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  001f8	48 2b c8	 sub	 rcx, rax
  001fb	48 8b c1	 mov	 rax, rcx
  001fe	89 44 24 4c	 mov	 DWORD PTR dist$[rsp], eax
$LN8@z900_searc:

; 578  : 
; 579  :         while (cpu_length)

  00202	83 7c 24 3c 00	 cmp	 DWORD PTR cpu_length$[rsp], 0
  00207	0f 84 64 01 00
	00		 je	 $LN9@z900_searc

; 580  :         {
; 581  :             /* We need to check the boundary condition
; 582  :                BEFORE attempting to access storage,
; 583  :                because if the boundary condition is met,
; 584  :                there is no further need to access storage.
; 585  :             */
; 586  :             /* NOTE: "When the address in general register R1 is less
; 587  :                than the address in general register R2, condition code
; 588  :                2 can be set only if the operand wraps around from the
; 589  :                top of storage to location 0."  The below comparison
; 590  :                for == is thus correct.
; 591  :             */
; 592  :             if (addr2 == addr1)

  0020d	48 8b 44 24 68	 mov	 rax, QWORD PTR addr1$[rsp]
  00212	48 39 44 24 30	 cmp	 QWORD PTR addr2$[rsp], rax
  00217	75 11		 jne	 SHORT $LN32@z900_searc

; 593  :             {
; 594  :                 regs->psw.cc = 2;

  00219	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00221	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 595  :                 return;

  00225	e9 63 03 00 00	 jmp	 $LN1@z900_searc
$LN32@z900_searc:

; 596  :             }
; 597  :             main2 = MADDRL(addr2, cpu_length, r2, regs, ACCTYPE_READ, regs->psw.pkey );

  0022a	48 63 44 24 3c	 movsxd	 rax, DWORD PTR cpu_length$[rsp]
  0022f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00237	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0023b	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0023f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00247	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0024f	44 8b 44 24 40	 mov	 r8d, DWORD PTR r2$[rsp]
  00254	48 8b d0	 mov	 rdx, rax
  00257	48 8b 4c 24 30	 mov	 rcx, QWORD PTR addr2$[rsp]
  0025c	e8 00 00 00 00	 call	 z900_maddr_l
  00261	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 598  :             for (i=0; i < dist; i++)

  00266	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0026e	eb 0a		 jmp	 SHORT $LN12@z900_searc
$LN10@z900_searc:
  00270	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  00274	ff c0		 inc	 eax
  00276	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN12@z900_searc:
  0027a	8b 44 24 4c	 mov	 eax, DWORD PTR dist$[rsp]
  0027e	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  00282	0f 8d cc 00 00
	00		 jge	 $LN11@z900_searc

; 599  :             {
; 600  :                 /* If operand end address has been reached, return
; 601  :                    CC=2 and leave the R1 and R2 registers unchanged
; 602  :                 */
; 603  :                 /* NOTE: "When the address in general register R1 is
; 604  :                    less than the address in general register R2, then
; 605  :                    condition code 2 can be set only when the operand
; 606  :                    wraps around from the top of storage to location 0."
; 607  :                    Thus the below == comparison is correct.
; 608  :                 */
; 609  :                 if (addr2 == addr1)

  00288	48 8b 44 24 68	 mov	 rax, QWORD PTR addr1$[rsp]
  0028d	48 39 44 24 30	 cmp	 QWORD PTR addr2$[rsp], rax
  00292	75 11		 jne	 SHORT $LN33@z900_searc

; 610  :                 {
; 611  :                     regs->psw.cc = 2;

  00294	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0029c	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 612  :                     return;

  002a0	e9 e8 02 00 00	 jmp	 $LN1@z900_searc
$LN33@z900_searc:

; 613  :                 }
; 614  : 
; 615  :                 /* Set CC=1 if the terminating character was found,
; 616  :                    and load the address of that character into R1 */
; 617  :                 if (*main2 == termchar)

  002a5	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  002aa	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002ad	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR termchar$[rsp]
  002b2	3b c1		 cmp	 eax, ecx
  002b4	75 60		 jne	 SHORT $LN34@z900_searc
$LN15@z900_searc:

; 618  :                 {
; 619  :                     SET_GR_A( r1, regs, addr2 );

  002b6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002be	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  002c4	83 e0 01	 and	 eax, 1
  002c7	85 c0		 test	 eax, eax
  002c9	74 1c		 je	 SHORT $LN35@z900_searc
  002cb	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  002d0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002d8	48 8b 54 24 30	 mov	 rdx, QWORD PTR addr2$[rsp]
  002dd	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  002e5	eb 18		 jmp	 SHORT $LN36@z900_searc
$LN35@z900_searc:
  002e7	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  002ec	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002f4	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  002f8	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN36@z900_searc:
  002ff	33 c0		 xor	 eax, eax
  00301	85 c0		 test	 eax, eax
  00303	75 b1		 jne	 SHORT $LN15@z900_searc

; 620  :                     regs->psw.cc = 1;

  00305	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0030d	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 621  :                     return;

  00311	e9 77 02 00 00	 jmp	 $LN1@z900_searc
$LN34@z900_searc:

; 622  :                 }
; 623  : 
; 624  :                 /* Bump operand-2 */
; 625  :                 main2++;

  00316	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  0031b	48 ff c0	 inc	 rax
  0031e	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 626  :                 addr2++;

  00323	48 8b 44 24 30	 mov	 rax, QWORD PTR addr2$[rsp]
  00328	48 ff c0	 inc	 rax
  0032b	48 89 44 24 30	 mov	 QWORD PTR addr2$[rsp], rax

; 627  :                 addr2 &= ADDRESS_MAXWRAP( regs );

  00330	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00338	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0033f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR addr2$[rsp]
  00344	48 23 c8	 and	 rcx, rax
  00347	48 8b c1	 mov	 rax, rcx
  0034a	48 89 44 24 30	 mov	 QWORD PTR addr2$[rsp], rax

; 628  : 
; 629  :             } /* end for(i) */

  0034f	e9 1c ff ff ff	 jmp	 $LN10@z900_searc
$LN11@z900_searc:

; 630  : 
; 631  :             cpu_length -= dist;

  00354	8b 44 24 4c	 mov	 eax, DWORD PTR dist$[rsp]
  00358	8b 4c 24 3c	 mov	 ecx, DWORD PTR cpu_length$[rsp]
  0035c	2b c8		 sub	 ecx, eax
  0035e	8b c1		 mov	 eax, ecx
  00360	89 44 24 3c	 mov	 DWORD PTR cpu_length$[rsp], eax

; 632  :             dist = cpu_length;

  00364	8b 44 24 3c	 mov	 eax, DWORD PTR cpu_length$[rsp]
  00368	89 44 24 4c	 mov	 DWORD PTR dist$[rsp], eax

; 633  : 
; 634  :         } /* end while */

  0036c	e9 91 fe ff ff	 jmp	 $LN8@z900_searc
$LN9@z900_searc:
$LN18@z900_searc:

; 635  : 
; 636  :         /* The CPU determine number of bytes has been reached. Set R2
; 637  :            to point to next character of operand, set CC=3 and exit */
; 638  :         SET_GR_A( r2, regs, addr2 );

  00371	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00379	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0037f	83 e0 01	 and	 eax, 1
  00382	85 c0		 test	 eax, eax
  00384	74 1c		 je	 SHORT $LN37@z900_searc
  00386	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  0038b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00393	48 8b 54 24 30	 mov	 rdx, QWORD PTR addr2$[rsp]
  00398	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  003a0	eb 18		 jmp	 SHORT $LN38@z900_searc
$LN37@z900_searc:
  003a2	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  003a7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003af	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  003b3	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN38@z900_searc:
  003ba	33 c0		 xor	 eax, eax
  003bc	85 c0		 test	 eax, eax
  003be	75 b1		 jne	 SHORT $LN18@z900_searc

; 639  :         regs->psw.cc = 3;

  003c0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003c8	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 640  :         return;

  003cc	e9 bc 01 00 00	 jmp	 $LN1@z900_searc
$LN31@z900_searc:

; 641  :     } /* end if unlikely() */
; 642  : 
; 643  :     /* We don't cross a page boundary with the minimum length, so
; 644  :        extend the CPU determined length out to the end of the page */
; 645  :     cpu_length = PAGEFRAME_PAGESIZE - (addr2 & PAGEFRAME_BYTEMASK);

  003d1	48 8b 44 24 30	 mov	 rax, QWORD PTR addr2$[rsp]
  003d6	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  003dc	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003e1	48 2b c8	 sub	 rcx, rax
  003e4	48 8b c1	 mov	 rax, rcx
  003e7	89 44 24 3c	 mov	 DWORD PTR cpu_length$[rsp], eax

; 646  : 
; 647  :     /* We need to check the boundary condition
; 648  :        BEFORE attempting to access storage,
; 649  :        because if the boundary condition is met,
; 650  :        there is no further need to access storage.
; 651  :     */
; 652  :     /* NOTE: "When the address in general register R1 is less
; 653  :        than the address in general register R2, condition code
; 654  :        2 can be set only if the operand wraps around from the
; 655  :        top of storage to location 0."  The below comparison
; 656  :        for == is thus correct.
; 657  :     */
; 658  :     if (addr2 == addr1)

  003eb	48 8b 44 24 68	 mov	 rax, QWORD PTR addr1$[rsp]
  003f0	48 39 44 24 30	 cmp	 QWORD PTR addr2$[rsp], rax
  003f5	75 11		 jne	 SHORT $LN39@z900_searc

; 659  :     {
; 660  :         regs->psw.cc = 2;

  003f7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003ff	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 661  :         return;

  00403	e9 85 01 00 00	 jmp	 $LN1@z900_searc
$LN39@z900_searc:

; 662  :     }
; 663  : 
; 664  :     main2 = MADDRL(addr2, cpu_length, r2, regs, ACCTYPE_READ, regs->psw.pkey );

  00408	48 63 44 24 3c	 movsxd	 rax, DWORD PTR cpu_length$[rsp]
  0040d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00415	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00419	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0041d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00425	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0042d	44 8b 44 24 40	 mov	 r8d, DWORD PTR r2$[rsp]
  00432	48 8b d0	 mov	 rdx, rax
  00435	48 8b 4c 24 30	 mov	 rcx, QWORD PTR addr2$[rsp]
  0043a	e8 00 00 00 00	 call	 z900_maddr_l
  0043f	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 665  :     for (i=0; i < cpu_length; i++)

  00444	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0044c	eb 0a		 jmp	 SHORT $LN21@z900_searc
$LN19@z900_searc:
  0044e	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  00452	ff c0		 inc	 eax
  00454	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN21@z900_searc:
  00458	8b 44 24 3c	 mov	 eax, DWORD PTR cpu_length$[rsp]
  0045c	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  00460	0f 8d cc 00 00
	00		 jge	 $LN20@z900_searc

; 666  :     {
; 667  :         /* If operand end address has been reached, return
; 668  :            CC=2 and leave the R1 and R2 registers unchanged
; 669  :         */
; 670  :         /* NOTE: "When the address in general register R1 is less
; 671  :            than the address in general register R2, condition code
; 672  :            2 can be set only if the operand wraps around from the
; 673  :            top of storage to location 0."  The below comparison
; 674  :            for == is thus correct.
; 675  :         */
; 676  :         if (addr2 == addr1)

  00466	48 8b 44 24 68	 mov	 rax, QWORD PTR addr1$[rsp]
  0046b	48 39 44 24 30	 cmp	 QWORD PTR addr2$[rsp], rax
  00470	75 11		 jne	 SHORT $LN40@z900_searc

; 677  :         {
; 678  :             regs->psw.cc = 2;

  00472	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0047a	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 679  :             return;

  0047e	e9 0a 01 00 00	 jmp	 $LN1@z900_searc
$LN40@z900_searc:

; 680  :         }
; 681  : 
; 682  :         /* If the terminating character was found, return
; 683  :            CC=1 and load the address of the character in R1 */
; 684  :         if (*main2 == termchar)

  00483	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  00488	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0048b	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR termchar$[rsp]
  00490	3b c1		 cmp	 eax, ecx
  00492	75 60		 jne	 SHORT $LN41@z900_searc
$LN24@z900_searc:

; 685  :         {
; 686  :             SET_GR_A( r1, regs, addr2 );

  00494	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0049c	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  004a2	83 e0 01	 and	 eax, 1
  004a5	85 c0		 test	 eax, eax
  004a7	74 1c		 je	 SHORT $LN42@z900_searc
  004a9	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  004ae	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004b6	48 8b 54 24 30	 mov	 rdx, QWORD PTR addr2$[rsp]
  004bb	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  004c3	eb 18		 jmp	 SHORT $LN43@z900_searc
$LN42@z900_searc:
  004c5	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  004ca	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004d2	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  004d6	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN43@z900_searc:
  004dd	33 c0		 xor	 eax, eax
  004df	85 c0		 test	 eax, eax
  004e1	75 b1		 jne	 SHORT $LN24@z900_searc

; 687  :             regs->psw.cc = 1;

  004e3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004eb	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 688  :             return;

  004ef	e9 99 00 00 00	 jmp	 $LN1@z900_searc
$LN41@z900_searc:

; 689  :         }
; 690  : 
; 691  :         /* Bump operand-2 */
; 692  :         main2++;

  004f4	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  004f9	48 ff c0	 inc	 rax
  004fc	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 693  :         addr2++;

  00501	48 8b 44 24 30	 mov	 rax, QWORD PTR addr2$[rsp]
  00506	48 ff c0	 inc	 rax
  00509	48 89 44 24 30	 mov	 QWORD PTR addr2$[rsp], rax

; 694  :         addr2 &= ADDRESS_MAXWRAP( regs );

  0050e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00516	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0051d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR addr2$[rsp]
  00522	48 23 c8	 and	 rcx, rax
  00525	48 8b c1	 mov	 rax, rcx
  00528	48 89 44 24 30	 mov	 QWORD PTR addr2$[rsp], rax

; 695  : 
; 696  :     } /* end for(i) */

  0052d	e9 1c ff ff ff	 jmp	 $LN19@z900_searc
$LN20@z900_searc:
$LN27@z900_searc:

; 697  : 
; 698  :     /* The CPU determine number of bytes has been reached.
; 699  :        Set R2 to point to next character of operand-2 and
; 700  :        return CC=3.
; 701  :     */
; 702  :     SET_GR_A( r2, regs, addr2 );

  00532	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0053a	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00540	83 e0 01	 and	 eax, 1
  00543	85 c0		 test	 eax, eax
  00545	74 1c		 je	 SHORT $LN44@z900_searc
  00547	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  0054c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00554	48 8b 54 24 30	 mov	 rdx, QWORD PTR addr2$[rsp]
  00559	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00561	eb 18		 jmp	 SHORT $LN45@z900_searc
$LN44@z900_searc:
  00563	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  00568	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00570	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  00574	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN45@z900_searc:
  0057b	33 c0		 xor	 eax, eax
  0057d	85 c0		 test	 eax, eax
  0057f	75 b1		 jne	 SHORT $LN27@z900_searc

; 703  :     regs->psw.cc = 3;

  00581	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00589	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@z900_searc:

; 704  : 
; 705  : } /* end DEF_INST(search_string) */

  0058d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00591	c3		 ret	 0
z900_search_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b4$ = 64
b2$ = 68
r1$ = 72
r3$ = 76
effective_addr4$ = 80
effective_addr2$ = 88
temp$1 = 96
tv177 = 100
tv223 = 104
inst$ = 128
regs$ = 136
z900_perform_locked_operation PROC

; 359  : {

$LN89:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 360  : int     r1, r3;                         /* Lenght values             */
; 361  : int     b2, b4;                         /* Values of base registers  */
; 362  : VADR    effective_addr2,
; 363  :         effective_addr4;                /* Effective addresses       */
; 364  : 
; 365  :     SS(inst, regs, r1, r3, b2, effective_addr2, b4, effective_addr4);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 60	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	8b c0		 mov	 eax, eax
  00038	48 89 44 24 50	 mov	 QWORD PTR effective_addr4$[rsp], rax
  0003d	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00041	c1 e8 0c	 shr	 eax, 12
  00044	83 e0 0f	 and	 eax, 15
  00047	89 44 24 40	 mov	 DWORD PTR b4$[rsp], eax
  0004b	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  0004f	c1 e8 10	 shr	 eax, 16
  00052	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00057	8b c0		 mov	 eax, eax
  00059	48 89 44 24 58	 mov	 QWORD PTR effective_addr2$[rsp], rax
  0005e	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00062	c1 e8 1c	 shr	 eax, 28
  00065	83 e0 0f	 and	 eax, 15
  00068	89 44 24 44	 mov	 DWORD PTR b2$[rsp], eax
  0006c	b8 01 00 00 00	 mov	 eax, 1
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00081	83 e0 0f	 and	 eax, 15
  00084	89 44 24 4c	 mov	 DWORD PTR r3$[rsp], eax
  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00099	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009d	c1 f8 04	 sar	 eax, 4
  000a0	83 e0 0f	 and	 eax, 15
  000a3	89 44 24 48	 mov	 DWORD PTR r1$[rsp], eax
  000a7	83 7c 24 44 00	 cmp	 DWORD PTR b2$[rsp], 0
  000ac	74 44		 je	 SHORT $LN24@z900_perfo
  000ae	48 63 44 24 44	 movsxd	 rax, DWORD PTR b2$[rsp]
  000b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000bb	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000c3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 89 44 24 58	 mov	 QWORD PTR effective_addr2$[rsp], rax
  000d3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000db	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000e2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000e7	48 23 c8	 and	 rcx, rax
  000ea	48 8b c1	 mov	 rax, rcx
  000ed	48 89 44 24 58	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN24@z900_perfo:
  000f2	83 7c 24 40 00	 cmp	 DWORD PTR b4$[rsp], 0
  000f7	74 44		 je	 SHORT $LN25@z900_perfo
  000f9	48 63 44 24 40	 movsxd	 rax, DWORD PTR b4$[rsp]
  000fe	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00106	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0010e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr4$[rsp]
  00113	48 03 c8	 add	 rcx, rax
  00116	48 8b c1	 mov	 rax, rcx
  00119	48 89 44 24 50	 mov	 QWORD PTR effective_addr4$[rsp], rax
  0011e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00126	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0012d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR effective_addr4$[rsp]
  00132	48 23 c8	 and	 rcx, rax
  00135	48 8b c1	 mov	 rax, rcx
  00138	48 89 44 24 50	 mov	 QWORD PTR effective_addr4$[rsp], rax
$LN25@z900_perfo:
$LN4@z900_perfo:
  0013d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00145	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00149	48 83 c0 06	 add	 rax, 6
  0014d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00155	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00159	33 c0		 xor	 eax, eax
  0015b	83 f8 06	 cmp	 eax, 6
  0015e	74 0f		 je	 SHORT $LN26@z900_perfo
  00160	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN26@z900_perfo:
  0016f	33 c0		 xor	 eax, eax
  00171	85 c0		 test	 eax, eax
  00173	75 c8		 jne	 SHORT $LN4@z900_perfo

; 366  :     PER_ZEROADDR_XCHECK2( regs, b2, b4 );

  00175	44 8b 44 24 40	 mov	 r8d, DWORD PTR b4$[rsp]
  0017a	8b 54 24 44	 mov	 edx, DWORD PTR b2$[rsp]
  0017e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00186	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2
$LN7@z900_perfo:

; 367  :     TXF_INSTR_CHECK( regs );

  0018b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00193	0f b6 80 58 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3672]
  0019a	85 c0		 test	 eax, eax
  0019c	74 3f		 je	 SHORT $LN27@z900_perfo
  0019e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a6	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  001ac	0f ba e8 0c	 bts	 eax, 12
  001b0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b8	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  001be	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG202905
  001c5	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001cb	ba 02 00 00 00	 mov	 edx, 2
  001d0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001d8	e8 00 00 00 00	 call	 z900_abort_transaction
$LN27@z900_perfo:
  001dd	33 c0		 xor	 eax, eax
  001df	85 c0		 test	 eax, eax
  001e1	75 a8		 jne	 SHORT $LN7@z900_perfo

; 368  : 
; 369  :     if(regs->GR_L(0) & PLO_GPR0_RESV)

  001e3	b8 08 00 00 00	 mov	 eax, 8
  001e8	48 6b c0 00	 imul	 rax, rax, 0
  001ec	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f4	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  001fb	25 00 fe ff ff	 and	 eax, -512		; fffffe00H
  00200	85 c0		 test	 eax, eax
  00202	74 1b		 je	 SHORT $LN28@z900_perfo

; 370  :         regs->program_interrupt(regs, PGM_SPECIFICATION_EXCEPTION);

  00204	ba 06 00 00 00	 mov	 edx, 6
  00209	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00211	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00219	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN28@z900_perfo:

; 371  : 
; 372  :     if(regs->GR_L(0) & PLO_GPR0_T)

  0021f	b8 08 00 00 00	 mov	 eax, 8
  00224	48 6b c0 00	 imul	 rax, rax, 0
  00228	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00230	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00237	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0023c	85 c0		 test	 eax, eax
  0023e	0f 84 eb 00 00
	00		 je	 $LN29@z900_perfo

; 373  :         switch(regs->GR_L(0) & PLO_GPR0_FC)

  00244	b8 08 00 00 00	 mov	 eax, 8
  00249	48 6b c0 00	 imul	 rax, rax, 0
  0024d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00255	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0025c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00261	89 44 24 64	 mov	 DWORD PTR tv177[rsp], eax
  00265	83 7c 24 64 17	 cmp	 DWORD PTR tv177[rsp], 23
  0026a	77 28		 ja	 SHORT $LN55@z900_perfo
  0026c	8b 44 24 64	 mov	 eax, DWORD PTR tv177[rsp]
  00270	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00277	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN88@z900_perfo[rcx+rax*4]
  0027e	48 03 c1	 add	 rax, rcx
  00281	ff e0		 jmp	 rax
$LN31@z900_perfo:
$LN32@z900_perfo:
$LN33@z900_perfo:
$LN34@z900_perfo:
$LN35@z900_perfo:
$LN36@z900_perfo:
$LN37@z900_perfo:
$LN38@z900_perfo:
$LN39@z900_perfo:
$LN40@z900_perfo:
$LN41@z900_perfo:
$LN42@z900_perfo:
$LN43@z900_perfo:
$LN44@z900_perfo:
$LN45@z900_perfo:
$LN46@z900_perfo:
$LN47@z900_perfo:
$LN48@z900_perfo:
$LN49@z900_perfo:
$LN50@z900_perfo:
$LN51@z900_perfo:
$LN52@z900_perfo:
$LN53@z900_perfo:
$LN54@z900_perfo:

; 374  :     {
; 375  :         case PLO_CL:
; 376  :         case PLO_CLG:
; 377  :         case PLO_CS:
; 378  :         case PLO_CSG:
; 379  :         case PLO_DCS:
; 380  :         case PLO_DCSG:
; 381  :         case PLO_CSST:
; 382  :         case PLO_CSSTG:
; 383  :         case PLO_CSDST:
; 384  :         case PLO_CSDSTG:
; 385  :         case PLO_CSTST:
; 386  :         case PLO_CSTSTG:
; 387  : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 388  :         case PLO_CLGR:
; 389  :         case PLO_CLX:
; 390  :         case PLO_CSGR:
; 391  :         case PLO_CSX:
; 392  :         case PLO_DCSGR:
; 393  :         case PLO_DCSX:
; 394  :         case PLO_CSSTGR:
; 395  :         case PLO_CSSTX:
; 396  :         case PLO_CSDSTGR:
; 397  :         case PLO_CSDSTX:
; 398  :         case PLO_CSTSTGR:
; 399  :         case PLO_CSTSTX:
; 400  : #endif /* defined( FEATURE_001_ZARCH_INSTALLED_FACILITY ) */
; 401  : 
; 402  :             /* Indicate function supported */
; 403  :             regs->psw.cc = 0;

  00283	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0028b	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 404  :             break;

  0028f	e9 96 00 00 00	 jmp	 $LN8@z900_perfo
$LN55@z900_perfo:
$LN12@z900_perfo:

; 405  : 
; 406  :         default:
; 407  :             PTT_ERR("*PLO",regs->GR_L(0),regs->GR_L(r1),regs->psw.IA_L);

  00294	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_pttclass
  0029b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0029e	48 83 e0 10	 and	 rax, 16
  002a2	48 85 c0	 test	 rax, rax
  002a5	74 6d		 je	 SHORT $LN56@z900_perfo
  002a7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002af	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  002b5	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR r1$[rsp]
  002ba	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002c2	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  002c9	ba 08 00 00 00	 mov	 edx, 8
  002ce	48 6b d2 00	 imul	 rdx, rdx, 0
  002d2	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002da	41 8b 94 10 80
	02 00 00	 mov	 edx, DWORD PTR [r8+rdx+640]
  002e2	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  002eb	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002f0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG202935
  002f7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002fc	44 8b c9	 mov	 r9d, ecx
  002ff	44 8b c2	 mov	 r8d, edx
  00302	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG202936
  00309	b9 10 00 00 00	 mov	 ecx, 16
  0030e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptt_pthread_trace
$LN56@z900_perfo:
  00314	33 c0		 xor	 eax, eax
  00316	85 c0		 test	 eax, eax
  00318	0f 85 76 ff ff
	ff		 jne	 $LN12@z900_perfo

; 408  :             /* indicate function not supported */
; 409  :             regs->psw.cc = 3;

  0031e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00326	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN8@z900_perfo:

; 410  :             break;
; 411  :     }

  0032a	e9 86 08 00 00	 jmp	 $LN30@z900_perfo
$LN29@z900_perfo:
$LN15@z900_perfo:

; 412  :     else
; 413  :     {
; 414  :         /* gpr1/ar1 indentify the program lock token, which is used
; 415  :            to select a lock from the model dependent number of locks
; 416  :            in the configuration.  We simply use 1 lock which is the
; 417  :            main storage access lock which is also used by CS, CDS
; 418  :            and TS.                                               *JJ */
; 419  :         OBTAIN_MAINLOCK_UNCONDITIONAL( regs );

  0032f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00337	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0033e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00346	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0034a	48 8b 89 b0 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4784]
  00351	48 39 48 50	 cmp	 QWORD PTR [rax+80], rcx
  00355	74 4b		 je	 SHORT $LN57@z900_perfo
  00357	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0035f	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00363	48 05 68 10 00
	00		 add	 rax, 4200		; 00001068H
  00369	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG202938
  00370	48 8b c8	 mov	 rcx, rax
  00373	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
  00379	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00381	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00388	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00390	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00394	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  0039b	66 89 81 60 10
	00 00		 mov	 WORD PTR [rcx+4192], ax
$LN57@z900_perfo:
  003a2	33 c0		 xor	 eax, eax
  003a4	85 c0		 test	 eax, eax
  003a6	75 87		 jne	 SHORT $LN15@z900_perfo

; 420  :         {
; 421  :             switch(regs->GR_L(0) & PLO_GPR0_FC)

  003a8	b8 08 00 00 00	 mov	 eax, 8
  003ad	48 6b c0 00	 imul	 rax, rax, 0
  003b1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003b9	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  003c0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003c5	89 44 24 68	 mov	 DWORD PTR tv223[rsp], eax
  003c9	83 7c 24 68 17	 cmp	 DWORD PTR tv223[rsp], 23
  003ce	0f 87 a1 06 00
	00		 ja	 $LN82@z900_perfo
  003d4	8b 44 24 68	 mov	 eax, DWORD PTR tv223[rsp]
  003d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  003df	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN87@z900_perfo[rcx+rax*4]
  003e6	48 03 c1	 add	 rax, rcx
  003e9	ff e0		 jmp	 rax
$LN58@z900_perfo:

; 422  :             {
; 423  :                 case PLO_CL:
; 424  :                     regs->psw.cc = ARCH_DEP(plo_cl) (r1, r3,

  003eb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003f3	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  003f8	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  003fc	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00400	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00405	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040a	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  0040f	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00414	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00418	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  0041c	e8 00 00 00 00	 call	 z900_plo_cl
  00421	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00429	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 425  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 426  :                     break;

  0042c	e9 5f 06 00 00	 jmp	 $LN16@z900_perfo
$LN59@z900_perfo:

; 427  :                 case PLO_CLG:
; 428  :                     regs->psw.cc = ARCH_DEP(plo_clg) (r1, r3,

  00431	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00439	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0043e	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00442	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00446	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  0044b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00450	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00455	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  0045a	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  0045e	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00462	e8 00 00 00 00	 call	 z900_plo_clg
  00467	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0046f	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 429  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 430  :                     break;

  00472	e9 19 06 00 00	 jmp	 $LN16@z900_perfo
$LN60@z900_perfo:

; 431  :                 case PLO_CS:
; 432  :                     regs->psw.cc = ARCH_DEP(plo_cs) (r1, r3,

  00477	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0047f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00484	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00488	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0048c	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00491	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00496	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  0049b	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  004a0	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  004a4	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  004a8	e8 00 00 00 00	 call	 z900_plo_cs
  004ad	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004b5	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 433  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 434  :                     break;

  004b8	e9 d3 05 00 00	 jmp	 $LN16@z900_perfo
$LN61@z900_perfo:

; 435  :                 case PLO_CSG:
; 436  :                     regs->psw.cc = ARCH_DEP(plo_csg) (r1, r3,

  004bd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004c5	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  004ca	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  004ce	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  004d2	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  004d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004dc	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  004e1	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  004e6	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  004ea	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  004ee	e8 00 00 00 00	 call	 z900_plo_csg
  004f3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004fb	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 437  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 438  :                     break;

  004fe	e9 8d 05 00 00	 jmp	 $LN16@z900_perfo
$LN62@z900_perfo:

; 439  :                 case PLO_DCS:
; 440  :                     regs->psw.cc = ARCH_DEP(plo_dcs) (r1, r3,

  00503	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0050b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00510	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00514	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00518	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  0051d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00522	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00527	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  0052c	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00530	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00534	e8 00 00 00 00	 call	 z900_plo_dcs
  00539	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00541	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 441  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 442  :                     break;

  00544	e9 47 05 00 00	 jmp	 $LN16@z900_perfo
$LN63@z900_perfo:

; 443  :                 case PLO_DCSG:
; 444  :                     regs->psw.cc = ARCH_DEP(plo_dcsg) (r1, r3,

  00549	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00551	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00556	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  0055a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0055e	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00563	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00568	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  0056d	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00572	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00576	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  0057a	e8 00 00 00 00	 call	 z900_plo_dcsg
  0057f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00587	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 445  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 446  :                     break;

  0058a	e9 01 05 00 00	 jmp	 $LN16@z900_perfo
$LN64@z900_perfo:

; 447  :                 case PLO_CSST:
; 448  :                     regs->psw.cc = ARCH_DEP(plo_csst) (r1, r3,

  0058f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00597	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0059c	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  005a0	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  005a4	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  005a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005ae	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  005b3	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  005b8	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  005bc	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  005c0	e8 00 00 00 00	 call	 z900_plo_csst
  005c5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005cd	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 449  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 450  :                     break;

  005d0	e9 bb 04 00 00	 jmp	 $LN16@z900_perfo
$LN65@z900_perfo:

; 451  :                 case PLO_CSSTG:
; 452  :                     regs->psw.cc = ARCH_DEP(plo_csstg) (r1, r3,

  005d5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005dd	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  005e2	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  005e6	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  005ea	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  005ef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005f4	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  005f9	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  005fe	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00602	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00606	e8 00 00 00 00	 call	 z900_plo_csstg
  0060b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00613	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 453  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 454  :                     break;

  00616	e9 75 04 00 00	 jmp	 $LN16@z900_perfo
$LN66@z900_perfo:

; 455  :                 case PLO_CSDST:
; 456  :                     regs->psw.cc = ARCH_DEP(plo_csdst) (r1, r3,

  0061b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00623	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00628	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  0062c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00630	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00635	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0063a	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  0063f	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00644	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00648	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  0064c	e8 00 00 00 00	 call	 z900_plo_csdst
  00651	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00659	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 457  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 458  :                     break;

  0065c	e9 2f 04 00 00	 jmp	 $LN16@z900_perfo
$LN67@z900_perfo:

; 459  :                 case PLO_CSDSTG:
; 460  :                     regs->psw.cc = ARCH_DEP(plo_csdstg) (r1, r3,

  00661	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00669	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0066e	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00672	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00676	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  0067b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00680	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00685	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  0068a	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  0068e	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00692	e8 00 00 00 00	 call	 z900_plo_csdstg
  00697	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0069f	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 461  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 462  :                     break;

  006a2	e9 e9 03 00 00	 jmp	 $LN16@z900_perfo
$LN68@z900_perfo:

; 463  :                 case PLO_CSTST:
; 464  :                     regs->psw.cc = ARCH_DEP(plo_cstst) (r1, r3,

  006a7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006af	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006b4	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  006b8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  006bc	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  006c1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006c6	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  006cb	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  006d0	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  006d4	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  006d8	e8 00 00 00 00	 call	 z900_plo_cstst
  006dd	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006e5	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 465  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 466  :                     break;

  006e8	e9 a3 03 00 00	 jmp	 $LN16@z900_perfo
$LN69@z900_perfo:

; 467  :                 case PLO_CSTSTG:
; 468  :                     regs->psw.cc = ARCH_DEP(plo_cststg) (r1, r3,

  006ed	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006f5	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006fa	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  006fe	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00702	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00707	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0070c	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00711	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00716	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  0071a	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  0071e	e8 00 00 00 00	 call	 z900_plo_cststg
  00723	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0072b	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 469  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 470  :                     break;

  0072e	e9 5d 03 00 00	 jmp	 $LN16@z900_perfo
$LN70@z900_perfo:

; 471  : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 472  :                 case PLO_CLGR:
; 473  :                     regs->psw.cc = ARCH_DEP(plo_clgr) (r1, r3,

  00733	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0073b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00740	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00744	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00748	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  0074d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00752	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00757	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  0075c	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00760	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00764	e8 00 00 00 00	 call	 z900_plo_clgr
  00769	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00771	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 474  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 475  :                     break;

  00774	e9 17 03 00 00	 jmp	 $LN16@z900_perfo
$LN71@z900_perfo:

; 476  :                 case PLO_CLX:
; 477  :                     regs->psw.cc = ARCH_DEP(plo_clx) (r1, r3,

  00779	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00781	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00786	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  0078a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0078e	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00793	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00798	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  0079d	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  007a2	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  007a6	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  007aa	e8 00 00 00 00	 call	 z900_plo_clx
  007af	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007b7	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 478  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 479  :                     break;

  007ba	e9 d1 02 00 00	 jmp	 $LN16@z900_perfo
$LN72@z900_perfo:

; 480  :                 case PLO_CSGR:
; 481  :                     regs->psw.cc = ARCH_DEP(plo_csgr) (r1, r3,

  007bf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007c7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007cc	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  007d0	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  007d4	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  007d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007de	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  007e3	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  007e8	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  007ec	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  007f0	e8 00 00 00 00	 call	 z900_plo_csgr
  007f5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007fd	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 482  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 483  :                     break;

  00800	e9 8b 02 00 00	 jmp	 $LN16@z900_perfo
$LN73@z900_perfo:

; 484  :                 case PLO_CSX:
; 485  :                     regs->psw.cc = ARCH_DEP(plo_csx) (r1, r3,

  00805	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0080d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00812	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00816	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0081a	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  0081f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00824	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00829	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  0082e	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00832	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00836	e8 00 00 00 00	 call	 z900_plo_csx
  0083b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00843	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 486  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 487  :                     break;

  00846	e9 45 02 00 00	 jmp	 $LN16@z900_perfo
$LN74@z900_perfo:

; 488  :                 case PLO_DCSGR:
; 489  :                     regs->psw.cc = ARCH_DEP(plo_dcsgr) (r1, r3,

  0084b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00853	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00858	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  0085c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00860	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00865	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0086a	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  0086f	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00874	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00878	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  0087c	e8 00 00 00 00	 call	 z900_plo_dcsgr
  00881	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00889	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 490  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 491  :                     break;

  0088c	e9 ff 01 00 00	 jmp	 $LN16@z900_perfo
$LN75@z900_perfo:

; 492  :                 case PLO_DCSX:
; 493  :                     regs->psw.cc = ARCH_DEP(plo_dcsx) (r1, r3,

  00891	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00899	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0089e	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  008a2	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  008a6	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  008ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008b0	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  008b5	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  008ba	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  008be	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  008c2	e8 00 00 00 00	 call	 z900_plo_dcsx
  008c7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008cf	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 494  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 495  :                     break;

  008d2	e9 b9 01 00 00	 jmp	 $LN16@z900_perfo
$LN76@z900_perfo:

; 496  :                 case PLO_CSSTGR:
; 497  :                     regs->psw.cc = ARCH_DEP(plo_csstgr) (r1, r3,

  008d7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008df	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  008e4	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  008e8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  008ec	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  008f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008f6	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  008fb	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00900	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00904	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00908	e8 00 00 00 00	 call	 z900_plo_csstgr
  0090d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00915	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 498  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 499  :                     break;

  00918	e9 73 01 00 00	 jmp	 $LN16@z900_perfo
$LN77@z900_perfo:

; 500  :                 case PLO_CSSTX:
; 501  :                     regs->psw.cc = ARCH_DEP(plo_csstx) (r1, r3,

  0091d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00925	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0092a	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  0092e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00932	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00937	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0093c	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00941	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00946	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  0094a	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  0094e	e8 00 00 00 00	 call	 z900_plo_csstx
  00953	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0095b	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 502  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 503  :                     break;

  0095e	e9 2d 01 00 00	 jmp	 $LN16@z900_perfo
$LN78@z900_perfo:

; 504  :                 case PLO_CSDSTGR:
; 505  :                     regs->psw.cc = ARCH_DEP(plo_csdstgr) (r1, r3,

  00963	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0096b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00970	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00974	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00978	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  0097d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00982	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00987	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  0098c	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00990	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00994	e8 00 00 00 00	 call	 z900_plo_csdstgr
  00999	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  009a1	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 506  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 507  :                     break;

  009a4	e9 e7 00 00 00	 jmp	 $LN16@z900_perfo
$LN79@z900_perfo:

; 508  :                 case PLO_CSDSTX:
; 509  :                     regs->psw.cc = ARCH_DEP(plo_csdstx) (r1, r3,

  009a9	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009b1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  009b6	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  009ba	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  009be	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  009c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009c8	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  009cd	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  009d2	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  009d6	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  009da	e8 00 00 00 00	 call	 z900_plo_csdstx
  009df	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  009e7	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 510  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 511  :                     break;

  009ea	e9 a1 00 00 00	 jmp	 $LN16@z900_perfo
$LN80@z900_perfo:

; 512  :                 case PLO_CSTSTGR:
; 513  :                     regs->psw.cc = ARCH_DEP(plo_cststgr) (r1, r3,

  009ef	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009f7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  009fc	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00a00	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00a04	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00a09	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a0e	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00a13	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00a18	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00a1c	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00a20	e8 00 00 00 00	 call	 z900_plo_cststgr
  00a25	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a2d	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 514  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 515  :                     break;

  00a30	eb 5e		 jmp	 SHORT $LN16@z900_perfo
$LN81@z900_perfo:

; 516  :                 case PLO_CSTSTX:
; 517  :                     regs->psw.cc = ARCH_DEP(plo_cststx) (r1, r3,

  00a32	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a3a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00a3f	8b 44 24 40	 mov	 eax, DWORD PTR b4$[rsp]
  00a43	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00a47	48 8b 44 24 50	 mov	 rax, QWORD PTR effective_addr4$[rsp]
  00a4c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a51	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00a56	4c 8b 44 24 58	 mov	 r8, QWORD PTR effective_addr2$[rsp]
  00a5b	8b 54 24 4c	 mov	 edx, DWORD PTR r3$[rsp]
  00a5f	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00a63	e8 00 00 00 00	 call	 z900_plo_cststx
  00a68	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a70	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 518  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 519  :                     break;

  00a73	eb 1b		 jmp	 SHORT $LN16@z900_perfo
$LN82@z900_perfo:

; 520  :    #endif /* defined( FEATURE_001_ZARCH_INSTALLED_FACILITY ) */
; 521  : 
; 522  :                 default:
; 523  :                     regs->program_interrupt(regs, PGM_SPECIFICATION_EXCEPTION);

  00a75	ba 06 00 00 00	 mov	 edx, 6
  00a7a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a82	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a8a	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN16@z900_perfo:
$LN20@z900_perfo:

; 524  :             }
; 525  :         }
; 526  :         RELEASE_MAINLOCK_UNCONDITIONAL( regs );

  00a90	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a98	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00a9c	0f b7 80 60 10
	00 00		 movzx	 eax, WORD PTR [rax+4192]
  00aa3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00aab	48 8b 89 68 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2152]
  00ab2	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  00ab9	3b c1		 cmp	 eax, ecx
  00abb	75 3a		 jne	 SHORT $LN83@z900_perfo
  00abd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ac5	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00ac9	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00ace	66 89 88 60 10
	00 00		 mov	 WORD PTR [rax+4192], cx
  00ad5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00add	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00ae1	48 05 68 10 00
	00		 add	 rax, 4200		; 00001068H
  00ae7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG202965
  00aee	48 8b c8	 mov	 rcx, rax
  00af1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN83@z900_perfo:
  00af7	33 c0		 xor	 eax, eax
  00af9	85 c0		 test	 eax, eax
  00afb	75 93		 jne	 SHORT $LN20@z900_perfo

; 527  : 
; 528  :         if(regs->psw.cc && sysblk.cpus > 1)

  00afd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b05	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  00b09	85 c0		 test	 eax, eax
  00b0b	0f 84 a4 00 00
	00		 je	 $LN84@z900_perfo
  00b11	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b18	83 b8 04 01 00
	00 01		 cmp	 DWORD PTR [rax+260], 1
  00b1f	0f 8e 90 00 00
	00		 jle	 $LN84@z900_perfo
$LN23@z900_perfo:

; 529  :         {
; 530  :             PTT_CSF("*PLO",regs->GR_L(0),regs->GR_L(r1),regs->psw.IA_L);

  00b25	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_pttclass
  00b2c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b2f	48 83 e0 40	 and	 rax, 64			; 00000040H
  00b33	48 85 c0	 test	 rax, rax
  00b36	74 6d		 je	 SHORT $LN85@z900_perfo
  00b38	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b40	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00b46	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00b4b	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00b53	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00b5a	ba 08 00 00 00	 mov	 edx, 8
  00b5f	48 6b d2 00	 imul	 rdx, rdx, 0
  00b63	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b6b	41 8b 94 10 80
	02 00 00	 mov	 edx, DWORD PTR [r8+rdx+640]
  00b73	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00b7c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00b81	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG202968
  00b88	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b8d	44 8b c9	 mov	 r9d, ecx
  00b90	44 8b c2	 mov	 r8d, edx
  00b93	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG202969
  00b9a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00b9f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptt_pthread_trace
$LN85@z900_perfo:
  00ba5	33 c0		 xor	 eax, eax
  00ba7	85 c0		 test	 eax, eax
  00ba9	0f 85 76 ff ff
	ff		 jne	 $LN23@z900_perfo

; 531  :             sched_yield();

  00baf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN84@z900_perfo:
$LN30@z900_perfo:

; 532  :         }
; 533  :     }
; 534  : }

  00bb5	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00bb9	c3		 ret	 0
  00bba	66 90		 npad	 2
$LN88@z900_perfo:
  00bbc	00 00 00 00	 DD	 $LN31@z900_perfo
  00bc0	00 00 00 00	 DD	 $LN32@z900_perfo
  00bc4	00 00 00 00	 DD	 $LN43@z900_perfo
  00bc8	00 00 00 00	 DD	 $LN44@z900_perfo
  00bcc	00 00 00 00	 DD	 $LN33@z900_perfo
  00bd0	00 00 00 00	 DD	 $LN34@z900_perfo
  00bd4	00 00 00 00	 DD	 $LN45@z900_perfo
  00bd8	00 00 00 00	 DD	 $LN46@z900_perfo
  00bdc	00 00 00 00	 DD	 $LN35@z900_perfo
  00be0	00 00 00 00	 DD	 $LN36@z900_perfo
  00be4	00 00 00 00	 DD	 $LN47@z900_perfo
  00be8	00 00 00 00	 DD	 $LN48@z900_perfo
  00bec	00 00 00 00	 DD	 $LN37@z900_perfo
  00bf0	00 00 00 00	 DD	 $LN38@z900_perfo
  00bf4	00 00 00 00	 DD	 $LN49@z900_perfo
  00bf8	00 00 00 00	 DD	 $LN50@z900_perfo
  00bfc	00 00 00 00	 DD	 $LN39@z900_perfo
  00c00	00 00 00 00	 DD	 $LN40@z900_perfo
  00c04	00 00 00 00	 DD	 $LN51@z900_perfo
  00c08	00 00 00 00	 DD	 $LN52@z900_perfo
  00c0c	00 00 00 00	 DD	 $LN41@z900_perfo
  00c10	00 00 00 00	 DD	 $LN42@z900_perfo
  00c14	00 00 00 00	 DD	 $LN53@z900_perfo
  00c18	00 00 00 00	 DD	 $LN54@z900_perfo
$LN87@z900_perfo:
  00c1c	00 00 00 00	 DD	 $LN58@z900_perfo
  00c20	00 00 00 00	 DD	 $LN59@z900_perfo
  00c24	00 00 00 00	 DD	 $LN70@z900_perfo
  00c28	00 00 00 00	 DD	 $LN71@z900_perfo
  00c2c	00 00 00 00	 DD	 $LN60@z900_perfo
  00c30	00 00 00 00	 DD	 $LN61@z900_perfo
  00c34	00 00 00 00	 DD	 $LN72@z900_perfo
  00c38	00 00 00 00	 DD	 $LN73@z900_perfo
  00c3c	00 00 00 00	 DD	 $LN62@z900_perfo
  00c40	00 00 00 00	 DD	 $LN63@z900_perfo
  00c44	00 00 00 00	 DD	 $LN74@z900_perfo
  00c48	00 00 00 00	 DD	 $LN75@z900_perfo
  00c4c	00 00 00 00	 DD	 $LN64@z900_perfo
  00c50	00 00 00 00	 DD	 $LN65@z900_perfo
  00c54	00 00 00 00	 DD	 $LN76@z900_perfo
  00c58	00 00 00 00	 DD	 $LN77@z900_perfo
  00c5c	00 00 00 00	 DD	 $LN66@z900_perfo
  00c60	00 00 00 00	 DD	 $LN67@z900_perfo
  00c64	00 00 00 00	 DD	 $LN78@z900_perfo
  00c68	00 00 00 00	 DD	 $LN79@z900_perfo
  00c6c	00 00 00 00	 DD	 $LN68@z900_perfo
  00c70	00 00 00 00	 DD	 $LN69@z900_perfo
  00c74	00 00 00 00	 DD	 $LN80@z900_perfo
  00c78	00 00 00 00	 DD	 $LN81@z900_perfo
z900_perform_locked_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
h2$ = 32
i2$ = 36
h1$ = 40
temp$1 = 44
tv138 = 48
tv139 = 52
tv140 = 56
r1$ = 60
opcd$ = 64
inst$ = 96
regs$ = 104
z900_test_under_mask_low PROC

; 1787 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1788 : int     r1;                             /* Register number           */
; 1789 : int     opcd;                           /* Opcode                    */
; 1790 : U16     i2;                             /* 16-bit operand values     */
; 1791 : U16     h1;                             /* 16-bit operand values     */
; 1792 : U16     h2;                             /* 16-bit operand values     */
; 1793 : 
; 1794 :     RI(inst, regs, r1, opcd, i2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 2c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002c	66 89 44 24 24	 mov	 WORD PTR i2$[rsp], ax
  00031	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00035	c1 e8 10	 shr	 eax, 16
  00038	83 e0 0f	 and	 eax, 15
  0003b	89 44 24 40	 mov	 DWORD PTR opcd$[rsp], eax
  0003f	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 14	 shr	 eax, 20
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_test_:
  0004d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00052	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00056	48 83 c0 04	 add	 rax, 4
  0005a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00063	33 c0		 xor	 eax, eax
  00065	83 f8 04	 cmp	 eax, 4
  00068	74 0c		 je	 SHORT $LN8@z900_test_
  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@z900_test_:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d1		 jne	 SHORT $LN4@z900_test_

; 1795 : 
; 1796 :     /* AND register bits 16-31 with immediate operand */
; 1797 :     h1 = i2 & regs->GR_LHL(r1);

  0007c	0f b7 44 24 24	 movzx	 eax, WORD PTR i2$[rsp]
  00081	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0008b	0f b7 8c ca 80
	02 00 00	 movzx	 ecx, WORD PTR [rdx+rcx*8+640]
  00093	23 c1		 and	 eax, ecx
  00095	66 89 44 24 28	 mov	 WORD PTR h1$[rsp], ax

; 1798 : 
; 1799 :     /* Isolate leftmost bit of immediate operand */
; 1800 :     for ( h2 = 0x8000; h2 != 0 && (h2 & i2) == 0; h2 >>= 1 );

  0009a	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0009f	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
  000a4	eb 0d		 jmp	 SHORT $LN7@z900_test_
$LN5@z900_test_:
  000a6	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000ab	66 d1 e8	 shr	 ax, 1
  000ae	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
$LN7@z900_test_:
  000b3	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 12		 je	 SHORT $LN6@z900_test_
  000bc	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000c1	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000c6	23 c1		 and	 eax, ecx
  000c8	85 c0		 test	 eax, eax
  000ca	75 02		 jne	 SHORT $LN6@z900_test_
  000cc	eb d8		 jmp	 SHORT $LN5@z900_test_
$LN6@z900_test_:

; 1801 : 
; 1802 :     /* Set condition code according to result */
; 1803 :     regs->psw.cc =

  000ce	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000d3	85 c0		 test	 eax, eax
  000d5	75 0a		 jne	 SHORT $LN14@z900_test_
  000d7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  000df	eb 4a		 jmp	 SHORT $LN15@z900_test_
$LN14@z900_test_:
  000e1	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000e6	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000eb	3b c1		 cmp	 eax, ecx
  000ed	75 0a		 jne	 SHORT $LN12@z900_test_
  000ef	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR tv139[rsp], 3
  000f7	eb 2a		 jmp	 SHORT $LN13@z900_test_
$LN12@z900_test_:
  000f9	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000fe	0f b7 4c 24 20	 movzx	 ecx, WORD PTR h2$[rsp]
  00103	23 c1		 and	 eax, ecx
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN10@z900_test_
  00109	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00111	eb 08		 jmp	 SHORT $LN11@z900_test_
$LN10@z900_test_:
  00113	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR tv138[rsp], 2
$LN11@z900_test_:
  0011b	8b 44 24 30	 mov	 eax, DWORD PTR tv138[rsp]
  0011f	89 44 24 34	 mov	 DWORD PTR tv139[rsp], eax
$LN13@z900_test_:
  00123	8b 44 24 34	 mov	 eax, DWORD PTR tv139[rsp]
  00127	89 44 24 38	 mov	 DWORD PTR tv140[rsp], eax
$LN15@z900_test_:
  0012b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00130	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv140[rsp]
  00135	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1804 :             ( h1 == 0 ) ? 0 :           /* result all zeroes */
; 1805 :             ( h1 == i2) ? 3 :           /* result all ones   */
; 1806 :             ((h1 & h2) == 0) ? 1 :      /* leftmost bit zero */
; 1807 :             2;                          /* leftmost bit one  */
; 1808 : 
; 1809 : }

  00138	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013c	c3		 ret	 0
z900_test_under_mask_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
h2$ = 32
i2$ = 36
h1$ = 40
temp$1 = 44
tv138 = 48
tv139 = 52
tv140 = 56
r1$ = 60
opcd$ = 64
inst$ = 96
regs$ = 104
z900_test_under_mask_high PROC

; 1757 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1758 : int     r1;                             /* Register number           */
; 1759 : int     opcd;                           /* Opcode                    */
; 1760 : U16     i2;                             /* 16-bit operand values     */
; 1761 : U16     h1;                             /* 16-bit operand values     */
; 1762 : U16     h2;                             /* 16-bit operand values     */
; 1763 : 
; 1764 :     RI(inst, regs, r1, opcd, i2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 2c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002c	66 89 44 24 24	 mov	 WORD PTR i2$[rsp], ax
  00031	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00035	c1 e8 10	 shr	 eax, 16
  00038	83 e0 0f	 and	 eax, 15
  0003b	89 44 24 40	 mov	 DWORD PTR opcd$[rsp], eax
  0003f	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 14	 shr	 eax, 20
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_test_:
  0004d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00052	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00056	48 83 c0 04	 add	 rax, 4
  0005a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00063	33 c0		 xor	 eax, eax
  00065	83 f8 04	 cmp	 eax, 4
  00068	74 0c		 je	 SHORT $LN8@z900_test_
  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@z900_test_:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d1		 jne	 SHORT $LN4@z900_test_

; 1765 : 
; 1766 :     /* AND register bits 0-15 with immediate operand */
; 1767 :     h1 = i2 & regs->GR_LHH(r1);

  0007c	0f b7 44 24 24	 movzx	 eax, WORD PTR i2$[rsp]
  00081	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0008b	0f b7 8c ca 82
	02 00 00	 movzx	 ecx, WORD PTR [rdx+rcx*8+642]
  00093	23 c1		 and	 eax, ecx
  00095	66 89 44 24 28	 mov	 WORD PTR h1$[rsp], ax

; 1768 : 
; 1769 :     /* Isolate leftmost bit of immediate operand */
; 1770 :     for ( h2 = 0x8000; h2 != 0 && (h2 & i2) == 0; h2 >>= 1 );

  0009a	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0009f	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
  000a4	eb 0d		 jmp	 SHORT $LN7@z900_test_
$LN5@z900_test_:
  000a6	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000ab	66 d1 e8	 shr	 ax, 1
  000ae	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
$LN7@z900_test_:
  000b3	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 12		 je	 SHORT $LN6@z900_test_
  000bc	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000c1	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000c6	23 c1		 and	 eax, ecx
  000c8	85 c0		 test	 eax, eax
  000ca	75 02		 jne	 SHORT $LN6@z900_test_
  000cc	eb d8		 jmp	 SHORT $LN5@z900_test_
$LN6@z900_test_:

; 1771 : 
; 1772 :     /* Set condition code according to result */
; 1773 :     regs->psw.cc =

  000ce	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000d3	85 c0		 test	 eax, eax
  000d5	75 0a		 jne	 SHORT $LN14@z900_test_
  000d7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  000df	eb 4a		 jmp	 SHORT $LN15@z900_test_
$LN14@z900_test_:
  000e1	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000e6	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000eb	3b c1		 cmp	 eax, ecx
  000ed	75 0a		 jne	 SHORT $LN12@z900_test_
  000ef	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR tv139[rsp], 3
  000f7	eb 2a		 jmp	 SHORT $LN13@z900_test_
$LN12@z900_test_:
  000f9	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000fe	0f b7 4c 24 20	 movzx	 ecx, WORD PTR h2$[rsp]
  00103	23 c1		 and	 eax, ecx
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN10@z900_test_
  00109	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00111	eb 08		 jmp	 SHORT $LN11@z900_test_
$LN10@z900_test_:
  00113	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR tv138[rsp], 2
$LN11@z900_test_:
  0011b	8b 44 24 30	 mov	 eax, DWORD PTR tv138[rsp]
  0011f	89 44 24 34	 mov	 DWORD PTR tv139[rsp], eax
$LN13@z900_test_:
  00123	8b 44 24 34	 mov	 eax, DWORD PTR tv139[rsp]
  00127	89 44 24 38	 mov	 DWORD PTR tv140[rsp], eax
$LN15@z900_test_:
  0012b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00130	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv140[rsp]
  00135	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1774 :             ( h1 == 0 ) ? 0 :           /* result all zeroes */
; 1775 :             ( h1 == i2) ? 3 :           /* result all ones   */
; 1776 :             ((h1 & h2) == 0) ? 1 :      /* leftmost bit zero */
; 1777 :             2;                          /* leftmost bit one  */
; 1778 : }

  00138	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013c	c3		 ret	 0
z900_test_under_mask_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 0
tbyte$ = 4
translen$ = 8
cc$ = 12
addr1$ = 16
r2$ = 24
len1$ = 32
i$1 = 40
main1$ = 48
len$ = 56
i$ = 64
tv146 = 72
addr2$ = 80
trtab$ = 128
__$ArrayPad$ = 384
inst$ = 528
regs$ = 536
z900_translate_extended PROC

; 1994 : {

$LN31:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 80 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1995 : int     r1, r2;                     /* Values of R fields            */
; 1996 : U64     i;                          /* Loop counter                  */
; 1997 : int     cc = 0;                     /* Condition code                */

  0002c	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 1998 : VADR    addr1, addr2;               /* Operand addresses             */
; 1999 : GREG    len1;                       /* Operand length                */
; 2000 : BYTE    tbyte;                      /* Test byte                     */
; 2001 : CACHE_ALIGN BYTE  trtab[256];       /* Translate table               */
; 2002 : GREG    len;                        /* on page translate length      */
; 2003 : int     translen = 0;               /* translated length             */

  00033	c7 45 08 00 00
	00 00		 mov	 DWORD PTR translen$[rbp], 0

; 2004 : BYTE   *main1;                      /* Mainstor addresses            */
; 2005 : 
; 2006 :     RRE(inst, regs, r1, r2);

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	48 6b c0 03	 imul	 rax, rax, 3
  00043	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0004b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0004f	89 45 28	 mov	 DWORD PTR i$1[rbp], eax
  00052	8b 45 28	 mov	 eax, DWORD PTR i$1[rbp]
  00055	83 e0 0f	 and	 eax, 15
  00058	89 45 18	 mov	 DWORD PTR r2$[rbp], eax
  0005b	8b 45 28	 mov	 eax, DWORD PTR i$1[rbp]
  0005e	c1 f8 04	 sar	 eax, 4
  00061	83 e0 0f	 and	 eax, 15
  00064	89 45 00	 mov	 DWORD PTR r1$[rbp], eax
$LN4@z900_trans:
  00067	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00073	48 83 c0 04	 add	 rax, 4
  00077	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00083	33 c0		 xor	 eax, eax
  00085	83 f8 04	 cmp	 eax, 4
  00088	74 0f		 je	 SHORT $LN17@z900_trans
  0008a	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00092	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN17@z900_trans:
  00099	33 c0		 xor	 eax, eax
  0009b	85 c0		 test	 eax, eax
  0009d	75 c8		 jne	 SHORT $LN4@z900_trans

; 2007 :     PER_ZEROADDR_LCHECK( regs, r1, r1+1 );

  0009f	8b 45 00	 mov	 eax, DWORD PTR r1$[rbp]
  000a2	ff c0		 inc	 eax
  000a4	44 8b c0	 mov	 r8d, eax
  000a7	8b 55 00	 mov	 edx, DWORD PTR r1$[rbp]
  000aa	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b2	e8 00 00 00 00	 call	 z900_per3_zero_lcheck

; 2008 :     PER_ZEROADDR_CHECK( regs, r2 );

  000b7	8b 55 18	 mov	 edx, DWORD PTR r2$[rbp]
  000ba	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c2	e8 00 00 00 00	 call	 z900_per3_zero_check
$LN7@z900_trans:

; 2009 : 
; 2010 :     TXFC_INSTR_CHECK( regs );

  000c7	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000cf	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  000d6	85 c0		 test	 eax, eax
  000d8	74 3f		 je	 SHORT $LN18@z900_trans
  000da	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000e2	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  000e8	0f ba e8 0f	 bts	 eax, 15
  000ec	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f4	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  000fa	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG207006
  00101	41 b8 0b 00 00
	00		 mov	 r8d, 11
  00107	ba 02 00 00 00	 mov	 edx, 2
  0010c	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00114	e8 00 00 00 00	 call	 z900_abort_transaction
$LN18@z900_trans:
  00119	33 c0		 xor	 eax, eax
  0011b	85 c0		 test	 eax, eax
  0011d	75 a8		 jne	 SHORT $LN7@z900_trans

; 2011 :     ODD_CHECK(r1, regs);

  0011f	8b 45 00	 mov	 eax, DWORD PTR r1$[rbp]
  00122	83 e0 01	 and	 eax, 1
  00125	85 c0		 test	 eax, eax
  00127	74 1b		 je	 SHORT $LN19@z900_trans
  00129	ba 06 00 00 00	 mov	 edx, 6
  0012e	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00136	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013e	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN19@z900_trans:

; 2012 : 
; 2013 :     /* Load first operand length from R1+1 */
; 2014 :     len1 = GR_A(r1+1, regs);

  00144	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0014c	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00152	83 e0 01	 and	 eax, 1
  00155	85 c0		 test	 eax, eax
  00157	74 1d		 je	 SHORT $LN29@z900_trans
  00159	8b 45 00	 mov	 eax, DWORD PTR r1$[rbp]
  0015c	ff c0		 inc	 eax
  0015e	48 98		 cdqe
  00160	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00168	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00170	48 89 45 48	 mov	 QWORD PTR tv146[rbp], rax
  00174	eb 1a		 jmp	 SHORT $LN30@z900_trans
$LN29@z900_trans:
  00176	8b 45 00	 mov	 eax, DWORD PTR r1$[rbp]
  00179	ff c0		 inc	 eax
  0017b	48 98		 cdqe
  0017d	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00185	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0018c	48 89 45 48	 mov	 QWORD PTR tv146[rbp], rax
$LN30@z900_trans:
  00190	48 8b 45 48	 mov	 rax, QWORD PTR tv146[rbp]
  00194	48 89 45 20	 mov	 QWORD PTR len1$[rbp], rax

; 2015 : 
; 2016 :     /* fast exit path */
; 2017 :     if (len1 == 0) {

  00198	48 83 7d 20 00	 cmp	 QWORD PTR len1$[rbp], 0
  0019d	75 11		 jne	 SHORT $LN20@z900_trans

; 2018 :         regs->psw.cc =  0;

  0019f	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a7	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2019 :         return;

  001ab	e9 50 02 00 00	 jmp	 $LN1@z900_trans
$LN20@z900_trans:

; 2020 :     }
; 2021 : 
; 2022 :     /* Load the operand addresses */
; 2023 :     addr1 = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  001b0	48 63 45 00	 movsxd	 rax, DWORD PTR r1$[rbp]
  001b4	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001bc	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001c4	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  001cb	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001d3	48 23 c2	 and	 rax, rdx
  001d6	48 89 45 10	 mov	 QWORD PTR addr1$[rbp], rax

; 2024 :     addr2 = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  001da	48 63 45 18	 movsxd	 rax, DWORD PTR r2$[rbp]
  001de	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001e6	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001ee	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  001f5	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001fd	48 23 c2	 and	 rax, rdx
  00200	48 89 45 50	 mov	 QWORD PTR addr2$[rbp], rax

; 2025 : 
; 2026 :     /* Load the test byte from bits 24-31 of register 0 */
; 2027 :     tbyte = regs->GR_LHLCL(0);

  00204	b8 08 00 00 00	 mov	 eax, 8
  00209	48 6b c0 00	 imul	 rax, rax, 0
  0020d	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00215	0f b6 84 01 80
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+640]
  0021d	88 45 04	 mov	 BYTE PTR tbyte$[rbp], al

; 2028 : 
; 2029 :     /* Fetch second operand into work area.
; 2030 :        [7.5.101] Access exceptions for all 256 bytes of the second
; 2031 :        operand may be recognized, even if not all bytes are used */
; 2032 :     ARCH_DEP(vfetchc) ( trtab, 255, addr2, r2, regs );

  00220	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00228	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022d	44 8b 4d 18	 mov	 r9d, DWORD PTR r2$[rbp]
  00231	4c 8b 45 50	 mov	 r8, QWORD PTR addr2$[rbp]
  00235	b2 ff		 mov	 dl, 255			; 000000ffH
  00237	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR trtab$[rbp]
  0023e	e8 00 00 00 00	 call	 z900_vfetchc

; 2033 : 
; 2034 :     /* Process first operand from left to right */
; 2035 :     /*  POP : SA22-7832-13 Page 7-422
; 2036 :         The amount of processing that results in the setting
; 2037 :         of condition code 3 is determined by the CPU on the
; 2038 :         basis of improving system performance, and it may
; 2039 :         be a different amount each time the instruction is
; 2040 :         executed.
; 2041 : 
; 2042 :         CC=3 :  Processed first operand to end of page and
; 2043 :                 indicate more data remaining.
; 2044 :     */
; 2045 : 
; 2046 :     /* get on page translate length */
; 2047 :     len = PAGEFRAME_PAGESIZE - (addr1 & PAGEFRAME_BYTEMASK);

  00243	48 8b 45 10	 mov	 rax, QWORD PTR addr1$[rbp]
  00247	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  0024d	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00252	48 2b c8	 sub	 rcx, rax
  00255	48 8b c1	 mov	 rax, rcx
  00258	48 89 45 38	 mov	 QWORD PTR len$[rbp], rax

; 2048 :     if (len1 > len)

  0025c	48 8b 45 38	 mov	 rax, QWORD PTR len$[rbp]
  00260	48 39 45 20	 cmp	 QWORD PTR len1$[rbp], rax
  00264	76 09		 jbe	 SHORT $LN21@z900_trans

; 2049 :     {
; 2050 :        cc = 3;        /* maybe partial data */

  00266	c7 45 0c 03 00
	00 00		 mov	 DWORD PTR cc$[rbp], 3

; 2051 :     }

  0026d	eb 0f		 jmp	 SHORT $LN22@z900_trans
$LN21@z900_trans:

; 2052 :     else
; 2053 :     {
; 2054 :       len = len1;     /* all of operand 1 is on page */

  0026f	48 8b 45 20	 mov	 rax, QWORD PTR len1$[rbp]
  00273	48 89 45 38	 mov	 QWORD PTR len$[rbp], rax

; 2055 :       cc = 0;         /* can't be a cc=3, assume 0 */

  00277	c7 45 0c 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0
$LN22@z900_trans:

; 2056 :     }
; 2057 : 
; 2058 :     /* Get operand 1 on page address */
; 2059 :     main1 = MADDRL( addr1, len, r1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0027e	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00286	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0028a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0028e	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00296	4c 8b 8c 24 18
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0029e	44 8b 45 00	 mov	 r8d, DWORD PTR r1$[rbp]
  002a2	48 8b 55 38	 mov	 rdx, QWORD PTR len$[rbp]
  002a6	48 8b 4d 10	 mov	 rcx, QWORD PTR addr1$[rbp]
  002aa	e8 00 00 00 00	 call	 z900_maddr_l
  002af	48 89 45 30	 mov	 QWORD PTR main1$[rbp], rax

; 2060 : 
; 2061 :     /* translate on page data */
; 2062 :     for (i = 0; i < len; i++)

  002b3	48 c7 45 40 00
	00 00 00	 mov	 QWORD PTR i$[rbp], 0
  002bb	eb 0b		 jmp	 SHORT $LN10@z900_trans
$LN8@z900_trans:
  002bd	48 8b 45 40	 mov	 rax, QWORD PTR i$[rbp]
  002c1	48 ff c0	 inc	 rax
  002c4	48 89 45 40	 mov	 QWORD PTR i$[rbp], rax
$LN10@z900_trans:
  002c8	48 8b 45 38	 mov	 rax, QWORD PTR len$[rbp]
  002cc	48 39 45 40	 cmp	 QWORD PTR i$[rbp], rax
  002d0	73 42		 jae	 SHORT $LN9@z900_trans

; 2063 :     {
; 2064 :         /* If equal to test byte, exit with condition code 1 */
; 2065 :         if (*main1 == tbyte)

  002d2	48 8b 45 30	 mov	 rax, QWORD PTR main1$[rbp]
  002d6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002d9	0f b6 4d 04	 movzx	 ecx, BYTE PTR tbyte$[rbp]
  002dd	3b c1		 cmp	 eax, ecx
  002df	75 09		 jne	 SHORT $LN23@z900_trans

; 2066 :         {
; 2067 :             cc = 1;

  002e1	c7 45 0c 01 00
	00 00		 mov	 DWORD PTR cc$[rbp], 1

; 2068 :             break;

  002e8	eb 2a		 jmp	 SHORT $LN9@z900_trans
$LN23@z900_trans:

; 2069 :         }
; 2070 : 
; 2071 :         /* Load indicated byte from translate table */
; 2072 :         *main1 = trtab[ *main1 ];

  002ea	48 8b 45 30	 mov	 rax, QWORD PTR main1$[rbp]
  002ee	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002f1	48 8b 4d 30	 mov	 rcx, QWORD PTR main1$[rbp]
  002f5	0f b6 84 05 80
	00 00 00	 movzx	 eax, BYTE PTR trtab$[rbp+rax]
  002fd	88 01		 mov	 BYTE PTR [rcx], al

; 2073 : 
; 2074 :         main1++;

  002ff	48 8b 45 30	 mov	 rax, QWORD PTR main1$[rbp]
  00303	48 ff c0	 inc	 rax
  00306	48 89 45 30	 mov	 QWORD PTR main1$[rbp], rax

; 2075 :         translen++;

  0030a	8b 45 08	 mov	 eax, DWORD PTR translen$[rbp]
  0030d	ff c0		 inc	 eax
  0030f	89 45 08	 mov	 DWORD PTR translen$[rbp], eax

; 2076 :     } /* end for(i) */

  00312	eb a9		 jmp	 SHORT $LN8@z900_trans
$LN9@z900_trans:

; 2077 : 
; 2078 :     /* Update the registers */
; 2079 :     addr1 += translen;

  00314	48 63 45 08	 movsxd	 rax, DWORD PTR translen$[rbp]
  00318	48 8b 4d 10	 mov	 rcx, QWORD PTR addr1$[rbp]
  0031c	48 03 c8	 add	 rcx, rax
  0031f	48 8b c1	 mov	 rax, rcx
  00322	48 89 45 10	 mov	 QWORD PTR addr1$[rbp], rax

; 2080 :     addr1 &= ADDRESS_MAXWRAP(regs);

  00326	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0032e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00335	48 8b 4d 10	 mov	 rcx, QWORD PTR addr1$[rbp]
  00339	48 23 c8	 and	 rcx, rax
  0033c	48 8b c1	 mov	 rax, rcx
  0033f	48 89 45 10	 mov	 QWORD PTR addr1$[rbp], rax
$LN13@z900_trans:

; 2081 :     SET_GR_A(r1, regs, addr1);

  00343	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0034b	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00351	83 e0 01	 and	 eax, 1
  00354	85 c0		 test	 eax, eax
  00356	74 1a		 je	 SHORT $LN24@z900_trans
  00358	48 63 45 00	 movsxd	 rax, DWORD PTR r1$[rbp]
  0035c	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00364	48 8b 55 10	 mov	 rdx, QWORD PTR addr1$[rbp]
  00368	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00370	eb 16		 jmp	 SHORT $LN25@z900_trans
$LN24@z900_trans:
  00372	48 63 45 00	 movsxd	 rax, DWORD PTR r1$[rbp]
  00376	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0037e	8b 55 10	 mov	 edx, DWORD PTR addr1$[rbp]
  00381	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN25@z900_trans:
  00388	33 c0		 xor	 eax, eax
  0038a	85 c0		 test	 eax, eax
  0038c	75 b5		 jne	 SHORT $LN13@z900_trans

; 2082 : 
; 2083 :     len1  -= translen;

  0038e	48 63 45 08	 movsxd	 rax, DWORD PTR translen$[rbp]
  00392	48 8b 4d 20	 mov	 rcx, QWORD PTR len1$[rbp]
  00396	48 2b c8	 sub	 rcx, rax
  00399	48 8b c1	 mov	 rax, rcx
  0039c	48 89 45 20	 mov	 QWORD PTR len1$[rbp], rax
$LN16@z900_trans:

; 2084 :     SET_GR_A(r1+1, regs, len1);

  003a0	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003a8	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  003ae	83 e0 01	 and	 eax, 1
  003b1	85 c0		 test	 eax, eax
  003b3	74 1d		 je	 SHORT $LN26@z900_trans
  003b5	8b 45 00	 mov	 eax, DWORD PTR r1$[rbp]
  003b8	ff c0		 inc	 eax
  003ba	48 98		 cdqe
  003bc	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003c4	48 8b 55 20	 mov	 rdx, QWORD PTR len1$[rbp]
  003c8	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  003d0	eb 19		 jmp	 SHORT $LN27@z900_trans
$LN26@z900_trans:
  003d2	8b 45 00	 mov	 eax, DWORD PTR r1$[rbp]
  003d5	ff c0		 inc	 eax
  003d7	48 98		 cdqe
  003d9	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003e1	8b 55 20	 mov	 edx, DWORD PTR len1$[rbp]
  003e4	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN27@z900_trans:
  003eb	33 c0		 xor	 eax, eax
  003ed	85 c0		 test	 eax, eax
  003ef	75 af		 jne	 SHORT $LN16@z900_trans

; 2085 : 
; 2086 :     /* Set condition code */
; 2087 :     regs->psw.cc =  cc;

  003f1	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003f9	0f b6 4d 0c	 movzx	 ecx, BYTE PTR cc$[rbp]
  003fd	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@z900_trans:

; 2088 : 
; 2089 : } /* end translate_extended */

  00400	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00407	48 33 cc	 xor	 rcx, rsp
  0040a	e8 00 00 00 00	 call	 __security_check_cookie
  0040f	48 81 c4 00 02
	00 00		 add	 rsp, 512		; 00000200H
  00416	5d		 pop	 rbp
  00417	c3		 ret	 0
z900_translate_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
b2$ = 48
effective_addr2$ = 56
temp$1 = 64
ETOD$ = 72
__$ArrayPad$ = 88
inst$ = 112
regs$ = 120
z900_store_clock_extended PROC

; 1186 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1187 : int     b2;                             /* Base of effective addr    */
; 1188 : VADR    effective_addr2;                /* Effective address         */
; 1189 : ETOD    ETOD;                           /* Extended clock work area  */
; 1190 : 
; 1191 :     S(inst, regs, b2, effective_addr2);

  0001d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00022	e8 00 00 00 00	 call	 fetch_fw_noswap
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 _byteswap_ulong
  0002e	89 44 24 40	 mov	 DWORD PTR temp$1[rsp], eax
  00032	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00036	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0003b	8b c0		 mov	 eax, eax
  0003d	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00042	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	c1 e8 0c	 shr	 eax, 12
  00049	83 e0 0f	 and	 eax, 15
  0004c	89 44 24 30	 mov	 DWORD PTR b2$[rsp], eax
  00050	83 7c 24 30 00	 cmp	 DWORD PTR b2$[rsp], 0
  00055	74 3e		 je	 SHORT $LN5@z900_store
  00057	48 63 44 24 30	 movsxd	 rax, DWORD PTR b2$[rsp]
  0005c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00061	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00069	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0006e	48 03 c8	 add	 rcx, rax
  00071	48 8b c1	 mov	 rax, rcx
  00074	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00079	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00085	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0008a	48 23 c8	 and	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN5@z900_store:
$LN4@z900_store:
  00095	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0009a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009e	48 83 c0 04	 add	 rax, 4
  000a2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ab	33 c0		 xor	 eax, eax
  000ad	83 f8 04	 cmp	 eax, 4
  000b0	74 0c		 je	 SHORT $LN6@z900_store
  000b2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000b7	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@z900_store:
  000be	33 c0		 xor	 eax, eax
  000c0	85 c0		 test	 eax, eax
  000c2	75 d1		 jne	 SHORT $LN4@z900_store

; 1192 :     PER_ZEROADDR_XCHECK( regs, b2 );

  000c4	8b 54 24 30	 mov	 edx, DWORD PTR b2$[rsp]
  000c8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000cd	e8 00 00 00 00	 call	 z900_per3_zero_xcheck

; 1193 : 
; 1194 : #if defined( _FEATURE_SIE )
; 1195 :     if(SIE_STATE_BIT_ON(regs, IC2, STCK))

  000d2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  000dd	d1 e8		 shr	 eax, 1
  000df	83 e0 01	 and	 eax, 1
  000e2	85 c0		 test	 eax, eax
  000e4	74 3b		 je	 SHORT $LN7@z900_store
  000e6	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000eb	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000f2	b9 01 00 00 00	 mov	 ecx, 1
  000f7	48 6b c9 02	 imul	 rcx, rcx, 2
  000fb	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  00100	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00105	85 c0		 test	 eax, eax
  00107	74 18		 je	 SHORT $LN7@z900_store

; 1196 :         longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  00109	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00114	ba fc ff ff ff	 mov	 edx, -4
  00119	48 8b c8	 mov	 rcx, rax
  0011c	e8 00 00 00 00	 call	 longjmp
$LN7@z900_store:

; 1197 : #endif
; 1198 : 
; 1199 :     /* Perform serialization before fetching clock */
; 1200 :     PERFORM_SERIALIZATION (regs);

  00121	0f ae f0	 mfence

; 1201 : 
; 1202 :     /* Check that all 16 bytes of the operand are accessible */
; 1203 :     ARCH_DEP(validate_operand) (effective_addr2, b2, 15, ACCTYPE_WRITE, regs);

  00124	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00129	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00134	41 b8 0f 00 00
	00		 mov	 r8d, 15
  0013a	8b 54 24 30	 mov	 edx, DWORD PTR b2$[rsp]
  0013e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00143	e8 00 00 00 00	 call	 z900_validate_operand

; 1204 : 
; 1205 :     /* Retrieve the extended format TOD clock */
; 1206 :     etod_clock(regs, &ETOD, ETOD_extended);

  00148	41 b8 03 00 00
	00		 mov	 r8d, 3
  0014e	48 8d 54 24 48	 lea	 rdx, QWORD PTR ETOD$[rsp]
  00153	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00158	e8 00 00 00 00	 call	 etod_clock

; 1207 : 
; 1208 : //  /*debug*/logmsg("Store TOD clock extended: +0=%16.16"PRIX64"\n",
; 1209 : //  /*debug*/       dreg);
; 1210 : 
; 1211 :     /* Store the 8 bit TOD epoch, clock bits 0-51, and bits
; 1212 :        20-23 of the TOD uniqueness value at operand address */
; 1213 :     ARCH_DEP(vstore8) ( ETOD.high, effective_addr2, b2, regs );

  0015d	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00162	44 8b 44 24 30	 mov	 r8d, DWORD PTR b2$[rsp]
  00167	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  0016c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ETOD$[rsp+8]
  00171	e8 00 00 00 00	 call	 z900_vstore8

; 1214 : 
; 1215 : //  /*debug*/logmsg("Store TOD clock extended: +8=%16.16"PRIX64"\n",
; 1216 : //  /*debug*/       dreg);
; 1217 : 
; 1218 :     /* Store second doubleword value at operand+8 */
; 1219 :     effective_addr2 += 8;

  00176	48 8b 44 24 38	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  0017b	48 83 c0 08	 add	 rax, 8
  0017f	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 1220 :     effective_addr2 &= ADDRESS_MAXWRAP(regs);

  00184	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00189	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00190	48 8b 4c 24 38	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00195	48 23 c8	 and	 rcx, rax
  00198	48 8b c1	 mov	 rax, rcx
  0019b	48 89 44 24 38	 mov	 QWORD PTR effective_addr2$[rsp], rax

; 1221 : 
; 1222 :     /* Store nonzero value in pos 72 to 111 */
; 1223 :     ARCH_DEP(vstore8) ( ETOD.low, effective_addr2, b2, regs );

  001a0	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  001a5	44 8b 44 24 30	 mov	 r8d, DWORD PTR b2$[rsp]
  001aa	48 8b 54 24 38	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  001af	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ETOD$[rsp]
  001b4	e8 00 00 00 00	 call	 z900_vstore8

; 1224 : 
; 1225 :     /* Perform serialization after storing clock */
; 1226 :     PERFORM_SERIALIZATION (regs);

  001b9	0f ae f0	 mfence

; 1227 : 
; 1228 :     /* Set condition code zero */
; 1229 :     regs->psw.cc = 0;

  001bc	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001c1	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@z900_store:

; 1230 : }

  001c5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ca	48 33 cc	 xor	 rcx, rsp
  001cd	e8 00 00 00 00	 call	 __security_check_cookie
  001d2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d6	c3		 ret	 0
z900_store_clock_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
b2$ = 52
m$ = 56
n$ = 60
temp$1 = 64
effective_addr2$ = 72
r1$ = 80
tv152 = 84
p2$ = 88
r3$ = 96
p1$ = 104
tv180 = 112
tv194 = 120
inst$ = 144
regs$ = 152
z900_store_access_multiple PROC

; 1033 : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1034 : int     r1, r3;                         /* Register numbers          */
; 1035 : int     b2;                             /* effective address base    */
; 1036 : VADR    effective_addr2;                /* effective address         */
; 1037 : int     i, m, n;                        /* Integer work area         */
; 1038 : U32    *p1, *p2 = NULL;                 /* Mainstor pointers         */

  00011	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR p2$[rsp], 0

; 1039 : 
; 1040 :     RS( inst, regs, r1, r3, b2, effective_addr2 );

  0001a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00022	e8 00 00 00 00	 call	 fetch_fw_noswap
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 _byteswap_ulong
  0002e	89 44 24 40	 mov	 DWORD PTR temp$1[rsp], eax
  00032	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00036	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0003b	8b c0		 mov	 eax, eax
  0003d	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00042	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	c1 e8 0c	 shr	 eax, 12
  00049	83 e0 0f	 and	 eax, 15
  0004c	89 44 24 34	 mov	 DWORD PTR b2$[rsp], eax
  00050	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00054	c1 e8 10	 shr	 eax, 16
  00057	83 e0 0f	 and	 eax, 15
  0005a	89 44 24 60	 mov	 DWORD PTR r3$[rsp], eax
  0005e	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00062	c1 e8 14	 shr	 eax, 20
  00065	83 e0 0f	 and	 eax, 15
  00068	89 44 24 50	 mov	 DWORD PTR r1$[rsp], eax
  0006c	83 7c 24 34 00	 cmp	 DWORD PTR b2$[rsp], 0
  00071	74 4b		 je	 SHORT $LN11@z900_store
  00073	48 63 44 24 34	 movsxd	 rax, DWORD PTR b2$[rsp]
  00078	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00080	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00088	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  0008d	48 03 c8	 add	 rcx, rax
  00090	48 8b c1	 mov	 rax, rcx
  00093	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax
  00098	33 c0		 xor	 eax, eax
  0009a	83 f8 04	 cmp	 eax, 4
  0009d	74 1f		 je	 SHORT $LN12@z900_store
  0009f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000a7	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000ae	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  000b3	48 23 c8	 and	 rcx, rax
  000b6	48 8b c1	 mov	 rax, rcx
  000b9	48 89 44 24 48	 mov	 QWORD PTR effective_addr2$[rsp], rax
$LN12@z900_store:
$LN11@z900_store:
$LN4@z900_store:
  000be	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000c6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ca	48 83 c0 04	 add	 rax, 4
  000ce	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000da	33 c0		 xor	 eax, eax
  000dc	83 f8 04	 cmp	 eax, 4
  000df	74 0f		 je	 SHORT $LN13@z900_store
  000e1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000e9	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN13@z900_store:
  000f0	33 c0		 xor	 eax, eax
  000f2	85 c0		 test	 eax, eax
  000f4	75 c8		 jne	 SHORT $LN4@z900_store

; 1041 :     PER_ZEROADDR_XCHECK( regs, b2 );

  000f6	8b 54 24 34	 mov	 edx, DWORD PTR b2$[rsp]
  000fa	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00102	e8 00 00 00 00	 call	 z900_per3_zero_xcheck

; 1042 : 
; 1043 :     FW_CHECK( effective_addr2, regs );

  00107	48 8b 44 24 48	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  0010c	48 83 e0 03	 and	 rax, 3
  00110	48 85 c0	 test	 rax, rax
  00113	74 1b		 je	 SHORT $LN14@z900_store
  00115	ba 06 00 00 00	 mov	 edx, 6
  0011a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00122	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012a	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@z900_store:

; 1044 : 
; 1045 :     /* Calculate number of regs to store */
; 1046 :     n = ((r3 - r1) & 0xF) + 1;

  00130	8b 44 24 50	 mov	 eax, DWORD PTR r1$[rsp]
  00134	8b 4c 24 60	 mov	 ecx, DWORD PTR r3$[rsp]
  00138	2b c8		 sub	 ecx, eax
  0013a	8b c1		 mov	 eax, ecx
  0013c	83 e0 0f	 and	 eax, 15
  0013f	ff c0		 inc	 eax
  00141	89 44 24 3c	 mov	 DWORD PTR n$[rsp], eax

; 1047 : 
; 1048 :     /* Calculate number of words to next boundary */
; 1049 :     m = (PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK)) >> 2;

  00145	48 8b 44 24 48	 mov	 rax, QWORD PTR effective_addr2$[rsp]
  0014a	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00150	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00155	48 2b c8	 sub	 rcx, rax
  00158	48 8b c1	 mov	 rax, rcx
  0015b	48 c1 e8 02	 shr	 rax, 2
  0015f	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax

; 1050 : 
; 1051 :     /* Address of operand beginning */
; 1052 : 
; 1053 :     p1 = (U32*) MADDRL( effective_addr2, n << 2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00163	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  00167	c1 e0 02	 shl	 eax, 2
  0016a	48 98		 cdqe
  0016c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00174	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00178	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0017c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00184	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0018c	44 8b 44 24 34	 mov	 r8d, DWORD PTR b2$[rsp]
  00191	48 8b d0	 mov	 rdx, rax
  00194	48 8b 4c 24 48	 mov	 rcx, QWORD PTR effective_addr2$[rsp]
  00199	e8 00 00 00 00	 call	 z900_maddr_l
  0019e	48 89 44 24 68	 mov	 QWORD PTR p1$[rsp], rax

; 1054 :     /* Get address of next page if boundary crossed */
; 1055 :     if (unlikely( m < n ))

  001a3	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  001a7	39 44 24 38	 cmp	 DWORD PTR m$[rsp], eax
  001ab	7d 0a		 jge	 SHORT $LN20@z900_store
  001ad	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv152[rsp], 1
  001b5	eb 08		 jmp	 SHORT $LN21@z900_store
$LN20@z900_store:
  001b7	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
$LN21@z900_store:
  001bf	83 7c 24 54 00	 cmp	 DWORD PTR tv152[rsp], 0
  001c4	74 5a		 je	 SHORT $LN15@z900_store

; 1056 :         p2 = (U32*) MADDRL(effective_addr2 + (m*4), (n - m) << 2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  001c6	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  001ca	8b 4c 24 3c	 mov	 ecx, DWORD PTR n$[rsp]
  001ce	2b c8		 sub	 ecx, eax
  001d0	8b c1		 mov	 eax, ecx
  001d2	c1 e0 02	 shl	 eax, 2
  001d5	48 98		 cdqe
  001d7	8b 4c 24 38	 mov	 ecx, DWORD PTR m$[rsp]
  001db	c1 e1 02	 shl	 ecx, 2
  001de	48 63 c9	 movsxd	 rcx, ecx
  001e1	48 8b 54 24 48	 mov	 rdx, QWORD PTR effective_addr2$[rsp]
  001e6	48 03 d1	 add	 rdx, rcx
  001e9	48 8b ca	 mov	 rcx, rdx
  001ec	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001f4	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  001f8	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  001fc	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00204	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0020c	44 8b 44 24 34	 mov	 r8d, DWORD PTR b2$[rsp]
  00211	48 8b d0	 mov	 rdx, rax
  00214	e8 00 00 00 00	 call	 z900_maddr_l
  00219	48 89 44 24 58	 mov	 QWORD PTR p2$[rsp], rax
  0021e	eb 08		 jmp	 SHORT $LN16@z900_store
$LN15@z900_store:

; 1057 :     else
; 1058 :         m = n;

  00220	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  00224	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax
$LN16@z900_store:

; 1059 : 
; 1060 :     /* Store to first page */
; 1061 :     for (i=0; i < m; i++)

  00228	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00230	eb 0a		 jmp	 SHORT $LN7@z900_store
$LN5@z900_store:
  00232	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00236	ff c0		 inc	 eax
  00238	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@z900_store:
  0023c	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  00240	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00244	7d 4b		 jge	 SHORT $LN6@z900_store

; 1062 :         store_fw( p1++, regs->AR( (r1 + i) & 0xF ));

  00246	48 8b 44 24 68	 mov	 rax, QWORD PTR p1$[rsp]
  0024b	48 89 44 24 70	 mov	 QWORD PTR tv180[rsp], rax
  00250	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00254	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  00258	03 c8		 add	 ecx, eax
  0025a	8b c1		 mov	 eax, ecx
  0025c	83 e0 0f	 and	 eax, 15
  0025f	48 98		 cdqe
  00261	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00269	8b 8c 81 00 03
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*4+768]
  00270	e8 00 00 00 00	 call	 _byteswap_ulong
  00275	8b d0		 mov	 edx, eax
  00277	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv180[rsp]
  0027c	e8 00 00 00 00	 call	 store_fw_noswap
  00281	48 8b 44 24 68	 mov	 rax, QWORD PTR p1$[rsp]
  00286	48 83 c0 04	 add	 rax, 4
  0028a	48 89 44 24 68	 mov	 QWORD PTR p1$[rsp], rax
  0028f	eb a1		 jmp	 SHORT $LN5@z900_store
$LN6@z900_store:

; 1063 : 
; 1064 :     /* Store to next page */
; 1065 :     for (; i < n; i++)

  00291	eb 0a		 jmp	 SHORT $LN10@z900_store
$LN8@z900_store:
  00293	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00297	ff c0		 inc	 eax
  00299	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN10@z900_store:
  0029d	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  002a1	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  002a5	7d 4b		 jge	 SHORT $LN9@z900_store

; 1066 :         store_fw( p2++, regs->AR( (r1 + i) & 0xF ));

  002a7	48 8b 44 24 58	 mov	 rax, QWORD PTR p2$[rsp]
  002ac	48 89 44 24 78	 mov	 QWORD PTR tv194[rsp], rax
  002b1	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  002b5	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  002b9	03 c8		 add	 ecx, eax
  002bb	8b c1		 mov	 eax, ecx
  002bd	83 e0 0f	 and	 eax, 15
  002c0	48 98		 cdqe
  002c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ca	8b 8c 81 00 03
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*4+768]
  002d1	e8 00 00 00 00	 call	 _byteswap_ulong
  002d6	8b d0		 mov	 edx, eax
  002d8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv194[rsp]
  002dd	e8 00 00 00 00	 call	 store_fw_noswap
  002e2	48 8b 44 24 58	 mov	 rax, QWORD PTR p2$[rsp]
  002e7	48 83 c0 04	 add	 rax, 4
  002eb	48 89 44 24 58	 mov	 QWORD PTR p2$[rsp], rax
  002f0	eb a1		 jmp	 SHORT $LN8@z900_store
$LN9@z900_store:

; 1067 : }

  002f2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002f9	c3		 ret	 0
z900_store_access_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
i$1 = 36
r2$ = 40
inst$ = 64
regs$ = 72
z900_set_access_register PROC

; 714  : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 715  : int     r1, r2;                         /* Values of R fields        */
; 716  : 
; 717  :     RRE(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 28	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_set_a:
  0003d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 04	 add	 rax, 4
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 04	 cmp	 eax, 4
  00058	74 0c		 je	 SHORT $LN11@z900_set_a
  0005a	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN11@z900_set_a:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@z900_set_a
$LN7@z900_set_a:

; 718  : 
; 719  :     TXF_ACCESS_INSTR_CHECK( regs );

  0006c	33 c0		 xor	 eax, eax
  0006e	83 f8 01	 cmp	 eax, 1
  00071	74 59		 je	 SHORT $LN12@z900_set_a
  00073	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00078	0f b6 80 58 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3672]
  0007f	85 c0		 test	 eax, eax
  00081	74 49		 je	 SHORT $LN12@z900_set_a
  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00088	0f b6 80 59 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3673]
  0008f	83 e0 08	 and	 eax, 8
  00092	85 c0		 test	 eax, eax
  00094	75 36		 jne	 SHORT $LN12@z900_set_a
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  000a1	0f ba e8 0a	 bts	 eax, 10
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000aa	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  000b0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG203057
  000b7	41 b8 0b 00 00
	00		 mov	 r8d, 11
  000bd	ba 02 00 00 00	 mov	 edx, 2
  000c2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000c7	e8 00 00 00 00	 call	 z900_abort_transaction
$LN12@z900_set_a:
  000cc	33 c0		 xor	 eax, eax
  000ce	85 c0		 test	 eax, eax
  000d0	75 9a		 jne	 SHORT $LN7@z900_set_a

; 720  : 
; 721  :     /* Copy R2 general register to R1 access register */
; 722  :     regs->AR(r1) = regs->GR_L(r2);

  000d2	48 63 44 24 28	 movsxd	 rax, DWORD PTR r2$[rsp]
  000d7	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  000dc	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  000e1	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000e6	41 8b 84 c0 80
	02 00 00	 mov	 eax, DWORD PTR [r8+rax*8+640]
  000ee	89 84 8a 00 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+768], eax
$LN10@z900_set_a:

; 723  :     SET_AEA_AR(regs, r1);

  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000fa	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  000fe	83 f8 40	 cmp	 eax, 64			; 00000040H
  00101	75 7e		 jne	 SHORT $LN13@z900_set_a
  00103	83 7c 24 20 00	 cmp	 DWORD PTR r1$[rsp], 0
  00108	7e 77		 jle	 SHORT $LN13@z900_set_a
  0010a	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0010f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00114	83 bc 81 00 03
	00 00 00	 cmp	 DWORD PTR [rcx+rax*4+768], 0
  0011c	75 1b		 jne	 SHORT $LN14@z900_set_a
  0011e	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  00122	83 c0 05	 add	 eax, 5
  00125	48 98		 cdqe
  00127	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0012c	c7 84 81 94 0c
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 1
  00137	eb 48		 jmp	 SHORT $LN15@z900_set_a
$LN14@z900_set_a:
  00139	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0013e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00143	83 bc 81 00 03
	00 00 01	 cmp	 DWORD PTR [rcx+rax*4+768], 1
  0014b	75 1b		 jne	 SHORT $LN16@z900_set_a
  0014d	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  00151	83 c0 05	 add	 eax, 5
  00154	48 98		 cdqe
  00156	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0015b	c7 84 81 94 0c
	00 00 07 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 7
  00166	eb 19		 jmp	 SHORT $LN17@z900_set_a
$LN16@z900_set_a:
  00168	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  0016c	83 c0 05	 add	 eax, 5
  0016f	48 98		 cdqe
  00171	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00176	c7 84 81 94 0c
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 0
$LN17@z900_set_a:
$LN15@z900_set_a:
$LN13@z900_set_a:
  00181	33 c0		 xor	 eax, eax
  00183	85 c0		 test	 eax, eax
  00185	0f 85 6a ff ff
	ff		 jne	 $LN10@z900_set_a

; 724  : }

  0018b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0018f	c3		 ret	 0
z900_set_access_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_translate_and_test_reverse_extended PROC

; 3411 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3412 :     ARCH_DEP( translate_and_test_xxx_extended )( inst, regs );

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_translate_and_test_xxx_extended

; 3413 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_translate_and_test_reverse_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_translate_and_test_extended PROC

; 3403 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3404 :     ARCH_DEP( translate_and_test_xxx_extended )( inst, regs );

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_translate_and_test_xxx_extended

; 3405 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_translate_and_test_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 0
effective_addr1$ = 8
b2$ = 16
b1$ = 20
temp$1 = 24
i$ = 28
effective_addr2$ = 32
m1$ = 40
tv159 = 48
len$ = 52
tv237 = 56
cc$ = 60
p_fct$ = 64
m1pg$ = 72
trtab$ = 128
__$ArrayPad$ = 384
inst$ = 528
regs$ = 536
z900_translate_and_test_reverse PROC

; 3039 : {

$LN30:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 80 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3040 :     int b1, b2;                        // Values of base field
; 3041 :     int cc = 0;                        // Condition code

  0002c	c7 45 3c 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 3042 :     VADR effective_addr1;
; 3043 :     VADR effective_addr2;              // Effective addresses
; 3044 :     int i;                             // Integer work areas
; 3045 :     int len;                           // Length byte
; 3046 :     BYTE sbyte;                        // Byte work areas
; 3047 : 
; 3048 :     CACHE_ALIGN BYTE  trtab[256];      // Translate table - copy
; 3049 :     BYTE*   p_fct;                     // ptr to FC Table
; 3050 :     BYTE*   m1;                        // operand mainstor addresses
; 3051 :     BYTE   *m1pg;                      // operand page
; 3052 : 
; 3053 :     SS_L(inst, regs, len, b1, effective_addr1, b2, effective_addr2);

  00033	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0003b	48 83 c0 02	 add	 rax, 2
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 fetch_fw_noswap
  00047	8b c8		 mov	 ecx, eax
  00049	e8 00 00 00 00	 call	 _byteswap_ulong
  0004e	89 45 18	 mov	 DWORD PTR temp$1[rbp], eax
  00051	8b 45 18	 mov	 eax, DWORD PTR temp$1[rbp]
  00054	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00059	8b c0		 mov	 eax, eax
  0005b	48 89 45 20	 mov	 QWORD PTR effective_addr2$[rbp], rax
  0005f	8b 45 18	 mov	 eax, DWORD PTR temp$1[rbp]
  00062	c1 e8 0c	 shr	 eax, 12
  00065	83 e0 0f	 and	 eax, 15
  00068	89 45 10	 mov	 DWORD PTR b2$[rbp], eax
  0006b	8b 45 18	 mov	 eax, DWORD PTR temp$1[rbp]
  0006e	c1 e8 10	 shr	 eax, 16
  00071	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00076	8b c0		 mov	 eax, eax
  00078	48 89 45 08	 mov	 QWORD PTR effective_addr1$[rbp], rax
  0007c	8b 45 18	 mov	 eax, DWORD PTR temp$1[rbp]
  0007f	c1 e8 1c	 shr	 eax, 28
  00082	83 e0 0f	 and	 eax, 15
  00085	89 45 14	 mov	 DWORD PTR b1$[rbp], eax
  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00099	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009d	89 45 34	 mov	 DWORD PTR len$[rbp], eax
  000a0	83 7d 14 00	 cmp	 DWORD PTR b1$[rbp], 0
  000a4	74 3f		 je	 SHORT $LN11@z900_trans
  000a6	48 63 45 14	 movsxd	 rax, DWORD PTR b1$[rbp]
  000aa	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b2	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000ba	48 8b 4d 08	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  000be	48 03 c8	 add	 rcx, rax
  000c1	48 8b c1	 mov	 rax, rcx
  000c4	48 89 45 08	 mov	 QWORD PTR effective_addr1$[rbp], rax
  000c8	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d0	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000d7	48 8b 4d 08	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  000db	48 23 c8	 and	 rcx, rax
  000de	48 8b c1	 mov	 rax, rcx
  000e1	48 89 45 08	 mov	 QWORD PTR effective_addr1$[rbp], rax
$LN11@z900_trans:
  000e5	83 7d 10 00	 cmp	 DWORD PTR b2$[rbp], 0
  000e9	74 3f		 je	 SHORT $LN12@z900_trans
  000eb	48 63 45 10	 movsxd	 rax, DWORD PTR b2$[rbp]
  000ef	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f7	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000ff	48 8b 4d 20	 mov	 rcx, QWORD PTR effective_addr2$[rbp]
  00103	48 03 c8	 add	 rcx, rax
  00106	48 8b c1	 mov	 rax, rcx
  00109	48 89 45 20	 mov	 QWORD PTR effective_addr2$[rbp], rax
  0010d	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00115	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0011c	48 8b 4d 20	 mov	 rcx, QWORD PTR effective_addr2$[rbp]
  00120	48 23 c8	 and	 rcx, rax
  00123	48 8b c1	 mov	 rax, rcx
  00126	48 89 45 20	 mov	 QWORD PTR effective_addr2$[rbp], rax
$LN12@z900_trans:
$LN4@z900_trans:
  0012a	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00136	48 83 c0 06	 add	 rax, 6
  0013a	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00142	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00146	33 c0		 xor	 eax, eax
  00148	83 f8 06	 cmp	 eax, 6
  0014b	74 0f		 je	 SHORT $LN13@z900_trans
  0014d	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00155	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@z900_trans:
  0015c	33 c0		 xor	 eax, eax
  0015e	85 c0		 test	 eax, eax
  00160	75 c8		 jne	 SHORT $LN4@z900_trans

; 3054 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );

  00162	44 8b 45 10	 mov	 r8d, DWORD PTR b2$[rbp]
  00166	8b 55 14	 mov	 edx, DWORD PTR b1$[rbp]
  00169	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00171	e8 00 00 00 00	 call	 z900_per3_zero_xcheck2
$LN7@z900_trans:

; 3055 : 
; 3056 :     TXFC_INSTR_CHECK( regs );

  00176	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0017e	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  00185	85 c0		 test	 eax, eax
  00187	74 3f		 je	 SHORT $LN14@z900_trans
  00189	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00191	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  00197	0f ba e8 0f	 bts	 eax, 15
  0019b	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001a3	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  001a9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG207472
  001b0	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001b6	ba 02 00 00 00	 mov	 edx, 2
  001bb	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001c3	e8 00 00 00 00	 call	 z900_abort_transaction
$LN14@z900_trans:
  001c8	33 c0		 xor	 eax, eax
  001ca	85 c0		 test	 eax, eax
  001cc	75 a8		 jne	 SHORT $LN7@z900_trans

; 3057 : 
; 3058 :     /* Get pointer to Function Code table or copy */
; 3059 :     if (CROSSPAGE( effective_addr2, 256-1))

  001ce	48 8b 45 20	 mov	 rax, QWORD PTR effective_addr2$[rbp]
  001d2	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  001d8	3d 00 0f 00 00	 cmp	 eax, 3840		; 00000f00H
  001dd	7e 09		 jle	 SHORT $LN26@z900_trans
  001df	c7 45 30 01 00
	00 00		 mov	 DWORD PTR tv159[rbp], 1
  001e6	eb 07		 jmp	 SHORT $LN27@z900_trans
$LN26@z900_trans:
  001e8	c7 45 30 00 00
	00 00		 mov	 DWORD PTR tv159[rbp], 0
$LN27@z900_trans:
  001ef	83 7d 30 00	 cmp	 DWORD PTR tv159[rbp], 0
  001f3	74 30		 je	 SHORT $LN15@z900_trans

; 3060 :     {
; 3061 :         ARCH_DEP( vfetchc )( trtab, 256-1, effective_addr2, b2, regs );

  001f5	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00202	44 8b 4d 10	 mov	 r9d, DWORD PTR b2$[rbp]
  00206	4c 8b 45 20	 mov	 r8, QWORD PTR effective_addr2$[rbp]
  0020a	b2 ff		 mov	 dl, 255			; 000000ffH
  0020c	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR trtab$[rbp]
  00213	e8 00 00 00 00	 call	 z900_vfetchc

; 3062 :         p_fct = (BYTE *) &trtab;

  00218	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR trtab$[rbp]
  0021f	48 89 45 40	 mov	 QWORD PTR p_fct$[rbp], rax

; 3063 :     }

  00223	eb 36		 jmp	 SHORT $LN16@z900_trans
$LN15@z900_trans:

; 3064 :     else
; 3065 :     {
; 3066 :         p_fct = MADDRL( effective_addr2, 256, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  00225	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0022d	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00231	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00235	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0023d	4c 8b 8c 24 18
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00245	44 8b 45 10	 mov	 r8d, DWORD PTR b2$[rbp]
  00249	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0024e	48 8b 4d 20	 mov	 rcx, QWORD PTR effective_addr2$[rbp]
  00252	e8 00 00 00 00	 call	 z900_maddr_l
  00257	48 89 45 40	 mov	 QWORD PTR p_fct$[rbp], rax
$LN16@z900_trans:

; 3067 :     }
; 3068 : 
; 3069 :     /* Get mainstor address to test byte */
; 3070 :     m1 = MADDRL( effective_addr1, 1, b1, regs, ACCTYPE_READ, regs->psw.pkey );

  0025b	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00263	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00267	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0026b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00273	4c 8b 8c 24 18
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0027b	44 8b 45 14	 mov	 r8d, DWORD PTR b1$[rbp]
  0027f	ba 01 00 00 00	 mov	 edx, 1
  00284	48 8b 4d 08	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  00288	e8 00 00 00 00	 call	 z900_maddr_l
  0028d	48 89 45 28	 mov	 QWORD PTR m1$[rbp], rax

; 3071 :     m1pg = MAINSTOR_PAGEBASE ( m1 );

  00291	48 8b 45 28	 mov	 rax, QWORD PTR m1$[rbp]
  00295	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0029b	48 89 45 48	 mov	 QWORD PTR m1pg$[rbp], rax

; 3072 : 
; 3073 :     /* Process first operand from right to left*/
; 3074 :     for(i = 0; i <= len; i++)

  0029f	c7 45 1c 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  002a6	eb 08		 jmp	 SHORT $LN10@z900_trans
$LN8@z900_trans:
  002a8	8b 45 1c	 mov	 eax, DWORD PTR i$[rbp]
  002ab	ff c0		 inc	 eax
  002ad	89 45 1c	 mov	 DWORD PTR i$[rbp], eax
$LN10@z900_trans:
  002b0	8b 45 34	 mov	 eax, DWORD PTR len$[rbp]
  002b3	39 45 1c	 cmp	 DWORD PTR i$[rbp], eax
  002b6	0f 8f e2 01 00
	00		 jg	 $LN9@z900_trans

; 3075 :     {
; 3076 :         /* Fetch argument byte from first operand */
; 3077 :         // dbyte = ARCH_DEP(vfetchb)(effective_addr1, b1, regs);
; 3078 : 
; 3079 :         /* Fetch function byte from second operand */
; 3080 :         // sbyte = ARCH_DEP(vfetchb)((effective_addr2 + dbyte) & ADDRESS_MAXWRAP(regs), b2, regs);
; 3081 : 
; 3082 :         sbyte = p_fct[ *m1 ];

  002bc	48 8b 45 28	 mov	 rax, QWORD PTR m1$[rbp]
  002c0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002c3	48 8b 4d 40	 mov	 rcx, QWORD PTR p_fct$[rbp]
  002c7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002cb	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al

; 3083 : 
; 3084 :         /* Test for non-zero function byte */
; 3085 :         if(sbyte != 0)

  002ce	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  002d2	85 c0		 test	 eax, eax
  002d4	0f 84 38 01 00
	00		 je	 $LN17@z900_trans

; 3086 :         {
; 3087 :             /* Store address of argument byte in register 1 */
; 3088 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 3089 :             if(regs->psw.amode64)

  002da	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002e2	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  002e8	83 e0 01	 and	 eax, 1
  002eb	85 c0		 test	 eax, eax
  002ed	74 22		 je	 SHORT $LN18@z900_trans

; 3090 :                 regs->GR_G(1) = effective_addr1;

  002ef	b8 08 00 00 00	 mov	 eax, 8
  002f4	48 6b c0 01	 imul	 rax, rax, 1
  002f8	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00300	48 8b 55 08	 mov	 rdx, QWORD PTR effective_addr1$[rbp]
  00304	48 89 94 01 80
	02 00 00	 mov	 QWORD PTR [rcx+rax+640], rdx
  0030c	e9 c2 00 00 00	 jmp	 $LN19@z900_trans
$LN18@z900_trans:

; 3091 :             else
; 3092 : #endif
; 3093 :             if(regs->psw.amode)

  00311	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00319	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0031f	d1 e8		 shr	 eax, 1
  00321	83 e0 01	 and	 eax, 1
  00324	85 c0		 test	 eax, eax
  00326	74 6b		 je	 SHORT $LN20@z900_trans

; 3094 :             {
; 3095 :                 /* Note: TRTR differs from TRT in 31 bit mode.
; 3096 :                 TRTR leaves bit 32 unchanged, TRT clears bit 32 */
; 3097 :                 regs->GR_L(1) &= 0x80000000;

  00328	b8 08 00 00 00	 mov	 eax, 8
  0032d	48 6b c0 01	 imul	 rax, rax, 1
  00331	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00339	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00340	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00345	b9 08 00 00 00	 mov	 ecx, 8
  0034a	48 6b c9 01	 imul	 rcx, rcx, 1
  0034e	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00356	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3098 :                 regs->GR_L(1) |= effective_addr1;

  0035d	b8 08 00 00 00	 mov	 eax, 8
  00362	48 6b c0 01	 imul	 rax, rax, 1
  00366	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0036e	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00375	48 0b 45 08	 or	 rax, QWORD PTR effective_addr1$[rbp]
  00379	b9 08 00 00 00	 mov	 ecx, 8
  0037e	48 6b c9 01	 imul	 rcx, rcx, 1
  00382	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0038a	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3099 :             }

  00391	eb 40		 jmp	 SHORT $LN21@z900_trans
$LN20@z900_trans:

; 3100 :             else
; 3101 :                 regs->GR_LA24(1) = effective_addr1;

  00393	b8 08 00 00 00	 mov	 eax, 8
  00398	48 6b c0 01	 imul	 rax, rax, 1
  0039c	8b 4d 08	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  0039f	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  003a5	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  003ad	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  003b4	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  003b9	0b c1		 or	 eax, ecx
  003bb	b9 08 00 00 00	 mov	 ecx, 8
  003c0	48 6b c9 01	 imul	 rcx, rcx, 1
  003c4	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  003cc	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN21@z900_trans:
$LN19@z900_trans:

; 3102 : 
; 3103 :             /* Store function byte in low-order byte of reg.2 */
; 3104 :             regs->GR_LHLCL(2) = sbyte;

  003d3	b8 08 00 00 00	 mov	 eax, 8
  003d8	48 6b c0 02	 imul	 rax, rax, 2
  003dc	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003e4	0f b6 55 00	 movzx	 edx, BYTE PTR sbyte$[rbp]
  003e8	88 94 01 80 02
	00 00		 mov	 BYTE PTR [rcx+rax+640], dl

; 3105 : 
; 3106 :             /* Set condition code 2 if argument byte was last byte
; 3107 :              of first operand, otherwise set condition code 1 */
; 3108 :             cc = (i == len) ? 2 : 1;

  003ef	8b 45 34	 mov	 eax, DWORD PTR len$[rbp]
  003f2	39 45 1c	 cmp	 DWORD PTR i$[rbp], eax
  003f5	75 09		 jne	 SHORT $LN28@z900_trans
  003f7	c7 45 38 02 00
	00 00		 mov	 DWORD PTR tv237[rbp], 2
  003fe	eb 07		 jmp	 SHORT $LN29@z900_trans
$LN28@z900_trans:
  00400	c7 45 38 01 00
	00 00		 mov	 DWORD PTR tv237[rbp], 1
$LN29@z900_trans:
  00407	8b 45 38	 mov	 eax, DWORD PTR tv237[rbp]
  0040a	89 45 3c	 mov	 DWORD PTR cc$[rbp], eax

; 3109 : 
; 3110 :             /* Terminate the operation at this point */
; 3111 :             break;

  0040d	e9 8c 00 00 00	 jmp	 $LN9@z900_trans
$LN17@z900_trans:

; 3112 : 
; 3113 :         } /* end if(sbyte) */
; 3114 : 
; 3115 :         /* Decrement first operand address */
; 3116 :         effective_addr1--; /* Another difference with TRT */

  00412	48 8b 45 08	 mov	 rax, QWORD PTR effective_addr1$[rbp]
  00416	48 ff c8	 dec	 rax
  00419	48 89 45 08	 mov	 QWORD PTR effective_addr1$[rbp], rax

; 3117 :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  0041d	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00425	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0042c	48 8b 4d 08	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  00430	48 23 c8	 and	 rcx, rax
  00433	48 8b c1	 mov	 rax, rcx
  00436	48 89 45 08	 mov	 QWORD PTR effective_addr1$[rbp], rax

; 3118 : 
; 3119 :         /* update mainstor address */
; 3120 :         m1--;

  0043a	48 8b 45 28	 mov	 rax, QWORD PTR m1$[rbp]
  0043e	48 ff c8	 dec	 rax
  00441	48 89 45 28	 mov	 QWORD PTR m1$[rbp], rax

; 3121 : 
; 3122 :         /* check for page cross */
; 3123 :         if ( MAINSTOR_PAGEBASE ( m1 ) != m1pg )

  00445	48 8b 45 28	 mov	 rax, QWORD PTR m1$[rbp]
  00449	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0044f	48 3b 45 48	 cmp	 rax, QWORD PTR m1pg$[rbp]
  00453	74 44		 je	 SHORT $LN22@z900_trans

; 3124 :         {
; 3125 :             m1 = MADDRL(effective_addr1, 1, b1, regs, ACCTYPE_READ, regs->psw.pkey );

  00455	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0045d	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00461	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00465	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0046d	4c 8b 8c 24 18
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00475	44 8b 45 14	 mov	 r8d, DWORD PTR b1$[rbp]
  00479	ba 01 00 00 00	 mov	 edx, 1
  0047e	48 8b 4d 08	 mov	 rcx, QWORD PTR effective_addr1$[rbp]
  00482	e8 00 00 00 00	 call	 z900_maddr_l
  00487	48 89 45 28	 mov	 QWORD PTR m1$[rbp], rax

; 3126 :             m1pg = MAINSTOR_PAGEBASE ( m1 );

  0048b	48 8b 45 28	 mov	 rax, QWORD PTR m1$[rbp]
  0048f	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00495	48 89 45 48	 mov	 QWORD PTR m1pg$[rbp], rax
$LN22@z900_trans:

; 3127 :         }
; 3128 : 
; 3129 :     } /* end for(i) */

  00499	e9 0a fe ff ff	 jmp	 $LN8@z900_trans
$LN9@z900_trans:

; 3130 : 
; 3131 :     /* Update the condition code */
; 3132 :     regs->psw.cc = cc;

  0049e	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004a6	0f b6 4d 3c	 movzx	 ecx, BYTE PTR cc$[rbp]
  004aa	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 3133 : }

  004ad	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004b4	48 33 cc	 xor	 rcx, rsp
  004b7	e8 00 00 00 00	 call	 __security_check_cookie
  004bc	48 81 c4 00 02
	00 00		 add	 rsp, 512		; 00000200H
  004c3	5d		 pop	 rbp
  004c4	c3		 ret	 0
z900_translate_and_test_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 32
termchar$ = 36
r2$ = 40
r1$ = 44
i$ = 48
i$1 = 52
addr2$ = 56
addr1$ = 64
inst$ = 96
regs$ = 104
z900_search_string_unicode PROC

; 2952 : {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2953 :     VADR addr1, addr2;                  /* End/start addresses       */
; 2954 :     int i;                              /* Loop counter              */
; 2955 :     int r1, r2;                         /* Values of R fields        */
; 2956 :     U16 sbyte;                          /* String character          */
; 2957 :     U16 termchar;                       /* Terminating character     */
; 2958 : 
; 2959 :     RRE( inst, regs, r1, r2 );

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 34	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 34	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 28	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 34	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 2c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_searc:
  0003d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 04	 add	 rax, 4
  0004a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 04	 cmp	 eax, 4
  00058	74 0c		 je	 SHORT $LN17@z900_searc
  0005a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN17@z900_searc:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@z900_searc

; 2960 :     PER_ZEROADDR_CHECK2( regs, r1, r2 );

  0006c	44 8b 44 24 28	 mov	 r8d, DWORD PTR r2$[rsp]
  00071	8b 54 24 2c	 mov	 edx, DWORD PTR r1$[rsp]
  00075	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0007a	e8 00 00 00 00	 call	 z900_per3_zero_check2
$LN7@z900_searc:

; 2961 :     TXFC_INSTR_CHECK( regs );

  0007f	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00084	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  0008b	85 c0		 test	 eax, eax
  0008d	74 36		 je	 SHORT $LN18@z900_searc
  0008f	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00094	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  0009a	0f ba e8 0f	 bts	 eax, 15
  0009e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000a3	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  000a9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG207421
  000b0	41 b8 0b 00 00
	00		 mov	 r8d, 11
  000b6	ba 02 00 00 00	 mov	 edx, 2
  000bb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c0	e8 00 00 00 00	 call	 z900_abort_transaction
$LN18@z900_searc:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 b4		 jne	 SHORT $LN7@z900_searc

; 2962 : 
; 2963 :     /* Program check if bits 0-15 of register 0 not zero */
; 2964 :     if (regs->GR_L(0) & 0xFFFF0000)

  000cb	b8 08 00 00 00	 mov	 eax, 8
  000d0	48 6b c0 00	 imul	 rax, rax, 0
  000d4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000d9	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  000e0	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  000e5	85 c0		 test	 eax, eax
  000e7	74 15		 je	 SHORT $LN19@z900_searc

; 2965 :         regs->program_interrupt( regs, PGM_SPECIFICATION_EXCEPTION );

  000e9	ba 06 00 00 00	 mov	 edx, 6
  000ee	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000f3	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000f8	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN19@z900_searc:

; 2966 : 
; 2967 :     /* Load string terminating character from register 0 bits 16-31 */
; 2968 :     termchar = (U16) regs->GR(0);

  000fe	b8 08 00 00 00	 mov	 eax, 8
  00103	48 6b c0 00	 imul	 rax, rax, 0
  00107	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	0f b7 84 01 80
	02 00 00	 movzx	 eax, WORD PTR [rcx+rax+640]
  00114	66 89 44 24 24	 mov	 WORD PTR termchar$[rsp], ax

; 2969 : 
; 2970 :     /* Determine the operand end and start addresses */
; 2971 :     addr1 = regs->GR( r1 ) & ADDRESS_MAXWRAP( regs );

  00119	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  0011e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00123	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00128	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  0012f	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00137	48 23 c2	 and	 rax, rdx
  0013a	48 89 44 24 40	 mov	 QWORD PTR addr1$[rsp], rax

; 2972 :     addr2 = regs->GR( r2 ) & ADDRESS_MAXWRAP( regs );

  0013f	48 63 44 24 28	 movsxd	 rax, DWORD PTR r2$[rsp]
  00144	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00149	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0014e	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00155	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0015d	48 23 c2	 and	 rax, rdx
  00160	48 89 44 24 38	 mov	 QWORD PTR addr2$[rsp], rax

; 2973 : 
; 2974 :     /* "When the contents of bit position 63 of general registers R1
; 2975 :         and R2 differ (that is, when one address is even and the other
; 2976 :         is odd), the location of the first two-byte character after
; 2977 :         the second operand is ONE MORE THAN the contents of general
; 2978 :         register R1." (emphasis added)
; 2979 :     */
; 2980 :     if ((addr1 & 1) != (addr2 & 1))

  00165	48 8b 44 24 40	 mov	 rax, QWORD PTR addr1$[rsp]
  0016a	48 83 e0 01	 and	 rax, 1
  0016e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addr2$[rsp]
  00173	48 83 e1 01	 and	 rcx, 1
  00177	48 3b c1	 cmp	 rax, rcx
  0017a	74 29		 je	 SHORT $LN20@z900_searc

; 2981 :     {
; 2982 :         addr1++;

  0017c	48 8b 44 24 40	 mov	 rax, QWORD PTR addr1$[rsp]
  00181	48 ff c0	 inc	 rax
  00184	48 89 44 24 40	 mov	 QWORD PTR addr1$[rsp], rax

; 2983 :         addr1 &= ADDRESS_MAXWRAP( regs );

  00189	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0018e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00195	48 8b 4c 24 40	 mov	 rcx, QWORD PTR addr1$[rsp]
  0019a	48 23 c8	 and	 rcx, rax
  0019d	48 8b c1	 mov	 rax, rcx
  001a0	48 89 44 24 40	 mov	 QWORD PTR addr1$[rsp], rax
$LN20@z900_searc:

; 2984 :     }
; 2985 : 
; 2986 : #undef  SRSTU_MAX
; 2987 : #define SRSTU_MAX   _4K     /* (Sheesh! 256 bytes is WAY too small!) */
; 2988 : 
; 2989 :     /* Search up to CPU-determined bytes or until end of operand */
; 2990 :     for (i=0; i < SRSTU_MAX; i++)

  001a5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001ad	eb 0a		 jmp	 SHORT $LN10@z900_searc
$LN8@z900_searc:
  001af	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001b3	ff c0		 inc	 eax
  001b5	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN10@z900_searc:
  001b9	81 7c 24 30 00
	10 00 00	 cmp	 DWORD PTR i$[rsp], 4096	; 00001000H
  001c1	0f 8d c0 00 00
	00		 jge	 $LN9@z900_searc

; 2991 :     {
; 2992 :         /* If operand end address has been reached, return condition
; 2993 :            code 2 and leave the R1 and R2 registers unchanged
; 2994 :         */
; 2995 :         /* NOTE: "When the address in general register R1 is less than
; 2996 :            the address in general register R2, condition code 2 can be
; 2997 :            set only if the operand wraps around from the top of storage
; 2998 :            to location 0."  Thus the below == comparison is correct.
; 2999 :         */
; 3000 :         if (addr2 == addr1)

  001c7	48 8b 44 24 40	 mov	 rax, QWORD PTR addr1$[rsp]
  001cc	48 39 44 24 38	 cmp	 QWORD PTR addr2$[rsp], rax
  001d1	75 0e		 jne	 SHORT $LN21@z900_searc

; 3001 :         {
; 3002 :             regs->psw.cc = 2;

  001d3	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001d8	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 3003 :             return;

  001dc	e9 f5 00 00 00	 jmp	 $LN1@z900_searc
$LN21@z900_searc:

; 3004 :         }
; 3005 : 
; 3006 :         /* Fetch 2 bytes from the operand */
; 3007 :         sbyte = ARCH_DEP( vfetch2 )( addr2, r2, regs );

  001e1	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  001e6	8b 54 24 28	 mov	 edx, DWORD PTR r2$[rsp]
  001ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addr2$[rsp]
  001ef	e8 00 00 00 00	 call	 z900_vfetch2
  001f4	66 89 44 24 20	 mov	 WORD PTR sbyte$[rsp], ax

; 3008 : 
; 3009 :         /* If the terminating character was found, return condition
; 3010 :            code 1 and load the address of the character into R1 */
; 3011 :         if (sbyte == termchar)

  001f9	0f b7 44 24 20	 movzx	 eax, WORD PTR sbyte$[rsp]
  001fe	0f b7 4c 24 24	 movzx	 ecx, WORD PTR termchar$[rsp]
  00203	3b c1		 cmp	 eax, ecx
  00205	75 51		 jne	 SHORT $LN22@z900_searc
$LN13@z900_searc:

; 3012 :         {
; 3013 :             SET_GR_A( r1, regs, addr2 );

  00207	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0020c	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00212	83 e0 01	 and	 eax, 1
  00215	85 c0		 test	 eax, eax
  00217	74 19		 je	 SHORT $LN23@z900_searc
  00219	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  0021e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00223	48 8b 54 24 38	 mov	 rdx, QWORD PTR addr2$[rsp]
  00228	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00230	eb 15		 jmp	 SHORT $LN24@z900_searc
$LN23@z900_searc:
  00232	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00237	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0023c	8b 54 24 38	 mov	 edx, DWORD PTR addr2$[rsp]
  00240	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN24@z900_searc:
  00247	33 c0		 xor	 eax, eax
  00249	85 c0		 test	 eax, eax
  0024b	75 ba		 jne	 SHORT $LN13@z900_searc

; 3014 :             regs->psw.cc = 1;

  0024d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00252	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 3015 :             return;

  00256	eb 7e		 jmp	 SHORT $LN1@z900_searc
$LN22@z900_searc:

; 3016 :         }
; 3017 : 
; 3018 :         /* Increment operand address */
; 3019 :         addr2 += 2;

  00258	48 8b 44 24 38	 mov	 rax, QWORD PTR addr2$[rsp]
  0025d	48 83 c0 02	 add	 rax, 2
  00261	48 89 44 24 38	 mov	 QWORD PTR addr2$[rsp], rax

; 3020 :         addr2 &= ADDRESS_MAXWRAP( regs );

  00266	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0026b	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00272	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addr2$[rsp]
  00277	48 23 c8	 and	 rcx, rax
  0027a	48 8b c1	 mov	 rax, rcx
  0027d	48 89 44 24 38	 mov	 QWORD PTR addr2$[rsp], rax

; 3021 : 
; 3022 :     } /* end for(i) */

  00282	e9 28 ff ff ff	 jmp	 $LN8@z900_searc
$LN9@z900_searc:
$LN16@z900_searc:

; 3023 : 
; 3024 :     /* Set R2 to point to next character of operand */
; 3025 :     SET_GR_A( r2, regs, addr2 );

  00287	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0028c	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00292	83 e0 01	 and	 eax, 1
  00295	85 c0		 test	 eax, eax
  00297	74 19		 je	 SHORT $LN25@z900_searc
  00299	48 63 44 24 28	 movsxd	 rax, DWORD PTR r2$[rsp]
  0029e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  002a3	48 8b 54 24 38	 mov	 rdx, QWORD PTR addr2$[rsp]
  002a8	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  002b0	eb 15		 jmp	 SHORT $LN26@z900_searc
$LN25@z900_searc:
  002b2	48 63 44 24 28	 movsxd	 rax, DWORD PTR r2$[rsp]
  002b7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  002bc	8b 54 24 38	 mov	 edx, DWORD PTR addr2$[rsp]
  002c0	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN26@z900_searc:
  002c7	33 c0		 xor	 eax, eax
  002c9	85 c0		 test	 eax, eax
  002cb	75 ba		 jne	 SHORT $LN16@z900_searc

; 3026 : 
; 3027 :     /* Return condition code 3 */
; 3028 :     regs->psw.cc = 3;

  002cd	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  002d2	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@z900_searc:

; 3029 : }

  002d6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002da	c3		 ret	 0
z900_search_string_unicode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf8$ = 48
wfc$ = 52
r2$ = 56
utf32$ = 60
r1$ = 64
read$ = 68
srce$ = 72
srcelen$ = 80
temp$1 = 88
xlated$ = 92
dest$ = 96
destlen$ = 104
m3$ = 112
tv148 = 120
tv172 = 128
$T2 = 136
$T3 = 144
$T4 = 152
$T5 = 160
$T6 = 168
inst$ = 192
regs$ = 200
z900_convert_utf8_to_utf32 PROC

; 2335 : {

$LN89:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 2336 :     VADR dest;                     /* Destination address            */
; 2337 :     GREG destlen;                  /* Destination length             */
; 2338 :     int r1;
; 2339 :     int r2;
; 2340 :     int m3;                        /* Mask                           */
; 2341 :     int read;                      /* Bytes read                     */
; 2342 :     VADR srce;                     /* Source address                 */
; 2343 :     GREG srcelen;                  /* Source length                  */
; 2344 :     BYTE utf32[4];                 /* utf32 character(s)             */
; 2345 :     BYTE utf8[4];                  /* utf8 character(s)              */
; 2346 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2347 :     bool wfc;                      /* Well-Formedness-Checking (W)   */
; 2348 : #endif
; 2349 :     int xlated;                    /* characters translated          */
; 2350 : 
; 2351 :     RRF_M(inst, regs, r1, r2, m3);

  00011	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00019	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 _byteswap_ulong
  00025	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  00029	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0002d	83 e0 0f	 and	 eax, 15
  00030	89 44 24 38	 mov	 DWORD PTR r2$[rsp], eax
  00034	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00038	c1 e8 04	 shr	 eax, 4
  0003b	83 e0 0f	 and	 eax, 15
  0003e	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax
  00042	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	c1 e8 0c	 shr	 eax, 12
  00049	83 e0 0f	 and	 eax, 15
  0004c	89 44 24 70	 mov	 DWORD PTR m3$[rsp], eax
$LN4@z900_conve:
  00050	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00058	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005c	48 83 c0 04	 add	 rax, 4
  00060	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00068	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0006c	33 c0		 xor	 eax, eax
  0006e	83 f8 04	 cmp	 eax, 4
  00071	74 0f		 je	 SHORT $LN19@z900_conve
  00073	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0007b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN19@z900_conve:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 c8		 jne	 SHORT $LN4@z900_conve

; 2352 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );

  00088	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  0008c	ff c0		 inc	 eax
  0008e	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  00092	ff c1		 inc	 ecx
  00094	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00098	44 8b 4c 24 38	 mov	 r9d, DWORD PTR r2$[rsp]
  0009d	44 8b c1	 mov	 r8d, ecx
  000a0	8b 54 24 40	 mov	 edx, DWORD PTR r1$[rsp]
  000a4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ac	e8 00 00 00 00	 call	 z900_per3_zero_lcheck2

; 2353 :     ODD2_CHECK(r1, r2, regs);

  000b1	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  000b5	83 e0 01	 and	 eax, 1
  000b8	85 c0		 test	 eax, eax
  000ba	75 0b		 jne	 SHORT $LN21@z900_conve
  000bc	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  000c0	83 e0 01	 and	 eax, 1
  000c3	85 c0		 test	 eax, eax
  000c5	74 1b		 je	 SHORT $LN20@z900_conve
$LN21@z900_conve:
  000c7	ba 06 00 00 00	 mov	 edx, 6
  000cc	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d4	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000dc	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN20@z900_conve:

; 2354 : 
; 2355 :     /* Get paramaters */
; 2356 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000e2	48 63 44 24 40	 movsxd	 rax, DWORD PTR r1$[rsp]
  000e7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ef	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000f7	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  000fe	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00106	48 23 c2	 and	 rax, rdx
  00109	48 89 44 24 60	 mov	 QWORD PTR dest$[rsp], rax

; 2357 :     destlen = GR_A(r1 + 1, regs);

  0010e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00116	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0011c	83 e0 01	 and	 eax, 1
  0011f	85 c0		 test	 eax, eax
  00121	74 1f		 je	 SHORT $LN75@z900_conve
  00123	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  00127	ff c0		 inc	 eax
  00129	48 98		 cdqe
  0012b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00133	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0013b	48 89 44 24 78	 mov	 QWORD PTR tv148[rsp], rax
  00140	eb 1c		 jmp	 SHORT $LN76@z900_conve
$LN75@z900_conve:
  00142	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  00146	ff c0		 inc	 eax
  00148	48 98		 cdqe
  0014a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00152	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00159	48 89 44 24 78	 mov	 QWORD PTR tv148[rsp], rax
$LN76@z900_conve:
  0015e	48 8b 44 24 78	 mov	 rax, QWORD PTR tv148[rsp]
  00163	48 89 44 24 68	 mov	 QWORD PTR destlen$[rsp], rax

; 2358 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  00168	48 63 44 24 38	 movsxd	 rax, DWORD PTR r2$[rsp]
  0016d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00175	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0017d	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00184	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0018c	48 23 c2	 and	 rax, rdx
  0018f	48 89 44 24 48	 mov	 QWORD PTR srce$[rsp], rax

; 2359 :     srcelen = GR_A(r2 + 1, regs);

  00194	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019c	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  001a2	83 e0 01	 and	 eax, 1
  001a5	85 c0		 test	 eax, eax
  001a7	74 22		 je	 SHORT $LN77@z900_conve
  001a9	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  001ad	ff c0		 inc	 eax
  001af	48 98		 cdqe
  001b1	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b9	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001c1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
  001c9	eb 1f		 jmp	 SHORT $LN78@z900_conve
$LN77@z900_conve:
  001cb	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  001cf	ff c0		 inc	 eax
  001d1	48 98		 cdqe
  001d3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001db	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001e2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
$LN78@z900_conve:
  001ea	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv172[rsp]
  001f2	48 89 44 24 50	 mov	 QWORD PTR srcelen$[rsp], rax

; 2360 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2361 :     if ((m3 & 0x01) && FACILITY_ENABLED( 030_ETF3_ENHANCEMENT, regs ))

  001f7	8b 44 24 70	 mov	 eax, DWORD PTR m3$[rsp]
  001fb	83 e0 01	 and	 eax, 1
  001fe	85 c0		 test	 eax, eax
  00200	74 27		 je	 SHORT $LN22@z900_conve
  00202	b8 01 00 00 00	 mov	 eax, 1
  00207	48 6b c0 03	 imul	 rax, rax, 3
  0020b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00213	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  0021b	83 e0 02	 and	 eax, 2
  0021e	85 c0		 test	 eax, eax
  00220	74 07		 je	 SHORT $LN22@z900_conve

; 2362 :         wfc = true;

  00222	c6 44 24 34 01	 mov	 BYTE PTR wfc$[rsp], 1
  00227	eb 05		 jmp	 SHORT $LN23@z900_conve
$LN22@z900_conve:

; 2363 :     else
; 2364 :         wfc = false;

  00229	c6 44 24 34 00	 mov	 BYTE PTR wfc$[rsp], 0
$LN23@z900_conve:

; 2365 : #endif
; 2366 : 
; 2367 :     /* Every valid utf-32 starts with 0x00 */
; 2368 :     utf32[0] = 0x00;

  0022e	b8 01 00 00 00	 mov	 eax, 1
  00233	48 6b c0 00	 imul	 rax, rax, 0
  00237	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  0023f	48 83 bc 24 88
	00 00 00 04	 cmp	 QWORD PTR $T2[rsp], 4
  00248	73 02		 jae	 SHORT $LN79@z900_conve
  0024a	eb 05		 jmp	 SHORT $LN80@z900_conve
$LN79@z900_conve:
  0024c	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN80@z900_conve:
  00251	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  00259	c6 44 04 3c 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2369 : 
; 2370 :     /* Initialize number of translated charachters */
; 2371 :     xlated = 0;

  0025e	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0
$LN5@z900_conve:

; 2372 :     while(xlated < 4096)

  00266	81 7c 24 5c 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  0026e	0f 8d 33 0b 00
	00		 jge	 $LN6@z900_conve

; 2373 :     {
; 2374 :         /* Check end of source or destination */
; 2375 :         if(srcelen < 1)

  00274	48 83 7c 24 50
	01		 cmp	 QWORD PTR srcelen$[rsp], 1
  0027a	73 11		 jae	 SHORT $LN24@z900_conve

; 2376 :         {
; 2377 :             regs->psw.cc = 0;

  0027c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00284	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2378 :             return;

  00288	e9 26 0b 00 00	 jmp	 $LN1@z900_conve
$LN24@z900_conve:

; 2379 :         }
; 2380 :         if(destlen < 4)

  0028d	48 83 7c 24 68
	04		 cmp	 QWORD PTR destlen$[rsp], 4
  00293	73 11		 jae	 SHORT $LN25@z900_conve

; 2381 :         {
; 2382 :             regs->psw.cc = 1;

  00295	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0029d	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2383 :         return;

  002a1	e9 0d 0b 00 00	 jmp	 $LN1@z900_conve
$LN25@z900_conve:

; 2384 :         }
; 2385 : 
; 2386 :         /* Fetch a byte */
; 2387 :         utf8[0] = ARCH_DEP(vfetchb)(srce, r2, regs);

  002a6	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002ae	8b 54 24 38	 mov	 edx, DWORD PTR r2$[rsp]
  002b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR srce$[rsp]
  002b7	e8 00 00 00 00	 call	 z900_vfetchb
  002bc	b9 01 00 00 00	 mov	 ecx, 1
  002c1	48 6b c9 00	 imul	 rcx, rcx, 0
  002c5	88 44 0c 30	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2388 :         if(utf8[0] < 0x80)

  002c9	b8 01 00 00 00	 mov	 eax, 1
  002ce	48 6b c0 00	 imul	 rax, rax, 0
  002d2	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  002d7	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  002dc	0f 8d 83 00 00
	00		 jge	 $LN26@z900_conve

; 2389 :         {
; 2390 :             /* xlate range 00-7f */
; 2391 :             /* 0jklmnop -> 00000000 00000000 00000000 0jklmnop */
; 2392 :             utf32[1] = 0x00;

  002e2	48 c7 84 24 90
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T3[rsp], 1
  002ee	48 83 bc 24 90
	00 00 00 04	 cmp	 QWORD PTR $T3[rsp], 4
  002f7	73 02		 jae	 SHORT $LN81@z900_conve
  002f9	eb 05		 jmp	 SHORT $LN82@z900_conve
$LN81@z900_conve:
  002fb	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN82@z900_conve:
  00300	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  00308	c6 44 04 3c 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2393 :             utf32[2] = 0x00;

  0030d	b8 01 00 00 00	 mov	 eax, 1
  00312	48 6b c0 02	 imul	 rax, rax, 2
  00316	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR $T4[rsp], rax
  0031e	48 83 bc 24 98
	00 00 00 04	 cmp	 QWORD PTR $T4[rsp], 4
  00327	73 02		 jae	 SHORT $LN83@z900_conve
  00329	eb 05		 jmp	 SHORT $LN84@z900_conve
$LN83@z900_conve:
  0032b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN84@z900_conve:
  00330	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]
  00338	c6 44 04 3c 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2394 :             utf32[3] = utf8[0];

  0033d	b8 01 00 00 00	 mov	 eax, 1
  00342	48 6b c0 00	 imul	 rax, rax, 0
  00346	b9 01 00 00 00	 mov	 ecx, 1
  0034b	48 6b c9 03	 imul	 rcx, rcx, 3
  0034f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00354	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2395 :             read = 1;

  00358	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR read$[rsp], 1

; 2396 :         }

  00360	e9 d8 07 00 00	 jmp	 $LN27@z900_conve
$LN26@z900_conve:

; 2397 :         else if(utf8[0] >= 0xc0 && utf8[0] <= 0xdf)

  00365	b8 01 00 00 00	 mov	 eax, 1
  0036a	48 6b c0 00	 imul	 rax, rax, 0
  0036e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00373	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00378	0f 8c 58 01 00
	00		 jl	 $LN28@z900_conve
  0037e	b8 01 00 00 00	 mov	 eax, 1
  00383	48 6b c0 00	 imul	 rax, rax, 0
  00387	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0038c	3d df 00 00 00	 cmp	 eax, 223		; 000000dfH
  00391	0f 8f 3f 01 00
	00		 jg	 $LN28@z900_conve

; 2398 :         {
; 2399 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2400 :             /* WellFormednessChecking */
; 2401 :             if (wfc)

  00397	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  0039c	85 c0		 test	 eax, eax
  0039e	74 26		 je	 SHORT $LN30@z900_conve

; 2402 :             {
; 2403 :                 if (utf8[0] <= 0xc1)

  003a0	b8 01 00 00 00	 mov	 eax, 1
  003a5	48 6b c0 00	 imul	 rax, rax, 0
  003a9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  003ae	3d c1 00 00 00	 cmp	 eax, 193		; 000000c1H
  003b3	7f 11		 jg	 SHORT $LN31@z900_conve

; 2404 :                 {
; 2405 :                     regs->psw.cc = 2;

  003b5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003bd	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2406 :                     return;

  003c1	e9 ed 09 00 00	 jmp	 $LN1@z900_conve
$LN31@z900_conve:
$LN30@z900_conve:

; 2407 :                 }
; 2408 :             }
; 2409 : #endif
; 2410 : 
; 2411 :             /* Check end of source */
; 2412 :             if(srcelen < 2)

  003c6	48 83 7c 24 50
	02		 cmp	 QWORD PTR srcelen$[rsp], 2
  003cc	73 11		 jae	 SHORT $LN32@z900_conve

; 2413 :             {
; 2414 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  003ce	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003d6	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2415 :                 return;

  003da	e9 d4 09 00 00	 jmp	 $LN1@z900_conve
$LN32@z900_conve:

; 2416 :             }
; 2417 : 
; 2418 :             /* Get the next byte */
; 2419 :             utf8[1] = ARCH_DEP(vfetchb)(srce + 1, r2, regs);

  003df	48 8b 44 24 48	 mov	 rax, QWORD PTR srce$[rsp]
  003e4	48 ff c0	 inc	 rax
  003e7	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003ef	8b 54 24 38	 mov	 edx, DWORD PTR r2$[rsp]
  003f3	48 8b c8	 mov	 rcx, rax
  003f6	e8 00 00 00 00	 call	 z900_vfetchb
  003fb	b9 01 00 00 00	 mov	 ecx, 1
  00400	48 6b c9 01	 imul	 rcx, rcx, 1
  00404	88 44 0c 30	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2420 : 
; 2421 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2422 :             /* WellFormednessChecking */
; 2423 :             if (wfc)

  00408	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  0040d	85 c0		 test	 eax, eax
  0040f	74 3b		 je	 SHORT $LN33@z900_conve

; 2424 :             {
; 2425 :                 if (utf8[1] < 0x80 || utf8[1] > 0xbf)

  00411	b8 01 00 00 00	 mov	 eax, 1
  00416	48 6b c0 01	 imul	 rax, rax, 1
  0041a	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0041f	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00424	7c 15		 jl	 SHORT $LN35@z900_conve
  00426	b8 01 00 00 00	 mov	 eax, 1
  0042b	48 6b c0 01	 imul	 rax, rax, 1
  0042f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00434	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00439	7e 11		 jle	 SHORT $LN34@z900_conve
$LN35@z900_conve:

; 2426 :                 {
; 2427 :                     regs->psw.cc = 2;

  0043b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00443	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2428 :                     return;

  00447	e9 67 09 00 00	 jmp	 $LN1@z900_conve
$LN34@z900_conve:
$LN33@z900_conve:

; 2429 :                 }
; 2430 :             }
; 2431 : #endif
; 2432 : 
; 2433 :             /* xlate range c000-dfff */
; 2434 :             /* 110fghij 10klmnop -> 00000000 00000000 00000fgh ijklmnop */
; 2435 :             utf32[1] = 0x00;

  0044c	48 c7 84 24 a0
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T5[rsp], 1
  00458	48 83 bc 24 a0
	00 00 00 04	 cmp	 QWORD PTR $T5[rsp], 4
  00461	73 02		 jae	 SHORT $LN85@z900_conve
  00463	eb 05		 jmp	 SHORT $LN86@z900_conve
$LN85@z900_conve:
  00465	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN86@z900_conve:
  0046a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]
  00472	c6 44 04 3c 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2436 :             utf32[2] = (utf8[0] & 0x1c) >> 2;

  00477	b8 01 00 00 00	 mov	 eax, 1
  0047c	48 6b c0 00	 imul	 rax, rax, 0
  00480	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00485	83 e0 1c	 and	 eax, 28
  00488	c1 f8 02	 sar	 eax, 2
  0048b	b9 01 00 00 00	 mov	 ecx, 1
  00490	48 6b c9 02	 imul	 rcx, rcx, 2
  00494	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2437 :             utf32[3] = (utf8[0] << 6) | (utf8[1] & 0x3f);

  00498	b8 01 00 00 00	 mov	 eax, 1
  0049d	48 6b c0 00	 imul	 rax, rax, 0
  004a1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  004a6	c1 e0 06	 shl	 eax, 6
  004a9	b9 01 00 00 00	 mov	 ecx, 1
  004ae	48 6b c9 01	 imul	 rcx, rcx, 1
  004b2	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  004b7	83 e1 3f	 and	 ecx, 63			; 0000003fH
  004ba	0b c1		 or	 eax, ecx
  004bc	b9 01 00 00 00	 mov	 ecx, 1
  004c1	48 6b c9 03	 imul	 rcx, rcx, 3
  004c5	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2438 :             read = 2;

  004c9	c7 44 24 44 02
	00 00 00	 mov	 DWORD PTR read$[rsp], 2

; 2439 :         }

  004d1	e9 67 06 00 00	 jmp	 $LN29@z900_conve
$LN28@z900_conve:

; 2440 :         else if(utf8[0] >= 0xe0 && utf8[0] <= 0xef)

  004d6	b8 01 00 00 00	 mov	 eax, 1
  004db	48 6b c0 00	 imul	 rax, rax, 0
  004df	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  004e4	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  004e9	0f 8c bb 02 00
	00		 jl	 $LN36@z900_conve
  004ef	b8 01 00 00 00	 mov	 eax, 1
  004f4	48 6b c0 00	 imul	 rax, rax, 0
  004f8	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  004fd	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  00502	0f 8f a2 02 00
	00		 jg	 $LN36@z900_conve

; 2441 :         {
; 2442 :             /* Check end of source */
; 2443 :             if(srcelen < 3)

  00508	48 83 7c 24 50
	03		 cmp	 QWORD PTR srcelen$[rsp], 3
  0050e	73 11		 jae	 SHORT $LN38@z900_conve

; 2444 :             {
; 2445 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  00510	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00518	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2446 :                 return;

  0051c	e9 92 08 00 00	 jmp	 $LN1@z900_conve
$LN38@z900_conve:

; 2447 :             }
; 2448 : 
; 2449 :             /* Get the next 2 bytes */
; 2450 :             ARCH_DEP(vfetchc)(&utf8[1], 1, srce + 1, r2, regs);

  00521	48 8b 44 24 48	 mov	 rax, QWORD PTR srce$[rsp]
  00526	48 ff c0	 inc	 rax
  00529	b9 01 00 00 00	 mov	 ecx, 1
  0052e	48 6b c9 01	 imul	 rcx, rcx, 1
  00532	48 8d 4c 0c 30	 lea	 rcx, QWORD PTR utf8$[rsp+rcx]
  00537	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0053f	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00544	44 8b 4c 24 38	 mov	 r9d, DWORD PTR r2$[rsp]
  00549	4c 8b c0	 mov	 r8, rax
  0054c	b2 01		 mov	 dl, 1
  0054e	e8 00 00 00 00	 call	 z900_vfetchc

; 2451 : 
; 2452 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2453 :             /* WellformednessChecking */
; 2454 :             if (wfc)

  00553	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  00558	85 c0		 test	 eax, eax
  0055a	0f 84 ad 01 00
	00		 je	 $LN39@z900_conve

; 2455 :             {
; 2456 :                 if (utf8[0] == 0xe0)

  00560	b8 01 00 00 00	 mov	 eax, 1
  00565	48 6b c0 00	 imul	 rax, rax, 0
  00569	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0056e	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  00573	75 65		 jne	 SHORT $LN40@z900_conve

; 2457 :                 {
; 2458 :                     if (utf8[1] < 0xa0 || utf8[1] > 0xbf || utf8[2] < 0x80 || utf8[2] > 0xbf)

  00575	b8 01 00 00 00	 mov	 eax, 1
  0057a	48 6b c0 01	 imul	 rax, rax, 1
  0057e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00583	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  00588	7c 3f		 jl	 SHORT $LN42@z900_conve
  0058a	b8 01 00 00 00	 mov	 eax, 1
  0058f	48 6b c0 01	 imul	 rax, rax, 1
  00593	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00598	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  0059d	7f 2a		 jg	 SHORT $LN42@z900_conve
  0059f	b8 01 00 00 00	 mov	 eax, 1
  005a4	48 6b c0 02	 imul	 rax, rax, 2
  005a8	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005ad	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  005b2	7c 15		 jl	 SHORT $LN42@z900_conve
  005b4	b8 01 00 00 00	 mov	 eax, 1
  005b9	48 6b c0 02	 imul	 rax, rax, 2
  005bd	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005c2	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  005c7	7e 11		 jle	 SHORT $LN41@z900_conve
$LN42@z900_conve:

; 2459 :                     {
; 2460 :                         regs->psw.cc = 2;

  005c9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005d1	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2461 :                         return;

  005d5	e9 d9 07 00 00	 jmp	 $LN1@z900_conve
$LN41@z900_conve:
$LN40@z900_conve:

; 2462 :                     }
; 2463 :                 }
; 2464 :                 if ((utf8[0] >= 0xe1 && utf8[0] <= 0xec) || (utf8[0] >= 0xee && utf8[0] <= 0xef))

  005da	b8 01 00 00 00	 mov	 eax, 1
  005df	48 6b c0 00	 imul	 rax, rax, 0
  005e3	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005e8	3d e1 00 00 00	 cmp	 eax, 225		; 000000e1H
  005ed	7c 15		 jl	 SHORT $LN45@z900_conve
  005ef	b8 01 00 00 00	 mov	 eax, 1
  005f4	48 6b c0 00	 imul	 rax, rax, 0
  005f8	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005fd	3d ec 00 00 00	 cmp	 eax, 236		; 000000ecH
  00602	7e 2a		 jle	 SHORT $LN44@z900_conve
$LN45@z900_conve:
  00604	b8 01 00 00 00	 mov	 eax, 1
  00609	48 6b c0 00	 imul	 rax, rax, 0
  0060d	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00612	3d ee 00 00 00	 cmp	 eax, 238		; 000000eeH
  00617	7c 7a		 jl	 SHORT $LN43@z900_conve
  00619	b8 01 00 00 00	 mov	 eax, 1
  0061e	48 6b c0 00	 imul	 rax, rax, 0
  00622	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00627	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  0062c	7f 65		 jg	 SHORT $LN43@z900_conve
$LN44@z900_conve:

; 2465 :                 {
; 2466 :                     if (utf8[1] < 0x80 || utf8[1] > 0xbf || utf8[2] < 0x80 || utf8[2] > 0xbf)

  0062e	b8 01 00 00 00	 mov	 eax, 1
  00633	48 6b c0 01	 imul	 rax, rax, 1
  00637	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0063c	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00641	7c 3f		 jl	 SHORT $LN47@z900_conve
  00643	b8 01 00 00 00	 mov	 eax, 1
  00648	48 6b c0 01	 imul	 rax, rax, 1
  0064c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00651	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00656	7f 2a		 jg	 SHORT $LN47@z900_conve
  00658	b8 01 00 00 00	 mov	 eax, 1
  0065d	48 6b c0 02	 imul	 rax, rax, 2
  00661	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00666	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0066b	7c 15		 jl	 SHORT $LN47@z900_conve
  0066d	b8 01 00 00 00	 mov	 eax, 1
  00672	48 6b c0 02	 imul	 rax, rax, 2
  00676	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0067b	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00680	7e 11		 jle	 SHORT $LN46@z900_conve
$LN47@z900_conve:

; 2467 :                     {
; 2468 :                         regs->psw.cc = 2;

  00682	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0068a	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2469 :                         return;

  0068e	e9 20 07 00 00	 jmp	 $LN1@z900_conve
$LN46@z900_conve:
$LN43@z900_conve:

; 2470 :                     }
; 2471 :                 }
; 2472 :                 if (utf8[0] == 0xed)

  00693	b8 01 00 00 00	 mov	 eax, 1
  00698	48 6b c0 00	 imul	 rax, rax, 0
  0069c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006a1	3d ed 00 00 00	 cmp	 eax, 237		; 000000edH
  006a6	75 65		 jne	 SHORT $LN48@z900_conve

; 2473 :                 {
; 2474 :                     if (utf8[1] < 0x80 || utf8[1] > 0x9f || utf8[2] < 0x80 || utf8[2] > 0xbf)

  006a8	b8 01 00 00 00	 mov	 eax, 1
  006ad	48 6b c0 01	 imul	 rax, rax, 1
  006b1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006b6	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  006bb	7c 3f		 jl	 SHORT $LN50@z900_conve
  006bd	b8 01 00 00 00	 mov	 eax, 1
  006c2	48 6b c0 01	 imul	 rax, rax, 1
  006c6	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006cb	3d 9f 00 00 00	 cmp	 eax, 159		; 0000009fH
  006d0	7f 2a		 jg	 SHORT $LN50@z900_conve
  006d2	b8 01 00 00 00	 mov	 eax, 1
  006d7	48 6b c0 02	 imul	 rax, rax, 2
  006db	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006e0	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  006e5	7c 15		 jl	 SHORT $LN50@z900_conve
  006e7	b8 01 00 00 00	 mov	 eax, 1
  006ec	48 6b c0 02	 imul	 rax, rax, 2
  006f0	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006f5	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  006fa	7e 11		 jle	 SHORT $LN49@z900_conve
$LN50@z900_conve:

; 2475 :                     {
; 2476 :                         regs->psw.cc = 2;

  006fc	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00704	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2477 :                         return;

  00708	e9 a6 06 00 00	 jmp	 $LN1@z900_conve
$LN49@z900_conve:
$LN48@z900_conve:
$LN39@z900_conve:

; 2478 :                     }
; 2479 :                 }
; 2480 :             }
; 2481 : #endif /* defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY ) */
; 2482 : 
; 2483 :             /* xlate range e00000-efffff */
; 2484 :             /* 1110abcd 10efghij 10klmnop -> 00000000 00000000 abcdefgh ijklmnop */
; 2485 :             utf32[1] = 0x00;

  0070d	48 c7 84 24 a8
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T6[rsp], 1
  00719	48 83 bc 24 a8
	00 00 00 04	 cmp	 QWORD PTR $T6[rsp], 4
  00722	73 02		 jae	 SHORT $LN87@z900_conve
  00724	eb 05		 jmp	 SHORT $LN88@z900_conve
$LN87@z900_conve:
  00726	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN88@z900_conve:
  0072b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  00733	c6 44 04 3c 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2486 :             utf32[2] = (utf8[0] << 4) | ((utf8[1] & 0x3c) >> 2);

  00738	b8 01 00 00 00	 mov	 eax, 1
  0073d	48 6b c0 00	 imul	 rax, rax, 0
  00741	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00746	c1 e0 04	 shl	 eax, 4
  00749	b9 01 00 00 00	 mov	 ecx, 1
  0074e	48 6b c9 01	 imul	 rcx, rcx, 1
  00752	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  00757	83 e1 3c	 and	 ecx, 60			; 0000003cH
  0075a	c1 f9 02	 sar	 ecx, 2
  0075d	0b c1		 or	 eax, ecx
  0075f	b9 01 00 00 00	 mov	 ecx, 1
  00764	48 6b c9 02	 imul	 rcx, rcx, 2
  00768	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2487 :             utf32[3] = (utf8[1] << 6) | (utf8[2] & 0x3f);

  0076c	b8 01 00 00 00	 mov	 eax, 1
  00771	48 6b c0 01	 imul	 rax, rax, 1
  00775	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0077a	c1 e0 06	 shl	 eax, 6
  0077d	b9 01 00 00 00	 mov	 ecx, 1
  00782	48 6b c9 02	 imul	 rcx, rcx, 2
  00786	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  0078b	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0078e	0b c1		 or	 eax, ecx
  00790	b9 01 00 00 00	 mov	 ecx, 1
  00795	48 6b c9 03	 imul	 rcx, rcx, 3
  00799	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2488 :             read = 3;

  0079d	c7 44 24 44 03
	00 00 00	 mov	 DWORD PTR read$[rsp], 3

; 2489 :         }

  007a5	e9 93 03 00 00	 jmp	 $LN37@z900_conve
$LN36@z900_conve:

; 2490 :         else if(utf8[0] >= 0xf0 && utf8[0] <= 0xf7)

  007aa	b8 01 00 00 00	 mov	 eax, 1
  007af	48 6b c0 00	 imul	 rax, rax, 0
  007b3	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007b8	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  007bd	0f 8c 69 03 00
	00		 jl	 $LN51@z900_conve
  007c3	b8 01 00 00 00	 mov	 eax, 1
  007c8	48 6b c0 00	 imul	 rax, rax, 0
  007cc	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007d1	3d f7 00 00 00	 cmp	 eax, 247		; 000000f7H
  007d6	0f 8f 50 03 00
	00		 jg	 $LN51@z900_conve

; 2491 :         {
; 2492 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2493 :             /* WellFormednessChecking */
; 2494 :             if (wfc)

  007dc	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  007e1	85 c0		 test	 eax, eax
  007e3	74 26		 je	 SHORT $LN53@z900_conve

; 2495 :             {
; 2496 :                 if (utf8[0] > 0xf4)

  007e5	b8 01 00 00 00	 mov	 eax, 1
  007ea	48 6b c0 00	 imul	 rax, rax, 0
  007ee	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007f3	3d f4 00 00 00	 cmp	 eax, 244		; 000000f4H
  007f8	7e 11		 jle	 SHORT $LN54@z900_conve

; 2497 :                 {
; 2498 :                     regs->psw.cc = 2;

  007fa	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00802	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2499 :                     return;

  00806	e9 a8 05 00 00	 jmp	 $LN1@z900_conve
$LN54@z900_conve:
$LN53@z900_conve:

; 2500 :                 }
; 2501 :             }
; 2502 : #endif
; 2503 : 
; 2504 :             /* Check end of source */
; 2505 :             if(srcelen < 4)

  0080b	48 83 7c 24 50
	04		 cmp	 QWORD PTR srcelen$[rsp], 4
  00811	73 11		 jae	 SHORT $LN55@z900_conve

; 2506 :             {
; 2507 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  00813	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0081b	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2508 :                 return;

  0081f	e9 8f 05 00 00	 jmp	 $LN1@z900_conve
$LN55@z900_conve:

; 2509 :             }
; 2510 : 
; 2511 :             /* Get the next 3 bytes */
; 2512 :             ARCH_DEP(vfetchc)(&utf8[1], 2, srce + 1, r2, regs);

  00824	48 8b 44 24 48	 mov	 rax, QWORD PTR srce$[rsp]
  00829	48 ff c0	 inc	 rax
  0082c	b9 01 00 00 00	 mov	 ecx, 1
  00831	48 6b c9 01	 imul	 rcx, rcx, 1
  00835	48 8d 4c 0c 30	 lea	 rcx, QWORD PTR utf8$[rsp+rcx]
  0083a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00842	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00847	44 8b 4c 24 38	 mov	 r9d, DWORD PTR r2$[rsp]
  0084c	4c 8b c0	 mov	 r8, rax
  0084f	b2 02		 mov	 dl, 2
  00851	e8 00 00 00 00	 call	 z900_vfetchc

; 2513 : 
; 2514 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2515 :             /* WellFormdnessChecking */
; 2516 :             if (wfc)

  00856	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  0085b	85 c0		 test	 eax, eax
  0085d	0f 84 23 02 00
	00		 je	 $LN56@z900_conve

; 2517 :             {
; 2518 :                 if (utf8[0] == 0xf0)

  00863	b8 01 00 00 00	 mov	 eax, 1
  00868	48 6b c0 00	 imul	 rax, rax, 0
  0086c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00871	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  00876	0f 85 95 00 00
	00		 jne	 $LN57@z900_conve

; 2519 :                 {
; 2520 :                     if (0
; 2521 :                         || utf8[1] < 0x90
; 2522 :                         || utf8[1] > 0xbf
; 2523 : 
; 2524 :                         || utf8[2] < 0x80
; 2525 :                         || utf8[2] > 0xbf
; 2526 : 
; 2527 :                         || utf8[3] < 0x80
; 2528 :                         || utf8[3] > 0xbf

  0087c	33 c0		 xor	 eax, eax
  0087e	85 c0		 test	 eax, eax
  00880	75 7e		 jne	 SHORT $LN59@z900_conve
  00882	b8 01 00 00 00	 mov	 eax, 1
  00887	48 6b c0 01	 imul	 rax, rax, 1
  0088b	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00890	3d 90 00 00 00	 cmp	 eax, 144		; 00000090H
  00895	7c 69		 jl	 SHORT $LN59@z900_conve
  00897	b8 01 00 00 00	 mov	 eax, 1
  0089c	48 6b c0 01	 imul	 rax, rax, 1
  008a0	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008a5	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  008aa	7f 54		 jg	 SHORT $LN59@z900_conve
  008ac	b8 01 00 00 00	 mov	 eax, 1
  008b1	48 6b c0 02	 imul	 rax, rax, 2
  008b5	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008ba	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  008bf	7c 3f		 jl	 SHORT $LN59@z900_conve
  008c1	b8 01 00 00 00	 mov	 eax, 1
  008c6	48 6b c0 02	 imul	 rax, rax, 2
  008ca	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008cf	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  008d4	7f 2a		 jg	 SHORT $LN59@z900_conve
  008d6	b8 01 00 00 00	 mov	 eax, 1
  008db	48 6b c0 03	 imul	 rax, rax, 3
  008df	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008e4	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  008e9	7c 15		 jl	 SHORT $LN59@z900_conve
  008eb	b8 01 00 00 00	 mov	 eax, 1
  008f0	48 6b c0 03	 imul	 rax, rax, 3
  008f4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008f9	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  008fe	7e 11		 jle	 SHORT $LN58@z900_conve
$LN59@z900_conve:

; 2529 :                     )
; 2530 :                     {
; 2531 :                         regs->psw.cc = 2;

  00900	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00908	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2532 :                         return;

  0090c	e9 a2 04 00 00	 jmp	 $LN1@z900_conve
$LN58@z900_conve:
$LN57@z900_conve:

; 2533 :                     }
; 2534 :                 }
; 2535 :                 if (utf8[0] >= 0xf1 && utf8[0] <= 0xf3)

  00911	b8 01 00 00 00	 mov	 eax, 1
  00916	48 6b c0 00	 imul	 rax, rax, 0
  0091a	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0091f	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  00924	0f 8c ae 00 00
	00		 jl	 $LN60@z900_conve
  0092a	b8 01 00 00 00	 mov	 eax, 1
  0092f	48 6b c0 00	 imul	 rax, rax, 0
  00933	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00938	3d f3 00 00 00	 cmp	 eax, 243		; 000000f3H
  0093d	0f 8f 95 00 00
	00		 jg	 $LN60@z900_conve

; 2536 :                 {
; 2537 :                     if (0
; 2538 :                         || utf8[1] < 0x80
; 2539 :                         || utf8[1] > 0xbf
; 2540 : 
; 2541 :                         || utf8[2] < 0x80
; 2542 :                         || utf8[2] > 0xbf
; 2543 : 
; 2544 :                         || utf8[3] < 0x80
; 2545 :                         || utf8[3] > 0xbf

  00943	33 c0		 xor	 eax, eax
  00945	85 c0		 test	 eax, eax
  00947	75 7e		 jne	 SHORT $LN62@z900_conve
  00949	b8 01 00 00 00	 mov	 eax, 1
  0094e	48 6b c0 01	 imul	 rax, rax, 1
  00952	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00957	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0095c	7c 69		 jl	 SHORT $LN62@z900_conve
  0095e	b8 01 00 00 00	 mov	 eax, 1
  00963	48 6b c0 01	 imul	 rax, rax, 1
  00967	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0096c	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00971	7f 54		 jg	 SHORT $LN62@z900_conve
  00973	b8 01 00 00 00	 mov	 eax, 1
  00978	48 6b c0 02	 imul	 rax, rax, 2
  0097c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00981	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00986	7c 3f		 jl	 SHORT $LN62@z900_conve
  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 02	 imul	 rax, rax, 2
  00991	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00996	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  0099b	7f 2a		 jg	 SHORT $LN62@z900_conve
  0099d	b8 01 00 00 00	 mov	 eax, 1
  009a2	48 6b c0 03	 imul	 rax, rax, 3
  009a6	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  009ab	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  009b0	7c 15		 jl	 SHORT $LN62@z900_conve
  009b2	b8 01 00 00 00	 mov	 eax, 1
  009b7	48 6b c0 03	 imul	 rax, rax, 3
  009bb	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  009c0	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  009c5	7e 11		 jle	 SHORT $LN61@z900_conve
$LN62@z900_conve:

; 2546 :                     )
; 2547 :                     {
; 2548 :                         regs->psw.cc = 2;

  009c7	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009cf	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2549 :                         return;

  009d3	e9 db 03 00 00	 jmp	 $LN1@z900_conve
$LN61@z900_conve:
$LN60@z900_conve:

; 2550 :                     }
; 2551 :                 }
; 2552 :                 if (utf8[0] == 0xf4)

  009d8	b8 01 00 00 00	 mov	 eax, 1
  009dd	48 6b c0 00	 imul	 rax, rax, 0
  009e1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  009e6	3d f4 00 00 00	 cmp	 eax, 244		; 000000f4H
  009eb	0f 85 95 00 00
	00		 jne	 $LN63@z900_conve

; 2553 :                 {
; 2554 :                     if (0
; 2555 :                         || utf8[1] < 0x80
; 2556 :                         || utf8[1] > 0x8f
; 2557 : 
; 2558 :                         || utf8[2] < 0x80
; 2559 :                         || utf8[2] > 0xbf
; 2560 : 
; 2561 :                         || utf8[3] < 0x80
; 2562 :                         || utf8[3] > 0xbf

  009f1	33 c0		 xor	 eax, eax
  009f3	85 c0		 test	 eax, eax
  009f5	75 7e		 jne	 SHORT $LN65@z900_conve
  009f7	b8 01 00 00 00	 mov	 eax, 1
  009fc	48 6b c0 01	 imul	 rax, rax, 1
  00a00	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a05	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00a0a	7c 69		 jl	 SHORT $LN65@z900_conve
  00a0c	b8 01 00 00 00	 mov	 eax, 1
  00a11	48 6b c0 01	 imul	 rax, rax, 1
  00a15	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a1a	3d 8f 00 00 00	 cmp	 eax, 143		; 0000008fH
  00a1f	7f 54		 jg	 SHORT $LN65@z900_conve
  00a21	b8 01 00 00 00	 mov	 eax, 1
  00a26	48 6b c0 02	 imul	 rax, rax, 2
  00a2a	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a2f	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00a34	7c 3f		 jl	 SHORT $LN65@z900_conve
  00a36	b8 01 00 00 00	 mov	 eax, 1
  00a3b	48 6b c0 02	 imul	 rax, rax, 2
  00a3f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a44	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00a49	7f 2a		 jg	 SHORT $LN65@z900_conve
  00a4b	b8 01 00 00 00	 mov	 eax, 1
  00a50	48 6b c0 03	 imul	 rax, rax, 3
  00a54	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a59	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00a5e	7c 15		 jl	 SHORT $LN65@z900_conve
  00a60	b8 01 00 00 00	 mov	 eax, 1
  00a65	48 6b c0 03	 imul	 rax, rax, 3
  00a69	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a6e	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00a73	7e 11		 jle	 SHORT $LN64@z900_conve
$LN65@z900_conve:

; 2563 :                     )
; 2564 :                     {
; 2565 :                         regs->psw.cc = 2;

  00a75	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a7d	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2566 :                         return;

  00a81	e9 2d 03 00 00	 jmp	 $LN1@z900_conve
$LN64@z900_conve:
$LN63@z900_conve:
$LN56@z900_conve:

; 2567 :                     }
; 2568 :                 }
; 2569 :             }
; 2570 : #endif /* defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY ) */
; 2571 : 
; 2572 :             /* xlate range f0000000-f7000000 */
; 2573 :             /* 1110uvw 10xyefgh 10ijklmn 10opqrst -> 00000000 000uvwxy efghijkl mnopqrst */
; 2574 :             utf32[1] = ((utf8[0] & 0x07) << 2) | ((utf8[1] & 0x30) >> 4);

  00a86	b8 01 00 00 00	 mov	 eax, 1
  00a8b	48 6b c0 00	 imul	 rax, rax, 0
  00a8f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a94	83 e0 07	 and	 eax, 7
  00a97	c1 e0 02	 shl	 eax, 2
  00a9a	b9 01 00 00 00	 mov	 ecx, 1
  00a9f	48 6b c9 01	 imul	 rcx, rcx, 1
  00aa3	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  00aa8	83 e1 30	 and	 ecx, 48			; 00000030H
  00aab	c1 f9 04	 sar	 ecx, 4
  00aae	0b c1		 or	 eax, ecx
  00ab0	b9 01 00 00 00	 mov	 ecx, 1
  00ab5	48 6b c9 01	 imul	 rcx, rcx, 1
  00ab9	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2575 :             utf32[2] = (utf8[1] << 4) | ((utf8[2] & 0x3c) >> 2);

  00abd	b8 01 00 00 00	 mov	 eax, 1
  00ac2	48 6b c0 01	 imul	 rax, rax, 1
  00ac6	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00acb	c1 e0 04	 shl	 eax, 4
  00ace	b9 01 00 00 00	 mov	 ecx, 1
  00ad3	48 6b c9 02	 imul	 rcx, rcx, 2
  00ad7	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  00adc	83 e1 3c	 and	 ecx, 60			; 0000003cH
  00adf	c1 f9 02	 sar	 ecx, 2
  00ae2	0b c1		 or	 eax, ecx
  00ae4	b9 01 00 00 00	 mov	 ecx, 1
  00ae9	48 6b c9 02	 imul	 rcx, rcx, 2
  00aed	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2576 :             utf32[3] = (utf8[2] << 6) | (utf8[3] & 0x3f);

  00af1	b8 01 00 00 00	 mov	 eax, 1
  00af6	48 6b c0 02	 imul	 rax, rax, 2
  00afa	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00aff	c1 e0 06	 shl	 eax, 6
  00b02	b9 01 00 00 00	 mov	 ecx, 1
  00b07	48 6b c9 03	 imul	 rcx, rcx, 3
  00b0b	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  00b10	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00b13	0b c1		 or	 eax, ecx
  00b15	b9 01 00 00 00	 mov	 ecx, 1
  00b1a	48 6b c9 03	 imul	 rcx, rcx, 3
  00b1e	88 44 0c 3c	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2577 :             read = 4;

  00b22	c7 44 24 44 04
	00 00 00	 mov	 DWORD PTR read$[rsp], 4

; 2578 :         }

  00b2a	eb 11		 jmp	 SHORT $LN52@z900_conve
$LN51@z900_conve:

; 2579 :         else
; 2580 :         {
; 2581 :             regs->psw.cc = 2;

  00b2c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b34	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2582 :             return;

  00b38	e9 76 02 00 00	 jmp	 $LN1@z900_conve
$LN52@z900_conve:
$LN37@z900_conve:
$LN29@z900_conve:
$LN27@z900_conve:

; 2583 :         }
; 2584 : 
; 2585 :         /* Write and commit registers */
; 2586 :         ARCH_DEP(vstorec)(utf32, 3, dest, r1, regs);

  00b3d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b45	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b4a	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  00b4f	4c 8b 44 24 60	 mov	 r8, QWORD PTR dest$[rsp]
  00b54	b2 03		 mov	 dl, 3
  00b56	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR utf32$[rsp]
  00b5b	e8 00 00 00 00	 call	 z900_vstorec
$LN9@z900_conve:

; 2587 :         SET_GR_A(r1, regs, (dest += 4) & ADDRESS_MAXWRAP(regs));

  00b60	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b68	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00b6e	83 e0 01	 and	 eax, 1
  00b71	85 c0		 test	 eax, eax
  00b73	74 3f		 je	 SHORT $LN66@z900_conve
  00b75	48 8b 44 24 60	 mov	 rax, QWORD PTR dest$[rsp]
  00b7a	48 83 c0 04	 add	 rax, 4
  00b7e	48 89 44 24 60	 mov	 QWORD PTR dest$[rsp], rax
  00b83	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b8b	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00b92	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  00b97	48 23 c8	 and	 rcx, rax
  00b9a	48 8b c1	 mov	 rax, rcx
  00b9d	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00ba2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00baa	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  00bb2	eb 3c		 jmp	 SHORT $LN67@z900_conve
$LN66@z900_conve:
  00bb4	48 8b 44 24 60	 mov	 rax, QWORD PTR dest$[rsp]
  00bb9	48 83 c0 04	 add	 rax, 4
  00bbd	48 89 44 24 60	 mov	 QWORD PTR dest$[rsp], rax
  00bc2	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00bca	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00bd1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest$[rsp]
  00bd6	48 23 c8	 and	 rcx, rax
  00bd9	48 8b c1	 mov	 rax, rcx
  00bdc	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00be1	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00be9	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN67@z900_conve:
  00bf0	33 c0		 xor	 eax, eax
  00bf2	85 c0		 test	 eax, eax
  00bf4	0f 85 66 ff ff
	ff		 jne	 $LN9@z900_conve
$LN12@z900_conve:

; 2588 :         SET_GR_A(r1 + 1, regs, destlen -= 4);

  00bfa	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c02	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00c08	83 e0 01	 and	 eax, 1
  00c0b	85 c0		 test	 eax, eax
  00c0d	74 2d		 je	 SHORT $LN68@z900_conve
  00c0f	48 8b 44 24 68	 mov	 rax, QWORD PTR destlen$[rsp]
  00c14	48 83 e8 04	 sub	 rax, 4
  00c18	48 89 44 24 68	 mov	 QWORD PTR destlen$[rsp], rax
  00c1d	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  00c21	ff c0		 inc	 eax
  00c23	48 98		 cdqe
  00c25	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c2d	48 8b 54 24 68	 mov	 rdx, QWORD PTR destlen$[rsp]
  00c32	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00c3a	eb 29		 jmp	 SHORT $LN69@z900_conve
$LN68@z900_conve:
  00c3c	48 8b 44 24 68	 mov	 rax, QWORD PTR destlen$[rsp]
  00c41	48 83 e8 04	 sub	 rax, 4
  00c45	48 89 44 24 68	 mov	 QWORD PTR destlen$[rsp], rax
  00c4a	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  00c4e	ff c0		 inc	 eax
  00c50	48 98		 cdqe
  00c52	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c5a	8b 54 24 68	 mov	 edx, DWORD PTR destlen$[rsp]
  00c5e	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN69@z900_conve:
  00c65	33 c0		 xor	 eax, eax
  00c67	85 c0		 test	 eax, eax
  00c69	75 8f		 jne	 SHORT $LN12@z900_conve
$LN15@z900_conve:

; 2589 :         SET_GR_A(r2, regs, (srce += read) & ADDRESS_MAXWRAP(regs));

  00c6b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c73	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00c79	83 e0 01	 and	 eax, 1
  00c7c	85 c0		 test	 eax, eax
  00c7e	74 46		 je	 SHORT $LN70@z900_conve
  00c80	48 63 44 24 44	 movsxd	 rax, DWORD PTR read$[rsp]
  00c85	48 8b 4c 24 48	 mov	 rcx, QWORD PTR srce$[rsp]
  00c8a	48 03 c8	 add	 rcx, rax
  00c8d	48 8b c1	 mov	 rax, rcx
  00c90	48 89 44 24 48	 mov	 QWORD PTR srce$[rsp], rax
  00c95	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c9d	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00ca4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR srce$[rsp]
  00ca9	48 23 c8	 and	 rcx, rax
  00cac	48 8b c1	 mov	 rax, rcx
  00caf	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00cb4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00cbc	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  00cc4	eb 43		 jmp	 SHORT $LN71@z900_conve
$LN70@z900_conve:
  00cc6	48 63 44 24 44	 movsxd	 rax, DWORD PTR read$[rsp]
  00ccb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR srce$[rsp]
  00cd0	48 03 c8	 add	 rcx, rax
  00cd3	48 8b c1	 mov	 rax, rcx
  00cd6	48 89 44 24 48	 mov	 QWORD PTR srce$[rsp], rax
  00cdb	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ce3	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00cea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR srce$[rsp]
  00cef	48 23 c8	 and	 rcx, rax
  00cf2	48 8b c1	 mov	 rax, rcx
  00cf5	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00cfa	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00d02	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN71@z900_conve:
  00d09	33 c0		 xor	 eax, eax
  00d0b	85 c0		 test	 eax, eax
  00d0d	0f 85 58 ff ff
	ff		 jne	 $LN15@z900_conve
$LN18@z900_conve:

; 2590 :         SET_GR_A(r2 + 1, regs, srcelen -= read);

  00d13	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d1b	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00d21	83 e0 01	 and	 eax, 1
  00d24	85 c0		 test	 eax, eax
  00d26	74 34		 je	 SHORT $LN72@z900_conve
  00d28	48 63 44 24 44	 movsxd	 rax, DWORD PTR read$[rsp]
  00d2d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR srcelen$[rsp]
  00d32	48 2b c8	 sub	 rcx, rax
  00d35	48 8b c1	 mov	 rax, rcx
  00d38	48 89 44 24 50	 mov	 QWORD PTR srcelen$[rsp], rax
  00d3d	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  00d41	ff c0		 inc	 eax
  00d43	48 98		 cdqe
  00d45	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d4d	48 8b 54 24 50	 mov	 rdx, QWORD PTR srcelen$[rsp]
  00d52	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00d5a	eb 30		 jmp	 SHORT $LN73@z900_conve
$LN72@z900_conve:
  00d5c	48 63 44 24 44	 movsxd	 rax, DWORD PTR read$[rsp]
  00d61	48 8b 4c 24 50	 mov	 rcx, QWORD PTR srcelen$[rsp]
  00d66	48 2b c8	 sub	 rcx, rax
  00d69	48 8b c1	 mov	 rax, rcx
  00d6c	48 89 44 24 50	 mov	 QWORD PTR srcelen$[rsp], rax
  00d71	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  00d75	ff c0		 inc	 eax
  00d77	48 98		 cdqe
  00d79	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d81	8b 54 24 50	 mov	 edx, DWORD PTR srcelen$[rsp]
  00d85	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN73@z900_conve:
  00d8c	33 c0		 xor	 eax, eax
  00d8e	85 c0		 test	 eax, eax
  00d90	75 81		 jne	 SHORT $LN18@z900_conve

; 2591 : 
; 2592 :         xlated += read;

  00d92	8b 44 24 44	 mov	 eax, DWORD PTR read$[rsp]
  00d96	8b 4c 24 5c	 mov	 ecx, DWORD PTR xlated$[rsp]
  00d9a	03 c8		 add	 ecx, eax
  00d9c	8b c1		 mov	 eax, ecx
  00d9e	89 44 24 5c	 mov	 DWORD PTR xlated$[rsp], eax

; 2593 :     }

  00da2	e9 bf f4 ff ff	 jmp	 $LN5@z900_conve
$LN6@z900_conve:

; 2594 : 
; 2595 :     /* CPU determined number of characters reached */
; 2596 :     regs->psw.cc = 3;

  00da7	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00daf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@z900_conve:
$LN74@z900_conve:

; 2597 : }

  00db3	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00dba	c3		 ret	 0
z900_convert_utf8_to_utf32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf32$ = 48
r1$ = 52
r2$ = 56
utf8$ = 60
write$ = 64
destlen$ = 72
xlated$ = 80
dest$ = 88
srce$ = 96
srcelen$ = 104
i$1 = 112
tv145 = 120
tv169 = 128
inst$ = 160
regs$ = 168
z900_convert_utf32_to_utf8 PROC

; 2717 : {

$LN54:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 2718 :     VADR dest;                     /* Destination address            */
; 2719 :     GREG destlen;                  /* Destination length             */
; 2720 :     int r1;
; 2721 :     int r2;
; 2722 :     VADR srce;                     /* Source address                 */
; 2723 :     GREG srcelen;                  /* Source length                  */
; 2724 :     BYTE utf32[4];                 /* utf32 character(s)             */
; 2725 :     BYTE utf8[4];                  /* utf8 character(s)              */
; 2726 :     int write;                     /* Bytes written                  */
; 2727 :     int xlated;                    /* characters translated          */
; 2728 : 
; 2729 :     RRE(inst, regs, r1, r2);

  00011	b8 01 00 00 00	 mov	 eax, 1
  00016	48 6b c0 03	 imul	 rax, rax, 3
  0001a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00022	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00026	89 44 24 70	 mov	 DWORD PTR i$1[rsp], eax
  0002a	8b 44 24 70	 mov	 eax, DWORD PTR i$1[rsp]
  0002e	83 e0 0f	 and	 eax, 15
  00031	89 44 24 38	 mov	 DWORD PTR r2$[rsp], eax
  00035	8b 44 24 70	 mov	 eax, DWORD PTR i$1[rsp]
  00039	c1 f8 04	 sar	 eax, 4
  0003c	83 e0 0f	 and	 eax, 15
  0003f	89 44 24 34	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_conve:
  00043	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0004b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004f	48 83 c0 04	 add	 rax, 4
  00053	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0005b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0005f	33 c0		 xor	 eax, eax
  00061	83 f8 04	 cmp	 eax, 4
  00064	74 0f		 je	 SHORT $LN19@z900_conve
  00066	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006e	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN19@z900_conve:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 c8		 jne	 SHORT $LN4@z900_conve

; 2730 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );

  0007b	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  0007f	ff c0		 inc	 eax
  00081	8b 4c 24 34	 mov	 ecx, DWORD PTR r1$[rsp]
  00085	ff c1		 inc	 ecx
  00087	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008b	44 8b 4c 24 38	 mov	 r9d, DWORD PTR r2$[rsp]
  00090	44 8b c1	 mov	 r8d, ecx
  00093	8b 54 24 34	 mov	 edx, DWORD PTR r1$[rsp]
  00097	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0009f	e8 00 00 00 00	 call	 z900_per3_zero_lcheck2

; 2731 :     ODD2_CHECK(r1, r2, regs);

  000a4	8b 44 24 34	 mov	 eax, DWORD PTR r1$[rsp]
  000a8	83 e0 01	 and	 eax, 1
  000ab	85 c0		 test	 eax, eax
  000ad	75 0b		 jne	 SHORT $LN21@z900_conve
  000af	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 1b		 je	 SHORT $LN20@z900_conve
$LN21@z900_conve:
  000ba	ba 06 00 00 00	 mov	 edx, 6
  000bf	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000cf	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN20@z900_conve:

; 2732 : 
; 2733 :     /* Get paramaters */
; 2734 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000d5	48 63 44 24 34	 movsxd	 rax, DWORD PTR r1$[rsp]
  000da	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000ea	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  000f1	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000f9	48 23 c2	 and	 rax, rdx
  000fc	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax

; 2735 :     destlen = GR_A(r1 + 1, regs);

  00101	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00109	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0010f	83 e0 01	 and	 eax, 1
  00112	85 c0		 test	 eax, eax
  00114	74 1f		 je	 SHORT $LN50@z900_conve
  00116	8b 44 24 34	 mov	 eax, DWORD PTR r1$[rsp]
  0011a	ff c0		 inc	 eax
  0011c	48 98		 cdqe
  0011e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00126	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0012e	48 89 44 24 78	 mov	 QWORD PTR tv145[rsp], rax
  00133	eb 1c		 jmp	 SHORT $LN51@z900_conve
$LN50@z900_conve:
  00135	8b 44 24 34	 mov	 eax, DWORD PTR r1$[rsp]
  00139	ff c0		 inc	 eax
  0013b	48 98		 cdqe
  0013d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00145	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0014c	48 89 44 24 78	 mov	 QWORD PTR tv145[rsp], rax
$LN51@z900_conve:
  00151	48 8b 44 24 78	 mov	 rax, QWORD PTR tv145[rsp]
  00156	48 89 44 24 48	 mov	 QWORD PTR destlen$[rsp], rax

; 2736 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  0015b	48 63 44 24 38	 movsxd	 rax, DWORD PTR r2$[rsp]
  00160	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00168	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00170	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00177	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0017f	48 23 c2	 and	 rax, rdx
  00182	48 89 44 24 60	 mov	 QWORD PTR srce$[rsp], rax

; 2737 :     srcelen = GR_A(r2 + 1, regs);

  00187	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0018f	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00195	83 e0 01	 and	 eax, 1
  00198	85 c0		 test	 eax, eax
  0019a	74 22		 je	 SHORT $LN52@z900_conve
  0019c	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  001a0	ff c0		 inc	 eax
  001a2	48 98		 cdqe
  001a4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001ac	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001b4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv169[rsp], rax
  001bc	eb 1f		 jmp	 SHORT $LN53@z900_conve
$LN52@z900_conve:
  001be	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  001c2	ff c0		 inc	 eax
  001c4	48 98		 cdqe
  001c6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001ce	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001d5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv169[rsp], rax
$LN53@z900_conve:
  001dd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv169[rsp]
  001e5	48 89 44 24 68	 mov	 QWORD PTR srcelen$[rsp], rax

; 2738 : 
; 2739 :     /* Initialize number of translated charachters */
; 2740 :     xlated = 0;

  001ea	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0

; 2741 :     write = 0;

  001f2	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR write$[rsp], 0
$LN5@z900_conve:

; 2742 :     while(xlated < 4096)

  001fa	81 7c 24 50 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  00202	0f 8d d8 05 00
	00		 jge	 $LN6@z900_conve

; 2743 :     {
; 2744 :         /* Check end of source or destination */
; 2745 :         if(srcelen < 4)

  00208	48 83 7c 24 68
	04		 cmp	 QWORD PTR srcelen$[rsp], 4
  0020e	73 11		 jae	 SHORT $LN22@z900_conve

; 2746 :         {
; 2747 :             regs->psw.cc = 0;

  00210	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00218	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2748 :             return;

  0021c	e9 cb 05 00 00	 jmp	 $LN1@z900_conve
$LN22@z900_conve:

; 2749 :         }
; 2750 :         if(destlen < 1)

  00221	48 83 7c 24 48
	01		 cmp	 QWORD PTR destlen$[rsp], 1
  00227	73 11		 jae	 SHORT $LN23@z900_conve

; 2751 :         {
; 2752 :             regs->psw.cc = 1;

  00229	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00231	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2753 :             return;

  00235	e9 b2 05 00 00	 jmp	 $LN1@z900_conve
$LN23@z900_conve:

; 2754 :         }
; 2755 : 
; 2756 :         /* Get 4 bytes */
; 2757 :         ARCH_DEP(vfetchc)(utf32, 3, srce, r2, regs);

  0023a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00242	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00247	44 8b 4c 24 38	 mov	 r9d, DWORD PTR r2$[rsp]
  0024c	4c 8b 44 24 60	 mov	 r8, QWORD PTR srce$[rsp]
  00251	b2 03		 mov	 dl, 3
  00253	48 8d 4c 24 30	 lea	 rcx, QWORD PTR utf32$[rsp]
  00258	e8 00 00 00 00	 call	 z900_vfetchc

; 2758 : 
; 2759 :         if(utf32[0] != 0x00)

  0025d	b8 01 00 00 00	 mov	 eax, 1
  00262	48 6b c0 00	 imul	 rax, rax, 0
  00266	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0026b	85 c0		 test	 eax, eax
  0026d	74 16		 je	 SHORT $LN24@z900_conve

; 2760 :         {
; 2761 :             regs->psw.cc = 2;

  0026f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00277	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2762 :             return;

  0027b	e9 6c 05 00 00	 jmp	 $LN1@z900_conve

; 2763 :         }

  00280	e9 ef 02 00 00	 jmp	 $LN25@z900_conve
$LN24@z900_conve:

; 2764 :         else if(utf32[1] == 0x00)

  00285	b8 01 00 00 00	 mov	 eax, 1
  0028a	48 6b c0 01	 imul	 rax, rax, 1
  0028e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00293	85 c0		 test	 eax, eax
  00295	0f 85 c2 01 00
	00		 jne	 $LN26@z900_conve

; 2765 :         {
; 2766 :             if(utf32[2] == 0x00)

  0029b	b8 01 00 00 00	 mov	 eax, 1
  002a0	48 6b c0 02	 imul	 rax, rax, 2
  002a4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002a9	85 c0		 test	 eax, eax
  002ab	75 3b		 jne	 SHORT $LN28@z900_conve

; 2767 :             {
; 2768 :                 if(utf32[3] <= 0x7f)

  002ad	b8 01 00 00 00	 mov	 eax, 1
  002b2	48 6b c0 03	 imul	 rax, rax, 3
  002b6	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002bb	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  002be	7f 23		 jg	 SHORT $LN30@z900_conve

; 2769 :                 {
; 2770 :                     /* xlate range 00000000-0000007f */
; 2771 :                     /* 00000000 00000000 00000000 0jklmnop -> 0jklmnop */
; 2772 :                     utf8[0] = utf32[3];

  002c0	b8 01 00 00 00	 mov	 eax, 1
  002c5	48 6b c0 03	 imul	 rax, rax, 3
  002c9	b9 01 00 00 00	 mov	 ecx, 1
  002ce	48 6b c9 00	 imul	 rcx, rcx, 0
  002d2	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002d7	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2773 :                     write = 1;

  002db	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR write$[rsp], 1
$LN30@z900_conve:

; 2774 :                 }
; 2775 :             }

  002e3	e9 70 01 00 00	 jmp	 $LN29@z900_conve
$LN28@z900_conve:

; 2776 :             else if(utf32[2] <= 0x07)

  002e8	b8 01 00 00 00	 mov	 eax, 1
  002ed	48 6b c0 02	 imul	 rax, rax, 2
  002f1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002f6	83 f8 07	 cmp	 eax, 7
  002f9	7f 7e		 jg	 SHORT $LN31@z900_conve

; 2777 :             {
; 2778 :                 /* Check destination length */
; 2779 :                 if(destlen < 2)

  002fb	48 83 7c 24 48
	02		 cmp	 QWORD PTR destlen$[rsp], 2
  00301	73 11		 jae	 SHORT $LN33@z900_conve

; 2780 :                 {
; 2781 :                     regs->psw.cc = 1;

  00303	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0030b	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2782 :                     return;

  0030f	e9 d8 04 00 00	 jmp	 $LN1@z900_conve
$LN33@z900_conve:

; 2783 :                 }
; 2784 : 
; 2785 :                 /* xlate range 00000080-000007ff */
; 2786 :                 /* 00000000 00000000 00000fgh ijklmnop -> 110fghij 10klmnop */
; 2787 :                 utf8[0] = 0xc0 | (utf32[2] << 2) | (utf32[2] >> 6);

  00314	b8 01 00 00 00	 mov	 eax, 1
  00319	48 6b c0 02	 imul	 rax, rax, 2
  0031d	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00322	c1 e0 02	 shl	 eax, 2
  00325	0d c0 00 00 00	 or	 eax, 192		; 000000c0H
  0032a	b9 01 00 00 00	 mov	 ecx, 1
  0032f	48 6b c9 02	 imul	 rcx, rcx, 2
  00333	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  00338	c1 f9 06	 sar	 ecx, 6
  0033b	0b c1		 or	 eax, ecx
  0033d	b9 01 00 00 00	 mov	 ecx, 1
  00342	48 6b c9 00	 imul	 rcx, rcx, 0
  00346	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2788 :                 utf8[1] = 0x80 | (utf32[2] & 0x3f);

  0034a	b8 01 00 00 00	 mov	 eax, 1
  0034f	48 6b c0 02	 imul	 rax, rax, 2
  00353	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00358	83 e0 3f	 and	 eax, 63			; 0000003fH
  0035b	0f ba e8 07	 bts	 eax, 7
  0035f	b9 01 00 00 00	 mov	 ecx, 1
  00364	48 6b c9 01	 imul	 rcx, rcx, 1
  00368	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2789 :                 write = 2;

  0036c	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR write$[rsp], 2

; 2790 :             }

  00374	e9 df 00 00 00	 jmp	 $LN32@z900_conve
$LN31@z900_conve:

; 2791 :             else if(utf32[2] <= 0xd7 || utf32[2] > 0xdc)

  00379	b8 01 00 00 00	 mov	 eax, 1
  0037e	48 6b c0 02	 imul	 rax, rax, 2
  00382	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00387	3d d7 00 00 00	 cmp	 eax, 215		; 000000d7H
  0038c	7e 19		 jle	 SHORT $LN36@z900_conve
  0038e	b8 01 00 00 00	 mov	 eax, 1
  00393	48 6b c0 02	 imul	 rax, rax, 2
  00397	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0039c	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  003a1	0f 8e a0 00 00
	00		 jle	 $LN34@z900_conve
$LN36@z900_conve:

; 2792 :             {
; 2793 :                 /* Check destination length */
; 2794 :                 if(destlen < 3)

  003a7	48 83 7c 24 48
	03		 cmp	 QWORD PTR destlen$[rsp], 3
  003ad	73 11		 jae	 SHORT $LN37@z900_conve

; 2795 :                 {
; 2796 :                     regs->psw.cc = 1;

  003af	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003b7	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2797 :                     return;

  003bb	e9 2c 04 00 00	 jmp	 $LN1@z900_conve
$LN37@z900_conve:

; 2798 :                 }
; 2799 : 
; 2800 :                 /* xlate range 00000800-0000d7ff and 0000dc00-0000ffff */
; 2801 :                 /* 00000000 00000000 abcdefgh ijklnmop -> 1110abcd 10efghij 10klmnop */
; 2802 :                 utf8[0] = 0xe0 | (utf32[2] >> 4);

  003c0	b8 01 00 00 00	 mov	 eax, 1
  003c5	48 6b c0 02	 imul	 rax, rax, 2
  003c9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  003ce	c1 f8 04	 sar	 eax, 4
  003d1	0d e0 00 00 00	 or	 eax, 224		; 000000e0H
  003d6	b9 01 00 00 00	 mov	 ecx, 1
  003db	48 6b c9 00	 imul	 rcx, rcx, 0
  003df	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2803 :                 utf8[1] = 0x80 | ((utf32[2] & 0x0f) << 2) | (utf32[3] >> 6);

  003e3	b8 01 00 00 00	 mov	 eax, 1
  003e8	48 6b c0 02	 imul	 rax, rax, 2
  003ec	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  003f1	83 e0 0f	 and	 eax, 15
  003f4	c1 e0 02	 shl	 eax, 2
  003f7	0f ba e8 07	 bts	 eax, 7
  003fb	b9 01 00 00 00	 mov	 ecx, 1
  00400	48 6b c9 03	 imul	 rcx, rcx, 3
  00404	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  00409	c1 f9 06	 sar	 ecx, 6
  0040c	0b c1		 or	 eax, ecx
  0040e	b9 01 00 00 00	 mov	 ecx, 1
  00413	48 6b c9 01	 imul	 rcx, rcx, 1
  00417	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2804 :                 utf8[2] = 0x80 | (utf32[3] & 0x3f);

  0041b	b8 01 00 00 00	 mov	 eax, 1
  00420	48 6b c0 03	 imul	 rax, rax, 3
  00424	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00429	83 e0 3f	 and	 eax, 63			; 0000003fH
  0042c	0f ba e8 07	 bts	 eax, 7
  00430	b9 01 00 00 00	 mov	 ecx, 1
  00435	48 6b c9 02	 imul	 rcx, rcx, 2
  00439	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2805 :                 write = 3;

  0043d	c7 44 24 40 03
	00 00 00	 mov	 DWORD PTR write$[rsp], 3

; 2806 :             }

  00445	eb 11		 jmp	 SHORT $LN35@z900_conve
$LN34@z900_conve:

; 2807 :             else
; 2808 :             {
; 2809 :                 regs->psw.cc = 2;

  00447	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0044f	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2810 :                 return;

  00453	e9 94 03 00 00	 jmp	 $LN1@z900_conve
$LN35@z900_conve:
$LN32@z900_conve:
$LN29@z900_conve:

; 2811 :             }
; 2812 :         }

  00458	e9 17 01 00 00	 jmp	 $LN27@z900_conve
$LN26@z900_conve:

; 2813 :         else if(utf32[1] >= 0x01 && utf32[1] <= 0x10)

  0045d	b8 01 00 00 00	 mov	 eax, 1
  00462	48 6b c0 01	 imul	 rax, rax, 1
  00466	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0046b	83 f8 01	 cmp	 eax, 1
  0046e	0f 8c ef 00 00
	00		 jl	 $LN38@z900_conve
  00474	b8 01 00 00 00	 mov	 eax, 1
  00479	48 6b c0 01	 imul	 rax, rax, 1
  0047d	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00482	83 f8 10	 cmp	 eax, 16
  00485	0f 8f d8 00 00
	00		 jg	 $LN38@z900_conve

; 2814 :         {
; 2815 :             /* Check destination length */
; 2816 :             if(destlen < 4)

  0048b	48 83 7c 24 48
	04		 cmp	 QWORD PTR destlen$[rsp], 4
  00491	73 11		 jae	 SHORT $LN40@z900_conve

; 2817 :             {
; 2818 :                 regs->psw.cc = 1;

  00493	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0049b	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2819 :                 return;

  0049f	e9 48 03 00 00	 jmp	 $LN1@z900_conve
$LN40@z900_conve:

; 2820 :             }
; 2821 : 
; 2822 :             /* xlate range 00010000-0010ffff */
; 2823 :             /* 00000000 000uvwxy efghijkl mnopqrst -> 11110uvw 10xyefgh 10ijklmn 10opqrst */
; 2824 :             utf8[0] = 0xf0 | (utf32[1] >> 2);

  004a4	b8 01 00 00 00	 mov	 eax, 1
  004a9	48 6b c0 01	 imul	 rax, rax, 1
  004ad	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  004b2	c1 f8 02	 sar	 eax, 2
  004b5	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  004ba	b9 01 00 00 00	 mov	 ecx, 1
  004bf	48 6b c9 00	 imul	 rcx, rcx, 0
  004c3	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2825 :             utf8[1] = 0x80 | ((utf32[1] & 0x03) << 4) | (utf32[2] >> 4);

  004c7	b8 01 00 00 00	 mov	 eax, 1
  004cc	48 6b c0 01	 imul	 rax, rax, 1
  004d0	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  004d5	83 e0 03	 and	 eax, 3
  004d8	c1 e0 04	 shl	 eax, 4
  004db	0f ba e8 07	 bts	 eax, 7
  004df	b9 01 00 00 00	 mov	 ecx, 1
  004e4	48 6b c9 02	 imul	 rcx, rcx, 2
  004e8	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  004ed	c1 f9 04	 sar	 ecx, 4
  004f0	0b c1		 or	 eax, ecx
  004f2	b9 01 00 00 00	 mov	 ecx, 1
  004f7	48 6b c9 01	 imul	 rcx, rcx, 1
  004fb	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2826 :             utf8[2] = 0x80 | ((utf32[2] & 0x0f) << 2) | (utf32[3] >> 6);

  004ff	b8 01 00 00 00	 mov	 eax, 1
  00504	48 6b c0 02	 imul	 rax, rax, 2
  00508	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0050d	83 e0 0f	 and	 eax, 15
  00510	c1 e0 02	 shl	 eax, 2
  00513	0f ba e8 07	 bts	 eax, 7
  00517	b9 01 00 00 00	 mov	 ecx, 1
  0051c	48 6b c9 03	 imul	 rcx, rcx, 3
  00520	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  00525	c1 f9 06	 sar	 ecx, 6
  00528	0b c1		 or	 eax, ecx
  0052a	b9 01 00 00 00	 mov	 ecx, 1
  0052f	48 6b c9 02	 imul	 rcx, rcx, 2
  00533	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2827 :             utf8[3] = 0x80 | (utf32[3] & 0x3f);

  00537	b8 01 00 00 00	 mov	 eax, 1
  0053c	48 6b c0 03	 imul	 rax, rax, 3
  00540	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00545	83 e0 3f	 and	 eax, 63			; 0000003fH
  00548	0f ba e8 07	 bts	 eax, 7
  0054c	b9 01 00 00 00	 mov	 ecx, 1
  00551	48 6b c9 03	 imul	 rcx, rcx, 3
  00555	88 44 0c 3c	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2828 :             write = 4;

  00559	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR write$[rsp], 4

; 2829 :         }

  00561	eb 11		 jmp	 SHORT $LN39@z900_conve
$LN38@z900_conve:

; 2830 :         else
; 2831 :         {
; 2832 :             regs->psw.cc = 2;

  00563	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0056b	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2833 :             return;

  0056f	e9 78 02 00 00	 jmp	 $LN1@z900_conve
$LN39@z900_conve:
$LN27@z900_conve:
$LN25@z900_conve:

; 2834 :         }
; 2835 : 
; 2836 :         /* Write and commit registers */
; 2837 :         ARCH_DEP(vstorec)(utf8, write - 1, dest, r1, regs);

  00574	8b 44 24 40	 mov	 eax, DWORD PTR write$[rsp]
  00578	ff c8		 dec	 eax
  0057a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00582	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00587	44 8b 4c 24 34	 mov	 r9d, DWORD PTR r1$[rsp]
  0058c	4c 8b 44 24 58	 mov	 r8, QWORD PTR dest$[rsp]
  00591	0f b6 d0	 movzx	 edx, al
  00594	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR utf8$[rsp]
  00599	e8 00 00 00 00	 call	 z900_vstorec
$LN9@z900_conve:

; 2838 :         SET_GR_A(r1, regs, (dest += write) & ADDRESS_MAXWRAP(regs));

  0059e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005a6	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  005ac	83 e0 01	 and	 eax, 1
  005af	85 c0		 test	 eax, eax
  005b1	74 46		 je	 SHORT $LN41@z900_conve
  005b3	48 63 44 24 40	 movsxd	 rax, DWORD PTR write$[rsp]
  005b8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  005bd	48 03 c8	 add	 rcx, rax
  005c0	48 8b c1	 mov	 rax, rcx
  005c3	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax
  005c8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005d0	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  005d7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  005dc	48 23 c8	 and	 rcx, rax
  005df	48 8b c1	 mov	 rax, rcx
  005e2	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r1$[rsp]
  005e7	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  005ef	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  005f7	eb 43		 jmp	 SHORT $LN42@z900_conve
$LN41@z900_conve:
  005f9	48 63 44 24 40	 movsxd	 rax, DWORD PTR write$[rsp]
  005fe	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00603	48 03 c8	 add	 rcx, rax
  00606	48 8b c1	 mov	 rax, rcx
  00609	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax
  0060e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00616	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0061d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00622	48 23 c8	 and	 rcx, rax
  00625	48 8b c1	 mov	 rax, rcx
  00628	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r1$[rsp]
  0062d	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00635	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN42@z900_conve:
  0063c	33 c0		 xor	 eax, eax
  0063e	85 c0		 test	 eax, eax
  00640	0f 85 58 ff ff
	ff		 jne	 $LN9@z900_conve
$LN12@z900_conve:

; 2839 :         SET_GR_A(r1 + 1, regs, destlen -= write);

  00646	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0064e	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00654	83 e0 01	 and	 eax, 1
  00657	85 c0		 test	 eax, eax
  00659	74 34		 je	 SHORT $LN43@z900_conve
  0065b	48 63 44 24 40	 movsxd	 rax, DWORD PTR write$[rsp]
  00660	48 8b 4c 24 48	 mov	 rcx, QWORD PTR destlen$[rsp]
  00665	48 2b c8	 sub	 rcx, rax
  00668	48 8b c1	 mov	 rax, rcx
  0066b	48 89 44 24 48	 mov	 QWORD PTR destlen$[rsp], rax
  00670	8b 44 24 34	 mov	 eax, DWORD PTR r1$[rsp]
  00674	ff c0		 inc	 eax
  00676	48 98		 cdqe
  00678	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00680	48 8b 54 24 48	 mov	 rdx, QWORD PTR destlen$[rsp]
  00685	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  0068d	eb 30		 jmp	 SHORT $LN44@z900_conve
$LN43@z900_conve:
  0068f	48 63 44 24 40	 movsxd	 rax, DWORD PTR write$[rsp]
  00694	48 8b 4c 24 48	 mov	 rcx, QWORD PTR destlen$[rsp]
  00699	48 2b c8	 sub	 rcx, rax
  0069c	48 8b c1	 mov	 rax, rcx
  0069f	48 89 44 24 48	 mov	 QWORD PTR destlen$[rsp], rax
  006a4	8b 44 24 34	 mov	 eax, DWORD PTR r1$[rsp]
  006a8	ff c0		 inc	 eax
  006aa	48 98		 cdqe
  006ac	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006b4	8b 54 24 48	 mov	 edx, DWORD PTR destlen$[rsp]
  006b8	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN44@z900_conve:
  006bf	33 c0		 xor	 eax, eax
  006c1	85 c0		 test	 eax, eax
  006c3	75 81		 jne	 SHORT $LN12@z900_conve
$LN15@z900_conve:

; 2840 :         SET_GR_A(r2, regs, (srce += 4) & ADDRESS_MAXWRAP(regs));

  006c5	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006cd	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  006d3	83 e0 01	 and	 eax, 1
  006d6	85 c0		 test	 eax, eax
  006d8	74 3f		 je	 SHORT $LN45@z900_conve
  006da	48 8b 44 24 60	 mov	 rax, QWORD PTR srce$[rsp]
  006df	48 83 c0 04	 add	 rax, 4
  006e3	48 89 44 24 60	 mov	 QWORD PTR srce$[rsp], rax
  006e8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006f0	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  006f7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR srce$[rsp]
  006fc	48 23 c8	 and	 rcx, rax
  006ff	48 8b c1	 mov	 rax, rcx
  00702	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00707	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0070f	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  00717	eb 3c		 jmp	 SHORT $LN46@z900_conve
$LN45@z900_conve:
  00719	48 8b 44 24 60	 mov	 rax, QWORD PTR srce$[rsp]
  0071e	48 83 c0 04	 add	 rax, 4
  00722	48 89 44 24 60	 mov	 QWORD PTR srce$[rsp], rax
  00727	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0072f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00736	48 8b 4c 24 60	 mov	 rcx, QWORD PTR srce$[rsp]
  0073b	48 23 c8	 and	 rcx, rax
  0073e	48 8b c1	 mov	 rax, rcx
  00741	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00746	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0074e	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN46@z900_conve:
  00755	33 c0		 xor	 eax, eax
  00757	85 c0		 test	 eax, eax
  00759	0f 85 66 ff ff
	ff		 jne	 $LN15@z900_conve
$LN18@z900_conve:

; 2841 :         SET_GR_A(r2 + 1, regs, srcelen -= 4);

  0075f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00767	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0076d	83 e0 01	 and	 eax, 1
  00770	85 c0		 test	 eax, eax
  00772	74 2d		 je	 SHORT $LN47@z900_conve
  00774	48 8b 44 24 68	 mov	 rax, QWORD PTR srcelen$[rsp]
  00779	48 83 e8 04	 sub	 rax, 4
  0077d	48 89 44 24 68	 mov	 QWORD PTR srcelen$[rsp], rax
  00782	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  00786	ff c0		 inc	 eax
  00788	48 98		 cdqe
  0078a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00792	48 8b 54 24 68	 mov	 rdx, QWORD PTR srcelen$[rsp]
  00797	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  0079f	eb 29		 jmp	 SHORT $LN48@z900_conve
$LN47@z900_conve:
  007a1	48 8b 44 24 68	 mov	 rax, QWORD PTR srcelen$[rsp]
  007a6	48 83 e8 04	 sub	 rax, 4
  007aa	48 89 44 24 68	 mov	 QWORD PTR srcelen$[rsp], rax
  007af	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  007b3	ff c0		 inc	 eax
  007b5	48 98		 cdqe
  007b7	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007bf	8b 54 24 68	 mov	 edx, DWORD PTR srcelen$[rsp]
  007c3	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN48@z900_conve:
  007ca	33 c0		 xor	 eax, eax
  007cc	85 c0		 test	 eax, eax
  007ce	75 8f		 jne	 SHORT $LN18@z900_conve

; 2842 : 
; 2843 :         xlated += 4;

  007d0	8b 44 24 50	 mov	 eax, DWORD PTR xlated$[rsp]
  007d4	83 c0 04	 add	 eax, 4
  007d7	89 44 24 50	 mov	 DWORD PTR xlated$[rsp], eax

; 2844 :     }

  007db	e9 1a fa ff ff	 jmp	 $LN5@z900_conve
$LN6@z900_conve:

; 2845 : 
; 2846 :     /* CPU determined number of characters reached */
; 2847 :     regs->psw.cc = 3;

  007e0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007e8	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@z900_conve:

; 2848 : }

  007ec	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  007f3	c3		 ret	 0
z900_convert_utf32_to_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf32$ = 48
zabcd$ = 52
r1$ = 56
r2$ = 60
utf16$ = 64
write$ = 68
destlen$ = 72
xlated$ = 80
dest$ = 88
srce$ = 96
srcelen$ = 104
i$1 = 112
tv145 = 120
tv169 = 128
inst$ = 160
regs$ = 168
z900_convert_utf32_to_utf16 PROC

; 2854 : {

$LN45:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 2855 :     VADR dest;                     /* Destination address            */
; 2856 :     GREG destlen;                  /* Destination length             */
; 2857 :     int r1;
; 2858 :     int r2;
; 2859 :     VADR srce;                     /* Source address                 */
; 2860 :     GREG srcelen;                  /* Source length                  */
; 2861 :     BYTE utf16[4];                 /* utf16 character(s)             */
; 2862 :     BYTE utf32[4];                 /* utf32 character(s)             */
; 2863 :     int write;                     /* Bytes written                  */
; 2864 :     int xlated;                    /* characters translated          */
; 2865 :     BYTE zabcd;                    /* Work value                     */
; 2866 : 
; 2867 :     RRE(inst, regs, r1, r2);

  00011	b8 01 00 00 00	 mov	 eax, 1
  00016	48 6b c0 03	 imul	 rax, rax, 3
  0001a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00022	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00026	89 44 24 70	 mov	 DWORD PTR i$1[rsp], eax
  0002a	8b 44 24 70	 mov	 eax, DWORD PTR i$1[rsp]
  0002e	83 e0 0f	 and	 eax, 15
  00031	89 44 24 3c	 mov	 DWORD PTR r2$[rsp], eax
  00035	8b 44 24 70	 mov	 eax, DWORD PTR i$1[rsp]
  00039	c1 f8 04	 sar	 eax, 4
  0003c	83 e0 0f	 and	 eax, 15
  0003f	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
$LN4@z900_conve:
  00043	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0004b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004f	48 83 c0 04	 add	 rax, 4
  00053	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0005b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0005f	33 c0		 xor	 eax, eax
  00061	83 f8 04	 cmp	 eax, 4
  00064	74 0f		 je	 SHORT $LN19@z900_conve
  00066	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006e	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN19@z900_conve:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 c8		 jne	 SHORT $LN4@z900_conve

; 2868 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );

  0007b	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  0007f	ff c0		 inc	 eax
  00081	8b 4c 24 38	 mov	 ecx, DWORD PTR r1$[rsp]
  00085	ff c1		 inc	 ecx
  00087	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0008b	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r2$[rsp]
  00090	44 8b c1	 mov	 r8d, ecx
  00093	8b 54 24 38	 mov	 edx, DWORD PTR r1$[rsp]
  00097	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0009f	e8 00 00 00 00	 call	 z900_per3_zero_lcheck2

; 2869 :     ODD2_CHECK(r1, r2, regs);

  000a4	8b 44 24 38	 mov	 eax, DWORD PTR r1$[rsp]
  000a8	83 e0 01	 and	 eax, 1
  000ab	85 c0		 test	 eax, eax
  000ad	75 0b		 jne	 SHORT $LN21@z900_conve
  000af	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 1b		 je	 SHORT $LN20@z900_conve
$LN21@z900_conve:
  000ba	ba 06 00 00 00	 mov	 edx, 6
  000bf	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000cf	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN20@z900_conve:

; 2870 : 
; 2871 :     /* Get paramaters */
; 2872 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000d5	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  000da	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000ea	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  000f1	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000f9	48 23 c2	 and	 rax, rdx
  000fc	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax

; 2873 :     destlen = GR_A(r1 + 1, regs);

  00101	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00109	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0010f	83 e0 01	 and	 eax, 1
  00112	85 c0		 test	 eax, eax
  00114	74 1f		 je	 SHORT $LN41@z900_conve
  00116	8b 44 24 38	 mov	 eax, DWORD PTR r1$[rsp]
  0011a	ff c0		 inc	 eax
  0011c	48 98		 cdqe
  0011e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00126	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0012e	48 89 44 24 78	 mov	 QWORD PTR tv145[rsp], rax
  00133	eb 1c		 jmp	 SHORT $LN42@z900_conve
$LN41@z900_conve:
  00135	8b 44 24 38	 mov	 eax, DWORD PTR r1$[rsp]
  00139	ff c0		 inc	 eax
  0013b	48 98		 cdqe
  0013d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00145	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0014c	48 89 44 24 78	 mov	 QWORD PTR tv145[rsp], rax
$LN42@z900_conve:
  00151	48 8b 44 24 78	 mov	 rax, QWORD PTR tv145[rsp]
  00156	48 89 44 24 48	 mov	 QWORD PTR destlen$[rsp], rax

; 2874 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  0015b	48 63 44 24 3c	 movsxd	 rax, DWORD PTR r2$[rsp]
  00160	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00168	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00170	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00177	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0017f	48 23 c2	 and	 rax, rdx
  00182	48 89 44 24 60	 mov	 QWORD PTR srce$[rsp], rax

; 2875 :     srcelen = GR_A(r2 + 1, regs);

  00187	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0018f	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00195	83 e0 01	 and	 eax, 1
  00198	85 c0		 test	 eax, eax
  0019a	74 22		 je	 SHORT $LN43@z900_conve
  0019c	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  001a0	ff c0		 inc	 eax
  001a2	48 98		 cdqe
  001a4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001ac	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001b4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv169[rsp], rax
  001bc	eb 1f		 jmp	 SHORT $LN44@z900_conve
$LN43@z900_conve:
  001be	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  001c2	ff c0		 inc	 eax
  001c4	48 98		 cdqe
  001c6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001ce	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001d5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv169[rsp], rax
$LN44@z900_conve:
  001dd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv169[rsp]
  001e5	48 89 44 24 68	 mov	 QWORD PTR srcelen$[rsp], rax

; 2876 : 
; 2877 :     /* Initialize number of translated charachters */
; 2878 :     xlated = 0;

  001ea	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0
$LN5@z900_conve:

; 2879 :     while(xlated < 4096)

  001f2	81 7c 24 50 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  001fa	0f 8d 61 04 00
	00		 jge	 $LN6@z900_conve

; 2880 :     {
; 2881 :         /* Check end of source or destination */
; 2882 :         if(srcelen < 4)

  00200	48 83 7c 24 68
	04		 cmp	 QWORD PTR srcelen$[rsp], 4
  00206	73 11		 jae	 SHORT $LN22@z900_conve

; 2883 :         {
; 2884 :             regs->psw.cc = 0;

  00208	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00210	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2885 :             return;

  00214	e9 54 04 00 00	 jmp	 $LN1@z900_conve
$LN22@z900_conve:

; 2886 :         }
; 2887 :         if(destlen < 2)

  00219	48 83 7c 24 48
	02		 cmp	 QWORD PTR destlen$[rsp], 2
  0021f	73 11		 jae	 SHORT $LN23@z900_conve

; 2888 :         {
; 2889 :             regs->psw.cc = 1;

  00221	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00229	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2890 :             return;

  0022d	e9 3b 04 00 00	 jmp	 $LN1@z900_conve
$LN23@z900_conve:

; 2891 :         }
; 2892 : 
; 2893 :         /* Get 4 bytes */
; 2894 :         ARCH_DEP(vfetchc)(utf32, 3, srce, r2, regs);

  00232	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0023a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023f	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r2$[rsp]
  00244	4c 8b 44 24 60	 mov	 r8, QWORD PTR srce$[rsp]
  00249	b2 03		 mov	 dl, 3
  0024b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR utf32$[rsp]
  00250	e8 00 00 00 00	 call	 z900_vfetchc

; 2895 : 
; 2896 :         if(utf32[0] != 0x00)

  00255	b8 01 00 00 00	 mov	 eax, 1
  0025a	48 6b c0 00	 imul	 rax, rax, 0
  0025e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00263	85 c0		 test	 eax, eax
  00265	74 16		 je	 SHORT $LN24@z900_conve

; 2897 :         {
; 2898 :             regs->psw.cc = 2;

  00267	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0026f	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2899 :             return;

  00273	e9 f5 03 00 00	 jmp	 $LN1@z900_conve

; 2900 :         }

  00278	e9 78 01 00 00	 jmp	 $LN25@z900_conve
$LN24@z900_conve:

; 2901 :         else if(utf32[1] == 0x00 && (utf32[2] <= 0xd7 || utf32[2] >= 0xdc))

  0027d	b8 01 00 00 00	 mov	 eax, 1
  00282	48 6b c0 01	 imul	 rax, rax, 1
  00286	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0028b	85 c0		 test	 eax, eax
  0028d	75 6d		 jne	 SHORT $LN26@z900_conve
  0028f	b8 01 00 00 00	 mov	 eax, 1
  00294	48 6b c0 02	 imul	 rax, rax, 2
  00298	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0029d	3d d7 00 00 00	 cmp	 eax, 215		; 000000d7H
  002a2	7e 15		 jle	 SHORT $LN28@z900_conve
  002a4	b8 01 00 00 00	 mov	 eax, 1
  002a9	48 6b c0 02	 imul	 rax, rax, 2
  002ad	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002b2	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  002b7	7c 43		 jl	 SHORT $LN26@z900_conve
$LN28@z900_conve:

; 2902 :         {
; 2903 :             /* xlate range 00000000-0000d7ff and 0000dc00-0000ffff */
; 2904 :             /* 00000000 00000000 abcdefgh ijklmnop -> abcdefgh ijklmnop */
; 2905 :             utf16[0] = utf32[2];

  002b9	b8 01 00 00 00	 mov	 eax, 1
  002be	48 6b c0 02	 imul	 rax, rax, 2
  002c2	b9 01 00 00 00	 mov	 ecx, 1
  002c7	48 6b c9 00	 imul	 rcx, rcx, 0
  002cb	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002d0	88 44 0c 40	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2906 :             utf16[1] = utf32[3];

  002d4	b8 01 00 00 00	 mov	 eax, 1
  002d9	48 6b c0 03	 imul	 rax, rax, 3
  002dd	b9 01 00 00 00	 mov	 ecx, 1
  002e2	48 6b c9 01	 imul	 rcx, rcx, 1
  002e6	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002eb	88 44 0c 40	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2907 :             write = 2;

  002ef	c7 44 24 44 02
	00 00 00	 mov	 DWORD PTR write$[rsp], 2

; 2908 :         }

  002f7	e9 f9 00 00 00	 jmp	 $LN27@z900_conve
$LN26@z900_conve:

; 2909 :         else if(utf32[1] >= 0x01 && utf32[1] <= 0x10)

  002fc	b8 01 00 00 00	 mov	 eax, 1
  00301	48 6b c0 01	 imul	 rax, rax, 1
  00305	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0030a	83 f8 01	 cmp	 eax, 1
  0030d	0f 8c d1 00 00
	00		 jl	 $LN29@z900_conve
  00313	b8 01 00 00 00	 mov	 eax, 1
  00318	48 6b c0 01	 imul	 rax, rax, 1
  0031c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00321	83 f8 10	 cmp	 eax, 16
  00324	0f 8f ba 00 00
	00		 jg	 $LN29@z900_conve

; 2910 :         {
; 2911 :             /* Check end of destination */
; 2912 :             if(destlen < 4)

  0032a	48 83 7c 24 48
	04		 cmp	 QWORD PTR destlen$[rsp], 4
  00330	73 11		 jae	 SHORT $LN31@z900_conve

; 2913 :             {
; 2914 :                 regs->psw.cc = 1;

  00332	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0033a	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2915 :                 return;

  0033e	e9 2a 03 00 00	 jmp	 $LN1@z900_conve
$LN31@z900_conve:

; 2916 :             }
; 2917 : 
; 2918 :             /* xlate range 00010000-0010ffff */
; 2919 :             /* 00000000 000uvwxy efghijkl mnopqrst -> 110110ab cdefghij 110111kl mnopqrst */
; 2920 :             /* 000zabcd = 000uvwxy - 1 */
; 2921 :             zabcd = (utf32[1] - 1) & 0x0f;

  00343	b8 01 00 00 00	 mov	 eax, 1
  00348	48 6b c0 01	 imul	 rax, rax, 1
  0034c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00351	ff c8		 dec	 eax
  00353	83 e0 0f	 and	 eax, 15
  00356	88 44 24 34	 mov	 BYTE PTR zabcd$[rsp], al

; 2922 :             utf16[0] = 0xd8 | (zabcd >> 2);

  0035a	0f b6 44 24 34	 movzx	 eax, BYTE PTR zabcd$[rsp]
  0035f	c1 f8 02	 sar	 eax, 2
  00362	0d d8 00 00 00	 or	 eax, 216		; 000000d8H
  00367	b9 01 00 00 00	 mov	 ecx, 1
  0036c	48 6b c9 00	 imul	 rcx, rcx, 0
  00370	88 44 0c 40	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2923 :             utf16[1] = (zabcd << 6) | (utf32[2] >> 2);

  00374	0f b6 44 24 34	 movzx	 eax, BYTE PTR zabcd$[rsp]
  00379	c1 e0 06	 shl	 eax, 6
  0037c	b9 01 00 00 00	 mov	 ecx, 1
  00381	48 6b c9 02	 imul	 rcx, rcx, 2
  00385	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  0038a	c1 f9 02	 sar	 ecx, 2
  0038d	0b c1		 or	 eax, ecx
  0038f	b9 01 00 00 00	 mov	 ecx, 1
  00394	48 6b c9 01	 imul	 rcx, rcx, 1
  00398	88 44 0c 40	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2924 :             utf16[2] = 0xdc | (utf32[2] & 0x03);

  0039c	b8 01 00 00 00	 mov	 eax, 1
  003a1	48 6b c0 02	 imul	 rax, rax, 2
  003a5	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  003aa	83 e0 03	 and	 eax, 3
  003ad	0d dc 00 00 00	 or	 eax, 220		; 000000dcH
  003b2	b9 01 00 00 00	 mov	 ecx, 1
  003b7	48 6b c9 02	 imul	 rcx, rcx, 2
  003bb	88 44 0c 40	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2925 :             utf16[3] = utf32[3];

  003bf	b8 01 00 00 00	 mov	 eax, 1
  003c4	48 6b c0 03	 imul	 rax, rax, 3
  003c8	b9 01 00 00 00	 mov	 ecx, 1
  003cd	48 6b c9 03	 imul	 rcx, rcx, 3
  003d1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  003d6	88 44 0c 40	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2926 :             write = 4;

  003da	c7 44 24 44 04
	00 00 00	 mov	 DWORD PTR write$[rsp], 4

; 2927 :         }

  003e2	eb 11		 jmp	 SHORT $LN30@z900_conve
$LN29@z900_conve:

; 2928 :         else
; 2929 :         {
; 2930 :             regs->psw.cc = 2;

  003e4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003ec	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2931 :             return;

  003f0	e9 78 02 00 00	 jmp	 $LN1@z900_conve
$LN30@z900_conve:
$LN27@z900_conve:
$LN25@z900_conve:

; 2932 :         }
; 2933 : 
; 2934 :         /* Write and commit registers */
; 2935 :         ARCH_DEP(vstorec)(utf16, write - 1, dest, r1, regs);

  003f5	8b 44 24 44	 mov	 eax, DWORD PTR write$[rsp]
  003f9	ff c8		 dec	 eax
  003fb	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00403	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00408	44 8b 4c 24 38	 mov	 r9d, DWORD PTR r1$[rsp]
  0040d	4c 8b 44 24 58	 mov	 r8, QWORD PTR dest$[rsp]
  00412	0f b6 d0	 movzx	 edx, al
  00415	48 8d 4c 24 40	 lea	 rcx, QWORD PTR utf16$[rsp]
  0041a	e8 00 00 00 00	 call	 z900_vstorec
$LN9@z900_conve:

; 2936 :         SET_GR_A(r1, regs, (dest += write) & ADDRESS_MAXWRAP(regs));

  0041f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00427	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0042d	83 e0 01	 and	 eax, 1
  00430	85 c0		 test	 eax, eax
  00432	74 46		 je	 SHORT $LN32@z900_conve
  00434	48 63 44 24 44	 movsxd	 rax, DWORD PTR write$[rsp]
  00439	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  0043e	48 03 c8	 add	 rcx, rax
  00441	48 8b c1	 mov	 rax, rcx
  00444	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax
  00449	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00451	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00458	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  0045d	48 23 c8	 and	 rcx, rax
  00460	48 8b c1	 mov	 rax, rcx
  00463	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00468	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00470	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  00478	eb 43		 jmp	 SHORT $LN33@z900_conve
$LN32@z900_conve:
  0047a	48 63 44 24 44	 movsxd	 rax, DWORD PTR write$[rsp]
  0047f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00484	48 03 c8	 add	 rcx, rax
  00487	48 8b c1	 mov	 rax, rcx
  0048a	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax
  0048f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00497	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0049e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  004a3	48 23 c8	 and	 rcx, rax
  004a6	48 8b c1	 mov	 rax, rcx
  004a9	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r1$[rsp]
  004ae	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004b6	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN33@z900_conve:
  004bd	33 c0		 xor	 eax, eax
  004bf	85 c0		 test	 eax, eax
  004c1	0f 85 58 ff ff
	ff		 jne	 $LN9@z900_conve
$LN12@z900_conve:

; 2937 :         SET_GR_A(r1 + 1, regs, destlen -= write);

  004c7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004cf	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  004d5	83 e0 01	 and	 eax, 1
  004d8	85 c0		 test	 eax, eax
  004da	74 34		 je	 SHORT $LN34@z900_conve
  004dc	48 63 44 24 44	 movsxd	 rax, DWORD PTR write$[rsp]
  004e1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR destlen$[rsp]
  004e6	48 2b c8	 sub	 rcx, rax
  004e9	48 8b c1	 mov	 rax, rcx
  004ec	48 89 44 24 48	 mov	 QWORD PTR destlen$[rsp], rax
  004f1	8b 44 24 38	 mov	 eax, DWORD PTR r1$[rsp]
  004f5	ff c0		 inc	 eax
  004f7	48 98		 cdqe
  004f9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00501	48 8b 54 24 48	 mov	 rdx, QWORD PTR destlen$[rsp]
  00506	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  0050e	eb 30		 jmp	 SHORT $LN35@z900_conve
$LN34@z900_conve:
  00510	48 63 44 24 44	 movsxd	 rax, DWORD PTR write$[rsp]
  00515	48 8b 4c 24 48	 mov	 rcx, QWORD PTR destlen$[rsp]
  0051a	48 2b c8	 sub	 rcx, rax
  0051d	48 8b c1	 mov	 rax, rcx
  00520	48 89 44 24 48	 mov	 QWORD PTR destlen$[rsp], rax
  00525	8b 44 24 38	 mov	 eax, DWORD PTR r1$[rsp]
  00529	ff c0		 inc	 eax
  0052b	48 98		 cdqe
  0052d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00535	8b 54 24 48	 mov	 edx, DWORD PTR destlen$[rsp]
  00539	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN35@z900_conve:
  00540	33 c0		 xor	 eax, eax
  00542	85 c0		 test	 eax, eax
  00544	75 81		 jne	 SHORT $LN12@z900_conve
$LN15@z900_conve:

; 2938 :         SET_GR_A(r2, regs, (srce += 4) & ADDRESS_MAXWRAP(regs));

  00546	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0054e	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00554	83 e0 01	 and	 eax, 1
  00557	85 c0		 test	 eax, eax
  00559	74 3f		 je	 SHORT $LN36@z900_conve
  0055b	48 8b 44 24 60	 mov	 rax, QWORD PTR srce$[rsp]
  00560	48 83 c0 04	 add	 rax, 4
  00564	48 89 44 24 60	 mov	 QWORD PTR srce$[rsp], rax
  00569	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00571	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00578	48 8b 4c 24 60	 mov	 rcx, QWORD PTR srce$[rsp]
  0057d	48 23 c8	 and	 rcx, rax
  00580	48 8b c1	 mov	 rax, rcx
  00583	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00588	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00590	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  00598	eb 3c		 jmp	 SHORT $LN37@z900_conve
$LN36@z900_conve:
  0059a	48 8b 44 24 60	 mov	 rax, QWORD PTR srce$[rsp]
  0059f	48 83 c0 04	 add	 rax, 4
  005a3	48 89 44 24 60	 mov	 QWORD PTR srce$[rsp], rax
  005a8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005b0	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  005b7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR srce$[rsp]
  005bc	48 23 c8	 and	 rcx, rax
  005bf	48 8b c1	 mov	 rax, rcx
  005c2	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r2$[rsp]
  005c7	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  005cf	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN37@z900_conve:
  005d6	33 c0		 xor	 eax, eax
  005d8	85 c0		 test	 eax, eax
  005da	0f 85 66 ff ff
	ff		 jne	 $LN15@z900_conve
$LN18@z900_conve:

; 2939 :         SET_GR_A(r2 + 1, regs, srcelen -= 4);

  005e0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005e8	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  005ee	83 e0 01	 and	 eax, 1
  005f1	85 c0		 test	 eax, eax
  005f3	74 2d		 je	 SHORT $LN38@z900_conve
  005f5	48 8b 44 24 68	 mov	 rax, QWORD PTR srcelen$[rsp]
  005fa	48 83 e8 04	 sub	 rax, 4
  005fe	48 89 44 24 68	 mov	 QWORD PTR srcelen$[rsp], rax
  00603	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  00607	ff c0		 inc	 eax
  00609	48 98		 cdqe
  0060b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00613	48 8b 54 24 68	 mov	 rdx, QWORD PTR srcelen$[rsp]
  00618	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00620	eb 29		 jmp	 SHORT $LN39@z900_conve
$LN38@z900_conve:
  00622	48 8b 44 24 68	 mov	 rax, QWORD PTR srcelen$[rsp]
  00627	48 83 e8 04	 sub	 rax, 4
  0062b	48 89 44 24 68	 mov	 QWORD PTR srcelen$[rsp], rax
  00630	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  00634	ff c0		 inc	 eax
  00636	48 98		 cdqe
  00638	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00640	8b 54 24 68	 mov	 edx, DWORD PTR srcelen$[rsp]
  00644	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN39@z900_conve:
  0064b	33 c0		 xor	 eax, eax
  0064d	85 c0		 test	 eax, eax
  0064f	75 8f		 jne	 SHORT $LN18@z900_conve

; 2940 : 
; 2941 :         xlated += 4;

  00651	8b 44 24 50	 mov	 eax, DWORD PTR xlated$[rsp]
  00655	83 c0 04	 add	 eax, 4
  00658	89 44 24 50	 mov	 DWORD PTR xlated$[rsp], eax

; 2942 :     }

  0065c	e9 91 fb ff ff	 jmp	 $LN5@z900_conve
$LN6@z900_conve:

; 2943 : 
; 2944 :     /* CPU determined number of characters reached */
; 2945 :     regs->psw.cc = 3;

  00661	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00669	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@z900_conve:

; 2946 : }

  0066d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00674	c3		 ret	 0
z900_convert_utf32_to_utf16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf16$ = 48
r2$ = 52
wfc$ = 56
r1$ = 60
uvwxy$ = 64
utf32$ = 68
read$ = 72
srce$ = 80
srcelen$ = 88
temp$1 = 96
xlated$ = 100
dest$ = 104
destlen$ = 112
m3$ = 120
tv148 = 128
tv172 = 136
$T2 = 144
$T3 = 152
inst$ = 176
regs$ = 184
z900_convert_utf16_to_utf32 PROC

; 2603 : {

$LN50:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 2604 :     VADR dest;                     /* Destination address            */
; 2605 :     GREG destlen;                  /* Destination length             */
; 2606 :     int r1;
; 2607 :     int r2;
; 2608 :     int m3;                        /* Mask                           */
; 2609 :     int read;                      /* Bytes read                     */
; 2610 :     VADR srce;                     /* Source address                 */
; 2611 :     GREG srcelen;                  /* Source length                  */
; 2612 :     BYTE utf16[4];                 /* utf16 character(s)             */
; 2613 :     BYTE utf32[4];                 /* utf328 character(s)            */
; 2614 :     BYTE uvwxy;                    /* Work value                     */
; 2615 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2616 :     bool wfc;                      /* Well-Formedness-Checking (W)   */
; 2617 : #endif
; 2618 :     int xlated;                    /* characters translated          */
; 2619 : 
; 2620 :     RRF_M(inst, regs, r1, r2, m3);

  00011	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00019	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 _byteswap_ulong
  00025	89 44 24 60	 mov	 DWORD PTR temp$1[rsp], eax
  00029	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  0002d	83 e0 0f	 and	 eax, 15
  00030	89 44 24 34	 mov	 DWORD PTR r2$[rsp], eax
  00034	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00038	c1 e8 04	 shr	 eax, 4
  0003b	83 e0 0f	 and	 eax, 15
  0003e	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
  00042	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	c1 e8 0c	 shr	 eax, 12
  00049	83 e0 0f	 and	 eax, 15
  0004c	89 44 24 78	 mov	 DWORD PTR m3$[rsp], eax
$LN4@z900_conve:
  00050	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00058	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005c	48 83 c0 04	 add	 rax, 4
  00060	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00068	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0006c	33 c0		 xor	 eax, eax
  0006e	83 f8 04	 cmp	 eax, 4
  00071	74 0f		 je	 SHORT $LN19@z900_conve
  00073	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0007b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN19@z900_conve:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 c8		 jne	 SHORT $LN4@z900_conve

; 2621 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );

  00088	8b 44 24 34	 mov	 eax, DWORD PTR r2$[rsp]
  0008c	ff c0		 inc	 eax
  0008e	8b 4c 24 3c	 mov	 ecx, DWORD PTR r1$[rsp]
  00092	ff c1		 inc	 ecx
  00094	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00098	44 8b 4c 24 34	 mov	 r9d, DWORD PTR r2$[rsp]
  0009d	44 8b c1	 mov	 r8d, ecx
  000a0	8b 54 24 3c	 mov	 edx, DWORD PTR r1$[rsp]
  000a4	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ac	e8 00 00 00 00	 call	 z900_per3_zero_lcheck2

; 2622 :     ODD2_CHECK(r1, r2, regs);

  000b1	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  000b5	83 e0 01	 and	 eax, 1
  000b8	85 c0		 test	 eax, eax
  000ba	75 0b		 jne	 SHORT $LN21@z900_conve
  000bc	8b 44 24 34	 mov	 eax, DWORD PTR r2$[rsp]
  000c0	83 e0 01	 and	 eax, 1
  000c3	85 c0		 test	 eax, eax
  000c5	74 1b		 je	 SHORT $LN20@z900_conve
$LN21@z900_conve:
  000c7	ba 06 00 00 00	 mov	 edx, 6
  000cc	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000dc	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN20@z900_conve:

; 2623 : 
; 2624 :     /* Get paramaters */
; 2625 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000e2	48 63 44 24 3c	 movsxd	 rax, DWORD PTR r1$[rsp]
  000e7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ef	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000f7	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  000fe	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00106	48 23 c2	 and	 rax, rdx
  00109	48 89 44 24 68	 mov	 QWORD PTR dest$[rsp], rax

; 2626 :     destlen = GR_A(r1 + 1, regs);

  0010e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00116	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0011c	83 e0 01	 and	 eax, 1
  0011f	85 c0		 test	 eax, eax
  00121	74 22		 je	 SHORT $LN42@z900_conve
  00123	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  00127	ff c0		 inc	 eax
  00129	48 98		 cdqe
  0012b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00133	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0013b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv148[rsp], rax
  00143	eb 1f		 jmp	 SHORT $LN43@z900_conve
$LN42@z900_conve:
  00145	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  00149	ff c0		 inc	 eax
  0014b	48 98		 cdqe
  0014d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00155	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0015c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv148[rsp], rax
$LN43@z900_conve:
  00164	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv148[rsp]
  0016c	48 89 44 24 70	 mov	 QWORD PTR destlen$[rsp], rax

; 2627 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  00171	48 63 44 24 34	 movsxd	 rax, DWORD PTR r2$[rsp]
  00176	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0017e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00186	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  0018d	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00195	48 23 c2	 and	 rax, rdx
  00198	48 89 44 24 50	 mov	 QWORD PTR srce$[rsp], rax

; 2628 :     srcelen = GR_A(r2 + 1, regs);

  0019d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a5	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  001ab	83 e0 01	 and	 eax, 1
  001ae	85 c0		 test	 eax, eax
  001b0	74 22		 je	 SHORT $LN44@z900_conve
  001b2	8b 44 24 34	 mov	 eax, DWORD PTR r2$[rsp]
  001b6	ff c0		 inc	 eax
  001b8	48 98		 cdqe
  001ba	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001c2	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001ca	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
  001d2	eb 1f		 jmp	 SHORT $LN45@z900_conve
$LN44@z900_conve:
  001d4	8b 44 24 34	 mov	 eax, DWORD PTR r2$[rsp]
  001d8	ff c0		 inc	 eax
  001da	48 98		 cdqe
  001dc	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001e4	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001eb	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
$LN45@z900_conve:
  001f3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv172[rsp]
  001fb	48 89 44 24 58	 mov	 QWORD PTR srcelen$[rsp], rax

; 2629 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2630 :     if ((m3 & 0x01) && FACILITY_ENABLED( 030_ETF3_ENHANCEMENT, regs ))

  00200	8b 44 24 78	 mov	 eax, DWORD PTR m3$[rsp]
  00204	83 e0 01	 and	 eax, 1
  00207	85 c0		 test	 eax, eax
  00209	74 27		 je	 SHORT $LN22@z900_conve
  0020b	b8 01 00 00 00	 mov	 eax, 1
  00210	48 6b c0 03	 imul	 rax, rax, 3
  00214	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0021c	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  00224	83 e0 02	 and	 eax, 2
  00227	85 c0		 test	 eax, eax
  00229	74 07		 je	 SHORT $LN22@z900_conve

; 2631 :         wfc = true;

  0022b	c6 44 24 38 01	 mov	 BYTE PTR wfc$[rsp], 1
  00230	eb 05		 jmp	 SHORT $LN23@z900_conve
$LN22@z900_conve:

; 2632 :     else
; 2633 :         wfc = false;

  00232	c6 44 24 38 00	 mov	 BYTE PTR wfc$[rsp], 0
$LN23@z900_conve:

; 2634 : #endif
; 2635 : 
; 2636 :     /* Every valid utf-32 starts with 0x00 */
; 2637 :     utf32[0] = 0x00;

  00237	b8 01 00 00 00	 mov	 eax, 1
  0023c	48 6b c0 00	 imul	 rax, rax, 0
  00240	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  00248	48 83 bc 24 90
	00 00 00 04	 cmp	 QWORD PTR $T2[rsp], 4
  00251	73 02		 jae	 SHORT $LN46@z900_conve
  00253	eb 05		 jmp	 SHORT $LN47@z900_conve
$LN46@z900_conve:
  00255	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN47@z900_conve:
  0025a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  00262	c6 44 04 44 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2638 : 
; 2639 :     /* Initialize number of translated charachters */
; 2640 :     xlated = 0;

  00267	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0
$LN5@z900_conve:

; 2641 :     while(xlated < 4096)

  0026f	81 7c 24 64 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  00277	0f 8d 76 04 00
	00		 jge	 $LN6@z900_conve

; 2642 :     {
; 2643 :         /* Check end of source or destination */
; 2644 :         if(srcelen < 2)

  0027d	48 83 7c 24 58
	02		 cmp	 QWORD PTR srcelen$[rsp], 2
  00283	73 11		 jae	 SHORT $LN24@z900_conve

; 2645 :         {
; 2646 :             regs->psw.cc = 0;

  00285	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0028d	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2647 :             return;

  00291	e9 69 04 00 00	 jmp	 $LN1@z900_conve
$LN24@z900_conve:

; 2648 :         }
; 2649 :         if(destlen < 4)

  00296	48 83 7c 24 70
	04		 cmp	 QWORD PTR destlen$[rsp], 4
  0029c	73 11		 jae	 SHORT $LN25@z900_conve

; 2650 :         {
; 2651 :             regs->psw.cc = 1;

  0029e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002a6	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2652 :             return;

  002aa	e9 50 04 00 00	 jmp	 $LN1@z900_conve
$LN25@z900_conve:

; 2653 :         }
; 2654 : 
; 2655 :         /* Fetch 2 bytes */
; 2656 :         ARCH_DEP(vfetchc)(utf16, 1, srce, r2, regs);

  002af	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002bc	44 8b 4c 24 34	 mov	 r9d, DWORD PTR r2$[rsp]
  002c1	4c 8b 44 24 50	 mov	 r8, QWORD PTR srce$[rsp]
  002c6	b2 01		 mov	 dl, 1
  002c8	48 8d 4c 24 30	 lea	 rcx, QWORD PTR utf16$[rsp]
  002cd	e8 00 00 00 00	 call	 z900_vfetchc

; 2657 :         if(utf16[0] <= 0xd7 || utf16[0] >= 0xdc)

  002d2	b8 01 00 00 00	 mov	 eax, 1
  002d7	48 6b c0 00	 imul	 rax, rax, 0
  002db	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  002e0	3d d7 00 00 00	 cmp	 eax, 215		; 000000d7H
  002e5	7e 15		 jle	 SHORT $LN28@z900_conve
  002e7	b8 01 00 00 00	 mov	 eax, 1
  002ec	48 6b c0 00	 imul	 rax, rax, 0
  002f0	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  002f5	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  002fa	7c 6e		 jl	 SHORT $LN26@z900_conve
$LN28@z900_conve:

; 2658 :         {
; 2659 :             /* xlate range 0000-d7fff and dc00-ffff */
; 2660 :             /* abcdefgh ijklmnop -> 00000000 00000000 abcdefgh ijklmnop */
; 2661 :             utf32[1] = 0x00;

  002fc	48 c7 84 24 98
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T3[rsp], 1
  00308	48 83 bc 24 98
	00 00 00 04	 cmp	 QWORD PTR $T3[rsp], 4
  00311	73 02		 jae	 SHORT $LN48@z900_conve
  00313	eb 05		 jmp	 SHORT $LN49@z900_conve
$LN48@z900_conve:
  00315	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN49@z900_conve:
  0031a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  00322	c6 44 04 44 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2662 :             utf32[2] = utf16[0];

  00327	b8 01 00 00 00	 mov	 eax, 1
  0032c	48 6b c0 00	 imul	 rax, rax, 0
  00330	b9 01 00 00 00	 mov	 ecx, 1
  00335	48 6b c9 02	 imul	 rcx, rcx, 2
  00339	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  0033e	88 44 0c 44	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2663 :             utf32[3] = utf16[1];

  00342	b8 01 00 00 00	 mov	 eax, 1
  00347	48 6b c0 01	 imul	 rax, rax, 1
  0034b	b9 01 00 00 00	 mov	 ecx, 1
  00350	48 6b c9 03	 imul	 rcx, rcx, 3
  00354	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00359	88 44 0c 44	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2664 :             read = 2;

  0035d	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR read$[rsp], 2

; 2665 :         }

  00365	e9 1f 01 00 00	 jmp	 $LN27@z900_conve
$LN26@z900_conve:

; 2666 :         else
; 2667 :         {
; 2668 :             /* Check end of source */
; 2669 :             if(srcelen < 4)

  0036a	48 83 7c 24 58
	04		 cmp	 QWORD PTR srcelen$[rsp], 4
  00370	73 11		 jae	 SHORT $LN29@z900_conve

; 2670 :             {
; 2671 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  00372	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0037a	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2672 :                 return;

  0037e	e9 7c 03 00 00	 jmp	 $LN1@z900_conve
$LN29@z900_conve:

; 2673 :             }
; 2674 : 
; 2675 :             /* Fetch another 2 bytes */
; 2676 :             ARCH_DEP(vfetchc)(&utf16[2], 1, srce, r2, regs);

  00383	b8 01 00 00 00	 mov	 eax, 1
  00388	48 6b c0 02	 imul	 rax, rax, 2
  0038c	48 8d 44 04 30	 lea	 rax, QWORD PTR utf16$[rsp+rax]
  00391	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00399	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0039e	44 8b 4c 24 34	 mov	 r9d, DWORD PTR r2$[rsp]
  003a3	4c 8b 44 24 50	 mov	 r8, QWORD PTR srce$[rsp]
  003a8	b2 01		 mov	 dl, 1
  003aa	48 8b c8	 mov	 rcx, rax
  003ad	e8 00 00 00 00	 call	 z900_vfetchc

; 2677 : 
; 2678 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2679 :             /* WellFormednessChecking */
; 2680 :             if (wfc)

  003b2	0f b6 44 24 38	 movzx	 eax, BYTE PTR wfc$[rsp]
  003b7	85 c0		 test	 eax, eax
  003b9	74 3b		 je	 SHORT $LN30@z900_conve

; 2681 :             {
; 2682 :                 if (utf16[2] < 0xdc || utf16[2] > 0xdf)

  003bb	b8 01 00 00 00	 mov	 eax, 1
  003c0	48 6b c0 02	 imul	 rax, rax, 2
  003c4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  003c9	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  003ce	7c 15		 jl	 SHORT $LN32@z900_conve
  003d0	b8 01 00 00 00	 mov	 eax, 1
  003d5	48 6b c0 02	 imul	 rax, rax, 2
  003d9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  003de	3d df 00 00 00	 cmp	 eax, 223		; 000000dfH
  003e3	7e 11		 jle	 SHORT $LN31@z900_conve
$LN32@z900_conve:

; 2683 :                 {
; 2684 :                     regs->psw.cc = 2;

  003e5	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003ed	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2685 :                     return;

  003f1	e9 09 03 00 00	 jmp	 $LN1@z900_conve
$LN31@z900_conve:
$LN30@z900_conve:

; 2686 :                 }
; 2687 :             }
; 2688 : #endif
; 2689 :             /* xlate range d800-dbff */
; 2690 :             /* 110110ab cdefghij 110111kl mnopqrst -> 00000000 000uvwxy efghijkl mnopqrst */
; 2691 :             /* 000uvwxy = 0000abcde + 1 */
; 2692 :             uvwxy = (((utf16[0] & 0x03) << 2) | (utf16[1] >> 6)) + 1;

  003f6	b8 01 00 00 00	 mov	 eax, 1
  003fb	48 6b c0 00	 imul	 rax, rax, 0
  003ff	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00404	83 e0 03	 and	 eax, 3
  00407	c1 e0 02	 shl	 eax, 2
  0040a	b9 01 00 00 00	 mov	 ecx, 1
  0040f	48 6b c9 01	 imul	 rcx, rcx, 1
  00413	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf16$[rsp+rcx]
  00418	c1 f9 06	 sar	 ecx, 6
  0041b	0b c1		 or	 eax, ecx
  0041d	ff c0		 inc	 eax
  0041f	88 44 24 40	 mov	 BYTE PTR uvwxy$[rsp], al

; 2693 :             utf32[1] = uvwxy;

  00423	b8 01 00 00 00	 mov	 eax, 1
  00428	48 6b c0 01	 imul	 rax, rax, 1
  0042c	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR uvwxy$[rsp]
  00431	88 4c 04 44	 mov	 BYTE PTR utf32$[rsp+rax], cl

; 2694 :             utf32[2] = (utf16[1] << 2) | (utf16[2] & 0x03);

  00435	b8 01 00 00 00	 mov	 eax, 1
  0043a	48 6b c0 01	 imul	 rax, rax, 1
  0043e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00443	c1 e0 02	 shl	 eax, 2
  00446	b9 01 00 00 00	 mov	 ecx, 1
  0044b	48 6b c9 02	 imul	 rcx, rcx, 2
  0044f	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf16$[rsp+rcx]
  00454	83 e1 03	 and	 ecx, 3
  00457	0b c1		 or	 eax, ecx
  00459	b9 01 00 00 00	 mov	 ecx, 1
  0045e	48 6b c9 02	 imul	 rcx, rcx, 2
  00462	88 44 0c 44	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2695 :             utf32[3] = utf16[3];

  00466	b8 01 00 00 00	 mov	 eax, 1
  0046b	48 6b c0 03	 imul	 rax, rax, 3
  0046f	b9 01 00 00 00	 mov	 ecx, 1
  00474	48 6b c9 03	 imul	 rcx, rcx, 3
  00478	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  0047d	88 44 0c 44	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2696 :             read = 4;

  00481	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR read$[rsp], 4
$LN27@z900_conve:

; 2697 :         }
; 2698 : 
; 2699 :         /* Write and commit registers */
; 2700 :         ARCH_DEP(vstorec)(utf32, 3, dest, r1, regs);

  00489	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00491	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00496	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r1$[rsp]
  0049b	4c 8b 44 24 68	 mov	 r8, QWORD PTR dest$[rsp]
  004a0	b2 03		 mov	 dl, 3
  004a2	48 8d 4c 24 44	 lea	 rcx, QWORD PTR utf32$[rsp]
  004a7	e8 00 00 00 00	 call	 z900_vstorec
$LN9@z900_conve:

; 2701 :         SET_GR_A(r1, regs, (dest += 4) & ADDRESS_MAXWRAP(regs));

  004ac	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004b4	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  004ba	83 e0 01	 and	 eax, 1
  004bd	85 c0		 test	 eax, eax
  004bf	74 3f		 je	 SHORT $LN33@z900_conve
  004c1	48 8b 44 24 68	 mov	 rax, QWORD PTR dest$[rsp]
  004c6	48 83 c0 04	 add	 rax, 4
  004ca	48 89 44 24 68	 mov	 QWORD PTR dest$[rsp], rax
  004cf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004d7	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  004de	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest$[rsp]
  004e3	48 23 c8	 and	 rcx, rax
  004e6	48 8b c1	 mov	 rax, rcx
  004e9	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  004ee	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004f6	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  004fe	eb 3c		 jmp	 SHORT $LN34@z900_conve
$LN33@z900_conve:
  00500	48 8b 44 24 68	 mov	 rax, QWORD PTR dest$[rsp]
  00505	48 83 c0 04	 add	 rax, 4
  00509	48 89 44 24 68	 mov	 QWORD PTR dest$[rsp], rax
  0050e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00516	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0051d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dest$[rsp]
  00522	48 23 c8	 and	 rcx, rax
  00525	48 8b c1	 mov	 rax, rcx
  00528	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  0052d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00535	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN34@z900_conve:
  0053c	33 c0		 xor	 eax, eax
  0053e	85 c0		 test	 eax, eax
  00540	0f 85 66 ff ff
	ff		 jne	 $LN9@z900_conve
$LN12@z900_conve:

; 2702 :         SET_GR_A(r1 + 1, regs, destlen -= 4);

  00546	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0054e	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00554	83 e0 01	 and	 eax, 1
  00557	85 c0		 test	 eax, eax
  00559	74 2d		 je	 SHORT $LN35@z900_conve
  0055b	48 8b 44 24 70	 mov	 rax, QWORD PTR destlen$[rsp]
  00560	48 83 e8 04	 sub	 rax, 4
  00564	48 89 44 24 70	 mov	 QWORD PTR destlen$[rsp], rax
  00569	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  0056d	ff c0		 inc	 eax
  0056f	48 98		 cdqe
  00571	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00579	48 8b 54 24 70	 mov	 rdx, QWORD PTR destlen$[rsp]
  0057e	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00586	eb 29		 jmp	 SHORT $LN36@z900_conve
$LN35@z900_conve:
  00588	48 8b 44 24 70	 mov	 rax, QWORD PTR destlen$[rsp]
  0058d	48 83 e8 04	 sub	 rax, 4
  00591	48 89 44 24 70	 mov	 QWORD PTR destlen$[rsp], rax
  00596	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  0059a	ff c0		 inc	 eax
  0059c	48 98		 cdqe
  0059e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005a6	8b 54 24 70	 mov	 edx, DWORD PTR destlen$[rsp]
  005aa	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN36@z900_conve:
  005b1	33 c0		 xor	 eax, eax
  005b3	85 c0		 test	 eax, eax
  005b5	75 8f		 jne	 SHORT $LN12@z900_conve
$LN15@z900_conve:

; 2703 :         SET_GR_A(r2, regs, (srce += read) & ADDRESS_MAXWRAP(regs));

  005b7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005bf	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  005c5	83 e0 01	 and	 eax, 1
  005c8	85 c0		 test	 eax, eax
  005ca	74 46		 je	 SHORT $LN37@z900_conve
  005cc	48 63 44 24 48	 movsxd	 rax, DWORD PTR read$[rsp]
  005d1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR srce$[rsp]
  005d6	48 03 c8	 add	 rcx, rax
  005d9	48 8b c1	 mov	 rax, rcx
  005dc	48 89 44 24 50	 mov	 QWORD PTR srce$[rsp], rax
  005e1	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005e9	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  005f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR srce$[rsp]
  005f5	48 23 c8	 and	 rcx, rax
  005f8	48 8b c1	 mov	 rax, rcx
  005fb	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00600	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00608	48 89 84 ca 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx*8+640], rax
  00610	eb 43		 jmp	 SHORT $LN38@z900_conve
$LN37@z900_conve:
  00612	48 63 44 24 48	 movsxd	 rax, DWORD PTR read$[rsp]
  00617	48 8b 4c 24 50	 mov	 rcx, QWORD PTR srce$[rsp]
  0061c	48 03 c8	 add	 rcx, rax
  0061f	48 8b c1	 mov	 rax, rcx
  00622	48 89 44 24 50	 mov	 QWORD PTR srce$[rsp], rax
  00627	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0062f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00636	48 8b 4c 24 50	 mov	 rcx, QWORD PTR srce$[rsp]
  0063b	48 23 c8	 and	 rcx, rax
  0063e	48 8b c1	 mov	 rax, rcx
  00641	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00646	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0064e	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN38@z900_conve:
  00655	33 c0		 xor	 eax, eax
  00657	85 c0		 test	 eax, eax
  00659	0f 85 58 ff ff
	ff		 jne	 $LN15@z900_conve
$LN18@z900_conve:

; 2704 :         SET_GR_A(r2 + 1, regs, srcelen -= read);

  0065f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00667	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0066d	83 e0 01	 and	 eax, 1
  00670	85 c0		 test	 eax, eax
  00672	74 34		 je	 SHORT $LN39@z900_conve
  00674	48 63 44 24 48	 movsxd	 rax, DWORD PTR read$[rsp]
  00679	48 8b 4c 24 58	 mov	 rcx, QWORD PTR srcelen$[rsp]
  0067e	48 2b c8	 sub	 rcx, rax
  00681	48 8b c1	 mov	 rax, rcx
  00684	48 89 44 24 58	 mov	 QWORD PTR srcelen$[rsp], rax
  00689	8b 44 24 34	 mov	 eax, DWORD PTR r2$[rsp]
  0068d	ff c0		 inc	 eax
  0068f	48 98		 cdqe
  00691	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00699	48 8b 54 24 58	 mov	 rdx, QWORD PTR srcelen$[rsp]
  0069e	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  006a6	eb 30		 jmp	 SHORT $LN40@z900_conve
$LN39@z900_conve:
  006a8	48 63 44 24 48	 movsxd	 rax, DWORD PTR read$[rsp]
  006ad	48 8b 4c 24 58	 mov	 rcx, QWORD PTR srcelen$[rsp]
  006b2	48 2b c8	 sub	 rcx, rax
  006b5	48 8b c1	 mov	 rax, rcx
  006b8	48 89 44 24 58	 mov	 QWORD PTR srcelen$[rsp], rax
  006bd	8b 44 24 34	 mov	 eax, DWORD PTR r2$[rsp]
  006c1	ff c0		 inc	 eax
  006c3	48 98		 cdqe
  006c5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006cd	8b 54 24 58	 mov	 edx, DWORD PTR srcelen$[rsp]
  006d1	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN40@z900_conve:
  006d8	33 c0		 xor	 eax, eax
  006da	85 c0		 test	 eax, eax
  006dc	75 81		 jne	 SHORT $LN18@z900_conve

; 2705 : 
; 2706 :         xlated += read;

  006de	8b 44 24 48	 mov	 eax, DWORD PTR read$[rsp]
  006e2	8b 4c 24 64	 mov	 ecx, DWORD PTR xlated$[rsp]
  006e6	03 c8		 add	 ecx, eax
  006e8	8b c1		 mov	 eax, ecx
  006ea	89 44 24 64	 mov	 DWORD PTR xlated$[rsp], eax

; 2707 :     }

  006ee	e9 7c fb ff ff	 jmp	 $LN5@z900_conve
$LN6@z900_conve:

; 2708 : 
; 2709 :     /* CPU determined number of characters reached */
; 2710 :     regs->psw.cc = 3;

  006f3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006fb	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@z900_conve:
$LN41@z900_conve:

; 2711 : }

  006ff	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00706	c3		 ret	 0
z900_convert_utf16_to_utf32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_validate_operand
_TEXT	SEGMENT
tv79 = 48
addr$ = 80
arn$ = 88
len$ = 96
acctype$ = 104
regs$ = 112
s390_validate_operand PROC				; COMDAT

; 1376 : {

$LN8:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1377 :     /* Translate address of leftmost operand byte */
; 1378 :     MADDR( addr, arn, regs, acctype, regs->psw.pkey );

  00016	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00023	8b 44 24 68	 mov	 eax, DWORD PTR acctype$[rsp]
  00027	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0002b	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  00030	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  0003e	e8 00 00 00 00	 call	 s390_maddr_l

; 1379 : 
; 1380 :     /* Translate next page if boundary crossed */
; 1381 :     if (CROSSPAGE( addr, len ))

  00043	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00047	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004c	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  00051	2b 4c 24 60	 sub	 ecx, DWORD PTR len$[rsp]
  00055	3b c1		 cmp	 eax, ecx
  00057	7e 0a		 jle	 SHORT $LN6@s390_valid
  00059	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  00061	eb 08		 jmp	 SHORT $LN7@s390_valid
$LN6@s390_valid:
  00063	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN7@s390_valid:
  0006b	83 7c 24 30 00	 cmp	 DWORD PTR tv79[rsp], 0
  00070	74 42		 je	 SHORT $LN2@s390_valid

; 1382 :     {
; 1383 :         MADDR( (addr + len) & ADDRESS_MAXWRAP( regs ),

  00072	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  00076	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  0007a	03 c8		 add	 ecx, eax
  0007c	8b c1		 mov	 eax, ecx
  0007e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  00083	23 81 90 00 00
	00		 and	 eax, DWORD PTR [rcx+144]
  00089	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  0008e	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00092	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00096	8b 4c 24 68	 mov	 ecx, DWORD PTR acctype$[rsp]
  0009a	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0009e	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  000a3	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  000a8	ba 01 00 00 00	 mov	 edx, 1
  000ad	8b c8		 mov	 ecx, eax
  000af	e8 00 00 00 00	 call	 s390_maddr_l
$LN2@s390_valid:

; 1384 :                arn, regs, acctype, regs->psw.pkey );
; 1385 :     }
; 1386 : #if defined( FEATURE_INTERVAL_TIMER )
; 1387 :     else
; 1388 :         ITIMER_SYNC( addr, len, regs );
; 1389 : #endif
; 1390 : }

  000b4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b8	c3		 ret	 0
s390_validate_operand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vfetch4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
mn$1 = 56
addr$ = 80
arn$ = 88
regs$ = 96
s390_vfetch4 PROC					; COMDAT

; 695  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 696  :     if ((likely(!((VADR_L)addr & 0x03))
; 697  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3) )))

  00011	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00015	83 e0 03	 and	 eax, 3
  00018	85 c0		 test	 eax, eax
  0001a	75 0a		 jne	 SHORT $LN5@s390_vfetc
  0001c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00024	eb 08		 jmp	 SHORT $LN6@s390_vfetc
$LN5@s390_vfetc:
  00026	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN6@s390_vfetc:
  0002e	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00033	74 0a		 je	 SHORT $LN9@s390_vfetc
  00035	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0003d	eb 08		 jmp	 SHORT $LN10@s390_vfetc
$LN9@s390_vfetc:
  0003f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN10@s390_vfetc:
  00047	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  0004c	75 10		 jne	 SHORT $LN3@s390_vfetc
  0004e	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00052	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00057	3d fc 0f 00 00	 cmp	 eax, 4092		; 00000ffcH
  0005c	77 45		 ja	 SHORT $LN2@s390_vfetc
$LN3@s390_vfetc:

; 698  :     {
; 699  :         BYTE *mn;
; 700  :         ITIMER_SYNC( addr, 4-1, regs );
; 701  :         mn = MADDRL( addr, 4,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00067	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0006b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00073	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  00078	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  0007d	ba 04 00 00 00	 mov	 edx, 4
  00082	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00086	e8 00 00 00 00	 call	 s390_maddr_l
  0008b	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 702  :         return fetch_fw( mn );

  00090	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  00095	e8 00 00 00 00	 call	 fetch_fw_noswap
  0009a	8b c8		 mov	 ecx, eax
  0009c	e8 00 00 00 00	 call	 _byteswap_ulong
  000a1	eb 12		 jmp	 SHORT $LN1@s390_vfetc
$LN2@s390_vfetc:

; 703  :     }
; 704  :     return ARCH_DEP( vfetch4_full )( addr, arn, regs );

  000a3	4c 8b 44 24 60	 mov	 r8, QWORD PTR regs$[rsp]
  000a8	8b 54 24 58	 mov	 edx, DWORD PTR arn$[rsp]
  000ac	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  000b0	e8 00 00 00 00	 call	 s390_vfetch4_full
$LN1@s390_vfetc:

; 705  : }

  000b5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b9	c3		 ret	 0
s390_vfetch4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vfetch2
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
mn$1 = 56
addr$ = 80
arn$ = 88
regs$ = 96
s390_vfetch2 PROC					; COMDAT

; 679  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 680  :     if (likely(!((VADR_L)addr & 0x01))
; 681  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK ))

  00011	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00015	83 e0 01	 and	 eax, 1
  00018	85 c0		 test	 eax, eax
  0001a	75 0a		 jne	 SHORT $LN5@s390_vfetc
  0001c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00024	eb 08		 jmp	 SHORT $LN6@s390_vfetc
$LN5@s390_vfetc:
  00026	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN6@s390_vfetc:
  0002e	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00033	74 0a		 je	 SHORT $LN9@s390_vfetc
  00035	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0003d	eb 08		 jmp	 SHORT $LN10@s390_vfetc
$LN9@s390_vfetc:
  0003f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN10@s390_vfetc:
  00047	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  0004c	75 10		 jne	 SHORT $LN3@s390_vfetc
  0004e	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00052	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00057	3d ff 0f 00 00	 cmp	 eax, 4095		; 00000fffH
  0005c	74 46		 je	 SHORT $LN2@s390_vfetc
$LN3@s390_vfetc:

; 682  :     {
; 683  :         BYTE *mn;
; 684  :         ITIMER_SYNC( addr, 2-1, regs );
; 685  :         mn = MADDRL( addr, 2,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00067	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0006b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00073	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  00078	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  0007d	ba 02 00 00 00	 mov	 edx, 2
  00082	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00086	e8 00 00 00 00	 call	 s390_maddr_l
  0008b	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 686  :         return fetch_hw( mn );

  00090	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  00095	e8 00 00 00 00	 call	 fetch_hw_noswap
  0009a	0f b7 c8	 movzx	 ecx, ax
  0009d	e8 00 00 00 00	 call	 _byteswap_ushort
  000a2	eb 12		 jmp	 SHORT $LN1@s390_vfetc
$LN2@s390_vfetc:

; 687  :     }
; 688  :     return ARCH_DEP( vfetch2_full )( addr, arn, regs );

  000a4	4c 8b 44 24 60	 mov	 r8, QWORD PTR regs$[rsp]
  000a9	8b 54 24 58	 mov	 edx, DWORD PTR arn$[rsp]
  000ad	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  000b1	e8 00 00 00 00	 call	 s390_vfetch2_full
$LN1@s390_vfetc:

; 689  : }

  000b6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ba	c3		 ret	 0
s390_vfetch2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vfetchb
_TEXT	SEGMENT
mn$ = 48
addr$ = 80
arn$ = 88
regs$ = 96
s390_vfetchb PROC					; COMDAT

; 667  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 668  : BYTE   *mn;                             /* Main storage address      */
; 669  : 
; 670  :     ITIMER_SYNC( addr, 1-1, regs );
; 671  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00011	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00016	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0001e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00026	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0002b	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00030	ba 01 00 00 00	 mov	 edx, 1
  00035	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00039	e8 00 00 00 00	 call	 s390_maddr_l
  0003e	48 89 44 24 30	 mov	 QWORD PTR mn$[rsp], rax

; 672  :     return *mn;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR mn$[rsp]
  00048	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 673  : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	c3		 ret	 0
s390_vfetchb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vfetchc
_TEXT	SEGMENT
len2$ = 48
tv74 = 52
main1$ = 56
main2$ = 64
dest$ = 112
len$ = 120
addr$ = 128
arn$ = 136
regs$ = 144
s390_vfetchc PROC					; COMDAT

; 631  : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 632  : BYTE   *main1, *main2;                  /* Main storage addresses    */
; 633  : int     len2;                           /* Length to copy on page    */
; 634  : 
; 635  :     if (NOCROSSPAGE( addr, len ))

  00019	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00020	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00025	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR len$[rsp]
  0002a	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  0002f	2b d1		 sub	 edx, ecx
  00031	8b ca		 mov	 ecx, edx
  00033	3b c1		 cmp	 eax, ecx
  00035	7f 0a		 jg	 SHORT $LN7@s390_vfetc
  00037	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0003f	eb 08		 jmp	 SHORT $LN8@s390_vfetc
$LN7@s390_vfetc:
  00041	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN8@s390_vfetc:
  00049	83 7c 24 34 00	 cmp	 DWORD PTR tv74[rsp], 0
  0004e	74 62		 je	 SHORT $LN2@s390_vfetc

; 636  :     {
; 637  :         ITIMER_SYNC( addr, len, regs );
; 638  :         main1 = MADDRL( addr, len + 1, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00050	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00055	ff c0		 inc	 eax
  00057	48 98		 cdqe
  00059	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00061	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00065	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00069	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00071	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00079	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00081	48 8b d0	 mov	 rdx, rax
  00084	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0008b	e8 00 00 00 00	 call	 s390_maddr_l
  00090	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 639  :         memcpy( dest, main1, len + 1 );

  00095	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  0009a	ff c0		 inc	 eax
  0009c	48 98		 cdqe
  0009e	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dest$[rsp]
  000a3	48 8b 74 24 38	 mov	 rsi, QWORD PTR main1$[rsp]
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	f3 a4		 rep movsb

; 640  :     }

  000ad	e9 f7 00 00 00	 jmp	 $LN3@s390_vfetc
$LN2@s390_vfetc:

; 641  :     else
; 642  :     {
; 643  :         len2 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  000b2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  000b9	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  000be	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000c3	2b c8		 sub	 ecx, eax
  000c5	8b c1		 mov	 eax, ecx
  000c7	89 44 24 30	 mov	 DWORD PTR len2$[rsp], eax

; 644  :         main1 = MADDRL( addr, len2, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  000cb	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  000d0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d8	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  000dc	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  000e0	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000e8	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000f0	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000f8	48 8b d0	 mov	 rdx, rax
  000fb	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00102	e8 00 00 00 00	 call	 s390_maddr_l
  00107	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 645  :         main2 = MADDRL( (addr + len2) & ADDRESS_MAXWRAP( regs ), len + 1 - len2,

  0010c	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00111	ff c0		 inc	 eax
  00113	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  00117	48 98		 cdqe
  00119	8b 4c 24 30	 mov	 ecx, DWORD PTR len2$[rsp]
  0011d	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00124	03 d1		 add	 edx, ecx
  00126	8b ca		 mov	 ecx, edx
  00128	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00130	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  00136	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0013e	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00142	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00146	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0014e	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00156	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0015e	48 8b d0	 mov	 rdx, rax
  00161	e8 00 00 00 00	 call	 s390_maddr_l
  00166	48 89 44 24 40	 mov	 QWORD PTR main2$[rsp], rax

; 646  :                         arn, regs, ACCTYPE_READ, regs->psw.pkey );
; 647  :         memcpy(        dest,        main1,           len2 );

  0016b	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  00170	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dest$[rsp]
  00175	48 8b 74 24 38	 mov	 rsi, QWORD PTR main1$[rsp]
  0017a	48 8b c8	 mov	 rcx, rax
  0017d	f3 a4		 rep movsb

; 648  :         memcpy( (BYTE*)dest + len2, main2, len + 1 - len2 );

  0017f	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00184	ff c0		 inc	 eax
  00186	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  0018a	48 98		 cdqe
  0018c	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  00191	48 8b 54 24 70	 mov	 rdx, QWORD PTR dest$[rsp]
  00196	48 03 d1	 add	 rdx, rcx
  00199	48 8b ca	 mov	 rcx, rdx
  0019c	48 8b f9	 mov	 rdi, rcx
  0019f	48 8b 74 24 40	 mov	 rsi, QWORD PTR main2$[rsp]
  001a4	48 8b c8	 mov	 rcx, rax
  001a7	f3 a4		 rep movsb
$LN3@s390_vfetc:

; 649  :     }
; 650  : }

  001a9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ad	5f		 pop	 rdi
  001ae	5e		 pop	 rsi
  001af	c3		 ret	 0
s390_vfetchc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstore8
_TEXT	SEGMENT
tv70 = 48
mn$1 = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
s390_vstore8 PROC					; COMDAT

; 577  : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 578  : #if defined( OPTION_SINGLE_CPU_DW ) && defined( ASSIST_STORE_DW )
; 579  :     /* Check alignement. If aligned then we are guaranteed
; 580  :        not to cross a page boundary */
; 581  :     if (likely(!((VADR_L)addr & 0x07)))
; 582  :     {
; 583  :         /* Most common case : Aligned */
; 584  :         U64 *mn;
; 585  :         mn = (U64*)MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );
; 586  :         if (regs->cpubit == regs->sysblk->started_mask)
; 587  :             *mn = CSWAP64( value );
; 588  :         else
; 589  :             STORE_DW( mn, value );
; 590  :     }
; 591  :     else
; 592  : #endif
; 593  :     {
; 594  :         /* We're not aligned. So we have to check whether we are
; 595  :            crossing a page boundary. This cannot be the same
; 596  :            code as above because casting U64* to a non aligned
; 597  :            pointer may break on those architectures mandating
; 598  :            strict alignement */
; 599  :         if (likely(((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-7)))

  00017	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  0001b	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00020	3d f8 0f 00 00	 cmp	 eax, 4088		; 00000ff8H
  00025	77 0a		 ja	 SHORT $LN7@s390_vstor
  00027	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  0002f	eb 08		 jmp	 SHORT $LN8@s390_vstor
$LN7@s390_vstor:
  00031	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN8@s390_vstor:
  00039	83 7c 24 30 00	 cmp	 DWORD PTR tv70[rsp], 0
  0003e	74 4b		 je	 SHORT $LN2@s390_vstor

; 600  :         {
; 601  :             /* Non aligned but not crossing page boundary */
; 602  :             BYTE *mn;
; 603  :             mn = MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00040	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00045	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00049	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0004d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00055	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  0005a	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  0005f	ba 08 00 00 00	 mov	 edx, 8
  00064	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  00068	e8 00 00 00 00	 call	 s390_maddr_l
  0006d	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 604  :             /* invoking STORE_DW ensures endianness correctness */
; 605  :             STORE_DW( mn, value );

  00072	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value$[rsp]
  00077	e8 00 00 00 00	 call	 _byteswap_uint64
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  00084	e8 00 00 00 00	 call	 store_dw_noswap

; 606  :         }

  00089	eb 18		 jmp	 SHORT $LN3@s390_vstor
$LN2@s390_vstor:

; 607  :         else
; 608  :             /* Crossing page boundary */
; 609  :             ARCH_DEP( vstore8_full )( value, addr, arn, regs );

  0008b	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00090	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00095	8b 54 24 58	 mov	 edx, DWORD PTR addr$[rsp]
  00099	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value$[rsp]
  0009e	e8 00 00 00 00	 call	 s390_vstore8_full
$LN3@s390_vstor:

; 610  :     }
; 611  :     ITIMER_UPDATE( addr, 8-1, regs );
; 612  : }

  000a3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a7	c3		 ret	 0
s390_vstore8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstore4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
mn$1 = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
s390_vstore4 PROC					; COMDAT

; 559  : {

$LN12:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 560  :     /* Most common case : Aligned & not crossing page boundary */
; 561  :     if (likely(!((VADR_L)addr & 0x03))
; 562  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3)))

  00016	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  0001a	83 e0 03	 and	 eax, 3
  0001d	85 c0		 test	 eax, eax
  0001f	75 0a		 jne	 SHORT $LN6@s390_vstor
  00021	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00029	eb 08		 jmp	 SHORT $LN7@s390_vstor
$LN6@s390_vstor:
  0002b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN7@s390_vstor:
  00033	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00038	74 0a		 je	 SHORT $LN10@s390_vstor
  0003a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN11@s390_vstor
$LN10@s390_vstor:
  00044	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN11@s390_vstor:
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  00051	75 10		 jne	 SHORT $LN4@s390_vstor
  00053	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  00057	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005c	3d fc 0f 00 00	 cmp	 eax, 4092		; 00000ffcH
  00061	77 49		 ja	 SHORT $LN2@s390_vstor
$LN4@s390_vstor:

; 563  :     {
; 564  :         BYTE *mn;
; 565  :         mn = MADDRL( addr, 4, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00063	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00068	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0006c	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00070	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00078	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  0007d	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00082	ba 04 00 00 00	 mov	 edx, 4
  00087	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  0008b	e8 00 00 00 00	 call	 s390_maddr_l
  00090	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 566  :         STORE_FW( mn, value );

  00095	8b 4c 24 50	 mov	 ecx, DWORD PTR value$[rsp]
  00099	e8 00 00 00 00	 call	 _byteswap_ulong
  0009e	8b d0		 mov	 edx, eax
  000a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  000a5	e8 00 00 00 00	 call	 store_fw_noswap

; 567  :         ITIMER_UPDATE( addr, 4-1, regs );
; 568  :     }

  000aa	eb 17		 jmp	 SHORT $LN3@s390_vstor
$LN2@s390_vstor:

; 569  :     else
; 570  :         ARCH_DEP( vstore4_full )( value, addr, arn, regs );

  000ac	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  000b1	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  000b6	8b 54 24 58	 mov	 edx, DWORD PTR addr$[rsp]
  000ba	8b 4c 24 50	 mov	 ecx, DWORD PTR value$[rsp]
  000be	e8 00 00 00 00	 call	 s390_vstore4_full
$LN3@s390_vstor:

; 571  : }

  000c3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c7	c3		 ret	 0
s390_vstore4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstore2
_TEXT	SEGMENT
tv73 = 48
mn$1 = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
s390_vstore2 PROC					; COMDAT

; 541  : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 542  :     /* Most common case : Aligned & not crossing page boundary */
; 543  :     if (likely(!((VADR_L)addr & 1)

  00017	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 1a		 je	 SHORT $LN5@s390_vstor
  00022	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  00026	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002b	3d ff 0f 00 00	 cmp	 eax, 4095		; 00000fffH
  00030	75 0a		 jne	 SHORT $LN5@s390_vstor
  00032	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
  0003a	eb 08		 jmp	 SHORT $LN8@s390_vstor
$LN5@s390_vstor:
  0003c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
$LN8@s390_vstor:
  00044	83 7c 24 30 00	 cmp	 DWORD PTR tv73[rsp], 0
  00049	74 4b		 je	 SHORT $LN2@s390_vstor

; 544  :         || ((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK))
; 545  :     {
; 546  :         BYTE* mn;
; 547  :         mn = MADDRL( addr, 2, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0004b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00050	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00054	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00058	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00060	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00065	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  0006a	ba 02 00 00 00	 mov	 edx, 2
  0006f	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  00073	e8 00 00 00 00	 call	 s390_maddr_l
  00078	48 89 44 24 38	 mov	 QWORD PTR mn$1[rsp], rax

; 548  :         STORE_HW( mn, value );

  0007d	0f b7 4c 24 50	 movzx	 ecx, WORD PTR value$[rsp]
  00082	e8 00 00 00 00	 call	 _byteswap_ushort
  00087	0f b7 d0	 movzx	 edx, ax
  0008a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$1[rsp]
  0008f	e8 00 00 00 00	 call	 store_hw_noswap

; 549  :         ITIMER_UPDATE( addr, 2-1, regs );
; 550  :     }

  00094	eb 18		 jmp	 SHORT $LN3@s390_vstor
$LN2@s390_vstor:

; 551  :     else
; 552  :         ARCH_DEP( vstore2_full )( value, addr, arn, regs );

  00096	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  0009b	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  000a0	8b 54 24 58	 mov	 edx, DWORD PTR addr$[rsp]
  000a4	0f b7 4c 24 50	 movzx	 ecx, WORD PTR value$[rsp]
  000a9	e8 00 00 00 00	 call	 s390_vstore2_full
$LN3@s390_vstor:

; 553  : }

  000ae	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b2	c3		 ret	 0
s390_vstore2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstoreb
_TEXT	SEGMENT
main1$ = 48
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
s390_vstoreb PROC					; COMDAT

; 529  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 530  : BYTE   *main1;                          /* Mainstor address          */
; 531  : 
; 532  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00016	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00023	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0002b	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00030	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  0003e	e8 00 00 00 00	 call	 s390_maddr_l
  00043	48 89 44 24 30	 mov	 QWORD PTR main1$[rsp], rax

; 533  :     *main1 = value;

  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR main1$[rsp]
  0004d	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR value$[rsp]
  00052	88 08		 mov	 BYTE PTR [rax], cl

; 534  :     ITIMER_UPDATE( addr, 1-1, regs );
; 535  : }

  00054	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00058	c3		 ret	 0
s390_vstoreb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstorec
_TEXT	SEGMENT
len2$ = 48
tv74 = 52
sk$ = 56
tv81 = 64
main1$ = 72
main2$ = 80
src$ = 128
len$ = 136
addr$ = 144
arn$ = 152
regs$ = 160
s390_vstorec PROC					; COMDAT

; 489  : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 490  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 491  : BYTE   *sk;                             /* Storage key addresses     */
; 492  : int     len2;                           /* Length to end of page     */
; 493  : 
; 494  :     if (NOCROSSPAGE( addr,len ))

  00019	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00020	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00025	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR len$[rsp]
  0002d	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  00032	2b d1		 sub	 edx, ecx
  00034	8b ca		 mov	 ecx, edx
  00036	3b c1		 cmp	 eax, ecx
  00038	7f 0a		 jg	 SHORT $LN7@s390_vstor
  0003a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN8@s390_vstor
$LN7@s390_vstor:
  00044	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN8@s390_vstor:
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR tv74[rsp], 0
  00051	74 6f		 je	 SHORT $LN2@s390_vstor

; 495  :     {
; 496  :         memcpy( MADDRL( addr, len+1, arn, regs, ACCTYPE_WRITE, regs->psw.pkey ),

  00053	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  0005b	ff c0		 inc	 eax
  0005d	48 98		 cdqe
  0005f	48 89 44 24 40	 mov	 QWORD PTR tv81[rsp], rax
  00064	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR len$[rsp]
  0006c	ff c1		 inc	 ecx
  0006e	48 63 c9	 movsxd	 rcx, ecx
  00071	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00079	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0007d	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00081	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00089	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00091	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00099	48 8b d1	 mov	 rdx, rcx
  0009c	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  000a3	e8 00 00 00 00	 call	 s390_maddr_l
  000a8	48 8b f8	 mov	 rdi, rax
  000ab	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR src$[rsp]
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR tv81[rsp]
  000b8	48 8b c8	 mov	 rcx, rax
  000bb	f3 a4		 rep movsb

; 497  :                src, len + 1);
; 498  :         ITIMER_UPDATE( addr, len, regs );
; 499  :     }

  000bd	e9 29 01 00 00	 jmp	 $LN3@s390_vstor
$LN2@s390_vstor:

; 500  :     else
; 501  :     {
; 502  :         len2 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  000c2	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  000c9	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  000ce	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  000d3	2b c8		 sub	 ecx, eax
  000d5	8b c1		 mov	 eax, ecx
  000d7	89 44 24 30	 mov	 DWORD PTR len2$[rsp], eax

; 503  :         main1 = MADDRL( addr, len2, arn, regs, ACCTYPE_WRITE_SKP,

  000db	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  000e0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e8	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  000ec	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  000f0	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  000f8	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00100	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00108	48 8b d0	 mov	 rdx, rax
  0010b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00112	e8 00 00 00 00	 call	 s390_maddr_l
  00117	48 89 44 24 48	 mov	 QWORD PTR main1$[rsp], rax

; 504  :                         regs->psw.pkey );
; 505  :         sk = regs->dat.storkey;

  0011c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00124	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  0012b	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 506  :         main2 = MADDRL( (addr + len2) & ADDRESS_MAXWRAP( regs ),

  00130	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  00138	ff c0		 inc	 eax
  0013a	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  0013e	48 98		 cdqe
  00140	8b 4c 24 30	 mov	 ecx, DWORD PTR len2$[rsp]
  00144	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0014b	03 d1		 add	 edx, ecx
  0014d	8b ca		 mov	 ecx, edx
  0014f	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00157	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  0015d	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00165	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00169	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0016d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00175	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0017d	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00185	48 8b d0	 mov	 rdx, rax
  00188	e8 00 00 00 00	 call	 s390_maddr_l
  0018d	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 507  :                         len+1-len2, arn,
; 508  :                         regs, ACCTYPE_WRITE, regs->psw.pkey );
; 509  :         *sk |= (STORKEY_REF | STORKEY_CHANGE);

  00192	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  00197	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0019a	83 c8 06	 or	 eax, 6
  0019d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  001a2	88 01		 mov	 BYTE PTR [rcx], al

; 510  :         memcpy( main1, src, len2 );

  001a4	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  001a9	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main1$[rsp]
  001ae	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR src$[rsp]
  001b6	48 8b c8	 mov	 rcx, rax
  001b9	f3 a4		 rep movsb

; 511  :         memcpy( main2, (BYTE*)src + len2, len + 1 - len2 );

  001bb	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  001c3	ff c0		 inc	 eax
  001c5	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  001c9	48 98		 cdqe
  001cb	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  001d0	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  001d8	48 03 d1	 add	 rdx, rcx
  001db	48 8b ca	 mov	 rcx, rdx
  001de	48 8b 7c 24 50	 mov	 rdi, QWORD PTR main2$[rsp]
  001e3	48 8b f1	 mov	 rsi, rcx
  001e6	48 8b c8	 mov	 rcx, rax
  001e9	f3 a4		 rep movsb
$LN3@s390_vstor:

; 512  :     }
; 513  : }

  001eb	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001ef	5f		 pop	 rdi
  001f0	5e		 pop	 rsi
  001f1	c3		 ret	 0
s390_vstorec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vfetch4_full
_TEXT	SEGMENT
len$ = 48
mn$ = 56
temp$ = 64
__$ArrayPad$ = 72
addr$ = 112
arn$ = 120
regs$ = 128
s390_vfetch4_full PROC					; COMDAT

; 428  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	56		 push	 rsi
  0000e	57		 push	 rdi
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 429  : BYTE   *mn;                             /* Main storage addresses    */
; 430  : int     len;                            /* Length to end of page     */
; 431  : BYTE    temp[8];                        /* Copy destination          */
; 432  : 
; 433  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00022	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00026	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002b	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 434  :     mn = MADDRL( addr, len, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00038	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0003d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00045	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00049	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0004d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00055	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0005d	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  00062	48 8b d0	 mov	 rdx, rax
  00065	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  00069	e8 00 00 00 00	 call	 s390_maddr_l
  0006e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 435  :     memcpy( temp, mn, len);

  00073	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00078	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  0007d	48 8b f9	 mov	 rdi, rcx
  00080	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  00085	48 8b c8	 mov	 rcx, rax
  00088	f3 a4		 rep movsb

; 436  :     mn = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4 - len, arn, regs,

  0008a	b8 04 00 00 00	 mov	 eax, 4
  0008f	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00093	48 98		 cdqe
  00095	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  00099	8b 54 24 70	 mov	 edx, DWORD PTR addr$[rsp]
  0009d	03 d1		 add	 edx, ecx
  0009f	8b ca		 mov	 ecx, edx
  000a1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000a9	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  000af	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000b7	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000bb	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000bf	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000c7	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000cf	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  000d4	48 8b d0	 mov	 rdx, rax
  000d7	e8 00 00 00 00	 call	 s390_maddr_l
  000dc	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 437  :                   ACCTYPE_READ, regs->psw.pkey );
; 438  :     memcpy( temp+len, mn, 4 - len);

  000e1	b8 04 00 00 00	 mov	 eax, 4
  000e6	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  000ea	48 98		 cdqe
  000ec	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  000f1	48 8d 4c 0c 40	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  000f6	48 8b f9	 mov	 rdi, rcx
  000f9	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  000fe	48 8b c8	 mov	 rcx, rax
  00101	f3 a4		 rep movsb

; 439  :     return fetch_fw( temp );

  00103	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  00108	e8 00 00 00 00	 call	 fetch_fw_noswap
  0010d	8b c8		 mov	 ecx, eax
  0010f	e8 00 00 00 00	 call	 _byteswap_ulong

; 440  : }

  00114	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00119	48 33 cc	 xor	 rcx, rsp
  0011c	e8 00 00 00 00	 call	 __security_check_cookie
  00121	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00125	5f		 pop	 rdi
  00126	5e		 pop	 rsi
  00127	c3		 ret	 0
s390_vfetch4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vfetch2_full
_TEXT	SEGMENT
value$ = 48
mn$ = 56
addr$ = 80
arn$ = 88
regs$ = 96
s390_vfetch2_full PROC					; COMDAT

; 401  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 402  : BYTE   *mn;                             /* Main storage addresses    */
; 403  : U16     value;
; 404  : 
; 405  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00011	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00016	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0001e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00026	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0002b	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00030	ba 01 00 00 00	 mov	 edx, 1
  00035	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00039	e8 00 00 00 00	 call	 s390_maddr_l
  0003e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 406  :     value = *mn << 8;

  00043	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00048	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0004b	c1 e0 08	 shl	 eax, 8
  0004e	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 407  :     mn = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  00053	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00057	ff c0		 inc	 eax
  00059	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0005e	23 81 90 00 00
	00		 and	 eax, DWORD PTR [rcx+144]
  00064	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00069	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0006d	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00071	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00079	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0007e	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00083	ba 01 00 00 00	 mov	 edx, 1
  00088	8b c8		 mov	 ecx, eax
  0008a	e8 00 00 00 00	 call	 s390_maddr_l
  0008f	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 408  :                  ACCTYPE_READ, regs->psw.pkey );
; 409  :     value |= *mn;

  00094	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00099	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0009c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR value$[rsp]
  000a1	0b c8		 or	 ecx, eax
  000a3	8b c1		 mov	 eax, ecx
  000a5	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 410  :     return value;

  000aa	0f b7 44 24 30	 movzx	 eax, WORD PTR value$[rsp]

; 411  : }

  000af	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b3	c3		 ret	 0
s390_vfetch2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstore8_full
_TEXT	SEGMENT
len$ = 48
sk$ = 56
main1$ = 64
main2$ = 72
temp$ = 80
__$ArrayPad$ = 88
value$ = 128
addr$ = 136
arn$ = 144
regs$ = 152
s390_vstore8_full PROC					; COMDAT

; 369  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 370  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 371  : BYTE   *sk;                             /* Storage key addresses     */
; 372  : int     len;                            /* Length to end of page     */
; 373  : BYTE    temp[8];                        /* Copied value              */
; 374  : 
; 375  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00028	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0002f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00034	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00039	2b c8		 sub	 ecx, eax
  0003b	8b c1		 mov	 eax, ecx
  0003d	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 376  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00046	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00052	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00056	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0005e	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00066	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0006e	48 8b d0	 mov	 rdx, rax
  00071	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00078	e8 00 00 00 00	 call	 s390_maddr_l
  0007d	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 377  :     sk = regs->dat.storkey;

  00082	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00091	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 378  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 8-len, arn, regs,

  00096	b8 08 00 00 00	 mov	 eax, 8
  0009b	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0009f	48 98		 cdqe
  000a1	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  000a5	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  000ac	03 d1		 add	 edx, ecx
  000ae	8b ca		 mov	 ecx, edx
  000b0	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000b8	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  000be	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000c6	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000ca	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000ce	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d6	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000de	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000e6	48 8b d0	 mov	 rdx, rax
  000e9	e8 00 00 00 00	 call	 s390_maddr_l
  000ee	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 379  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 380  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000f3	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  000f8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000fb	83 c8 06	 or	 eax, 6
  000fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  00103	88 01		 mov	 BYTE PTR [rcx], al

; 381  :     STORE_DW( temp, value );

  00105	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  0010d	e8 00 00 00 00	 call	 _byteswap_uint64
  00112	48 8b d0	 mov	 rdx, rax
  00115	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  0011a	e8 00 00 00 00	 call	 store_dw_noswap

; 382  :     memcpy( main1, temp,       len );

  0011f	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00124	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  00129	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  0012e	48 8b f1	 mov	 rsi, rcx
  00131	48 8b c8	 mov	 rcx, rax
  00134	f3 a4		 rep movsb

; 383  :     memcpy( main2, temp+len, 8-len );

  00136	b8 08 00 00 00	 mov	 eax, 8
  0013b	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0013f	48 98		 cdqe
  00141	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  00146	48 8d 4c 0c 50	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  0014b	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  00150	48 8b f1	 mov	 rsi, rcx
  00153	48 8b c8	 mov	 rcx, rax
  00156	f3 a4		 rep movsb

; 384  : }

  00158	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0015d	48 33 cc	 xor	 rcx, rsp
  00160	e8 00 00 00 00	 call	 __security_check_cookie
  00165	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00169	5f		 pop	 rdi
  0016a	5e		 pop	 rsi
  0016b	c3		 ret	 0
s390_vstore8_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstore4_full
_TEXT	SEGMENT
len$ = 48
temp$ = 52
sk$ = 56
main1$ = 64
main2$ = 72
value$ = 112
addr$ = 120
arn$ = 128
regs$ = 136
s390_vstore4_full PROC					; COMDAT

; 335  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	56		 push	 rsi
  00013	57		 push	 rdi
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 336  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 337  : BYTE   *sk;                             /* Storage key addresses     */
; 338  : int     len;                            /* Length to end of page     */
; 339  : BYTE    temp[4];                        /* Copied value              */
; 340  : 
; 341  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00018	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0001c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00021	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00026	2b c8		 sub	 ecx, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 342  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  0002e	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00033	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0003b	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0003f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00043	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0004b	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00053	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	8b 4c 24 78	 mov	 ecx, DWORD PTR addr$[rsp]
  00062	e8 00 00 00 00	 call	 s390_maddr_l
  00067	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 343  :     sk = regs->dat.storkey;

  0006c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  0007b	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 344  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4-len, arn, regs,

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00089	48 98		 cdqe
  0008b	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  0008f	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  00093	03 d1		 add	 edx, ecx
  00095	8b ca		 mov	 ecx, edx
  00097	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0009f	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  000a5	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000ad	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000b1	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000b5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bd	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000c5	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000cd	48 8b d0	 mov	 rdx, rax
  000d0	e8 00 00 00 00	 call	 s390_maddr_l
  000d5	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 345  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 346  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000da	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  000df	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000e2	83 c8 06	 or	 eax, 6
  000e5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  000ea	88 01		 mov	 BYTE PTR [rcx], al

; 347  :     STORE_FW( temp, value );

  000ec	8b 4c 24 70	 mov	 ecx, DWORD PTR value$[rsp]
  000f0	e8 00 00 00 00	 call	 _byteswap_ulong
  000f5	8b d0		 mov	 edx, eax
  000f7	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  000fc	e8 00 00 00 00	 call	 store_fw_noswap

; 348  :     memcpy( main1, temp,       len );

  00101	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00106	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  0010b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  00110	48 8b f1	 mov	 rsi, rcx
  00113	48 8b c8	 mov	 rcx, rax
  00116	f3 a4		 rep movsb

; 349  :     memcpy( main2, temp+len, 4-len );

  00118	b8 04 00 00 00	 mov	 eax, 4
  0011d	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00121	48 98		 cdqe
  00123	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  00128	48 8d 4c 0c 34	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  0012d	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  00132	48 8b f1	 mov	 rsi, rcx
  00135	48 8b c8	 mov	 rcx, rax
  00138	f3 a4		 rep movsb

; 350  : }

  0013a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013e	5f		 pop	 rdi
  0013f	5e		 pop	 rsi
  00140	c3		 ret	 0
s390_vstore4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s390_vstore2_full
_TEXT	SEGMENT
sk$ = 48
main1$ = 56
main2$ = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s390_vstore2_full PROC					; COMDAT

; 308  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 309  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 310  : BYTE   *sk;                             /* Storage key addresses     */
; 311  : 
; 312  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00017	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0001c	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00020	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00024	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0002c	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00031	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  0003f	e8 00 00 00 00	 call	 s390_maddr_l
  00044	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 313  :     sk = regs->dat.storkey;

  00049	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0004e	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00055	48 89 44 24 30	 mov	 QWORD PTR sk$[rsp], rax

; 314  :     main2 = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  0005a	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0005e	ff c0		 inc	 eax
  00060	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00065	23 81 90 00 00
	00		 and	 eax, DWORD PTR [rcx+144]
  0006b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00070	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00074	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00078	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00080	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00085	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0008a	ba 01 00 00 00	 mov	 edx, 1
  0008f	8b c8		 mov	 ecx, eax
  00091	e8 00 00 00 00	 call	 s390_maddr_l
  00096	48 89 44 24 40	 mov	 QWORD PTR main2$[rsp], rax

; 315  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 316  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR sk$[rsp]
  000a0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000a3	83 c8 06	 or	 eax, 6
  000a6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sk$[rsp]
  000ab	88 01		 mov	 BYTE PTR [rcx], al

; 317  :     *main1 = value >> 8;

  000ad	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000b2	c1 f8 08	 sar	 eax, 8
  000b5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR main1$[rsp]
  000ba	88 01		 mov	 BYTE PTR [rcx], al

; 318  :     *main2 = value & 0xFF;

  000bc	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000c1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR main2$[rsp]
  000cb	88 01		 mov	 BYTE PTR [rcx], al

; 319  : }

  000cd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d1	c3		 ret	 0
s390_vstore2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dat.h
;	COMDAT s390_maddr_l
_TEXT	SEGMENT
tlbix$ = 48
aea_crn$ = 52
tv70 = 56
maddr$ = 64
addr$ = 96
len$ = 104
arn$ = 112
regs$ = 120
acctype$ = 128
akey$ = 136
s390_maddr_l PROC					; COMDAT

; 307  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 308  :     /* Note: ALL of the below conditions must be true for a TLB hit
; 309  :        to occur.  If ANY of them are false, then it's a TLB miss,
; 310  :        requiring us to then perform a full DAT address translation.
; 311  : 
; 312  :        Note too that on the grand scheme of things the order/sequence
; 313  :        of the below tests (if statements) is completely unimportant
; 314  :        since ALL conditions must be checked anyway in order for a hit
; 315  :        to occur, and it doesn't matter that a miss tests a few extra
; 316  :        conditions since it's going to do a full translation anyway!
; 317  :        (which is many, many instructions)
; 318  :     */
; 319  : 
; 320  :     int  aea_crn  = (arn >= USE_ARMODE) ? 0 : regs->AEA_AR( arn );

  00017	83 7c 24 70 10	 cmp	 DWORD PTR arn$[rsp], 16
  0001c	7c 0a		 jl	 SHORT $LN12@s390_maddr
  0001e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00026	eb 19		 jmp	 SHORT $LN13@s390_maddr
$LN12@s390_maddr:
  00028	8b 44 24 70	 mov	 eax, DWORD PTR arn$[rsp]
  0002c	83 c0 05	 add	 eax, 5
  0002f	48 98		 cdqe
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00036	8b 84 81 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+3220]
  0003d	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
$LN13@s390_maddr:
  00041	8b 44 24 38	 mov	 eax, DWORD PTR tv70[rsp]
  00045	89 44 24 34	 mov	 DWORD PTR aea_crn$[rsp], eax

; 321  :     U16  tlbix    = TLBIX( addr );

  00049	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  0004d	c1 e8 0c	 shr	 eax, 12
  00050	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00055	66 89 44 24 30	 mov	 WORD PTR tlbix$[rsp], ax

; 322  :     BYTE *maddr   = NULL;

  0005a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maddr$[rsp], 0

; 323  : 
; 324  :     /* Non-zero AEA Control Register number? */
; 325  :     if (aea_crn)

  00063	83 7c 24 34 00	 cmp	 DWORD PTR aea_crn$[rsp], 0
  00068	0f 84 25 01 00
	00		 je	 $LN2@s390_maddr

; 326  :     {
; 327  :         /* Same Addess Space Designator as before? */
; 328  :         /* Or if not, is address in a common segment? */
; 329  :         if (0
; 330  :             || (regs->CR( aea_crn ) == regs->tlb.TLB_ASD( tlbix ))
; 331  :             || (regs->AEA_COMMON( aea_crn ) & regs->tlb.common[ tlbix ])

  0006e	33 c0		 xor	 eax, eax
  00070	85 c0		 test	 eax, eax
  00072	75 59		 jne	 SHORT $LN4@s390_maddr
  00074	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  00078	ff c0		 inc	 eax
  0007a	48 98		 cdqe
  0007c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00081	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00086	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0008b	41 8b 8c c8 60
	b0 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+45152]
  00093	39 8c c2 00 06
	00 00		 cmp	 DWORD PTR [rdx+rax*8+1536], ecx
  0009a	74 31		 je	 SHORT $LN4@s390_maddr
  0009c	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  000a0	ff c0		 inc	 eax
  000a2	48 98		 cdqe
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  000b1	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000b6	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000bb	0f b6 8c 0a 60
	54 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+87136]
  000c3	23 c1		 and	 eax, ecx
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 c6 00 00
	00		 je	 $LN3@s390_maddr
$LN4@s390_maddr:

; 332  :         )
; 333  :         {
; 334  :             /* Storage Key zero? */
; 335  :             /* Or if not, same Storage Key as before? */
; 336  :             if (0
; 337  :                 || akey == 0
; 338  :                 || akey == regs->tlb.skey[ tlbix ]

  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 2e		 jne	 SHORT $LN6@s390_maddr
  000d3	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000db	85 c0		 test	 eax, eax
  000dd	74 22		 je	 SHORT $LN6@s390_maddr
  000df	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000e7	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000ec	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f1	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  000f9	3b c1		 cmp	 eax, ecx
  000fb	0f 85 92 00 00
	00		 jne	 $LN5@s390_maddr
$LN6@s390_maddr:

; 339  :             )
; 340  :             {
; 341  :                 /* Does the page address match the one in the TLB? */
; 342  :                 /* (does a TLB entry exist for this page address?) */
; 343  :                 if (
; 344  :                     ((addr & TLBID_PAGEMASK) | regs->tlbID)
; 345  :                     ==

  00101	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00105	25 00 00 c0 7f	 and	 eax, 2143289344		; 7fc00000H
  0010a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	0b 81 58 b0 00
	00		 or	 eax, DWORD PTR [rcx+45144]
  00115	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  0011a	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0011f	3b 84 ca 60 d0
	00 00		 cmp	 eax, DWORD PTR [rdx+rcx*8+53344]
  00126	75 6b		 jne	 SHORT $LN7@s390_maddr

; 346  :                     regs->tlb.TLB_VADDR( tlbix )
; 347  :                 )
; 348  :                 {
; 349  :                     /* Is storage being accessed same way as before? */
; 350  :                     if (acctype & regs->tlb.acc[ tlbix ])

  00128	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0012d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  0013a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR acctype$[rsp]
  00141	23 c8		 and	 ecx, eax
  00143	8b c1		 mov	 eax, ecx
  00145	85 c0		 test	 eax, eax
  00147	74 4a		 je	 SHORT $LN8@s390_maddr

; 351  :                     {
; 352  :                         /*------------------------------------------*/
; 353  :                         /* TLB hit: use previously translated value */
; 354  :                         /*------------------------------------------*/
; 355  : 
; 356  :                         if (acctype & ACC_CHECK)

  00149	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  00150	83 e0 01	 and	 eax, 1
  00153	85 c0		 test	 eax, eax
  00155	74 1e		 je	 SHORT $LN9@s390_maddr

; 357  :                             regs->dat.storkey = regs->tlb.storkey[ tlbix ];

  00157	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0015c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00161	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00166	48 8b 84 c2 60
	30 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+77920]
  0016e	48 89 81 28 08
	00 00		 mov	 QWORD PTR [rcx+2088], rax
$LN9@s390_maddr:

; 358  : 
; 359  :                         maddr = MAINADDR( regs->tlb.main[tlbix], addr );

  00175	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0017a	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  0017e	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	48 8b 84 c2 60
	10 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+69728]
  0018b	48 33 c1	 xor	 rax, rcx
  0018e	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN8@s390_maddr:
$LN7@s390_maddr:
$LN5@s390_maddr:
$LN3@s390_maddr:
$LN2@s390_maddr:

; 360  :                     }
; 361  :                 }
; 362  :             }
; 363  :         }
; 364  :     }
; 365  : 
; 366  :     /*---------------------------------------*/
; 367  :     /* TLB miss: do full address translation */
; 368  :     /*---------------------------------------*/
; 369  :     if (!maddr)

  00193	48 83 7c 24 40
	00		 cmp	 QWORD PTR maddr$[rsp], 0
  00199	75 35		 jne	 SHORT $LN10@s390_maddr

; 370  :         maddr = ARCH_DEP( logical_to_main_l )( addr, arn, regs, acctype, akey, len );

  0019b	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a5	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  001ad	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  001b1	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acctype$[rsp]
  001b9	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001be	8b 54 24 70	 mov	 edx, DWORD PTR arn$[rsp]
  001c2	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  001c6	e8 00 00 00 00	 call	 s390_logical_to_main_l
  001cb	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN10@s390_maddr:

; 371  : 
; 372  : #if defined( FEATURE_073_TRANSACT_EXEC_FACILITY )
; 373  :     if (FACILITY_ENABLED( 073_TRANSACT_EXEC, regs ))
; 374  :     {
; 375  :         /* SA22-7832-12 Principles of Operation, page 5-99:
; 376  : 
; 377  :              "Storage accesses for instruction and DAT- and ART-
; 378  :               table fetches follow the non-transactional rules."
; 379  :         */
; 380  :         if (0
; 381  :             || !regs
; 382  :             || !regs->txf_tnd
; 383  :             || arn == USE_INST_SPACE    /* Instruction fetching */
; 384  :             || arn == USE_REAL_ADDR     /* Address translation  */
; 385  :         )
; 386  :             return maddr;
; 387  : 
; 388  :         /* Quick exit if NTSTG call */
; 389  :         if (regs->txf_NTSTG)
; 390  :         {
; 391  :             regs->txf_NTSTG = false;
; 392  :             return maddr;
; 393  :         }
; 394  : 
; 395  :         /* Translate to alternate TXF address */
; 396  :         maddr = TXF_MADDRL( addr, len, arn, regs, acctype, maddr );
; 397  :     }
; 398  : #endif
; 399  : 
; 400  :     return maddr;

  001d0	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]

; 401  : }

  001d5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d9	c3		 ret	 0
s390_maddr_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_storage_key_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
bits$ = 72
s390_or_storage_key_by_ptr PROC				; COMDAT

; 328  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 329  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  00020	48 2b c8	 sub	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx
  00026	48 c1 e0 0b	 shl	 rax, 11
  0002a	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 330  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 331  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 332  : #else
; 333  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0002f	0f b6 54 24 48	 movzx	 edx, BYTE PTR bits$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00039	e8 00 00 00 00	 call	 s390_or_4K_storage_key

; 334  : #endif
; 335  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
s390_or_storage_key_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s390_or_storage_key PROC				; COMDAT

; 290  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 291  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 292  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 293  : #else
; 294  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s390_or_4K_storage_key

; 295  : #endif
; 296  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s390_or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s390_or_4K_storage_key PROC				; COMDAT

; 242  :   inline void  ARCH_DEP( or_4K_storage_key )      (              U64 abs, BYTE bits ) {        ARCH_DEP( _or_storage_key      )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s390__or_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s390_or_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s390__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s390__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s390__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 50		 je	 SHORT $LN5@s390__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00046	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00049	0b c8		 or	 ecx, eax
  0004b	8b c1		 mov	 eax, ecx
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00052	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  00054	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00061	0b c8		 or	 ecx, eax
  00063	8b c1		 mov	 eax, ecx
  00065	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006a	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  0006c	eb 2c		 jmp	 SHORT $LN6@s390__or_s
$LN5@s390__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  0006e	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00078	e8 00 00 00 00	 call	 _get_storekey_ptr
  0007d	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  00082	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008f	0b c8		 or	 ecx, eax
  00091	8b c1		 mov	 eax, ecx
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00098	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s390__or_s:

; 202  :     }
; 203  : }

  0009a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009e	c3		 ret	 0
s390__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FFF PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FFF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FFF
$LN7@s390_1FFF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FFF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FFF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FFF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FFF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FFE PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FFE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FFE
$LN7@s390_1FFE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FFE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FFE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FFE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FFE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FFD PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FFD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FFD
$LN7@s390_1FFD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FFD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FFD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FFD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FFD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FFC PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FFC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FFC
$LN7@s390_1FFC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FFC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FFC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FFC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FFC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FFB PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FFB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FFB
$LN7@s390_1FFB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FFB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FFB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FFB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FFB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FFA PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FFA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FFA
$LN7@s390_1FFA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FFA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FFA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FFA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FFA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF9 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF9
$LN7@s390_1FF9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF8 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF8
$LN7@s390_1FF8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF7 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF7
$LN7@s390_1FF7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF6 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF6
$LN7@s390_1FF6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF5 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF5
$LN7@s390_1FF5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF4 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF4
$LN7@s390_1FF4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF3 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF3
$LN7@s390_1FF3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF2 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF2
$LN7@s390_1FF2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF1 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF1
$LN7@s390_1FF1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FF0 PROC

; 1486 : SLRgenr2( F )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FF0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FF0
$LN7@s390_1FF0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FF0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FF0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FF0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FF0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FEF PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FEF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FEF
$LN7@s390_1FEF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FEF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FEF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FEF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FEF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FEE PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FEE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FEE
$LN7@s390_1FEE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FEE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FEE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FEE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FEE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FED PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FED:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FED
$LN7@s390_1FED:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FED
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FED:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FED
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FED ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FEC PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FEC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FEC
$LN7@s390_1FEC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FEC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FEC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FEC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FEC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FEB PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FEB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FEB
$LN7@s390_1FEB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FEB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FEB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FEB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FEB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FEA PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FEA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FEA
$LN7@s390_1FEA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FEA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FEA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FEA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FEA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE9 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE9
$LN7@s390_1FE9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE8 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE8
$LN7@s390_1FE8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE7 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE7
$LN7@s390_1FE7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE6 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE6
$LN7@s390_1FE6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE5 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE5
$LN7@s390_1FE5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE4 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE4
$LN7@s390_1FE4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE3 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE3
$LN7@s390_1FE3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE2 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE2
$LN7@s390_1FE2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE1 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE1
$LN7@s390_1FE1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FE0 PROC

; 1485 : SLRgenr2( E )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FE0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FE0
$LN7@s390_1FE0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FE0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FE0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FE0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FE0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FDF PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FDF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FDF
$LN7@s390_1FDF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FDF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FDF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FDF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FDE PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FDE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FDE
$LN7@s390_1FDE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FDE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FDE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FDE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FDE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FDD PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FDD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FDD
$LN7@s390_1FDD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FDD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FDD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FDD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FDD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FDC PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FDC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FDC
$LN7@s390_1FDC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FDC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FDC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FDC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FDC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FDB PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FDB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FDB
$LN7@s390_1FDB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FDB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FDB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FDB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FDB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FDA PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FDA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FDA
$LN7@s390_1FDA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FDA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FDA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FDA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FDA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD9 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD9
$LN7@s390_1FD9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD8 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD8
$LN7@s390_1FD8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD7 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD7
$LN7@s390_1FD7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD6 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD6
$LN7@s390_1FD6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD5 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD5
$LN7@s390_1FD5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD4 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD4
$LN7@s390_1FD4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD3 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD3
$LN7@s390_1FD3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD2 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD2
$LN7@s390_1FD2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD1 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD1
$LN7@s390_1FD1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FD0 PROC

; 1484 : SLRgenr2( D )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FD0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FD0
$LN7@s390_1FD0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FD0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FD0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FD0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FD0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FCF PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FCF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FCF
$LN7@s390_1FCF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FCF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FCF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FCF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FCF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FCE PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FCE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FCE
$LN7@s390_1FCE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FCE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FCE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FCE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FCE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FCD PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FCD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FCD
$LN7@s390_1FCD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FCD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FCD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FCD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FCD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FCC PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FCC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FCC
$LN7@s390_1FCC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FCC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FCC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FCC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FCC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FCB PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FCB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FCB
$LN7@s390_1FCB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FCB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FCB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FCB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FCB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FCA PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FCA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FCA
$LN7@s390_1FCA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FCA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FCA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FCA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FCA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC9 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC9
$LN7@s390_1FC9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC8 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC8
$LN7@s390_1FC8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC7 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC7
$LN7@s390_1FC7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC6 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC6
$LN7@s390_1FC6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC5 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC5
$LN7@s390_1FC5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC4 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC4
$LN7@s390_1FC4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC3 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC3
$LN7@s390_1FC3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC2 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC2
$LN7@s390_1FC2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC1 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC1
$LN7@s390_1FC1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FC0 PROC

; 1483 : SLRgenr2( C )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FC0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FC0
$LN7@s390_1FC0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FC0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FC0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FC0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FC0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FBF PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FBF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FBF
$LN7@s390_1FBF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FBF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FBF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FBF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FBF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FBE PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FBE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FBE
$LN7@s390_1FBE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FBE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FBE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FBE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FBE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FBD PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FBD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FBD
$LN7@s390_1FBD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FBD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FBD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FBD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FBD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FBC PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FBC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FBC
$LN7@s390_1FBC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FBC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FBC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FBC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FBC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FBB PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FBB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FBB
$LN7@s390_1FBB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FBB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FBB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FBB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FBA PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FBA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FBA
$LN7@s390_1FBA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FBA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FBA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FBA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FBA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB9 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB9
$LN7@s390_1FB9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB8 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB8
$LN7@s390_1FB8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB7 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB7
$LN7@s390_1FB7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB6 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB6
$LN7@s390_1FB6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB5 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB5
$LN7@s390_1FB5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB4 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB4
$LN7@s390_1FB4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB3 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB3
$LN7@s390_1FB3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB2 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB2
$LN7@s390_1FB2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB1 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB1
$LN7@s390_1FB1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FB0 PROC

; 1482 : SLRgenr2( B )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FB0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FB0
$LN7@s390_1FB0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FB0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FB0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FB0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FB0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FAF PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FAF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FAF
$LN7@s390_1FAF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FAF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FAF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FAF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FAF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FAE PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FAE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FAE
$LN7@s390_1FAE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FAE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FAE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FAE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FAE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FAD PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FAD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FAD
$LN7@s390_1FAD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FAD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FAD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FAD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FAD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FAC PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FAC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FAC
$LN7@s390_1FAC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FAC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FAC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FAC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FAC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FAB PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FAB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FAB
$LN7@s390_1FAB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FAB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FAB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FAB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FAB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FAA PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FAA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FAA
$LN7@s390_1FAA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FAA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FAA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FAA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FAA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA9 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA9
$LN7@s390_1FA9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA8 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA8
$LN7@s390_1FA8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA7 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA7
$LN7@s390_1FA7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA6 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA6
$LN7@s390_1FA6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA5 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA5
$LN7@s390_1FA5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA4 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA4
$LN7@s390_1FA4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA3 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA3
$LN7@s390_1FA3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA2 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA2
$LN7@s390_1FA2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA1 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA1
$LN7@s390_1FA1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1FA0 PROC

; 1481 : SLRgenr2( A )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1FA0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1FA0
$LN7@s390_1FA0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1FA0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1FA0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1FA0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1FA0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F9F PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F9F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F9F
$LN7@s390_1F9F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F9F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F9F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F9F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F9F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F9E PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F9E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F9E
$LN7@s390_1F9E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F9E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F9E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F9E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F9E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F9D PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F9D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F9D
$LN7@s390_1F9D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F9D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F9D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F9D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F9D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F9C PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F9C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F9C
$LN7@s390_1F9C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F9C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F9C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F9C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F9C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F9B PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F9B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F9B
$LN7@s390_1F9B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F9B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F9B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F9B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F9B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F9A PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F9A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F9A
$LN7@s390_1F9A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F9A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F9A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F9A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F9A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F99 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F99:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F99
$LN7@s390_1F99:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F99
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F99:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F99
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F99 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F98 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F98:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F98
$LN7@s390_1F98:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F98
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F98:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F98
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F98 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F97 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F97:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F97
$LN7@s390_1F97:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F97
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F97:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F97
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F97 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F96 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F96:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F96
$LN7@s390_1F96:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F96
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F96:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F96
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F96 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F95 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F95:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F95
$LN7@s390_1F95:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F95
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F95:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F95
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F95 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F94 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F94:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F94
$LN7@s390_1F94:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F94
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F94:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F94
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F94 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F93 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F93:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F93
$LN7@s390_1F93:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F93
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F93:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F93
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F93 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F92 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F92:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F92
$LN7@s390_1F92:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F92
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F92:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F92
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F92 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F91 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F91:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F91
$LN7@s390_1F91:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F91
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F91:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F91
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F91 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F90 PROC

; 1480 : SLRgenr2( 9 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F90:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F90
$LN7@s390_1F90:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F90
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F90:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F90
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F90 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F8F PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F8F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F8F
$LN7@s390_1F8F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F8F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F8F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F8F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F8F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F8E PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F8E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F8E
$LN7@s390_1F8E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F8E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F8E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F8E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F8E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F8D PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F8D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F8D
$LN7@s390_1F8D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F8D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F8D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F8D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F8D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F8C PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F8C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F8C
$LN7@s390_1F8C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F8C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F8C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F8C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F8C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F8B PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F8B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F8B
$LN7@s390_1F8B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F8B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F8B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F8B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F8B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F8A PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F8A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F8A
$LN7@s390_1F8A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F8A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F8A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F8A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F8A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F89 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F89:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F89
$LN7@s390_1F89:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F89
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F89:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F89
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F89 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F88 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F88:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F88
$LN7@s390_1F88:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F88
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F88:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F88
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F88 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F87 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F87:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F87
$LN7@s390_1F87:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F87
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F87:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F87
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F87 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F86 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F86:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F86
$LN7@s390_1F86:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F86
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F86:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F86
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F85 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F85:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F85
$LN7@s390_1F85:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F85
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F85:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F85
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F85 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F84 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F84:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F84
$LN7@s390_1F84:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F84
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F84:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F84
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F84 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F83 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F83:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F83
$LN7@s390_1F83:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F83
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F83:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F83
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F83 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F82 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F82:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F82
$LN7@s390_1F82:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F82
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F82:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F82
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F82 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F81 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F81:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F81
$LN7@s390_1F81:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F81
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F81:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F81
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F81 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F80 PROC

; 1479 : SLRgenr2( 8 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F80:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F80
$LN7@s390_1F80:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F80
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F80:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F80
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F80 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F7F PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F7F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F7F
$LN7@s390_1F7F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F7F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F7F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F7F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F7F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F7E PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F7E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F7E
$LN7@s390_1F7E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F7E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F7E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F7E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F7E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F7D PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F7D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F7D
$LN7@s390_1F7D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F7D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F7D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F7D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F7D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F7C PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F7C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F7C
$LN7@s390_1F7C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F7C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F7C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F7C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F7C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F7B PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F7B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F7B
$LN7@s390_1F7B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F7B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F7B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F7B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F7B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F7A PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F7A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F7A
$LN7@s390_1F7A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F7A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F7A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F7A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F7A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F79 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F79:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F79
$LN7@s390_1F79:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F79
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F79:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F79
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F79 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F78 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F78:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F78
$LN7@s390_1F78:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F78
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F78:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F78
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F78 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F77 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F77:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F77
$LN7@s390_1F77:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F77
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F77:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F77
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F77 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F76 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F76:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F76
$LN7@s390_1F76:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F76
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F76:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F76
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F76 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F75 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F75:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F75
$LN7@s390_1F75:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F75
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F75:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F75
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F75 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F74 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F74:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F74
$LN7@s390_1F74:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F74
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F74:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F74
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F74 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F73 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F73:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F73
$LN7@s390_1F73:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F73
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F73:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F73
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F73 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F72 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F72:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F72
$LN7@s390_1F72:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F72
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F72:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F72
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F72 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F71 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F71:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F71
$LN7@s390_1F71:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F71
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F71:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F71
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F71 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F70 PROC

; 1478 : SLRgenr2( 7 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F70:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F70
$LN7@s390_1F70:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F70
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F70:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F70
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F70 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F6F PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F6F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F6F
$LN7@s390_1F6F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F6F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F6F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F6F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F6F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F6E PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F6E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F6E
$LN7@s390_1F6E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F6E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F6E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F6E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F6E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F6D PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F6D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F6D
$LN7@s390_1F6D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F6D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F6D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F6D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F6D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F6C PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F6C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F6C
$LN7@s390_1F6C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F6C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F6C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F6C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F6C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F6B PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F6B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F6B
$LN7@s390_1F6B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F6B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F6B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F6B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F6B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F6A PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F6A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F6A
$LN7@s390_1F6A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F6A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F6A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F6A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F6A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F69 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F69:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F69
$LN7@s390_1F69:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F69
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F69:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F69
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F69 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F68 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F68:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F68
$LN7@s390_1F68:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F68
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F68:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F68
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F68 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F67 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F67:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F67
$LN7@s390_1F67:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F67
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F67:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F67
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F67 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F66 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F66:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F66
$LN7@s390_1F66:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F66
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F66:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F66
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F66 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F65 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F65:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F65
$LN7@s390_1F65:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F65
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F65:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F65
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F65 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F64 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F64:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F64
$LN7@s390_1F64:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F64
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F64:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F64
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F63 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F63:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F63
$LN7@s390_1F63:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F63
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F63:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F63
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F63 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F62 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F62:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F62
$LN7@s390_1F62:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F62
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F62:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F62
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F62 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F61 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F61:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F61
$LN7@s390_1F61:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F61
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F61:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F61
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F61 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F60 PROC

; 1477 : SLRgenr2( 6 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F60:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F60
$LN7@s390_1F60:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F60
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F60:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F60
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F60 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F5F PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F5F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F5F
$LN7@s390_1F5F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F5F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F5F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F5F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F5F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F5E PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F5E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F5E
$LN7@s390_1F5E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F5E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F5E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F5E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F5E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F5D PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F5D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F5D
$LN7@s390_1F5D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F5D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F5D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F5D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F5D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F5C PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F5C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F5C
$LN7@s390_1F5C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F5C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F5C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F5C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F5C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F5B PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F5B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F5B
$LN7@s390_1F5B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F5B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F5B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F5B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F5B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F5A PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F5A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F5A
$LN7@s390_1F5A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F5A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F5A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F5A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F5A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F59 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F59:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F59
$LN7@s390_1F59:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F59
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F59:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F59
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F59 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F58 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F58:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F58
$LN7@s390_1F58:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F58
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F58:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F58
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F58 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F57 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F57:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F57
$LN7@s390_1F57:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F57
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F57:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F57
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F57 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F56 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F56:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F56
$LN7@s390_1F56:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F56
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F56:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F56
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F56 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F55 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F55:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F55
$LN7@s390_1F55:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F55
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F55:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F55
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F55 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F54 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F54:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F54
$LN7@s390_1F54:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F54
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F54:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F54
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F54 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F53 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F53:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F53
$LN7@s390_1F53:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F53
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F53:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F53
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F53 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F52 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F52:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F52
$LN7@s390_1F52:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F52
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F52:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F52
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F52 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F51 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F51:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F51
$LN7@s390_1F51:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F51
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F51:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F51
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F51 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F50 PROC

; 1476 : SLRgenr2( 5 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F50:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F50
$LN7@s390_1F50:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F50
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F50:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F50
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F50 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F4F PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F4F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F4F
$LN7@s390_1F4F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F4F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F4F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F4F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F4F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F4E PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F4E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F4E
$LN7@s390_1F4E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F4E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F4E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F4E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F4E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F4D PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F4D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F4D
$LN7@s390_1F4D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F4D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F4D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F4D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F4D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F4C PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F4C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F4C
$LN7@s390_1F4C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F4C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F4C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F4C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F4C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F4B PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F4B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F4B
$LN7@s390_1F4B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F4B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F4B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F4B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F4B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F4A PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F4A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F4A
$LN7@s390_1F4A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F4A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F4A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F4A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F4A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F49 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F49:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F49
$LN7@s390_1F49:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F49
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F49:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F49
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F49 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F48 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F48:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F48
$LN7@s390_1F48:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F48
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F48:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F48
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F48 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F47 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F47:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F47
$LN7@s390_1F47:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F47
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F47:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F47
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F47 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F46 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F46:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F46
$LN7@s390_1F46:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F46
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F46:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F46
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F46 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F45 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F45:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F45
$LN7@s390_1F45:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F45
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F45:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F45
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F45 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F44 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F44:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F44
$LN7@s390_1F44:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F44
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F44:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F44
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F44 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F43 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F43:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F43
$LN7@s390_1F43:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F43
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F43:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F43
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F43 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F42 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F42:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F42
$LN7@s390_1F42:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F42
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F42:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F42
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F42 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F41 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F41:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F41
$LN7@s390_1F41:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F41
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F41:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F41
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F41 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F40 PROC

; 1475 : SLRgenr2( 4 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F40:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F40
$LN7@s390_1F40:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F40
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F40:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F40
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F40 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F3F PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F3F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F3F
$LN7@s390_1F3F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F3F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F3F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F3F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F3F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F3E PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F3E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F3E
$LN7@s390_1F3E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F3E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F3E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F3E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F3E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F3D PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F3D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F3D
$LN7@s390_1F3D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F3D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F3D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F3D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F3D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F3C PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F3C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F3C
$LN7@s390_1F3C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F3C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F3C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F3C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F3C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F3B PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F3B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F3B
$LN7@s390_1F3B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F3B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F3B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F3B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F3B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F3A PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F3A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F3A
$LN7@s390_1F3A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F3A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F3A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F3A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F3A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F39 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F39:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F39
$LN7@s390_1F39:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F39
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F39:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F39
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F39 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F38 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F38:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F38
$LN7@s390_1F38:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F38
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F38:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F38
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F38 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F37 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F37:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F37
$LN7@s390_1F37:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F37
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F37:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F37
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F37 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F36 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F36:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F36
$LN7@s390_1F36:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F36
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F36:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F36
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F35 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F35:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F35
$LN7@s390_1F35:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F35
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F35:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F35
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F35 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F34 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F34:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F34
$LN7@s390_1F34:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F34
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F34:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F34
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F34 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F33 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F33:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F33
$LN7@s390_1F33:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F33
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F33:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F33
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F33 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F32 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F32:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F32
$LN7@s390_1F32:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F32
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F32:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F32
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F31 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F31:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F31
$LN7@s390_1F31:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F31
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F31:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F31
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F31 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F30 PROC

; 1474 : SLRgenr2( 3 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F30:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F30
$LN7@s390_1F30:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F30
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F30:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F30
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F30 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F2F PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F2F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F2F
$LN7@s390_1F2F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F2F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F2F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F2F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F2F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F2E PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F2E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F2E
$LN7@s390_1F2E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F2E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F2E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F2E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F2E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F2D PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F2D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F2D
$LN7@s390_1F2D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F2D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F2D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F2D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F2C PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F2C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F2C
$LN7@s390_1F2C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F2C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F2C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F2C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F2C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F2B PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F2B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F2B
$LN7@s390_1F2B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F2B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F2B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F2B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F2B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F2A PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F2A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F2A
$LN7@s390_1F2A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F2A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F2A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F2A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F2A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F29 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F29:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F29
$LN7@s390_1F29:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F29
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F29:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F29
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F29 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F28 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F28:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F28
$LN7@s390_1F28:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F28
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F28:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F28
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F28 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F27 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F27:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F27
$LN7@s390_1F27:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F27
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F27:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F27
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F27 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F26 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F26:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F26
$LN7@s390_1F26:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F26
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F26:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F26
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F26 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F25 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F25:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F25
$LN7@s390_1F25:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F25
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F25:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F25
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F25 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F24 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F24:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F24
$LN7@s390_1F24:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F24
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F24:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F24
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F23 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F23:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F23
$LN7@s390_1F23:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F23
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F23:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F23
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F23 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F22 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F22:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F22
$LN7@s390_1F22:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F22
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F22:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F22
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F22 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F21 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F21:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F21
$LN7@s390_1F21:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F21
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F21:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F21
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F21 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F20 PROC

; 1473 : SLRgenr2( 2 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F20:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F20
$LN7@s390_1F20:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F20
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F20:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F20
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F1F PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F1F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F1F
$LN7@s390_1F1F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F1F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F1F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F1F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F1F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F1E PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F1E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F1E
$LN7@s390_1F1E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F1E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F1E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F1E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F1E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F1D PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F1D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F1D
$LN7@s390_1F1D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F1D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F1D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F1D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F1D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F1C PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F1C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F1C
$LN7@s390_1F1C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F1C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F1C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F1C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F1C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F1B PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F1B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F1B
$LN7@s390_1F1B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F1B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F1B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F1B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F1B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F1A PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F1A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F1A
$LN7@s390_1F1A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F1A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F1A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F1A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F1A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F19 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F19:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F19
$LN7@s390_1F19:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F19
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F19:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F19
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F19 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F18 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F18:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F18
$LN7@s390_1F18:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F18
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F18:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F18
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F18 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F17 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F17:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F17
$LN7@s390_1F17:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F17
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F17:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F17
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F17 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F16 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F16:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F16
$LN7@s390_1F16:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F16
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F16:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F16
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F15 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F15:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F15
$LN7@s390_1F15:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F15
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F15:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F15
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F15 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F14 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F14:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F14
$LN7@s390_1F14:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F14
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F14:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F14
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F14 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F13 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F13:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F13
$LN7@s390_1F13:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F13
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F13:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F13
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F13 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F12 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F12:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F12
$LN7@s390_1F12:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F12
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F12:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F12
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F11 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F11:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F11
$LN7@s390_1F11:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F11
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F11:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F11
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F11 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F10 PROC

; 1472 : SLRgenr2( 1 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F10:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F10
$LN7@s390_1F10:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F10
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F10:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F10
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F0F PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F0F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F0F
$LN7@s390_1F0F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F0F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F0F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F0F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F0F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F0E PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F0E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F0E
$LN7@s390_1F0E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F0E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F0E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F0E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F0E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F0D PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F0D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F0D
$LN7@s390_1F0D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F0D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F0D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F0D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F0D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F0C PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F0C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F0C
$LN7@s390_1F0C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F0C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F0C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F0C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F0C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F0B PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F0B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F0B
$LN7@s390_1F0B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F0B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F0B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F0B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F0B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F0A PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F0A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F0A
$LN7@s390_1F0A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F0A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F0A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F0A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F0A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F09 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F09:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F09
$LN7@s390_1F09:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F09
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F09:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F09
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F09 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F08 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F08:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F08
$LN7@s390_1F08:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F08
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F08:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F08
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F08 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F07 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F07:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F07
$LN7@s390_1F07:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F07
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F07:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F07
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F07 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F06 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F06:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F06
$LN7@s390_1F06:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F06
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F06:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F06
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F06 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F05 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F05:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F05
$LN7@s390_1F05:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F05
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F05:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F05
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F05 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F04 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F04:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F04
$LN7@s390_1F04:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F04
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F04:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F04
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F04 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F03 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F03:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F03
$LN7@s390_1F03:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F03
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F03:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F03
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F03 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F02 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F02:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F02
$LN7@s390_1F02:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F02
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F02:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F02
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F02 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F01 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F01:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F01
$LN7@s390_1F01:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F01
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F01:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F01
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F01 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv86 = 32
inst$ = 64
regs$ = 72
s390_1F00 PROC

; 1471 : SLRgenr2( 0 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_1F00:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_1F00
$LN7@s390_1F00:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN8@s390_1F00
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s390_1F00:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_1F00
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 20	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
s390_1F00 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9101 PROC

; 1720 : TMgen( 01 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9101
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9101:
$LN4@s390_9101:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9101
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9101:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9101
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	83 e0 01	 and	 eax, 1
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN7@s390_9101
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cd	eb 09		 jmp	 SHORT $LN8@s390_9101
$LN7@s390_9101:
  000cf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9101:
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
s390_9101 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9102 PROC

; 1719 : TMgen( 02 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9102
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9102:
$LN4@s390_9102:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9102
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9102:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9102
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	83 e0 02	 and	 eax, 2
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN7@s390_9102
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cd	eb 09		 jmp	 SHORT $LN8@s390_9102
$LN7@s390_9102:
  000cf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9102:
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
s390_9102 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9104 PROC

; 1718 : TMgen( 04 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9104
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9104:
$LN4@s390_9104:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9104
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9104:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9104
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	83 e0 04	 and	 eax, 4
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN7@s390_9104
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cd	eb 09		 jmp	 SHORT $LN8@s390_9104
$LN7@s390_9104:
  000cf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9104:
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
s390_9104 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9108 PROC

; 1717 : TMgen( 08 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9108
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9108:
$LN4@s390_9108:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9108
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9108:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9108
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	83 e0 08	 and	 eax, 8
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN7@s390_9108
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cd	eb 09		 jmp	 SHORT $LN8@s390_9108
$LN7@s390_9108:
  000cf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9108:
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
s390_9108 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9110 PROC

; 1716 : TMgen( 10 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9110
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9110:
$LN4@s390_9110:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9110
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9110:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9110
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	83 e0 10	 and	 eax, 16
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN7@s390_9110
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cd	eb 09		 jmp	 SHORT $LN8@s390_9110
$LN7@s390_9110:
  000cf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9110:
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
s390_9110 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9120 PROC

; 1715 : TMgen( 20 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9120
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9120:
$LN4@s390_9120:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9120
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9120:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9120
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	83 e0 20	 and	 eax, 32			; 00000020H
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN7@s390_9120
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cd	eb 09		 jmp	 SHORT $LN8@s390_9120
$LN7@s390_9120:
  000cf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9120:
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
s390_9120 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9140 PROC

; 1714 : TMgen( 40 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9140
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9140:
$LN4@s390_9140:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9140
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9140:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9140
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	83 e0 40	 and	 eax, 64			; 00000040H
  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN7@s390_9140
  000c4	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cd	eb 09		 jmp	 SHORT $LN8@s390_9140
$LN7@s390_9140:
  000cf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d4	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9140:
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
s390_9140 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s390_9180 PROC

; 1713 : TMgen( 80 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 34		 je	 SHORT $LN5@s390_9180
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_9180:
$LN4@s390_9180:
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN6@s390_9180
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_9180:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_9180
  000a8	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000ad	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b5	e8 00 00 00 00	 call	 s390_vfetchb
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000c2	85 c0		 test	 eax, eax
  000c4	74 0b		 je	 SHORT $LN7@s390_9180
  000c6	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000cb	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000cf	eb 09		 jmp	 SHORT $LN8@s390_9180
$LN7@s390_9180:
  000d1	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d6	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_9180:
  000da	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000de	c3		 ret	 0
s390_9180 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
nodeaddr$ = 32
nodecode$ = 36
index$ = 40
nodedata$ = 44
inst$ = 64
regs$ = 72
s390_update_tree PROC

; 2168 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390_updat:

; 2169 : GREG    index;                          /* tree index                */
; 2170 : GREG    nodecode;                       /* current node's codeword   */
; 2171 : GREG    nodedata;                       /* current node's other data */
; 2172 : VADR    nodeaddr;                       /* work addr of current node */
; 2173 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2174 : BYTE    a64 = regs->psw.amode64;        /* 64-bit mode flag          */
; 2175 : #endif
; 2176 : #if defined( FEATURE_PER1 )
; 2177 : U16     rmask = 0x0000;
; 2178 : #endif
; 2179 : 
; 2180 :     E(inst, regs);

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s390_updat
$LN7@s390_updat:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s390_updat
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s390_updat:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s390_updat

; 2181 :     PER_ZEROADDR_CHECK( regs, 4 );
; 2182 : 
; 2183 :     TXFC_INSTR_CHECK( regs );
; 2184 : 
; 2185 :     /*
; 2186 :     **  GR0, GR1    node values (codeword and other data) of node
; 2187 :     **              with "highest encountered codeword value"
; 2188 :     **  GR2, GR3    node values (codeword and other data) from whichever
; 2189 :     **              node we happened to have encountered that had a code-
; 2190 :     **              word value equal to our current "highest encountered
; 2191 :     **              codeword value" (e.g. GR0)  (cc0 only)
; 2192 :     **  GR4         pointer to one node BEFORE the beginning of the tree
; 2193 :     **  GR5         current node index (tree displacement to current node)
; 2194 :     */
; 2195 : 
; 2196 :     /* Check GR4, GR5 for proper alignment */
; 2197 :     if (0
; 2198 :         || ( GR_A(4,regs) & UPT_ALIGN_MASK )
; 2199 :         || ( GR_A(5,regs) & UPT_ALIGN_MASK )

  00043	33 c0		 xor	 eax, eax
  00045	85 c0		 test	 eax, eax
  00047	75 38		 jne	 SHORT $LN13@s390_updat
  00049	b8 08 00 00 00	 mov	 eax, 8
  0004e	48 6b c0 04	 imul	 rax, rax, 4
  00052	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00057	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0005e	83 e0 07	 and	 eax, 7
  00061	85 c0		 test	 eax, eax
  00063	75 1c		 jne	 SHORT $LN13@s390_updat
  00065	b8 08 00 00 00	 mov	 eax, 8
  0006a	48 6b c0 05	 imul	 rax, rax, 5
  0006e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00073	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0007a	83 e0 07	 and	 eax, 7
  0007d	85 c0		 test	 eax, eax
  0007f	74 15		 je	 SHORT $LN12@s390_updat
$LN13@s390_updat:

; 2200 :     )
; 2201 :         regs->program_interrupt (regs, PGM_SPECIFICATION_EXCEPTION);

  00081	ba 06 00 00 00	 mov	 edx, 6
  00086	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00090	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN12@s390_updat:
$LN8@s390_updat:

; 2202 : 
; 2203 :     /* Bubble the tree by moving successively higher nodes towards the
; 2204 :        front (beginning) of the tree, only stopping whenever we either:
; 2205 : 
; 2206 :             1. reach the beginning of the tree, -OR-
; 2207 :             2. encounter a node with a negative codeword value, -OR-
; 2208 :             3. encounter a node whose codeword is equal to
; 2209 :                our current "highest encountered codeword".
; 2210 : 
; 2211 :        Thus, when we're done, GR0 & GR1 will then contain the node values
; 2212 :        of the node with the highest encountered codeword value, and all
; 2213 :        other traversed nodes will have been reordered into descending code-
; 2214 :        word sequence (i.e. from highest codeword value to lowest codeword
; 2215 :        value; this is after all an instruction used for sorting/merging).
; 2216 :     */
; 2217 : 
; 2218 :     for (;;)
; 2219 :     {
; 2220 :         /* Calculate index value of next node to be examined (half
; 2221 :            as far from beginning of tree to where we currently are)
; 2222 :         */
; 2223 :         index = (GR_A(5,regs) >> 1) & UPT_SHIFT_MASK;

  00096	b8 08 00 00 00	 mov	 eax, 8
  0009b	48 6b c0 05	 imul	 rax, rax, 5
  0009f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  000ab	d1 e8		 shr	 eax, 1
  000ad	83 e0 f8	 and	 eax, -8			; fffffff8H
  000b0	89 44 24 28	 mov	 DWORD PTR index$[rsp], eax

; 2224 : 
; 2225 :         /* Exit with cc1 when we've gone as far as we can go */
; 2226 :         if ( !index )

  000b4	83 7c 24 28 00	 cmp	 DWORD PTR index$[rsp], 0
  000b9	75 0e		 jne	 SHORT $LN14@s390_updat

; 2227 :         {
; 2228 :             regs->psw.cc = 1;

  000bb	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c0	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2229 :             break;

  000c4	e9 d6 01 00 00	 jmp	 $LN9@s390_updat
$LN14@s390_updat:

; 2230 :         }
; 2231 : 
; 2232 :         /* Exit with cc3 when we encounter a negative codeword value
; 2233 :            (i.e. any codeword value with its highest-order bit on)
; 2234 :         */
; 2235 :         if ( GR_A(0,regs) & UPT_HIGH_BIT )

  000c9	b8 08 00 00 00	 mov	 eax, 8
  000ce	48 6b c0 00	 imul	 rax, rax, 0
  000d2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  000de	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  000e3	85 c0		 test	 eax, eax
  000e5	74 0e		 je	 SHORT $LN15@s390_updat

; 2236 :         {
; 2237 :             regs->psw.cc = 3;

  000e7	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ec	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 2238 :             break;

  000f0	e9 aa 01 00 00	 jmp	 $LN9@s390_updat
$LN15@s390_updat:

; 2239 :         }
; 2240 : 
; 2241 :         /* Retrieve this node's values for closer examination... */
; 2242 : 
; 2243 :         nodeaddr = regs->GR(4) + index;

  000f5	b8 08 00 00 00	 mov	 eax, 8
  000fa	48 6b c0 04	 imul	 rax, rax, 4
  000fe	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00103	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0010a	03 44 24 28	 add	 eax, DWORD PTR index$[rsp]
  0010e	89 44 24 20	 mov	 DWORD PTR nodeaddr$[rsp], eax

; 2244 : 
; 2245 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2246 :         if ( a64 )
; 2247 :         {
; 2248 :             nodecode = ARCH_DEP(vfetch8) ( (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2249 :             nodedata = ARCH_DEP(vfetch8) ( (nodeaddr+8) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2250 :         }
; 2251 :         else
; 2252 : #endif
; 2253 :         {
; 2254 :             nodecode = ARCH_DEP(vfetch4) ( (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  00112	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00117	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0011d	8b 4c 24 20	 mov	 ecx, DWORD PTR nodeaddr$[rsp]
  00121	23 c8		 and	 ecx, eax
  00123	8b c1		 mov	 eax, ecx
  00125	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  0012a	ba 04 00 00 00	 mov	 edx, 4
  0012f	8b c8		 mov	 ecx, eax
  00131	e8 00 00 00 00	 call	 s390_vfetch4
  00136	89 44 24 24	 mov	 DWORD PTR nodecode$[rsp], eax

; 2255 :             nodedata = ARCH_DEP(vfetch4) ( (nodeaddr+4) & ADDRESS_MAXWRAP(regs), AR4, regs );

  0013a	8b 44 24 20	 mov	 eax, DWORD PTR nodeaddr$[rsp]
  0013e	83 c0 04	 add	 eax, 4
  00141	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00146	23 81 90 00 00
	00		 and	 eax, DWORD PTR [rcx+144]
  0014c	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00151	ba 04 00 00 00	 mov	 edx, 4
  00156	8b c8		 mov	 ecx, eax
  00158	e8 00 00 00 00	 call	 s390_vfetch4
  0015d	89 44 24 2c	 mov	 DWORD PTR nodedata$[rsp], eax

; 2256 :         }
; 2257 : 
; 2258 :         /* GR5 must remain UNCHANGED if the execution of a unit of operation
; 2259 :            is nullified or suppressed! Thus it must ONLY be updated/committed
; 2260 :            AFTER we've successfully retrieved the node data (since the storage
; 2261 :            access could cause a program-check thereby nullifying/suppressing
; 2262 :            the instruction's "current unit of operation")
; 2263 :         */
; 2264 :         SET_GR_A(5,regs,index);     // (do AFTER node data is accessed!)

  00161	b8 08 00 00 00	 mov	 eax, 8
  00166	48 6b c0 05	 imul	 rax, rax, 5
  0016a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0016f	8b 54 24 28	 mov	 edx, DWORD PTR index$[rsp]
  00173	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2265 : #if defined( FEATURE_PER1 )
; 2266 :         rmask |= PER_GRA_MASK( 5 );
; 2267 : #endif
; 2268 : 
; 2269 :         /* Exit with cc0 whenever we reach a node whose codeword is equal
; 2270 :            to our current "highest encountered" codeword value (i.e. any
; 2271 :            node whose codeword matches our current "highest" (GR0) value)
; 2272 :         */
; 2273 :         if ( nodecode == GR_A(0,regs) )

  0017a	b8 08 00 00 00	 mov	 eax, 8
  0017f	48 6b c0 00	 imul	 rax, rax, 0
  00183	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00188	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0018f	39 44 24 24	 cmp	 DWORD PTR nodecode$[rsp], eax
  00193	75 40		 jne	 SHORT $LN16@s390_updat

; 2274 :         {
; 2275 :             /* Load GR2 and GR3 with the equal codeword node's values */
; 2276 :             SET_GR_A(2,regs,nodecode);

  00195	b8 08 00 00 00	 mov	 eax, 8
  0019a	48 6b c0 02	 imul	 rax, rax, 2
  0019e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  001a3	8b 54 24 24	 mov	 edx, DWORD PTR nodecode$[rsp]
  001a7	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2277 :             SET_GR_A(3,regs,nodedata);

  001ae	b8 08 00 00 00	 mov	 eax, 8
  001b3	48 6b c0 03	 imul	 rax, rax, 3
  001b7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  001bc	8b 54 24 2c	 mov	 edx, DWORD PTR nodedata$[rsp]
  001c0	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2278 :             regs->psw.cc = 0;

  001c7	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  001cc	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2279 : #if defined( FEATURE_PER1 )
; 2280 :             rmask |= PER_GRA_MASK2( 2, 3 );
; 2281 :             PER_GRA_CHECK( regs, rmask );
; 2282 : #endif
; 2283 :             return;

  001d0	e9 e3 00 00 00	 jmp	 $LN1@s390_updat
$LN16@s390_updat:

; 2284 :         }
; 2285 : 
; 2286 :         /* Keep resequencing the tree's nodes, moving successively higher
; 2287 :            nodes to the front (beginning of tree)...
; 2288 :         */
; 2289 :         if ( nodecode < GR_A(0,regs) )

  001d5	b8 08 00 00 00	 mov	 eax, 8
  001da	48 6b c0 00	 imul	 rax, rax, 0
  001de	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  001e3	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  001ea	39 44 24 24	 cmp	 DWORD PTR nodecode$[rsp], eax
  001ee	73 05		 jae	 SHORT $LN17@s390_updat

; 2290 :             continue;

  001f0	e9 a1 fe ff ff	 jmp	 $LN8@s390_updat
$LN17@s390_updat:

; 2291 : 
; 2292 :         /* This node has a codeword value higher than our currently saved
; 2293 :            highest encountered codeword value (GR0). Swap our GR0/1 values
; 2294 :            with this node's values, such that GR0/1 always hold the values
; 2295 :            from the node with the highest encountered codeword value...
; 2296 :         */
; 2297 : 
; 2298 :         /* Store obsolete GR0 and GR1 values into this node's entry */
; 2299 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2300 :         if ( a64 )
; 2301 :         {
; 2302 :             ARCH_DEP(vstore8) ( GR_A(0,regs), (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2303 :             ARCH_DEP(vstore8) ( GR_A(1,regs), (nodeaddr+8) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2304 :         }
; 2305 :         else
; 2306 : #endif
; 2307 :         {
; 2308 :             ARCH_DEP(vstore4) ( GR_A(0,regs), (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  001f5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  001fa	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00200	8b 4c 24 20	 mov	 ecx, DWORD PTR nodeaddr$[rsp]
  00204	23 c8		 and	 ecx, eax
  00206	8b c1		 mov	 eax, ecx
  00208	b9 08 00 00 00	 mov	 ecx, 8
  0020d	48 6b c9 00	 imul	 rcx, rcx, 0
  00211	4c 8b 4c 24 48	 mov	 r9, QWORD PTR regs$[rsp]
  00216	41 b8 04 00 00
	00		 mov	 r8d, 4
  0021c	8b d0		 mov	 edx, eax
  0021e	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00223	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  0022a	e8 00 00 00 00	 call	 s390_vstore4

; 2309 :             ARCH_DEP(vstore4) ( GR_A(1,regs), (nodeaddr+4) & ADDRESS_MAXWRAP(regs), AR4, regs );

  0022f	8b 44 24 20	 mov	 eax, DWORD PTR nodeaddr$[rsp]
  00233	83 c0 04	 add	 eax, 4
  00236	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0023b	23 81 90 00 00
	00		 and	 eax, DWORD PTR [rcx+144]
  00241	b9 08 00 00 00	 mov	 ecx, 8
  00246	48 6b c9 01	 imul	 rcx, rcx, 1
  0024a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR regs$[rsp]
  0024f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00255	8b d0		 mov	 edx, eax
  00257	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  0025c	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  00263	e8 00 00 00 00	 call	 s390_vstore4

; 2310 :         }
; 2311 : 
; 2312 :         /* Update GR0 and GR1 with the new "highest encountered" values */
; 2313 :         SET_GR_A(0,regs,nodecode);

  00268	b8 08 00 00 00	 mov	 eax, 8
  0026d	48 6b c0 00	 imul	 rax, rax, 0
  00271	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00276	8b 54 24 24	 mov	 edx, DWORD PTR nodecode$[rsp]
  0027a	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2314 :         SET_GR_A(1,regs,nodedata);

  00281	b8 08 00 00 00	 mov	 eax, 8
  00286	48 6b c0 01	 imul	 rax, rax, 1
  0028a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0028f	8b 54 24 2c	 mov	 edx, DWORD PTR nodedata$[rsp]
  00293	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2315 : #if defined( FEATURE_PER1 )
; 2316 :         rmask |= PER_GRA_MASK2( 0, 1 );
; 2317 : #endif
; 2318 :     }

  0029a	e9 f7 fd ff ff	 jmp	 $LN8@s390_updat
$LN9@s390_updat:

; 2319 : 
; 2320 :     /* Commit GR5 with the actual index value we stopped on */
; 2321 :     SET_GR_A(5,regs,index);

  0029f	b8 08 00 00 00	 mov	 eax, 8
  002a4	48 6b c0 05	 imul	 rax, rax, 5
  002a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  002ad	8b 54 24 28	 mov	 edx, DWORD PTR index$[rsp]
  002b1	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN1@s390_updat:

; 2322 : 
; 2323 : #if defined( FEATURE_PER1 )
; 2324 :     /* Check for PER 1 GRA event */
; 2325 :     rmask |= PER_GRA_MASK( 5 );
; 2326 :     PER_GRA_CHECK( regs, rmask );
; 2327 : #endif
; 2328 : }

  002b8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002bc	c3		 ret	 0
s390_update_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 48
effective_addr1$ = 52
rbyte$ = 56
effective_addr2$ = 60
lbyte$ = 64
i$ = 68
b1$ = 72
b2$ = 76
temp$1 = 80
l1$ = 84
l2$ = 88
j$ = 92
tv180 = 96
inst$ = 128
regs$ = 136
s390_unpack PROC

; 2098 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2099 : int     l1, l2;                         /* Register numbers          */
; 2100 : int     b1, b2;                         /* Base registers            */
; 2101 : VADR    effective_addr1,
; 2102 :         effective_addr2;                /* Effective addressES       */
; 2103 : int     i, j;                           /* Loop counters             */
; 2104 : BYTE    sbyte;                          /* Source operand byte       */
; 2105 : BYTE    rbyte;                          /* Right result byte of pair */
; 2106 : BYTE    lbyte;                          /* Left result byte of pair  */
; 2107 : 
; 2108 :     SS(inst, regs, l1, l2, b1, effective_addr1, b2, effective_addr2);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 50	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003a	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  0003e	c1 e8 0c	 shr	 eax, 12
  00041	83 e0 0f	 and	 eax, 15
  00044	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax
  00048	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 10	 shr	 eax, 16
  0004f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00054	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00058	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  0005c	c1 e8 1c	 shr	 eax, 28
  0005f	83 e0 0f	 and	 eax, 15
  00062	89 44 24 48	 mov	 DWORD PTR b1$[rsp], eax
  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00077	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007b	83 e0 0f	 and	 eax, 15
  0007e	89 44 24 58	 mov	 DWORD PTR l2$[rsp], eax
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00093	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00097	c1 f8 04	 sar	 eax, 4
  0009a	83 e0 0f	 and	 eax, 15
  0009d	89 44 24 54	 mov	 DWORD PTR l1$[rsp], eax
  000a1	83 7c 24 48 00	 cmp	 DWORD PTR b1$[rsp], 0
  000a6	74 3a		 je	 SHORT $LN8@s390_unpac
  000a8	48 63 44 24 48	 movsxd	 rax, DWORD PTR b1$[rsp]
  000ad	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000bc	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000c0	03 c8		 add	 ecx, eax
  000c2	8b c1		 mov	 eax, ecx
  000c4	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000c8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000d6	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000da	23 c8		 and	 ecx, eax
  000dc	8b c1		 mov	 eax, ecx
  000de	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s390_unpac:
  000e2	83 7c 24 4c 00	 cmp	 DWORD PTR b2$[rsp], 0
  000e7	74 3a		 je	 SHORT $LN9@s390_unpac
  000e9	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b2$[rsp]
  000ee	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000fd	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00101	03 c8		 add	 ecx, eax
  00103	8b c1		 mov	 eax, ecx
  00105	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00109	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00111	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00117	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0011b	23 c8		 and	 ecx, eax
  0011d	8b c1		 mov	 eax, ecx
  0011f	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s390_unpac:
$LN4@s390_unpac:
  00123	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0012f	48 83 c0 06	 add	 rax, 6
  00133	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0013b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0013f	33 c0		 xor	 eax, eax
  00141	83 f8 06	 cmp	 eax, 6
  00144	74 0f		 je	 SHORT $LN10@s390_unpac
  00146	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0014e	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s390_unpac:
  00155	33 c0		 xor	 eax, eax
  00157	85 c0		 test	 eax, eax
  00159	75 c8		 jne	 SHORT $LN4@s390_unpac

; 2109 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 2110 :     TXFC_INSTR_CHECK( regs );
; 2111 : 
; 2112 :     /* If operand 1 crosses a page, make sure both pages are accessible */
; 2113 :     if((effective_addr1 & PAGEFRAME_PAGEMASK) !=

  0015b	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0015f	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00164	8b 4c 24 54	 mov	 ecx, DWORD PTR l1$[rsp]
  00168	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0016c	03 d1		 add	 edx, ecx
  0016e	8b ca		 mov	 ecx, edx
  00170	81 e1 00 f0 ff
	7f		 and	 ecx, 2147479552		; 7ffff000H
  00176	3b c1		 cmp	 eax, ecx
  00178	74 25		 je	 SHORT $LN11@s390_unpac

; 2114 :         ((effective_addr1 + l1) & PAGEFRAME_PAGEMASK))
; 2115 :         ARCH_DEP(validate_operand) (effective_addr1, b1, l1, ACCTYPE_WRITE_SKP, regs);

  0017a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00182	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00187	41 b9 01 00 00
	00		 mov	 r9d, 1
  0018d	44 8b 44 24 54	 mov	 r8d, DWORD PTR l1$[rsp]
  00192	8b 54 24 48	 mov	 edx, DWORD PTR b1$[rsp]
  00196	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0019a	e8 00 00 00 00	 call	 s390_validate_operand
$LN11@s390_unpac:

; 2116 : 
; 2117 :     /* If operand 2 crosses a page, make sure both pages are accessible */
; 2118 :     if((effective_addr2 & PAGEFRAME_PAGEMASK) !=

  0019f	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  001a3	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  001a8	8b 4c 24 58	 mov	 ecx, DWORD PTR l2$[rsp]
  001ac	8b 54 24 3c	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  001b0	03 d1		 add	 edx, ecx
  001b2	8b ca		 mov	 ecx, edx
  001b4	81 e1 00 f0 ff
	7f		 and	 ecx, 2147479552		; 7ffff000H
  001ba	3b c1		 cmp	 eax, ecx
  001bc	74 25		 je	 SHORT $LN12@s390_unpac

; 2119 :         ((effective_addr2 + l2) & PAGEFRAME_PAGEMASK))
; 2120 :         ARCH_DEP(validate_operand) (effective_addr2, b2, l2, ACCTYPE_READ, regs);

  001be	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cb	41 b9 04 00 00
	00		 mov	 r9d, 4
  001d1	44 8b 44 24 58	 mov	 r8d, DWORD PTR l2$[rsp]
  001d6	8b 54 24 4c	 mov	 edx, DWORD PTR b2$[rsp]
  001da	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001de	e8 00 00 00 00	 call	 s390_validate_operand
$LN12@s390_unpac:

; 2121 : 
; 2122 :     /* Exchange the digits in the rightmost byte */
; 2123 :     effective_addr1 += l1;

  001e3	8b 44 24 54	 mov	 eax, DWORD PTR l1$[rsp]
  001e7	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  001eb	03 c8		 add	 ecx, eax
  001ed	8b c1		 mov	 eax, ecx
  001ef	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 2124 :     effective_addr2 += l2;

  001f3	8b 44 24 58	 mov	 eax, DWORD PTR l2$[rsp]
  001f7	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001fb	03 c8		 add	 ecx, eax
  001fd	8b c1		 mov	 eax, ecx
  001ff	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 2125 :     sbyte = ARCH_DEP(vfetchb) ( effective_addr2, b2, regs );

  00203	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0020b	8b 54 24 4c	 mov	 edx, DWORD PTR b2$[rsp]
  0020f	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00213	e8 00 00 00 00	 call	 s390_vfetchb
  00218	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 2126 :     rbyte = ((sbyte << 4) | (sbyte >> 4)) & 0xff;

  0021c	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  00221	c1 e0 04	 shl	 eax, 4
  00224	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR sbyte$[rsp]
  00229	c1 f9 04	 sar	 ecx, 4
  0022c	0b c1		 or	 eax, ecx
  0022e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00233	88 44 24 38	 mov	 BYTE PTR rbyte$[rsp], al

; 2127 :     ARCH_DEP(vstoreb) ( rbyte, effective_addr1, b1, regs );

  00237	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0023f	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  00244	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00248	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR rbyte$[rsp]
  0024d	e8 00 00 00 00	 call	 s390_vstoreb

; 2128 : 
; 2129 :     /* Process remaining bytes from right to left */
; 2130 :     for (i = l1, j = l2; i > 0; i--)

  00252	8b 44 24 54	 mov	 eax, DWORD PTR l1$[rsp]
  00256	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
  0025a	8b 44 24 58	 mov	 eax, DWORD PTR l2$[rsp]
  0025e	89 44 24 5c	 mov	 DWORD PTR j$[rsp], eax
  00262	eb 0a		 jmp	 SHORT $LN7@s390_unpac
$LN5@s390_unpac:
  00264	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  00268	ff c8		 dec	 eax
  0026a	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_unpac:
  0026e	83 7c 24 44 00	 cmp	 DWORD PTR i$[rsp], 0
  00273	0f 8e 18 01 00
	00		 jle	 $LN6@s390_unpac

; 2131 :     {
; 2132 :         /* Fetch source byte from second operand */
; 2133 :         if (j-- > 0)

  00279	8b 44 24 5c	 mov	 eax, DWORD PTR j$[rsp]
  0027d	89 44 24 60	 mov	 DWORD PTR tv180[rsp], eax
  00281	8b 44 24 5c	 mov	 eax, DWORD PTR j$[rsp]
  00285	ff c8		 dec	 eax
  00287	89 44 24 5c	 mov	 DWORD PTR j$[rsp], eax
  0028b	83 7c 24 60 00	 cmp	 DWORD PTR tv180[rsp], 0
  00290	7e 47		 jle	 SHORT $LN13@s390_unpac

; 2134 :         {
; 2135 :             sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  00292	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00296	ff c8		 dec	 eax
  00298	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0029c	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002a4	8b 54 24 4c	 mov	 edx, DWORD PTR b2$[rsp]
  002a8	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  002ac	e8 00 00 00 00	 call	 s390_vfetchb
  002b1	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 2136 :             rbyte = (sbyte & 0x0F) | 0xF0;

  002b5	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002ba	83 e0 0f	 and	 eax, 15
  002bd	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  002c2	88 44 24 38	 mov	 BYTE PTR rbyte$[rsp], al

; 2137 :             lbyte = (sbyte >> 4) | 0xF0;

  002c6	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002cb	c1 f8 04	 sar	 eax, 4
  002ce	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  002d3	88 44 24 40	 mov	 BYTE PTR lbyte$[rsp], al

; 2138 :         }

  002d7	eb 0a		 jmp	 SHORT $LN14@s390_unpac
$LN13@s390_unpac:

; 2139 :         else
; 2140 :         {
; 2141 :             rbyte = 0xF0;

  002d9	c6 44 24 38 f0	 mov	 BYTE PTR rbyte$[rsp], 240 ; 000000f0H

; 2142 :             lbyte = 0xF0;

  002de	c6 44 24 40 f0	 mov	 BYTE PTR lbyte$[rsp], 240 ; 000000f0H
$LN14@s390_unpac:

; 2143 :         }
; 2144 : 
; 2145 :         /* Store unpacked bytes at first operand address */
; 2146 :         ARCH_DEP(vstoreb) ( rbyte, --effective_addr1, b1, regs );

  002e3	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  002e7	ff c8		 dec	 eax
  002e9	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  002ed	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002f5	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  002fa	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  002fe	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR rbyte$[rsp]
  00303	e8 00 00 00 00	 call	 s390_vstoreb

; 2147 :         if (--i > 0)

  00308	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  0030c	ff c8		 dec	 eax
  0030e	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
  00312	83 7c 24 44 00	 cmp	 DWORD PTR i$[rsp], 0
  00317	7e 3f		 jle	 SHORT $LN15@s390_unpac

; 2148 :         {
; 2149 :             effective_addr1 &= ADDRESS_MAXWRAP(regs);

  00319	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00321	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00327	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0032b	23 c8		 and	 ecx, eax
  0032d	8b c1		 mov	 eax, ecx
  0032f	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 2150 :             ARCH_DEP(vstoreb) ( lbyte, --effective_addr1, b1, regs );

  00333	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00337	ff c8		 dec	 eax
  00339	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0033d	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00345	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  0034a	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0034e	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR lbyte$[rsp]
  00353	e8 00 00 00 00	 call	 s390_vstoreb
$LN15@s390_unpac:

; 2151 :         }
; 2152 : 
; 2153 :         /* Wraparound according to addressing mode */
; 2154 :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  00358	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00360	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00366	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0036a	23 c8		 and	 ecx, eax
  0036c	8b c1		 mov	 eax, ecx
  0036e	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 2155 :         effective_addr2 &= ADDRESS_MAXWRAP(regs);

  00372	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0037a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00380	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00384	23 c8		 and	 ecx, eax
  00386	8b c1		 mov	 eax, ecx
  00388	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 2156 : 
; 2157 :     } /* end for(i) */

  0038c	e9 d3 fe ff ff	 jmp	 $LN5@s390_unpac
$LN6@s390_unpac:

; 2158 : 
; 2159 : }

  00391	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00395	c3		 ret	 0
s390_unpack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 0
i$ = 4
op2crosses$ = 8
effective_addr1$ = 12
op1crosses$ = 16
effective_addr2$ = 20
dbyte$ = 24
len$ = 28
b1$ = 32
b2$ = 36
temp$1 = 40
tv143 = 44
tv145 = 48
tv160 = 52
tv162 = 56
tv177 = 60
tv185 = 64
tv220 = 68
tv274 = 72
cc$ = 76
op1$ = 128
op2$ = 384
__$ArrayPad$ = 640
inst$ = 784
regs$ = 792
s390_translate_and_test PROC

; 1890 : {

$LN62:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 00 03
	00 00		 sub	 rsp, 768		; 00000300H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 80 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1891 : CACHE_ALIGN BYTE op1[256], op2[256];    /* Operand work areas        */
; 1892 : VADR    effective_addr1;                /* Effective address         */
; 1893 : VADR    effective_addr2;                /* Effective address         */
; 1894 : int     b1, b2;                         /* Base registers            */
; 1895 : int     len;                            /* Length - 1                */
; 1896 : int     i;                              /* work variable             */
; 1897 : int     cc = 0;                         /* Condition code            */

  0002c	c7 45 4c 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 1898 : BYTE    dbyte, sbyte = 0;               /* Byte work areas           */

  00033	c6 45 00 00	 mov	 BYTE PTR sbyte$[rbp], 0

; 1899 : bool    op1crosses, op2crosses;         /* Operand crosses Page Bdy  */
; 1900 : 
; 1901 :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00037	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0003f	48 83 c0 02	 add	 rax, 2
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 fetch_fw_noswap
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 _byteswap_ulong
  00052	89 45 28	 mov	 DWORD PTR temp$1[rbp], eax
  00055	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  00058	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005d	89 45 14	 mov	 DWORD PTR effective_addr2$[rbp], eax
  00060	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  00063	c1 e8 0c	 shr	 eax, 12
  00066	83 e0 0f	 and	 eax, 15
  00069	89 45 24	 mov	 DWORD PTR b2$[rbp], eax
  0006c	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  0006f	c1 e8 10	 shr	 eax, 16
  00072	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00077	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
  0007a	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  0007d	c1 e8 1c	 shr	 eax, 28
  00080	83 e0 0f	 and	 eax, 15
  00083	89 45 20	 mov	 DWORD PTR b1$[rbp], eax
  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 6b c0 01	 imul	 rax, rax, 1
  0008f	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00097	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009b	89 45 1c	 mov	 DWORD PTR len$[rbp], eax
  0009e	83 7d 20 00	 cmp	 DWORD PTR b1$[rbp], 0
  000a2	74 35		 je	 SHORT $LN17@s390_trans
  000a4	48 63 45 20	 movsxd	 rax, DWORD PTR b1$[rbp]
  000a8	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b0	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  000ba	03 c8		 add	 ecx, eax
  000bc	8b c1		 mov	 eax, ecx
  000be	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
  000c1	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000c9	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000cf	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  000d2	23 c8		 and	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
$LN17@s390_trans:
  000d9	83 7d 24 00	 cmp	 DWORD PTR b2$[rbp], 0
  000dd	74 35		 je	 SHORT $LN18@s390_trans
  000df	48 63 45 24	 movsxd	 rax, DWORD PTR b2$[rbp]
  000e3	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000eb	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000f2	8b 4d 14	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  000f5	03 c8		 add	 ecx, eax
  000f7	8b c1		 mov	 eax, ecx
  000f9	89 45 14	 mov	 DWORD PTR effective_addr2$[rbp], eax
  000fc	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00104	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0010a	8b 4d 14	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  0010d	23 c8		 and	 ecx, eax
  0010f	8b c1		 mov	 eax, ecx
  00111	89 45 14	 mov	 DWORD PTR effective_addr2$[rbp], eax
$LN18@s390_trans:
$LN4@s390_trans:
  00114	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00120	48 83 c0 06	 add	 rax, 6
  00124	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0012c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00130	33 c0		 xor	 eax, eax
  00132	83 f8 06	 cmp	 eax, 6
  00135	74 0f		 je	 SHORT $LN19@s390_trans
  00137	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013f	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN19@s390_trans:
  00146	33 c0		 xor	 eax, eax
  00148	85 c0		 test	 eax, eax
  0014a	75 c8		 jne	 SHORT $LN4@s390_trans

; 1902 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 1903 : 
; 1904 :     TXFC_INSTR_CHECK( regs );
; 1905 : 
; 1906 :     /* Copy operand-1 data to work area if within same page */
; 1907 :     if (!(op1crosses = CROSSPAGE( effective_addr1, len )))

  0014c	8b 45 0c	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  0014f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00154	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  00159	2b 4d 1c	 sub	 ecx, DWORD PTR len$[rbp]
  0015c	3b c1		 cmp	 eax, ecx
  0015e	7e 09		 jle	 SHORT $LN38@s390_trans
  00160	c7 45 2c 01 00
	00 00		 mov	 DWORD PTR tv143[rbp], 1
  00167	eb 07		 jmp	 SHORT $LN39@s390_trans
$LN38@s390_trans:
  00169	c7 45 2c 00 00
	00 00		 mov	 DWORD PTR tv143[rbp], 0
$LN39@s390_trans:
  00170	83 7d 2c 00	 cmp	 DWORD PTR tv143[rbp], 0
  00174	75 09		 jne	 SHORT $LN40@s390_trans
  00176	c7 45 30 00 00
	00 00		 mov	 DWORD PTR tv145[rbp], 0
  0017d	eb 07		 jmp	 SHORT $LN41@s390_trans
$LN40@s390_trans:
  0017f	c7 45 30 01 00
	00 00		 mov	 DWORD PTR tv145[rbp], 1
$LN41@s390_trans:
  00186	0f b6 45 30	 movzx	 eax, BYTE PTR tv145[rbp]
  0018a	88 45 10	 mov	 BYTE PTR op1crosses$[rbp], al
  0018d	0f b6 45 10	 movzx	 eax, BYTE PTR op1crosses$[rbp]
  00191	85 c0		 test	 eax, eax
  00193	75 25		 jne	 SHORT $LN20@s390_trans

; 1908 :         ARCH_DEP( vfetchc )( op1, len, effective_addr1, b1, regs );

  00195	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a2	44 8b 4d 20	 mov	 r9d, DWORD PTR b1$[rbp]
  001a6	44 8b 45 0c	 mov	 r8d, DWORD PTR effective_addr1$[rbp]
  001aa	0f b6 55 1c	 movzx	 edx, BYTE PTR len$[rbp]
  001ae	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR op1$[rbp]
  001b5	e8 00 00 00 00	 call	 s390_vfetchc
$LN20@s390_trans:

; 1909 : 
; 1910 :     /* Copy operand-2 data to work area if within same page */
; 1911 :     if (!(op2crosses = CROSSPAGE( effective_addr2, 256-1 )))

  001ba	8b 45 14	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  001bd	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  001c2	3d 00 0f 00 00	 cmp	 eax, 3840		; 00000f00H
  001c7	7e 09		 jle	 SHORT $LN44@s390_trans
  001c9	c7 45 34 01 00
	00 00		 mov	 DWORD PTR tv160[rbp], 1
  001d0	eb 07		 jmp	 SHORT $LN45@s390_trans
$LN44@s390_trans:
  001d2	c7 45 34 00 00
	00 00		 mov	 DWORD PTR tv160[rbp], 0
$LN45@s390_trans:
  001d9	83 7d 34 00	 cmp	 DWORD PTR tv160[rbp], 0
  001dd	75 09		 jne	 SHORT $LN46@s390_trans
  001df	c7 45 38 00 00
	00 00		 mov	 DWORD PTR tv162[rbp], 0
  001e6	eb 07		 jmp	 SHORT $LN47@s390_trans
$LN46@s390_trans:
  001e8	c7 45 38 01 00
	00 00		 mov	 DWORD PTR tv162[rbp], 1
$LN47@s390_trans:
  001ef	0f b6 45 38	 movzx	 eax, BYTE PTR tv162[rbp]
  001f3	88 45 08	 mov	 BYTE PTR op2crosses$[rbp], al
  001f6	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  001fa	85 c0		 test	 eax, eax
  001fc	75 23		 jne	 SHORT $LN21@s390_trans

; 1912 :         ARCH_DEP( vfetchc )( op2, 256-1, effective_addr2, b2, regs );

  001fe	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00206	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0020b	44 8b 4d 24	 mov	 r9d, DWORD PTR b2$[rbp]
  0020f	44 8b 45 14	 mov	 r8d, DWORD PTR effective_addr2$[rbp]
  00213	b2 ff		 mov	 dl, 255			; 000000ffH
  00215	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR op2$[rbp]
  0021c	e8 00 00 00 00	 call	 s390_vfetchc
$LN21@s390_trans:

; 1913 : 
; 1914 :     /* Process first operand from left to right */
; 1915 :     if (unlikely( op1crosses ))

  00221	0f b6 45 10	 movzx	 eax, BYTE PTR op1crosses$[rbp]
  00225	85 c0		 test	 eax, eax
  00227	74 09		 je	 SHORT $LN50@s390_trans
  00229	c7 45 3c 01 00
	00 00		 mov	 DWORD PTR tv177[rbp], 1
  00230	eb 07		 jmp	 SHORT $LN51@s390_trans
$LN50@s390_trans:
  00232	c7 45 3c 00 00
	00 00		 mov	 DWORD PTR tv177[rbp], 0
$LN51@s390_trans:
  00239	83 7d 3c 00	 cmp	 DWORD PTR tv177[rbp], 0
  0023d	0f 84 d8 00 00
	00		 je	 $LN22@s390_trans

; 1916 :     {
; 1917 :         /* Operand-1 crosses a page boundary */
; 1918 :         if (unlikely( op2crosses ))

  00243	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  00247	85 c0		 test	 eax, eax
  00249	74 09		 je	 SHORT $LN54@s390_trans
  0024b	c7 45 40 01 00
	00 00		 mov	 DWORD PTR tv185[rbp], 1
  00252	eb 07		 jmp	 SHORT $LN55@s390_trans
$LN54@s390_trans:
  00254	c7 45 40 00 00
	00 00		 mov	 DWORD PTR tv185[rbp], 0
$LN55@s390_trans:
  0025b	83 7d 40 00	 cmp	 DWORD PTR tv185[rbp], 0
  0025f	74 66		 je	 SHORT $LN24@s390_trans

; 1919 :         {
; 1920 :             /* WORST case: BOTH operands cross a page boundary */
; 1921 :             for (i=0; i <= len; i++)

  00261	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00268	eb 08		 jmp	 SHORT $LN7@s390_trans
$LN5@s390_trans:
  0026a	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0026d	ff c0		 inc	 eax
  0026f	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN7@s390_trans:
  00272	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  00275	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00278	7f 4b		 jg	 SHORT $LN6@s390_trans

; 1922 :             {
; 1923 :                 dbyte = ARCH_DEP( vfetchb )( effective_addr1+i, b1, regs );

  0027a	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0027d	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  00280	03 c8		 add	 ecx, eax
  00282	8b c1		 mov	 eax, ecx
  00284	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0028c	8b 55 20	 mov	 edx, DWORD PTR b1$[rbp]
  0028f	8b c8		 mov	 ecx, eax
  00291	e8 00 00 00 00	 call	 s390_vfetchb
  00296	88 45 18	 mov	 BYTE PTR dbyte$[rbp], al

; 1924 :                 if ((sbyte = ARCH_DEP( vfetchb )( effective_addr2+dbyte, b2, regs )))

  00299	0f b6 45 18	 movzx	 eax, BYTE PTR dbyte$[rbp]
  0029d	8b 4d 14	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  002a0	03 c8		 add	 ecx, eax
  002a2	8b c1		 mov	 eax, ecx
  002a4	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002ac	8b 55 24	 mov	 edx, DWORD PTR b2$[rbp]
  002af	8b c8		 mov	 ecx, eax
  002b1	e8 00 00 00 00	 call	 s390_vfetchb
  002b6	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  002b9	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  002bd	85 c0		 test	 eax, eax
  002bf	74 02		 je	 SHORT $LN26@s390_trans

; 1925 :                     break;

  002c1	eb 02		 jmp	 SHORT $LN6@s390_trans
$LN26@s390_trans:

; 1926 :             }

  002c3	eb a5		 jmp	 SHORT $LN5@s390_trans
$LN6@s390_trans:

; 1927 :         }

  002c5	eb 4f		 jmp	 SHORT $LN25@s390_trans
$LN24@s390_trans:

; 1928 :         else /* Only operand-1 crosses a page boundary */
; 1929 :         {
; 1930 :             for (i=0; i <= len; i++)

  002c7	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  002ce	eb 08		 jmp	 SHORT $LN10@s390_trans
$LN8@s390_trans:
  002d0	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  002d3	ff c0		 inc	 eax
  002d5	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN10@s390_trans:
  002d8	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  002db	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  002de	7f 36		 jg	 SHORT $LN9@s390_trans

; 1931 :                 if ((sbyte = op2[ ARCH_DEP( vfetchb )( effective_addr1+i, b1, regs ) ]))

  002e0	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  002e3	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  002e6	03 c8		 add	 ecx, eax
  002e8	8b c1		 mov	 eax, ecx
  002ea	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002f2	8b 55 20	 mov	 edx, DWORD PTR b1$[rbp]
  002f5	8b c8		 mov	 ecx, eax
  002f7	e8 00 00 00 00	 call	 s390_vfetchb
  002fc	0f b6 c0	 movzx	 eax, al
  002ff	0f b6 84 05 80
	01 00 00	 movzx	 eax, BYTE PTR op2$[rbp+rax]
  00307	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  0030a	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  0030e	85 c0		 test	 eax, eax
  00310	74 02		 je	 SHORT $LN27@s390_trans

; 1932 :                     break;

  00312	eb 02		 jmp	 SHORT $LN9@s390_trans
$LN27@s390_trans:
  00314	eb ba		 jmp	 SHORT $LN8@s390_trans
$LN9@s390_trans:
$LN25@s390_trans:

; 1933 :         }
; 1934 :     }

  00316	e9 a9 00 00 00	 jmp	 $LN23@s390_trans
$LN22@s390_trans:

; 1935 :     else /* Operand-1 does NOT cross a page boundary */
; 1936 :     {
; 1937 :        if (unlikely( op2crosses ))

  0031b	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  0031f	85 c0		 test	 eax, eax
  00321	74 09		 je	 SHORT $LN58@s390_trans
  00323	c7 45 44 01 00
	00 00		 mov	 DWORD PTR tv220[rbp], 1
  0032a	eb 07		 jmp	 SHORT $LN59@s390_trans
$LN58@s390_trans:
  0032c	c7 45 44 00 00
	00 00		 mov	 DWORD PTR tv220[rbp], 0
$LN59@s390_trans:
  00333	83 7d 44 00	 cmp	 DWORD PTR tv220[rbp], 0
  00337	74 4f		 je	 SHORT $LN28@s390_trans

; 1938 :        {
; 1939 :             /* But operand-2 DOES cross a page boundary */
; 1940 :             for (i=0; i <= len; i++)

  00339	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00340	eb 08		 jmp	 SHORT $LN13@s390_trans
$LN11@s390_trans:
  00342	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00345	ff c0		 inc	 eax
  00347	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN13@s390_trans:
  0034a	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  0034d	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00350	7f 34		 jg	 SHORT $LN12@s390_trans

; 1941 :                 if ((sbyte = ARCH_DEP( vfetchb )( effective_addr2+op1[i], b2, regs )))

  00352	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  00356	0f b6 84 05 80
	00 00 00	 movzx	 eax, BYTE PTR op1$[rbp+rax]
  0035e	8b 4d 14	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  00361	03 c8		 add	 ecx, eax
  00363	8b c1		 mov	 eax, ecx
  00365	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0036d	8b 55 24	 mov	 edx, DWORD PTR b2$[rbp]
  00370	8b c8		 mov	 ecx, eax
  00372	e8 00 00 00 00	 call	 s390_vfetchb
  00377	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  0037a	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  0037e	85 c0		 test	 eax, eax
  00380	74 02		 je	 SHORT $LN30@s390_trans

; 1942 :                     break;

  00382	eb 02		 jmp	 SHORT $LN12@s390_trans
$LN30@s390_trans:
  00384	eb bc		 jmp	 SHORT $LN11@s390_trans
$LN12@s390_trans:

; 1943 :        }

  00386	eb 3c		 jmp	 SHORT $LN29@s390_trans
$LN28@s390_trans:

; 1944 :        else /* BEST case: NEITHER operand crosses a page boundary */
; 1945 :        {
; 1946 :             for (i=0; i <= len; i++)

  00388	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0038f	eb 08		 jmp	 SHORT $LN16@s390_trans
$LN14@s390_trans:
  00391	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00394	ff c0		 inc	 eax
  00396	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN16@s390_trans:
  00399	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  0039c	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0039f	7f 23		 jg	 SHORT $LN15@s390_trans

; 1947 :                 if ((sbyte = op2[ op1[i] ]))

  003a1	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  003a5	0f b6 84 05 80
	00 00 00	 movzx	 eax, BYTE PTR op1$[rbp+rax]
  003ad	0f b6 84 05 80
	01 00 00	 movzx	 eax, BYTE PTR op2$[rbp+rax]
  003b5	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  003b8	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  003bc	85 c0		 test	 eax, eax
  003be	74 02		 je	 SHORT $LN31@s390_trans

; 1948 :                     break;

  003c0	eb 02		 jmp	 SHORT $LN15@s390_trans
$LN31@s390_trans:
  003c2	eb cd		 jmp	 SHORT $LN14@s390_trans
$LN15@s390_trans:
$LN29@s390_trans:
$LN23@s390_trans:

; 1949 :        }
; 1950 :     }
; 1951 : 
; 1952 :     /* Test for non-zero function byte */
; 1953 :     if (sbyte != 0)

  003c4	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  003c8	85 c0		 test	 eax, eax
  003ca	0f 84 d3 00 00
	00		 je	 $LN32@s390_trans

; 1954 :     {
; 1955 :         effective_addr1 += i;

  003d0	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  003d3	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  003d6	03 c8		 add	 ecx, eax
  003d8	8b c1		 mov	 eax, ecx
  003da	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax

; 1956 :         effective_addr1 &= ADDRESS_MAXWRAP( regs );

  003dd	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003e5	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  003eb	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  003ee	23 c8		 and	 ecx, eax
  003f0	8b c1		 mov	 eax, ecx
  003f2	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax

; 1957 : 
; 1958 :         /* Store address of argument byte in register 1 */
; 1959 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 1960 :         if (regs->psw.amode64)
; 1961 :             regs->GR_G(1) = effective_addr1;
; 1962 :         else
; 1963 : #endif
; 1964 :         if (regs->psw.amode)

  003f5	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003fd	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00403	d1 e8		 shr	 eax, 1
  00405	83 e0 01	 and	 eax, 1
  00408	85 c0		 test	 eax, eax
  0040a	74 1d		 je	 SHORT $LN33@s390_trans

; 1965 :             regs->GR_L(1) = effective_addr1;

  0040c	b8 08 00 00 00	 mov	 eax, 8
  00411	48 6b c0 01	 imul	 rax, rax, 1
  00415	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0041d	8b 55 0c	 mov	 edx, DWORD PTR effective_addr1$[rbp]
  00420	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
  00427	eb 40		 jmp	 SHORT $LN34@s390_trans
$LN33@s390_trans:

; 1966 :         else
; 1967 :             regs->GR_LA24(1) = effective_addr1;

  00429	b8 08 00 00 00	 mov	 eax, 8
  0042e	48 6b c0 01	 imul	 rax, rax, 1
  00432	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  00435	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0043b	48 8b 94 24 18
	03 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00443	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  0044a	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  0044f	0b c1		 or	 eax, ecx
  00451	b9 08 00 00 00	 mov	 ecx, 8
  00456	48 6b c9 01	 imul	 rcx, rcx, 1
  0045a	48 8b 94 24 18
	03 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00462	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN34@s390_trans:

; 1968 : 
; 1969 :         /* Store function byte in low-order byte of reg.2 */
; 1970 :         regs->GR_LHLCL(2) = sbyte;

  00469	b8 08 00 00 00	 mov	 eax, 8
  0046e	48 6b c0 02	 imul	 rax, rax, 2
  00472	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0047a	0f b6 55 00	 movzx	 edx, BYTE PTR sbyte$[rbp]
  0047e	88 94 01 80 02
	00 00		 mov	 BYTE PTR [rcx+rax+640], dl

; 1971 : 
; 1972 :         /* Set condition code 2 if argument byte was last byte
; 1973 :            of first operand, otherwise set condition code 1 */
; 1974 :         cc = (i == len) ? 2 : 1;

  00485	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  00488	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0048b	75 09		 jne	 SHORT $LN60@s390_trans
  0048d	c7 45 48 02 00
	00 00		 mov	 DWORD PTR tv274[rbp], 2
  00494	eb 07		 jmp	 SHORT $LN61@s390_trans
$LN60@s390_trans:
  00496	c7 45 48 01 00
	00 00		 mov	 DWORD PTR tv274[rbp], 1
$LN61@s390_trans:
  0049d	8b 45 48	 mov	 eax, DWORD PTR tv274[rbp]
  004a0	89 45 4c	 mov	 DWORD PTR cc$[rbp], eax
$LN32@s390_trans:

; 1975 :     }
; 1976 : 
; 1977 :     /* Update the condition code */
; 1978 :     regs->psw.cc = cc;

  004a3	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004ab	0f b6 4d 4c	 movzx	 ecx, BYTE PTR cc$[rbp]
  004af	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1979 : 
; 1980 : #if defined( FEATURE_PER1 )
; 1981 :     /* Check for PER 1 GRA event */
; 1982 :     if (sbyte != 0) // were GR1 and GR2 modified?
; 1983 :         PER_GRA_CHECK( regs, PER_GRA_MASK2( 1, 2 ));
; 1984 : #endif
; 1985 : }

  004b2	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  004b9	48 33 cc	 xor	 rcx, rsp
  004bc	e8 00 00 00 00	 call	 __security_check_cookie
  004c1	48 81 c4 00 03
	00 00		 add	 rsp, 768		; 00000300H
  004c8	5d		 pop	 rbp
  004c9	c3		 ret	 0
s390_translate_and_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
n$ = 52
b$ = 56
effective_addr2$ = 60
len$ = 64
effective_addr1$ = 68
len2$ = 72
b2$ = 76
temp$1 = 80
b1$ = 84
dest$ = 88
dest2$ = 96
tab$ = 104
tv153 = 112
tv178 = 116
tv318 = 120
tv346 = 124
tab2$ = 128
tv253 = 136
tv291 = 144
inst$ = 176
regs$ = 184
s390_translate PROC

; 1817 : {

$LN54:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1818 : int     len, len2 = -1;                 /* Lengths                   */

  00011	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR len2$[rsp], -1

; 1819 : int     b1, b2;                         /* Values of base field      */
; 1820 : int     i, b, n;                        /* Work variables            */
; 1821 : VADR    effective_addr1;                /* Effective address         */
; 1822 : VADR    effective_addr2;                /* Effective address         */
; 1823 : BYTE   *dest, *dest2 = NULL, *tab, *tab2; /* Mainstor pointers       */

  00019	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR dest2$[rsp], 0

; 1824 : 
; 1825 :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00022	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002a	48 83 c0 02	 add	 rax, 2
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 fetch_fw_noswap
  00036	8b c8		 mov	 ecx, eax
  00038	e8 00 00 00 00	 call	 _byteswap_ulong
  0003d	89 44 24 50	 mov	 DWORD PTR temp$1[rsp], eax
  00041	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004a	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0004e	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00052	c1 e8 0c	 shr	 eax, 12
  00055	83 e0 0f	 and	 eax, 15
  00058	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax
  0005c	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00060	c1 e8 10	 shr	 eax, 16
  00063	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00068	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0006c	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00070	c1 e8 1c	 shr	 eax, 28
  00073	83 e0 0f	 and	 eax, 15
  00076	89 44 24 54	 mov	 DWORD PTR b1$[rsp], eax
  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	48 6b c0 01	 imul	 rax, rax, 1
  00083	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0008b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008f	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
  00093	83 7c 24 54 00	 cmp	 DWORD PTR b1$[rsp], 0
  00098	74 3a		 je	 SHORT $LN29@s390_trans
  0009a	48 63 44 24 54	 movsxd	 rax, DWORD PTR b1$[rsp]
  0009f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000a7	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ae	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b2	03 c8		 add	 ecx, eax
  000b4	8b c1		 mov	 eax, ecx
  000b6	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000ba	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000c2	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000c8	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000cc	23 c8		 and	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN29@s390_trans:
  000d4	83 7c 24 4c 00	 cmp	 DWORD PTR b2$[rsp], 0
  000d9	74 3a		 je	 SHORT $LN30@s390_trans
  000db	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b2$[rsp]
  000e0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e8	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ef	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000f3	03 c8		 add	 ecx, eax
  000f5	8b c1		 mov	 eax, ecx
  000f7	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000fb	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00103	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00109	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0010d	23 c8		 and	 ecx, eax
  0010f	8b c1		 mov	 eax, ecx
  00111	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN30@s390_trans:
$LN4@s390_trans:
  00115	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00121	48 83 c0 06	 add	 rax, 6
  00125	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0012d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00131	33 c0		 xor	 eax, eax
  00133	83 f8 06	 cmp	 eax, 6
  00136	74 0f		 je	 SHORT $LN31@s390_trans
  00138	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00140	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN31@s390_trans:
  00147	33 c0		 xor	 eax, eax
  00149	85 c0		 test	 eax, eax
  0014b	75 c8		 jne	 SHORT $LN4@s390_trans

; 1826 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 1827 : 
; 1828 :     TXFC_INSTR_CHECK( regs );
; 1829 : 
; 1830 :     /* Get destination pointer */
; 1831 :     dest = MADDRL( effective_addr1, len+1, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0014d	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00151	ff c0		 inc	 eax
  00153	48 98		 cdqe
  00155	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0015d	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00161	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00165	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0016d	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00175	44 8b 44 24 54	 mov	 r8d, DWORD PTR b1$[rsp]
  0017a	48 8b d0	 mov	 rdx, rax
  0017d	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00181	e8 00 00 00 00	 call	 s390_maddr_l
  00186	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax

; 1832 : 
; 1833 :     /* Get pointer to next page if destination crosses a boundary */
; 1834 :     if (CROSSPAGE( effective_addr1, len ))

  0018b	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0018f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00194	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  00199	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  0019d	3b c1		 cmp	 eax, ecx
  0019f	7e 0a		 jle	 SHORT $LN40@s390_trans
  001a1	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv153[rsp], 1
  001a9	eb 08		 jmp	 SHORT $LN41@s390_trans
$LN40@s390_trans:
  001ab	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN41@s390_trans:
  001b3	83 7c 24 70 00	 cmp	 DWORD PTR tv153[rsp], 0
  001b8	0f 84 81 00 00
	00		 je	 $LN32@s390_trans

; 1835 :     {
; 1836 :         len2 = len;

  001be	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  001c2	89 44 24 48	 mov	 DWORD PTR len2$[rsp], eax

; 1837 :         len = PAGEFRAME_BYTEMASK - (effective_addr1 & PAGEFRAME_BYTEMASK);

  001c6	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  001ca	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  001cf	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  001d4	2b c8		 sub	 ecx, eax
  001d6	8b c1		 mov	 eax, ecx
  001d8	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax

; 1838 :         len2 -= (len + 1);

  001dc	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  001e0	ff c0		 inc	 eax
  001e2	8b 4c 24 48	 mov	 ecx, DWORD PTR len2$[rsp]
  001e6	2b c8		 sub	 ecx, eax
  001e8	8b c1		 mov	 eax, ecx
  001ea	89 44 24 48	 mov	 DWORD PTR len2$[rsp], eax

; 1839 :         dest2 = MADDRL((effective_addr1+len+1) & ADDRESS_MAXWRAP( regs ),

  001ee	48 63 44 24 48	 movsxd	 rax, DWORD PTR len2$[rsp]
  001f3	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  001f7	8b 54 24 40	 mov	 edx, DWORD PTR len$[rsp]
  001fb	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  001ff	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00207	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  0020d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00215	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00219	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0021d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00225	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0022d	44 8b 44 24 54	 mov	 r8d, DWORD PTR b1$[rsp]
  00232	48 8b d0	 mov	 rdx, rax
  00235	e8 00 00 00 00	 call	 s390_maddr_l
  0023a	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax
$LN32@s390_trans:

; 1840 :                   len2, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );
; 1841 :     }
; 1842 : 
; 1843 :     /* Fast path if table does not cross a boundary */
; 1844 :     if (NOCROSSPAGE( effective_addr2, 255 ))

  0023f	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00243	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00248	3d 00 0f 00 00	 cmp	 eax, 3840		; 00000f00H
  0024d	7f 0a		 jg	 SHORT $LN44@s390_trans
  0024f	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv178[rsp], 1
  00257	eb 08		 jmp	 SHORT $LN45@s390_trans
$LN44@s390_trans:
  00259	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv178[rsp], 0
$LN45@s390_trans:
  00261	83 7c 24 74 00	 cmp	 DWORD PTR tv178[rsp], 0
  00266	0f 84 c7 00 00
	00		 je	 $LN33@s390_trans

; 1845 :     {
; 1846 :         tab = MADDRL(effective_addr2, 256, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  0026c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00274	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00278	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0027c	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00284	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0028c	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  00291	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00296	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0029a	e8 00 00 00 00	 call	 s390_maddr_l
  0029f	48 89 44 24 68	 mov	 QWORD PTR tab$[rsp], rax

; 1847 :         /* Perform translate function */
; 1848 :         for (i=0; i <= len;  i++) dest [i] = tab[dest [i]];

  002a4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  002ac	eb 0a		 jmp	 SHORT $LN7@s390_trans
$LN5@s390_trans:
  002ae	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  002b2	ff c0		 inc	 eax
  002b4	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_trans:
  002b8	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  002bc	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  002c0	7f 27		 jg	 SHORT $LN6@s390_trans
  002c2	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  002c7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  002cc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002d0	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  002d5	48 8b 54 24 58	 mov	 rdx, QWORD PTR dest$[rsp]
  002da	4c 8b 44 24 68	 mov	 r8, QWORD PTR tab$[rsp]
  002df	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  002e4	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002e7	eb c5		 jmp	 SHORT $LN5@s390_trans
$LN6@s390_trans:

; 1849 :         for (i=0; i <= len2; i++) dest2[i] = tab[dest2[i]];

  002e9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  002f1	eb 0a		 jmp	 SHORT $LN10@s390_trans
$LN8@s390_trans:
  002f3	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  002f7	ff c0		 inc	 eax
  002f9	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN10@s390_trans:
  002fd	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  00301	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00305	7f 27		 jg	 SHORT $LN9@s390_trans
  00307	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0030c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00311	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00315	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  0031a	48 8b 54 24 60	 mov	 rdx, QWORD PTR dest2$[rsp]
  0031f	4c 8b 44 24 68	 mov	 r8, QWORD PTR tab$[rsp]
  00324	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00329	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0032c	eb c5		 jmp	 SHORT $LN8@s390_trans
$LN9@s390_trans:

; 1850 :     }

  0032e	e9 b7 03 00 00	 jmp	 $LN34@s390_trans
$LN33@s390_trans:

; 1851 :     else /* Translate table spans a boundary */
; 1852 :     {
; 1853 :         n = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  00333	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00337	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0033c	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00341	2b c8		 sub	 ecx, eax
  00343	8b c1		 mov	 eax, ecx
  00345	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 1854 :         b = dest[0];

  00349	b8 01 00 00 00	 mov	 eax, 1
  0034e	48 6b c0 00	 imul	 rax, rax, 0
  00352	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00357	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0035b	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax

; 1855 : 
; 1856 :         /* Referenced part of the table may or may not span boundary */
; 1857 :         if (b < n)

  0035f	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00363	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00367	0f 8d 3a 01 00
	00		 jge	 $LN35@s390_trans

; 1858 :         {
; 1859 :             tab = MADDRL(effective_addr2, n, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  0036d	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  00372	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0037a	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0037e	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00382	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0038a	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00392	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  00397	48 8b d0	 mov	 rdx, rax
  0039a	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0039e	e8 00 00 00 00	 call	 s390_maddr_l
  003a3	48 89 44 24 68	 mov	 QWORD PTR tab$[rsp], rax

; 1860 :             for (i=1; i <= len  && b < n; i++) b = dest [i];

  003a8	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  003b0	eb 0a		 jmp	 SHORT $LN13@s390_trans
$LN11@s390_trans:
  003b2	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003b6	ff c0		 inc	 eax
  003b8	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@s390_trans:
  003bc	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  003c0	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  003c4	7f 1e		 jg	 SHORT $LN12@s390_trans
  003c6	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  003ca	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  003ce	7d 14		 jge	 SHORT $LN12@s390_trans
  003d0	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  003d5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  003da	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003de	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  003e2	eb ce		 jmp	 SHORT $LN11@s390_trans
$LN12@s390_trans:

; 1861 :             for (i=0; i <= len2 && b < n; i++) b = dest2[i];

  003e4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003ec	eb 0a		 jmp	 SHORT $LN16@s390_trans
$LN14@s390_trans:
  003ee	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003f2	ff c0		 inc	 eax
  003f4	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s390_trans:
  003f8	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  003fc	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00400	7f 1e		 jg	 SHORT $LN15@s390_trans
  00402	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00406	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  0040a	7d 14		 jge	 SHORT $LN15@s390_trans
  0040c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00411	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00416	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0041a	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  0041e	eb ce		 jmp	 SHORT $LN14@s390_trans
$LN15@s390_trans:

; 1862 : 
; 1863 :             tab2 = b < n ? NULL

  00420	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00424	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00428	7d 0e		 jge	 SHORT $LN46@s390_trans
  0042a	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv253[rsp], 0
  00436	eb 5a		 jmp	 SHORT $LN47@s390_trans
$LN46@s390_trans:
  00438	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0043d	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  00441	48 98		 cdqe
  00443	8b 4c 24 34	 mov	 ecx, DWORD PTR n$[rsp]
  00447	8b 54 24 3c	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  0044b	03 d1		 add	 edx, ecx
  0044d	8b ca		 mov	 ecx, edx
  0044f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00457	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  0045d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00465	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00469	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0046d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00475	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0047d	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  00482	48 8b d0	 mov	 rdx, rax
  00485	e8 00 00 00 00	 call	 s390_maddr_l
  0048a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv253[rsp], rax
$LN47@s390_trans:
  00492	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv253[rsp]
  0049a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tab2$[rsp], rax

; 1864 :                          : MADDRL((effective_addr2+n) & ADDRESS_MAXWRAP( regs ),
; 1865 :                             256 - n, b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1866 :         }

  004a2	e9 35 01 00 00	 jmp	 $LN36@s390_trans
$LN35@s390_trans:

; 1867 :         else
; 1868 :         {
; 1869 :             tab2 = MADDRL((effective_addr2+n) & ADDRESS_MAXWRAP( regs ),

  004a7	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  004ac	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  004b0	48 98		 cdqe
  004b2	8b 4c 24 34	 mov	 ecx, DWORD PTR n$[rsp]
  004b6	8b 54 24 3c	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  004ba	03 d1		 add	 edx, ecx
  004bc	8b ca		 mov	 ecx, edx
  004be	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004c6	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  004cc	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004d4	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  004d8	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  004dc	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  004e4	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004ec	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  004f1	48 8b d0	 mov	 rdx, rax
  004f4	e8 00 00 00 00	 call	 s390_maddr_l
  004f9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tab2$[rsp], rax

; 1870 :                   256 - n, b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1871 :             for (i=1; i <= len  && b >= n; i++) b = dest [i];

  00501	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00509	eb 0a		 jmp	 SHORT $LN19@s390_trans
$LN17@s390_trans:
  0050b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0050f	ff c0		 inc	 eax
  00511	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@s390_trans:
  00515	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00519	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0051d	7f 1e		 jg	 SHORT $LN18@s390_trans
  0051f	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00523	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00527	7c 14		 jl	 SHORT $LN18@s390_trans
  00529	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0052e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00533	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00537	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  0053b	eb ce		 jmp	 SHORT $LN17@s390_trans
$LN18@s390_trans:

; 1872 :             for (i=0; i <= len2 && b >= n; i++) b = dest2[i];

  0053d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00545	eb 0a		 jmp	 SHORT $LN22@s390_trans
$LN20@s390_trans:
  00547	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0054b	ff c0		 inc	 eax
  0054d	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@s390_trans:
  00551	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  00555	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00559	7f 1e		 jg	 SHORT $LN21@s390_trans
  0055b	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  0055f	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00563	7c 14		 jl	 SHORT $LN21@s390_trans
  00565	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0056a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  0056f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00573	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  00577	eb ce		 jmp	 SHORT $LN20@s390_trans
$LN21@s390_trans:

; 1873 : 
; 1874 :             tab = b >= n ? NULL

  00579	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  0057d	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00581	7c 0e		 jl	 SHORT $LN48@s390_trans
  00583	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv291[rsp], 0
  0058f	eb 3e		 jmp	 SHORT $LN49@s390_trans
$LN48@s390_trans:
  00591	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  00596	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0059e	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  005a2	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  005a6	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  005ae	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  005b6	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  005bb	48 8b d0	 mov	 rdx, rax
  005be	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  005c2	e8 00 00 00 00	 call	 s390_maddr_l
  005c7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv291[rsp], rax
$LN49@s390_trans:
  005cf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv291[rsp]
  005d7	48 89 44 24 68	 mov	 QWORD PTR tab$[rsp], rax
$LN36@s390_trans:

; 1875 :                          : MADDRL(effective_addr2, n,
; 1876 :                                   b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1877 :         }
; 1878 : 
; 1879 :         /* Perform translate function */
; 1880 :         for (i=0; i <= len;  i++) dest [i] = dest [i] < n ? tab[dest [i]] : tab2[dest [i]-n];

  005dc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005e4	eb 0a		 jmp	 SHORT $LN25@s390_trans
$LN23@s390_trans:
  005e6	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  005ea	ff c0		 inc	 eax
  005ec	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@s390_trans:
  005f0	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  005f4	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  005f8	7f 69		 jg	 SHORT $LN24@s390_trans
  005fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  005ff	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00604	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00608	3b 44 24 34	 cmp	 eax, DWORD PTR n$[rsp]
  0060c	7d 1d		 jge	 SHORT $LN50@s390_trans
  0060e	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00613	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00618	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0061c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tab$[rsp]
  00621	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00625	89 44 24 78	 mov	 DWORD PTR tv318[rsp], eax
  00629	eb 24		 jmp	 SHORT $LN51@s390_trans
$LN50@s390_trans:
  0062b	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00630	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00635	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00639	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  0063d	48 98		 cdqe
  0063f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tab2$[rsp]
  00647	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0064b	89 44 24 78	 mov	 DWORD PTR tv318[rsp], eax
$LN51@s390_trans:
  0064f	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00654	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00659	0f b6 54 24 78	 movzx	 edx, BYTE PTR tv318[rsp]
  0065e	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00661	eb 83		 jmp	 SHORT $LN23@s390_trans
$LN24@s390_trans:

; 1881 :         for (i=0; i <= len2; i++) dest2[i] = dest2[i] < n ? tab[dest2[i]] : tab2[dest2[i]-n];

  00663	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0066b	eb 0a		 jmp	 SHORT $LN28@s390_trans
$LN26@s390_trans:
  0066d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00671	ff c0		 inc	 eax
  00673	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@s390_trans:
  00677	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  0067b	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0067f	7f 69		 jg	 SHORT $LN27@s390_trans
  00681	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00686	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  0068b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0068f	3b 44 24 34	 cmp	 eax, DWORD PTR n$[rsp]
  00693	7d 1d		 jge	 SHORT $LN52@s390_trans
  00695	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0069a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  0069f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006a3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tab$[rsp]
  006a8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006ac	89 44 24 7c	 mov	 DWORD PTR tv346[rsp], eax
  006b0	eb 24		 jmp	 SHORT $LN53@s390_trans
$LN52@s390_trans:
  006b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  006b7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  006bc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006c0	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  006c4	48 98		 cdqe
  006c6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tab2$[rsp]
  006ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  006d2	89 44 24 7c	 mov	 DWORD PTR tv346[rsp], eax
$LN53@s390_trans:
  006d6	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  006db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  006e0	0f b6 54 24 7c	 movzx	 edx, BYTE PTR tv346[rsp]
  006e5	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  006e8	eb 83		 jmp	 SHORT $LN26@s390_trans
$LN27@s390_trans:
$LN34@s390_trans:

; 1882 :     }
; 1883 : }

  006ea	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  006f1	c3		 ret	 0
s390_translate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tbyte$ = 32
i2$ = 33
effective_addr1$ = 36
temp$1 = 40
b1$ = 44
tv135 = 48
tv136 = 52
inst$ = 80
regs$ = 88
s390_test_under_mask PROC

; 1729 : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1730 : BYTE    i2;                             /* Immediate operand         */
; 1731 : int     b1;                             /* Base of effective addr    */
; 1732 : VADR    effective_addr1;                /* Effective address         */
; 1733 : BYTE    tbyte;                          /* Work byte                 */
; 1734 : 
; 1735 :     SI(inst, regs, i2, b1, effective_addr1);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b1$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004a	88 44 24 21	 mov	 BYTE PTR i2$[rsp], al
  0004e	83 7c 24 2c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00053	74 34		 je	 SHORT $LN5@s390_test_
  00055	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0005a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0006a	03 c8		 add	 ecx, eax
  0006c	8b c1		 mov	 eax, ecx
  0006e	89 44 24 24	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00072	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00077	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0007d	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00081	23 c8		 and	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 24	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_test_:
$LN4@s390_test_:
  00089	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0008e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00092	48 83 c0 04	 add	 rax, 4
  00096	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009f	33 c0		 xor	 eax, eax
  000a1	83 f8 04	 cmp	 eax, 4
  000a4	74 0c		 je	 SHORT $LN6@s390_test_
  000a6	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ab	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_test_:
  000b2	33 c0		 xor	 eax, eax
  000b4	85 c0		 test	 eax, eax
  000b6	75 d1		 jne	 SHORT $LN4@s390_test_

; 1736 :     PER_ZEROADDR_XCHECK( regs, b1 );
; 1737 : 
; 1738 :     /* Fetch byte from operand address */
; 1739 :     tbyte = ARCH_DEP(vfetchb) ( effective_addr1, b1, regs );

  000b8	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000bd	8b 54 24 2c	 mov	 edx, DWORD PTR b1$[rsp]
  000c1	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000c5	e8 00 00 00 00	 call	 s390_vfetchb
  000ca	88 44 24 20	 mov	 BYTE PTR tbyte$[rsp], al

; 1740 : 
; 1741 :     /* AND with immediate operand mask */
; 1742 :     tbyte &= i2;

  000ce	0f b6 44 24 21	 movzx	 eax, BYTE PTR i2$[rsp]
  000d3	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tbyte$[rsp]
  000d8	23 c8		 and	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	88 44 24 20	 mov	 BYTE PTR tbyte$[rsp], al

; 1743 : 
; 1744 :     /* Set condition code according to result */
; 1745 :     regs->psw.cc =

  000e0	0f b6 44 24 20	 movzx	 eax, BYTE PTR tbyte$[rsp]
  000e5	85 c0		 test	 eax, eax
  000e7	75 0a		 jne	 SHORT $LN10@s390_test_
  000e9	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
  000f1	eb 28		 jmp	 SHORT $LN11@s390_test_
$LN10@s390_test_:
  000f3	0f b6 44 24 20	 movzx	 eax, BYTE PTR tbyte$[rsp]
  000f8	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR i2$[rsp]
  000fd	3b c1		 cmp	 eax, ecx
  000ff	75 0a		 jne	 SHORT $LN8@s390_test_
  00101	c7 44 24 30 03
	00 00 00	 mov	 DWORD PTR tv135[rsp], 3
  00109	eb 08		 jmp	 SHORT $LN9@s390_test_
$LN8@s390_test_:
  0010b	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
$LN9@s390_test_:
  00113	8b 44 24 30	 mov	 eax, DWORD PTR tv135[rsp]
  00117	89 44 24 34	 mov	 DWORD PTR tv136[rsp], eax
$LN11@s390_test_:
  0011b	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00120	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR tv136[rsp]
  00125	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1746 :             ( tbyte == 0 ) ? 0 :            /* result all zeroes */
; 1747 :             ( tbyte == i2) ? 3 :            /* result all ones   */
; 1748 :             1 ;                             /* result mixed      */
; 1749 : }

  00128	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012c	c3		 ret	 0
s390_test_under_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
old$ = 48
effective_addr2$ = 52
b2$ = 56
temp$1 = 60
main2$ = 64
inst$ = 96
regs$ = 104
s390_test_and_set PROC

; 1621 : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1622 : int     b2;                             /* Base of effective addr    */
; 1623 : VADR    effective_addr2;                /* Effective address         */
; 1624 : BYTE   *main2;                          /* Mainstor address          */
; 1625 : BYTE    old;                            /* Old value                 */
; 1626 : 
; 1627 :     S(inst, regs, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 3c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 3c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 3c	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 38	 mov	 DWORD PTR b2$[rsp], eax
  0003e	83 7c 24 38 00	 cmp	 DWORD PTR b2$[rsp], 0
  00043	74 34		 je	 SHORT $LN7@s390_test_
  00045	48 63 44 24 38	 movsxd	 rax, DWORD PTR b2$[rsp]
  0004a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00062	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0006d	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00071	23 c8		 and	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN7@s390_test_:
$LN4@s390_test_:
  00079	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0007e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00082	48 83 c0 04	 add	 rax, 4
  00086	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0008b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0008f	33 c0		 xor	 eax, eax
  00091	83 f8 04	 cmp	 eax, 4
  00094	74 0c		 je	 SHORT $LN8@s390_test_
  00096	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_test_:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 d1		 jne	 SHORT $LN4@s390_test_

; 1628 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1629 : 
; 1630 :     TXFC_INSTR_CHECK( regs );
; 1631 : 
; 1632 :     ITIMER_SYNC(effective_addr2,0,regs);
; 1633 : 
; 1634 :     /* Perform serialization before and after operation */
; 1635 :     PERFORM_SERIALIZATION( regs );

  000a8	0f ae f0	 mfence

; 1636 :     {
; 1637 :         /* Get operand absolute address */
; 1638 :         main2 = MADDR (effective_addr2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey);

  000ab	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000b0	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000b4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000b8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c0	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  000c5	44 8b 44 24 38	 mov	 r8d, DWORD PTR b2$[rsp]
  000ca	ba 01 00 00 00	 mov	 edx, 1
  000cf	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000d3	e8 00 00 00 00	 call	 s390_maddr_l
  000d8	48 89 44 24 40	 mov	 QWORD PTR main2$[rsp], rax

; 1639 : 
; 1640 :         /* MAINLOCK may be required if cmpxchg assists unavailable */
; 1641 :         OBTAIN_MAINLOCK( regs );
; 1642 :         {
; 1643 :             /* Get old value */
; 1644 :             old = *main2;

  000dd	48 8b 44 24 40	 mov	 rax, QWORD PTR main2$[rsp]
  000e2	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000e5	88 44 24 30	 mov	 BYTE PTR old$[rsp], al

; 1645 : 
; 1646 :             /* Attempt to exchange the values */
; 1647 :             /*  The WHILE statement that follows could lead to a        */
; 1648 :             /*  TS-style lock release never being noticed, because      */
; 1649 :             /*  because such release statements are implemented using   */
; 1650 :             /*  regular instructions such as MVI or even ST which set   */
; 1651 :             /*  [the most significant bit of] the mem_lockbyte to zero; */
; 1652 :             /*  these are NOT being protected using _MAINLOCK.  In the  */
; 1653 :             /*  absence of a machine assist for "cmpxchg1" it is then   */
; 1654 :             /*  possible that this reset occurs in between the test     */
; 1655 :             /*  IF (old == mem_lockbyte), and the updating of           */
; 1656 :             /*  mem_lockbyte = 255;  As this update in the case         */
; 1657 :             /*  old == 255 is not needed to start with, we have         */
; 1658 :             /*  inserted the test IF (old != 255) in front of the       */
; 1659 :             /*  original WHILE statement.                               */
; 1660 :             /*  (The above bug WAS experienced running VM on an ARM     */
; 1661 :             /*  Raspberry PI; this correction fixed it.)                */
; 1662 :             /*                              (Peter J. Jansen, May 2015) */
; 1663 :             if (old != 255)

  000e9	0f b6 44 24 30	 movzx	 eax, BYTE PTR old$[rsp]
  000ee	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  000f3	74 1a		 je	 SHORT $LN9@s390_test_
$LN5@s390_test_:

; 1664 :                 while (cmpxchg1( &old, 255, main2 ));

  000f5	4c 8b 44 24 40	 mov	 r8, QWORD PTR main2$[rsp]
  000fa	b2 ff		 mov	 dl, 255			; 000000ffH
  000fc	48 8d 4c 24 30	 lea	 rcx, QWORD PTR old$[rsp]
  00101	e8 00 00 00 00	 call	 cmpxchg1_x86
  00106	0f b6 c0	 movzx	 eax, al
  00109	85 c0		 test	 eax, eax
  0010b	74 02		 je	 SHORT $LN6@s390_test_
  0010d	eb e6		 jmp	 SHORT $LN5@s390_test_
$LN6@s390_test_:
$LN9@s390_test_:

; 1665 :             regs->psw.cc = old >> 7;

  0010f	0f b6 44 24 30	 movzx	 eax, BYTE PTR old$[rsp]
  00114	c1 f8 07	 sar	 eax, 7
  00117	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0011c	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1666 :         }
; 1667 :         RELEASE_MAINLOCK( regs );
; 1668 :     }
; 1669 :     PERFORM_SERIALIZATION( regs );

  0011f	0f ae f0	 mfence

; 1670 : 
; 1671 :     if (regs->psw.cc == 1)

  00122	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00127	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  0012b	83 f8 01	 cmp	 eax, 1
  0012e	0f 85 9a 00 00
	00		 jne	 $LN10@s390_test_

; 1672 :     {
; 1673 : #if defined( _FEATURE_SIE )
; 1674 :         if(SIE_STATE_BIT_ON(regs, IC0, TS1))

  00134	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00139	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  0013f	d1 e8		 shr	 eax, 1
  00141	83 e0 01	 and	 eax, 1
  00144	85 c0		 test	 eax, eax
  00146	74 70		 je	 SHORT $LN12@s390_test_
  00148	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0014d	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00154	b9 01 00 00 00	 mov	 ecx, 1
  00159	48 6b c9 00	 imul	 rcx, rcx, 0
  0015d	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  00162	83 e0 08	 and	 eax, 8
  00165	85 c0		 test	 eax, eax
  00167	74 4f		 je	 SHORT $LN12@s390_test_

; 1675 :         {
; 1676 :             if( !OPEN_IC_PER(regs) )

  00169	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0016e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00173	8b 49 4c	 mov	 ecx, DWORD PTR [rcx+76]
  00176	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00179	23 c1		 and	 eax, ecx
  0017b	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  00180	85 c0		 test	 eax, eax
  00182	75 1a		 jne	 SHORT $LN14@s390_test_

; 1677 :                 longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  00184	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00189	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0018f	ba fc ff ff ff	 mov	 edx, -4
  00194	48 8b c8	 mov	 rcx, rax
  00197	e8 00 00 00 00	 call	 longjmp
  0019c	eb 18		 jmp	 SHORT $LN15@s390_test_
$LN14@s390_test_:

; 1678 :             else
; 1679 :                 longjmp(regs->progjmp, SIE_INTERCEPT_INSTCOMP);

  0019e	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001a3	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  001a9	ba fb ff ff ff	 mov	 edx, -5
  001ae	48 8b c8	 mov	 rcx, rax
  001b1	e8 00 00 00 00	 call	 longjmp
$LN15@s390_test_:

; 1680 :         }

  001b6	eb 16		 jmp	 SHORT $LN13@s390_test_
$LN12@s390_test_:

; 1681 :         else
; 1682 : #endif
; 1683 :             if (sysblk.cpus > 1)

  001b8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001bf	83 b8 04 01 00
	00 01		 cmp	 DWORD PTR [rax+260], 1
  001c6	7e 06		 jle	 SHORT $LN16@s390_test_

; 1684 :                 sched_yield();

  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN16@s390_test_:
$LN13@s390_test_:
$LN10@s390_test_:
$LN17@s390_test_:

; 1685 :     }
; 1686 :     else
; 1687 :     {
; 1688 :         ITIMER_UPDATE(effective_addr2,0,regs);
; 1689 :     }
; 1690 : }

  001ce	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d2	c3		 ret	 0
s390_test_and_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
psa$ = 56
tv213 = 64
tv220 = 68
tv227 = 72
tv229 = 76
rc$ = 80
px$ = 88
tv194 = 96
inst$ = 128
regs$ = 136
s390_supervisor_call PROC

; 1549 : {

$LN31:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1550 : BYTE    i;                              /* Instruction byte 1        */
; 1551 : PSA    *psa;                            /* -> prefixed storage area  */
; 1552 : RADR    px;                             /* prefix                    */
; 1553 : int     rc;                             /* Return code               */
; 1554 : 
; 1555 :     RR_SVC(inst, regs, i);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0001f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00023	88 44 24 30	 mov	 BYTE PTR i$[rsp], al
$LN4@s390_super:
  00027	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0002f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00033	48 83 c0 02	 add	 rax, 2
  00037	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0003f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00043	33 c0		 xor	 eax, eax
  00045	83 f8 02	 cmp	 eax, 2
  00048	74 0f		 je	 SHORT $LN11@s390_super
  0004a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00052	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s390_super:
  00059	33 c0		 xor	 eax, eax
  0005b	85 c0		 test	 eax, eax
  0005d	75 c8		 jne	 SHORT $LN4@s390_super

; 1556 : 
; 1557 :     TXF_INSTR_CHECK( regs );
; 1558 : 
; 1559 : #if defined( FEATURE_ECPSVM )
; 1560 :     if(ecpsvm_dosvc(regs,i)==0)
; 1561 :     {
; 1562 :         return;
; 1563 :     }
; 1564 : #endif
; 1565 : 
; 1566 : #if defined( _FEATURE_SIE )
; 1567 :     if(SIE_MODE(regs) &&

  0005f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  0006d	d1 e8		 shr	 eax, 1
  0006f	83 e0 01	 and	 eax, 1
  00072	85 c0		 test	 eax, eax
  00074	0f 84 27 01 00
	00		 je	 $LN12@s390_super
  0007a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00082	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	48 6b c9 00	 imul	 rcx, rcx, 0
  00092	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00097	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0009c	85 c0		 test	 eax, eax
  0009e	0f 85 e2 00 00
	00		 jne	 $LN13@s390_super
  000a4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ac	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000b3	b9 01 00 00 00	 mov	 ecx, 1
  000b8	48 6b c9 00	 imul	 rcx, rcx, 0
  000bc	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  000c1	83 e0 40	 and	 eax, 64			; 00000040H
  000c4	85 c0		 test	 eax, eax
  000c6	74 2a		 je	 SHORT $LN14@s390_super
  000c8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d0	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000d7	b9 01 00 00 00	 mov	 ecx, 1
  000dc	48 6b c9 01	 imul	 rcx, rcx, 1
  000e0	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  000e5	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  000ea	3b c1		 cmp	 eax, ecx
  000ec	0f 84 94 00 00
	00		 je	 $LN13@s390_super
$LN14@s390_super:
  000f2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fa	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00101	b9 01 00 00 00	 mov	 ecx, 1
  00106	48 6b c9 00	 imul	 rcx, rcx, 0
  0010a	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  0010f	83 e0 20	 and	 eax, 32			; 00000020H
  00112	85 c0		 test	 eax, eax
  00114	74 26		 je	 SHORT $LN15@s390_super
  00116	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00125	b9 01 00 00 00	 mov	 ecx, 1
  0012a	48 6b c9 02	 imul	 rcx, rcx, 2
  0012e	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00133	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  00138	3b c1		 cmp	 eax, ecx
  0013a	74 4a		 je	 SHORT $LN13@s390_super
$LN15@s390_super:
  0013c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00144	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  0014b	b9 01 00 00 00	 mov	 ecx, 1
  00150	48 6b c9 00	 imul	 rcx, rcx, 0
  00154	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00159	83 e0 10	 and	 eax, 16
  0015c	85 c0		 test	 eax, eax
  0015e	74 41		 je	 SHORT $LN12@s390_super
  00160	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  0016f	b9 01 00 00 00	 mov	 ecx, 1
  00174	48 6b c9 03	 imul	 rcx, rcx, 3
  00178	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  0017d	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  00182	3b c1		 cmp	 eax, ecx
  00184	75 1b		 jne	 SHORT $LN12@s390_super
$LN13@s390_super:

; 1568 :       ( (regs->siebk->svc_ctl[0] & SIE_SVC0_ALL)
; 1569 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_1N) &&
; 1570 :               regs->siebk->svc_ctl[1] == i)
; 1571 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_2N) &&
; 1572 :               regs->siebk->svc_ctl[2] == i)
; 1573 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_3N) &&
; 1574 :               regs->siebk->svc_ctl[3] == i) ))
; 1575 :         longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  00186	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0018e	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00194	ba fc ff ff ff	 mov	 edx, -4
  00199	48 8b c8	 mov	 rcx, rax
  0019c	e8 00 00 00 00	 call	 longjmp
$LN12@s390_super:

; 1576 : #endif
; 1577 : 
; 1578 :     px = regs->PX;

  001a1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001ac	48 89 44 24 58	 mov	 QWORD PTR px$[rsp], rax
$LN7@s390_super:

; 1579 :     SIE_TRANSLATE(&px, ACCTYPE_WRITE, regs);

  001b1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001b9	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  001bf	d1 e8		 shr	 eax, 1
  001c1	83 e0 01	 and	 eax, 1
  001c4	85 c0		 test	 eax, eax
  001c6	0f 84 df 00 00
	00		 je	 $LN16@s390_super
  001cc	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001d4	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  001da	c1 e8 02	 shr	 eax, 2
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	0f 85 c3 00 00
	00		 jne	 $LN16@s390_super
  001e8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001f0	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  001f7	83 78 64 01	 cmp	 DWORD PTR [rax+100], 1
  001fb	75 4a		 jne	 SHORT $LN19@s390_super
  001fd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00205	48 8b 80 98 08
	00 00		 mov	 rax, QWORD PTR [rax+2200]
  0020c	48 03 44 24 58	 add	 rax, QWORD PTR px$[rsp]
  00211	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR [rsp+40], 1
  0021a	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  0021f	41 b9 02 00 00
	00		 mov	 r9d, 2
  00225	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0022d	4c 8b 81 68 08
	00 00		 mov	 r8, QWORD PTR [rcx+2152]
  00234	ba fd ff ff ff	 mov	 edx, -3
  00239	8b c8		 mov	 ecx, eax
  0023b	e8 00 00 00 00	 call	 s390_logical_to_main_l
  00240	48 89 44 24 60	 mov	 QWORD PTR tv194[rsp], rax
  00245	eb 49		 jmp	 SHORT $LN20@s390_super
$LN19@s390_super:
  00247	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0024f	48 8b 80 98 08
	00 00		 mov	 rax, QWORD PTR [rax+2200]
  00256	48 03 44 24 58	 add	 rax, QWORD PTR px$[rsp]
  0025b	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR [rsp+40], 1
  00264	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  00269	41 b9 02 00 00
	00		 mov	 r9d, 2
  0026f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00277	4c 8b 81 68 08
	00 00		 mov	 r8, QWORD PTR [rcx+2152]
  0027e	ba fd ff ff ff	 mov	 edx, -3
  00283	48 8b c8	 mov	 rcx, rax
  00286	e8 00 00 00 00	 call	 z900_logical_to_main_l
  0028b	48 89 44 24 60	 mov	 QWORD PTR tv194[rsp], rax
$LN20@s390_super:
  00290	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00298	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0029f	48 8b 80 08 08
	00 00		 mov	 rax, QWORD PTR [rax+2056]
  002a6	48 89 44 24 58	 mov	 QWORD PTR px$[rsp], rax
$LN16@s390_super:
  002ab	33 c0		 xor	 eax, eax
  002ad	85 c0		 test	 eax, eax
  002af	0f 85 fc fe ff
	ff		 jne	 $LN7@s390_super

; 1580 : 
; 1581 :     /* Set the main storage reference and change bits */
; 1582 :     ARCH_DEP( or_storage_key )( px, (STORKEY_REF | STORKEY_CHANGE) );

  002b5	b2 06		 mov	 dl, 6
  002b7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR px$[rsp]
  002bc	e8 00 00 00 00	 call	 s390_or_storage_key

; 1583 : 
; 1584 :     /* Use the I-byte to set the SVC interruption code */
; 1585 :     regs->psw.intcode = i;

  002c1	0f b6 44 24 30	 movzx	 eax, BYTE PTR i$[rsp]
  002c6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ce	66 89 81 98 00
	00 00		 mov	 WORD PTR [rcx+152], ax

; 1586 : 
; 1587 :     /* Point to PSA in main storage */
; 1588 :     psa = (void*)(regs->mainstor + px);

  002d5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002dd	48 8b 80 48 08
	00 00		 mov	 rax, QWORD PTR [rax+2120]
  002e4	48 03 44 24 58	 add	 rax, QWORD PTR px$[rsp]
  002e9	48 89 44 24 38	 mov	 QWORD PTR psa$[rsp], rax

; 1589 : 
; 1590 : #if defined( FEATURE_BCMODE )
; 1591 :     /* For ECMODE, store SVC interrupt code at PSA+X'88' */
; 1592 :     if ( ECMODE(&regs->psw) )
; 1593 : #endif
; 1594 :     {
; 1595 :         psa->svcint[0] = 0;

  002ee	b8 01 00 00 00	 mov	 eax, 1
  002f3	48 6b c0 00	 imul	 rax, rax, 0
  002f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR psa$[rsp]
  002fc	c6 84 01 88 00
	00 00 00	 mov	 BYTE PTR [rcx+rax+136], 0

; 1596 :         psa->svcint[1] = REAL_ILC(regs);

  00304	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0030c	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00312	83 e0 01	 and	 eax, 1
  00315	85 c0		 test	 eax, eax
  00317	75 0a		 jne	 SHORT $LN21@s390_super
  00319	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv213[rsp], 1
  00321	eb 08		 jmp	 SHORT $LN22@s390_super
$LN21@s390_super:
  00323	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv213[rsp], 0
$LN22@s390_super:
  0032b	83 7c 24 40 00	 cmp	 DWORD PTR tv213[rsp], 0
  00330	74 0a		 je	 SHORT $LN25@s390_super
  00332	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  0033a	eb 08		 jmp	 SHORT $LN26@s390_super
$LN25@s390_super:
  0033c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN26@s390_super:
  00344	83 7c 24 44 00	 cmp	 DWORD PTR tv220[rsp], 0
  00349	74 15		 je	 SHORT $LN29@s390_super
  0034b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00353	0f b6 80 9a 00
	00 00		 movzx	 eax, BYTE PTR [rax+154]
  0035a	89 44 24 4c	 mov	 DWORD PTR tv229[rsp], eax
  0035e	eb 31		 jmp	 SHORT $LN30@s390_super
$LN29@s390_super:
  00360	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00368	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  0036e	d1 e8		 shr	 eax, 1
  00370	83 e0 01	 and	 eax, 1
  00373	85 c0		 test	 eax, eax
  00375	74 0a		 je	 SHORT $LN27@s390_super
  00377	c7 44 24 48 06
	00 00 00	 mov	 DWORD PTR tv227[rsp], 6
  0037f	eb 08		 jmp	 SHORT $LN28@s390_super
$LN27@s390_super:
  00381	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR tv227[rsp], 4
$LN28@s390_super:
  00389	8b 44 24 48	 mov	 eax, DWORD PTR tv227[rsp]
  0038d	89 44 24 4c	 mov	 DWORD PTR tv229[rsp], eax
$LN30@s390_super:
  00391	b8 01 00 00 00	 mov	 eax, 1
  00396	48 6b c0 01	 imul	 rax, rax, 1
  0039a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR psa$[rsp]
  0039f	0f b6 54 24 4c	 movzx	 edx, BYTE PTR tv229[rsp]
  003a4	88 94 01 88 00
	00 00		 mov	 BYTE PTR [rcx+rax+136], dl

; 1597 :         psa->svcint[2] = 0;

  003ab	b8 01 00 00 00	 mov	 eax, 1
  003b0	48 6b c0 02	 imul	 rax, rax, 2
  003b4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR psa$[rsp]
  003b9	c6 84 01 88 00
	00 00 00	 mov	 BYTE PTR [rcx+rax+136], 0

; 1598 :         psa->svcint[3] = i;

  003c1	b8 01 00 00 00	 mov	 eax, 1
  003c6	48 6b c0 03	 imul	 rax, rax, 3
  003ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR psa$[rsp]
  003cf	0f b6 54 24 30	 movzx	 edx, BYTE PTR i$[rsp]
  003d4	88 94 01 88 00
	00 00		 mov	 BYTE PTR [rcx+rax+136], dl

; 1599 :     }
; 1600 : 
; 1601 :     /* Store current PSW at PSA+X'20' */
; 1602 :     ARCH_DEP(store_psw) ( regs, psa->svcold );

  003db	48 8b 44 24 38	 mov	 rax, QWORD PTR psa$[rsp]
  003e0	48 83 c0 20	 add	 rax, 32			; 00000020H
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003ef	e8 00 00 00 00	 call	 s390_store_psw

; 1603 : 
; 1604 :     /* Load new PSW from PSA+X'60' */
; 1605 :     if ( (rc = ARCH_DEP(load_psw) ( regs, psa->svcnew ) ) )

  003f4	48 8b 44 24 38	 mov	 rax, QWORD PTR psa$[rsp]
  003f9	48 83 c0 60	 add	 rax, 96			; 00000060H
  003fd	48 8b d0	 mov	 rdx, rax
  00400	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00408	e8 00 00 00 00	 call	 s390_load_psw
  0040d	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  00411	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00416	74 1a		 je	 SHORT $LN17@s390_super

; 1606 :         regs->program_interrupt (regs, rc);

  00418	8b 54 24 50	 mov	 edx, DWORD PTR rc$[rsp]
  0041c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00424	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0042c	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN17@s390_super:

; 1607 : 
; 1608 :     /* Perform serialization and checkpoint synchronization */
; 1609 :     PERFORM_SERIALIZATION (regs);

  00432	0f ae f0	 mfence
$LN10@s390_super:

; 1610 :     PERFORM_CHKPT_SYNC (regs);

  00435	33 c0		 xor	 eax, eax
  00437	85 c0		 test	 eax, eax
  00439	75 fa		 jne	 SHORT $LN10@s390_super

; 1611 : 
; 1612 :     RETURN_INTCHECK(regs);

  0043b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00443	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00449	ba ff ff ff ff	 mov	 edx, -1
  0044e	48 8b c8	 mov	 rcx, rax
  00451	e8 00 00 00 00	 call	 longjmp
$LN18@s390_super:

; 1613 : 
; 1614 : }

  00456	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0045a	c3		 ret	 0
s390_supervisor_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$1 = 32
r1$ = 36
r2$ = 40
tv94 = 48
inst$ = 80
regs$ = 88
s390_subtract_register PROC

; 1342 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1343 : int     r1, r2;                         /* Values of R fields        */
; 1344 : 
; 1345 :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 20	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 28	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 24	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_subtr:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 02	 cmp	 eax, 2
  00058	74 0c		 je	 SHORT $LN5@s390_subtr
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@s390_subtr:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s390_subtr

; 1346 : 
; 1347 :     /* Subtract signed operands and set condition code */
; 1348 :     regs->psw.cc =

  0006c	48 63 44 24 28	 movsxd	 rax, DWORD PTR r2$[rsp]
  00071	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00076	48 63 54 24 24	 movsxd	 rdx, DWORD PTR r1$[rsp]
  0007b	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00080	49 8d 94 d0 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx*8+640]
  00088	48 89 54 24 30	 mov	 QWORD PTR tv94[rsp], rdx
  0008d	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00092	45 8b 84 c0 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax*8+640]
  0009a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0009f	8b 94 c8 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx*8+640]
  000a6	48 8b 44 24 30	 mov	 rax, QWORD PTR tv94[rsp]
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	e8 00 00 00 00	 call	 sub_signed
  000b3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000b8	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1349 :             sub_signed (&(regs->GR_L(r1)),
; 1350 :                     regs->GR_L(r1),
; 1351 :                     regs->GR_L(r2));
; 1352 : 
; 1353 :     /* Program check if fixed-point overflow */
; 1354 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  000bb	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000c0	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  000c4	83 f8 03	 cmp	 eax, 3
  000c7	75 25		 jne	 SHORT $LN6@s390_subtr
  000c9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ce	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  000d2	83 e0 08	 and	 eax, 8
  000d5	85 c0		 test	 eax, eax
  000d7	74 15		 je	 SHORT $LN6@s390_subtr

; 1355 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  000d9	ba 08 00 00 00	 mov	 edx, 8
  000de	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000e3	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e8	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN6@s390_subtr:

; 1356 : 
; 1357 :     /* Check for PER 1 GRA event */
; 1358 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1359 : }

  000ee	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f2	c3		 ret	 0
s390_subtract_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
i$1 = 36
tv80 = 40
r2$ = 44
tv138 = 48
inst$ = 80
regs$ = 88
s390_subtract_logical_register PROC

; 1495 : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1496 : int     r1, r2;                         /* Values of R fields        */
; 1497 : 
; 1498 :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 2c	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_subtr:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 02	 cmp	 eax, 2
  00058	74 0c		 je	 SHORT $LN5@s390_subtr
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@s390_subtr:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s390_subtr

; 1499 : 
; 1500 :     /* Subtract unsigned operands and set condition code */
; 1501 :     if (likely(r1 == r2))

  0006c	8b 44 24 2c	 mov	 eax, DWORD PTR r2$[rsp]
  00070	39 44 24 20	 cmp	 DWORD PTR r1$[rsp], eax
  00074	75 0a		 jne	 SHORT $LN11@s390_subtr
  00076	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  0007e	eb 08		 jmp	 SHORT $LN12@s390_subtr
$LN11@s390_subtr:
  00080	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN12@s390_subtr:
  00088	83 7c 24 28 00	 cmp	 DWORD PTR tv80[rsp], 0
  0008d	74 20		 je	 SHORT $LN6@s390_subtr

; 1502 :     {
; 1503 :         regs->psw.cc = 2;

  0008f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00094	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 1504 :         regs->GR_L(r1) = 0;

  00098	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0009d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000a2	c7 84 c1 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*8+640], 0

; 1505 :     }

  000ad	eb 4f		 jmp	 SHORT $LN7@s390_subtr
$LN6@s390_subtr:

; 1506 :     else
; 1507 :         regs->psw.cc =

  000af	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r2$[rsp]
  000b4	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  000b9	48 63 54 24 20	 movsxd	 rdx, DWORD PTR r1$[rsp]
  000be	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000c3	49 8d 94 d0 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx*8+640]
  000cb	48 89 54 24 30	 mov	 QWORD PTR tv138[rsp], rdx
  000d0	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000d5	45 8b 84 c0 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax*8+640]
  000dd	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e2	8b 94 c8 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx*8+640]
  000e9	48 8b 44 24 30	 mov	 rax, QWORD PTR tv138[rsp]
  000ee	48 8b c8	 mov	 rcx, rax
  000f1	e8 00 00 00 00	 call	 sub_logical
  000f6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN7@s390_subtr:

; 1508 :             sub_logical (&(regs->GR_L(r1)),
; 1509 :                            regs->GR_L(r1),
; 1510 :                            regs->GR_L(r2));
; 1511 : 
; 1512 :     /* Check for PER 1 GRA event */
; 1513 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1514 : }

  000fe	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00102	c3		 ret	 0
s390_subtract_logical_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
tv77 = 44
x2$ = 48
tv88 = 52
r1$ = 56
n$ = 60
inst$ = 80
regs$ = 88
s390_subtract_logical PROC

; 1521 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1522 : int     r1;                             /* Value of R field          */
; 1523 : int     x2;                             /* Index register            */
; 1524 : int     b2;                             /* Base of effective addr    */
; 1525 : VADR    effective_addr2;                /* Effective address         */
; 1526 : U32     n;                              /* 32-bit operand values     */
; 1527 : 
; 1528 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 30	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 30 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN12@s390_subtr
  00053	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN13@s390_subtr
$LN12@s390_subtr:
  0005d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN13@s390_subtr:
  00065	83 7c 24 2c 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN5@s390_subtr
  0006c	48 63 44 24 30	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s390_subtr:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN14@s390_subtr
  0009e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN15@s390_subtr
$LN14@s390_subtr:
  000a8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN15@s390_subtr:
  000b0	83 7c 24 34 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN6@s390_subtr
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_subtr:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 17		 je	 SHORT $LN7@s390_subtr
  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000e6	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ea	23 c8		 and	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN7@s390_subtr:
$LN4@s390_subtr:
  000f2	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000f7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000fb	48 83 c0 04	 add	 rax, 4
  000ff	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00104	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00108	33 c0		 xor	 eax, eax
  0010a	83 f8 04	 cmp	 eax, 4
  0010d	74 0c		 je	 SHORT $LN8@s390_subtr
  0010f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00114	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_subtr:
  0011b	33 c0		 xor	 eax, eax
  0011d	85 c0		 test	 eax, eax
  0011f	75 d1		 jne	 SHORT $LN4@s390_subtr

; 1529 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1530 : 
; 1531 :     /* Load second operand from operand address */
; 1532 :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00121	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00126	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  0012a	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0012e	e8 00 00 00 00	 call	 s390_vfetch4
  00133	89 44 24 3c	 mov	 DWORD PTR n$[rsp], eax

; 1533 : 
; 1534 :     /* Subtract unsigned operands and set condition code */
; 1535 :     regs->psw.cc =

  00137	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  0013c	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00141	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00146	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  0014e	44 8b 44 24 3c	 mov	 r8d, DWORD PTR n$[rsp]
  00153	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00158	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  0015f	e8 00 00 00 00	 call	 sub_logical
  00164	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00169	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1536 :             sub_logical (&(regs->GR_L(r1)),
; 1537 :                     regs->GR_L(r1),
; 1538 :                     n);
; 1539 : 
; 1540 :     /* Check for PER 1 GRA event */
; 1541 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1542 : }

  0016c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00170	c3		 ret	 0
s390_subtract_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
tv77 = 44
x2$ = 48
tv88 = 52
r1$ = 56
n$ = 60
inst$ = 80
regs$ = 88
s390_subtract_halfword PROC

; 1398 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1399 : int     r1;                             /* Value of R field          */
; 1400 : int     x2;                             /* Index register            */
; 1401 : int     b2;                             /* Base of effective addr    */
; 1402 : VADR    effective_addr2;                /* Effective address         */
; 1403 : U32     n;                              /* 32-bit operand values     */
; 1404 : 
; 1405 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 30	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 30 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN13@s390_subtr
  00053	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN14@s390_subtr
$LN13@s390_subtr:
  0005d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN14@s390_subtr:
  00065	83 7c 24 2c 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN5@s390_subtr
  0006c	48 63 44 24 30	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s390_subtr:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN15@s390_subtr
  0009e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN16@s390_subtr
$LN15@s390_subtr:
  000a8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN16@s390_subtr:
  000b0	83 7c 24 34 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN6@s390_subtr
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_subtr:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 17		 je	 SHORT $LN7@s390_subtr
  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000e6	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ea	23 c8		 and	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN7@s390_subtr:
$LN4@s390_subtr:
  000f2	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000f7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000fb	48 83 c0 04	 add	 rax, 4
  000ff	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00104	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00108	33 c0		 xor	 eax, eax
  0010a	83 f8 04	 cmp	 eax, 4
  0010d	74 0c		 je	 SHORT $LN8@s390_subtr
  0010f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00114	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_subtr:
  0011b	33 c0		 xor	 eax, eax
  0011d	85 c0		 test	 eax, eax
  0011f	75 d1		 jne	 SHORT $LN4@s390_subtr

; 1406 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1407 : 
; 1408 :     /* Load 2 bytes from operand address */
; 1409 :     n = (S16)ARCH_DEP(vfetch2) ( effective_addr2, b2, regs );

  00121	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00126	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  0012a	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0012e	e8 00 00 00 00	 call	 s390_vfetch2
  00133	98		 cwde
  00134	89 44 24 3c	 mov	 DWORD PTR n$[rsp], eax

; 1410 : 
; 1411 :     /* Subtract signed operands and set condition code */
; 1412 :     regs->psw.cc =

  00138	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  0013d	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00142	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00147	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  0014f	44 8b 44 24 3c	 mov	 r8d, DWORD PTR n$[rsp]
  00154	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00159	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  00160	e8 00 00 00 00	 call	 sub_signed
  00165	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0016a	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1413 :             sub_signed (&(regs->GR_L(r1)),
; 1414 :                     regs->GR_L(r1),
; 1415 :                     n);
; 1416 : 
; 1417 :     /* Program check if fixed-point overflow */
; 1418 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  0016d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00172	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  00176	83 f8 03	 cmp	 eax, 3
  00179	75 25		 jne	 SHORT $LN9@s390_subtr
  0017b	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00180	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00184	83 e0 08	 and	 eax, 8
  00187	85 c0		 test	 eax, eax
  00189	74 15		 je	 SHORT $LN9@s390_subtr

; 1419 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  0018b	ba 08 00 00 00	 mov	 edx, 8
  00190	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00195	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0019a	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@s390_subtr:

; 1420 : 
; 1421 :     /* Check for PER 1 GRA event */
; 1422 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1423 : }

  001a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a4	c3		 ret	 0
s390_subtract_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
tv77 = 44
x2$ = 48
tv88 = 52
r1$ = 56
n$ = 60
inst$ = 80
regs$ = 88
s390_subtract PROC

; 1366 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1367 : int     r1;                             /* Value of R field          */
; 1368 : int     x2;                             /* Index register            */
; 1369 : int     b2;                             /* Base of effective addr    */
; 1370 : VADR    effective_addr2;                /* Effective address         */
; 1371 : U32     n;                              /* 32-bit operand values     */
; 1372 : 
; 1373 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 30	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 30 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN13@s390_subtr
  00053	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN14@s390_subtr
$LN13@s390_subtr:
  0005d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN14@s390_subtr:
  00065	83 7c 24 2c 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN5@s390_subtr
  0006c	48 63 44 24 30	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s390_subtr:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN15@s390_subtr
  0009e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN16@s390_subtr
$LN15@s390_subtr:
  000a8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN16@s390_subtr:
  000b0	83 7c 24 34 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN6@s390_subtr
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_subtr:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 17		 je	 SHORT $LN7@s390_subtr
  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000e6	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ea	23 c8		 and	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN7@s390_subtr:
$LN4@s390_subtr:
  000f2	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000f7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000fb	48 83 c0 04	 add	 rax, 4
  000ff	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00104	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00108	33 c0		 xor	 eax, eax
  0010a	83 f8 04	 cmp	 eax, 4
  0010d	74 0c		 je	 SHORT $LN8@s390_subtr
  0010f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00114	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_subtr:
  0011b	33 c0		 xor	 eax, eax
  0011d	85 c0		 test	 eax, eax
  0011f	75 d1		 jne	 SHORT $LN4@s390_subtr

; 1374 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1375 : 
; 1376 :     /* Load second operand from operand address */
; 1377 :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00121	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00126	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  0012a	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0012e	e8 00 00 00 00	 call	 s390_vfetch4
  00133	89 44 24 3c	 mov	 DWORD PTR n$[rsp], eax

; 1378 : 
; 1379 :     /* Subtract signed operands and set condition code */
; 1380 :     regs->psw.cc =

  00137	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  0013c	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00141	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00146	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  0014e	44 8b 44 24 3c	 mov	 r8d, DWORD PTR n$[rsp]
  00153	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00158	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  0015f	e8 00 00 00 00	 call	 sub_signed
  00164	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00169	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1381 :             sub_signed (&(regs->GR_L(r1)),
; 1382 :                     regs->GR_L(r1),
; 1383 :                     n);
; 1384 : 
; 1385 :     /* Program check if fixed-point overflow */
; 1386 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  0016c	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00171	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  00175	83 f8 03	 cmp	 eax, 3
  00178	75 25		 jne	 SHORT $LN9@s390_subtr
  0017a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0017f	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00183	83 e0 08	 and	 eax, 8
  00186	85 c0		 test	 eax, eax
  00188	74 15		 je	 SHORT $LN9@s390_subtr

; 1387 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  0018a	ba 08 00 00 00	 mov	 edx, 8
  0018f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00194	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00199	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@s390_subtr:

; 1388 : 
; 1389 :     /* Check for PER 1 GRA event */
; 1390 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1391 : }

  0019f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a3	c3		 ret	 0
s390_subtract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
effective_addr2$ = 52
n$ = 56
m$ = 60
r1$ = 64
temp$1 = 68
b2$ = 72
p1$ = 80
b2$2 = 88
b1$3 = 96
tv142 = 104
tv148 = 108
tv155 = 112
tv201 = 116
tv207 = 120
bp1$ = 128
p2$ = 136
r3$ = 144
tv170 = 152
tv223 = 160
tv239 = 168
rwork$4 = 176
__$ArrayPad$ = 240
inst$ = 272
regs$ = 280
s390_store_multiple PROC

; 1256 : {

$LN52:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1257 : int     r1, r3;                         /* Register numbers          */
; 1258 : int     b2;                             /* effective address base    */
; 1259 : VADR    effective_addr2;                /* effective address         */
; 1260 : int     i, m, n;                        /* Integer work areas        */
; 1261 : U32    *p1, *p2;                        /* Mainstor pointers         */
; 1262 : BYTE   *bp1;                            /* Unaligned mainstor ptr    */
; 1263 : 
; 1264 :     RS( inst, regs, r1, r3, b2, effective_addr2 );

  00023	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	e8 00 00 00 00	 call	 fetch_fw_noswap
  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 _byteswap_ulong
  00037	89 44 24 44	 mov	 DWORD PTR temp$1[rsp], eax
  0003b	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0003f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00044	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00048	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 0c	 shr	 eax, 12
  0004f	83 e0 0f	 and	 eax, 15
  00052	89 44 24 48	 mov	 DWORD PTR b2$[rsp], eax
  00056	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0005a	c1 e8 10	 shr	 eax, 16
  0005d	83 e0 0f	 and	 eax, 15
  00060	89 84 24 90 00
	00 00		 mov	 DWORD PTR r3$[rsp], eax
  00067	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0006b	c1 e8 14	 shr	 eax, 20
  0006e	83 e0 0f	 and	 eax, 15
  00071	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax
  00075	83 7c 24 48 00	 cmp	 DWORD PTR b2$[rsp], 0
  0007a	74 41		 je	 SHORT $LN26@s390_store
  0007c	48 63 44 24 48	 movsxd	 rax, DWORD PTR b2$[rsp]
  00081	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00089	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00090	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	03 c8		 add	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 1a		 je	 SHORT $LN27@s390_store
  000a3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ab	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000b1	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b5	23 c8		 and	 ecx, eax
  000b7	8b c1		 mov	 eax, ecx
  000b9	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN27@s390_store:
$LN26@s390_store:
$LN4@s390_store:
  000bd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000c5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c9	48 83 c0 04	 add	 rax, 4
  000cd	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d5	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000d9	33 c0		 xor	 eax, eax
  000db	83 f8 04	 cmp	 eax, 4
  000de	74 0f		 je	 SHORT $LN28@s390_store
  000e0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000e8	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN28@s390_store:
  000ef	33 c0		 xor	 eax, eax
  000f1	85 c0		 test	 eax, eax
  000f3	75 c8		 jne	 SHORT $LN4@s390_store

; 1265 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1266 : 
; 1267 :     /* Calculate number of bytes to store */
; 1268 :     n = (((r3 - r1) & 0xF) + 1) << 2;

  000f5	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  000f9	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR r3$[rsp]
  00100	2b c8		 sub	 ecx, eax
  00102	8b c1		 mov	 eax, ecx
  00104	83 e0 0f	 and	 eax, 15
  00107	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [rax*4+4]
  0010e	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1269 : 
; 1270 :     /* Calculate number of bytes to next boundary */
; 1271 :     m = PAGEFRAME_PAGESIZE - ((VADR_L)effective_addr2 & PAGEFRAME_BYTEMASK);

  00112	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00116	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0011b	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00120	2b c8		 sub	 ecx, eax
  00122	8b c1		 mov	 eax, ecx
  00124	89 44 24 3c	 mov	 DWORD PTR m$[rsp], eax

; 1272 : 
; 1273 :     /* Get address of first page */
; 1274 :     bp1 = (BYTE*) MADDRL( effective_addr2, n, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00128	48 63 44 24 38	 movsxd	 rax, DWORD PTR n$[rsp]
  0012d	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00135	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00139	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0013d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00145	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0014d	44 8b 44 24 48	 mov	 r8d, DWORD PTR b2$[rsp]
  00152	48 8b d0	 mov	 rdx, rax
  00155	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00159	e8 00 00 00 00	 call	 s390_maddr_l
  0015e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR bp1$[rsp], rax

; 1275 :     p1  = (U32*)  bp1;

  00166	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bp1$[rsp]
  0016e	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax

; 1276 : 
; 1277 :     if (likely( n <= m ))

  00173	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  00177	39 44 24 38	 cmp	 DWORD PTR n$[rsp], eax
  0017b	7f 0a		 jg	 SHORT $LN38@s390_store
  0017d	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00185	eb 08		 jmp	 SHORT $LN39@s390_store
$LN38@s390_store:
  00187	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN39@s390_store:
  0018f	83 7c 24 68 00	 cmp	 DWORD PTR tv142[rsp], 0
  00194	0f 84 28 01 00
	00		 je	 $LN29@s390_store

; 1278 :     {
; 1279 :         /* boundary not crossed */
; 1280 :         n >>= 2;

  0019a	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  0019e	c1 f8 02	 sar	 eax, 2
  001a1	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1281 :         if (likely(!(((uintptr_t)effective_addr2) & 0x03)))

  001a5	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  001a9	48 83 e0 03	 and	 rax, 3
  001ad	48 85 c0	 test	 rax, rax
  001b0	75 0a		 jne	 SHORT $LN40@s390_store
  001b2	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  001ba	eb 08		 jmp	 SHORT $LN41@s390_store
$LN40@s390_store:
  001bc	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN41@s390_store:
  001c4	83 7c 24 6c 00	 cmp	 DWORD PTR tv148[rsp], 0
  001c9	74 0a		 je	 SHORT $LN44@s390_store
  001cb	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  001d3	eb 08		 jmp	 SHORT $LN45@s390_store
$LN44@s390_store:
  001d5	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN45@s390_store:
  001dd	83 7c 24 70 00	 cmp	 DWORD PTR tv155[rsp], 0
  001e2	74 71		 je	 SHORT $LN31@s390_store

; 1282 :         {
; 1283 :             for (i=0; i < n; i++)

  001e4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001ec	eb 0a		 jmp	 SHORT $LN7@s390_store
$LN5@s390_store:
  001ee	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001f2	ff c0		 inc	 eax
  001f4	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_store:
  001f8	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  001fc	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00200	7d 51		 jge	 SHORT $LN6@s390_store

; 1284 :                 store_fw( p1++, regs->GR_L( (r1 + i) & 0xF ));

  00202	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  00207	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  0020f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00213	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  00217	03 c8		 add	 ecx, eax
  00219	8b c1		 mov	 eax, ecx
  0021b	83 e0 0f	 and	 eax, 15
  0021e	48 98		 cdqe
  00220	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00228	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  0022f	e8 00 00 00 00	 call	 _byteswap_ulong
  00234	8b d0		 mov	 edx, eax
  00236	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv170[rsp]
  0023e	e8 00 00 00 00	 call	 store_fw_noswap
  00243	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  00248	48 83 c0 04	 add	 rax, 4
  0024c	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax
  00251	eb 9b		 jmp	 SHORT $LN5@s390_store
$LN6@s390_store:

; 1285 :         }

  00253	eb 68		 jmp	 SHORT $LN32@s390_store
$LN31@s390_store:

; 1286 :         else
; 1287 :         {
; 1288 :             for (i=0; i < n; i++, bp1 += 4)

  00255	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0025d	eb 1e		 jmp	 SHORT $LN10@s390_store
$LN8@s390_store:
  0025f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00263	ff c0		 inc	 eax
  00265	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
  00269	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bp1$[rsp]
  00271	48 83 c0 04	 add	 rax, 4
  00275	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR bp1$[rsp], rax
$LN10@s390_store:
  0027d	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00281	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00285	7d 36		 jge	 SHORT $LN9@s390_store

; 1289 :                 store_fw( bp1, regs->GR_L( (r1 + i) & 0xF ));

  00287	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0028b	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  0028f	03 c8		 add	 ecx, eax
  00291	8b c1		 mov	 eax, ecx
  00293	83 e0 0f	 and	 eax, 15
  00296	48 98		 cdqe
  00298	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002a0	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  002a7	e8 00 00 00 00	 call	 _byteswap_ulong
  002ac	8b d0		 mov	 edx, eax
  002ae	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR bp1$[rsp]
  002b6	e8 00 00 00 00	 call	 store_fw_noswap
  002bb	eb a2		 jmp	 SHORT $LN8@s390_store
$LN9@s390_store:
$LN32@s390_store:

; 1290 :         }
; 1291 :         ITIMER_UPDATE( effective_addr2, (n*4)-1, regs );
; 1292 :     }

  002bd	e9 b7 02 00 00	 jmp	 $LN30@s390_store
$LN29@s390_store:

; 1293 :     else
; 1294 :     {
; 1295 :         /* boundary crossed, get address of the 2nd page */
; 1296 :         effective_addr2 += m;

  002c2	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  002c6	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  002ca	03 c8		 add	 ecx, eax
  002cc	8b c1		 mov	 eax, ecx
  002ce	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 1297 :         effective_addr2 &= ADDRESS_MAXWRAP( regs );

  002d2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002da	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  002e0	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  002e4	23 c8		 and	 ecx, eax
  002e6	8b c1		 mov	 eax, ecx
  002e8	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 1298 : 
; 1299 :         p2 = (U32*) MADDRL(effective_addr2, n - m, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  002ec	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  002f0	8b 4c 24 38	 mov	 ecx, DWORD PTR n$[rsp]
  002f4	2b c8		 sub	 ecx, eax
  002f6	8b c1		 mov	 eax, ecx
  002f8	48 98		 cdqe
  002fa	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00302	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00306	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0030a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00312	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0031a	44 8b 44 24 48	 mov	 r8d, DWORD PTR b2$[rsp]
  0031f	48 8b d0	 mov	 rdx, rax
  00322	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00326	e8 00 00 00 00	 call	 s390_maddr_l
  0032b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR p2$[rsp], rax

; 1300 :         if (likely( !(m & 0x3) ))

  00333	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  00337	83 e0 03	 and	 eax, 3
  0033a	85 c0		 test	 eax, eax
  0033c	75 0a		 jne	 SHORT $LN46@s390_store
  0033e	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv201[rsp], 1
  00346	eb 08		 jmp	 SHORT $LN47@s390_store
$LN46@s390_store:
  00348	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv201[rsp], 0
$LN47@s390_store:
  00350	83 7c 24 74 00	 cmp	 DWORD PTR tv201[rsp], 0
  00355	74 0a		 je	 SHORT $LN50@s390_store
  00357	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv207[rsp], 1
  0035f	eb 08		 jmp	 SHORT $LN51@s390_store
$LN50@s390_store:
  00361	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv207[rsp], 0
$LN51@s390_store:
  00369	83 7c 24 78 00	 cmp	 DWORD PTR tv207[rsp], 0
  0036e	0f 84 fa 00 00
	00		 je	 $LN33@s390_store

; 1301 :         {
; 1302 :             /* word aligned */
; 1303 :             m >>= 2;

  00374	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  00378	c1 f8 02	 sar	 eax, 2
  0037b	89 44 24 3c	 mov	 DWORD PTR m$[rsp], eax

; 1304 : 
; 1305 :             for (i=0; i < m; i++)

  0037f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00387	eb 0a		 jmp	 SHORT $LN13@s390_store
$LN11@s390_store:
  00389	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0038d	ff c0		 inc	 eax
  0038f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@s390_store:
  00393	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  00397	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0039b	7d 51		 jge	 SHORT $LN12@s390_store

; 1306 :                 store_fw( p1++, regs->GR_L( (r1 + i) & 0xF ));

  0039d	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  003a2	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv223[rsp], rax
  003aa	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003ae	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  003b2	03 c8		 add	 ecx, eax
  003b4	8b c1		 mov	 eax, ecx
  003b6	83 e0 0f	 and	 eax, 15
  003b9	48 98		 cdqe
  003bb	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003c3	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  003ca	e8 00 00 00 00	 call	 _byteswap_ulong
  003cf	8b d0		 mov	 edx, eax
  003d1	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv223[rsp]
  003d9	e8 00 00 00 00	 call	 store_fw_noswap
  003de	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  003e3	48 83 c0 04	 add	 rax, 4
  003e7	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax
  003ec	eb 9b		 jmp	 SHORT $LN11@s390_store
$LN12@s390_store:

; 1307 : 
; 1308 :             n >>= 2;

  003ee	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  003f2	c1 f8 02	 sar	 eax, 2
  003f5	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1309 : 
; 1310 :             for (; i < n; i++)

  003f9	eb 0a		 jmp	 SHORT $LN16@s390_store
$LN14@s390_store:
  003fb	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003ff	ff c0		 inc	 eax
  00401	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s390_store:
  00405	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00409	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0040d	7d 5a		 jge	 SHORT $LN15@s390_store

; 1311 :                 store_fw( p2++, regs->GR_L( (r1 + i) & 0xF ));

  0040f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  00417	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv239[rsp], rax
  0041f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00423	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  00427	03 c8		 add	 ecx, eax
  00429	8b c1		 mov	 eax, ecx
  0042b	83 e0 0f	 and	 eax, 15
  0042e	48 98		 cdqe
  00430	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00438	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  0043f	e8 00 00 00 00	 call	 _byteswap_ulong
  00444	8b d0		 mov	 edx, eax
  00446	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv239[rsp]
  0044e	e8 00 00 00 00	 call	 store_fw_noswap
  00453	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  0045b	48 83 c0 04	 add	 rax, 4
  0045f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR p2$[rsp], rax
  00467	eb 92		 jmp	 SHORT $LN14@s390_store
$LN15@s390_store:

; 1312 :         }

  00469	e9 0b 01 00 00	 jmp	 $LN34@s390_store
$LN33@s390_store:

; 1313 :         else
; 1314 :         {
; 1315 :             /* worst case */
; 1316 :             U32 rwork[16];
; 1317 :             BYTE *b1, *b2;
; 1318 : 
; 1319 :             for (i=0; i < (n >> 2); i++)

  0046e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00476	eb 0a		 jmp	 SHORT $LN19@s390_store
$LN17@s390_store:
  00478	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0047c	ff c0		 inc	 eax
  0047e	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@s390_store:
  00482	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00486	c1 f8 02	 sar	 eax, 2
  00489	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0048d	7d 33		 jge	 SHORT $LN18@s390_store

; 1320 :                 rwork[i] = CSWAP32( regs->GR_L( (r1 + i) & 0xF ));

  0048f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00493	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  00497	03 c8		 add	 ecx, eax
  00499	8b c1		 mov	 eax, ecx
  0049b	83 e0 0f	 and	 eax, 15
  0049e	48 98		 cdqe
  004a0	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004a8	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  004af	e8 00 00 00 00	 call	 _byteswap_ulong
  004b4	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  004b9	89 84 8c b0 00
	00 00		 mov	 DWORD PTR rwork$4[rsp+rcx*4], eax
  004c0	eb b6		 jmp	 SHORT $LN17@s390_store
$LN18@s390_store:

; 1321 : 
; 1322 :             b1 = (BYTE*) &rwork[0];

  004c2	b8 04 00 00 00	 mov	 eax, 4
  004c7	48 6b c0 00	 imul	 rax, rax, 0
  004cb	48 8d 84 04 b0
	00 00 00	 lea	 rax, QWORD PTR rwork$4[rsp+rax]
  004d3	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax

; 1323 :             b2 = (BYTE*) p1;

  004d8	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  004dd	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax

; 1324 : 
; 1325 :             for (i=0; i < m; i++)

  004e2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  004ea	eb 0a		 jmp	 SHORT $LN22@s390_store
$LN20@s390_store:
  004ec	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  004f0	ff c0		 inc	 eax
  004f2	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@s390_store:
  004f6	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  004fa	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  004fe	7d 2b		 jge	 SHORT $LN21@s390_store

; 1326 :                 *b2++ = *b1++;

  00500	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00505	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b1$3[rsp]
  0050a	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0050d	88 08		 mov	 BYTE PTR [rax], cl
  0050f	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00514	48 ff c0	 inc	 rax
  00517	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax
  0051c	48 8b 44 24 60	 mov	 rax, QWORD PTR b1$3[rsp]
  00521	48 ff c0	 inc	 rax
  00524	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax
  00529	eb c1		 jmp	 SHORT $LN20@s390_store
$LN21@s390_store:

; 1327 : 
; 1328 :             b2 = (BYTE*) p2;

  0052b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  00533	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax

; 1329 : 
; 1330 :             for (; i < n; i++)

  00538	eb 0a		 jmp	 SHORT $LN25@s390_store
$LN23@s390_store:
  0053a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0053e	ff c0		 inc	 eax
  00540	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@s390_store:
  00544	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00548	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0054c	7d 2b		 jge	 SHORT $LN24@s390_store

; 1331 :                 *b2++ = *b1++;

  0054e	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00553	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b1$3[rsp]
  00558	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0055b	88 08		 mov	 BYTE PTR [rax], cl
  0055d	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00562	48 ff c0	 inc	 rax
  00565	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax
  0056a	48 8b 44 24 60	 mov	 rax, QWORD PTR b1$3[rsp]
  0056f	48 ff c0	 inc	 rax
  00572	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax
  00577	eb c1		 jmp	 SHORT $LN23@s390_store
$LN24@s390_store:
$LN34@s390_store:
$LN30@s390_store:

; 1332 :         }
; 1333 :     }
; 1334 : 
; 1335 : } /* end DEF_INST( store_multiple ) */

  00579	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00581	48 33 cc	 xor	 rcx, rsp
  00584	e8 00 00 00 00	 call	 __security_check_cookie
  00589	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00590	c3		 ret	 0
s390_store_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
tv77 = 44
x2$ = 48
tv88 = 52
r1$ = 56
inst$ = 80
regs$ = 88
s390_store_halfword PROC

; 1238 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1239 : int     r1;                             /* Value of R field          */
; 1240 : int     x2;                             /* Index register            */
; 1241 : int     b2;                             /* Base of effective addr    */
; 1242 : VADR    effective_addr2;                /* Effective address         */
; 1243 : 
; 1244 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 30	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 30 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN12@s390_store
  00053	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN13@s390_store
$LN12@s390_store:
  0005d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN13@s390_store:
  00065	83 7c 24 2c 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN5@s390_store
  0006c	48 63 44 24 30	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s390_store:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN14@s390_store
  0009e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN15@s390_store
$LN14@s390_store:
  000a8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN15@s390_store:
  000b0	83 7c 24 34 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN6@s390_store
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_store:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 17		 je	 SHORT $LN7@s390_store
  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000e6	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ea	23 c8		 and	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN7@s390_store:
$LN4@s390_store:
  000f2	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000f7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000fb	48 83 c0 04	 add	 rax, 4
  000ff	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00104	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00108	33 c0		 xor	 eax, eax
  0010a	83 f8 04	 cmp	 eax, 4
  0010d	74 0c		 je	 SHORT $LN8@s390_store
  0010f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00114	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_store:
  0011b	33 c0		 xor	 eax, eax
  0011d	85 c0		 test	 eax, eax
  0011f	75 d1		 jne	 SHORT $LN4@s390_store

; 1245 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1246 : 
; 1247 :     /* Store rightmost 2 bytes of R1 register at operand address */
; 1248 :     ARCH_DEP(vstore2) ( regs->GR_LHL(r1), effective_addr2, b2, regs );

  00121	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  00126	4c 8b 4c 24 58	 mov	 r9, QWORD PTR regs$[rsp]
  0012b	44 8b 44 24 28	 mov	 r8d, DWORD PTR b2$[rsp]
  00130	8b 54 24 20	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00134	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00139	0f b7 8c c1 80
	02 00 00	 movzx	 ecx, WORD PTR [rcx+rax*8+640]
  00141	e8 00 00 00 00	 call	 s390_vstore2

; 1249 : }

  00146	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0014a	c3		 ret	 0
s390_store_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
b2$ = 36
temp$1 = 40
dreg$ = 48
$T2 = 64
ETOD$ = 80
__$ArrayPad$ = 96
inst$ = 144
regs$ = 152
s390_store_clock PROC

; 1127 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1128 : int     b2;                             /* Base of effective addr    */
; 1129 : VADR    effective_addr2;                /* Effective address         */
; 1130 : U64     dreg;                           /* Double word work area     */
; 1131 : ETOD    ETOD;                           /* Extended TOD clock        */
; 1132 : 
; 1133 :     S( inst, regs, b2, effective_addr2 );

  0001f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00027	e8 00 00 00 00	 call	 fetch_fw_noswap
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 _byteswap_ulong
  00033	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00037	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00040	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00044	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00048	c1 e8 0c	 shr	 eax, 12
  0004b	83 e0 0f	 and	 eax, 15
  0004e	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  00052	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  00057	74 3a		 je	 SHORT $LN5@s390_store
  00059	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  0005e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00066	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00071	03 c8		 add	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00079	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00081	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00087	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0008b	23 c8		 and	 ecx, eax
  0008d	8b c1		 mov	 eax, ecx
  0008f	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s390_store:
$LN4@s390_store:
  00093	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0009b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009f	48 83 c0 04	 add	 rax, 4
  000a3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ab	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000af	33 c0		 xor	 eax, eax
  000b1	83 f8 04	 cmp	 eax, 4
  000b4	74 0f		 je	 SHORT $LN6@s390_store
  000b6	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_store:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 c8		 jne	 SHORT $LN4@s390_store

; 1134 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1135 : 
; 1136 : #if defined( _FEATURE_SIE )
; 1137 : 
; 1138 :     if (SIE_STATE_BIT_ON( regs, IC2, STCK ))

  000cb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d3	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  000d9	d1 e8		 shr	 eax, 1
  000db	83 e0 01	 and	 eax, 1
  000de	85 c0		 test	 eax, eax
  000e0	74 41		 je	 SHORT $LN7@s390_store
  000e2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ea	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000f1	b9 01 00 00 00	 mov	 ecx, 1
  000f6	48 6b c9 02	 imul	 rcx, rcx, 2
  000fa	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  000ff	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00104	85 c0		 test	 eax, eax
  00106	74 1b		 je	 SHORT $LN7@s390_store

; 1139 :         longjmp( regs->progjmp, SIE_INTERCEPT_INST );

  00108	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00110	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00116	ba fc ff ff ff	 mov	 edx, -4
  0011b	48 8b c8	 mov	 rcx, rax
  0011e	e8 00 00 00 00	 call	 longjmp
$LN7@s390_store:

; 1140 : #endif
; 1141 : 
; 1142 : #if defined( FEATURE_025_STORE_CLOCK_FAST_FACILITY )
; 1143 : 
; 1144 :     if (inst[1] == 0x7C) // STCKF only
; 1145 :     {
; 1146 :         /* Retrieve the TOD clock value without embedded CPU address */
; 1147 :         etod_clock( regs, &ETOD, ETOD_fast );
; 1148 :     }
; 1149 :     else
; 1150 : #endif
; 1151 :     {
; 1152 :         /* Perform serialization before fetching clock */
; 1153 :         PERFORM_SERIALIZATION( regs );

  00123	0f ae f0	 mfence

; 1154 : 
; 1155 :         /* Retrieve the TOD clock value with embedded CPU address*/
; 1156 :         etod_clock( regs, &ETOD, ETOD_standard );

  00126	41 b8 02 00 00
	00		 mov	 r8d, 2
  0012c	48 8d 54 24 50	 lea	 rdx, QWORD PTR ETOD$[rsp]
  00131	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00139	e8 00 00 00 00	 call	 etod_clock

; 1157 :     }
; 1158 : 
; 1159 :     /* Shift out epoch */
; 1160 :     dreg = ETOD2TOD( ETOD );

  0013e	48 8d 44 24 40	 lea	 rax, QWORD PTR $T2[rsp]
  00143	48 8d 4c 24 50	 lea	 rcx, QWORD PTR ETOD$[rsp]
  00148	48 8b f8	 mov	 rdi, rax
  0014b	48 8b f1	 mov	 rsi, rcx
  0014e	b9 10 00 00 00	 mov	 ecx, 16
  00153	f3 a4		 rep movsb
  00155	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  0015a	e8 00 00 00 00	 call	 ETOD2TOD
  0015f	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 1161 : 
; 1162 : // /*debug*/logmsg("Store TOD clock=%16.16"PRIX64"\n", dreg);
; 1163 : 
; 1164 :     /* Store TOD clock value at operand address */
; 1165 :     ARCH_DEP( vstore8 )( dreg, effective_addr2, b2, regs );

  00164	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0016c	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00171	8b 54 24 20	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00175	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dreg$[rsp]
  0017a	e8 00 00 00 00	 call	 s390_vstore8

; 1166 : 
; 1167 : #if defined( FEATURE_025_STORE_CLOCK_FAST_FACILITY )
; 1168 : 
; 1169 :     if (inst[1] != 0x7C) // not STCKF
; 1170 : #endif
; 1171 :     {
; 1172 :         /* Perform serialization after storing clock */
; 1173 :         PERFORM_SERIALIZATION( regs );

  0017f	0f ae f0	 mfence

; 1174 :     }
; 1175 : 
; 1176 :     /* Set condition code zero */
; 1177 :     regs->psw.cc = 0;

  00182	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0018a	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_store:

; 1178 : }

  0018e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00193	48 33 cc	 xor	 rcx, rsp
  00196	e8 00 00 00 00	 call	 __security_check_cookie
  0019b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0019f	5f		 pop	 rdi
  001a0	5e		 pop	 rsi
  001a1	c3		 ret	 0
s390_store_clock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
effective_addr2$ = 52
r1$ = 56
rbyte$ = 60
r3$ = 64
b2$ = 68
temp$1 = 72
tv91 = 76
inst$ = 96
regs$ = 104
s390_store_characters_under_mask PROC

; 1075 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1076 : int     r1, r3;                         /* Register numbers          */
; 1077 : int     b2;                             /* effective address base    */
; 1078 : VADR    effective_addr2;                /* effective address         */
; 1079 : int     i;                              /* Integer work area         */
; 1080 : BYTE    rbyte[4];                       /* Byte work area            */
; 1081 : 
; 1082 :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 44	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 44 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN7@s390_store
  00061	48 63 44 24 44	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN8@s390_store
  00085	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN8@s390_store:
$LN7@s390_store:
$LN4@s390_store:
  0009c	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN9@s390_store
  000b9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN9@s390_store:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_store

; 1083 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1084 : 
; 1085 :     switch (r3) {

  000cb	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  000cf	89 44 24 4c	 mov	 DWORD PTR tv91[rsp], eax
  000d3	83 7c 24 4c 07	 cmp	 DWORD PTR tv91[rsp], 7
  000d8	74 09		 je	 SHORT $LN10@s390_store
  000da	83 7c 24 4c 0f	 cmp	 DWORD PTR tv91[rsp], 15
  000df	74 4c		 je	 SHORT $LN11@s390_store
  000e1	eb 73		 jmp	 SHORT $LN12@s390_store
$LN10@s390_store:

; 1086 : 
; 1087 :     case 7:
; 1088 :         /* Optimized case */
; 1089 :         store_fw(rbyte, regs->GR_L(r1));

  000e3	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  000e8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000ed	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  000f4	e8 00 00 00 00	 call	 _byteswap_ulong
  000f9	8b d0		 mov	 edx, eax
  000fb	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR rbyte$[rsp]
  00100	e8 00 00 00 00	 call	 store_fw_noswap

; 1090 :         ARCH_DEP(vstorec) (rbyte+1, 2, effective_addr2, b2, regs);

  00105	48 8d 44 24 3d	 lea	 rax, QWORD PTR rbyte$[rsp+1]
  0010a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00114	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00119	44 8b 44 24 34	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0011e	b2 02		 mov	 dl, 2
  00120	48 8b c8	 mov	 rcx, rax
  00123	e8 00 00 00 00	 call	 s390_vstorec

; 1091 :         break;

  00128	e9 38 01 00 00	 jmp	 $LN5@s390_store
$LN11@s390_store:

; 1092 : 
; 1093 :     case 15:
; 1094 :         /* Optimized case */
; 1095 :         ARCH_DEP(vstore4) (regs->GR_L(r1), effective_addr2, b2, regs);

  0012d	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  00132	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00137	44 8b 44 24 44	 mov	 r8d, DWORD PTR b2$[rsp]
  0013c	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00140	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00145	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  0014c	e8 00 00 00 00	 call	 s390_vstore4

; 1096 :         break;

  00151	e9 0f 01 00 00	 jmp	 $LN5@s390_store
$LN12@s390_store:

; 1097 : 
; 1098 :     default:
; 1099 :         /* Extract value from register by mask */
; 1100 :         i = 0;

  00156	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 1101 :         if (r3 & 0x8) rbyte[i++] = (regs->GR_L(r1) >> 24) & 0xFF;

  0015e	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  00162	83 e0 08	 and	 eax, 8
  00165	85 c0		 test	 eax, eax
  00167	74 2c		 je	 SHORT $LN13@s390_store
  00169	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  0016e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00173	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0017a	c1 e8 18	 shr	 eax, 24
  0017d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00182	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  00187	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  0018b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0018f	ff c0		 inc	 eax
  00191	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@s390_store:

; 1102 :         if (r3 & 0x4) rbyte[i++] = (regs->GR_L(r1) >> 16) & 0xFF;

  00195	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  00199	83 e0 04	 and	 eax, 4
  0019c	85 c0		 test	 eax, eax
  0019e	74 2c		 je	 SHORT $LN14@s390_store
  001a0	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  001a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001aa	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001b1	c1 e8 10	 shr	 eax, 16
  001b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001b9	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  001be	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  001c2	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001c6	ff c0		 inc	 eax
  001c8	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN14@s390_store:

; 1103 :         if (r3 & 0x2) rbyte[i++] = (regs->GR_L(r1) >>  8) & 0xFF;

  001cc	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  001d0	83 e0 02	 and	 eax, 2
  001d3	85 c0		 test	 eax, eax
  001d5	74 2c		 je	 SHORT $LN15@s390_store
  001d7	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  001dc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001e1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001e8	c1 e8 08	 shr	 eax, 8
  001eb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001f0	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  001f5	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  001f9	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001fd	ff c0		 inc	 eax
  001ff	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN15@s390_store:

; 1104 :         if (r3 & 0x1) rbyte[i++] = (regs->GR_L(r1)      ) & 0xFF;

  00203	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  00207	83 e0 01	 and	 eax, 1
  0020a	85 c0		 test	 eax, eax
  0020c	74 29		 je	 SHORT $LN16@s390_store
  0020e	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  00213	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00218	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0021f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00224	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  00229	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  0022d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00231	ff c0		 inc	 eax
  00233	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s390_store:

; 1105 : 
; 1106 :         if (i)

  00237	83 7c 24 30 00	 cmp	 DWORD PTR i$[rsp], 0
  0023c	74 27		 je	 SHORT $LN17@s390_store

; 1107 :             ARCH_DEP(vstorec) (rbyte, i-1, effective_addr2, b2, regs);

  0023e	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00242	ff c8		 dec	 eax
  00244	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00249	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0024e	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00253	44 8b 44 24 34	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00258	0f b6 d0	 movzx	 edx, al
  0025b	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR rbyte$[rsp]
  00260	e8 00 00 00 00	 call	 s390_vstorec
$LN17@s390_store:
$LN5@s390_store:

; 1108 : #if defined( MODEL_DEPENDENT_STCM )
; 1109 :         /* If the mask is all zero, we nevertheless access one byte
; 1110 :            from the storage operand, because POP states that an
; 1111 :            access exception may be recognized on the first byte */
; 1112 :         else
; 1113 :             ARCH_DEP(validate_operand) (effective_addr2, b2, 0,
; 1114 :                                         ACCTYPE_WRITE, regs);
; 1115 : #endif
; 1116 :         break;
; 1117 : 
; 1118 :     } /* switch (r3) */
; 1119 : }

  00265	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00269	c3		 ret	 0
s390_store_characters_under_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
n$ = 44
r1$ = 48
tv136 = 52
r3$ = 56
inst$ = 80
regs$ = 88
s390_shift_right_single_logical PROC

; 1009 : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1010 : int     r1, r3;                         /* Register numbers          */
; 1011 : int     b2;                             /* effective address base    */
; 1012 : VADR    effective_addr2;                /* effective address         */
; 1013 : U32     n;                              /* Integer work areas        */
; 1014 : 
; 1015 :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 30	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN5@s390_shift
  00061	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN6@s390_shift
  00085	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_shift:
$LN5@s390_shift:
$LN4@s390_shift:
  0009c	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN7@s390_shift
  000b9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s390_shift:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_shift

; 1016 : 
; 1017 :     /* Use rightmost six bits of operand address as shift count */
; 1018 :     n = effective_addr2 & 0x3F;

  000cb	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000cf	83 e0 3f	 and	 eax, 63			; 0000003fH
  000d2	89 44 24 2c	 mov	 DWORD PTR n$[rsp], eax

; 1019 : 
; 1020 :     /* Shift the R1 register */
; 1021 :     regs->GR_L(r1) = n > 31 ? 0 : regs->GR_L(r1) >> n;

  000d6	83 7c 24 2c 1f	 cmp	 DWORD PTR n$[rsp], 31
  000db	76 0a		 jbe	 SHORT $LN9@s390_shift
  000dd	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
  000e5	eb 1b		 jmp	 SHORT $LN10@s390_shift
$LN9@s390_shift:
  000e7	48 63 44 24 30	 movsxd	 rax, DWORD PTR r1$[rsp]
  000ec	8b 4c 24 2c	 mov	 ecx, DWORD PTR n$[rsp]
  000f0	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  000f5	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  000fc	d3 e8		 shr	 eax, cl
  000fe	89 44 24 34	 mov	 DWORD PTR tv136[rsp], eax
$LN10@s390_shift:
  00102	48 63 44 24 30	 movsxd	 rax, DWORD PTR r1$[rsp]
  00107	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	8b 54 24 34	 mov	 edx, DWORD PTR tv136[rsp]
  00110	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 1022 : 
; 1023 :     /* Check for PER 1 GRA event */
; 1024 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1025 : }

  00117	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011b	c3		 ret	 0
s390_shift_right_single_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
r1$ = 36
temp$1 = 40
b2$ = 44
tv136 = 48
n$ = 52
tv143 = 56
tv157 = 60
tv158 = 64
r3$ = 68
inst$ = 96
regs$ = 104
s390_shift_right_single PROC

; 980  : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 981  : int     r1, r3;                         /* Register numbers          */
; 982  : int     b2;                             /* effective address base    */
; 983  : VADR    effective_addr2;                /* effective address         */
; 984  : U32     n;                              /* Integer work areas        */
; 985  : 
; 986  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 44	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 24	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN5@s390_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN6@s390_shift
  00085	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_shift:
$LN5@s390_shift:
$LN4@s390_shift:
  0009c	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN7@s390_shift
  000b9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s390_shift:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_shift

; 987  : 
; 988  :     /* Use rightmost six bits of operand address as shift count */
; 989  :     n = effective_addr2 & 0x3F;

  000cb	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000cf	83 e0 3f	 and	 eax, 63			; 0000003fH
  000d2	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 990  : 
; 991  :     /* Shift the signed value of the R1 register */
; 992  :     regs->GR_L(r1) = n > 30 ?

  000d6	83 7c 24 34 1e	 cmp	 DWORD PTR n$[rsp], 30
  000db	76 30		 jbe	 SHORT $LN11@s390_shift
  000dd	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  000e2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000e7	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  000ef	7d 0a		 jge	 SHORT $LN9@s390_shift
  000f1	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR tv136[rsp], -1
  000f9	eb 08		 jmp	 SHORT $LN10@s390_shift
$LN9@s390_shift:
  000fb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN10@s390_shift:
  00103	8b 44 24 30	 mov	 eax, DWORD PTR tv136[rsp]
  00107	89 44 24 38	 mov	 DWORD PTR tv143[rsp], eax
  0010b	eb 1b		 jmp	 SHORT $LN12@s390_shift
$LN11@s390_shift:
  0010d	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  00112	8b 4c 24 34	 mov	 ecx, DWORD PTR n$[rsp]
  00116	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0011b	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  00122	d3 f8		 sar	 eax, cl
  00124	89 44 24 38	 mov	 DWORD PTR tv143[rsp], eax
$LN12@s390_shift:
  00128	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  0012d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	8b 54 24 38	 mov	 edx, DWORD PTR tv143[rsp]
  00136	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 993  :                     ((S32)regs->GR_L(r1) < 0 ? -1 : 0) :
; 994  :                     (S32)regs->GR_L(r1) >> n;
; 995  : 
; 996  :     /* Set the condition code */
; 997  :     regs->psw.cc = ((S32)regs->GR_L(r1) > 0) ? 2 :

  0013d	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  00142	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00147	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0014f	7e 0a		 jle	 SHORT $LN15@s390_shift
  00151	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR tv158[rsp], 2
  00159	eb 2e		 jmp	 SHORT $LN16@s390_shift
$LN15@s390_shift:
  0015b	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  00160	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00165	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0016d	7d 0a		 jge	 SHORT $LN13@s390_shift
  0016f	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  00177	eb 08		 jmp	 SHORT $LN14@s390_shift
$LN13@s390_shift:
  00179	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN14@s390_shift:
  00181	8b 44 24 3c	 mov	 eax, DWORD PTR tv157[rsp]
  00185	89 44 24 40	 mov	 DWORD PTR tv158[rsp], eax
$LN16@s390_shift:
  00189	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0018e	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR tv158[rsp]
  00193	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 998  :                    (((S32)regs->GR_L(r1) < 0) ? 1 : 0);
; 999  : 
; 1000 :     /* Check for PER 1 GRA event */
; 1001 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 1002 : }

  00196	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019a	c3		 ret	 0
s390_shift_right_single ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
r1$ = 36
temp$1 = 40
b2$ = 44
n$ = 48
r3$ = 52
dreg$ = 56
inst$ = 80
regs$ = 88
s390_shift_right_double_logical PROC

; 951  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 952  : int     r1, r3;                         /* Register numbers          */
; 953  : int     b2;                             /* effective address base    */
; 954  : VADR    effective_addr2;                /* effective address         */
; 955  : U32     n;                              /* 32-bit operand values     */
; 956  : U64     dreg;                           /* Double register work area */
; 957  : 
; 958  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 34	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 24	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN5@s390_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN6@s390_shift
  00085	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_shift:
$LN5@s390_shift:
$LN4@s390_shift:
  0009c	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN7@s390_shift
  000b9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s390_shift:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_shift

; 959  : 
; 960  :     ODD_CHECK(r1, regs);

  000cb	8b 44 24 24	 mov	 eax, DWORD PTR r1$[rsp]
  000cf	83 e0 01	 and	 eax, 1
  000d2	85 c0		 test	 eax, eax
  000d4	74 15		 je	 SHORT $LN8@s390_shift
  000d6	ba 06 00 00 00	 mov	 edx, 6
  000db	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000e0	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@s390_shift:

; 961  : 
; 962  :         /* Use rightmost six bits of operand address as shift count */
; 963  :     n = effective_addr2 & 0x3F;

  000eb	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000ef	83 e0 3f	 and	 eax, 63			; 0000003fH
  000f2	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 964  : 
; 965  :     /* Shift the R1 and R1+1 registers */
; 966  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  000f6	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  000fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00100	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00107	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0010b	8b 4c 24 24	 mov	 ecx, DWORD PTR r1$[rsp]
  0010f	ff c1		 inc	 ecx
  00111	48 63 c9	 movsxd	 rcx, ecx
  00114	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00119	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00120	48 0b c1	 or	 rax, rcx
  00123	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 967  :     dreg >>= n;

  00128	8b 44 24 30	 mov	 eax, DWORD PTR n$[rsp]
  0012c	0f b6 c8	 movzx	 ecx, al
  0012f	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  00134	48 d3 e8	 shr	 rax, cl
  00137	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 968  :     regs->GR_L(r1) = dreg >> 32;

  0013c	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  00141	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00145	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR r1$[rsp]
  0014a	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  0014f	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 969  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00156	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0015b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dreg$[rsp]
  00160	48 23 c8	 and	 rcx, rax
  00163	48 8b c1	 mov	 rax, rcx
  00166	8b 4c 24 24	 mov	 ecx, DWORD PTR r1$[rsp]
  0016a	ff c1		 inc	 ecx
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00174	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 970  : 
; 971  :     /* Check for PER 1 GRA event */
; 972  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 973  : }

  0017b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017f	c3		 ret	 0
s390_shift_right_double_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
r1$ = 36
temp$1 = 40
dreg$ = 48
b2$ = 56
tv163 = 60
tv164 = 64
n$ = 68
r3$ = 72
inst$ = 96
regs$ = 104
s390_shift_right_double PROC

; 919  : {

$LN14:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 920  : int     r1, r3;                         /* Register numbers          */
; 921  : int     b2;                             /* effective address base    */
; 922  : VADR    effective_addr2;                /* effective address         */
; 923  : U32     n;                              /* 32-bit operand values     */
; 924  : U64     dreg;                           /* Double register work area */
; 925  : 
; 926  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 38	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 48	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 24	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 38 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN5@s390_shift
  00061	48 63 44 24 38	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN6@s390_shift
  00085	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_shift:
$LN5@s390_shift:
$LN4@s390_shift:
  0009c	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN7@s390_shift
  000b9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s390_shift:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_shift

; 927  : 
; 928  :     ODD_CHECK(r1, regs);

  000cb	8b 44 24 24	 mov	 eax, DWORD PTR r1$[rsp]
  000cf	83 e0 01	 and	 eax, 1
  000d2	85 c0		 test	 eax, eax
  000d4	74 15		 je	 SHORT $LN8@s390_shift
  000d6	ba 06 00 00 00	 mov	 edx, 6
  000db	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000e0	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@s390_shift:

; 929  : 
; 930  :     /* Use rightmost six bits of operand address as shift count */
; 931  :     n = effective_addr2 & 0x3F;

  000eb	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000ef	83 e0 3f	 and	 eax, 63			; 0000003fH
  000f2	89 44 24 44	 mov	 DWORD PTR n$[rsp], eax

; 932  : 
; 933  :     /* Shift the R1 and R1+1 registers */
; 934  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  000f6	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  000fb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00100	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00107	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0010b	8b 4c 24 24	 mov	 ecx, DWORD PTR r1$[rsp]
  0010f	ff c1		 inc	 ecx
  00111	48 63 c9	 movsxd	 rcx, ecx
  00114	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00119	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00120	48 0b c1	 or	 rax, rcx
  00123	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 935  :     dreg = (U64)((S64)dreg >> n);

  00128	8b 44 24 44	 mov	 eax, DWORD PTR n$[rsp]
  0012c	0f b6 c8	 movzx	 ecx, al
  0012f	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  00134	48 d3 f8	 sar	 rax, cl
  00137	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 936  :     regs->GR_L(r1) = dreg >> 32;

  0013c	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  00141	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00145	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR r1$[rsp]
  0014a	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0014f	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 937  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00156	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0015b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dreg$[rsp]
  00160	48 23 c8	 and	 rcx, rax
  00163	48 8b c1	 mov	 rax, rcx
  00166	8b 4c 24 24	 mov	 ecx, DWORD PTR r1$[rsp]
  0016a	ff c1		 inc	 ecx
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00174	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 938  : 
; 939  :     /* Set the condition code */
; 940  :     regs->psw.cc = (S64)dreg > 0 ? 2 : (S64)dreg < 0 ? 1 : 0;

  0017b	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  00181	7e 0a		 jle	 SHORT $LN12@s390_shift
  00183	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR tv164[rsp], 2
  0018b	eb 22		 jmp	 SHORT $LN13@s390_shift
$LN12@s390_shift:
  0018d	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  00193	7d 0a		 jge	 SHORT $LN10@s390_shift
  00195	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  0019d	eb 08		 jmp	 SHORT $LN11@s390_shift
$LN10@s390_shift:
  0019f	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN11@s390_shift:
  001a7	8b 44 24 3c	 mov	 eax, DWORD PTR tv163[rsp]
  001ab	89 44 24 40	 mov	 DWORD PTR tv164[rsp], eax
$LN13@s390_shift:
  001af	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001b4	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR tv164[rsp]
  001b9	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 941  : 
; 942  :     /* Check for PER 1 GRA event */
; 943  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 944  : }

  001bc	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c0	c3		 ret	 0
s390_shift_right_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
n$ = 44
r1$ = 48
tv136 = 52
r3$ = 56
inst$ = 80
regs$ = 88
s390_shift_left_single_logical PROC

; 896  : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 897  : int     r1, r3;                         /* Register numbers          */
; 898  : int     b2;                             /* effective address base    */
; 899  : VADR    effective_addr2;                /* effective address         */
; 900  : U32     n;                              /* Integer work areas        */
; 901  : 
; 902  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 30	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN5@s390_shift
  00061	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN6@s390_shift
  00085	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_shift:
$LN5@s390_shift:
$LN4@s390_shift:
  0009c	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN7@s390_shift
  000b9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s390_shift:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_shift

; 903  : 
; 904  :     /* Use rightmost six bits of operand address as shift count */
; 905  :     n = effective_addr2 & 0x3F;

  000cb	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000cf	83 e0 3f	 and	 eax, 63			; 0000003fH
  000d2	89 44 24 2c	 mov	 DWORD PTR n$[rsp], eax

; 906  : 
; 907  :     /* Shift the R1 register */
; 908  :     regs->GR_L(r1) = n > 31 ? 0 : regs->GR_L(r1) << n;

  000d6	83 7c 24 2c 1f	 cmp	 DWORD PTR n$[rsp], 31
  000db	76 0a		 jbe	 SHORT $LN9@s390_shift
  000dd	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
  000e5	eb 1b		 jmp	 SHORT $LN10@s390_shift
$LN9@s390_shift:
  000e7	48 63 44 24 30	 movsxd	 rax, DWORD PTR r1$[rsp]
  000ec	8b 4c 24 2c	 mov	 ecx, DWORD PTR n$[rsp]
  000f0	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  000f5	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  000fc	d3 e0		 shl	 eax, cl
  000fe	89 44 24 34	 mov	 DWORD PTR tv136[rsp], eax
$LN10@s390_shift:
  00102	48 63 44 24 30	 movsxd	 rax, DWORD PTR r1$[rsp]
  00107	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	8b 54 24 34	 mov	 edx, DWORD PTR tv136[rsp]
  00110	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 909  : 
; 910  :     /* Check for PER 1 GRA event */
; 911  :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 912  : }

  00117	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011b	c3		 ret	 0
s390_shift_left_single_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
n1$ = 44
n$ = 48
i$ = 52
b2$ = 56
tv149 = 60
n2$ = 64
j$ = 68
tv197 = 72
tv198 = 76
r3$ = 80
inst$ = 112
regs$ = 120
s390_shift_left_single PROC

; 836  : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 837  : int     r1, r3;                         /* Register numbers          */
; 838  : int     b2;                             /* effective address base    */
; 839  : VADR    effective_addr2;                /* effective address         */
; 840  : U32     n, n1, n2;                      /* 32-bit operand values     */
; 841  : U32     i, j;                           /* Integer work areas        */
; 842  : 
; 843  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 38	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 50	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 38 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN8@s390_shift
  00061	48 63 44 24 38	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN9@s390_shift
  00085	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s390_shift:
$LN8@s390_shift:
$LN4@s390_shift:
  0009c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN10@s390_shift
  000b9	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s390_shift:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_shift

; 844  : 
; 845  :     /* Use rightmost six bits of operand address as shift count */
; 846  :     n = effective_addr2 & 0x3F;

  000cb	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000cf	83 e0 3f	 and	 eax, 63			; 0000003fH
  000d2	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 847  : 
; 848  :     /* Fast path if no possible overflow */
; 849  :     if (regs->GR_L(r1) < 0x10000 && n < 16)

  000d6	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000db	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000e0	81 bc c1 80 02
	00 00 00 00 01
	00		 cmp	 DWORD PTR [rcx+rax*8+640], 65536 ; 00010000H
  000eb	73 67		 jae	 SHORT $LN11@s390_shift
  000ed	83 7c 24 30 10	 cmp	 DWORD PTR n$[rsp], 16
  000f2	73 60		 jae	 SHORT $LN11@s390_shift

; 850  :     {
; 851  :         regs->GR_L(r1) <<= n;

  000f4	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000f9	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  000fd	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00102	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  00109	d3 e0		 shl	 eax, cl
  0010b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00110	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00115	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 852  :         regs->psw.cc = regs->GR_L(r1) ? 2 : 0;

  0011c	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00121	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00126	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0012e	74 0a		 je	 SHORT $LN16@s390_shift
  00130	c7 44 24 3c 02
	00 00 00	 mov	 DWORD PTR tv149[rsp], 2
  00138	eb 08		 jmp	 SHORT $LN17@s390_shift
$LN16@s390_shift:
  0013a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
$LN17@s390_shift:
  00142	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00147	0f b6 4c 24 3c	 movzx	 ecx, BYTE PTR tv149[rsp]
  0014c	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 853  :         return;

  0014f	e9 29 01 00 00	 jmp	 $LN1@s390_shift
$LN11@s390_shift:

; 854  :     }
; 855  : 
; 856  :     /* Load the numeric and sign portions from the R1 register */
; 857  :     n1 = regs->GR_L(r1) & 0x7FFFFFFF;

  00154	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00159	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0015e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00165	0f ba f0 1f	 btr	 eax, 31
  00169	89 44 24 2c	 mov	 DWORD PTR n1$[rsp], eax

; 858  :     n2 = regs->GR_L(r1) & 0x80000000;

  0016d	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00172	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00177	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0017e	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00183	89 44 24 40	 mov	 DWORD PTR n2$[rsp], eax

; 859  : 
; 860  :     /* Shift the numeric portion left n positions */
; 861  :     for (i = 0, j = 0; i < n; i++)

  00187	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0018f	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00197	eb 0a		 jmp	 SHORT $LN7@s390_shift
$LN5@s390_shift:
  00199	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  0019d	ff c0		 inc	 eax
  0019f	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_shift:
  001a3	8b 44 24 30	 mov	 eax, DWORD PTR n$[rsp]
  001a7	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  001ab	73 23		 jae	 SHORT $LN6@s390_shift

; 862  :     {
; 863  :         /* Shift bits 1-31 left one bit position */
; 864  :         n1 <<= 1;

  001ad	8b 44 24 2c	 mov	 eax, DWORD PTR n1$[rsp]
  001b1	d1 e0		 shl	 eax, 1
  001b3	89 44 24 2c	 mov	 DWORD PTR n1$[rsp], eax

; 865  : 
; 866  :         /* Overflow if bit shifted out is unlike the sign bit */
; 867  :         if ((n1 & 0x80000000) != n2)

  001b7	8b 44 24 2c	 mov	 eax, DWORD PTR n1$[rsp]
  001bb	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001c0	3b 44 24 40	 cmp	 eax, DWORD PTR n2$[rsp]
  001c4	74 08		 je	 SHORT $LN12@s390_shift

; 868  :             j = 1;

  001c6	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1
$LN12@s390_shift:

; 869  :     }

  001ce	eb c9		 jmp	 SHORT $LN5@s390_shift
$LN6@s390_shift:

; 870  : 
; 871  :     /* Load the updated value into the R1 register */
; 872  :     regs->GR_L(r1) = (n1 & 0x7FFFFFFF) | n2;

  001d0	8b 44 24 2c	 mov	 eax, DWORD PTR n1$[rsp]
  001d4	0f ba f0 1f	 btr	 eax, 31
  001d8	0b 44 24 40	 or	 eax, DWORD PTR n2$[rsp]
  001dc	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  001e1	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  001e6	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 873  : 
; 874  :     /* Condition code 3 and program check if overflow occurred */
; 875  :     if (j)

  001ed	83 7c 24 44 00	 cmp	 DWORD PTR j$[rsp], 0
  001f2	74 30		 je	 SHORT $LN13@s390_shift

; 876  :     {
; 877  :         regs->psw.cc = 3;

  001f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 878  :         if ( FOMASK(&regs->psw) )

  001fd	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00202	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00206	83 e0 08	 and	 eax, 8
  00209	85 c0		 test	 eax, eax
  0020b	74 15		 je	 SHORT $LN14@s390_shift

; 879  :             regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  0020d	ba 08 00 00 00	 mov	 edx, 8
  00212	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00217	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0021c	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s390_shift:

; 880  :         return;

  00222	eb 59		 jmp	 SHORT $LN1@s390_shift
$LN13@s390_shift:

; 881  :     }
; 882  : 
; 883  :     /* Set the condition code */
; 884  :     regs->psw.cc = (S32)regs->GR_L(r1) > 0 ? 2 :

  00224	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00229	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0022e	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  00236	7e 0a		 jle	 SHORT $LN20@s390_shift
  00238	c7 44 24 4c 02
	00 00 00	 mov	 DWORD PTR tv198[rsp], 2
  00240	eb 2e		 jmp	 SHORT $LN21@s390_shift
$LN20@s390_shift:
  00242	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00247	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0024c	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  00254	7d 0a		 jge	 SHORT $LN18@s390_shift
  00256	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv197[rsp], 1
  0025e	eb 08		 jmp	 SHORT $LN19@s390_shift
$LN18@s390_shift:
  00260	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv197[rsp], 0
$LN19@s390_shift:
  00268	8b 44 24 48	 mov	 eax, DWORD PTR tv197[rsp]
  0026c	89 44 24 4c	 mov	 DWORD PTR tv198[rsp], eax
$LN21@s390_shift:
  00270	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00275	0f b6 4c 24 4c	 movzx	 ecx, BYTE PTR tv198[rsp]
  0027a	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@s390_shift:

; 885  :                    (S32)regs->GR_L(r1) < 0 ? 1 : 0;
; 886  : 
; 887  :     /* Check for PER 1 GRA event */
; 888  :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 889  : }

  0027d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00281	c3		 ret	 0
s390_shift_left_single ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
r1$ = 36
temp$1 = 40
b2$ = 44
n$ = 48
r3$ = 52
dreg$ = 56
inst$ = 80
regs$ = 88
s390_shift_left_double_logical PROC

; 807  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 808  : int     r1, r3;                         /* Register numbers          */
; 809  : int     b2;                             /* effective address base    */
; 810  : VADR    effective_addr2;                /* effective address         */
; 811  : U32     n;                              /* 32-bit operand values     */
; 812  : U64     dreg;                           /* Double register work area */
; 813  : 
; 814  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 34	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 24	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 3b		 je	 SHORT $LN5@s390_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 17		 je	 SHORT $LN6@s390_shift
  00085	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00090	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	23 c8		 and	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_shift:
$LN5@s390_shift:
$LN4@s390_shift:
  0009c	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a5	48 83 c0 04	 add	 rax, 4
  000a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b2	33 c0		 xor	 eax, eax
  000b4	83 f8 04	 cmp	 eax, 4
  000b7	74 0c		 je	 SHORT $LN7@s390_shift
  000b9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000be	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s390_shift:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 d1		 jne	 SHORT $LN4@s390_shift

; 815  : 
; 816  :     ODD_CHECK(r1, regs);

  000cb	8b 44 24 24	 mov	 eax, DWORD PTR r1$[rsp]
  000cf	83 e0 01	 and	 eax, 1
  000d2	85 c0		 test	 eax, eax
  000d4	74 15		 je	 SHORT $LN8@s390_shift
  000d6	ba 06 00 00 00	 mov	 edx, 6
  000db	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000e0	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e5	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@s390_shift:

; 817  : 
; 818  :     /* Use rightmost six bits of operand address as shift count */
; 819  :     n = effective_addr2 & 0x3F;

  000eb	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000ef	83 e0 3f	 and	 eax, 63			; 0000003fH
  000f2	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 820  : 
; 821  :     /* Shift the R1 and R1+1 registers */
; 822  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  000f6	48 63 44 24 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  000fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00100	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00107	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  0010b	8b 4c 24 24	 mov	 ecx, DWORD PTR r1$[rsp]
  0010f	ff c1		 inc	 ecx
  00111	48 63 c9	 movsxd	 rcx, ecx
  00114	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00119	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00120	48 0b c1	 or	 rax, rcx
  00123	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 823  :     dreg <<= n;

  00128	8b 44 24 30	 mov	 eax, DWORD PTR n$[rsp]
  0012c	0f b6 c8	 movzx	 ecx, al
  0012f	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  00134	48 d3 e0	 shl	 rax, cl
  00137	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 824  :     regs->GR_L(r1) = dreg >> 32;

  0013c	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  00141	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00145	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR r1$[rsp]
  0014a	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  0014f	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 825  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00156	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0015b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dreg$[rsp]
  00160	48 23 c8	 and	 rcx, rax
  00163	48 8b c1	 mov	 rax, rcx
  00166	8b 4c 24 24	 mov	 ecx, DWORD PTR r1$[rsp]
  0016a	ff c1		 inc	 ecx
  0016c	48 63 c9	 movsxd	 rcx, ecx
  0016f	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00174	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 826  : 
; 827  :     /* Check for PER 1 GRA event */
; 828  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 829  : }

  0017b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017f	c3		 ret	 0
s390_shift_left_double_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
dreg$ = 48
i$ = 56
b2$ = 60
tv145 = 64
tv150 = 68
m$ = 72
j$ = 76
tv192 = 80
tv193 = 84
n$ = 88
h$ = 92
r3$ = 96
inst$ = 128
regs$ = 136
s390_shift_left_double PROC

; 749  : {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 750  : int     r1, r3;                         /* Register numbers          */
; 751  : int     b2;                             /* effective address base    */
; 752  : VADR    effective_addr2;                /* effective address         */
; 753  : U32     n;                              /* 32-bit operand values     */
; 754  : U64     dreg;                           /* Double register work area */
; 755  : U32     h, i, j, m;                     /* Integer work areas        */
; 756  : 
; 757  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00016	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 _byteswap_ulong
  00022	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00026	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  0002a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002f	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00033	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 3c	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 60	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 3c 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 41		 je	 SHORT $LN8@s390_shift
  00064	48 63 44 24 3c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00071	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00078	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0007c	03 c8		 add	 ecx, eax
  0007e	8b c1		 mov	 eax, ecx
  00080	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00084	33 c0		 xor	 eax, eax
  00086	83 f8 04	 cmp	 eax, 4
  00089	74 1a		 je	 SHORT $LN9@s390_shift
  0008b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00093	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00099	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0009d	23 c8		 and	 ecx, eax
  0009f	8b c1		 mov	 eax, ecx
  000a1	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s390_shift:
$LN8@s390_shift:
$LN4@s390_shift:
  000a5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ad	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b1	48 83 c0 04	 add	 rax, 4
  000b5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000bd	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000c1	33 c0		 xor	 eax, eax
  000c3	83 f8 04	 cmp	 eax, 4
  000c6	74 0f		 je	 SHORT $LN10@s390_shift
  000c8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d0	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s390_shift:
  000d7	33 c0		 xor	 eax, eax
  000d9	85 c0		 test	 eax, eax
  000db	75 c8		 jne	 SHORT $LN4@s390_shift

; 758  : 
; 759  :     ODD_CHECK(r1, regs);

  000dd	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000e1	83 e0 01	 and	 eax, 1
  000e4	85 c0		 test	 eax, eax
  000e6	74 1b		 je	 SHORT $LN11@s390_shift
  000e8	ba 06 00 00 00	 mov	 edx, 6
  000ed	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fd	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s390_shift:

; 760  : 
; 761  :     /* Use rightmost six bits of operand address as shift count */
; 762  :     n = effective_addr2 & 0x3F;

  00103	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00107	83 e0 3f	 and	 eax, 63			; 0000003fH
  0010a	89 44 24 58	 mov	 DWORD PTR n$[rsp], eax

; 763  : 
; 764  :     /* Load the signed value from the R1 and R1+1 registers */
; 765  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  0010e	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00113	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00122	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00126	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0012a	ff c1		 inc	 ecx
  0012c	48 63 c9	 movsxd	 rcx, ecx
  0012f	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00137	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  0013e	48 0b c1	 or	 rax, rcx
  00141	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 766  :     m = ((S64)dreg < 0) ? 1 : 0;

  00146	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  0014c	7d 0a		 jge	 SHORT $LN17@s390_shift
  0014e	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv145[rsp], 1
  00156	eb 08		 jmp	 SHORT $LN18@s390_shift
$LN17@s390_shift:
  00158	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
$LN18@s390_shift:
  00160	8b 44 24 40	 mov	 eax, DWORD PTR tv145[rsp]
  00164	89 44 24 48	 mov	 DWORD PTR m$[rsp], eax

; 767  : 
; 768  :     /* Shift the numeric portion of the value */
; 769  :     for (i = 0, j = 0; i < n; i++)

  00168	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00170	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00178	eb 0a		 jmp	 SHORT $LN7@s390_shift
$LN5@s390_shift:
  0017a	8b 44 24 38	 mov	 eax, DWORD PTR i$[rsp]
  0017e	ff c0		 inc	 eax
  00180	89 44 24 38	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_shift:
  00184	8b 44 24 58	 mov	 eax, DWORD PTR n$[rsp]
  00188	39 44 24 38	 cmp	 DWORD PTR i$[rsp], eax
  0018c	73 43		 jae	 SHORT $LN6@s390_shift

; 770  :     {
; 771  :         /* Shift bits 1-63 left one bit position */
; 772  :         dreg <<= 1;

  0018e	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  00193	48 d1 e0	 shl	 rax, 1
  00196	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 773  : 
; 774  :         /* Overflow if bit shifted out is unlike the sign bit */
; 775  :         h = ((S64)dreg < 0) ? 1 : 0;

  0019b	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  001a1	7d 0a		 jge	 SHORT $LN19@s390_shift
  001a3	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv150[rsp], 1
  001ab	eb 08		 jmp	 SHORT $LN20@s390_shift
$LN19@s390_shift:
  001ad	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv150[rsp], 0
$LN20@s390_shift:
  001b5	8b 44 24 44	 mov	 eax, DWORD PTR tv150[rsp]
  001b9	89 44 24 5c	 mov	 DWORD PTR h$[rsp], eax

; 776  :         if (h != m)

  001bd	8b 44 24 48	 mov	 eax, DWORD PTR m$[rsp]
  001c1	39 44 24 5c	 cmp	 DWORD PTR h$[rsp], eax
  001c5	74 08		 je	 SHORT $LN12@s390_shift

; 777  :             j = 1;

  001c7	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1
$LN12@s390_shift:

; 778  :     }

  001cf	eb a9		 jmp	 SHORT $LN5@s390_shift
$LN6@s390_shift:

; 779  : 
; 780  :     /* Load updated value into the R1 and R1+1 registers */
; 781  :     regs->GR_L(r1) = (dreg >> 32) & 0x7FFFFFFF;

  001d1	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  001d6	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  001da	48 25 ff ff ff
	7f		 and	 rax, 2147483647		; 7fffffffH
  001e0	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  001e5	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001ed	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 782  :     if (m)

  001f4	83 7c 24 48 00	 cmp	 DWORD PTR m$[rsp], 0
  001f9	74 2c		 je	 SHORT $LN13@s390_shift

; 783  :         regs->GR_L(r1) |= 0x80000000;

  001fb	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00200	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00208	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0020f	0f ba e8 1f	 bts	 eax, 31
  00213	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00218	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00220	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN13@s390_shift:

; 784  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  00227	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0022c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dreg$[rsp]
  00231	48 23 c8	 and	 rcx, rax
  00234	48 8b c1	 mov	 rax, rcx
  00237	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0023b	ff c1		 inc	 ecx
  0023d	48 63 c9	 movsxd	 rcx, ecx
  00240	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00248	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 785  : 
; 786  :     /* Condition code 3 and program check if overflow occurred */
; 787  :     if (j)

  0024f	83 7c 24 4c 00	 cmp	 DWORD PTR j$[rsp], 0
  00254	74 3c		 je	 SHORT $LN14@s390_shift

; 788  :     {
; 789  :         regs->psw.cc = 3;

  00256	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0025e	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 790  :         if ( FOMASK(&regs->psw) )

  00262	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0026a	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  0026e	83 e0 08	 and	 eax, 8
  00271	85 c0		 test	 eax, eax
  00273	74 1b		 je	 SHORT $LN15@s390_shift

; 791  :             regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  00275	ba 08 00 00 00	 mov	 edx, 8
  0027a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00282	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0028a	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN15@s390_shift:

; 792  :         return;

  00290	eb 44		 jmp	 SHORT $LN1@s390_shift
$LN14@s390_shift:

; 793  :     }
; 794  : 
; 795  :     /* Set the condition code */
; 796  :     regs->psw.cc = (S64)dreg > 0 ? 2 : (S64)dreg < 0 ? 1 : 0;

  00292	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  00298	7e 0a		 jle	 SHORT $LN23@s390_shift
  0029a	c7 44 24 54 02
	00 00 00	 mov	 DWORD PTR tv193[rsp], 2
  002a2	eb 22		 jmp	 SHORT $LN24@s390_shift
$LN23@s390_shift:
  002a4	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  002aa	7d 0a		 jge	 SHORT $LN21@s390_shift
  002ac	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  002b4	eb 08		 jmp	 SHORT $LN22@s390_shift
$LN21@s390_shift:
  002b6	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN22@s390_shift:
  002be	8b 44 24 50	 mov	 eax, DWORD PTR tv192[rsp]
  002c2	89 44 24 54	 mov	 DWORD PTR tv193[rsp], eax
$LN24@s390_shift:
  002c6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002ce	0f b6 4c 24 54	 movzx	 ecx, BYTE PTR tv193[rsp]
  002d3	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@s390_shift:

; 797  : 
; 798  :     /* Check for PER 1 GRA event */
; 799  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));
; 800  : }

  002d6	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002da	c3		 ret	 0
s390_shift_left_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$1 = 0
r1$ = 4
r2$ = 8
inst$ = 32
regs$ = 40
s390_set_program_mask PROC

; 732  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 733  : int     r1, r2;                         /* Values of R fields        */
; 734  : 
; 735  :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 20	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
  00023	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00026	83 e0 0f	 and	 eax, 15
  00029	89 44 24 08	 mov	 DWORD PTR r2$[rsp], eax
  0002d	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00030	c1 f8 04	 sar	 eax, 4
  00033	83 e0 0f	 and	 eax, 15
  00036	89 44 24 04	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_set_p:
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0003f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00043	48 83 c0 02	 add	 rax, 2
  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  0004c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00050	33 c0		 xor	 eax, eax
  00052	83 f8 02	 cmp	 eax, 2
  00055	74 0c		 je	 SHORT $LN5@s390_set_p
  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0005c	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@s390_set_p:
  00063	33 c0		 xor	 eax, eax
  00065	85 c0		 test	 eax, eax
  00067	75 d1		 jne	 SHORT $LN4@s390_set_p

; 736  : 
; 737  :     /* Set condition code from bits 2-3 of R1 register */
; 738  :     regs->psw.cc = ( regs->GR_L(r1) & 0x30000000 ) >> 28;

  00069	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0006e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00073	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007a	25 00 00 00 30	 and	 eax, 805306368		; 30000000H
  0007f	c1 e8 1c	 shr	 eax, 28
  00082	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00087	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 739  : 
; 740  :     /* Set program mask from bits 4-7 of R1 register */
; 741  :     regs->psw.progmask = ( regs->GR_L(r1) >> 24) & PSW_PROGMASK;

  0008a	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0008f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00094	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0009b	c1 e8 18	 shr	 eax, 24
  0009e	83 e0 0f	 and	 eax, 15
  000a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000a6	88 41 7d	 mov	 BYTE PTR [rcx+125], al

; 742  : }

  000a9	48 83 c4 18	 add	 rsp, 24
  000ad	c3		 ret	 0
s390_set_program_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 48
dbyte$ = 49
effective_addr2$ = 52
effective_addr1$ = 56
j$ = 60
b2$ = 64
b1$ = 68
temp$1 = 72
l1$ = 76
l2$ = 80
i$ = 84
tv180 = 88
tv191 = 92
inst$ = 112
regs$ = 120
s390_pack PROC

; 291  : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 292  : int     l1, l2;                         /* Lenght values             */
; 293  : int     b1, b2;                         /* Values of base registers  */
; 294  : VADR    effective_addr1,
; 295  :         effective_addr2;                /* Effective addresses       */
; 296  : int     i, j;                           /* Loop counters             */
; 297  : BYTE    sbyte;                          /* Source operand byte       */
; 298  : BYTE    dbyte;                          /* Destination operand byte  */
; 299  : 
; 300  :     SS(inst, regs, l1, l2, b1, effective_addr1, b2, effective_addr2);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 40	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 44	 mov	 DWORD PTR b1$[rsp], eax
  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	48 6b c0 01	 imul	 rax, rax, 1
  0006c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00071	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00075	83 e0 0f	 and	 eax, 15
  00078	89 44 24 50	 mov	 DWORD PTR l2$[rsp], eax
  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	48 6b c0 01	 imul	 rax, rax, 1
  00085	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  0008a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008e	c1 f8 04	 sar	 eax, 4
  00091	83 e0 0f	 and	 eax, 15
  00094	89 44 24 4c	 mov	 DWORD PTR l1$[rsp], eax
  00098	83 7c 24 44 00	 cmp	 DWORD PTR b1$[rsp], 0
  0009d	74 34		 je	 SHORT $LN8@s390_pack
  0009f	48 63 44 24 44	 movsxd	 rax, DWORD PTR b1$[rsp]
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b0	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b4	03 c8		 add	 ecx, eax
  000b6	8b c1		 mov	 eax, ecx
  000b8	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000bc	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000c1	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000c7	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000cb	23 c8		 and	 ecx, eax
  000cd	8b c1		 mov	 eax, ecx
  000cf	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s390_pack:
  000d3	83 7c 24 40 00	 cmp	 DWORD PTR b2$[rsp], 0
  000d8	74 34		 je	 SHORT $LN9@s390_pack
  000da	48 63 44 24 40	 movsxd	 rax, DWORD PTR b2$[rsp]
  000df	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000e4	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000eb	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ef	03 c8		 add	 ecx, eax
  000f1	8b c1		 mov	 eax, ecx
  000f3	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000f7	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000fc	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00102	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00106	23 c8		 and	 ecx, eax
  00108	8b c1		 mov	 eax, ecx
  0010a	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s390_pack:
$LN4@s390_pack:
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00117	48 83 c0 06	 add	 rax, 6
  0011b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00120	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00124	33 c0		 xor	 eax, eax
  00126	83 f8 06	 cmp	 eax, 6
  00129	74 0c		 je	 SHORT $LN10@s390_pack
  0012b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00130	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s390_pack:
  00137	33 c0		 xor	 eax, eax
  00139	85 c0		 test	 eax, eax
  0013b	75 d1		 jne	 SHORT $LN4@s390_pack

; 301  :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 302  :     TXFC_INSTR_CHECK( regs );
; 303  : 
; 304  :     /* If operand 1 crosses a page, make sure both pages are accessible */
; 305  :     if((effective_addr1 & PAGEFRAME_PAGEMASK) !=

  0013d	8b 44 24 38	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00141	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00146	8b 4c 24 4c	 mov	 ecx, DWORD PTR l1$[rsp]
  0014a	8b 54 24 38	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0014e	03 d1		 add	 edx, ecx
  00150	8b ca		 mov	 ecx, edx
  00152	81 e1 00 f0 ff
	7f		 and	 ecx, 2147479552		; 7ffff000H
  00158	3b c1		 cmp	 eax, ecx
  0015a	74 22		 je	 SHORT $LN11@s390_pack

; 306  :         ((effective_addr1 + l1) & PAGEFRAME_PAGEMASK))
; 307  :         ARCH_DEP(validate_operand) (effective_addr1, b1, l1, ACCTYPE_WRITE_SKP, regs);

  0015c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00161	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00166	41 b9 01 00 00
	00		 mov	 r9d, 1
  0016c	44 8b 44 24 4c	 mov	 r8d, DWORD PTR l1$[rsp]
  00171	8b 54 24 44	 mov	 edx, DWORD PTR b1$[rsp]
  00175	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00179	e8 00 00 00 00	 call	 s390_validate_operand
$LN11@s390_pack:

; 308  : 
; 309  :     /* If operand 2 crosses a page, make sure both pages are accessible */
; 310  :     if((effective_addr2 & PAGEFRAME_PAGEMASK) !=

  0017e	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00182	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00187	8b 4c 24 50	 mov	 ecx, DWORD PTR l2$[rsp]
  0018b	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  0018f	03 d1		 add	 edx, ecx
  00191	8b ca		 mov	 ecx, edx
  00193	81 e1 00 f0 ff
	7f		 and	 ecx, 2147479552		; 7ffff000H
  00199	3b c1		 cmp	 eax, ecx
  0019b	74 22		 je	 SHORT $LN12@s390_pack

; 311  :         ((effective_addr2 + l2) & PAGEFRAME_PAGEMASK))
; 312  :         ARCH_DEP(validate_operand) (effective_addr2, b2, l2, ACCTYPE_READ, regs);

  0019d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001a2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a7	41 b9 04 00 00
	00		 mov	 r9d, 4
  001ad	44 8b 44 24 50	 mov	 r8d, DWORD PTR l2$[rsp]
  001b2	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  001b6	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001ba	e8 00 00 00 00	 call	 s390_validate_operand
$LN12@s390_pack:

; 313  : 
; 314  :     /* Exchange the digits in the rightmost byte */
; 315  :     effective_addr1 += l1;

  001bf	8b 44 24 4c	 mov	 eax, DWORD PTR l1$[rsp]
  001c3	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  001c7	03 c8		 add	 ecx, eax
  001c9	8b c1		 mov	 eax, ecx
  001cb	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 316  :     effective_addr2 += l2;

  001cf	8b 44 24 50	 mov	 eax, DWORD PTR l2$[rsp]
  001d3	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001d7	03 c8		 add	 ecx, eax
  001d9	8b c1		 mov	 eax, ecx
  001db	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 317  :     sbyte = ARCH_DEP(vfetchb) ( effective_addr2, b2, regs );

  001df	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001e4	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  001e8	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001ec	e8 00 00 00 00	 call	 s390_vfetchb
  001f1	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 318  :     dbyte = ( (sbyte << 4) | (sbyte >> 4) ) & 0xff;

  001f5	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  001fa	c1 e0 04	 shl	 eax, 4
  001fd	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR sbyte$[rsp]
  00202	c1 f9 04	 sar	 ecx, 4
  00205	0b c1		 or	 eax, ecx
  00207	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0020c	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al

; 319  :     ARCH_DEP(vstoreb) ( dbyte, effective_addr1, b1, regs );

  00210	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00215	44 8b 44 24 44	 mov	 r8d, DWORD PTR b1$[rsp]
  0021a	8b 54 24 38	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0021e	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  00223	e8 00 00 00 00	 call	 s390_vstoreb

; 320  : 
; 321  :     /* Process remaining bytes from right to left */
; 322  :     for (i = l1, j = l2; i > 0; i--)

  00228	8b 44 24 4c	 mov	 eax, DWORD PTR l1$[rsp]
  0022c	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
  00230	8b 44 24 50	 mov	 eax, DWORD PTR l2$[rsp]
  00234	89 44 24 3c	 mov	 DWORD PTR j$[rsp], eax
  00238	eb 0a		 jmp	 SHORT $LN7@s390_pack
$LN5@s390_pack:
  0023a	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  0023e	ff c8		 dec	 eax
  00240	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_pack:
  00244	83 7c 24 54 00	 cmp	 DWORD PTR i$[rsp], 0
  00249	0f 8e 0f 01 00
	00		 jle	 $LN6@s390_pack

; 323  :     {
; 324  :         /* Fetch source bytes from second operand */
; 325  :         if (j-- > 0)

  0024f	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  00253	89 44 24 58	 mov	 DWORD PTR tv180[rsp], eax
  00257	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  0025b	ff c8		 dec	 eax
  0025d	89 44 24 3c	 mov	 DWORD PTR j$[rsp], eax
  00261	83 7c 24 58 00	 cmp	 DWORD PTR tv180[rsp], 0
  00266	0f 8e 98 00 00
	00		 jle	 $LN13@s390_pack

; 326  :         {
; 327  :             sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  0026c	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00270	ff c8		 dec	 eax
  00272	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00276	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0027b	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  0027f	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00283	e8 00 00 00 00	 call	 s390_vfetchb
  00288	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 328  :             dbyte = sbyte & 0x0F;

  0028c	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  00291	83 e0 0f	 and	 eax, 15
  00294	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al

; 329  : 
; 330  :             if (j-- > 0)

  00298	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  0029c	89 44 24 5c	 mov	 DWORD PTR tv191[rsp], eax
  002a0	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  002a4	ff c8		 dec	 eax
  002a6	89 44 24 3c	 mov	 DWORD PTR j$[rsp], eax
  002aa	83 7c 24 5c 00	 cmp	 DWORD PTR tv191[rsp], 0
  002af	7e 51		 jle	 SHORT $LN15@s390_pack

; 331  :             {
; 332  :                 effective_addr2 &= ADDRESS_MAXWRAP(regs);

  002b1	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002b6	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  002bc	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  002c0	23 c8		 and	 ecx, eax
  002c2	8b c1		 mov	 eax, ecx
  002c4	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 333  :                 sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  002c8	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  002cc	ff c8		 dec	 eax
  002ce	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  002d2	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  002d7	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  002db	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  002df	e8 00 00 00 00	 call	 s390_vfetchb
  002e4	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 334  :                 dbyte |= (sbyte << 4) & 0xff;

  002e8	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002ed	c1 e0 04	 shl	 eax, 4
  002f0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002f5	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  002fa	0b c8		 or	 ecx, eax
  002fc	8b c1		 mov	 eax, ecx
  002fe	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al
$LN15@s390_pack:

; 335  :             }
; 336  :         }

  00302	eb 05		 jmp	 SHORT $LN14@s390_pack
$LN13@s390_pack:

; 337  :         else
; 338  :         {
; 339  :             dbyte = 0;

  00304	c6 44 24 31 00	 mov	 BYTE PTR dbyte$[rsp], 0
$LN14@s390_pack:

; 340  :         }
; 341  : 
; 342  :         /* Store packed digits at first operand address */
; 343  :         ARCH_DEP(vstoreb) ( dbyte, --effective_addr1, b1, regs );

  00309	8b 44 24 38	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0030d	ff c8		 dec	 eax
  0030f	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00313	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00318	44 8b 44 24 44	 mov	 r8d, DWORD PTR b1$[rsp]
  0031d	8b 54 24 38	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00321	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  00326	e8 00 00 00 00	 call	 s390_vstoreb

; 344  : 
; 345  :         /* Wraparound according to addressing mode */
; 346  :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  0032b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00330	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00336	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0033a	23 c8		 and	 ecx, eax
  0033c	8b c1		 mov	 eax, ecx
  0033e	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 347  :         effective_addr2 &= ADDRESS_MAXWRAP(regs);

  00342	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00347	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0034d	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00351	23 c8		 and	 ecx, eax
  00353	8b c1		 mov	 eax, ecx
  00355	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 348  : 
; 349  :     } /* end for(i) */

  00359	e9 dc fe ff ff	 jmp	 $LN5@s390_pack
$LN6@s390_pack:

; 350  : 
; 351  : }

  0035e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00362	c3		 ret	 0
s390_pack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$1 = 0
r1$ = 4
tv92 = 8
tv94 = 12
r2$ = 16
inst$ = 48
regs$ = 56
s390_or_register PROC

; 55   : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 56   : int     r1, r2;                         /* Values of R fields        */
; 57   : 
; 58   :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
  00023	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00026	83 e0 0f	 and	 eax, 15
  00029	89 44 24 10	 mov	 DWORD PTR r2$[rsp], eax
  0002d	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00030	c1 f8 04	 sar	 eax, 4
  00033	83 e0 0f	 and	 eax, 15
  00036	89 44 24 04	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_or_re:
  0003a	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  0003f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00043	48 83 c0 02	 add	 rax, 2
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  0004c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00050	33 c0		 xor	 eax, eax
  00052	83 f8 02	 cmp	 eax, 2
  00055	74 0c		 je	 SHORT $LN5@s390_or_re
  00057	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  0005c	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@s390_or_re:
  00063	33 c0		 xor	 eax, eax
  00065	85 c0		 test	 eax, eax
  00067	75 d1		 jne	 SHORT $LN4@s390_or_re

; 59   : 
; 60   :     /* OR second operand with first and set condition code */
; 61   :     regs->psw.cc = ( regs->GR_L(r1) |= regs->GR_L(r2) ) ? 1 : 0;

  00069	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0006e	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00073	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00078	4c 8b 44 24 38	 mov	 r8, QWORD PTR regs$[rsp]
  0007d	41 8b 8c c8 80
	02 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+640]
  00085	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  0008c	0b c1		 or	 eax, ecx
  0008e	89 44 24 08	 mov	 DWORD PTR tv92[rsp], eax
  00092	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  0009c	8b 54 24 08	 mov	 edx, DWORD PTR tv92[rsp]
  000a0	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
  000a7	83 7c 24 08 00	 cmp	 DWORD PTR tv92[rsp], 0
  000ac	74 0a		 je	 SHORT $LN7@s390_or_re
  000ae	c7 44 24 0c 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  000b6	eb 08		 jmp	 SHORT $LN8@s390_or_re
$LN7@s390_or_re:
  000b8	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN8@s390_or_re:
  000c0	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  000c5	0f b6 4c 24 0c	 movzx	 ecx, BYTE PTR tv94[rsp]
  000ca	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 62   : 
; 63   :     /* Check for PER 1 GRA event */
; 64   :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 65   : }

  000cd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d1	c3		 ret	 0
s390_or_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i2$ = 48
effective_addr1$ = 52
temp$1 = 56
b1$ = 60
tv138 = 64
tv142 = 72
dest$ = 80
inst$ = 112
regs$ = 120
s390_or_immediate PROC

; 97   : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 98   : BYTE    i2;                             /* Immediate operand byte    */
; 99   : int     b1;                             /* Base of effective addr    */
; 100  : VADR    effective_addr1;                /* Effective address         */
; 101  : BYTE   *dest;                           /* Pointer to target byte    */
; 102  : 
; 103  :     SI(inst, regs, i2, b1, effective_addr1);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 38	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 3c	 mov	 DWORD PTR b1$[rsp], eax
  0003e	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004a	88 44 24 30	 mov	 BYTE PTR i2$[rsp], al
  0004e	83 7c 24 3c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00053	74 34		 je	 SHORT $LN5@s390_or_im
  00055	48 63 44 24 3c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0005a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00066	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0006a	03 c8		 add	 ecx, eax
  0006c	8b c1		 mov	 eax, ecx
  0006e	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00072	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00077	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0007d	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00081	23 c8		 and	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s390_or_im:
$LN4@s390_or_im:
  00089	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0008e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00092	48 83 c0 04	 add	 rax, 4
  00096	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009f	33 c0		 xor	 eax, eax
  000a1	83 f8 04	 cmp	 eax, 4
  000a4	74 0c		 je	 SHORT $LN6@s390_or_im
  000a6	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ab	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_or_im:
  000b2	33 c0		 xor	 eax, eax
  000b4	85 c0		 test	 eax, eax
  000b6	75 d1		 jne	 SHORT $LN4@s390_or_im

; 104  :     PER_ZEROADDR_XCHECK( regs, b1 );
; 105  : 
; 106  :     ITIMER_SYNC(effective_addr1, 0, regs);
; 107  :     /* Get byte mainstor address */
; 108  :     dest = MADDR (effective_addr1, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  000b8	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000bd	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000c1	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000cd	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  000d2	44 8b 44 24 3c	 mov	 r8d, DWORD PTR b1$[rsp]
  000d7	ba 01 00 00 00	 mov	 edx, 1
  000dc	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000e0	e8 00 00 00 00	 call	 s390_maddr_l
  000e5	48 89 44 24 50	 mov	 QWORD PTR dest$[rsp], rax

; 109  : 
; 110  :     /* MAINLOCK may be required if cmpxchg assists unavailable */
; 111  :     OBTAIN_MAINLOCK( regs );
; 112  :     {
; 113  :         /* OR byte with immediate operand, setting condition code */
; 114  :         regs->psw.cc = (H_ATOMIC_OP( dest, i2, or, Or, | ) != 0);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR dest$[rsp]
  000ef	48 89 44 24 48	 mov	 QWORD PTR tv142[rsp], rax
  000f4	48 8b 44 24 48	 mov	 rax, QWORD PTR tv142[rsp]
  000f9	0f 0d 08	 prefetchw BYTE PTR [rax]
  000fc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv142[rsp]
  00101	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
$LL10@s390_or_im:
  00104	0f b6 d0	 movzx	 edx, al
  00107	0a 54 24 30	 or	 dl, BYTE PTR i2$[rsp]
  0010b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv142[rsp]
  00110	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv142[rsp]
  00115	f0 0f b0 11	 lock cmpxchg BYTE PTR [rcx], dl
  00119	75 e9		 jne	 SHORT $LL10@s390_or_im
  0011b	0f b6 c0	 movzx	 eax, al
  0011e	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i2$[rsp]
  00123	0b c1		 or	 eax, ecx
  00125	8b c0		 mov	 eax, eax
  00127	48 85 c0	 test	 rax, rax
  0012a	74 0a		 je	 SHORT $LN8@s390_or_im
  0012c	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00134	eb 08		 jmp	 SHORT $LN9@s390_or_im
$LN8@s390_or_im:
  00136	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN9@s390_or_im:
  0013e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00143	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR tv138[rsp]
  00148	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 115  :     }
; 116  :     RELEASE_MAINLOCK( regs );
; 117  : 
; 118  :     ITIMER_UPDATE(effective_addr1, 0, regs);
; 119  : }

  0014b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0014f	c3		 ret	 0
s390_or_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
len2$ = 52
dest1$ = 56
len$ = 64
cc$ = 68
source1$ = 72
effective_addr2$ = 80
len3$ = 84
dest2$ = 88
effective_addr1$ = 96
source2$ = 104
b2$ = 112
b1$ = 116
temp$1 = 120
tv136 = 124
tv141 = 128
tv166 = 132
tv197 = 136
tv207 = 140
tv286 = 144
tv310 = 148
tv338 = 152
tv350 = 156
tv362 = 160
tv374 = 164
tv386 = 168
tv397 = 172
tv409 = 176
tv421 = 180
tv219 = 184
tv246 = 188
tv258 = 192
tv298 = 196
sk1$ = 200
sk2$ = 208
inst$ = 240
regs$ = 248
s390_or_character PROC

; 126  : {

$LN92:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 127  : int     len, len2, len3;                /* Lengths to copy           */
; 128  : int     b1, b2;                         /* Base register numbers     */
; 129  : VADR    effective_addr1;                /* Virtual address           */
; 130  : VADR    effective_addr2;                /* Virtual address           */
; 131  : BYTE   *dest1, *dest2;                  /* Destination addresses     */
; 132  : BYTE   *source1, *source2;              /* Source addresses          */
; 133  : BYTE   *sk1, *sk2;                      /* Storage key addresses     */
; 134  : int     i;                              /* Loop counter              */
; 135  : int     cc = 0;                         /* Condition code            */

  00011	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR cc$[rsp], 0

; 136  : 
; 137  :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00019	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00021	48 83 c0 02	 add	 rax, 2
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 fetch_fw_noswap
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 _byteswap_ulong
  00034	89 44 24 78	 mov	 DWORD PTR temp$1[rsp], eax
  00038	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  0003c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00041	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00045	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 0c	 shr	 eax, 12
  0004c	83 e0 0f	 and	 eax, 15
  0004f	89 44 24 70	 mov	 DWORD PTR b2$[rsp], eax
  00053	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00057	c1 e8 10	 shr	 eax, 16
  0005a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005f	89 44 24 60	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00063	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00067	c1 e8 1c	 shr	 eax, 28
  0006a	83 e0 0f	 and	 eax, 15
  0006d	89 44 24 74	 mov	 DWORD PTR b1$[rsp], eax
  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	48 6b c0 01	 imul	 rax, rax, 1
  0007a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00082	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00086	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
  0008a	83 7c 24 74 00	 cmp	 DWORD PTR b1$[rsp], 0
  0008f	74 3a		 je	 SHORT $LN44@s390_or_ch
  00091	48 63 44 24 74	 movsxd	 rax, DWORD PTR b1$[rsp]
  00096	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0009e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000a5	8b 4c 24 60	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000a9	03 c8		 add	 ecx, eax
  000ab	8b c1		 mov	 eax, ecx
  000ad	89 44 24 60	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000b1	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b9	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000bf	8b 4c 24 60	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000c3	23 c8		 and	 ecx, eax
  000c5	8b c1		 mov	 eax, ecx
  000c7	89 44 24 60	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN44@s390_or_ch:
  000cb	83 7c 24 70 00	 cmp	 DWORD PTR b2$[rsp], 0
  000d0	74 3a		 je	 SHORT $LN45@s390_or_ch
  000d2	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  000d7	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000df	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000e6	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ea	03 c8		 add	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000f2	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fa	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00100	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00104	23 c8		 and	 ecx, eax
  00106	8b c1		 mov	 eax, ecx
  00108	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN45@s390_or_ch:
$LN4@s390_or_ch:
  0010c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00114	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00118	48 83 c0 06	 add	 rax, 6
  0011c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00124	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00128	33 c0		 xor	 eax, eax
  0012a	83 f8 06	 cmp	 eax, 6
  0012d	74 0f		 je	 SHORT $LN46@s390_or_ch
  0012f	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00137	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN46@s390_or_ch:
  0013e	33 c0		 xor	 eax, eax
  00140	85 c0		 test	 eax, eax
  00142	75 c8		 jne	 SHORT $LN4@s390_or_ch

; 138  :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 139  : 
; 140  :     TXFC_INSTR_CHECK( regs );
; 141  : 
; 142  :     ITIMER_SYNC( effective_addr1, len, regs );
; 143  :     ITIMER_SYNC( effective_addr2, len, regs );
; 144  : 
; 145  :     /* Quick out for 1 byte (no boundary crossed) */
; 146  :     if (unlikely( !len ))

  00144	83 7c 24 40 00	 cmp	 DWORD PTR len$[rsp], 0
  00149	75 0a		 jne	 SHORT $LN72@s390_or_ch
  0014b	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  00153	eb 08		 jmp	 SHORT $LN73@s390_or_ch
$LN72@s390_or_ch:
  00155	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN73@s390_or_ch:
  0015d	83 7c 24 7c 00	 cmp	 DWORD PTR tv136[rsp], 0
  00162	74 0d		 je	 SHORT $LN76@s390_or_ch
  00164	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv141[rsp], 1
  0016f	eb 0b		 jmp	 SHORT $LN77@s390_or_ch
$LN76@s390_or_ch:
  00171	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv141[rsp], 0
$LN77@s390_or_ch:
  0017c	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv141[rsp], 0
  00184	0f 84 c7 00 00
	00		 je	 $LN47@s390_or_ch

; 147  :     {
; 148  :         source1 = MADDR( effective_addr2,  b2, regs, ACCTYPE_READ,  regs->psw.pkey );

  0018a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00192	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00196	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0019a	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001a2	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001aa	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  001af	ba 01 00 00 00	 mov	 edx, 1
  001b4	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001b8	e8 00 00 00 00	 call	 s390_maddr_l
  001bd	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax

; 149  :         dest1   = MADDR( effective_addr1,  b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  001c2	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001ca	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  001ce	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  001d2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001da	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001e2	44 8b 44 24 74	 mov	 r8d, DWORD PTR b1$[rsp]
  001e7	ba 01 00 00 00	 mov	 edx, 1
  001ec	8b 4c 24 60	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  001f0	e8 00 00 00 00	 call	 s390_maddr_l
  001f5	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax

; 150  :         *dest1 |= *source1;

  001fa	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  001ff	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00202	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00207	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0020a	0b c8		 or	 ecx, eax
  0020c	8b c1		 mov	 eax, ecx
  0020e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00213	88 01		 mov	 BYTE PTR [rcx], al

; 151  :         regs->psw.cc = (*dest1 != 0);

  00215	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  0021a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0021d	85 c0		 test	 eax, eax
  0021f	74 0d		 je	 SHORT $LN78@s390_or_ch
  00221	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv166[rsp], 1
  0022c	eb 0b		 jmp	 SHORT $LN79@s390_or_ch
$LN78@s390_or_ch:
  0022e	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv166[rsp], 0
$LN79@s390_or_ch:
  00239	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00241	0f b6 8c 24 84
	00 00 00	 movzx	 ecx, BYTE PTR tv166[rsp]
  00249	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 152  :         ITIMER_UPDATE( effective_addr1, len, regs );
; 153  :         return;

  0024c	e9 84 09 00 00	 jmp	 $LN1@s390_or_ch
$LN47@s390_or_ch:

; 154  :     }
; 155  : 
; 156  :     /* There are several scenarios (in optimal order):
; 157  :      * (1) dest boundary and source boundary not crossed
; 158  :      * (2) dest boundary not crossed and source boundary crossed
; 159  :      * (3) dest boundary crossed and source boundary not crossed
; 160  :      * (4) dest boundary and source boundary are crossed
; 161  :      *     (a) dest and source boundary cross at the same time
; 162  :      *     (b) dest boundary crossed first
; 163  :      *     (c) source boundary crossed first
; 164  :      */
; 165  : 
; 166  :     /* Translate addresses of leftmost operand bytes */
; 167  :     dest1 = MADDRL( effective_addr1, len+1, b1, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00251	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00255	ff c0		 inc	 eax
  00257	48 98		 cdqe
  00259	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00261	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00265	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00269	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00271	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00279	44 8b 44 24 74	 mov	 r8d, DWORD PTR b1$[rsp]
  0027e	48 8b d0	 mov	 rdx, rax
  00281	8b 4c 24 60	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00285	e8 00 00 00 00	 call	 s390_maddr_l
  0028a	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax

; 168  :     sk1 = regs->dat.storkey;

  0028f	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00297	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  0029e	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR sk1$[rsp], rax

; 169  :     source1 = MADDRL( effective_addr2, len+1, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  002a6	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  002aa	ff c0		 inc	 eax
  002ac	48 98		 cdqe
  002ae	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002b6	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  002ba	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002be	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  002c6	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002ce	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  002d3	48 8b d0	 mov	 rdx, rax
  002d6	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  002da	e8 00 00 00 00	 call	 s390_maddr_l
  002df	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax

; 170  : 
; 171  :     if (NOCROSSPAGE( effective_addr1, len ))

  002e4	8b 44 24 60	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  002e8	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  002ed	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  002f2	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  002f6	3b c1		 cmp	 eax, ecx
  002f8	7f 0d		 jg	 SHORT $LN82@s390_or_ch
  002fa	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv197[rsp], 1
  00305	eb 0b		 jmp	 SHORT $LN83@s390_or_ch
$LN82@s390_or_ch:
  00307	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv197[rsp], 0
$LN83@s390_or_ch:
  00312	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv197[rsp], 0
  0031a	0f 84 31 02 00
	00		 je	 $LN48@s390_or_ch

; 172  :     {
; 173  :         if (NOCROSSPAGE( effective_addr2, len ))

  00320	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00324	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00329	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  0032e	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  00332	3b c1		 cmp	 eax, ecx
  00334	7f 0d		 jg	 SHORT $LN86@s390_or_ch
  00336	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv207[rsp], 1
  00341	eb 0b		 jmp	 SHORT $LN87@s390_or_ch
$LN86@s390_or_ch:
  00343	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv207[rsp], 0
$LN87@s390_or_ch:
  0034e	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR tv207[rsp], 0
  00356	74 7b		 je	 SHORT $LN50@s390_or_ch

; 174  :         {
; 175  :             /* (1) - No boundaries are crossed */
; 176  :             for (i=0; i <= len; i++)

  00358	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00360	eb 0a		 jmp	 SHORT $LN7@s390_or_ch
$LN5@s390_or_ch:
  00362	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00366	ff c0		 inc	 eax
  00368	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_or_ch:
  0036c	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00370	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00374	7f 58		 jg	 SHORT $LN6@s390_or_ch

; 177  :                 if ((*dest1++ |= *source1++))

  00376	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  0037b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0037e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00383	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00386	0b c8		 or	 ecx, eax
  00388	8b c1		 mov	 eax, ecx
  0038a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0038f	88 01		 mov	 BYTE PTR [rcx], al
  00391	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00396	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00399	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv219[rsp], eax
  003a0	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  003a5	48 ff c0	 inc	 rax
  003a8	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  003ad	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  003b2	48 ff c0	 inc	 rax
  003b5	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  003ba	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR tv219[rsp], 0
  003c2	74 08		 je	 SHORT $LN52@s390_or_ch

; 178  :                     cc = 1;

  003c4	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN52@s390_or_ch:
  003cc	eb 94		 jmp	 SHORT $LN5@s390_or_ch
$LN6@s390_or_ch:

; 179  :         }

  003ce	e9 6a 01 00 00	 jmp	 $LN51@s390_or_ch
$LN50@s390_or_ch:

; 180  :         else
; 181  :         {
; 182  :              /* (2) - Second operand crosses a boundary */
; 183  :              len2 = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  003d3	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  003d7	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  003dc	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003e1	2b c8		 sub	 ecx, eax
  003e3	8b c1		 mov	 eax, ecx
  003e5	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 184  :              source2 = MADDRL((effective_addr2 + len2) & ADDRESS_MAXWRAP( regs ),

  003e9	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  003ed	ff c0		 inc	 eax
  003ef	2b 44 24 34	 sub	 eax, DWORD PTR len2$[rsp]
  003f3	48 98		 cdqe
  003f5	8b 4c 24 34	 mov	 ecx, DWORD PTR len2$[rsp]
  003f9	8b 54 24 50	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  003fd	03 d1		 add	 edx, ecx
  003ff	8b ca		 mov	 ecx, edx
  00401	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00409	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  0040f	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00417	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0041b	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0041f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00427	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0042f	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  00434	48 8b d0	 mov	 rdx, rax
  00437	e8 00 00 00 00	 call	 s390_maddr_l
  0043c	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax

; 185  :               len + 1 - len2,  b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 186  :              for (i=0; i < len2; i++)

  00441	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00449	eb 0a		 jmp	 SHORT $LN10@s390_or_ch
$LN8@s390_or_ch:
  0044b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0044f	ff c0		 inc	 eax
  00451	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN10@s390_or_ch:
  00455	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00459	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0045d	7d 58		 jge	 SHORT $LN9@s390_or_ch

; 187  :                  if ( (*dest1++ |= *source1++) )

  0045f	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00464	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00467	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0046c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0046f	0b c8		 or	 ecx, eax
  00471	8b c1		 mov	 eax, ecx
  00473	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00478	88 01		 mov	 BYTE PTR [rcx], al
  0047a	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  0047f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00482	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv246[rsp], eax
  00489	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  0048e	48 ff c0	 inc	 rax
  00491	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00496	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  0049b	48 ff c0	 inc	 rax
  0049e	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  004a3	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR tv246[rsp], 0
  004ab	74 08		 je	 SHORT $LN53@s390_or_ch

; 188  :                      cc = 1;

  004ad	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN53@s390_or_ch:
  004b5	eb 94		 jmp	 SHORT $LN8@s390_or_ch
$LN9@s390_or_ch:

; 189  : 
; 190  :              len2 = len - len2;

  004b7	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  004bb	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  004bf	2b c8		 sub	 ecx, eax
  004c1	8b c1		 mov	 eax, ecx
  004c3	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 191  : 
; 192  :              for (i=0; i <= len2; i++)

  004c7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  004cf	eb 0a		 jmp	 SHORT $LN13@s390_or_ch
$LN11@s390_or_ch:
  004d1	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  004d5	ff c0		 inc	 eax
  004d7	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@s390_or_ch:
  004db	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  004df	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  004e3	7f 58		 jg	 SHORT $LN12@s390_or_ch

; 193  :                  if ( (*dest1++ |= *source2++) )

  004e5	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  004ea	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  004ed	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  004f2	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  004f5	0b c8		 or	 ecx, eax
  004f7	8b c1		 mov	 eax, ecx
  004f9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  004fe	88 01		 mov	 BYTE PTR [rcx], al
  00500	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00505	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00508	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv258[rsp], eax
  0050f	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00514	48 ff c0	 inc	 rax
  00517	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  0051c	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00521	48 ff c0	 inc	 rax
  00524	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00529	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR tv258[rsp], 0
  00531	74 08		 je	 SHORT $LN54@s390_or_ch

; 194  :                      cc = 1;

  00533	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN54@s390_or_ch:
  0053b	eb 94		 jmp	 SHORT $LN11@s390_or_ch
$LN12@s390_or_ch:
$LN51@s390_or_ch:

; 195  :         }
; 196  :         ARCH_DEP( or_storage_key_by_ptr )( sk1, (STORKEY_REF | STORKEY_CHANGE) );

  0053d	b2 06		 mov	 dl, 6
  0053f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR sk1$[rsp]
  00547	e8 00 00 00 00	 call	 s390_or_storage_key_by_ptr

; 197  :     }

  0054c	e9 74 06 00 00	 jmp	 $LN49@s390_or_ch
$LN48@s390_or_ch:

; 198  :     else
; 199  :     {
; 200  :         /* First operand crosses a boundary */
; 201  :         len2 = PAGEFRAME_PAGESIZE - (effective_addr1 & PAGEFRAME_BYTEMASK);

  00551	8b 44 24 60	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00555	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0055a	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0055f	2b c8		 sub	 ecx, eax
  00561	8b c1		 mov	 eax, ecx
  00563	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 202  :         dest2 = MADDRL((effective_addr1 + len2) & ADDRESS_MAXWRAP( regs ),

  00567	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0056b	ff c0		 inc	 eax
  0056d	2b 44 24 34	 sub	 eax, DWORD PTR len2$[rsp]
  00571	48 98		 cdqe
  00573	8b 4c 24 34	 mov	 ecx, DWORD PTR len2$[rsp]
  00577	8b 54 24 60	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0057b	03 d1		 add	 edx, ecx
  0057d	8b ca		 mov	 ecx, edx
  0057f	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00587	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  0058d	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00595	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00599	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0059d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  005a5	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  005ad	44 8b 44 24 74	 mov	 r8d, DWORD PTR b1$[rsp]
  005b2	48 8b d0	 mov	 rdx, rax
  005b5	e8 00 00 00 00	 call	 s390_maddr_l
  005ba	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax

; 203  :          len + 1 - len2,b1, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );
; 204  :         sk2 = regs->dat.storkey;

  005bf	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005c7	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  005ce	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR sk2$[rsp], rax

; 205  : 
; 206  :         if (NOCROSSPAGE( effective_addr2, len ))

  005d6	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  005da	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  005df	b9 ff 0f 00 00	 mov	 ecx, 4095		; 00000fffH
  005e4	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  005e8	3b c1		 cmp	 eax, ecx
  005ea	7f 0d		 jg	 SHORT $LN90@s390_or_ch
  005ec	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv286[rsp], 1
  005f7	eb 0b		 jmp	 SHORT $LN91@s390_or_ch
$LN90@s390_or_ch:
  005f9	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv286[rsp], 0
$LN91@s390_or_ch:
  00604	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR tv286[rsp], 0
  0060c	0f 84 01 01 00
	00		 je	 $LN55@s390_or_ch

; 207  :         {
; 208  :              /* (3) - First operand crosses a boundary */
; 209  :              for (i=0; i < len2; i++)

  00612	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0061a	eb 0a		 jmp	 SHORT $LN16@s390_or_ch
$LN14@s390_or_ch:
  0061c	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00620	ff c0		 inc	 eax
  00622	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s390_or_ch:
  00626	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0062a	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0062e	7d 58		 jge	 SHORT $LN15@s390_or_ch

; 210  :                  if ((*dest1++ |= *source1++))

  00630	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00635	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00638	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0063d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00640	0b c8		 or	 ecx, eax
  00642	8b c1		 mov	 eax, ecx
  00644	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00649	88 01		 mov	 BYTE PTR [rcx], al
  0064b	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00650	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00653	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
  0065a	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  0065f	48 ff c0	 inc	 rax
  00662	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00667	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  0066c	48 ff c0	 inc	 rax
  0066f	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00674	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR tv298[rsp], 0
  0067c	74 08		 je	 SHORT $LN57@s390_or_ch

; 211  :                      cc = 1;

  0067e	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN57@s390_or_ch:
  00686	eb 94		 jmp	 SHORT $LN14@s390_or_ch
$LN15@s390_or_ch:

; 212  : 
; 213  :              len2 = len - len2;

  00688	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0068c	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00690	2b c8		 sub	 ecx, eax
  00692	8b c1		 mov	 eax, ecx
  00694	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 214  : 
; 215  :              for (i=0; i <= len2; i++)

  00698	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  006a0	eb 0a		 jmp	 SHORT $LN19@s390_or_ch
$LN17@s390_or_ch:
  006a2	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  006a6	ff c0		 inc	 eax
  006a8	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@s390_or_ch:
  006ac	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  006b0	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  006b4	7f 58		 jg	 SHORT $LN18@s390_or_ch

; 216  :                  if ((*dest2++ |= *source1++))

  006b6	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  006bb	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  006be	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  006c3	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  006c6	0b c8		 or	 ecx, eax
  006c8	8b c1		 mov	 eax, ecx
  006ca	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  006cf	88 01		 mov	 BYTE PTR [rcx], al
  006d1	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  006d6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  006d9	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv310[rsp], eax
  006e0	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  006e5	48 ff c0	 inc	 rax
  006e8	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  006ed	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  006f2	48 ff c0	 inc	 rax
  006f5	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  006fa	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR tv310[rsp], 0
  00702	74 08		 je	 SHORT $LN58@s390_or_ch

; 217  :                      cc = 1;

  00704	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN58@s390_or_ch:
  0070c	eb 94		 jmp	 SHORT $LN17@s390_or_ch
$LN18@s390_or_ch:

; 218  :         }

  0070e	e9 94 04 00 00	 jmp	 $LN56@s390_or_ch
$LN55@s390_or_ch:

; 219  :         else
; 220  :         {
; 221  :             /* (4) - Both operands cross a boundary */
; 222  :             len3 = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  00713	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00717	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0071c	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00721	2b c8		 sub	 ecx, eax
  00723	8b c1		 mov	 eax, ecx
  00725	89 44 24 54	 mov	 DWORD PTR len3$[rsp], eax

; 223  :             source2 = MADDRL((effective_addr2 + len3) & ADDRESS_MAXWRAP( regs ),

  00729	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0072d	ff c0		 inc	 eax
  0072f	2b 44 24 54	 sub	 eax, DWORD PTR len3$[rsp]
  00733	48 98		 cdqe
  00735	8b 4c 24 54	 mov	 ecx, DWORD PTR len3$[rsp]
  00739	8b 54 24 50	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  0073d	03 d1		 add	 edx, ecx
  0073f	8b ca		 mov	 ecx, edx
  00741	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00749	23 8a 90 00 00
	00		 and	 ecx, DWORD PTR [rdx+144]
  0074f	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00757	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0075b	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0075f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00767	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0076f	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  00774	48 8b d0	 mov	 rdx, rax
  00777	e8 00 00 00 00	 call	 s390_maddr_l
  0077c	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax

; 224  :              len + 1 - len3,  b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 225  :             if (len2 == len3)

  00781	8b 44 24 54	 mov	 eax, DWORD PTR len3$[rsp]
  00785	39 44 24 34	 cmp	 DWORD PTR len2$[rsp], eax
  00789	0f 85 01 01 00
	00		 jne	 $LN59@s390_or_ch

; 226  :             {
; 227  :                 /* (4a) - Both operands cross at the same time */
; 228  :                 for (i=0; i < len2; i++)

  0078f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00797	eb 0a		 jmp	 SHORT $LN22@s390_or_ch
$LN20@s390_or_ch:
  00799	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0079d	ff c0		 inc	 eax
  0079f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@s390_or_ch:
  007a3	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  007a7	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  007ab	7d 58		 jge	 SHORT $LN21@s390_or_ch

; 229  :                     if ((*dest1++ |= *source1++))

  007ad	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  007b2	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007b5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  007ba	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  007bd	0b c8		 or	 ecx, eax
  007bf	8b c1		 mov	 eax, ecx
  007c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  007c6	88 01		 mov	 BYTE PTR [rcx], al
  007c8	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  007cd	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007d0	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv338[rsp], eax
  007d7	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  007dc	48 ff c0	 inc	 rax
  007df	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  007e4	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  007e9	48 ff c0	 inc	 rax
  007ec	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  007f1	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv338[rsp], 0
  007f9	74 08		 je	 SHORT $LN61@s390_or_ch

; 230  :                         cc = 1;

  007fb	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN61@s390_or_ch:
  00803	eb 94		 jmp	 SHORT $LN20@s390_or_ch
$LN21@s390_or_ch:

; 231  : 
; 232  :                 len2 = len - len2;

  00805	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00809	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  0080d	2b c8		 sub	 ecx, eax
  0080f	8b c1		 mov	 eax, ecx
  00811	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 233  : 
; 234  :                 for (i=0; i <= len2; i++)

  00815	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0081d	eb 0a		 jmp	 SHORT $LN25@s390_or_ch
$LN23@s390_or_ch:
  0081f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00823	ff c0		 inc	 eax
  00825	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@s390_or_ch:
  00829	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0082d	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00831	7f 58		 jg	 SHORT $LN24@s390_or_ch

; 235  :                     if ((*dest2++ |= *source2++))

  00833	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00838	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0083b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00840	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00843	0b c8		 or	 ecx, eax
  00845	8b c1		 mov	 eax, ecx
  00847	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  0084c	88 01		 mov	 BYTE PTR [rcx], al
  0084e	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00853	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00856	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv350[rsp], eax
  0085d	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00862	48 ff c0	 inc	 rax
  00865	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  0086a	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  0086f	48 ff c0	 inc	 rax
  00872	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  00877	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR tv350[rsp], 0
  0087f	74 08		 je	 SHORT $LN62@s390_or_ch

; 236  :                         cc = 1;

  00881	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN62@s390_or_ch:
  00889	eb 94		 jmp	 SHORT $LN23@s390_or_ch
$LN24@s390_or_ch:

; 237  :             }

  0088b	e9 17 03 00 00	 jmp	 $LN60@s390_or_ch
$LN59@s390_or_ch:

; 238  :             else if (len2 < len3)

  00890	8b 44 24 54	 mov	 eax, DWORD PTR len3$[rsp]
  00894	39 44 24 34	 cmp	 DWORD PTR len2$[rsp], eax
  00898	0f 8d 87 01 00
	00		 jge	 $LN63@s390_or_ch

; 239  :             {
; 240  :                 /* (4b) - First operand crosses first */
; 241  :                 for (i=0; i < len2; i++)

  0089e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  008a6	eb 0a		 jmp	 SHORT $LN28@s390_or_ch
$LN26@s390_or_ch:
  008a8	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  008ac	ff c0		 inc	 eax
  008ae	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@s390_or_ch:
  008b2	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  008b6	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  008ba	7d 58		 jge	 SHORT $LN27@s390_or_ch

; 242  :                     if ((*dest1++ |= *source1++))

  008bc	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  008c1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008c4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  008c9	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  008cc	0b c8		 or	 ecx, eax
  008ce	8b c1		 mov	 eax, ecx
  008d0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  008d5	88 01		 mov	 BYTE PTR [rcx], al
  008d7	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  008dc	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008df	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv362[rsp], eax
  008e6	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  008eb	48 ff c0	 inc	 rax
  008ee	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  008f3	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  008f8	48 ff c0	 inc	 rax
  008fb	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00900	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv362[rsp], 0
  00908	74 08		 je	 SHORT $LN65@s390_or_ch

; 243  :                         cc = 1;

  0090a	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN65@s390_or_ch:
  00912	eb 94		 jmp	 SHORT $LN26@s390_or_ch
$LN27@s390_or_ch:

; 244  : 
; 245  :                 len2 = len3 - len2;

  00914	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00918	8b 4c 24 54	 mov	 ecx, DWORD PTR len3$[rsp]
  0091c	2b c8		 sub	 ecx, eax
  0091e	8b c1		 mov	 eax, ecx
  00920	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 246  : 
; 247  :                 for (i=0; i < len2; i++)

  00924	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0092c	eb 0a		 jmp	 SHORT $LN31@s390_or_ch
$LN29@s390_or_ch:
  0092e	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00932	ff c0		 inc	 eax
  00934	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN31@s390_or_ch:
  00938	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0093c	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00940	7d 58		 jge	 SHORT $LN30@s390_or_ch

; 248  :                     if ((*dest2++ |= *source1++))

  00942	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00947	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0094a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  0094f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00952	0b c8		 or	 ecx, eax
  00954	8b c1		 mov	 eax, ecx
  00956	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  0095b	88 01		 mov	 BYTE PTR [rcx], al
  0095d	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00962	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00965	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv374[rsp], eax
  0096c	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00971	48 ff c0	 inc	 rax
  00974	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00979	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  0097e	48 ff c0	 inc	 rax
  00981	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  00986	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR tv374[rsp], 0
  0098e	74 08		 je	 SHORT $LN66@s390_or_ch

; 249  :                         cc = 1;

  00990	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN66@s390_or_ch:
  00998	eb 94		 jmp	 SHORT $LN29@s390_or_ch
$LN30@s390_or_ch:

; 250  : 
; 251  :                 len2 = len - len3;

  0099a	8b 44 24 54	 mov	 eax, DWORD PTR len3$[rsp]
  0099e	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  009a2	2b c8		 sub	 ecx, eax
  009a4	8b c1		 mov	 eax, ecx
  009a6	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 252  : 
; 253  :                 for (i=0; i <= len2; i++)

  009aa	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  009b2	eb 0a		 jmp	 SHORT $LN34@s390_or_ch
$LN32@s390_or_ch:
  009b4	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  009b8	ff c0		 inc	 eax
  009ba	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN34@s390_or_ch:
  009be	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  009c2	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  009c6	7f 58		 jg	 SHORT $LN33@s390_or_ch

; 254  :                     if ((*dest2++ |= *source2++))

  009c8	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  009cd	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009d0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  009d5	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  009d8	0b c8		 or	 ecx, eax
  009da	8b c1		 mov	 eax, ecx
  009dc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  009e1	88 01		 mov	 BYTE PTR [rcx], al
  009e3	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  009e8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009eb	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv386[rsp], eax
  009f2	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  009f7	48 ff c0	 inc	 rax
  009fa	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  009ff	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00a04	48 ff c0	 inc	 rax
  00a07	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  00a0c	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv386[rsp], 0
  00a14	74 08		 je	 SHORT $LN67@s390_or_ch

; 255  :                         cc = 1;

  00a16	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN67@s390_or_ch:
  00a1e	eb 94		 jmp	 SHORT $LN32@s390_or_ch
$LN33@s390_or_ch:

; 256  :             }

  00a20	e9 82 01 00 00	 jmp	 $LN64@s390_or_ch
$LN63@s390_or_ch:

; 257  :             else
; 258  :             {
; 259  :                 /* (4c) - Second operand crosses first */
; 260  :                 for ( i = 0; i < len3; i++)

  00a25	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00a2d	eb 0a		 jmp	 SHORT $LN37@s390_or_ch
$LN35@s390_or_ch:
  00a2f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00a33	ff c0		 inc	 eax
  00a35	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN37@s390_or_ch:
  00a39	8b 44 24 54	 mov	 eax, DWORD PTR len3$[rsp]
  00a3d	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00a41	7d 58		 jge	 SHORT $LN36@s390_or_ch

; 261  :                     if ((*dest1++ |= *source1++))

  00a43	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00a48	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a4b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00a50	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00a53	0b c8		 or	 ecx, eax
  00a55	8b c1		 mov	 eax, ecx
  00a57	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00a5c	88 01		 mov	 BYTE PTR [rcx], al
  00a5e	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00a63	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a66	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv397[rsp], eax
  00a6d	48 8b 44 24 48	 mov	 rax, QWORD PTR source1$[rsp]
  00a72	48 ff c0	 inc	 rax
  00a75	48 89 44 24 48	 mov	 QWORD PTR source1$[rsp], rax
  00a7a	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00a7f	48 ff c0	 inc	 rax
  00a82	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00a87	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR tv397[rsp], 0
  00a8f	74 08		 je	 SHORT $LN68@s390_or_ch

; 262  :                         cc = 1;

  00a91	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN68@s390_or_ch:
  00a99	eb 94		 jmp	 SHORT $LN35@s390_or_ch
$LN36@s390_or_ch:

; 263  : 
; 264  :                 len3 = len2 - len3;

  00a9b	8b 44 24 54	 mov	 eax, DWORD PTR len3$[rsp]
  00a9f	8b 4c 24 34	 mov	 ecx, DWORD PTR len2$[rsp]
  00aa3	2b c8		 sub	 ecx, eax
  00aa5	8b c1		 mov	 eax, ecx
  00aa7	89 44 24 54	 mov	 DWORD PTR len3$[rsp], eax

; 265  : 
; 266  :                 for (i=0; i < len3; i++)

  00aab	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00ab3	eb 0a		 jmp	 SHORT $LN40@s390_or_ch
$LN38@s390_or_ch:
  00ab5	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00ab9	ff c0		 inc	 eax
  00abb	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN40@s390_or_ch:
  00abf	8b 44 24 54	 mov	 eax, DWORD PTR len3$[rsp]
  00ac3	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00ac7	7d 58		 jge	 SHORT $LN39@s390_or_ch

; 267  :                     if ((*dest1++ |= *source2++))

  00ac9	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00ace	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00ad1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00ad6	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00ad9	0b c8		 or	 ecx, eax
  00adb	8b c1		 mov	 eax, ecx
  00add	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00ae2	88 01		 mov	 BYTE PTR [rcx], al
  00ae4	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00ae9	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00aec	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv409[rsp], eax
  00af3	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00af8	48 ff c0	 inc	 rax
  00afb	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  00b00	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00b05	48 ff c0	 inc	 rax
  00b08	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00b0d	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR tv409[rsp], 0
  00b15	74 08		 je	 SHORT $LN69@s390_or_ch

; 268  :                         cc = 1;

  00b17	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN69@s390_or_ch:
  00b1f	eb 94		 jmp	 SHORT $LN38@s390_or_ch
$LN39@s390_or_ch:

; 269  : 
; 270  :                 len3 = len - len2;

  00b21	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00b25	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00b29	2b c8		 sub	 ecx, eax
  00b2b	8b c1		 mov	 eax, ecx
  00b2d	89 44 24 54	 mov	 DWORD PTR len3$[rsp], eax

; 271  : 
; 272  :                 for (i=0; i <= len3; i++)

  00b31	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00b39	eb 0a		 jmp	 SHORT $LN43@s390_or_ch
$LN41@s390_or_ch:
  00b3b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00b3f	ff c0		 inc	 eax
  00b41	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN43@s390_or_ch:
  00b45	8b 44 24 54	 mov	 eax, DWORD PTR len3$[rsp]
  00b49	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00b4d	7f 58		 jg	 SHORT $LN42@s390_or_ch

; 273  :                     if ((*dest2++ |= *source2++))

  00b4f	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00b54	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b57	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00b5c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00b5f	0b c8		 or	 ecx, eax
  00b61	8b c1		 mov	 eax, ecx
  00b63	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest2$[rsp]
  00b68	88 01		 mov	 BYTE PTR [rcx], al
  00b6a	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00b6f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b72	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv421[rsp], eax
  00b79	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00b7e	48 ff c0	 inc	 rax
  00b81	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  00b86	48 8b 44 24 58	 mov	 rax, QWORD PTR dest2$[rsp]
  00b8b	48 ff c0	 inc	 rax
  00b8e	48 89 44 24 58	 mov	 QWORD PTR dest2$[rsp], rax
  00b93	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR tv421[rsp], 0
  00b9b	74 08		 je	 SHORT $LN70@s390_or_ch

; 274  :                         cc = 1;

  00b9d	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN70@s390_or_ch:
  00ba5	eb 94		 jmp	 SHORT $LN41@s390_or_ch
$LN42@s390_or_ch:
$LN64@s390_or_ch:
$LN60@s390_or_ch:
$LN56@s390_or_ch:

; 275  :             }
; 276  :         }
; 277  :         ARCH_DEP( or_storage_key_by_ptr )( sk1, (STORKEY_REF | STORKEY_CHANGE) );

  00ba7	b2 06		 mov	 dl, 6
  00ba9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR sk1$[rsp]
  00bb1	e8 00 00 00 00	 call	 s390_or_storage_key_by_ptr

; 278  :         ARCH_DEP( or_storage_key_by_ptr )( sk2, (STORKEY_REF | STORKEY_CHANGE) );

  00bb6	b2 06		 mov	 dl, 6
  00bb8	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR sk2$[rsp]
  00bc0	e8 00 00 00 00	 call	 s390_or_storage_key_by_ptr
$LN49@s390_or_ch:

; 279  :     }
; 280  : 
; 281  :     regs->psw.cc = cc;

  00bc5	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00bcd	0f b6 4c 24 44	 movzx	 ecx, BYTE PTR cc$[rsp]
  00bd2	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@s390_or_ch:

; 282  : 
; 283  :     ITIMER_UPDATE( effective_addr1, len, regs );
; 284  : }

  00bd5	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00bdc	c3		 ret	 0
s390_or_character ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
tv77 = 44
x2$ = 48
tv88 = 52
r1$ = 56
tv152 = 60
tv154 = 64
n$ = 68
inst$ = 96
regs$ = 104
s390_or	PROC

; 72   : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 73   : int     r1;                             /* Value of R field          */
; 74   : int     x2;                             /* Index register            */
; 75   : int     b2;                             /* Base of effective addr    */
; 76   : VADR    effective_addr2;                /* Effective address         */
; 77   : U32     n;                              /* 32-bit operand values     */
; 78   : 
; 79   :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 30	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 30 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN12@s390_or
  00053	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN13@s390_or
$LN12@s390_or:
  0005d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN13@s390_or:
  00065	83 7c 24 2c 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN5@s390_or
  0006c	48 63 44 24 30	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s390_or:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN14@s390_or
  0009e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN15@s390_or
$LN14@s390_or:
  000a8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN15@s390_or:
  000b0	83 7c 24 34 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN6@s390_or
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s390_or:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 17		 je	 SHORT $LN7@s390_or
  000db	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000e0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000e6	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ea	23 c8		 and	 ecx, eax
  000ec	8b c1		 mov	 eax, ecx
  000ee	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN7@s390_or:
$LN4@s390_or:
  000f2	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000f7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000fb	48 83 c0 04	 add	 rax, 4
  000ff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00104	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00108	33 c0		 xor	 eax, eax
  0010a	83 f8 04	 cmp	 eax, 4
  0010d	74 0c		 je	 SHORT $LN8@s390_or
  0010f	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00114	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_or:
  0011b	33 c0		 xor	 eax, eax
  0011d	85 c0		 test	 eax, eax
  0011f	75 d1		 jne	 SHORT $LN4@s390_or

; 80   :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 81   : 
; 82   :     /* Load second operand from operand address */
; 83   :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00121	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  00126	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  0012a	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0012e	e8 00 00 00 00	 call	 s390_vfetch4
  00133	89 44 24 44	 mov	 DWORD PTR n$[rsp], eax

; 84   : 
; 85   :     /* OR second operand with first and set condition code */
; 86   :     regs->psw.cc = ( regs->GR_L(r1) |= n ) ? 1 : 0;

  00137	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  0013c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	8b 54 24 44	 mov	 edx, DWORD PTR n$[rsp]
  00145	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0014c	0b c2		 or	 eax, edx
  0014e	89 44 24 3c	 mov	 DWORD PTR tv152[rsp], eax
  00152	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  00157	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0015c	8b 54 24 3c	 mov	 edx, DWORD PTR tv152[rsp]
  00160	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
  00167	83 7c 24 3c 00	 cmp	 DWORD PTR tv152[rsp], 0
  0016c	74 0a		 je	 SHORT $LN16@s390_or
  0016e	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  00176	eb 08		 jmp	 SHORT $LN17@s390_or
$LN16@s390_or:
  00178	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN17@s390_or:
  00180	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00185	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR tv154[rsp]
  0018a	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 87   : 
; 88   :     /* Check for PER 1 GRA event */
; 89   :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));
; 90   : }

  0018d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00191	c3		 ret	 0
s390_or	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
addr2$ = 48
termchar$ = 52
cpu_length$ = 56
i$ = 60
r2$ = 64
addr1$ = 68
dist$ = 72
r1$ = 76
main2$ = 80
i$1 = 88
tv143 = 92
tv156 = 96
inst$ = 128
regs$ = 136
s390_search_string PROC

; 543  : {

$LN35:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 544  : int     r1, r2;                         /* Values of R fields        */
; 545  : int     i;                              /* Loop counter              */
; 546  : int     dist;                           /* length working distance   */
; 547  : int     cpu_length;                     /* CPU determined length     */
; 548  : VADR    addr1, addr2;                   /* End/start addresses       */
; 549  : BYTE    *main2;                         /* Operand-2 mainstor addr   */
; 550  : BYTE    termchar;                       /* Terminating character     */
; 551  : 
; 552  :     RRE( inst, regs, r1, r2 );

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0001f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00023	89 44 24 58	 mov	 DWORD PTR i$1[rsp], eax
  00027	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  0002b	83 e0 0f	 and	 eax, 15
  0002e	89 44 24 40	 mov	 DWORD PTR r2$[rsp], eax
  00032	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  00036	c1 f8 04	 sar	 eax, 4
  00039	83 e0 0f	 and	 eax, 15
  0003c	89 44 24 4c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_searc:
  00040	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00048	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004c	48 83 c0 04	 add	 rax, 4
  00050	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00058	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0005c	33 c0		 xor	 eax, eax
  0005e	83 f8 04	 cmp	 eax, 4
  00061	74 0f		 je	 SHORT $LN13@s390_searc
  00063	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN13@s390_searc:
  00072	33 c0		 xor	 eax, eax
  00074	85 c0		 test	 eax, eax
  00076	75 c8		 jne	 SHORT $LN4@s390_searc

; 553  :     PER_ZEROADDR_CHECK( regs, r2 );
; 554  : 
; 555  :     TXFC_INSTR_CHECK( regs );
; 556  : 
; 557  :     /* Program check if bits 0-23 of register 0 not zero */
; 558  :     if ((regs->GR_L(0) & 0xFFFFFF00) != 0)

  00078	b8 08 00 00 00	 mov	 eax, 8
  0007d	48 6b c0 00	 imul	 rax, rax, 0
  00081	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00089	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00090	25 00 ff ff ff	 and	 eax, -256		; ffffff00H
  00095	85 c0		 test	 eax, eax
  00097	74 1b		 je	 SHORT $LN14@s390_searc

; 559  :         regs->program_interrupt( regs, PGM_SPECIFICATION_EXCEPTION );

  00099	ba 06 00 00 00	 mov	 edx, 6
  0009e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000a6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s390_searc:

; 560  : 
; 561  :     /* Load string terminating character from register 0 bits 24-31 */
; 562  :     termchar = regs->GR_LHLCL(0);

  000b4	b8 08 00 00 00	 mov	 eax, 8
  000b9	48 6b c0 00	 imul	 rax, rax, 0
  000bd	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c5	0f b6 84 01 80
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+640]
  000cd	88 44 24 34	 mov	 BYTE PTR termchar$[rsp], al

; 563  : 
; 564  :     /* Determine the operand end and start addresses */
; 565  :     addr1 = regs->GR( r1 ) & ADDRESS_MAXWRAP( regs );

  000d1	48 63 44 24 4c	 movsxd	 rax, DWORD PTR r1$[rsp]
  000d6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000de	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000e6	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [rdx+144]
  000ec	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000f3	23 c2		 and	 eax, edx
  000f5	89 44 24 44	 mov	 DWORD PTR addr1$[rsp], eax

; 566  :     addr2 = regs->GR( r2 ) & ADDRESS_MAXWRAP( regs );

  000f9	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  000fe	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00106	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0010e	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [rdx+144]
  00114	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0011b	23 c2		 and	 eax, edx
  0011d	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 567  : 
; 568  :     /* Set the minimum CPU determined length per the specification  */
; 569  :     cpu_length = 256;

  00121	c7 44 24 38 00
	01 00 00	 mov	 DWORD PTR cpu_length$[rsp], 256 ; 00000100H

; 570  : 
; 571  :     /* Should the second operand cross a page boundary, we need to
; 572  :        break up the search into two parts (one part in each page)
; 573  :        to meet the minimum requirement of 256 CPU determined bytes. */
; 574  :     if (unlikely( CROSSPAGEL( addr2, cpu_length )))

  00129	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  0012d	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00132	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00137	2b 4c 24 38	 sub	 ecx, DWORD PTR cpu_length$[rsp]
  0013b	3b c1		 cmp	 eax, ecx
  0013d	7e 0a		 jle	 SHORT $LN25@s390_searc
  0013f	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00147	eb 08		 jmp	 SHORT $LN26@s390_searc
$LN25@s390_searc:
  00149	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN26@s390_searc:
  00151	83 7c 24 5c 00	 cmp	 DWORD PTR tv143[rsp], 0
  00156	74 0a		 je	 SHORT $LN33@s390_searc
  00158	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00160	eb 08		 jmp	 SHORT $LN34@s390_searc
$LN33@s390_searc:
  00162	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN34@s390_searc:
  0016a	83 7c 24 60 00	 cmp	 DWORD PTR tv156[rsp], 0
  0016f	0f 84 6a 01 00
	00		 je	 $LN15@s390_searc

; 575  :     {
; 576  :         /* Compute the distance to the end of operand-2's page */
; 577  :         dist = PAGEFRAME_PAGESIZE - (addr2 & PAGEFRAME_BYTEMASK);

  00175	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  00179	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0017e	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00183	2b c8		 sub	 ecx, eax
  00185	8b c1		 mov	 eax, ecx
  00187	89 44 24 48	 mov	 DWORD PTR dist$[rsp], eax
$LN5@s390_searc:

; 578  : 
; 579  :         while (cpu_length)

  0018b	83 7c 24 38 00	 cmp	 DWORD PTR cpu_length$[rsp], 0
  00190	0f 84 20 01 00
	00		 je	 $LN6@s390_searc

; 580  :         {
; 581  :             /* We need to check the boundary condition
; 582  :                BEFORE attempting to access storage,
; 583  :                because if the boundary condition is met,
; 584  :                there is no further need to access storage.
; 585  :             */
; 586  :             /* NOTE: "When the address in general register R1 is less
; 587  :                than the address in general register R2, condition code
; 588  :                2 can be set only if the operand wraps around from the
; 589  :                top of storage to location 0."  The below comparison
; 590  :                for == is thus correct.
; 591  :             */
; 592  :             if (addr2 == addr1)

  00196	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  0019a	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  0019e	75 11		 jne	 SHORT $LN16@s390_searc

; 593  :             {
; 594  :                 regs->psw.cc = 2;

  001a0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a8	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 595  :                 return;

  001ac	e9 68 02 00 00	 jmp	 $LN1@s390_searc
$LN16@s390_searc:

; 596  :             }
; 597  :             main2 = MADDRL(addr2, cpu_length, r2, regs, ACCTYPE_READ, regs->psw.pkey );

  001b1	48 63 44 24 38	 movsxd	 rax, DWORD PTR cpu_length$[rsp]
  001b6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001be	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  001c2	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001c6	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001ce	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001d6	44 8b 44 24 40	 mov	 r8d, DWORD PTR r2$[rsp]
  001db	48 8b d0	 mov	 rdx, rax
  001de	8b 4c 24 30	 mov	 ecx, DWORD PTR addr2$[rsp]
  001e2	e8 00 00 00 00	 call	 s390_maddr_l
  001e7	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 598  :             for (i=0; i < dist; i++)

  001ec	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001f4	eb 0a		 jmp	 SHORT $LN9@s390_searc
$LN7@s390_searc:
  001f6	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  001fa	ff c0		 inc	 eax
  001fc	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN9@s390_searc:
  00200	8b 44 24 48	 mov	 eax, DWORD PTR dist$[rsp]
  00204	39 44 24 3c	 cmp	 DWORD PTR i$[rsp], eax
  00208	0f 8d 8b 00 00
	00		 jge	 $LN8@s390_searc

; 599  :             {
; 600  :                 /* If operand end address has been reached, return
; 601  :                    CC=2 and leave the R1 and R2 registers unchanged
; 602  :                 */
; 603  :                 /* NOTE: "When the address in general register R1 is
; 604  :                    less than the address in general register R2, then
; 605  :                    condition code 2 can be set only when the operand
; 606  :                    wraps around from the top of storage to location 0."
; 607  :                    Thus the below == comparison is correct.
; 608  :                 */
; 609  :                 if (addr2 == addr1)

  0020e	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  00212	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  00216	75 11		 jne	 SHORT $LN17@s390_searc

; 610  :                 {
; 611  :                     regs->psw.cc = 2;

  00218	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00220	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 612  :                     return;

  00224	e9 f0 01 00 00	 jmp	 $LN1@s390_searc
$LN17@s390_searc:

; 613  :                 }
; 614  : 
; 615  :                 /* Set CC=1 if the terminating character was found,
; 616  :                    and load the address of that character into R1 */
; 617  :                 if (*main2 == termchar)

  00229	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  0022e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00231	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR termchar$[rsp]
  00236	3b c1		 cmp	 eax, ecx
  00238	75 29		 jne	 SHORT $LN18@s390_searc

; 618  :                 {
; 619  :                     SET_GR_A( r1, regs, addr2 );

  0023a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR r1$[rsp]
  0023f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00247	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  0024b	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 620  :                     regs->psw.cc = 1;

  00252	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0025a	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 621  :                     return;

  0025e	e9 b6 01 00 00	 jmp	 $LN1@s390_searc
$LN18@s390_searc:

; 622  :                 }
; 623  : 
; 624  :                 /* Bump operand-2 */
; 625  :                 main2++;

  00263	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  00268	48 ff c0	 inc	 rax
  0026b	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 626  :                 addr2++;

  00270	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  00274	ff c0		 inc	 eax
  00276	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 627  :                 addr2 &= ADDRESS_MAXWRAP( regs );

  0027a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00282	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00288	8b 4c 24 30	 mov	 ecx, DWORD PTR addr2$[rsp]
  0028c	23 c8		 and	 ecx, eax
  0028e	8b c1		 mov	 eax, ecx
  00290	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 628  : 
; 629  :             } /* end for(i) */

  00294	e9 5d ff ff ff	 jmp	 $LN7@s390_searc
$LN8@s390_searc:

; 630  : 
; 631  :             cpu_length -= dist;

  00299	8b 44 24 48	 mov	 eax, DWORD PTR dist$[rsp]
  0029d	8b 4c 24 38	 mov	 ecx, DWORD PTR cpu_length$[rsp]
  002a1	2b c8		 sub	 ecx, eax
  002a3	8b c1		 mov	 eax, ecx
  002a5	89 44 24 38	 mov	 DWORD PTR cpu_length$[rsp], eax

; 632  :             dist = cpu_length;

  002a9	8b 44 24 38	 mov	 eax, DWORD PTR cpu_length$[rsp]
  002ad	89 44 24 48	 mov	 DWORD PTR dist$[rsp], eax

; 633  : 
; 634  :         } /* end while */

  002b1	e9 d5 fe ff ff	 jmp	 $LN5@s390_searc
$LN6@s390_searc:

; 635  : 
; 636  :         /* The CPU determine number of bytes has been reached. Set R2
; 637  :            to point to next character of operand, set CC=3 and exit */
; 638  :         SET_GR_A( r2, regs, addr2 );

  002b6	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  002bb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002c3	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  002c7	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 639  :         regs->psw.cc = 3;

  002ce	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002d6	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 640  :         return;

  002da	e9 3a 01 00 00	 jmp	 $LN1@s390_searc
$LN15@s390_searc:

; 641  :     } /* end if unlikely() */
; 642  : 
; 643  :     /* We don't cross a page boundary with the minimum length, so
; 644  :        extend the CPU determined length out to the end of the page */
; 645  :     cpu_length = PAGEFRAME_PAGESIZE - (addr2 & PAGEFRAME_BYTEMASK);

  002df	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  002e3	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  002e8	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  002ed	2b c8		 sub	 ecx, eax
  002ef	8b c1		 mov	 eax, ecx
  002f1	89 44 24 38	 mov	 DWORD PTR cpu_length$[rsp], eax

; 646  : 
; 647  :     /* We need to check the boundary condition
; 648  :        BEFORE attempting to access storage,
; 649  :        because if the boundary condition is met,
; 650  :        there is no further need to access storage.
; 651  :     */
; 652  :     /* NOTE: "When the address in general register R1 is less
; 653  :        than the address in general register R2, condition code
; 654  :        2 can be set only if the operand wraps around from the
; 655  :        top of storage to location 0."  The below comparison
; 656  :        for == is thus correct.
; 657  :     */
; 658  :     if (addr2 == addr1)

  002f5	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  002f9	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  002fd	75 11		 jne	 SHORT $LN19@s390_searc

; 659  :     {
; 660  :         regs->psw.cc = 2;

  002ff	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00307	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 661  :         return;

  0030b	e9 09 01 00 00	 jmp	 $LN1@s390_searc
$LN19@s390_searc:

; 662  :     }
; 663  : 
; 664  :     main2 = MADDRL(addr2, cpu_length, r2, regs, ACCTYPE_READ, regs->psw.pkey );

  00310	48 63 44 24 38	 movsxd	 rax, DWORD PTR cpu_length$[rsp]
  00315	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0031d	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00321	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00325	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0032d	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00335	44 8b 44 24 40	 mov	 r8d, DWORD PTR r2$[rsp]
  0033a	48 8b d0	 mov	 rdx, rax
  0033d	8b 4c 24 30	 mov	 ecx, DWORD PTR addr2$[rsp]
  00341	e8 00 00 00 00	 call	 s390_maddr_l
  00346	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 665  :     for (i=0; i < cpu_length; i++)

  0034b	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00353	eb 0a		 jmp	 SHORT $LN12@s390_searc
$LN10@s390_searc:
  00355	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  00359	ff c0		 inc	 eax
  0035b	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN12@s390_searc:
  0035f	8b 44 24 38	 mov	 eax, DWORD PTR cpu_length$[rsp]
  00363	39 44 24 3c	 cmp	 DWORD PTR i$[rsp], eax
  00367	0f 8d 88 00 00
	00		 jge	 $LN11@s390_searc

; 666  :     {
; 667  :         /* If operand end address has been reached, return
; 668  :            CC=2 and leave the R1 and R2 registers unchanged
; 669  :         */
; 670  :         /* NOTE: "When the address in general register R1 is less
; 671  :            than the address in general register R2, condition code
; 672  :            2 can be set only if the operand wraps around from the
; 673  :            top of storage to location 0."  The below comparison
; 674  :            for == is thus correct.
; 675  :         */
; 676  :         if (addr2 == addr1)

  0036d	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  00371	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  00375	75 11		 jne	 SHORT $LN20@s390_searc

; 677  :         {
; 678  :             regs->psw.cc = 2;

  00377	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0037f	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 679  :             return;

  00383	e9 91 00 00 00	 jmp	 $LN1@s390_searc
$LN20@s390_searc:

; 680  :         }
; 681  : 
; 682  :         /* If the terminating character was found, return
; 683  :            CC=1 and load the address of the character in R1 */
; 684  :         if (*main2 == termchar)

  00388	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  0038d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00390	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR termchar$[rsp]
  00395	3b c1		 cmp	 eax, ecx
  00397	75 26		 jne	 SHORT $LN21@s390_searc

; 685  :         {
; 686  :             SET_GR_A( r1, regs, addr2 );

  00399	48 63 44 24 4c	 movsxd	 rax, DWORD PTR r1$[rsp]
  0039e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003a6	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  003aa	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 687  :             regs->psw.cc = 1;

  003b1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003b9	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 688  :             return;

  003bd	eb 5a		 jmp	 SHORT $LN1@s390_searc
$LN21@s390_searc:

; 689  :         }
; 690  : 
; 691  :         /* Bump operand-2 */
; 692  :         main2++;

  003bf	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  003c4	48 ff c0	 inc	 rax
  003c7	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 693  :         addr2++;

  003cc	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  003d0	ff c0		 inc	 eax
  003d2	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 694  :         addr2 &= ADDRESS_MAXWRAP( regs );

  003d6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003de	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  003e4	8b 4c 24 30	 mov	 ecx, DWORD PTR addr2$[rsp]
  003e8	23 c8		 and	 ecx, eax
  003ea	8b c1		 mov	 eax, ecx
  003ec	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 695  : 
; 696  :     } /* end for(i) */

  003f0	e9 60 ff ff ff	 jmp	 $LN10@s390_searc
$LN11@s390_searc:

; 697  : 
; 698  :     /* The CPU determine number of bytes has been reached.
; 699  :        Set R2 to point to next character of operand-2 and
; 700  :        return CC=3.
; 701  :     */
; 702  :     SET_GR_A( r2, regs, addr2 );

  003f5	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  003fa	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00402	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  00406	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 703  :     regs->psw.cc = 3;

  0040d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00415	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@s390_searc:

; 704  : 
; 705  : } /* end DEF_INST(search_string) */

  00419	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0041d	c3		 ret	 0
s390_search_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr4$ = 64
effective_addr2$ = 68
b4$ = 72
b2$ = 76
r1$ = 80
r3$ = 84
temp$1 = 88
tv161 = 92
tv207 = 96
inst$ = 128
regs$ = 136
s390_perform_locked_operation PROC

; 359  : {

$LN61:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 360  : int     r1, r3;                         /* Lenght values             */
; 361  : int     b2, b4;                         /* Values of base registers  */
; 362  : VADR    effective_addr2,
; 363  :         effective_addr4;                /* Effective addresses       */
; 364  : 
; 365  :     SS(inst, regs, r1, r3, b2, effective_addr2, b4, effective_addr4);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	89 44 24 40	 mov	 DWORD PTR effective_addr4$[rsp], eax
  0003a	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0003e	c1 e8 0c	 shr	 eax, 12
  00041	83 e0 0f	 and	 eax, 15
  00044	89 44 24 48	 mov	 DWORD PTR b4$[rsp], eax
  00048	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 10	 shr	 eax, 16
  0004f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00054	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00058	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0005c	c1 e8 1c	 shr	 eax, 28
  0005f	83 e0 0f	 and	 eax, 15
  00062	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax
  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00077	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007b	83 e0 0f	 and	 eax, 15
  0007e	89 44 24 54	 mov	 DWORD PTR r3$[rsp], eax
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00093	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00097	c1 f8 04	 sar	 eax, 4
  0009a	83 e0 0f	 and	 eax, 15
  0009d	89 44 24 50	 mov	 DWORD PTR r1$[rsp], eax
  000a1	83 7c 24 4c 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a6	74 3a		 je	 SHORT $LN21@s390_perfo
  000a8	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b2$[rsp]
  000ad	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000bc	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000c0	03 c8		 add	 ecx, eax
  000c2	8b c1		 mov	 eax, ecx
  000c4	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000c8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d0	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000d6	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000da	23 c8		 and	 ecx, eax
  000dc	8b c1		 mov	 eax, ecx
  000de	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN21@s390_perfo:
  000e2	83 7c 24 48 00	 cmp	 DWORD PTR b4$[rsp], 0
  000e7	74 3a		 je	 SHORT $LN22@s390_perfo
  000e9	48 63 44 24 48	 movsxd	 rax, DWORD PTR b4$[rsp]
  000ee	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000fd	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr4$[rsp]
  00101	03 c8		 add	 ecx, eax
  00103	8b c1		 mov	 eax, ecx
  00105	89 44 24 40	 mov	 DWORD PTR effective_addr4$[rsp], eax
  00109	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00111	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00117	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr4$[rsp]
  0011b	23 c8		 and	 ecx, eax
  0011d	8b c1		 mov	 eax, ecx
  0011f	89 44 24 40	 mov	 DWORD PTR effective_addr4$[rsp], eax
$LN22@s390_perfo:
$LN4@s390_perfo:
  00123	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0012f	48 83 c0 06	 add	 rax, 6
  00133	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0013b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0013f	33 c0		 xor	 eax, eax
  00141	83 f8 06	 cmp	 eax, 6
  00144	74 0f		 je	 SHORT $LN23@s390_perfo
  00146	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0014e	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN23@s390_perfo:
  00155	33 c0		 xor	 eax, eax
  00157	85 c0		 test	 eax, eax
  00159	75 c8		 jne	 SHORT $LN4@s390_perfo

; 366  :     PER_ZEROADDR_XCHECK2( regs, b2, b4 );
; 367  :     TXF_INSTR_CHECK( regs );
; 368  : 
; 369  :     if(regs->GR_L(0) & PLO_GPR0_RESV)

  0015b	b8 08 00 00 00	 mov	 eax, 8
  00160	48 6b c0 00	 imul	 rax, rax, 0
  00164	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0016c	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00173	25 00 fe ff ff	 and	 eax, -512		; fffffe00H
  00178	85 c0		 test	 eax, eax
  0017a	74 1b		 je	 SHORT $LN24@s390_perfo

; 370  :         regs->program_interrupt(regs, PGM_SPECIFICATION_EXCEPTION);

  0017c	ba 06 00 00 00	 mov	 edx, 6
  00181	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00189	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00191	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN24@s390_perfo:

; 371  : 
; 372  :     if(regs->GR_L(0) & PLO_GPR0_T)

  00197	b8 08 00 00 00	 mov	 eax, 8
  0019c	48 6b c0 00	 imul	 rax, rax, 0
  001a0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001a8	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  001af	25 00 01 00 00	 and	 eax, 256		; 00000100H
  001b4	85 c0		 test	 eax, eax
  001b6	0f 84 eb 00 00
	00		 je	 $LN25@s390_perfo

; 373  :         switch(regs->GR_L(0) & PLO_GPR0_FC)

  001bc	b8 08 00 00 00	 mov	 eax, 8
  001c1	48 6b c0 00	 imul	 rax, rax, 0
  001c5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001cd	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  001d4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001d9	89 44 24 5c	 mov	 DWORD PTR tv161[rsp], eax
  001dd	83 7c 24 5c 15	 cmp	 DWORD PTR tv161[rsp], 21
  001e2	77 28		 ja	 SHORT $LN39@s390_perfo
  001e4	8b 44 24 5c	 mov	 eax, DWORD PTR tv161[rsp]
  001e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  001ef	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN60@s390_perfo[rcx+rax*4]
  001f6	48 03 c1	 add	 rax, rcx
  001f9	ff e0		 jmp	 rax
$LN27@s390_perfo:
$LN28@s390_perfo:
$LN29@s390_perfo:
$LN30@s390_perfo:
$LN31@s390_perfo:
$LN32@s390_perfo:
$LN33@s390_perfo:
$LN34@s390_perfo:
$LN35@s390_perfo:
$LN36@s390_perfo:
$LN37@s390_perfo:
$LN38@s390_perfo:

; 374  :     {
; 375  :         case PLO_CL:
; 376  :         case PLO_CLG:
; 377  :         case PLO_CS:
; 378  :         case PLO_CSG:
; 379  :         case PLO_DCS:
; 380  :         case PLO_DCSG:
; 381  :         case PLO_CSST:
; 382  :         case PLO_CSSTG:
; 383  :         case PLO_CSDST:
; 384  :         case PLO_CSDSTG:
; 385  :         case PLO_CSTST:
; 386  :         case PLO_CSTSTG:
; 387  : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 388  :         case PLO_CLGR:
; 389  :         case PLO_CLX:
; 390  :         case PLO_CSGR:
; 391  :         case PLO_CSX:
; 392  :         case PLO_DCSGR:
; 393  :         case PLO_DCSX:
; 394  :         case PLO_CSSTGR:
; 395  :         case PLO_CSSTX:
; 396  :         case PLO_CSDSTGR:
; 397  :         case PLO_CSDSTX:
; 398  :         case PLO_CSTSTGR:
; 399  :         case PLO_CSTSTX:
; 400  : #endif /* defined( FEATURE_001_ZARCH_INSTALLED_FACILITY ) */
; 401  : 
; 402  :             /* Indicate function supported */
; 403  :             regs->psw.cc = 0;

  001fb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00203	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 404  :             break;

  00207	e9 96 00 00 00	 jmp	 $LN5@s390_perfo
$LN39@s390_perfo:
$LN9@s390_perfo:

; 405  : 
; 406  :         default:
; 407  :             PTT_ERR("*PLO",regs->GR_L(0),regs->GR_L(r1),regs->psw.IA_L);

  0020c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_pttclass
  00213	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00216	48 83 e0 10	 and	 rax, 16
  0021a	48 85 c0	 test	 rax, rax
  0021d	74 6d		 je	 SHORT $LN40@s390_perfo
  0021f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00227	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0022d	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00232	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0023a	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00241	ba 08 00 00 00	 mov	 edx, 8
  00246	48 6b d2 00	 imul	 rdx, rdx, 0
  0024a	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00252	41 8b 94 10 80
	02 00 00	 mov	 edx, DWORD PTR [r8+rdx+640]
  0025a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00263	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00268	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG185707
  0026f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00274	44 8b c9	 mov	 r9d, ecx
  00277	44 8b c2	 mov	 r8d, edx
  0027a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG185708
  00281	b9 10 00 00 00	 mov	 ecx, 16
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptt_pthread_trace
$LN40@s390_perfo:
  0028c	33 c0		 xor	 eax, eax
  0028e	85 c0		 test	 eax, eax
  00290	0f 85 76 ff ff
	ff		 jne	 $LN9@s390_perfo

; 408  :             /* indicate function not supported */
; 409  :             regs->psw.cc = 3;

  00296	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0029e	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN5@s390_perfo:

; 410  :             break;
; 411  :     }

  002a2	e9 26 05 00 00	 jmp	 $LN26@s390_perfo
$LN25@s390_perfo:
$LN12@s390_perfo:

; 412  :     else
; 413  :     {
; 414  :         /* gpr1/ar1 indentify the program lock token, which is used
; 415  :            to select a lock from the model dependent number of locks
; 416  :            in the configuration.  We simply use 1 lock which is the
; 417  :            main storage access lock which is also used by CS, CDS
; 418  :            and TS.                                               *JJ */
; 419  :         OBTAIN_MAINLOCK_UNCONDITIONAL( regs );

  002a7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002af	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  002b6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002be	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  002c2	48 8b 89 b0 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4784]
  002c9	48 39 48 50	 cmp	 QWORD PTR [rax+80], rcx
  002cd	74 4b		 je	 SHORT $LN41@s390_perfo
  002cf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002d7	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  002db	48 05 68 10 00
	00		 add	 rax, 4200		; 00001068H
  002e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG185710
  002e8	48 8b c8	 mov	 rcx, rax
  002eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
  002f1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002f9	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00300	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00308	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0030c	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00313	66 89 81 60 10
	00 00		 mov	 WORD PTR [rcx+4192], ax
$LN41@s390_perfo:
  0031a	33 c0		 xor	 eax, eax
  0031c	85 c0		 test	 eax, eax
  0031e	75 87		 jne	 SHORT $LN12@s390_perfo

; 420  :         {
; 421  :             switch(regs->GR_L(0) & PLO_GPR0_FC)

  00320	b8 08 00 00 00	 mov	 eax, 8
  00325	48 6b c0 00	 imul	 rax, rax, 0
  00329	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00331	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00338	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0033d	89 44 24 60	 mov	 DWORD PTR tv207[rsp], eax
  00341	83 7c 24 60 15	 cmp	 DWORD PTR tv207[rsp], 21
  00346	0f 87 41 03 00
	00		 ja	 $LN54@s390_perfo
  0034c	8b 44 24 60	 mov	 eax, DWORD PTR tv207[rsp]
  00350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00357	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN59@s390_perfo[rcx+rax*4]
  0035e	48 03 c1	 add	 rax, rcx
  00361	ff e0		 jmp	 rax
$LN42@s390_perfo:

; 422  :             {
; 423  :                 case PLO_CL:
; 424  :                     regs->psw.cc = ARCH_DEP(plo_cl) (r1, r3,

  00363	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0036b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00370	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  00374	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00378	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  0037c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00380	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  00385	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0038a	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  0038e	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  00392	e8 00 00 00 00	 call	 s390_plo_cl
  00397	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0039f	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 425  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 426  :                     break;

  003a2	e9 01 03 00 00	 jmp	 $LN13@s390_perfo
$LN43@s390_perfo:

; 427  :                 case PLO_CLG:
; 428  :                     regs->psw.cc = ARCH_DEP(plo_clg) (r1, r3,

  003a7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003af	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  003b4	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  003b8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  003bc	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  003c0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003c4	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  003c9	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  003ce	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  003d2	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  003d6	e8 00 00 00 00	 call	 s390_plo_clg
  003db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003e3	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 429  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 430  :                     break;

  003e6	e9 bd 02 00 00	 jmp	 $LN13@s390_perfo
$LN44@s390_perfo:

; 431  :                 case PLO_CS:
; 432  :                     regs->psw.cc = ARCH_DEP(plo_cs) (r1, r3,

  003eb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003f3	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  003f8	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  003fc	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00400	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  00404	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00408	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  0040d	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00412	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  00416	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  0041a	e8 00 00 00 00	 call	 s390_plo_cs
  0041f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00427	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 433  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 434  :                     break;

  0042a	e9 79 02 00 00	 jmp	 $LN13@s390_perfo
$LN45@s390_perfo:

; 435  :                 case PLO_CSG:
; 436  :                     regs->psw.cc = ARCH_DEP(plo_csg) (r1, r3,

  0042f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00437	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0043c	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  00440	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00444	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  00448	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0044c	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  00451	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00456	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  0045a	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  0045e	e8 00 00 00 00	 call	 s390_plo_csg
  00463	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0046b	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 437  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 438  :                     break;

  0046e	e9 35 02 00 00	 jmp	 $LN13@s390_perfo
$LN46@s390_perfo:

; 439  :                 case PLO_DCS:
; 440  :                     regs->psw.cc = ARCH_DEP(plo_dcs) (r1, r3,

  00473	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0047b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00480	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  00484	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00488	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  0048c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00490	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  00495	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0049a	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  0049e	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  004a2	e8 00 00 00 00	 call	 s390_plo_dcs
  004a7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004af	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 441  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 442  :                     break;

  004b2	e9 f1 01 00 00	 jmp	 $LN13@s390_perfo
$LN47@s390_perfo:

; 443  :                 case PLO_DCSG:
; 444  :                     regs->psw.cc = ARCH_DEP(plo_dcsg) (r1, r3,

  004b7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004bf	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  004c4	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  004c8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  004cc	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  004d0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  004d4	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  004d9	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  004de	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  004e2	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  004e6	e8 00 00 00 00	 call	 s390_plo_dcsg
  004eb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004f3	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 445  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 446  :                     break;

  004f6	e9 ad 01 00 00	 jmp	 $LN13@s390_perfo
$LN48@s390_perfo:

; 447  :                 case PLO_CSST:
; 448  :                     regs->psw.cc = ARCH_DEP(plo_csst) (r1, r3,

  004fb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00503	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00508	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  0050c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00510	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  00514	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00518	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  0051d	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00522	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  00526	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  0052a	e8 00 00 00 00	 call	 s390_plo_csst
  0052f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00537	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 449  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 450  :                     break;

  0053a	e9 69 01 00 00	 jmp	 $LN13@s390_perfo
$LN49@s390_perfo:

; 451  :                 case PLO_CSSTG:
; 452  :                     regs->psw.cc = ARCH_DEP(plo_csstg) (r1, r3,

  0053f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00547	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0054c	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  00550	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00554	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  00558	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0055c	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  00561	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00566	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  0056a	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  0056e	e8 00 00 00 00	 call	 s390_plo_csstg
  00573	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0057b	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 453  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 454  :                     break;

  0057e	e9 25 01 00 00	 jmp	 $LN13@s390_perfo
$LN50@s390_perfo:

; 455  :                 case PLO_CSDST:
; 456  :                     regs->psw.cc = ARCH_DEP(plo_csdst) (r1, r3,

  00583	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0058b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00590	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  00594	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00598	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  0059c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  005a0	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  005a5	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  005aa	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  005ae	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  005b2	e8 00 00 00 00	 call	 s390_plo_csdst
  005b7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005bf	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 457  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 458  :                     break;

  005c2	e9 e1 00 00 00	 jmp	 $LN13@s390_perfo
$LN51@s390_perfo:

; 459  :                 case PLO_CSDSTG:
; 460  :                     regs->psw.cc = ARCH_DEP(plo_csdstg) (r1, r3,

  005c7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005cf	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  005d4	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  005d8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  005dc	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  005e0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  005e4	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  005e9	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  005ee	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  005f2	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  005f6	e8 00 00 00 00	 call	 s390_plo_csdstg
  005fb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00603	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 461  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 462  :                     break;

  00606	e9 9d 00 00 00	 jmp	 $LN13@s390_perfo
$LN52@s390_perfo:

; 463  :                 case PLO_CSTST:
; 464  :                     regs->psw.cc = ARCH_DEP(plo_cstst) (r1, r3,

  0060b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00613	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00618	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  0061c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00620	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  00624	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00628	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  0062d	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00632	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  00636	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  0063a	e8 00 00 00 00	 call	 s390_plo_cstst
  0063f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00647	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 465  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 466  :                     break;

  0064a	eb 5c		 jmp	 SHORT $LN13@s390_perfo
$LN53@s390_perfo:

; 467  :                 case PLO_CSTSTG:
; 468  :                     regs->psw.cc = ARCH_DEP(plo_cststg) (r1, r3,

  0064c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00654	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00659	8b 44 24 48	 mov	 eax, DWORD PTR b4$[rsp]
  0065d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00661	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr4$[rsp]
  00665	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00669	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR b2$[rsp]
  0066e	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00673	8b 54 24 54	 mov	 edx, DWORD PTR r3$[rsp]
  00677	8b 4c 24 50	 mov	 ecx, DWORD PTR r1$[rsp]
  0067b	e8 00 00 00 00	 call	 s390_plo_cststg
  00680	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00688	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 469  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 470  :                     break;

  0068b	eb 1b		 jmp	 SHORT $LN13@s390_perfo
$LN54@s390_perfo:

; 471  : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 472  :                 case PLO_CLGR:
; 473  :                     regs->psw.cc = ARCH_DEP(plo_clgr) (r1, r3,
; 474  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 475  :                     break;
; 476  :                 case PLO_CLX:
; 477  :                     regs->psw.cc = ARCH_DEP(plo_clx) (r1, r3,
; 478  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 479  :                     break;
; 480  :                 case PLO_CSGR:
; 481  :                     regs->psw.cc = ARCH_DEP(plo_csgr) (r1, r3,
; 482  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 483  :                     break;
; 484  :                 case PLO_CSX:
; 485  :                     regs->psw.cc = ARCH_DEP(plo_csx) (r1, r3,
; 486  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 487  :                     break;
; 488  :                 case PLO_DCSGR:
; 489  :                     regs->psw.cc = ARCH_DEP(plo_dcsgr) (r1, r3,
; 490  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 491  :                     break;
; 492  :                 case PLO_DCSX:
; 493  :                     regs->psw.cc = ARCH_DEP(plo_dcsx) (r1, r3,
; 494  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 495  :                     break;
; 496  :                 case PLO_CSSTGR:
; 497  :                     regs->psw.cc = ARCH_DEP(plo_csstgr) (r1, r3,
; 498  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 499  :                     break;
; 500  :                 case PLO_CSSTX:
; 501  :                     regs->psw.cc = ARCH_DEP(plo_csstx) (r1, r3,
; 502  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 503  :                     break;
; 504  :                 case PLO_CSDSTGR:
; 505  :                     regs->psw.cc = ARCH_DEP(plo_csdstgr) (r1, r3,
; 506  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 507  :                     break;
; 508  :                 case PLO_CSDSTX:
; 509  :                     regs->psw.cc = ARCH_DEP(plo_csdstx) (r1, r3,
; 510  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 511  :                     break;
; 512  :                 case PLO_CSTSTGR:
; 513  :                     regs->psw.cc = ARCH_DEP(plo_cststgr) (r1, r3,
; 514  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 515  :                     break;
; 516  :                 case PLO_CSTSTX:
; 517  :                     regs->psw.cc = ARCH_DEP(plo_cststx) (r1, r3,
; 518  :                             effective_addr2, b2, effective_addr4, b4, regs);
; 519  :                     break;
; 520  :    #endif /* defined( FEATURE_001_ZARCH_INSTALLED_FACILITY ) */
; 521  : 
; 522  :                 default:
; 523  :                     regs->program_interrupt(regs, PGM_SPECIFICATION_EXCEPTION);

  0068d	ba 06 00 00 00	 mov	 edx, 6
  00692	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0069a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006a2	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN13@s390_perfo:
$LN17@s390_perfo:

; 524  :             }
; 525  :         }
; 526  :         RELEASE_MAINLOCK_UNCONDITIONAL( regs );

  006a8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006b0	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  006b4	0f b7 80 60 10
	00 00		 movzx	 eax, WORD PTR [rax+4192]
  006bb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006c3	48 8b 89 68 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2152]
  006ca	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  006d1	3b c1		 cmp	 eax, ecx
  006d3	75 3a		 jne	 SHORT $LN55@s390_perfo
  006d5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006dd	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  006e1	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  006e6	66 89 88 60 10
	00 00		 mov	 WORD PTR [rax+4192], cx
  006ed	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006f5	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  006f9	48 05 68 10 00
	00		 add	 rax, 4200		; 00001068H
  006ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG185725
  00706	48 8b c8	 mov	 rcx, rax
  00709	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN55@s390_perfo:
  0070f	33 c0		 xor	 eax, eax
  00711	85 c0		 test	 eax, eax
  00713	75 93		 jne	 SHORT $LN17@s390_perfo

; 527  : 
; 528  :         if(regs->psw.cc && sysblk.cpus > 1)

  00715	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0071d	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  00721	85 c0		 test	 eax, eax
  00723	0f 84 a4 00 00
	00		 je	 $LN56@s390_perfo
  00729	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00730	83 b8 04 01 00
	00 01		 cmp	 DWORD PTR [rax+260], 1
  00737	0f 8e 90 00 00
	00		 jle	 $LN56@s390_perfo
$LN20@s390_perfo:

; 529  :         {
; 530  :             PTT_CSF("*PLO",regs->GR_L(0),regs->GR_L(r1),regs->psw.IA_L);

  0073d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_pttclass
  00744	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00747	48 83 e0 40	 and	 rax, 64			; 00000040H
  0074b	48 85 c0	 test	 rax, rax
  0074e	74 6d		 je	 SHORT $LN57@s390_perfo
  00750	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00758	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0075e	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00763	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0076b	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00772	ba 08 00 00 00	 mov	 edx, 8
  00777	48 6b d2 00	 imul	 rdx, rdx, 0
  0077b	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00783	41 8b 94 10 80
	02 00 00	 mov	 edx, DWORD PTR [r8+rdx+640]
  0078b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00794	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00799	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG185728
  007a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007a5	44 8b c9	 mov	 r9d, ecx
  007a8	44 8b c2	 mov	 r8d, edx
  007ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG185729
  007b2	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  007b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptt_pthread_trace
$LN57@s390_perfo:
  007bd	33 c0		 xor	 eax, eax
  007bf	85 c0		 test	 eax, eax
  007c1	0f 85 76 ff ff
	ff		 jne	 $LN20@s390_perfo

; 531  :             sched_yield();

  007c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN56@s390_perfo:
$LN26@s390_perfo:

; 532  :         }
; 533  :     }
; 534  : }

  007cd	48 83 c4 78	 add	 rsp, 120		; 00000078H
  007d1	c3		 ret	 0
  007d2	66 90		 npad	 2
$LN60@s390_perfo:
  007d4	00 00 00 00	 DD	 $LN27@s390_perfo
  007d8	00 00 00 00	 DD	 $LN28@s390_perfo
  007dc	00 00 00 00	 DD	 $LN39@s390_perfo
  007e0	00 00 00 00	 DD	 $LN39@s390_perfo
  007e4	00 00 00 00	 DD	 $LN29@s390_perfo
  007e8	00 00 00 00	 DD	 $LN30@s390_perfo
  007ec	00 00 00 00	 DD	 $LN39@s390_perfo
  007f0	00 00 00 00	 DD	 $LN39@s390_perfo
  007f4	00 00 00 00	 DD	 $LN31@s390_perfo
  007f8	00 00 00 00	 DD	 $LN32@s390_perfo
  007fc	00 00 00 00	 DD	 $LN39@s390_perfo
  00800	00 00 00 00	 DD	 $LN39@s390_perfo
  00804	00 00 00 00	 DD	 $LN33@s390_perfo
  00808	00 00 00 00	 DD	 $LN34@s390_perfo
  0080c	00 00 00 00	 DD	 $LN39@s390_perfo
  00810	00 00 00 00	 DD	 $LN39@s390_perfo
  00814	00 00 00 00	 DD	 $LN35@s390_perfo
  00818	00 00 00 00	 DD	 $LN36@s390_perfo
  0081c	00 00 00 00	 DD	 $LN39@s390_perfo
  00820	00 00 00 00	 DD	 $LN39@s390_perfo
  00824	00 00 00 00	 DD	 $LN37@s390_perfo
  00828	00 00 00 00	 DD	 $LN38@s390_perfo
$LN59@s390_perfo:
  0082c	00 00 00 00	 DD	 $LN42@s390_perfo
  00830	00 00 00 00	 DD	 $LN43@s390_perfo
  00834	00 00 00 00	 DD	 $LN54@s390_perfo
  00838	00 00 00 00	 DD	 $LN54@s390_perfo
  0083c	00 00 00 00	 DD	 $LN44@s390_perfo
  00840	00 00 00 00	 DD	 $LN45@s390_perfo
  00844	00 00 00 00	 DD	 $LN54@s390_perfo
  00848	00 00 00 00	 DD	 $LN54@s390_perfo
  0084c	00 00 00 00	 DD	 $LN46@s390_perfo
  00850	00 00 00 00	 DD	 $LN47@s390_perfo
  00854	00 00 00 00	 DD	 $LN54@s390_perfo
  00858	00 00 00 00	 DD	 $LN54@s390_perfo
  0085c	00 00 00 00	 DD	 $LN48@s390_perfo
  00860	00 00 00 00	 DD	 $LN49@s390_perfo
  00864	00 00 00 00	 DD	 $LN54@s390_perfo
  00868	00 00 00 00	 DD	 $LN54@s390_perfo
  0086c	00 00 00 00	 DD	 $LN50@s390_perfo
  00870	00 00 00 00	 DD	 $LN51@s390_perfo
  00874	00 00 00 00	 DD	 $LN54@s390_perfo
  00878	00 00 00 00	 DD	 $LN54@s390_perfo
  0087c	00 00 00 00	 DD	 $LN52@s390_perfo
  00880	00 00 00 00	 DD	 $LN53@s390_perfo
s390_perform_locked_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
h2$ = 32
i2$ = 36
h1$ = 40
temp$1 = 44
tv138 = 48
tv139 = 52
tv140 = 56
r1$ = 60
opcd$ = 64
inst$ = 96
regs$ = 104
s390_test_under_mask_low PROC

; 1787 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1788 : int     r1;                             /* Register number           */
; 1789 : int     opcd;                           /* Opcode                    */
; 1790 : U16     i2;                             /* 16-bit operand values     */
; 1791 : U16     h1;                             /* 16-bit operand values     */
; 1792 : U16     h2;                             /* 16-bit operand values     */
; 1793 : 
; 1794 :     RI(inst, regs, r1, opcd, i2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 2c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002c	66 89 44 24 24	 mov	 WORD PTR i2$[rsp], ax
  00031	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00035	c1 e8 10	 shr	 eax, 16
  00038	83 e0 0f	 and	 eax, 15
  0003b	89 44 24 40	 mov	 DWORD PTR opcd$[rsp], eax
  0003f	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 14	 shr	 eax, 20
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_test_:
  0004d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00052	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00056	48 83 c0 04	 add	 rax, 4
  0005a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00063	33 c0		 xor	 eax, eax
  00065	83 f8 04	 cmp	 eax, 4
  00068	74 0c		 je	 SHORT $LN8@s390_test_
  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_test_:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d1		 jne	 SHORT $LN4@s390_test_

; 1795 : 
; 1796 :     /* AND register bits 16-31 with immediate operand */
; 1797 :     h1 = i2 & regs->GR_LHL(r1);

  0007c	0f b7 44 24 24	 movzx	 eax, WORD PTR i2$[rsp]
  00081	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0008b	0f b7 8c ca 80
	02 00 00	 movzx	 ecx, WORD PTR [rdx+rcx*8+640]
  00093	23 c1		 and	 eax, ecx
  00095	66 89 44 24 28	 mov	 WORD PTR h1$[rsp], ax

; 1798 : 
; 1799 :     /* Isolate leftmost bit of immediate operand */
; 1800 :     for ( h2 = 0x8000; h2 != 0 && (h2 & i2) == 0; h2 >>= 1 );

  0009a	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0009f	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
  000a4	eb 0d		 jmp	 SHORT $LN7@s390_test_
$LN5@s390_test_:
  000a6	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000ab	66 d1 e8	 shr	 ax, 1
  000ae	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
$LN7@s390_test_:
  000b3	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 12		 je	 SHORT $LN6@s390_test_
  000bc	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000c1	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000c6	23 c1		 and	 eax, ecx
  000c8	85 c0		 test	 eax, eax
  000ca	75 02		 jne	 SHORT $LN6@s390_test_
  000cc	eb d8		 jmp	 SHORT $LN5@s390_test_
$LN6@s390_test_:

; 1801 : 
; 1802 :     /* Set condition code according to result */
; 1803 :     regs->psw.cc =

  000ce	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000d3	85 c0		 test	 eax, eax
  000d5	75 0a		 jne	 SHORT $LN14@s390_test_
  000d7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  000df	eb 4a		 jmp	 SHORT $LN15@s390_test_
$LN14@s390_test_:
  000e1	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000e6	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000eb	3b c1		 cmp	 eax, ecx
  000ed	75 0a		 jne	 SHORT $LN12@s390_test_
  000ef	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR tv139[rsp], 3
  000f7	eb 2a		 jmp	 SHORT $LN13@s390_test_
$LN12@s390_test_:
  000f9	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000fe	0f b7 4c 24 20	 movzx	 ecx, WORD PTR h2$[rsp]
  00103	23 c1		 and	 eax, ecx
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN10@s390_test_
  00109	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00111	eb 08		 jmp	 SHORT $LN11@s390_test_
$LN10@s390_test_:
  00113	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR tv138[rsp], 2
$LN11@s390_test_:
  0011b	8b 44 24 30	 mov	 eax, DWORD PTR tv138[rsp]
  0011f	89 44 24 34	 mov	 DWORD PTR tv139[rsp], eax
$LN13@s390_test_:
  00123	8b 44 24 34	 mov	 eax, DWORD PTR tv139[rsp]
  00127	89 44 24 38	 mov	 DWORD PTR tv140[rsp], eax
$LN15@s390_test_:
  0012b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00130	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv140[rsp]
  00135	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1804 :             ( h1 == 0 ) ? 0 :           /* result all zeroes */
; 1805 :             ( h1 == i2) ? 3 :           /* result all ones   */
; 1806 :             ((h1 & h2) == 0) ? 1 :      /* leftmost bit zero */
; 1807 :             2;                          /* leftmost bit one  */
; 1808 : 
; 1809 : }

  00138	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013c	c3		 ret	 0
s390_test_under_mask_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
h2$ = 32
i2$ = 36
h1$ = 40
temp$1 = 44
tv138 = 48
tv139 = 52
tv140 = 56
r1$ = 60
opcd$ = 64
inst$ = 96
regs$ = 104
s390_test_under_mask_high PROC

; 1757 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1758 : int     r1;                             /* Register number           */
; 1759 : int     opcd;                           /* Opcode                    */
; 1760 : U16     i2;                             /* 16-bit operand values     */
; 1761 : U16     h1;                             /* 16-bit operand values     */
; 1762 : U16     h2;                             /* 16-bit operand values     */
; 1763 : 
; 1764 :     RI(inst, regs, r1, opcd, i2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 2c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002c	66 89 44 24 24	 mov	 WORD PTR i2$[rsp], ax
  00031	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00035	c1 e8 10	 shr	 eax, 16
  00038	83 e0 0f	 and	 eax, 15
  0003b	89 44 24 40	 mov	 DWORD PTR opcd$[rsp], eax
  0003f	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 14	 shr	 eax, 20
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_test_:
  0004d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00052	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00056	48 83 c0 04	 add	 rax, 4
  0005a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00063	33 c0		 xor	 eax, eax
  00065	83 f8 04	 cmp	 eax, 4
  00068	74 0c		 je	 SHORT $LN8@s390_test_
  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_test_:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d1		 jne	 SHORT $LN4@s390_test_

; 1765 : 
; 1766 :     /* AND register bits 0-15 with immediate operand */
; 1767 :     h1 = i2 & regs->GR_LHH(r1);

  0007c	0f b7 44 24 24	 movzx	 eax, WORD PTR i2$[rsp]
  00081	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0008b	0f b7 8c ca 82
	02 00 00	 movzx	 ecx, WORD PTR [rdx+rcx*8+642]
  00093	23 c1		 and	 eax, ecx
  00095	66 89 44 24 28	 mov	 WORD PTR h1$[rsp], ax

; 1768 : 
; 1769 :     /* Isolate leftmost bit of immediate operand */
; 1770 :     for ( h2 = 0x8000; h2 != 0 && (h2 & i2) == 0; h2 >>= 1 );

  0009a	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0009f	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
  000a4	eb 0d		 jmp	 SHORT $LN7@s390_test_
$LN5@s390_test_:
  000a6	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000ab	66 d1 e8	 shr	 ax, 1
  000ae	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
$LN7@s390_test_:
  000b3	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 12		 je	 SHORT $LN6@s390_test_
  000bc	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000c1	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000c6	23 c1		 and	 eax, ecx
  000c8	85 c0		 test	 eax, eax
  000ca	75 02		 jne	 SHORT $LN6@s390_test_
  000cc	eb d8		 jmp	 SHORT $LN5@s390_test_
$LN6@s390_test_:

; 1771 : 
; 1772 :     /* Set condition code according to result */
; 1773 :     regs->psw.cc =

  000ce	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000d3	85 c0		 test	 eax, eax
  000d5	75 0a		 jne	 SHORT $LN14@s390_test_
  000d7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  000df	eb 4a		 jmp	 SHORT $LN15@s390_test_
$LN14@s390_test_:
  000e1	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000e6	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000eb	3b c1		 cmp	 eax, ecx
  000ed	75 0a		 jne	 SHORT $LN12@s390_test_
  000ef	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR tv139[rsp], 3
  000f7	eb 2a		 jmp	 SHORT $LN13@s390_test_
$LN12@s390_test_:
  000f9	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000fe	0f b7 4c 24 20	 movzx	 ecx, WORD PTR h2$[rsp]
  00103	23 c1		 and	 eax, ecx
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN10@s390_test_
  00109	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00111	eb 08		 jmp	 SHORT $LN11@s390_test_
$LN10@s390_test_:
  00113	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR tv138[rsp], 2
$LN11@s390_test_:
  0011b	8b 44 24 30	 mov	 eax, DWORD PTR tv138[rsp]
  0011f	89 44 24 34	 mov	 DWORD PTR tv139[rsp], eax
$LN13@s390_test_:
  00123	8b 44 24 34	 mov	 eax, DWORD PTR tv139[rsp]
  00127	89 44 24 38	 mov	 DWORD PTR tv140[rsp], eax
$LN15@s390_test_:
  0012b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00130	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv140[rsp]
  00135	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1774 :             ( h1 == 0 ) ? 0 :           /* result all zeroes */
; 1775 :             ( h1 == i2) ? 3 :           /* result all ones   */
; 1776 :             ((h1 & h2) == 0) ? 1 :      /* leftmost bit zero */
; 1777 :             2;                          /* leftmost bit one  */
; 1778 : }

  00138	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013c	c3		 ret	 0
s390_test_under_mask_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tbyte$ = 0
addr1$ = 4
r1$ = 8
len1$ = 12
len$ = 16
translen$ = 20
cc$ = 24
i$1 = 28
r2$ = 32
main1$ = 40
addr2$ = 48
i$ = 56
trtab$ = 64
__$ArrayPad$ = 320
inst$ = 464
regs$ = 472
s390_translate_extended PROC

; 1994 : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec c0 01
	00 00		 sub	 rsp, 448		; 000001c0H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 40 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1995 : int     r1, r2;                     /* Values of R fields            */
; 1996 : U64     i;                          /* Loop counter                  */
; 1997 : int     cc = 0;                     /* Condition code                */

  0002c	c7 45 18 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 1998 : VADR    addr1, addr2;               /* Operand addresses             */
; 1999 : GREG    len1;                       /* Operand length                */
; 2000 : BYTE    tbyte;                      /* Test byte                     */
; 2001 : CACHE_ALIGN BYTE  trtab[256];       /* Translate table               */
; 2002 : GREG    len;                        /* on page translate length      */
; 2003 : int     translen = 0;               /* translated length             */

  00033	c7 45 14 00 00
	00 00		 mov	 DWORD PTR translen$[rbp], 0

; 2004 : BYTE   *main1;                      /* Mainstor addresses            */
; 2005 : 
; 2006 :     RRE(inst, regs, r1, r2);

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	48 6b c0 03	 imul	 rax, rax, 3
  00043	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0004b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0004f	89 45 1c	 mov	 DWORD PTR i$1[rbp], eax
  00052	8b 45 1c	 mov	 eax, DWORD PTR i$1[rbp]
  00055	83 e0 0f	 and	 eax, 15
  00058	89 45 20	 mov	 DWORD PTR r2$[rbp], eax
  0005b	8b 45 1c	 mov	 eax, DWORD PTR i$1[rbp]
  0005e	c1 f8 04	 sar	 eax, 4
  00061	83 e0 0f	 and	 eax, 15
  00064	89 45 08	 mov	 DWORD PTR r1$[rbp], eax
$LN4@s390_trans:
  00067	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00073	48 83 c0 04	 add	 rax, 4
  00077	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00083	33 c0		 xor	 eax, eax
  00085	83 f8 04	 cmp	 eax, 4
  00088	74 0f		 je	 SHORT $LN8@s390_trans
  0008a	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00092	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_trans:
  00099	33 c0		 xor	 eax, eax
  0009b	85 c0		 test	 eax, eax
  0009d	75 c8		 jne	 SHORT $LN4@s390_trans

; 2007 :     PER_ZEROADDR_LCHECK( regs, r1, r1+1 );
; 2008 :     PER_ZEROADDR_CHECK( regs, r2 );
; 2009 : 
; 2010 :     TXFC_INSTR_CHECK( regs );
; 2011 :     ODD_CHECK(r1, regs);

  0009f	8b 45 08	 mov	 eax, DWORD PTR r1$[rbp]
  000a2	83 e0 01	 and	 eax, 1
  000a5	85 c0		 test	 eax, eax
  000a7	74 1b		 je	 SHORT $LN9@s390_trans
  000a9	ba 06 00 00 00	 mov	 edx, 6
  000ae	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b6	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000be	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@s390_trans:

; 2012 : 
; 2013 :     /* Load first operand length from R1+1 */
; 2014 :     len1 = GR_A(r1+1, regs);

  000c4	8b 45 08	 mov	 eax, DWORD PTR r1$[rbp]
  000c7	ff c0		 inc	 eax
  000c9	48 98		 cdqe
  000cb	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000da	89 45 0c	 mov	 DWORD PTR len1$[rbp], eax

; 2015 : 
; 2016 :     /* fast exit path */
; 2017 :     if (len1 == 0) {

  000dd	83 7d 0c 00	 cmp	 DWORD PTR len1$[rbp], 0
  000e1	75 11		 jne	 SHORT $LN10@s390_trans

; 2018 :         regs->psw.cc =  0;

  000e3	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000eb	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2019 :         return;

  000ef	e9 bc 01 00 00	 jmp	 $LN1@s390_trans
$LN10@s390_trans:

; 2020 :     }
; 2021 : 
; 2022 :     /* Load the operand addresses */
; 2023 :     addr1 = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000f4	48 63 45 08	 movsxd	 rax, DWORD PTR r1$[rbp]
  000f8	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00100	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00108	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [rdx+144]
  0010e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00115	23 c2		 and	 eax, edx
  00117	89 45 04	 mov	 DWORD PTR addr1$[rbp], eax

; 2024 :     addr2 = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  0011a	48 63 45 20	 movsxd	 rax, DWORD PTR r2$[rbp]
  0011e	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00126	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0012e	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [rdx+144]
  00134	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0013b	23 c2		 and	 eax, edx
  0013d	89 45 30	 mov	 DWORD PTR addr2$[rbp], eax

; 2025 : 
; 2026 :     /* Load the test byte from bits 24-31 of register 0 */
; 2027 :     tbyte = regs->GR_LHLCL(0);

  00140	b8 08 00 00 00	 mov	 eax, 8
  00145	48 6b c0 00	 imul	 rax, rax, 0
  00149	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00151	0f b6 84 01 80
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+640]
  00159	88 45 00	 mov	 BYTE PTR tbyte$[rbp], al

; 2028 : 
; 2029 :     /* Fetch second operand into work area.
; 2030 :        [7.5.101] Access exceptions for all 256 bytes of the second
; 2031 :        operand may be recognized, even if not all bytes are used */
; 2032 :     ARCH_DEP(vfetchc) ( trtab, 255, addr2, r2, regs );

  0015c	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00164	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00169	44 8b 4d 20	 mov	 r9d, DWORD PTR r2$[rbp]
  0016d	44 8b 45 30	 mov	 r8d, DWORD PTR addr2$[rbp]
  00171	b2 ff		 mov	 dl, 255			; 000000ffH
  00173	48 8d 4d 40	 lea	 rcx, QWORD PTR trtab$[rbp]
  00177	e8 00 00 00 00	 call	 s390_vfetchc

; 2033 : 
; 2034 :     /* Process first operand from left to right */
; 2035 :     /*  POP : SA22-7832-13 Page 7-422
; 2036 :         The amount of processing that results in the setting
; 2037 :         of condition code 3 is determined by the CPU on the
; 2038 :         basis of improving system performance, and it may
; 2039 :         be a different amount each time the instruction is
; 2040 :         executed.
; 2041 : 
; 2042 :         CC=3 :  Processed first operand to end of page and
; 2043 :                 indicate more data remaining.
; 2044 :     */
; 2045 : 
; 2046 :     /* get on page translate length */
; 2047 :     len = PAGEFRAME_PAGESIZE - (addr1 & PAGEFRAME_BYTEMASK);

  0017c	8b 45 04	 mov	 eax, DWORD PTR addr1$[rbp]
  0017f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00184	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00189	2b c8		 sub	 ecx, eax
  0018b	8b c1		 mov	 eax, ecx
  0018d	89 45 10	 mov	 DWORD PTR len$[rbp], eax

; 2048 :     if (len1 > len)

  00190	8b 45 10	 mov	 eax, DWORD PTR len$[rbp]
  00193	39 45 0c	 cmp	 DWORD PTR len1$[rbp], eax
  00196	76 09		 jbe	 SHORT $LN11@s390_trans

; 2049 :     {
; 2050 :        cc = 3;        /* maybe partial data */

  00198	c7 45 18 03 00
	00 00		 mov	 DWORD PTR cc$[rbp], 3

; 2051 :     }

  0019f	eb 0d		 jmp	 SHORT $LN12@s390_trans
$LN11@s390_trans:

; 2052 :     else
; 2053 :     {
; 2054 :       len = len1;     /* all of operand 1 is on page */

  001a1	8b 45 0c	 mov	 eax, DWORD PTR len1$[rbp]
  001a4	89 45 10	 mov	 DWORD PTR len$[rbp], eax

; 2055 :       cc = 0;         /* can't be a cc=3, assume 0 */

  001a7	c7 45 18 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0
$LN12@s390_trans:

; 2056 :     }
; 2057 : 
; 2058 :     /* Get operand 1 on page address */
; 2059 :     main1 = MADDRL( addr1, len, r1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  001ae	8b 45 10	 mov	 eax, DWORD PTR len$[rbp]
  001b1	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b9	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  001bd	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001c1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001c9	4c 8b 8c 24 d8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001d1	44 8b 45 08	 mov	 r8d, DWORD PTR r1$[rbp]
  001d5	8b d0		 mov	 edx, eax
  001d7	8b 4d 04	 mov	 ecx, DWORD PTR addr1$[rbp]
  001da	e8 00 00 00 00	 call	 s390_maddr_l
  001df	48 89 45 28	 mov	 QWORD PTR main1$[rbp], rax

; 2060 : 
; 2061 :     /* translate on page data */
; 2062 :     for (i = 0; i < len; i++)

  001e3	48 c7 45 38 00
	00 00 00	 mov	 QWORD PTR i$[rbp], 0
  001eb	eb 0b		 jmp	 SHORT $LN7@s390_trans
$LN5@s390_trans:
  001ed	48 8b 45 38	 mov	 rax, QWORD PTR i$[rbp]
  001f1	48 ff c0	 inc	 rax
  001f4	48 89 45 38	 mov	 QWORD PTR i$[rbp], rax
$LN7@s390_trans:
  001f8	8b 45 10	 mov	 eax, DWORD PTR len$[rbp]
  001fb	48 39 45 38	 cmp	 QWORD PTR i$[rbp], rax
  001ff	73 3f		 jae	 SHORT $LN6@s390_trans

; 2063 :     {
; 2064 :         /* If equal to test byte, exit with condition code 1 */
; 2065 :         if (*main1 == tbyte)

  00201	48 8b 45 28	 mov	 rax, QWORD PTR main1$[rbp]
  00205	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00208	0f b6 4d 00	 movzx	 ecx, BYTE PTR tbyte$[rbp]
  0020c	3b c1		 cmp	 eax, ecx
  0020e	75 09		 jne	 SHORT $LN13@s390_trans

; 2066 :         {
; 2067 :             cc = 1;

  00210	c7 45 18 01 00
	00 00		 mov	 DWORD PTR cc$[rbp], 1

; 2068 :             break;

  00217	eb 27		 jmp	 SHORT $LN6@s390_trans
$LN13@s390_trans:

; 2069 :         }
; 2070 : 
; 2071 :         /* Load indicated byte from translate table */
; 2072 :         *main1 = trtab[ *main1 ];

  00219	48 8b 45 28	 mov	 rax, QWORD PTR main1$[rbp]
  0021d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00220	48 8b 4d 28	 mov	 rcx, QWORD PTR main1$[rbp]
  00224	0f b6 44 05 40	 movzx	 eax, BYTE PTR trtab$[rbp+rax]
  00229	88 01		 mov	 BYTE PTR [rcx], al

; 2073 : 
; 2074 :         main1++;

  0022b	48 8b 45 28	 mov	 rax, QWORD PTR main1$[rbp]
  0022f	48 ff c0	 inc	 rax
  00232	48 89 45 28	 mov	 QWORD PTR main1$[rbp], rax

; 2075 :         translen++;

  00236	8b 45 14	 mov	 eax, DWORD PTR translen$[rbp]
  00239	ff c0		 inc	 eax
  0023b	89 45 14	 mov	 DWORD PTR translen$[rbp], eax

; 2076 :     } /* end for(i) */

  0023e	eb ad		 jmp	 SHORT $LN5@s390_trans
$LN6@s390_trans:

; 2077 : 
; 2078 :     /* Update the registers */
; 2079 :     addr1 += translen;

  00240	8b 45 14	 mov	 eax, DWORD PTR translen$[rbp]
  00243	8b 4d 04	 mov	 ecx, DWORD PTR addr1$[rbp]
  00246	03 c8		 add	 ecx, eax
  00248	8b c1		 mov	 eax, ecx
  0024a	89 45 04	 mov	 DWORD PTR addr1$[rbp], eax

; 2080 :     addr1 &= ADDRESS_MAXWRAP(regs);

  0024d	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00255	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0025b	8b 4d 04	 mov	 ecx, DWORD PTR addr1$[rbp]
  0025e	23 c8		 and	 ecx, eax
  00260	8b c1		 mov	 eax, ecx
  00262	89 45 04	 mov	 DWORD PTR addr1$[rbp], eax

; 2081 :     SET_GR_A(r1, regs, addr1);

  00265	48 63 45 08	 movsxd	 rax, DWORD PTR r1$[rbp]
  00269	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00271	8b 55 04	 mov	 edx, DWORD PTR addr1$[rbp]
  00274	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2082 : 
; 2083 :     len1  -= translen;

  0027b	8b 45 14	 mov	 eax, DWORD PTR translen$[rbp]
  0027e	8b 4d 0c	 mov	 ecx, DWORD PTR len1$[rbp]
  00281	2b c8		 sub	 ecx, eax
  00283	8b c1		 mov	 eax, ecx
  00285	89 45 0c	 mov	 DWORD PTR len1$[rbp], eax

; 2084 :     SET_GR_A(r1+1, regs, len1);

  00288	8b 45 08	 mov	 eax, DWORD PTR r1$[rbp]
  0028b	ff c0		 inc	 eax
  0028d	48 98		 cdqe
  0028f	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00297	8b 55 0c	 mov	 edx, DWORD PTR len1$[rbp]
  0029a	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2085 : 
; 2086 :     /* Set condition code */
; 2087 :     regs->psw.cc =  cc;

  002a1	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002a9	0f b6 4d 18	 movzx	 ecx, BYTE PTR cc$[rbp]
  002ad	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@s390_trans:

; 2088 : 
; 2089 : } /* end translate_extended */

  002b0	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002b7	48 33 cc	 xor	 rcx, rsp
  002ba	e8 00 00 00 00	 call	 __security_check_cookie
  002bf	48 81 c4 c0 01
	00 00		 add	 rsp, 448		; 000001c0H
  002c6	5d		 pop	 rbp
  002c7	c3		 ret	 0
s390_translate_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 48
b2$ = 52
temp$1 = 56
ETOD$ = 64
__$ArrayPad$ = 80
inst$ = 112
regs$ = 120
s390_store_clock_extended PROC

; 1186 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1187 : int     b2;                             /* Base of effective addr    */
; 1188 : VADR    effective_addr2;                /* Effective address         */
; 1189 : ETOD    ETOD;                           /* Extended clock work area  */
; 1190 : 
; 1191 :     S(inst, regs, b2, effective_addr2);

  0001d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00022	e8 00 00 00 00	 call	 fetch_fw_noswap
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 _byteswap_ulong
  0002e	89 44 24 38	 mov	 DWORD PTR temp$1[rsp], eax
  00032	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00036	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0003b	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003f	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 0c	 shr	 eax, 12
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 34	 mov	 DWORD PTR b2$[rsp], eax
  0004d	83 7c 24 34 00	 cmp	 DWORD PTR b2$[rsp], 0
  00052	74 34		 je	 SHORT $LN5@s390_store
  00054	48 63 44 24 34	 movsxd	 rax, DWORD PTR b2$[rsp]
  00059	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0005e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00065	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00069	03 c8		 add	 ecx, eax
  0006b	8b c1		 mov	 eax, ecx
  0006d	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00071	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00076	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0007c	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00080	23 c8		 and	 ecx, eax
  00082	8b c1		 mov	 eax, ecx
  00084	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s390_store:
$LN4@s390_store:
  00088	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0008d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00091	48 83 c0 04	 add	 rax, 4
  00095	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0009a	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 04	 cmp	 eax, 4
  000a3	74 0c		 je	 SHORT $LN6@s390_store
  000a5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s390_store:
  000b1	33 c0		 xor	 eax, eax
  000b3	85 c0		 test	 eax, eax
  000b5	75 d1		 jne	 SHORT $LN4@s390_store

; 1192 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1193 : 
; 1194 : #if defined( _FEATURE_SIE )
; 1195 :     if(SIE_STATE_BIT_ON(regs, IC2, STCK))

  000b7	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000bc	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  000c2	d1 e8		 shr	 eax, 1
  000c4	83 e0 01	 and	 eax, 1
  000c7	85 c0		 test	 eax, eax
  000c9	74 3b		 je	 SHORT $LN7@s390_store
  000cb	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000d0	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000d7	b9 01 00 00 00	 mov	 ecx, 1
  000dc	48 6b c9 02	 imul	 rcx, rcx, 2
  000e0	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  000e5	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000ea	85 c0		 test	 eax, eax
  000ec	74 18		 je	 SHORT $LN7@s390_store

; 1196 :         longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  000ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f3	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  000f9	ba fc ff ff ff	 mov	 edx, -4
  000fe	48 8b c8	 mov	 rcx, rax
  00101	e8 00 00 00 00	 call	 longjmp
$LN7@s390_store:

; 1197 : #endif
; 1198 : 
; 1199 :     /* Perform serialization before fetching clock */
; 1200 :     PERFORM_SERIALIZATION (regs);

  00106	0f ae f0	 mfence

; 1201 : 
; 1202 :     /* Check that all 16 bytes of the operand are accessible */
; 1203 :     ARCH_DEP(validate_operand) (effective_addr2, b2, 15, ACCTYPE_WRITE, regs);

  00109	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	41 b9 02 00 00
	00		 mov	 r9d, 2
  00119	41 b8 0f 00 00
	00		 mov	 r8d, 15
  0011f	8b 54 24 34	 mov	 edx, DWORD PTR b2$[rsp]
  00123	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00127	e8 00 00 00 00	 call	 s390_validate_operand

; 1204 : 
; 1205 :     /* Retrieve the extended format TOD clock */
; 1206 :     etod_clock(regs, &ETOD, ETOD_extended);

  0012c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00132	48 8d 54 24 40	 lea	 rdx, QWORD PTR ETOD$[rsp]
  00137	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0013c	e8 00 00 00 00	 call	 etod_clock

; 1207 : 
; 1208 : //  /*debug*/logmsg("Store TOD clock extended: +0=%16.16"PRIX64"\n",
; 1209 : //  /*debug*/       dreg);
; 1210 : 
; 1211 :     /* Store the 8 bit TOD epoch, clock bits 0-51, and bits
; 1212 :        20-23 of the TOD uniqueness value at operand address */
; 1213 :     ARCH_DEP(vstore8) ( ETOD.high, effective_addr2, b2, regs );

  00141	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00146	44 8b 44 24 34	 mov	 r8d, DWORD PTR b2$[rsp]
  0014b	8b 54 24 30	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  0014f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ETOD$[rsp+8]
  00154	e8 00 00 00 00	 call	 s390_vstore8

; 1214 : 
; 1215 : //  /*debug*/logmsg("Store TOD clock extended: +8=%16.16"PRIX64"\n",
; 1216 : //  /*debug*/       dreg);
; 1217 : 
; 1218 :     /* Store second doubleword value at operand+8 */
; 1219 :     effective_addr2 += 8;

  00159	8b 44 24 30	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0015d	83 c0 08	 add	 eax, 8
  00160	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 1220 :     effective_addr2 &= ADDRESS_MAXWRAP(regs);

  00164	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00169	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0016f	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00173	23 c8		 and	 ecx, eax
  00175	8b c1		 mov	 eax, ecx
  00177	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 1221 : 
; 1222 :     /* Store nonzero value in pos 72 to 111 */
; 1223 :     ARCH_DEP(vstore8) ( ETOD.low, effective_addr2, b2, regs );

  0017b	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00180	44 8b 44 24 34	 mov	 r8d, DWORD PTR b2$[rsp]
  00185	8b 54 24 30	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00189	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ETOD$[rsp]
  0018e	e8 00 00 00 00	 call	 s390_vstore8

; 1224 : 
; 1225 :     /* Perform serialization after storing clock */
; 1226 :     PERFORM_SERIALIZATION (regs);

  00193	0f ae f0	 mfence

; 1227 : 
; 1228 :     /* Set condition code zero */
; 1229 :     regs->psw.cc = 0;

  00196	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0019b	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s390_store:

; 1230 : }

  0019f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a4	48 33 cc	 xor	 rcx, rsp
  001a7	e8 00 00 00 00	 call	 __security_check_cookie
  001ac	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b0	c3		 ret	 0
s390_store_clock_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 48
i$ = 52
m$ = 56
n$ = 60
temp$1 = 64
b2$ = 68
r1$ = 72
tv148 = 76
p2$ = 80
r3$ = 88
p1$ = 96
tv175 = 104
tv189 = 112
inst$ = 144
regs$ = 152
s390_store_access_multiple PROC

; 1033 : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1034 : int     r1, r3;                         /* Register numbers          */
; 1035 : int     b2;                             /* effective address base    */
; 1036 : VADR    effective_addr2;                /* effective address         */
; 1037 : int     i, m, n;                        /* Integer work area         */
; 1038 : U32    *p1, *p2 = NULL;                 /* Mainstor pointers         */

  00011	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR p2$[rsp], 0

; 1039 : 
; 1040 :     RS( inst, regs, r1, r3, b2, effective_addr2 );

  0001a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00022	e8 00 00 00 00	 call	 fetch_fw_noswap
  00027	8b c8		 mov	 ecx, eax
  00029	e8 00 00 00 00	 call	 _byteswap_ulong
  0002e	89 44 24 40	 mov	 DWORD PTR temp$1[rsp], eax
  00032	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00036	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0003b	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003f	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 0c	 shr	 eax, 12
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 44	 mov	 DWORD PTR b2$[rsp], eax
  0004d	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00051	c1 e8 10	 shr	 eax, 16
  00054	83 e0 0f	 and	 eax, 15
  00057	89 44 24 58	 mov	 DWORD PTR r3$[rsp], eax
  0005b	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  0005f	c1 e8 14	 shr	 eax, 20
  00062	83 e0 0f	 and	 eax, 15
  00065	89 44 24 48	 mov	 DWORD PTR r1$[rsp], eax
  00069	83 7c 24 44 00	 cmp	 DWORD PTR b2$[rsp], 0
  0006e	74 41		 je	 SHORT $LN11@s390_store
  00070	48 63 44 24 44	 movsxd	 rax, DWORD PTR b2$[rsp]
  00075	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007d	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00084	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00088	03 c8		 add	 ecx, eax
  0008a	8b c1		 mov	 eax, ecx
  0008c	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00090	33 c0		 xor	 eax, eax
  00092	83 f8 04	 cmp	 eax, 4
  00095	74 1a		 je	 SHORT $LN12@s390_store
  00097	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0009f	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  000a5	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000a9	23 c8		 and	 ecx, eax
  000ab	8b c1		 mov	 eax, ecx
  000ad	89 44 24 30	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s390_store:
$LN11@s390_store:
$LN4@s390_store:
  000b1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000bd	48 83 c0 04	 add	 rax, 4
  000c1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000cd	33 c0		 xor	 eax, eax
  000cf	83 f8 04	 cmp	 eax, 4
  000d2	74 0f		 je	 SHORT $LN13@s390_store
  000d4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000dc	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN13@s390_store:
  000e3	33 c0		 xor	 eax, eax
  000e5	85 c0		 test	 eax, eax
  000e7	75 c8		 jne	 SHORT $LN4@s390_store

; 1041 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1042 : 
; 1043 :     FW_CHECK( effective_addr2, regs );

  000e9	8b 44 24 30	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000ed	83 e0 03	 and	 eax, 3
  000f0	85 c0		 test	 eax, eax
  000f2	74 1b		 je	 SHORT $LN14@s390_store
  000f4	ba 06 00 00 00	 mov	 edx, 6
  000f9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00101	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00109	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s390_store:

; 1044 : 
; 1045 :     /* Calculate number of regs to store */
; 1046 :     n = ((r3 - r1) & 0xF) + 1;

  0010f	8b 44 24 48	 mov	 eax, DWORD PTR r1$[rsp]
  00113	8b 4c 24 58	 mov	 ecx, DWORD PTR r3$[rsp]
  00117	2b c8		 sub	 ecx, eax
  00119	8b c1		 mov	 eax, ecx
  0011b	83 e0 0f	 and	 eax, 15
  0011e	ff c0		 inc	 eax
  00120	89 44 24 3c	 mov	 DWORD PTR n$[rsp], eax

; 1047 : 
; 1048 :     /* Calculate number of words to next boundary */
; 1049 :     m = (PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK)) >> 2;

  00124	8b 44 24 30	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00128	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0012d	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  00132	2b c8		 sub	 ecx, eax
  00134	8b c1		 mov	 eax, ecx
  00136	c1 e8 02	 shr	 eax, 2
  00139	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax

; 1050 : 
; 1051 :     /* Address of operand beginning */
; 1052 : 
; 1053 :     p1 = (U32*) MADDRL( effective_addr2, n << 2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0013d	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  00141	c1 e0 02	 shl	 eax, 2
  00144	48 98		 cdqe
  00146	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0014e	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00152	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00156	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0015e	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00166	44 8b 44 24 44	 mov	 r8d, DWORD PTR b2$[rsp]
  0016b	48 8b d0	 mov	 rdx, rax
  0016e	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00172	e8 00 00 00 00	 call	 s390_maddr_l
  00177	48 89 44 24 60	 mov	 QWORD PTR p1$[rsp], rax

; 1054 :     /* Get address of next page if boundary crossed */
; 1055 :     if (unlikely( m < n ))

  0017c	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  00180	39 44 24 38	 cmp	 DWORD PTR m$[rsp], eax
  00184	7d 0a		 jge	 SHORT $LN20@s390_store
  00186	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  0018e	eb 08		 jmp	 SHORT $LN21@s390_store
$LN20@s390_store:
  00190	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN21@s390_store:
  00198	83 7c 24 4c 00	 cmp	 DWORD PTR tv148[rsp], 0
  0019d	74 50		 je	 SHORT $LN15@s390_store

; 1056 :         p2 = (U32*) MADDRL(effective_addr2 + (m*4), (n - m) << 2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0019f	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  001a3	8b 4c 24 3c	 mov	 ecx, DWORD PTR n$[rsp]
  001a7	2b c8		 sub	 ecx, eax
  001a9	8b c1		 mov	 eax, ecx
  001ab	c1 e0 02	 shl	 eax, 2
  001ae	48 98		 cdqe
  001b0	8b 4c 24 30	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001b4	8b 54 24 38	 mov	 edx, DWORD PTR m$[rsp]
  001b8	8d 0c 91	 lea	 ecx, DWORD PTR [rcx+rdx*4]
  001bb	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001c3	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  001c7	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  001cb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001d3	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001db	44 8b 44 24 44	 mov	 r8d, DWORD PTR b2$[rsp]
  001e0	48 8b d0	 mov	 rdx, rax
  001e3	e8 00 00 00 00	 call	 s390_maddr_l
  001e8	48 89 44 24 50	 mov	 QWORD PTR p2$[rsp], rax
  001ed	eb 08		 jmp	 SHORT $LN16@s390_store
$LN15@s390_store:

; 1057 :     else
; 1058 :         m = n;

  001ef	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  001f3	89 44 24 38	 mov	 DWORD PTR m$[rsp], eax
$LN16@s390_store:

; 1059 : 
; 1060 :     /* Store to first page */
; 1061 :     for (i=0; i < m; i++)

  001f7	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001ff	eb 0a		 jmp	 SHORT $LN7@s390_store
$LN5@s390_store:
  00201	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00205	ff c0		 inc	 eax
  00207	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN7@s390_store:
  0020b	8b 44 24 38	 mov	 eax, DWORD PTR m$[rsp]
  0020f	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  00213	7d 4b		 jge	 SHORT $LN6@s390_store

; 1062 :         store_fw( p1++, regs->AR( (r1 + i) & 0xF ));

  00215	48 8b 44 24 60	 mov	 rax, QWORD PTR p1$[rsp]
  0021a	48 89 44 24 68	 mov	 QWORD PTR tv175[rsp], rax
  0021f	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00223	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00227	03 c8		 add	 ecx, eax
  00229	8b c1		 mov	 eax, ecx
  0022b	83 e0 0f	 and	 eax, 15
  0022e	48 98		 cdqe
  00230	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00238	8b 8c 81 00 03
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*4+768]
  0023f	e8 00 00 00 00	 call	 _byteswap_ulong
  00244	8b d0		 mov	 edx, eax
  00246	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv175[rsp]
  0024b	e8 00 00 00 00	 call	 store_fw_noswap
  00250	48 8b 44 24 60	 mov	 rax, QWORD PTR p1$[rsp]
  00255	48 83 c0 04	 add	 rax, 4
  00259	48 89 44 24 60	 mov	 QWORD PTR p1$[rsp], rax
  0025e	eb a1		 jmp	 SHORT $LN5@s390_store
$LN6@s390_store:

; 1063 : 
; 1064 :     /* Store to next page */
; 1065 :     for (; i < n; i++)

  00260	eb 0a		 jmp	 SHORT $LN10@s390_store
$LN8@s390_store:
  00262	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00266	ff c0		 inc	 eax
  00268	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN10@s390_store:
  0026c	8b 44 24 3c	 mov	 eax, DWORD PTR n$[rsp]
  00270	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  00274	7d 4b		 jge	 SHORT $LN9@s390_store

; 1066 :         store_fw( p2++, regs->AR( (r1 + i) & 0xF ));

  00276	48 8b 44 24 50	 mov	 rax, QWORD PTR p2$[rsp]
  0027b	48 89 44 24 70	 mov	 QWORD PTR tv189[rsp], rax
  00280	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00284	8b 4c 24 48	 mov	 ecx, DWORD PTR r1$[rsp]
  00288	03 c8		 add	 ecx, eax
  0028a	8b c1		 mov	 eax, ecx
  0028c	83 e0 0f	 and	 eax, 15
  0028f	48 98		 cdqe
  00291	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00299	8b 8c 81 00 03
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*4+768]
  002a0	e8 00 00 00 00	 call	 _byteswap_ulong
  002a5	8b d0		 mov	 edx, eax
  002a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv189[rsp]
  002ac	e8 00 00 00 00	 call	 store_fw_noswap
  002b1	48 8b 44 24 50	 mov	 rax, QWORD PTR p2$[rsp]
  002b6	48 83 c0 04	 add	 rax, 4
  002ba	48 89 44 24 50	 mov	 QWORD PTR p2$[rsp], rax
  002bf	eb a1		 jmp	 SHORT $LN8@s390_store
$LN9@s390_store:

; 1067 : }

  002c1	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002c8	c3		 ret	 0
s390_store_access_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 0
i$1 = 4
r2$ = 8
inst$ = 32
regs$ = 40
s390_set_access_register PROC

; 714  : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 715  : int     r1, r2;                         /* Values of R fields        */
; 716  : 
; 717  :     RRE(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 4c 24 20	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 04	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 04	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 08	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 04	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 04 24	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s390_set_a:
  0003c	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  00041	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00045	48 83 c0 04	 add	 rax, 4
  00049	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00052	33 c0		 xor	 eax, eax
  00054	83 f8 04	 cmp	 eax, 4
  00057	74 0c		 je	 SHORT $LN8@s390_set_a
  00059	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0005e	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s390_set_a:
  00065	33 c0		 xor	 eax, eax
  00067	85 c0		 test	 eax, eax
  00069	75 d1		 jne	 SHORT $LN4@s390_set_a

; 718  : 
; 719  :     TXF_ACCESS_INSTR_CHECK( regs );
; 720  : 
; 721  :     /* Copy R2 general register to R1 access register */
; 722  :     regs->AR(r1) = regs->GR_L(r2);

  0006b	48 63 44 24 08	 movsxd	 rax, DWORD PTR r2$[rsp]
  00070	48 63 0c 24	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00074	48 8b 54 24 28	 mov	 rdx, QWORD PTR regs$[rsp]
  00079	4c 8b 44 24 28	 mov	 r8, QWORD PTR regs$[rsp]
  0007e	41 8b 84 c0 80
	02 00 00	 mov	 eax, DWORD PTR [r8+rax*8+640]
  00086	89 84 8a 00 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+768], eax
$LN7@s390_set_a:

; 723  :     SET_AEA_AR(regs, r1);

  0008d	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  00092	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  00096	83 f8 40	 cmp	 eax, 64			; 00000040H
  00099	75 78		 jne	 SHORT $LN9@s390_set_a
  0009b	83 3c 24 00	 cmp	 DWORD PTR r1$[rsp], 0
  0009f	7e 72		 jle	 SHORT $LN9@s390_set_a
  000a1	48 63 04 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  000a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000aa	83 bc 81 00 03
	00 00 00	 cmp	 DWORD PTR [rcx+rax*4+768], 0
  000b2	75 1a		 jne	 SHORT $LN10@s390_set_a
  000b4	8b 04 24	 mov	 eax, DWORD PTR r1$[rsp]
  000b7	83 c0 05	 add	 eax, 5
  000ba	48 98		 cdqe
  000bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	c7 84 81 94 0c
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 1
  000cc	eb 45		 jmp	 SHORT $LN11@s390_set_a
$LN10@s390_set_a:
  000ce	48 63 04 24	 movsxd	 rax, DWORD PTR r1$[rsp]
  000d2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	83 bc 81 00 03
	00 00 01	 cmp	 DWORD PTR [rcx+rax*4+768], 1
  000df	75 1a		 jne	 SHORT $LN12@s390_set_a
  000e1	8b 04 24	 mov	 eax, DWORD PTR r1$[rsp]
  000e4	83 c0 05	 add	 eax, 5
  000e7	48 98		 cdqe
  000e9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000ee	c7 84 81 94 0c
	00 00 07 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 7
  000f9	eb 18		 jmp	 SHORT $LN13@s390_set_a
$LN12@s390_set_a:
  000fb	8b 04 24	 mov	 eax, DWORD PTR r1$[rsp]
  000fe	83 c0 05	 add	 eax, 5
  00101	48 98		 cdqe
  00103	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00108	c7 84 81 94 0c
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 0
$LN13@s390_set_a:
$LN11@s390_set_a:
$LN9@s390_set_a:
  00113	33 c0		 xor	 eax, eax
  00115	85 c0		 test	 eax, eax
  00117	0f 85 70 ff ff
	ff		 jne	 $LN7@s390_set_a

; 724  : }

  0011d	48 83 c4 18	 add	 rsp, 24
  00121	c3		 ret	 0
s390_set_access_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
buf_addr$ = 0
a_bit$ = 4
isReverse$ = 5
temp_h$ = 8
temp_l$ = 12
buf_len$ = 16
r1$ = 20
fc$ = 24
l_bit$ = 28
f_bit$ = 29
fc_addr$ = 32
fc_page_no$ = 36
buf_main_addr$ = 40
fct_page_no$ = 48
processed$ = 52
m3$ = 56
fct_work_page_addr$ = 60
arg_ch$ = 64
fct_addr$ = 68
i$ = 72
r2$ = 76
temp$1 = 80
tv83 = 84
tv87 = 88
tv89 = 92
tv93 = 96
tv95 = 100
tv133 = 104
tv135 = 108
tv162 = 112
fct_page_addr$ = 116
max_process$ = 120
tv335 = 124
tv81 = 128
fct_work_end_addr$ = 132
fct_main_page_addr$ = 192
__$ArrayPad$ = 768
inst$ = 912
regs$ = 920
s370_translate_and_test_xxx_extended PROC

; 3153 : {

$LN63:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 80 03
	00 00		 sub	 rsp, 896		; 00000380H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 00 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3154 :     int   r1;                   /* Operand-1 register number         */
; 3155 :     int   r2;                   /* Operand-2 register number         */
; 3156 :     int   m3;                   /* Operand-3 mask value              */
; 3157 : 
; 3158 :     bool  a_bit;                /* (A) Argument-Character Control    */
; 3159 :     bool  f_bit;                /* (F) Function-Code Control         */
; 3160 :     bool  l_bit;                /* (L) Argument-Character Limit      */
; 3161 : 
; 3162 :     bool  isReverse;            /* true == TRTRE, false == TRTE      */
; 3163 : 
; 3164 :     U32   arg_ch;               /* Argument character                */
; 3165 :     U32   fc;                   /* Function-Code                     */
; 3166 :     U16   temp_l;               /* Work - low byte                   */
; 3167 :     U16   temp_h;               /* Work - high byte                  */
; 3168 : 
; 3169 :     int   processed;            /* # bytes processed                 */
; 3170 :     int   max_process;          /* Max to process on current page    */
; 3171 :     int   i;                    /* Work iterator                     */
; 3172 : 
; 3173 :     VADR  buf_addr;             /* First argument address            */
; 3174 :     GREG  buf_len;              /* First argument length             */
; 3175 :     BYTE* buf_main_addr;        /* Buffer real address */
; 3176 : 
; 3177 :     VADR  fc_page_no;           /* Function-Code - page number       */
; 3178 :     VADR  fc_addr;              /* Function-Code - address           */
; 3179 : 
; 3180 :     VADR  fct_addr;             /* Function-code table address       */
; 3181 :     VADR  fct_page_no;          /* Function-Code Table - page number */
; 3182 :     VADR  fct_page_addr;        /* Function-Code TABLE - page addr   */
; 3183 : 
; 3184 :     VADR  fct_work_page_addr;   /* Work                              */
; 3185 :     VADR  fct_work_end_addr;    /* Work                              */
; 3186 : 
; 3187 :     CACHE_ALIGN                 /* FC Table - direct mainstor addrs  */
; 3188 :     BYTE* fct_main_page_addr[ FCT_REAL_MAX_PAGES ];
; 3189 : 
; 3190 :     /* Function Code Table Lengths lookup table indexed by 'm3' mask */
; 3191 : 
; 3192 :     static const int fct_table_lengths[ 8 ] =
; 3193 :     {                           /*      A   F   L       (index)      */
; 3194 :                                 /*    -------------    ---------     */
; 3195 :         256,                    /*      0   0   0          0         */
; 3196 :         256,                    /*      0   0   1          1         */
; 3197 :         512,                    /*      0   1   0          2         */
; 3198 :         512,                    /*      0   1   1          3         */
; 3199 :         64*1024,                /*      1   0   0          4         */
; 3200 :         256,                    /*      1   0   1          5         */
; 3201 :         128*1024,               /*      1   1   0          6         */
; 3202 :         512                     /*      1   1   1          7         */
; 3203 :     };
; 3204 : 
; 3205 :     RRF_M( inst, regs, r1, r2, m3 );

  0002c	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00034	e8 00 00 00 00	 call	 fetch_fw_noswap
  00039	8b c8		 mov	 ecx, eax
  0003b	e8 00 00 00 00	 call	 _byteswap_ulong
  00040	89 45 50	 mov	 DWORD PTR temp$1[rbp], eax
  00043	8b 45 50	 mov	 eax, DWORD PTR temp$1[rbp]
  00046	83 e0 0f	 and	 eax, 15
  00049	89 45 4c	 mov	 DWORD PTR r2$[rbp], eax
  0004c	8b 45 50	 mov	 eax, DWORD PTR temp$1[rbp]
  0004f	c1 e8 04	 shr	 eax, 4
  00052	83 e0 0f	 and	 eax, 15
  00055	89 45 14	 mov	 DWORD PTR r1$[rbp], eax
  00058	8b 45 50	 mov	 eax, DWORD PTR temp$1[rbp]
  0005b	c1 e8 0c	 shr	 eax, 12
  0005e	83 e0 0f	 and	 eax, 15
  00061	89 45 38	 mov	 DWORD PTR m3$[rbp], eax
$LN4@s370_trans:
  00064	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00070	48 83 c0 04	 add	 rax, 4
  00074	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00080	33 c0		 xor	 eax, eax
  00082	83 f8 04	 cmp	 eax, 4
  00085	74 0f		 je	 SHORT $LN10@s370_trans
  00087	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0008f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s370_trans:
  00096	33 c0		 xor	 eax, eax
  00098	85 c0		 test	 eax, eax
  0009a	75 c8		 jne	 SHORT $LN4@s370_trans

; 3206 :     PER_ZEROADDR_CHECK( regs, 1 );
; 3207 :     PER_ZEROADDR_LCHECK( regs, r1, r1+1 );
; 3208 : 
; 3209 :     TXFC_INSTR_CHECK( regs );
; 3210 : 
; 3211 :     a_bit = ((m3 & 0x08) ? true : false);

  0009c	8b 45 38	 mov	 eax, DWORD PTR m3$[rbp]
  0009f	83 e0 08	 and	 eax, 8
  000a2	85 c0		 test	 eax, eax
  000a4	74 0c		 je	 SHORT $LN37@s370_trans
  000a6	c7 85 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv81[rbp], 1
  000b0	eb 0a		 jmp	 SHORT $LN38@s370_trans
$LN37@s370_trans:
  000b2	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv81[rbp], 0
$LN38@s370_trans:
  000bc	83 bd 80 00 00
	00 00		 cmp	 DWORD PTR tv81[rbp], 0
  000c3	75 09		 jne	 SHORT $LN39@s370_trans
  000c5	c7 45 54 00 00
	00 00		 mov	 DWORD PTR tv83[rbp], 0
  000cc	eb 07		 jmp	 SHORT $LN40@s370_trans
$LN39@s370_trans:
  000ce	c7 45 54 01 00
	00 00		 mov	 DWORD PTR tv83[rbp], 1
$LN40@s370_trans:
  000d5	0f b6 45 54	 movzx	 eax, BYTE PTR tv83[rbp]
  000d9	88 45 04	 mov	 BYTE PTR a_bit$[rbp], al

; 3212 :     f_bit = ((m3 & 0x04) ? true : false);

  000dc	8b 45 38	 mov	 eax, DWORD PTR m3$[rbp]
  000df	83 e0 04	 and	 eax, 4
  000e2	85 c0		 test	 eax, eax
  000e4	74 09		 je	 SHORT $LN41@s370_trans
  000e6	c7 45 58 01 00
	00 00		 mov	 DWORD PTR tv87[rbp], 1
  000ed	eb 07		 jmp	 SHORT $LN42@s370_trans
$LN41@s370_trans:
  000ef	c7 45 58 00 00
	00 00		 mov	 DWORD PTR tv87[rbp], 0
$LN42@s370_trans:
  000f6	83 7d 58 00	 cmp	 DWORD PTR tv87[rbp], 0
  000fa	75 09		 jne	 SHORT $LN43@s370_trans
  000fc	c7 45 5c 00 00
	00 00		 mov	 DWORD PTR tv89[rbp], 0
  00103	eb 07		 jmp	 SHORT $LN44@s370_trans
$LN43@s370_trans:
  00105	c7 45 5c 01 00
	00 00		 mov	 DWORD PTR tv89[rbp], 1
$LN44@s370_trans:
  0010c	0f b6 45 5c	 movzx	 eax, BYTE PTR tv89[rbp]
  00110	88 45 1d	 mov	 BYTE PTR f_bit$[rbp], al

; 3213 :     l_bit = ((m3 & 0x02) ? true : false);

  00113	8b 45 38	 mov	 eax, DWORD PTR m3$[rbp]
  00116	83 e0 02	 and	 eax, 2
  00119	85 c0		 test	 eax, eax
  0011b	74 09		 je	 SHORT $LN45@s370_trans
  0011d	c7 45 60 01 00
	00 00		 mov	 DWORD PTR tv93[rbp], 1
  00124	eb 07		 jmp	 SHORT $LN46@s370_trans
$LN45@s370_trans:
  00126	c7 45 60 00 00
	00 00		 mov	 DWORD PTR tv93[rbp], 0
$LN46@s370_trans:
  0012d	83 7d 60 00	 cmp	 DWORD PTR tv93[rbp], 0
  00131	75 09		 jne	 SHORT $LN47@s370_trans
  00133	c7 45 64 00 00
	00 00		 mov	 DWORD PTR tv95[rbp], 0
  0013a	eb 07		 jmp	 SHORT $LN48@s370_trans
$LN47@s370_trans:
  0013c	c7 45 64 01 00
	00 00		 mov	 DWORD PTR tv95[rbp], 1
$LN48@s370_trans:
  00143	0f b6 45 64	 movzx	 eax, BYTE PTR tv95[rbp]
  00147	88 45 1c	 mov	 BYTE PTR l_bit$[rbp], al

; 3214 : 
; 3215 :     isReverse = (inst[1] == 0XBD);  // TRTRE instruction?

  0014a	b8 01 00 00 00	 mov	 eax, 1
  0014f	48 6b c0 01	 imul	 rax, rax, 1
  00153	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0015b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0015f	3d bd 00 00 00	 cmp	 eax, 189		; 000000bdH
  00164	75 09		 jne	 SHORT $LN49@s370_trans
  00166	c7 45 68 01 00
	00 00		 mov	 DWORD PTR tv133[rbp], 1
  0016d	eb 07		 jmp	 SHORT $LN50@s370_trans
$LN49@s370_trans:
  0016f	c7 45 68 00 00
	00 00		 mov	 DWORD PTR tv133[rbp], 0
$LN50@s370_trans:
  00176	83 7d 68 00	 cmp	 DWORD PTR tv133[rbp], 0
  0017a	75 09		 jne	 SHORT $LN51@s370_trans
  0017c	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR tv135[rbp], 0
  00183	eb 07		 jmp	 SHORT $LN52@s370_trans
$LN51@s370_trans:
  00185	c7 45 6c 01 00
	00 00		 mov	 DWORD PTR tv135[rbp], 1
$LN52@s370_trans:
  0018c	0f b6 45 6c	 movzx	 eax, BYTE PTR tv135[rbp]
  00190	88 45 05	 mov	 BYTE PTR isReverse$[rbp], al

; 3216 : 
; 3217 :     buf_addr = regs->GR( r1 ) & ADDRESS_MAXWRAP( regs );

  00193	48 63 45 14	 movsxd	 rax, DWORD PTR r1$[rbp]
  00197	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0019f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001a6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001ab	89 45 00	 mov	 DWORD PTR buf_addr$[rbp], eax

; 3218 :     buf_len  = GR_A( r1 + 1, regs );

  001ae	8b 45 14	 mov	 eax, DWORD PTR r1$[rbp]
  001b1	ff c0		 inc	 eax
  001b3	48 98		 cdqe
  001b5	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001bd	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001c4	89 45 10	 mov	 DWORD PTR buf_len$[rbp], eax

; 3219 : 
; 3220 :     if (unlikely((a_bit && (buf_len & 1)) || r1 & 0x01))

  001c7	0f b6 45 04	 movzx	 eax, BYTE PTR a_bit$[rbp]
  001cb	85 c0		 test	 eax, eax
  001cd	74 0a		 je	 SHORT $LN53@s370_trans
  001cf	8b 45 10	 mov	 eax, DWORD PTR buf_len$[rbp]
  001d2	83 e0 01	 and	 eax, 1
  001d5	85 c0		 test	 eax, eax
  001d7	75 13		 jne	 SHORT $LN54@s370_trans
$LN53@s370_trans:
  001d9	8b 45 14	 mov	 eax, DWORD PTR r1$[rbp]
  001dc	83 e0 01	 and	 eax, 1
  001df	85 c0		 test	 eax, eax
  001e1	75 09		 jne	 SHORT $LN54@s370_trans
  001e3	c7 45 70 00 00
	00 00		 mov	 DWORD PTR tv162[rbp], 0
  001ea	eb 07		 jmp	 SHORT $LN58@s370_trans
$LN54@s370_trans:
  001ec	c7 45 70 01 00
	00 00		 mov	 DWORD PTR tv162[rbp], 1
$LN58@s370_trans:
  001f3	83 7d 70 00	 cmp	 DWORD PTR tv162[rbp], 0
  001f7	74 1b		 je	 SHORT $LN11@s370_trans

; 3221 :         regs->program_interrupt( regs, PGM_SPECIFICATION_EXCEPTION );

  001f9	ba 06 00 00 00	 mov	 edx, 6
  001fe	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00206	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0020e	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_trans:

; 3222 : 
; 3223 :     /* Fast exit path */
; 3224 :     if (buf_len == 0)

  00214	83 7d 10 00	 cmp	 DWORD PTR buf_len$[rbp], 0
  00218	75 11		 jne	 SHORT $LN12@s370_trans

; 3225 :     {
; 3226 :         regs->psw.cc =  0;

  0021a	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00222	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 3227 :         return;

  00226	e9 66 04 00 00	 jmp	 $LN1@s370_trans
$LN12@s370_trans:

; 3228 :     }
; 3229 : 
; 3230 :     /* Initialize fct_... variables */
; 3231 : 
; 3232 :     fct_addr           = regs->GR( 1 ) & ADDRESS_MAXWRAP( regs );

  0022b	b8 08 00 00 00	 mov	 eax, 8
  00230	48 6b c0 01	 imul	 rax, rax, 1
  00234	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0023c	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00243	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00248	89 45 44	 mov	 DWORD PTR fct_addr$[rbp], eax

; 3233 :     fct_work_end_addr  = fct_addr + fct_table_lengths[ m3 >> 1 ];

  0024b	8b 45 38	 mov	 eax, DWORD PTR m3$[rbp]
  0024e	d1 f8		 sar	 eax, 1
  00250	48 98		 cdqe
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fct_table_lengths@?1??s370_translate_and_test_xxx_extended@@9@9
  00259	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0025c	8b 4d 44	 mov	 ecx, DWORD PTR fct_addr$[rbp]
  0025f	03 c8		 add	 ecx, eax
  00261	8b c1		 mov	 eax, ecx
  00263	89 85 84 00 00
	00		 mov	 DWORD PTR fct_work_end_addr$[rbp], eax

; 3234 :     fct_page_addr      = fct_addr & PAGEFRAME_PAGEMASK;

  00269	8b 45 44	 mov	 eax, DWORD PTR fct_addr$[rbp]
  0026c	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00271	89 45 74	 mov	 DWORD PTR fct_page_addr$[rbp], eax

; 3235 :     fct_page_no        = fct_page_addr >> PAGEFRAME_PAGESHIFT;

  00274	8b 45 74	 mov	 eax, DWORD PTR fct_page_addr$[rbp]
  00277	c1 e8 0b	 shr	 eax, 11
  0027a	89 45 30	 mov	 DWORD PTR fct_page_no$[rbp], eax

; 3236 :     fct_work_page_addr = fct_page_addr;

  0027d	8b 45 74	 mov	 eax, DWORD PTR fct_page_addr$[rbp]
  00280	89 45 3c	 mov	 DWORD PTR fct_work_page_addr$[rbp], eax

; 3237 : 
; 3238 :     /* Build function code table mainstor address table
; 3239 :        (but only for the pages that cover the FC table)
; 3240 :     */
; 3241 :     for (i=0; fct_work_page_addr < fct_work_end_addr; fct_work_page_addr += PAGEFRAME_PAGESIZE, ++i)

  00283	c7 45 48 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0028a	eb 13		 jmp	 SHORT $LN7@s370_trans
$LN5@s370_trans:
  0028c	8b 45 3c	 mov	 eax, DWORD PTR fct_work_page_addr$[rbp]
  0028f	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  00294	89 45 3c	 mov	 DWORD PTR fct_work_page_addr$[rbp], eax
  00297	8b 45 48	 mov	 eax, DWORD PTR i$[rbp]
  0029a	ff c0		 inc	 eax
  0029c	89 45 48	 mov	 DWORD PTR i$[rbp], eax
$LN7@s370_trans:
  0029f	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR fct_work_end_addr$[rbp]
  002a5	39 45 3c	 cmp	 DWORD PTR fct_work_page_addr$[rbp], eax
  002a8	73 48		 jae	 SHORT $LN6@s370_trans

; 3242 :     {
; 3243 :         fct_main_page_addr[i] = MADDRL( fct_work_page_addr & ADDRESS_MAXWRAP( regs ),

  002aa	8b 45 3c	 mov	 eax, DWORD PTR fct_work_page_addr$[rbp]
  002ad	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b2	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ba	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  002be	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002c2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  002ca	4c 8b 8c 24 98
	03 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002d2	41 b8 01 00 00
	00		 mov	 r8d, 1
  002d8	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  002dd	8b c8		 mov	 ecx, eax
  002df	e8 00 00 00 00	 call	 s370_maddr_l
  002e4	48 63 4d 48	 movsxd	 rcx, DWORD PTR i$[rbp]
  002e8	48 89 84 cd c0
	00 00 00	 mov	 QWORD PTR fct_main_page_addr$[rbp+rcx*8], rax

; 3244 :                                         PAGEFRAME_PAGESIZE, 1, regs, ACCTYPE_READ,
; 3245 :                                         regs->psw.pkey );
; 3246 :     }

  002f0	eb 9a		 jmp	 SHORT $LN5@s370_trans
$LN6@s370_trans:

; 3247 : 
; 3248 :     /*  Determine CC=3 length:
; 3249 : 
; 3250 :         POP : SA22-7832-13 Page 7-418:
; 3251 : 
; 3252 :            "The amount of processing that results in the setting
; 3253 :             of condition code 3 is determined by the CPU on the
; 3254 :             basis of improving system performance, and it may
; 3255 :             be a different amount each time the instruction is
; 3256 :             executed."
; 3257 : 
; 3258 :         CC=3 :  Processed first operand to end of page and
; 3259 :                 indicate more data remaining.
; 3260 :     */
; 3261 : 
; 3262 :     /* Get on-page maximum process length */
; 3263 :     if (isReverse)

  002f2	0f b6 45 05	 movzx	 eax, BYTE PTR isReverse$[rbp]
  002f6	85 c0		 test	 eax, eax
  002f8	74 0f		 je	 SHORT $LN13@s370_trans

; 3264 :         /* TRTRE instruction */
; 3265 :         max_process = (buf_addr & PAGEFRAME_BYTEMASK) + 1;

  002fa	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  002fd	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00302	ff c0		 inc	 eax
  00304	89 45 78	 mov	 DWORD PTR max_process$[rbp], eax
  00307	eb 14		 jmp	 SHORT $LN14@s370_trans
$LN13@s370_trans:

; 3266 :     else
; 3267 :         /* TRTE instruction */
; 3268 :         max_process = PAGEFRAME_PAGESIZE - ( buf_addr & PAGEFRAME_BYTEMASK );

  00309	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  0030c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00311	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00316	2b c8		 sub	 ecx, eax
  00318	8b c1		 mov	 eax, ecx
  0031a	89 45 78	 mov	 DWORD PTR max_process$[rbp], eax
$LN14@s370_trans:

; 3269 : 
; 3270 :     /* Get buffer mainstor address - a bit = 1 page cross checked later */
; 3271 :     buf_main_addr = MADDRL( buf_addr, 1, r1, regs, ACCTYPE_READ, regs->psw.pkey );

  0031d	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00325	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00329	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0032d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00335	4c 8b 8c 24 98
	03 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0033d	44 8b 45 14	 mov	 r8d, DWORD PTR r1$[rbp]
  00341	ba 01 00 00 00	 mov	 edx, 1
  00346	8b 4d 00	 mov	 ecx, DWORD PTR buf_addr$[rbp]
  00349	e8 00 00 00 00	 call	 s370_maddr_l
  0034e	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3272 : 
; 3273 :     fc = 0;

  00352	c7 45 18 00 00
	00 00		 mov	 DWORD PTR fc$[rbp], 0

; 3274 :     processed = 0;

  00359	c7 45 34 00 00
	00 00		 mov	 DWORD PTR processed$[rbp], 0
$LN8@s370_trans:

; 3275 :     while (buf_len && !fc && processed < max_process)

  00360	83 7d 10 00	 cmp	 DWORD PTR buf_len$[rbp], 0
  00364	0f 84 7f 02 00
	00		 je	 $LN9@s370_trans
  0036a	83 7d 18 00	 cmp	 DWORD PTR fc$[rbp], 0
  0036e	0f 85 75 02 00
	00		 jne	 $LN9@s370_trans
  00374	8b 45 78	 mov	 eax, DWORD PTR max_process$[rbp]
  00377	39 45 34	 cmp	 DWORD PTR processed$[rbp], eax
  0037a	0f 8d 69 02 00
	00		 jge	 $LN9@s370_trans

; 3276 :     {
; 3277 :         if (a_bit)

  00380	0f b6 45 04	 movzx	 eax, BYTE PTR a_bit$[rbp]
  00384	85 c0		 test	 eax, eax
  00386	0f 84 81 00 00
	00		 je	 $LN15@s370_trans

; 3278 :         {
; 3279 :             /* Does arg cross page boundary? (last byte of page?) */
; 3280 :             if ((buf_addr & PAGEFRAME_BYTEMASK) == PAGEFRAME_BYTEMASK)

  0038c	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  0038f	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00394	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  00399	75 49		 jne	 SHORT $LN17@s370_trans

; 3281 :             {
; 3282 :                 /* Yes! Piece together the argument */
; 3283 :                 temp_h  =  *buf_main_addr;

  0039b	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  0039f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003a2	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3284 :                 temp_l  =  *MADDRL( buf_addr+1, 1 , r1, regs, ACCTYPE_READ, regs->psw.pkey );

  003a6	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  003a9	ff c0		 inc	 eax
  003ab	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003b3	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  003b7	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  003bb	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003c3	4c 8b 8c 24 98
	03 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003cb	44 8b 45 14	 mov	 r8d, DWORD PTR r1$[rbp]
  003cf	ba 01 00 00 00	 mov	 edx, 1
  003d4	8b c8		 mov	 ecx, eax
  003d6	e8 00 00 00 00	 call	 s370_maddr_l
  003db	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003de	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax

; 3285 :             }

  003e2	eb 17		 jmp	 SHORT $LN18@s370_trans
$LN17@s370_trans:

; 3286 :             else
; 3287 :             {
; 3288 :                 // the following fails on sparc 64 : alignment
; 3289 :                 // arg_ch = CSWAP16( *(U16*) buf_main_addr );
; 3290 :                 // so
; 3291 :                 temp_h  =  *(buf_main_addr +0);

  003e4	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  003e8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003eb	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3292 :                 temp_l  =  *(buf_main_addr +1);

  003ef	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  003f3	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  003f7	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax
$LN18@s370_trans:

; 3293 :             }
; 3294 :             arg_ch  =   (temp_h << 8) | temp_l;

  003fb	0f b7 45 08	 movzx	 eax, WORD PTR temp_h$[rbp]
  003ff	c1 e0 08	 shl	 eax, 8
  00402	0f b7 4d 0c	 movzx	 ecx, WORD PTR temp_l$[rbp]
  00406	0b c1		 or	 eax, ecx
  00408	89 45 40	 mov	 DWORD PTR arg_ch$[rbp], eax

; 3295 :         }

  0040b	eb 0a		 jmp	 SHORT $LN16@s370_trans
$LN15@s370_trans:

; 3296 :         else
; 3297 :         {
; 3298 :             arg_ch = *buf_main_addr;

  0040d	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  00411	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00414	89 45 40	 mov	 DWORD PTR arg_ch$[rbp], eax
$LN16@s370_trans:

; 3299 :         }
; 3300 : 
; 3301 :         if (l_bit && arg_ch > 255)

  00417	0f b6 45 1c	 movzx	 eax, BYTE PTR l_bit$[rbp]
  0041b	85 c0		 test	 eax, eax
  0041d	74 15		 je	 SHORT $LN19@s370_trans
  0041f	81 7d 40 ff 00
	00 00		 cmp	 DWORD PTR arg_ch$[rbp], 255 ; 000000ffH
  00426	76 0c		 jbe	 SHORT $LN19@s370_trans

; 3302 :             fc = 0;

  00428	c7 45 18 00 00
	00 00		 mov	 DWORD PTR fc$[rbp], 0
  0042f	e9 0b 01 00 00	 jmp	 $LN20@s370_trans
$LN19@s370_trans:

; 3303 :         else
; 3304 :         {
; 3305 :             if (f_bit)

  00434	0f b6 45 1d	 movzx	 eax, BYTE PTR f_bit$[rbp]
  00438	85 c0		 test	 eax, eax
  0043a	0f 84 c3 00 00
	00		 je	 $LN21@s370_trans

; 3306 :             {
; 3307 :                 fc_addr    = fct_addr + (arg_ch * 2);

  00440	8b 45 44	 mov	 eax, DWORD PTR fct_addr$[rbp]
  00443	8b 4d 40	 mov	 ecx, DWORD PTR arg_ch$[rbp]
  00446	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  00449	89 45 20	 mov	 DWORD PTR fc_addr$[rbp], eax

; 3308 :                 fc_page_no = fc_addr >> PAGEFRAME_PAGESHIFT;

  0044c	8b 45 20	 mov	 eax, DWORD PTR fc_addr$[rbp]
  0044f	c1 e8 0b	 shr	 eax, 11
  00452	89 45 24	 mov	 DWORD PTR fc_page_no$[rbp], eax

; 3309 : 
; 3310 :                 /* NOTE: The user *should* have specified a double-word
; 3311 :                          aligned FC table address, but since they might
; 3312 :                          not have, we still need to always perform the
; 3313 :                          below check. */
; 3314 : 
; 3315 :                 /* Does FC cross page boundary? (last byte of page?) */
; 3316 :                 if ((fc_addr & PAGEFRAME_BYTEMASK) == PAGEFRAME_BYTEMASK)

  00455	8b 45 20	 mov	 eax, DWORD PTR fc_addr$[rbp]
  00458	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0045d	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  00462	75 3e		 jne	 SHORT $LN23@s370_trans

; 3317 :                 {
; 3318 :                     /* Yes! Piece together the FC */
; 3319 :                     temp_h  =  *(fct_main_page_addr[ fc_page_no - fct_page_no + 0 ] + PAGEFRAME_BYTEMASK ); // (last byte of page)

  00464	8b 45 30	 mov	 eax, DWORD PTR fct_page_no$[rbp]
  00467	8b 4d 24	 mov	 ecx, DWORD PTR fc_page_no$[rbp]
  0046a	2b c8		 sub	 ecx, eax
  0046c	8b c1		 mov	 eax, ecx
  0046e	8b c0		 mov	 eax, eax
  00470	48 8b 84 c5 c0
	00 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  00478	0f b6 80 ff 07
	00 00		 movzx	 eax, BYTE PTR [rax+2047]
  0047f	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3320 :                     temp_l  =  *(fct_main_page_addr[ fc_page_no - fct_page_no + 1 ] );                      // (first byte of next page)

  00483	8b 45 30	 mov	 eax, DWORD PTR fct_page_no$[rbp]
  00486	8b 4d 24	 mov	 ecx, DWORD PTR fc_page_no$[rbp]
  00489	2b c8		 sub	 ecx, eax
  0048b	8b c1		 mov	 eax, ecx
  0048d	ff c0		 inc	 eax
  0048f	8b c0		 mov	 eax, eax
  00491	48 8b 84 c5 c0
	00 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  00499	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0049c	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax

; 3321 :                 }

  004a0	eb 4f		 jmp	 SHORT $LN24@s370_trans
$LN23@s370_trans:

; 3322 :                 else
; 3323 :                 {
; 3324 :                     // fc =  CSWAP16( *(U16*) (fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK)));
; 3325 :                     temp_h  =  *( fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK) +0 );

  004a2	8b 45 30	 mov	 eax, DWORD PTR fct_page_no$[rbp]
  004a5	8b 4d 24	 mov	 ecx, DWORD PTR fc_page_no$[rbp]
  004a8	2b c8		 sub	 ecx, eax
  004aa	8b c1		 mov	 eax, ecx
  004ac	8b c0		 mov	 eax, eax
  004ae	8b 4d 20	 mov	 ecx, DWORD PTR fc_addr$[rbp]
  004b1	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  004b7	8b c9		 mov	 ecx, ecx
  004b9	48 8b 84 c5 c0
	00 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  004c1	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  004c5	66 89 45 08	 mov	 WORD PTR temp_h$[rbp], ax

; 3326 :                     temp_l  =  *( fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK) +1 );

  004c9	8b 45 30	 mov	 eax, DWORD PTR fct_page_no$[rbp]
  004cc	8b 4d 24	 mov	 ecx, DWORD PTR fc_page_no$[rbp]
  004cf	2b c8		 sub	 ecx, eax
  004d1	8b c1		 mov	 eax, ecx
  004d3	8b c0		 mov	 eax, eax
  004d5	8b 4d 20	 mov	 ecx, DWORD PTR fc_addr$[rbp]
  004d8	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  004de	8b c9		 mov	 ecx, ecx
  004e0	48 8b 84 c5 c0
	00 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  004e8	0f b6 44 08 01	 movzx	 eax, BYTE PTR [rax+rcx+1]
  004ed	66 89 45 0c	 mov	 WORD PTR temp_l$[rbp], ax
$LN24@s370_trans:

; 3327 :                 }
; 3328 :                 fc  =   (temp_h << 8) | temp_l;

  004f1	0f b7 45 08	 movzx	 eax, WORD PTR temp_h$[rbp]
  004f5	c1 e0 08	 shl	 eax, 8
  004f8	0f b7 4d 0c	 movzx	 ecx, WORD PTR temp_l$[rbp]
  004fc	0b c1		 or	 eax, ecx
  004fe	89 45 18	 mov	 DWORD PTR fc$[rbp], eax

; 3329 :             }

  00501	eb 3c		 jmp	 SHORT $LN22@s370_trans
$LN21@s370_trans:

; 3330 :             else
; 3331 :             {
; 3332 :                 fc_addr     =  fct_addr + arg_ch;

  00503	8b 45 40	 mov	 eax, DWORD PTR arg_ch$[rbp]
  00506	8b 4d 44	 mov	 ecx, DWORD PTR fct_addr$[rbp]
  00509	03 c8		 add	 ecx, eax
  0050b	8b c1		 mov	 eax, ecx
  0050d	89 45 20	 mov	 DWORD PTR fc_addr$[rbp], eax

; 3333 :                 fc_page_no  =  fc_addr >> PAGEFRAME_PAGESHIFT;

  00510	8b 45 20	 mov	 eax, DWORD PTR fc_addr$[rbp]
  00513	c1 e8 0b	 shr	 eax, 11
  00516	89 45 24	 mov	 DWORD PTR fc_page_no$[rbp], eax

; 3334 :                 fc          =  *(fct_main_page_addr[ fc_page_no - fct_page_no ] + (fc_addr & PAGEFRAME_BYTEMASK));

  00519	8b 45 30	 mov	 eax, DWORD PTR fct_page_no$[rbp]
  0051c	8b 4d 24	 mov	 ecx, DWORD PTR fc_page_no$[rbp]
  0051f	2b c8		 sub	 ecx, eax
  00521	8b c1		 mov	 eax, ecx
  00523	8b c0		 mov	 eax, eax
  00525	8b 4d 20	 mov	 ecx, DWORD PTR fc_addr$[rbp]
  00528	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  0052e	8b c9		 mov	 ecx, ecx
  00530	48 8b 84 c5 c0
	00 00 00	 mov	 rax, QWORD PTR fct_main_page_addr$[rbp+rax*8]
  00538	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0053c	89 45 18	 mov	 DWORD PTR fc$[rbp], eax
$LN22@s370_trans:
$LN20@s370_trans:

; 3335 :             }
; 3336 :         }
; 3337 : 
; 3338 :         if (!fc)

  0053f	83 7d 18 00	 cmp	 DWORD PTR fc$[rbp], 0
  00543	0f 85 9b 00 00
	00		 jne	 $LN25@s370_trans

; 3339 :         {
; 3340 :             if (a_bit)

  00549	0f b6 45 04	 movzx	 eax, BYTE PTR a_bit$[rbp]
  0054d	85 c0		 test	 eax, eax
  0054f	74 48		 je	 SHORT $LN26@s370_trans

; 3341 :             {
; 3342 :                 processed          +=  2;

  00551	8b 45 34	 mov	 eax, DWORD PTR processed$[rbp]
  00554	83 c0 02	 add	 eax, 2
  00557	89 45 34	 mov	 DWORD PTR processed$[rbp], eax

; 3343 :                 buf_len            -=  2;

  0055a	8b 45 10	 mov	 eax, DWORD PTR buf_len$[rbp]
  0055d	83 e8 02	 sub	 eax, 2
  00560	89 45 10	 mov	 DWORD PTR buf_len$[rbp], eax

; 3344 : 
; 3345 :                 if (isReverse)

  00563	0f b6 45 05	 movzx	 eax, BYTE PTR isReverse$[rbp]
  00567	85 c0		 test	 eax, eax
  00569	74 17		 je	 SHORT $LN28@s370_trans

; 3346 :                 {
; 3347 :                     buf_main_addr  -=  2;

  0056b	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  0056f	48 83 e8 02	 sub	 rax, 2
  00573	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3348 :                     buf_addr       -=  2;

  00577	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  0057a	83 e8 02	 sub	 eax, 2
  0057d	89 45 00	 mov	 DWORD PTR buf_addr$[rbp], eax

; 3349 :                 }

  00580	eb 15		 jmp	 SHORT $LN29@s370_trans
$LN28@s370_trans:

; 3350 :                 else
; 3351 :                 {
; 3352 :                     buf_main_addr  +=  2;

  00582	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  00586	48 83 c0 02	 add	 rax, 2
  0058a	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3353 :                     buf_addr       +=  2;

  0058e	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  00591	83 c0 02	 add	 eax, 2
  00594	89 45 00	 mov	 DWORD PTR buf_addr$[rbp], eax
$LN29@s370_trans:

; 3354 :                 }
; 3355 :             }

  00597	eb 40		 jmp	 SHORT $LN27@s370_trans
$LN26@s370_trans:

; 3356 :             else
; 3357 :             {
; 3358 :                 processed          +=  1;

  00599	8b 45 34	 mov	 eax, DWORD PTR processed$[rbp]
  0059c	ff c0		 inc	 eax
  0059e	89 45 34	 mov	 DWORD PTR processed$[rbp], eax

; 3359 :                 buf_len            -=  1;

  005a1	8b 45 10	 mov	 eax, DWORD PTR buf_len$[rbp]
  005a4	ff c8		 dec	 eax
  005a6	89 45 10	 mov	 DWORD PTR buf_len$[rbp], eax

; 3360 : 
; 3361 :                 if (isReverse)

  005a9	0f b6 45 05	 movzx	 eax, BYTE PTR isReverse$[rbp]
  005ad	85 c0		 test	 eax, eax
  005af	74 15		 je	 SHORT $LN30@s370_trans

; 3362 :                 {
; 3363 :                     buf_main_addr  -=  1;

  005b1	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  005b5	48 ff c8	 dec	 rax
  005b8	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3364 :                     buf_addr       -=  1;

  005bc	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  005bf	ff c8		 dec	 eax
  005c1	89 45 00	 mov	 DWORD PTR buf_addr$[rbp], eax

; 3365 :                 }

  005c4	eb 13		 jmp	 SHORT $LN31@s370_trans
$LN30@s370_trans:

; 3366 :                 else
; 3367 :                 {
; 3368 :                     buf_main_addr  +=  1;

  005c6	48 8b 45 28	 mov	 rax, QWORD PTR buf_main_addr$[rbp]
  005ca	48 ff c0	 inc	 rax
  005cd	48 89 45 28	 mov	 QWORD PTR buf_main_addr$[rbp], rax

; 3369 :                     buf_addr       +=  1;

  005d1	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  005d4	ff c0		 inc	 eax
  005d6	89 45 00	 mov	 DWORD PTR buf_addr$[rbp], eax
$LN31@s370_trans:
$LN27@s370_trans:

; 3370 :                 }
; 3371 :             }
; 3372 : 
; 3373 :             buf_addr &= ADDRESS_MAXWRAP( regs );

  005d9	8b 45 00	 mov	 eax, DWORD PTR buf_addr$[rbp]
  005dc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005e1	89 45 00	 mov	 DWORD PTR buf_addr$[rbp], eax
$LN25@s370_trans:

; 3374 :         }
; 3375 :     } /* end while */

  005e4	e9 77 fd ff ff	 jmp	 $LN8@s370_trans
$LN9@s370_trans:

; 3376 : 
; 3377 :     /* Commit registers */
; 3378 :     SET_GR_A( r1 + 0, regs, buf_addr );

  005e9	8b 45 14	 mov	 eax, DWORD PTR r1$[rbp]
  005ec	48 98		 cdqe
  005ee	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005f6	8b 55 00	 mov	 edx, DWORD PTR buf_addr$[rbp]
  005f9	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 3379 :     SET_GR_A( r1 + 1, regs, buf_len );

  00600	8b 45 14	 mov	 eax, DWORD PTR r1$[rbp]
  00603	ff c0		 inc	 eax
  00605	48 98		 cdqe
  00607	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0060f	8b 55 10	 mov	 edx, DWORD PTR buf_len$[rbp]
  00612	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 3380 : 
; 3381 :     /* Check if CPU determined number of bytes have been processed */
; 3382 :     if (buf_len && !fc)

  00619	83 7d 10 00	 cmp	 DWORD PTR buf_len$[rbp], 0
  0061d	74 14		 je	 SHORT $LN32@s370_trans
  0061f	83 7d 18 00	 cmp	 DWORD PTR fc$[rbp], 0
  00623	75 0e		 jne	 SHORT $LN32@s370_trans

; 3383 :     {
; 3384 :         regs->psw.cc = 3;

  00625	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0062d	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 3385 :         return;

  00631	eb 5e		 jmp	 SHORT $LN1@s370_trans
$LN32@s370_trans:

; 3386 :     }
; 3387 : 
; 3388 :     /* Set function code */
; 3389 :     if (likely(r2 != r1 && r2 != (r1 + 1)))

  00633	8b 45 14	 mov	 eax, DWORD PTR r1$[rbp]
  00636	39 45 4c	 cmp	 DWORD PTR r2$[rbp], eax
  00639	74 13		 je	 SHORT $LN59@s370_trans
  0063b	8b 45 14	 mov	 eax, DWORD PTR r1$[rbp]
  0063e	ff c0		 inc	 eax
  00640	39 45 4c	 cmp	 DWORD PTR r2$[rbp], eax
  00643	74 09		 je	 SHORT $LN59@s370_trans
  00645	c7 45 7c 01 00
	00 00		 mov	 DWORD PTR tv335[rbp], 1
  0064c	eb 07		 jmp	 SHORT $LN62@s370_trans
$LN59@s370_trans:
  0064e	c7 45 7c 00 00
	00 00		 mov	 DWORD PTR tv335[rbp], 0
$LN62@s370_trans:
  00655	83 7d 7c 00	 cmp	 DWORD PTR tv335[rbp], 0
  00659	74 16		 je	 SHORT $LN33@s370_trans

; 3390 :         SET_GR_A( r2, regs, fc );

  0065b	48 63 45 4c	 movsxd	 rax, DWORD PTR r2$[rbp]
  0065f	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00667	8b 55 18	 mov	 edx, DWORD PTR fc$[rbp]
  0066a	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN33@s370_trans:

; 3391 : 
; 3392 :     /* Set condition code */
; 3393 :     if (fc)

  00671	83 7d 18 00	 cmp	 DWORD PTR fc$[rbp], 0
  00675	74 0e		 je	 SHORT $LN34@s370_trans

; 3394 :         regs->psw.cc = 1;

  00677	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0067f	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1
  00683	eb 0c		 jmp	 SHORT $LN35@s370_trans
$LN34@s370_trans:

; 3395 :     else
; 3396 :         regs->psw.cc = 0;

  00685	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0068d	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN35@s370_trans:
$LN1@s370_trans:

; 3397 : }

  00691	48 8b 8d 00 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00698	48 33 cc	 xor	 rcx, rsp
  0069b	e8 00 00 00 00	 call	 __security_check_cookie
  006a0	48 81 c4 80 03
	00 00		 add	 rsp, 896		; 00000380H
  006a7	5d		 pop	 rbp
  006a8	c3		 ret	 0
s370_translate_and_test_xxx_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_validate_operand
_TEXT	SEGMENT
tv79 = 48
tv94 = 52
tv138 = 56
addr$ = 80
arn$ = 88
len$ = 96
acctype$ = 104
regs$ = 112
s370_validate_operand PROC				; COMDAT

; 1376 : {

$LN24:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1377 :     /* Translate address of leftmost operand byte */
; 1378 :     MADDR( addr, arn, regs, acctype, regs->psw.pkey );

  00016	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00023	8b 44 24 68	 mov	 eax, DWORD PTR acctype$[rsp]
  00027	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0002b	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  00030	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  0003e	e8 00 00 00 00	 call	 s370_maddr_l

; 1379 : 
; 1380 :     /* Translate next page if boundary crossed */
; 1381 :     if (CROSSPAGE( addr, len ))

  00043	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00047	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0004c	b9 ff 07 00 00	 mov	 ecx, 2047		; 000007ffH
  00051	2b 4c 24 60	 sub	 ecx, DWORD PTR len$[rsp]
  00055	3b c1		 cmp	 eax, ecx
  00057	7e 0a		 jle	 SHORT $LN11@s370_valid
  00059	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  00061	eb 08		 jmp	 SHORT $LN12@s370_valid
$LN11@s370_valid:
  00063	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN12@s370_valid:
  0006b	83 7c 24 30 00	 cmp	 DWORD PTR tv79[rsp], 0
  00070	74 3e		 je	 SHORT $LN5@s370_valid

; 1382 :     {
; 1383 :         MADDR( (addr + len) & ADDRESS_MAXWRAP( regs ),

  00072	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  00076	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  0007a	03 c8		 add	 ecx, eax
  0007c	8b c1		 mov	 eax, ecx
  0007e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00083	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  00088	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0008c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00090	8b 4c 24 68	 mov	 ecx, DWORD PTR acctype$[rsp]
  00094	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00098	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  0009d	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  000a2	ba 01 00 00 00	 mov	 edx, 1
  000a7	8b c8		 mov	 ecx, eax
  000a9	e8 00 00 00 00	 call	 s370_maddr_l

; 1384 :                arn, regs, acctype, regs->psw.pkey );
; 1385 :     }

  000ae	eb 5a		 jmp	 SHORT $LN6@s370_valid
$LN5@s370_valid:
$LN4@s370_valid:

; 1386 : #if defined( FEATURE_INTERVAL_TIMER )
; 1387 :     else
; 1388 :         ITIMER_SYNC( addr, len, regs );

  000b0	83 7c 24 50 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  000b5	73 0a		 jae	 SHORT $LN15@s370_valid
  000b7	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  000bf	eb 08		 jmp	 SHORT $LN16@s370_valid
$LN15@s370_valid:
  000c1	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN16@s370_valid:
  000c9	83 7c 24 34 00	 cmp	 DWORD PTR tv94[rsp], 0
  000ce	74 1b		 je	 SHORT $LN17@s370_valid
  000d0	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  000d4	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  000d8	03 c8		 add	 ecx, eax
  000da	8b c1		 mov	 eax, ecx
  000dc	83 f8 50	 cmp	 eax, 80			; 00000050H
  000df	72 0a		 jb	 SHORT $LN17@s370_valid
  000e1	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  000e9	eb 08		 jmp	 SHORT $LN23@s370_valid
$LN17@s370_valid:
  000eb	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN23@s370_valid:
  000f3	83 7c 24 38 00	 cmp	 DWORD PTR tv138[rsp], 0
  000f8	74 0a		 je	 SHORT $LN7@s370_valid
  000fa	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  000ff	e8 00 00 00 00	 call	 s370_store_int_timer
$LN7@s370_valid:
  00104	33 c0		 xor	 eax, eax
  00106	85 c0		 test	 eax, eax
  00108	75 a6		 jne	 SHORT $LN4@s370_valid
$LN6@s370_valid:

; 1389 : #endif
; 1390 : }

  0010a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010e	c3		 ret	 0
s370_validate_operand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv80 = 56
tv92 = 60
mn$1 = 64
addr$ = 96
arn$ = 104
regs$ = 112
s370_vfetch4 PROC					; COMDAT

; 695  : {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 696  :     if ((likely(!((VADR_L)addr & 0x03))
; 697  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3) )))

  00011	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00015	83 e0 03	 and	 eax, 3
  00018	85 c0		 test	 eax, eax
  0001a	75 0a		 jne	 SHORT $LN9@s370_vfetc
  0001c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00024	eb 08		 jmp	 SHORT $LN10@s370_vfetc
$LN9@s370_vfetc:
  00026	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN10@s370_vfetc:
  0002e	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00033	74 0a		 je	 SHORT $LN13@s370_vfetc
  00035	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0003d	eb 08		 jmp	 SHORT $LN14@s370_vfetc
$LN13@s370_vfetc:
  0003f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN14@s370_vfetc:
  00047	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  0004c	75 14		 jne	 SHORT $LN6@s370_vfetc
  0004e	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00052	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00057	3d fc 07 00 00	 cmp	 eax, 2044		; 000007fcH
  0005c	0f 87 9a 00 00
	00		 ja	 $LN5@s370_vfetc
$LN6@s370_vfetc:
$LN4@s370_vfetc:

; 698  :     {
; 699  :         BYTE *mn;
; 700  :         ITIMER_SYNC( addr, 4-1, regs );

  00062	83 7c 24 60 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00067	73 0a		 jae	 SHORT $LN17@s370_vfetc
  00069	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00071	eb 08		 jmp	 SHORT $LN18@s370_vfetc
$LN17@s370_vfetc:
  00073	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN18@s370_vfetc:
  0007b	83 7c 24 38 00	 cmp	 DWORD PTR tv80[rsp], 0
  00080	74 16		 je	 SHORT $LN19@s370_vfetc
  00082	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00086	83 c0 03	 add	 eax, 3
  00089	83 f8 50	 cmp	 eax, 80			; 00000050H
  0008c	72 0a		 jb	 SHORT $LN19@s370_vfetc
  0008e	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  00096	eb 08		 jmp	 SHORT $LN25@s370_vfetc
$LN19@s370_vfetc:
  00098	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN25@s370_vfetc:
  000a0	83 7c 24 3c 00	 cmp	 DWORD PTR tv92[rsp], 0
  000a5	74 0a		 je	 SHORT $LN7@s370_vfetc
  000a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  000ac	e8 00 00 00 00	 call	 s370_store_int_timer
$LN7@s370_vfetc:
  000b1	33 c0		 xor	 eax, eax
  000b3	85 c0		 test	 eax, eax
  000b5	75 ab		 jne	 SHORT $LN4@s370_vfetc

; 701  :         mn = MADDRL( addr, 4,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  000b7	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  000bc	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000c0	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c4	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000cc	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  000d1	44 8b 44 24 68	 mov	 r8d, DWORD PTR arn$[rsp]
  000d6	ba 04 00 00 00	 mov	 edx, 4
  000db	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  000df	e8 00 00 00 00	 call	 s370_maddr_l
  000e4	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 702  :         return fetch_fw( mn );

  000e9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  000ee	e8 00 00 00 00	 call	 fetch_fw_noswap
  000f3	8b c8		 mov	 ecx, eax
  000f5	e8 00 00 00 00	 call	 _byteswap_ulong
  000fa	eb 12		 jmp	 SHORT $LN1@s370_vfetc
$LN5@s370_vfetc:

; 703  :     }
; 704  :     return ARCH_DEP( vfetch4_full )( addr, arn, regs );

  000fc	4c 8b 44 24 70	 mov	 r8, QWORD PTR regs$[rsp]
  00101	8b 54 24 68	 mov	 edx, DWORD PTR arn$[rsp]
  00105	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  00109	e8 00 00 00 00	 call	 s370_vfetch4_full
$LN1@s370_vfetc:

; 705  : }

  0010e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00112	c3		 ret	 0
s370_vfetch4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch2
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv80 = 56
tv92 = 60
mn$1 = 64
addr$ = 96
arn$ = 104
regs$ = 112
s370_vfetch2 PROC					; COMDAT

; 679  : {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 680  :     if (likely(!((VADR_L)addr & 0x01))
; 681  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK ))

  00011	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00015	83 e0 01	 and	 eax, 1
  00018	85 c0		 test	 eax, eax
  0001a	75 0a		 jne	 SHORT $LN9@s370_vfetc
  0001c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00024	eb 08		 jmp	 SHORT $LN10@s370_vfetc
$LN9@s370_vfetc:
  00026	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN10@s370_vfetc:
  0002e	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00033	74 0a		 je	 SHORT $LN13@s370_vfetc
  00035	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0003d	eb 08		 jmp	 SHORT $LN14@s370_vfetc
$LN13@s370_vfetc:
  0003f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN14@s370_vfetc:
  00047	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  0004c	75 14		 jne	 SHORT $LN6@s370_vfetc
  0004e	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00052	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00057	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  0005c	0f 84 9a 00 00
	00		 je	 $LN5@s370_vfetc
$LN6@s370_vfetc:
$LN4@s370_vfetc:

; 682  :     {
; 683  :         BYTE *mn;
; 684  :         ITIMER_SYNC( addr, 2-1, regs );

  00062	83 7c 24 60 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00067	73 0a		 jae	 SHORT $LN17@s370_vfetc
  00069	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00071	eb 08		 jmp	 SHORT $LN18@s370_vfetc
$LN17@s370_vfetc:
  00073	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN18@s370_vfetc:
  0007b	83 7c 24 38 00	 cmp	 DWORD PTR tv80[rsp], 0
  00080	74 15		 je	 SHORT $LN19@s370_vfetc
  00082	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00086	ff c0		 inc	 eax
  00088	83 f8 50	 cmp	 eax, 80			; 00000050H
  0008b	72 0a		 jb	 SHORT $LN19@s370_vfetc
  0008d	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  00095	eb 08		 jmp	 SHORT $LN25@s370_vfetc
$LN19@s370_vfetc:
  00097	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN25@s370_vfetc:
  0009f	83 7c 24 3c 00	 cmp	 DWORD PTR tv92[rsp], 0
  000a4	74 0a		 je	 SHORT $LN7@s370_vfetc
  000a6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_store_int_timer
$LN7@s370_vfetc:
  000b0	33 c0		 xor	 eax, eax
  000b2	85 c0		 test	 eax, eax
  000b4	75 ac		 jne	 SHORT $LN4@s370_vfetc

; 685  :         mn = MADDRL( addr, 2,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  000b6	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  000bb	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000bf	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c3	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000cb	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  000d0	44 8b 44 24 68	 mov	 r8d, DWORD PTR arn$[rsp]
  000d5	ba 02 00 00 00	 mov	 edx, 2
  000da	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  000de	e8 00 00 00 00	 call	 s370_maddr_l
  000e3	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 686  :         return fetch_hw( mn );

  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  000ed	e8 00 00 00 00	 call	 fetch_hw_noswap
  000f2	0f b7 c8	 movzx	 ecx, ax
  000f5	e8 00 00 00 00	 call	 _byteswap_ushort
  000fa	eb 12		 jmp	 SHORT $LN1@s370_vfetc
$LN5@s370_vfetc:

; 687  :     }
; 688  :     return ARCH_DEP( vfetch2_full )( addr, arn, regs );

  000fc	4c 8b 44 24 70	 mov	 r8, QWORD PTR regs$[rsp]
  00101	8b 54 24 68	 mov	 edx, DWORD PTR arn$[rsp]
  00105	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  00109	e8 00 00 00 00	 call	 s370_vfetch2_full
$LN1@s370_vfetc:

; 689  : }

  0010e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00112	c3		 ret	 0
s370_vfetch2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetchb
_TEXT	SEGMENT
tv68 = 48
tv78 = 52
mn$ = 56
addr$ = 80
arn$ = 88
regs$ = 96
s370_vfetchb PROC					; COMDAT

; 667  : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370_vfetc:

; 668  : BYTE   *mn;                             /* Main storage address      */
; 669  : 
; 670  :     ITIMER_SYNC( addr, 1-1, regs );

  00011	83 7c 24 50 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00016	73 0a		 jae	 SHORT $LN9@s370_vfetc
  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00020	eb 08		 jmp	 SHORT $LN10@s370_vfetc
$LN9@s370_vfetc:
  00022	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN10@s370_vfetc:
  0002a	83 7c 24 30 00	 cmp	 DWORD PTR tv68[rsp], 0
  0002f	74 11		 je	 SHORT $LN11@s370_vfetc
  00031	83 7c 24 50 50	 cmp	 DWORD PTR addr$[rsp], 80 ; 00000050H
  00036	72 0a		 jb	 SHORT $LN11@s370_vfetc
  00038	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  00040	eb 08		 jmp	 SHORT $LN17@s370_vfetc
$LN11@s370_vfetc:
  00042	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN17@s370_vfetc:
  0004a	83 7c 24 34 00	 cmp	 DWORD PTR tv78[rsp], 0
  0004f	74 0a		 je	 SHORT $LN5@s370_vfetc
  00051	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00056	e8 00 00 00 00	 call	 s370_store_int_timer
$LN5@s370_vfetc:
  0005b	33 c0		 xor	 eax, eax
  0005d	85 c0		 test	 eax, eax
  0005f	75 b0		 jne	 SHORT $LN4@s370_vfetc

; 671  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00061	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00066	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0006a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0006e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00076	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0007b	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00089	e8 00 00 00 00	 call	 s370_maddr_l
  0008e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 672  :     return *mn;

  00093	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00098	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 673  : }

  0009b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009f	c3		 ret	 0
s370_vfetchb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetchc
_TEXT	SEGMENT
len2$ = 48
tv74 = 52
tv80 = 56
tv94 = 60
main1$ = 64
main2$ = 72
dest$ = 112
len$ = 120
addr$ = 128
arn$ = 136
regs$ = 144
s370_vfetchc PROC					; COMDAT

; 631  : {

$LN24:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 632  : BYTE   *main1, *main2;                  /* Main storage addresses    */
; 633  : int     len2;                           /* Length to copy on page    */
; 634  : 
; 635  :     if (NOCROSSPAGE( addr, len ))

  00019	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00020	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00025	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR len$[rsp]
  0002a	ba ff 07 00 00	 mov	 edx, 2047		; 000007ffH
  0002f	2b d1		 sub	 edx, ecx
  00031	8b ca		 mov	 ecx, edx
  00033	3b c1		 cmp	 eax, ecx
  00035	7f 0a		 jg	 SHORT $LN11@s370_vfetc
  00037	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0003f	eb 08		 jmp	 SHORT $LN12@s370_vfetc
$LN11@s370_vfetc:
  00041	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN12@s370_vfetc:
  00049	83 7c 24 34 00	 cmp	 DWORD PTR tv74[rsp], 0
  0004e	0f 84 c6 00 00
	00		 je	 $LN5@s370_vfetc
$LN4@s370_vfetc:

; 636  :     {
; 637  :         ITIMER_SYNC( addr, len, regs );

  00054	83 bc 24 80 00
	00 00 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  0005c	73 0a		 jae	 SHORT $LN15@s370_vfetc
  0005e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00066	eb 08		 jmp	 SHORT $LN16@s370_vfetc
$LN15@s370_vfetc:
  00068	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN16@s370_vfetc:
  00070	83 7c 24 38 00	 cmp	 DWORD PTR tv80[rsp], 0
  00075	74 1f		 je	 SHORT $LN17@s370_vfetc
  00077	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  0007c	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00083	03 c8		 add	 ecx, eax
  00085	8b c1		 mov	 eax, ecx
  00087	83 f8 50	 cmp	 eax, 80			; 00000050H
  0008a	72 0a		 jb	 SHORT $LN17@s370_vfetc
  0008c	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  00094	eb 08		 jmp	 SHORT $LN23@s370_vfetc
$LN17@s370_vfetc:
  00096	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN23@s370_vfetc:
  0009e	83 7c 24 3c 00	 cmp	 DWORD PTR tv94[rsp], 0
  000a3	74 0d		 je	 SHORT $LN7@s370_vfetc
  000a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ad	e8 00 00 00 00	 call	 s370_store_int_timer
$LN7@s370_vfetc:
  000b2	33 c0		 xor	 eax, eax
  000b4	85 c0		 test	 eax, eax
  000b6	75 9c		 jne	 SHORT $LN4@s370_vfetc

; 638  :         main1 = MADDRL( addr, len + 1, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  000b8	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  000bd	ff c0		 inc	 eax
  000bf	48 98		 cdqe
  000c1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c9	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  000cd	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  000d1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000d9	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000e1	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000e9	48 8b d0	 mov	 rdx, rax
  000ec	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  000f3	e8 00 00 00 00	 call	 s370_maddr_l
  000f8	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 639  :         memcpy( dest, main1, len + 1 );

  000fd	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00102	ff c0		 inc	 eax
  00104	48 98		 cdqe
  00106	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dest$[rsp]
  0010b	48 8b 74 24 40	 mov	 rsi, QWORD PTR main1$[rsp]
  00110	48 8b c8	 mov	 rcx, rax
  00113	f3 a4		 rep movsb

; 640  :     }

  00115	e9 ef 00 00 00	 jmp	 $LN6@s370_vfetc
$LN5@s370_vfetc:

; 641  :     else
; 642  :     {
; 643  :         len2 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0011a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00121	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00126	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0012b	2b c8		 sub	 ecx, eax
  0012d	8b c1		 mov	 eax, ecx
  0012f	89 44 24 30	 mov	 DWORD PTR len2$[rsp], eax

; 644  :         main1 = MADDRL( addr, len2, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00133	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  00138	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00140	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00144	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00148	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00150	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00158	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00160	48 8b d0	 mov	 rdx, rax
  00163	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0016a	e8 00 00 00 00	 call	 s370_maddr_l
  0016f	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 645  :         main2 = MADDRL( (addr + len2) & ADDRESS_MAXWRAP( regs ), len + 1 - len2,

  00174	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  00179	ff c0		 inc	 eax
  0017b	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  0017f	48 98		 cdqe
  00181	8b 4c 24 30	 mov	 ecx, DWORD PTR len2$[rsp]
  00185	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0018c	03 d1		 add	 edx, ecx
  0018e	8b ca		 mov	 ecx, edx
  00190	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00196	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0019e	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  001a2	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  001a6	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001ae	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001b6	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  001be	48 8b d0	 mov	 rdx, rax
  001c1	e8 00 00 00 00	 call	 s370_maddr_l
  001c6	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 646  :                         arn, regs, ACCTYPE_READ, regs->psw.pkey );
; 647  :         memcpy(        dest,        main1,           len2 );

  001cb	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  001d0	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dest$[rsp]
  001d5	48 8b 74 24 40	 mov	 rsi, QWORD PTR main1$[rsp]
  001da	48 8b c8	 mov	 rcx, rax
  001dd	f3 a4		 rep movsb

; 648  :         memcpy( (BYTE*)dest + len2, main2, len + 1 - len2 );

  001df	0f b6 44 24 78	 movzx	 eax, BYTE PTR len$[rsp]
  001e4	ff c0		 inc	 eax
  001e6	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  001ea	48 98		 cdqe
  001ec	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  001f1	48 8b 54 24 70	 mov	 rdx, QWORD PTR dest$[rsp]
  001f6	48 03 d1	 add	 rdx, rcx
  001f9	48 8b ca	 mov	 rcx, rdx
  001fc	48 8b f9	 mov	 rdi, rcx
  001ff	48 8b 74 24 48	 mov	 rsi, QWORD PTR main2$[rsp]
  00204	48 8b c8	 mov	 rcx, rax
  00207	f3 a4		 rep movsb
$LN6@s370_vfetc:

; 649  :     }
; 650  : }

  00209	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0020d	5f		 pop	 rdi
  0020e	5e		 pop	 rsi
  0020f	c3		 ret	 0
s370_vfetchc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore8
_TEXT	SEGMENT
tv70 = 48
tv92 = 52
tv136 = 56
mn$1 = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore8 PROC					; COMDAT

; 577  : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 578  : #if defined( OPTION_SINGLE_CPU_DW ) && defined( ASSIST_STORE_DW )
; 579  :     /* Check alignement. If aligned then we are guaranteed
; 580  :        not to cross a page boundary */
; 581  :     if (likely(!((VADR_L)addr & 0x07)))
; 582  :     {
; 583  :         /* Most common case : Aligned */
; 584  :         U64 *mn;
; 585  :         mn = (U64*)MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );
; 586  :         if (regs->cpubit == regs->sysblk->started_mask)
; 587  :             *mn = CSWAP64( value );
; 588  :         else
; 589  :             STORE_DW( mn, value );
; 590  :     }
; 591  :     else
; 592  : #endif
; 593  :     {
; 594  :         /* We're not aligned. So we have to check whether we are
; 595  :            crossing a page boundary. This cannot be the same
; 596  :            code as above because casting U64* to a non aligned
; 597  :            pointer may break on those architectures mandating
; 598  :            strict alignement */
; 599  :         if (likely(((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-7)))

  00017	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0001b	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00020	3d f8 07 00 00	 cmp	 eax, 2040		; 000007f8H
  00025	77 0a		 ja	 SHORT $LN11@s370_vstor
  00027	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  0002f	eb 08		 jmp	 SHORT $LN12@s370_vstor
$LN11@s370_vstor:
  00031	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN12@s370_vstor:
  00039	83 7c 24 30 00	 cmp	 DWORD PTR tv70[rsp], 0
  0003e	74 4b		 je	 SHORT $LN5@s370_vstor

; 600  :         {
; 601  :             /* Non aligned but not crossing page boundary */
; 602  :             BYTE *mn;
; 603  :             mn = MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00040	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00045	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00049	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0004d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00055	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0005a	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0005f	ba 08 00 00 00	 mov	 edx, 8
  00064	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  00068	e8 00 00 00 00	 call	 s370_maddr_l
  0006d	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 604  :             /* invoking STORE_DW ensures endianness correctness */
; 605  :             STORE_DW( mn, value );

  00072	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  00077	e8 00 00 00 00	 call	 _byteswap_uint64
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  00084	e8 00 00 00 00	 call	 store_dw_noswap

; 606  :         }

  00089	eb 18		 jmp	 SHORT $LN6@s370_vstor
$LN5@s370_vstor:

; 607  :         else
; 608  :             /* Crossing page boundary */
; 609  :             ARCH_DEP( vstore8_full )( value, addr, arn, regs );

  0008b	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00090	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00095	8b 54 24 68	 mov	 edx, DWORD PTR addr$[rsp]
  00099	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  0009e	e8 00 00 00 00	 call	 s370_vstore8_full
$LN6@s370_vstor:
$LN4@s370_vstor:

; 610  :     }
; 611  :     ITIMER_UPDATE( addr, 8-1, regs );

  000a3	83 7c 24 68 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  000a8	73 0a		 jae	 SHORT $LN15@s370_vstor
  000aa	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000b2	eb 08		 jmp	 SHORT $LN16@s370_vstor
$LN15@s370_vstor:
  000b4	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN16@s370_vstor:
  000bc	83 7c 24 34 00	 cmp	 DWORD PTR tv92[rsp], 0
  000c1	74 16		 je	 SHORT $LN17@s370_vstor
  000c3	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  000c7	83 c0 07	 add	 eax, 7
  000ca	83 f8 50	 cmp	 eax, 80			; 00000050H
  000cd	72 0a		 jb	 SHORT $LN17@s370_vstor
  000cf	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  000d7	eb 08		 jmp	 SHORT $LN23@s370_vstor
$LN17@s370_vstor:
  000d9	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN23@s370_vstor:
  000e1	83 7c 24 38 00	 cmp	 DWORD PTR tv136[rsp], 0
  000e6	74 0a		 je	 SHORT $LN7@s370_vstor
  000e8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000ed	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN7@s370_vstor:
  000f2	33 c0		 xor	 eax, eax
  000f4	85 c0		 test	 eax, eax
  000f6	75 ab		 jne	 SHORT $LN4@s370_vstor

; 612  : }

  000f8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000fc	c3		 ret	 0
s370_vstore8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv92 = 56
tv136 = 60
mn$1 = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore4 PROC					; COMDAT

; 559  : {

$LN27:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 560  :     /* Most common case : Aligned & not crossing page boundary */
; 561  :     if (likely(!((VADR_L)addr & 0x03))
; 562  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3)))

  00016	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0001a	83 e0 03	 and	 eax, 3
  0001d	85 c0		 test	 eax, eax
  0001f	75 0a		 jne	 SHORT $LN10@s370_vstor
  00021	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00029	eb 08		 jmp	 SHORT $LN11@s370_vstor
$LN10@s370_vstor:
  0002b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN11@s370_vstor:
  00033	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00038	74 0a		 je	 SHORT $LN14@s370_vstor
  0003a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN15@s370_vstor
$LN14@s370_vstor:
  00044	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN15@s370_vstor:
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  00051	75 14		 jne	 SHORT $LN7@s370_vstor
  00053	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  00057	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0005c	3d fc 07 00 00	 cmp	 eax, 2044		; 000007fcH
  00061	0f 87 9e 00 00
	00		 ja	 $LN5@s370_vstor
$LN7@s370_vstor:

; 563  :     {
; 564  :         BYTE *mn;
; 565  :         mn = MADDRL( addr, 4, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00067	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0006c	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00070	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00074	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007c	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00081	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  0008f	e8 00 00 00 00	 call	 s370_maddr_l
  00094	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 566  :         STORE_FW( mn, value );

  00099	8b 4c 24 60	 mov	 ecx, DWORD PTR value$[rsp]
  0009d	e8 00 00 00 00	 call	 _byteswap_ulong
  000a2	8b d0		 mov	 edx, eax
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  000a9	e8 00 00 00 00	 call	 store_fw_noswap
$LN4@s370_vstor:

; 567  :         ITIMER_UPDATE( addr, 4-1, regs );

  000ae	83 7c 24 68 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  000b3	73 0a		 jae	 SHORT $LN18@s370_vstor
  000b5	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000bd	eb 08		 jmp	 SHORT $LN19@s370_vstor
$LN18@s370_vstor:
  000bf	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN19@s370_vstor:
  000c7	83 7c 24 38 00	 cmp	 DWORD PTR tv92[rsp], 0
  000cc	74 16		 je	 SHORT $LN20@s370_vstor
  000ce	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  000d2	83 c0 03	 add	 eax, 3
  000d5	83 f8 50	 cmp	 eax, 80			; 00000050H
  000d8	72 0a		 jb	 SHORT $LN20@s370_vstor
  000da	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  000e2	eb 08		 jmp	 SHORT $LN26@s370_vstor
$LN20@s370_vstor:
  000e4	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN26@s370_vstor:
  000ec	83 7c 24 3c 00	 cmp	 DWORD PTR tv136[rsp], 0
  000f1	74 0a		 je	 SHORT $LN8@s370_vstor
  000f3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000f8	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN8@s370_vstor:
  000fd	33 c0		 xor	 eax, eax
  000ff	85 c0		 test	 eax, eax
  00101	75 ab		 jne	 SHORT $LN4@s370_vstor

; 568  :     }

  00103	eb 17		 jmp	 SHORT $LN6@s370_vstor
$LN5@s370_vstor:

; 569  :     else
; 570  :         ARCH_DEP( vstore4_full )( value, addr, arn, regs );

  00105	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0010a	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0010f	8b 54 24 68	 mov	 edx, DWORD PTR addr$[rsp]
  00113	8b 4c 24 60	 mov	 ecx, DWORD PTR value$[rsp]
  00117	e8 00 00 00 00	 call	 s370_vstore4_full
$LN6@s370_vstor:

; 571  : }

  0011c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00120	c3		 ret	 0
s370_vstore4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore2
_TEXT	SEGMENT
tv73 = 48
tv91 = 52
tv135 = 56
mn$1 = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore2 PROC					; COMDAT

; 541  : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 542  :     /* Most common case : Aligned & not crossing page boundary */
; 543  :     if (likely(!((VADR_L)addr & 1)

  00017	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 1a		 je	 SHORT $LN9@s370_vstor
  00022	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  00026	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0002b	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  00030	75 0a		 jne	 SHORT $LN9@s370_vstor
  00032	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
  0003a	eb 08		 jmp	 SHORT $LN12@s370_vstor
$LN9@s370_vstor:
  0003c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
$LN12@s370_vstor:
  00044	83 7c 24 30 00	 cmp	 DWORD PTR tv73[rsp], 0
  00049	0f 84 9f 00 00
	00		 je	 $LN5@s370_vstor

; 544  :         || ((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK))
; 545  :     {
; 546  :         BYTE* mn;
; 547  :         mn = MADDRL( addr, 2, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0004f	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00054	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00058	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0005c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00064	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00069	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0006e	ba 02 00 00 00	 mov	 edx, 2
  00073	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  00077	e8 00 00 00 00	 call	 s370_maddr_l
  0007c	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 548  :         STORE_HW( mn, value );

  00081	0f b7 4c 24 60	 movzx	 ecx, WORD PTR value$[rsp]
  00086	e8 00 00 00 00	 call	 _byteswap_ushort
  0008b	0f b7 d0	 movzx	 edx, ax
  0008e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  00093	e8 00 00 00 00	 call	 store_hw_noswap
$LN4@s370_vstor:

; 549  :         ITIMER_UPDATE( addr, 2-1, regs );

  00098	83 7c 24 68 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  0009d	73 0a		 jae	 SHORT $LN15@s370_vstor
  0009f	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
  000a7	eb 08		 jmp	 SHORT $LN16@s370_vstor
$LN15@s370_vstor:
  000a9	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN16@s370_vstor:
  000b1	83 7c 24 34 00	 cmp	 DWORD PTR tv91[rsp], 0
  000b6	74 15		 je	 SHORT $LN17@s370_vstor
  000b8	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  000bc	ff c0		 inc	 eax
  000be	83 f8 50	 cmp	 eax, 80			; 00000050H
  000c1	72 0a		 jb	 SHORT $LN17@s370_vstor
  000c3	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  000cb	eb 08		 jmp	 SHORT $LN23@s370_vstor
$LN17@s370_vstor:
  000cd	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN23@s370_vstor:
  000d5	83 7c 24 38 00	 cmp	 DWORD PTR tv135[rsp], 0
  000da	74 0a		 je	 SHORT $LN7@s370_vstor
  000dc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000e1	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN7@s370_vstor:
  000e6	33 c0		 xor	 eax, eax
  000e8	85 c0		 test	 eax, eax
  000ea	75 ac		 jne	 SHORT $LN4@s370_vstor

; 550  :     }

  000ec	eb 18		 jmp	 SHORT $LN6@s370_vstor
$LN5@s370_vstor:

; 551  :     else
; 552  :         ARCH_DEP( vstore2_full )( value, addr, arn, regs );

  000ee	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  000f3	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  000f8	8b 54 24 68	 mov	 edx, DWORD PTR addr$[rsp]
  000fc	0f b7 4c 24 60	 movzx	 ecx, WORD PTR value$[rsp]
  00101	e8 00 00 00 00	 call	 s370_vstore2_full
$LN6@s370_vstor:

; 553  : }

  00106	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010a	c3		 ret	 0
s370_vstore2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstoreb
_TEXT	SEGMENT
tv76 = 48
tv86 = 52
main1$ = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
s370_vstoreb PROC					; COMDAT

; 529  : {

$LN18:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 530  : BYTE   *main1;                          /* Mainstor address          */
; 531  : 
; 532  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00016	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00023	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0002b	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00030	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  0003e	e8 00 00 00 00	 call	 s370_maddr_l
  00043	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 533  :     *main1 = value;

  00048	48 8b 44 24 38	 mov	 rax, QWORD PTR main1$[rsp]
  0004d	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR value$[rsp]
  00052	88 08		 mov	 BYTE PTR [rax], cl
$LN4@s370_vstor:

; 534  :     ITIMER_UPDATE( addr, 1-1, regs );

  00054	83 7c 24 58 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00059	73 0a		 jae	 SHORT $LN9@s370_vstor
  0005b	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv76[rsp], 1
  00063	eb 08		 jmp	 SHORT $LN10@s370_vstor
$LN9@s370_vstor:
  00065	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN10@s370_vstor:
  0006d	83 7c 24 30 00	 cmp	 DWORD PTR tv76[rsp], 0
  00072	74 11		 je	 SHORT $LN11@s370_vstor
  00074	83 7c 24 58 50	 cmp	 DWORD PTR addr$[rsp], 80 ; 00000050H
  00079	72 0a		 jb	 SHORT $LN11@s370_vstor
  0007b	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  00083	eb 08		 jmp	 SHORT $LN17@s370_vstor
$LN11@s370_vstor:
  00085	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN17@s370_vstor:
  0008d	83 7c 24 34 00	 cmp	 DWORD PTR tv86[rsp], 0
  00092	74 0a		 je	 SHORT $LN5@s370_vstor
  00094	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00099	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN5@s370_vstor:
  0009e	33 c0		 xor	 eax, eax
  000a0	85 c0		 test	 eax, eax
  000a2	75 b0		 jne	 SHORT $LN4@s370_vstor

; 535  : }

  000a4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a8	c3		 ret	 0
s370_vstoreb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstorec
_TEXT	SEGMENT
len2$ = 48
tv74 = 52
tv131 = 56
tv145 = 60
sk$ = 64
tv81 = 72
main1$ = 80
main2$ = 88
src$ = 128
len$ = 136
addr$ = 144
arn$ = 152
regs$ = 160
s370_vstorec PROC					; COMDAT

; 489  : {

$LN24:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 490  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 491  : BYTE   *sk;                             /* Storage key addresses     */
; 492  : int     len2;                           /* Length to end of page     */
; 493  : 
; 494  :     if (NOCROSSPAGE( addr,len ))

  00019	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00020	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00025	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR len$[rsp]
  0002d	ba ff 07 00 00	 mov	 edx, 2047		; 000007ffH
  00032	2b d1		 sub	 edx, ecx
  00034	8b ca		 mov	 ecx, edx
  00036	3b c1		 cmp	 eax, ecx
  00038	7f 0a		 jg	 SHORT $LN11@s370_vstor
  0003a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN12@s370_vstor
$LN11@s370_vstor:
  00044	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN12@s370_vstor:
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR tv74[rsp], 0
  00051	0f 84 d6 00 00
	00		 je	 $LN5@s370_vstor

; 495  :     {
; 496  :         memcpy( MADDRL( addr, len+1, arn, regs, ACCTYPE_WRITE, regs->psw.pkey ),

  00057	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  0005f	ff c0		 inc	 eax
  00061	48 98		 cdqe
  00063	48 89 44 24 48	 mov	 QWORD PTR tv81[rsp], rax
  00068	0f b6 8c 24 88
	00 00 00	 movzx	 ecx, BYTE PTR len$[rsp]
  00070	ff c1		 inc	 ecx
  00072	48 63 c9	 movsxd	 rcx, ecx
  00075	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0007d	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00081	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  00085	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0008d	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00095	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0009d	48 8b d1	 mov	 rdx, rcx
  000a0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  000a7	e8 00 00 00 00	 call	 s370_maddr_l
  000ac	48 8b f8	 mov	 rdi, rax
  000af	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR src$[rsp]
  000b7	48 8b 44 24 48	 mov	 rax, QWORD PTR tv81[rsp]
  000bc	48 8b c8	 mov	 rcx, rax
  000bf	f3 a4		 rep movsb
$LN4@s370_vstor:

; 497  :                src, len + 1);
; 498  :         ITIMER_UPDATE( addr, len, regs );

  000c1	83 bc 24 90 00
	00 00 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  000c9	73 0a		 jae	 SHORT $LN15@s370_vstor
  000cb	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN16@s370_vstor
$LN15@s370_vstor:
  000d5	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN16@s370_vstor:
  000dd	83 7c 24 38 00	 cmp	 DWORD PTR tv131[rsp], 0
  000e2	74 22		 je	 SHORT $LN17@s370_vstor
  000e4	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  000ec	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  000f3	03 c8		 add	 ecx, eax
  000f5	8b c1		 mov	 eax, ecx
  000f7	83 f8 50	 cmp	 eax, 80			; 00000050H
  000fa	72 0a		 jb	 SHORT $LN17@s370_vstor
  000fc	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv145[rsp], 1
  00104	eb 08		 jmp	 SHORT $LN23@s370_vstor
$LN17@s370_vstor:
  00106	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
$LN23@s370_vstor:
  0010e	83 7c 24 3c 00	 cmp	 DWORD PTR tv145[rsp], 0
  00113	74 0d		 je	 SHORT $LN7@s370_vstor
  00115	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011d	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN7@s370_vstor:
  00122	33 c0		 xor	 eax, eax
  00124	85 c0		 test	 eax, eax
  00126	75 99		 jne	 SHORT $LN4@s370_vstor

; 499  :     }

  00128	e9 21 01 00 00	 jmp	 $LN6@s370_vstor
$LN5@s370_vstor:

; 500  :     else
; 501  :     {
; 502  :         len2 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0012d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00134	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00139	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0013e	2b c8		 sub	 ecx, eax
  00140	8b c1		 mov	 eax, ecx
  00142	89 44 24 30	 mov	 DWORD PTR len2$[rsp], eax

; 503  :         main1 = MADDRL( addr, len2, arn, regs, ACCTYPE_WRITE_SKP,

  00146	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  0014b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00153	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00157	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0015b	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00163	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0016b	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00173	48 8b d0	 mov	 rdx, rax
  00176	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0017d	e8 00 00 00 00	 call	 s370_maddr_l
  00182	48 89 44 24 50	 mov	 QWORD PTR main1$[rsp], rax

; 504  :                         regs->psw.pkey );
; 505  :         sk = regs->dat.storkey;

  00187	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0018f	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00196	48 89 44 24 40	 mov	 QWORD PTR sk$[rsp], rax

; 506  :         main2 = MADDRL( (addr + len2) & ADDRESS_MAXWRAP( regs ),

  0019b	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  001a3	ff c0		 inc	 eax
  001a5	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  001a9	48 98		 cdqe
  001ab	8b 4c 24 30	 mov	 ecx, DWORD PTR len2$[rsp]
  001af	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001b6	03 d1		 add	 edx, ecx
  001b8	8b ca		 mov	 ecx, edx
  001ba	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  001c0	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001c8	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  001cc	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  001d0	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001d8	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001e0	44 8b 84 24 98
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  001e8	48 8b d0	 mov	 rdx, rax
  001eb	e8 00 00 00 00	 call	 s370_maddr_l
  001f0	48 89 44 24 58	 mov	 QWORD PTR main2$[rsp], rax

; 507  :                         len+1-len2, arn,
; 508  :                         regs, ACCTYPE_WRITE, regs->psw.pkey );
; 509  :         *sk |= (STORKEY_REF | STORKEY_CHANGE);

  001f5	48 8b 44 24 40	 mov	 rax, QWORD PTR sk$[rsp]
  001fa	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001fd	83 c8 06	 or	 eax, 6
  00200	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sk$[rsp]
  00205	88 01		 mov	 BYTE PTR [rcx], al

; 510  :         memcpy( main1, src, len2 );

  00207	48 63 44 24 30	 movsxd	 rax, DWORD PTR len2$[rsp]
  0020c	48 8b 7c 24 50	 mov	 rdi, QWORD PTR main1$[rsp]
  00211	48 8b b4 24 80
	00 00 00	 mov	 rsi, QWORD PTR src$[rsp]
  00219	48 8b c8	 mov	 rcx, rax
  0021c	f3 a4		 rep movsb

; 511  :         memcpy( main2, (BYTE*)src + len2, len + 1 - len2 );

  0021e	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR len$[rsp]
  00226	ff c0		 inc	 eax
  00228	2b 44 24 30	 sub	 eax, DWORD PTR len2$[rsp]
  0022c	48 98		 cdqe
  0022e	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len2$[rsp]
  00233	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR src$[rsp]
  0023b	48 03 d1	 add	 rdx, rcx
  0023e	48 8b ca	 mov	 rcx, rdx
  00241	48 8b 7c 24 58	 mov	 rdi, QWORD PTR main2$[rsp]
  00246	48 8b f1	 mov	 rsi, rcx
  00249	48 8b c8	 mov	 rcx, rax
  0024c	f3 a4		 rep movsb
$LN6@s370_vstor:

; 512  :     }
; 513  : }

  0024e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00252	5f		 pop	 rdi
  00253	5e		 pop	 rsi
  00254	c3		 ret	 0
s370_vstorec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch4_full
_TEXT	SEGMENT
len$ = 48
mn$ = 56
temp$ = 64
__$ArrayPad$ = 72
addr$ = 112
arn$ = 120
regs$ = 128
s370_vfetch4_full PROC					; COMDAT

; 428  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	56		 push	 rsi
  0000e	57		 push	 rdi
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 429  : BYTE   *mn;                             /* Main storage addresses    */
; 430  : int     len;                            /* Length to end of page     */
; 431  : BYTE    temp[8];                        /* Copy destination          */
; 432  : 
; 433  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00022	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00026	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0002b	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 434  :     mn = MADDRL( addr, len, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00038	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0003d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00045	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00049	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0004d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00055	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0005d	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  00062	48 8b d0	 mov	 rdx, rax
  00065	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  00069	e8 00 00 00 00	 call	 s370_maddr_l
  0006e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 435  :     memcpy( temp, mn, len);

  00073	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00078	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  0007d	48 8b f9	 mov	 rdi, rcx
  00080	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  00085	48 8b c8	 mov	 rcx, rax
  00088	f3 a4		 rep movsb

; 436  :     mn = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4 - len, arn, regs,

  0008a	b8 04 00 00 00	 mov	 eax, 4
  0008f	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00093	48 98		 cdqe
  00095	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  00099	8b 54 24 70	 mov	 edx, DWORD PTR addr$[rsp]
  0009d	03 d1		 add	 edx, ecx
  0009f	8b ca		 mov	 ecx, edx
  000a1	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  000a7	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000af	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000b3	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000b7	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000bf	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000c7	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  000cc	48 8b d0	 mov	 rdx, rax
  000cf	e8 00 00 00 00	 call	 s370_maddr_l
  000d4	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 437  :                   ACCTYPE_READ, regs->psw.pkey );
; 438  :     memcpy( temp+len, mn, 4 - len);

  000d9	b8 04 00 00 00	 mov	 eax, 4
  000de	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  000e2	48 98		 cdqe
  000e4	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  000e9	48 8d 4c 0c 40	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  000f6	48 8b c8	 mov	 rcx, rax
  000f9	f3 a4		 rep movsb

; 439  :     return fetch_fw( temp );

  000fb	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  00100	e8 00 00 00 00	 call	 fetch_fw_noswap
  00105	8b c8		 mov	 ecx, eax
  00107	e8 00 00 00 00	 call	 _byteswap_ulong

; 440  : }

  0010c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00111	48 33 cc	 xor	 rcx, rsp
  00114	e8 00 00 00 00	 call	 __security_check_cookie
  00119	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011d	5f		 pop	 rdi
  0011e	5e		 pop	 rsi
  0011f	c3		 ret	 0
s370_vfetch4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch2_full
_TEXT	SEGMENT
value$ = 48
mn$ = 56
addr$ = 80
arn$ = 88
regs$ = 96
s370_vfetch2_full PROC					; COMDAT

; 401  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 402  : BYTE   *mn;                             /* Main storage addresses    */
; 403  : U16     value;
; 404  : 
; 405  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00011	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00016	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0001e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00026	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0002b	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00030	ba 01 00 00 00	 mov	 edx, 1
  00035	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00039	e8 00 00 00 00	 call	 s370_maddr_l
  0003e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 406  :     value = *mn << 8;

  00043	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00048	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0004b	c1 e0 08	 shl	 eax, 8
  0004e	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 407  :     mn = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  00053	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00057	ff c0		 inc	 eax
  00059	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0005e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00063	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00067	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0006b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00073	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  00078	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  0007d	ba 01 00 00 00	 mov	 edx, 1
  00082	8b c8		 mov	 ecx, eax
  00084	e8 00 00 00 00	 call	 s370_maddr_l
  00089	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 408  :                  ACCTYPE_READ, regs->psw.pkey );
; 409  :     value |= *mn;

  0008e	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00093	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00096	0f b7 4c 24 30	 movzx	 ecx, WORD PTR value$[rsp]
  0009b	0b c8		 or	 ecx, eax
  0009d	8b c1		 mov	 eax, ecx
  0009f	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 410  :     return value;

  000a4	0f b7 44 24 30	 movzx	 eax, WORD PTR value$[rsp]

; 411  : }

  000a9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ad	c3		 ret	 0
s370_vfetch2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore8_full
_TEXT	SEGMENT
len$ = 48
sk$ = 56
main1$ = 64
main2$ = 72
temp$ = 80
__$ArrayPad$ = 88
value$ = 128
addr$ = 136
arn$ = 144
regs$ = 152
s370_vstore8_full PROC					; COMDAT

; 369  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 370  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 371  : BYTE   *sk;                             /* Storage key addresses     */
; 372  : int     len;                            /* Length to end of page     */
; 373  : BYTE    temp[8];                        /* Copied value              */
; 374  : 
; 375  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00028	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0002f	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00034	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00039	2b c8		 sub	 ecx, eax
  0003b	8b c1		 mov	 eax, ecx
  0003d	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 376  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00046	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00052	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00056	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0005e	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00066	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0006e	48 8b d0	 mov	 rdx, rax
  00071	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00078	e8 00 00 00 00	 call	 s370_maddr_l
  0007d	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 377  :     sk = regs->dat.storkey;

  00082	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00091	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 378  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 8-len, arn, regs,

  00096	b8 08 00 00 00	 mov	 eax, 8
  0009b	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0009f	48 98		 cdqe
  000a1	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  000a5	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  000ac	03 d1		 add	 edx, ecx
  000ae	8b ca		 mov	 ecx, edx
  000b0	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  000b6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000be	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000c2	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000c6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ce	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000d6	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000de	48 8b d0	 mov	 rdx, rax
  000e1	e8 00 00 00 00	 call	 s370_maddr_l
  000e6	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 379  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 380  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000eb	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  000f0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000f3	83 c8 06	 or	 eax, 6
  000f6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  000fb	88 01		 mov	 BYTE PTR [rcx], al

; 381  :     STORE_DW( temp, value );

  000fd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00105	e8 00 00 00 00	 call	 _byteswap_uint64
  0010a	48 8b d0	 mov	 rdx, rax
  0010d	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  00112	e8 00 00 00 00	 call	 store_dw_noswap

; 382  :     memcpy( main1, temp,       len );

  00117	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0011c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  00121	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  00126	48 8b f1	 mov	 rsi, rcx
  00129	48 8b c8	 mov	 rcx, rax
  0012c	f3 a4		 rep movsb

; 383  :     memcpy( main2, temp+len, 8-len );

  0012e	b8 08 00 00 00	 mov	 eax, 8
  00133	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00137	48 98		 cdqe
  00139	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  0013e	48 8d 4c 0c 50	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  00143	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  00148	48 8b f1	 mov	 rsi, rcx
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	f3 a4		 rep movsb

; 384  : }

  00150	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00155	48 33 cc	 xor	 rcx, rsp
  00158	e8 00 00 00 00	 call	 __security_check_cookie
  0015d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00161	5f		 pop	 rdi
  00162	5e		 pop	 rsi
  00163	c3		 ret	 0
s370_vstore8_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore4_full
_TEXT	SEGMENT
len$ = 48
temp$ = 52
sk$ = 56
main1$ = 64
main2$ = 72
value$ = 112
addr$ = 120
arn$ = 128
regs$ = 136
s370_vstore4_full PROC					; COMDAT

; 335  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	56		 push	 rsi
  00013	57		 push	 rdi
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 336  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 337  : BYTE   *sk;                             /* Storage key addresses     */
; 338  : int     len;                            /* Length to end of page     */
; 339  : BYTE    temp[4];                        /* Copied value              */
; 340  : 
; 341  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00018	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0001c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00021	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00026	2b c8		 sub	 ecx, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 342  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  0002e	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00033	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0003b	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0003f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00043	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0004b	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00053	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	8b 4c 24 78	 mov	 ecx, DWORD PTR addr$[rsp]
  00062	e8 00 00 00 00	 call	 s370_maddr_l
  00067	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 343  :     sk = regs->dat.storkey;

  0006c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  0007b	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 344  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4-len, arn, regs,

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00089	48 98		 cdqe
  0008b	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  0008f	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  00093	03 d1		 add	 edx, ecx
  00095	8b ca		 mov	 ecx, edx
  00097	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0009d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000a5	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000a9	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000ad	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b5	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000bd	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000c5	48 8b d0	 mov	 rdx, rax
  000c8	e8 00 00 00 00	 call	 s370_maddr_l
  000cd	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 345  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 346  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000d2	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  000d7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000da	83 c8 06	 or	 eax, 6
  000dd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  000e2	88 01		 mov	 BYTE PTR [rcx], al

; 347  :     STORE_FW( temp, value );

  000e4	8b 4c 24 70	 mov	 ecx, DWORD PTR value$[rsp]
  000e8	e8 00 00 00 00	 call	 _byteswap_ulong
  000ed	8b d0		 mov	 edx, eax
  000ef	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  000f4	e8 00 00 00 00	 call	 store_fw_noswap

; 348  :     memcpy( main1, temp,       len );

  000f9	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  000fe	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  00103	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  00108	48 8b f1	 mov	 rsi, rcx
  0010b	48 8b c8	 mov	 rcx, rax
  0010e	f3 a4		 rep movsb

; 349  :     memcpy( main2, temp+len, 4-len );

  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00119	48 98		 cdqe
  0011b	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  00120	48 8d 4c 0c 34	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  00125	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  0012a	48 8b f1	 mov	 rsi, rcx
  0012d	48 8b c8	 mov	 rcx, rax
  00130	f3 a4		 rep movsb

; 350  : }

  00132	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00136	5f		 pop	 rdi
  00137	5e		 pop	 rsi
  00138	c3		 ret	 0
s370_vstore4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore2_full
_TEXT	SEGMENT
sk$ = 48
main1$ = 56
main2$ = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore2_full PROC					; COMDAT

; 308  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 309  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 310  : BYTE   *sk;                             /* Storage key addresses     */
; 311  : 
; 312  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00017	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0001c	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00020	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00024	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0002c	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00031	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  0003f	e8 00 00 00 00	 call	 s370_maddr_l
  00044	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 313  :     sk = regs->dat.storkey;

  00049	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0004e	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00055	48 89 44 24 30	 mov	 QWORD PTR sk$[rsp], rax

; 314  :     main2 = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  0005a	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0005e	ff c0		 inc	 eax
  00060	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00065	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0006a	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0006e	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00072	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007a	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0007f	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00084	ba 01 00 00 00	 mov	 edx, 1
  00089	8b c8		 mov	 ecx, eax
  0008b	e8 00 00 00 00	 call	 s370_maddr_l
  00090	48 89 44 24 40	 mov	 QWORD PTR main2$[rsp], rax

; 315  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 316  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  00095	48 8b 44 24 30	 mov	 rax, QWORD PTR sk$[rsp]
  0009a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0009d	83 c8 06	 or	 eax, 6
  000a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sk$[rsp]
  000a5	88 01		 mov	 BYTE PTR [rcx], al

; 317  :     *main1 = value >> 8;

  000a7	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000ac	c1 f8 08	 sar	 eax, 8
  000af	48 8b 4c 24 38	 mov	 rcx, QWORD PTR main1$[rsp]
  000b4	88 01		 mov	 BYTE PTR [rcx], al

; 318  :     *main2 = value & 0xFF;

  000b6	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000bb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR main2$[rsp]
  000c5	88 01		 mov	 BYTE PTR [rcx], al

; 319  : }

  000c7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000cb	c3		 ret	 0
s370_vstore2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dat.h
;	COMDAT s370_maddr_l
_TEXT	SEGMENT
tlbix$ = 48
aea_crn$ = 52
tv70 = 56
maddr$ = 64
addr$ = 96
len$ = 104
arn$ = 112
regs$ = 120
acctype$ = 128
akey$ = 136
s370_maddr_l PROC					; COMDAT

; 307  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 308  :     /* Note: ALL of the below conditions must be true for a TLB hit
; 309  :        to occur.  If ANY of them are false, then it's a TLB miss,
; 310  :        requiring us to then perform a full DAT address translation.
; 311  : 
; 312  :        Note too that on the grand scheme of things the order/sequence
; 313  :        of the below tests (if statements) is completely unimportant
; 314  :        since ALL conditions must be checked anyway in order for a hit
; 315  :        to occur, and it doesn't matter that a miss tests a few extra
; 316  :        conditions since it's going to do a full translation anyway!
; 317  :        (which is many, many instructions)
; 318  :     */
; 319  : 
; 320  :     int  aea_crn  = (arn >= USE_ARMODE) ? 0 : regs->AEA_AR( arn );

  00017	83 7c 24 70 10	 cmp	 DWORD PTR arn$[rsp], 16
  0001c	7c 0a		 jl	 SHORT $LN12@s370_maddr
  0001e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00026	eb 19		 jmp	 SHORT $LN13@s370_maddr
$LN12@s370_maddr:
  00028	8b 44 24 70	 mov	 eax, DWORD PTR arn$[rsp]
  0002c	83 c0 05	 add	 eax, 5
  0002f	48 98		 cdqe
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00036	8b 84 81 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+3220]
  0003d	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
$LN13@s370_maddr:
  00041	8b 44 24 38	 mov	 eax, DWORD PTR tv70[rsp]
  00045	89 44 24 34	 mov	 DWORD PTR aea_crn$[rsp], eax

; 321  :     U16  tlbix    = TLBIX( addr );

  00049	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  0004d	c1 e8 0b	 shr	 eax, 11
  00050	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00055	66 89 44 24 30	 mov	 WORD PTR tlbix$[rsp], ax

; 322  :     BYTE *maddr   = NULL;

  0005a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maddr$[rsp], 0

; 323  : 
; 324  :     /* Non-zero AEA Control Register number? */
; 325  :     if (aea_crn)

  00063	83 7c 24 34 00	 cmp	 DWORD PTR aea_crn$[rsp], 0
  00068	0f 84 25 01 00
	00		 je	 $LN2@s370_maddr

; 326  :     {
; 327  :         /* Same Addess Space Designator as before? */
; 328  :         /* Or if not, is address in a common segment? */
; 329  :         if (0
; 330  :             || (regs->CR( aea_crn ) == regs->tlb.TLB_ASD( tlbix ))
; 331  :             || (regs->AEA_COMMON( aea_crn ) & regs->tlb.common[ tlbix ])

  0006e	33 c0		 xor	 eax, eax
  00070	85 c0		 test	 eax, eax
  00072	75 59		 jne	 SHORT $LN4@s370_maddr
  00074	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  00078	ff c0		 inc	 eax
  0007a	48 98		 cdqe
  0007c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00081	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00086	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0008b	41 8b 8c c8 60
	b0 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+45152]
  00093	39 8c c2 00 06
	00 00		 cmp	 DWORD PTR [rdx+rax*8+1536], ecx
  0009a	74 31		 je	 SHORT $LN4@s370_maddr
  0009c	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  000a0	ff c0		 inc	 eax
  000a2	48 98		 cdqe
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  000b1	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000b6	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000bb	0f b6 8c 0a 60
	54 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+87136]
  000c3	23 c1		 and	 eax, ecx
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 c6 00 00
	00		 je	 $LN3@s370_maddr
$LN4@s370_maddr:

; 332  :         )
; 333  :         {
; 334  :             /* Storage Key zero? */
; 335  :             /* Or if not, same Storage Key as before? */
; 336  :             if (0
; 337  :                 || akey == 0
; 338  :                 || akey == regs->tlb.skey[ tlbix ]

  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 2e		 jne	 SHORT $LN6@s370_maddr
  000d3	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000db	85 c0		 test	 eax, eax
  000dd	74 22		 je	 SHORT $LN6@s370_maddr
  000df	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000e7	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000ec	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f1	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  000f9	3b c1		 cmp	 eax, ecx
  000fb	0f 85 92 00 00
	00		 jne	 $LN5@s370_maddr
$LN6@s370_maddr:

; 339  :             )
; 340  :             {
; 341  :                 /* Does the page address match the one in the TLB? */
; 342  :                 /* (does a TLB entry exist for this page address?) */
; 343  :                 if (
; 344  :                     ((addr & TLBID_PAGEMASK) | regs->tlbID)
; 345  :                     ==

  00101	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00105	25 00 00 e0 00	 and	 eax, 14680064		; 00e00000H
  0010a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	0b 81 58 b0 00
	00		 or	 eax, DWORD PTR [rcx+45144]
  00115	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  0011a	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0011f	3b 84 ca 60 d0
	00 00		 cmp	 eax, DWORD PTR [rdx+rcx*8+53344]
  00126	75 6b		 jne	 SHORT $LN7@s370_maddr

; 346  :                     regs->tlb.TLB_VADDR( tlbix )
; 347  :                 )
; 348  :                 {
; 349  :                     /* Is storage being accessed same way as before? */
; 350  :                     if (acctype & regs->tlb.acc[ tlbix ])

  00128	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0012d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  0013a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR acctype$[rsp]
  00141	23 c8		 and	 ecx, eax
  00143	8b c1		 mov	 eax, ecx
  00145	85 c0		 test	 eax, eax
  00147	74 4a		 je	 SHORT $LN8@s370_maddr

; 351  :                     {
; 352  :                         /*------------------------------------------*/
; 353  :                         /* TLB hit: use previously translated value */
; 354  :                         /*------------------------------------------*/
; 355  : 
; 356  :                         if (acctype & ACC_CHECK)

  00149	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  00150	83 e0 01	 and	 eax, 1
  00153	85 c0		 test	 eax, eax
  00155	74 1e		 je	 SHORT $LN9@s370_maddr

; 357  :                             regs->dat.storkey = regs->tlb.storkey[ tlbix ];

  00157	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0015c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00161	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00166	48 8b 84 c2 60
	30 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+77920]
  0016e	48 89 81 28 08
	00 00		 mov	 QWORD PTR [rcx+2088], rax
$LN9@s370_maddr:

; 358  : 
; 359  :                         maddr = MAINADDR( regs->tlb.main[tlbix], addr );

  00175	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0017a	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  0017e	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	48 8b 84 c2 60
	10 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+69728]
  0018b	48 33 c1	 xor	 rax, rcx
  0018e	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN8@s370_maddr:
$LN7@s370_maddr:
$LN5@s370_maddr:
$LN3@s370_maddr:
$LN2@s370_maddr:

; 360  :                     }
; 361  :                 }
; 362  :             }
; 363  :         }
; 364  :     }
; 365  : 
; 366  :     /*---------------------------------------*/
; 367  :     /* TLB miss: do full address translation */
; 368  :     /*---------------------------------------*/
; 369  :     if (!maddr)

  00193	48 83 7c 24 40
	00		 cmp	 QWORD PTR maddr$[rsp], 0
  00199	75 35		 jne	 SHORT $LN10@s370_maddr

; 370  :         maddr = ARCH_DEP( logical_to_main_l )( addr, arn, regs, acctype, akey, len );

  0019b	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a5	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  001ad	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  001b1	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acctype$[rsp]
  001b9	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001be	8b 54 24 70	 mov	 edx, DWORD PTR arn$[rsp]
  001c2	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  001c6	e8 00 00 00 00	 call	 s370_logical_to_main_l
  001cb	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN10@s370_maddr:

; 371  : 
; 372  : #if defined( FEATURE_073_TRANSACT_EXEC_FACILITY )
; 373  :     if (FACILITY_ENABLED( 073_TRANSACT_EXEC, regs ))
; 374  :     {
; 375  :         /* SA22-7832-12 Principles of Operation, page 5-99:
; 376  : 
; 377  :              "Storage accesses for instruction and DAT- and ART-
; 378  :               table fetches follow the non-transactional rules."
; 379  :         */
; 380  :         if (0
; 381  :             || !regs
; 382  :             || !regs->txf_tnd
; 383  :             || arn == USE_INST_SPACE    /* Instruction fetching */
; 384  :             || arn == USE_REAL_ADDR     /* Address translation  */
; 385  :         )
; 386  :             return maddr;
; 387  : 
; 388  :         /* Quick exit if NTSTG call */
; 389  :         if (regs->txf_NTSTG)
; 390  :         {
; 391  :             regs->txf_NTSTG = false;
; 392  :             return maddr;
; 393  :         }
; 394  : 
; 395  :         /* Translate to alternate TXF address */
; 396  :         maddr = TXF_MADDRL( addr, len, arn, regs, acctype, maddr );
; 397  :     }
; 398  : #endif
; 399  : 
; 400  :     return maddr;

  001d0	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]

; 401  : }

  001d5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d9	c3		 ret	 0
s370_maddr_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT s370_per1_gra
_TEXT	SEGMENT
regs$ = 48
s370_per1_gra PROC					; COMDAT

; 546  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 547  : #if !defined( FEATURE_PER1 )
; 548  :     UNREFERENCED( regs );
; 549  : #else
; 550  :     OBTAIN_INTLOCK( regs );

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@OMLMFJCF@C?3?2papa?2MyGit?2hyperion?9zvector?2@
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  00015	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 551  :     {
; 552  :         regs->peradr = regs->periaddr;

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  00024	48 8b 89 e8 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2280]
  0002b	48 89 88 d8 08
	00 00		 mov	 QWORD PTR [rax+2264], rcx
$LN4@s370_per1_:

; 553  :         ON_IC_PER_GRA( regs );

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00037	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  0003a	0f ba e8 14	 bts	 eax, 20
  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  00043	89 41 4c	 mov	 DWORD PTR [rcx+76], eax
  00046	33 c0		 xor	 eax, eax
  00048	85 c0		 test	 eax, eax
  0004a	75 e6		 jne	 SHORT $LN4@s370_per1_

; 554  :     }
; 555  :     RELEASE_INTLOCK( regs );

  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@JBMLKNGA@C?3?2papa?2MyGit?2hyperion?9zvector?2@
  00053	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  00058	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 556  : 
; 557  :     if (OPEN_IC_PER_GRA( regs ))

  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00062	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  00067	8b 49 4c	 mov	 ecx, DWORD PTR [rcx+76]
  0006a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0006d	23 c1		 and	 eax, ecx
  0006f	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00074	85 c0		 test	 eax, eax
  00076	74 18		 je	 SHORT $LN5@s370_per1_

; 558  :         RETURN_INTCHECK( regs );

  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0007d	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00083	ba ff ff ff ff	 mov	 edx, -1
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 longjmp
$LN5@s370_per1_:
$LN6@s370_per1_:

; 559  : #endif
; 560  : }

  00090	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00094	c3		 ret	 0
s370_per1_gra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT sub_signed
_TEXT	SEGMENT
sop2$ = 0
sop1$ = 4
sres$ = 8
tv74 = 12
tv75 = 16
tv76 = 20
result$ = 48
op1$ = 56
op2$ = 64
sub_signed PROC						; COMDAT

; 90   : {

$LN11:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 91   :     S32 sres, sop1, sop2;
; 92   : 
; 93   :     /* NOTE: cannot use casting here as signed fixed point overflow
; 94   :        leads to undefined behavior! (whereas unsigned doesn't)
; 95   :     */
; 96   :     *result = op1 - op2;

  00012	8b 44 24 40	 mov	 eax, DWORD PTR op2$[rsp]
  00016	8b 4c 24 38	 mov	 ecx, DWORD PTR op1$[rsp]
  0001a	2b c8		 sub	 ecx, eax
  0001c	8b c1		 mov	 eax, ecx
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  00023	89 01		 mov	 DWORD PTR [rcx], eax

; 97   : 
; 98   :     sres = (S32) *result;

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0002a	8b 00		 mov	 eax, DWORD PTR [rax]
  0002c	89 44 24 08	 mov	 DWORD PTR sres$[rsp], eax

; 99   :     sop1 = (S32) op1;

  00030	8b 44 24 38	 mov	 eax, DWORD PTR op1$[rsp]
  00034	89 44 24 04	 mov	 DWORD PTR sop1$[rsp], eax

; 100  :     sop2 = (S32) op2;

  00038	8b 44 24 40	 mov	 eax, DWORD PTR op2$[rsp]
  0003c	89 04 24	 mov	 DWORD PTR sop2$[rsp], eax

; 101  : 
; 102  :     return

  0003f	33 c0		 xor	 eax, eax
  00041	85 c0		 test	 eax, eax
  00043	75 64		 jne	 SHORT $LN4@sub_signed
  00045	83 3c 24 00	 cmp	 DWORD PTR sop2$[rsp], 0
  00049	7d 0e		 jge	 SHORT $LN3@sub_signed
  0004b	8b 04 24	 mov	 eax, DWORD PTR sop2$[rsp]
  0004e	05 ff ff ff 7f	 add	 eax, 2147483647		; 7fffffffH
  00053	39 44 24 04	 cmp	 DWORD PTR sop1$[rsp], eax
  00057	7f 50		 jg	 SHORT $LN4@sub_signed
$LN3@sub_signed:
  00059	83 3c 24 00	 cmp	 DWORD PTR sop2$[rsp], 0
  0005d	7e 0e		 jle	 SHORT $LN5@sub_signed
  0005f	8b 04 24	 mov	 eax, DWORD PTR sop2$[rsp]
  00062	2d 00 00 00 80	 sub	 eax, -2147483648	; ffffffff80000000H
  00067	39 44 24 04	 cmp	 DWORD PTR sop1$[rsp], eax
  0006b	7c 3c		 jl	 SHORT $LN4@sub_signed
$LN5@sub_signed:
  0006d	83 7c 24 08 00	 cmp	 DWORD PTR sres$[rsp], 0
  00072	7d 0a		 jge	 SHORT $LN8@sub_signed
  00074	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0007c	eb 21		 jmp	 SHORT $LN9@sub_signed
$LN8@sub_signed:
  0007e	83 7c 24 08 00	 cmp	 DWORD PTR sres$[rsp], 0
  00083	7e 0a		 jle	 SHORT $LN6@sub_signed
  00085	c7 44 24 0c 02
	00 00 00	 mov	 DWORD PTR tv74[rsp], 2
  0008d	eb 08		 jmp	 SHORT $LN7@sub_signed
$LN6@sub_signed:
  0008f	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN7@sub_signed:
  00097	8b 44 24 0c	 mov	 eax, DWORD PTR tv74[rsp]
  0009b	89 44 24 10	 mov	 DWORD PTR tv75[rsp], eax
$LN9@sub_signed:
  0009f	8b 44 24 10	 mov	 eax, DWORD PTR tv75[rsp]
  000a3	89 44 24 14	 mov	 DWORD PTR tv76[rsp], eax
  000a7	eb 08		 jmp	 SHORT $LN10@sub_signed
$LN4@sub_signed:
  000a9	c7 44 24 14 03
	00 00 00	 mov	 DWORD PTR tv76[rsp], 3
$LN10@sub_signed:
  000b1	8b 44 24 14	 mov	 eax, DWORD PTR tv76[rsp]

; 103  :     (0
; 104  :         || (sop2 < 0 && sop1 > (INT_MAX + sop2))
; 105  :         || (sop2 > 0 && sop1 < (INT_MIN + sop2))
; 106  :     )
; 107  :     ? 3 : (sres < 0 ? 1 : (sres > 0 ? 2 : 0));
; 108  : }

  000b5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b9	c3		 ret	 0
sub_signed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\inline.h
;	COMDAT sub_logical
_TEXT	SEGMENT
tv68 = 0
tv66 = 4
result$ = 32
op1$ = 40
op2$ = 48
sub_logical PROC					; COMDAT

; 55   : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 56   :     *result = op1 - op2;

  00012	8b 44 24 30	 mov	 eax, DWORD PTR op2$[rsp]
  00016	8b 4c 24 28	 mov	 ecx, DWORD PTR op1$[rsp]
  0001a	2b c8		 sub	 ecx, eax
  0001c	8b c1		 mov	 eax, ecx
  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00023	89 01		 mov	 DWORD PTR [rcx], eax

; 57   :     return (*result == 0 ? 0 : 1) | (op1 < *result ? 0 : 2);

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0002a	83 38 00	 cmp	 DWORD PTR [rax], 0
  0002d	75 0a		 jne	 SHORT $LN3@sub_logica
  0002f	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
  00037	eb 08		 jmp	 SHORT $LN4@sub_logica
$LN3@sub_logica:
  00039	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
$LN4@sub_logica:
  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  00046	8b 00		 mov	 eax, DWORD PTR [rax]
  00048	39 44 24 28	 cmp	 DWORD PTR op1$[rsp], eax
  0004c	73 09		 jae	 SHORT $LN5@sub_logica
  0004e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv68[rsp], 0
  00055	eb 07		 jmp	 SHORT $LN6@sub_logica
$LN5@sub_logica:
  00057	c7 04 24 02 00
	00 00		 mov	 DWORD PTR tv68[rsp], 2
$LN6@sub_logica:
  0005e	8b 04 24	 mov	 eax, DWORD PTR tv68[rsp]
  00061	8b 4c 24 04	 mov	 ecx, DWORD PTR tv66[rsp]
  00065	0b c8		 or	 ecx, eax
  00067	8b c1		 mov	 eax, ecx

; 58   : }

  00069	48 83 c4 18	 add	 rsp, 24
  0006d	c3		 ret	 0
sub_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_storage_key_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
bits$ = 72
s370_or_storage_key_by_ptr PROC				; COMDAT

; 328  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 329  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  00020	48 2b c8	 sub	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx
  00026	48 c1 e0 0b	 shl	 rax, 11
  0002a	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 330  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 331  :     ARCH_DEP( or_2K_storage_key )( abs, bits );

  0002f	0f b6 54 24 48	 movzx	 edx, BYTE PTR bits$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00039	e8 00 00 00 00	 call	 s370_or_2K_storage_key

; 332  : #else
; 333  :     ARCH_DEP( or_4K_storage_key )( abs, bits );
; 334  : #endif
; 335  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
s370_or_storage_key_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_or_storage_key PROC				; COMDAT

; 290  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 291  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 292  :     ARCH_DEP( or_2K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s370_or_2K_storage_key

; 293  : #else
; 294  :     ARCH_DEP( or_4K_storage_key )( abs, bits );
; 295  : #endif
; 296  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s370_or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_2K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_or_2K_storage_key PROC				; COMDAT

; 231  :   inline void  ARCH_DEP( or_2K_storage_key )      (              U64 abs, BYTE bits ) {        ARCH_DEP( _or_storage_key      )(      abs, bits & ~STORKEY_BADFRM, 2 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 02	 mov	 r8b, 2
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s370__or_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s370_or_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s370__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s370__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	0f b6 44 24 60	 movzx	 eax, BYTE PTR K$[rsp]
  0001d	83 f8 04	 cmp	 eax, 4
  00020	75 57		 jne	 SHORT $LN5@s370__or_s
  00022	33 c0		 xor	 eax, eax
  00024	83 f8 01	 cmp	 eax, 1
  00027	74 50		 je	 SHORT $LN5@s370__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00033	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0003d	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00042	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  00047	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00051	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00054	0b c8		 or	 ecx, eax
  00056	8b c1		 mov	 eax, ecx
  00058	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  0005d	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  0005f	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00069	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0006c	0b c8		 or	 ecx, eax
  0006e	8b c1		 mov	 eax, ecx
  00070	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00075	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  00077	eb 2c		 jmp	 SHORT $LN6@s370__or_s
$LN5@s370__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  00079	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00083	e8 00 00 00 00	 call	 _get_storekey_ptr
  00088	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  0008d	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00092	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00097	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0009a	0b c8		 or	 ecx, eax
  0009c	8b c1		 mov	 eax, ecx
  0009e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000a3	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s370__or_s:

; 202  :     }
; 203  : }

  000a5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a9	c3		 ret	 0
s370__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey2_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey2_ptr PROC					; COMDAT

; 60   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 61   :     ABS_CHECK( abs );
; 62   :     return &STOREKEY2( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 c8 01	 or	 rax, 1
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 63   : }

  00026	c3		 ret	 0
_get_storekey2_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey1_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey1_ptr PROC					; COMDAT

; 54   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 55   :     ABS_CHECK( abs );
; 56   :     return &STOREKEY1( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 e0 fe	 and	 rax, -2
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 57   : }

  00026	c3		 ret	 0
_get_storekey1_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey_ptr
_TEXT	SEGMENT
tv75 = 0
abs$ = 32
K$ = 40
_get_storekey_ptr PROC					; COMDAT

; 40   : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 41   :     ABS_CHECK( abs );
; 42   :     return (4 == K) ? &STOREKEY1( abs, &sysblk ) // (see feature.h PROGRAMMING NOTE)

  0000d	0f b6 44 24 28	 movzx	 eax, BYTE PTR K$[rsp]
  00012	83 f8 04	 cmp	 eax, 4
  00015	75 27		 jne	 SHORT $LN3@get_storek
  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  0001c	48 c1 e8 0b	 shr	 rax, 11
  00020	48 83 e0 fe	 and	 rax, -2
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0002b	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00032	48 03 c8	 add	 rcx, rax
  00035	48 8b c1	 mov	 rax, rcx
  00038	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
  0003c	eb 21		 jmp	 SHORT $LN4@get_storek
$LN3@get_storek:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  00043	48 c1 e8 0b	 shr	 rax, 11
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004e	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00055	48 03 c8	 add	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
$LN4@get_storek:
  0005f	48 8b 04 24	 mov	 rax, QWORD PTR tv75[rsp]

; 43   :                     : &STOREKEY(  abs, &sysblk );
; 44   : }

  00063	48 83 c4 18	 add	 rsp, 24
  00067	c3		 ret	 0
_get_storekey_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Release_Interrupt_Lock PROC

; 403  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Release_In:

; 404  :     UNREFERENCED( regs );

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@Release_In

; 405  :     sysblk.intowner = LOCK_OWNER_NONE;

  00014	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00020	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 406  :     hthread_release_lock( &sysblk.intlock, location );

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00034	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 407  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
Release_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Obtain_Interrupt_Lock PROC

; 379  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Obtain_Int

; 381  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Obtain_Int:

; 382  :     hthread_obtain_lock( &sysblk.intlock, location );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 383  :     Interrupt_Lock_Obtained( regs, location );

  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained

; 384  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Interrupt_Lock_Obtained PROC

; 347  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 348  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	0f 84 db 00 00
	00		 je	 $LN4@Interrupt_
$LN2@Interrupt_:

; 349  :     {
; 350  :         /* Wait for any SYNCHRONIZE_CPUS to finish before proceeding */
; 351  :         while (sysblk.syncing)

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8f 00 00
	00		 je	 $LN3@Interrupt_

; 352  :         {
; 353  :             /* Indicate we have reached the sync point */
; 354  :             sysblk.sync_mask &= ~HOSTREGS->cpubit;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00035	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0003c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00040	48 f7 d0	 not	 rax
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004a	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  00051	48 23 c8	 and	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005e	48 89 81 80 13
	00 00		 mov	 QWORD PTR [rcx+4992], rax

; 355  : 
; 356  :             /* If we're the last CPU to reach this sync point,
; 357  :                signal the CPU that requested the sync that it
; 358  :                may now safely proceed with its exclusive logic.
; 359  :             */
; 360  :             if (!sysblk.sync_mask)

  00065	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006c	48 83 b8 80 13
	00 00 00	 cmp	 QWORD PTR [rax+4992], 0
  00074	75 1b		 jne	 SHORT $LN6@Interrupt_

; 361  :                 hthread_signal_condition( &sysblk.all_synced_cond, location );

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007d	48 05 88 13 00
	00		 add	 rax, 5000		; 00001388H
  00083	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@Interrupt_:

; 362  : 
; 363  :             /* Wait for CPU that requested the sync to indicate
; 364  :                it's done and thus is now safe for us to proceed.
; 365  :             */
; 366  :             hthread_wait_condition( &sysblk.sync_done_cond, &sysblk.intlock, location );

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a5	48 81 c1 90 13
	00 00		 add	 rcx, 5008		; 00001390H
  000ac	4c 8b 44 24 38	 mov	 r8, QWORD PTR location$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 367  :         }

  000ba	e9 5b ff ff ff	 jmp	 $LN2@Interrupt_
$LN3@Interrupt_:

; 368  : 
; 369  :         HOSTREGS->intwait = false;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000c4	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000cb	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0

; 370  :         sysblk.intowner = HOSTREGS->cpuad;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e5	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  000ec	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 371  :     }

  000f3	eb 13		 jmp	 SHORT $LN5@Interrupt_
$LN4@Interrupt_:

; 372  :     else
; 373  :         sysblk.intowner = LOCK_OWNER_OTHER;

  000f5	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00101	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax
$LN5@Interrupt_:

; 374  : }

  00108	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010c	c3		 ret	 0
Interrupt_Lock_Obtained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_dw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_dw_noswap PROC					; COMDAT

; 834  :     inline void store_dw_noswap(void *ptr, U64 value) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 835  :       memcpy((BYTE *)ptr, (BYTE *)&value, 8);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR value$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :     }

  00017	c3		 ret	 0
store_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_dw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_dw_noswap PROC					; COMDAT

; 816  :     inline U64 fetch_dw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 817  :       U64 value;
; 818  :       memcpy(&value, (BYTE *)ptr, 8);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 04 24	 mov	 QWORD PTR value$[rsp], rax

; 819  :       return value;

  00015	48 8b 04 24	 mov	 rax, QWORD PTR value$[rsp]

; 820  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_fw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_fw_noswap PROC					; COMDAT

; 764  :     inline void store_fw_noswap(void *ptr, U32 value) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 765  :       memcpy((BYTE *)ptr, (BYTE *)&value, 4);

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR value$[rsp]
  00012	89 08		 mov	 DWORD PTR [rax], ecx

; 766  :     }

  00014	c3		 ret	 0
store_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT cmpxchg1_x86
_TEXT	SEGMENT
cc$ = 32
val4$ = 36
old4$ = 40
shift$ = 48
tv154 = 56
tv74 = 60
tv163 = 64
tv82 = 68
new4$ = 72
off$ = 80
ptr4$ = 88
old$ = 112
unew$ = 120
ptr$ = 128
cmpxchg1_x86 PROC					; COMDAT

; 113  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 114  :         // returns 0 == success, 1 otherwise
; 115  : 
; 116  :         LONG_PTR  off, shift;
; 117  :         BYTE  cc;
; 118  :         U32  *ptr4, val4, old4, new4;
; 119  : 
; 120  :         off   = (LONG_PTR)ptr & 3;

  00012	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0001a	48 83 e0 03	 and	 rax, 3
  0001e	48 89 44 24 50	 mov	 QWORD PTR off$[rsp], rax

; 121  :         shift = (3 - off) * 8;

  00023	b8 03 00 00 00	 mov	 eax, 3
  00028	48 2b 44 24 50	 sub	 rax, QWORD PTR off$[rsp]
  0002d	48 c1 e0 03	 shl	 rax, 3
  00031	48 89 44 24 30	 mov	 QWORD PTR shift$[rsp], rax

; 122  :         ptr4  = (U32*)(((BYTE*)ptr) - off);

  00036	48 8b 44 24 50	 mov	 rax, QWORD PTR off$[rsp]
  0003b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00043	48 2b c8	 sub	 rcx, rax
  00046	48 8b c1	 mov	 rax, rcx
  00049	48 89 44 24 58	 mov	 QWORD PTR ptr4$[rsp], rax

; 123  :         val4  = CSWAP32(*ptr4);

  0004e	48 8b 44 24 58	 mov	 rax, QWORD PTR ptr4$[rsp]
  00053	8b 08		 mov	 ecx, DWORD PTR [rax]
  00055	e8 00 00 00 00	 call	 _byteswap_ulong
  0005a	89 44 24 24	 mov	 DWORD PTR val4$[rsp], eax

; 124  : 
; 125  :         old4  = CSWAP32((val4 & ~(0xff << shift)) | (*old << shift));

  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR shift$[rsp]
  00063	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00068	89 4c 24 38	 mov	 DWORD PTR tv154[rsp], ecx
  0006c	0f b6 c8	 movzx	 ecx, al
  0006f	8b 44 24 38	 mov	 eax, DWORD PTR tv154[rsp]
  00073	d3 e0		 shl	 eax, cl
  00075	f7 d0		 not	 eax
  00077	8b 4c 24 24	 mov	 ecx, DWORD PTR val4$[rsp]
  0007b	23 c8		 and	 ecx, eax
  0007d	8b c1		 mov	 eax, ecx
  0007f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR old$[rsp]
  00084	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00087	89 4c 24 3c	 mov	 DWORD PTR tv74[rsp], ecx
  0008b	48 8b 54 24 30	 mov	 rdx, QWORD PTR shift$[rsp]
  00090	0f b6 ca	 movzx	 ecx, dl
  00093	8b 54 24 3c	 mov	 edx, DWORD PTR tv74[rsp]
  00097	d3 e2		 shl	 edx, cl
  00099	8b ca		 mov	 ecx, edx
  0009b	0b c1		 or	 eax, ecx
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 _byteswap_ulong
  000a4	89 44 24 28	 mov	 DWORD PTR old4$[rsp], eax

; 126  :         new4  = CSWAP32((val4 & ~(0xff << shift)) | ( unew << shift));

  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR shift$[rsp]
  000ad	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  000b2	89 4c 24 40	 mov	 DWORD PTR tv163[rsp], ecx
  000b6	0f b6 c8	 movzx	 ecx, al
  000b9	8b 44 24 40	 mov	 eax, DWORD PTR tv163[rsp]
  000bd	d3 e0		 shl	 eax, cl
  000bf	f7 d0		 not	 eax
  000c1	8b 4c 24 24	 mov	 ecx, DWORD PTR val4$[rsp]
  000c5	23 c8		 and	 ecx, eax
  000c7	8b c1		 mov	 eax, ecx
  000c9	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR unew$[rsp]
  000ce	89 4c 24 44	 mov	 DWORD PTR tv82[rsp], ecx
  000d2	48 8b 54 24 30	 mov	 rdx, QWORD PTR shift$[rsp]
  000d7	0f b6 ca	 movzx	 ecx, dl
  000da	8b 54 24 44	 mov	 edx, DWORD PTR tv82[rsp]
  000de	d3 e2		 shl	 edx, cl
  000e0	8b ca		 mov	 ecx, edx
  000e2	0b c1		 or	 eax, ecx
  000e4	8b c8		 mov	 ecx, eax
  000e6	e8 00 00 00 00	 call	 _byteswap_ulong
  000eb	89 44 24 48	 mov	 DWORD PTR new4$[rsp], eax

; 127  : 
; 128  :         cc    = cmpxchg4( &old4, new4, ptr4 );

  000ef	4c 8b 44 24 58	 mov	 r8, QWORD PTR ptr4$[rsp]
  000f4	8b 54 24 48	 mov	 edx, DWORD PTR new4$[rsp]
  000f8	48 8d 4c 24 28	 lea	 rcx, QWORD PTR old4$[rsp]
  000fd	e8 00 00 00 00	 call	 cmpxchg4_x86
  00102	88 44 24 20	 mov	 BYTE PTR cc$[rsp], al

; 129  : 
; 130  :         *old  = (CSWAP32(old4) >> shift) & 0xff;

  00106	8b 4c 24 28	 mov	 ecx, DWORD PTR old4$[rsp]
  0010a	e8 00 00 00 00	 call	 _byteswap_ulong
  0010f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR shift$[rsp]
  00114	d3 e8		 shr	 eax, cl
  00116	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0011b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR old$[rsp]
  00120	88 01		 mov	 BYTE PTR [rcx], al

; 131  : 
; 132  :         return cc;

  00122	0f b6 44 24 20	 movzx	 eax, BYTE PTR cc$[rsp]

; 133  :     }

  00127	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0012b	c3		 ret	 0
cmpxchg1_x86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT cmpxchg4_x86
_TEXT	SEGMENT
tv69 = 0
tv71 = 4
tmp$ = 8
old$ = 32
unew$ = 40
ptr$ = 48
cmpxchg4_x86 PROC					; COMDAT

; 104  :     {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 105  :         // returns 0 == success, 1 otherwise
; 106  :         U32 tmp = *old;

  00012	48 8b 44 24 20	 mov	 rax, QWORD PTR old$[rsp]
  00017	8b 00		 mov	 eax, DWORD PTR [rax]
  00019	89 44 24 08	 mov	 DWORD PTR tmp$[rsp], eax

; 107  :         *old = _InterlockedCompareExchange( ptr, unew, *old );

  0001d	8b 44 24 28	 mov	 eax, DWORD PTR unew$[rsp]
  00021	89 44 24 04	 mov	 DWORD PTR tv71[rsp], eax
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ptr$[rsp]
  0002a	48 8b 54 24 20	 mov	 rdx, QWORD PTR old$[rsp]
  0002f	8b 02		 mov	 eax, DWORD PTR [rdx]
  00031	8b 54 24 04	 mov	 edx, DWORD PTR tv71[rsp]
  00035	f0 0f b1 11	 lock cmpxchg DWORD PTR [rcx], edx
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old$[rsp]
  0003e	89 01		 mov	 DWORD PTR [rcx], eax

; 108  :         return ((tmp == *old) ? 0 : 1);

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR old$[rsp]
  00045	8b 00		 mov	 eax, DWORD PTR [rax]
  00047	39 44 24 08	 cmp	 DWORD PTR tmp$[rsp], eax
  0004b	75 09		 jne	 SHORT $LN3@cmpxchg4_x
  0004d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
  00054	eb 07		 jmp	 SHORT $LN4@cmpxchg4_x
$LN3@cmpxchg4_x:
  00056	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv69[rsp], 1
$LN4@cmpxchg4_x:
  0005d	0f b6 04 24	 movzx	 eax, BYTE PTR tv69[rsp]

; 109  :     }

  00061	48 83 c4 18	 add	 rsp, 24
  00065	c3		 ret	 0
cmpxchg4_x86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FFF PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FFF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FFF
$LN7@s370_1FFF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FFF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FFF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FFF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FFF:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FFF
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FFF
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FFF
$LN16@s370_1FFF:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FFF:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FFF
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FFF
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FFF
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FFF:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FFF
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FFF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FFE PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FFE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FFE
$LN7@s370_1FFE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FFE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FFE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FFE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FFE:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FFE
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FFE
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FFE
$LN16@s370_1FFE:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FFE:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FFE
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FFE
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FFE
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FFE:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FFE
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FFE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FFD PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FFD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FFD
$LN7@s370_1FFD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FFD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FFD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FFD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FFD:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FFD
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FFD
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FFD
$LN16@s370_1FFD:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FFD:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FFD
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FFD
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FFD
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FFD:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FFD
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FFD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FFC PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FFC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FFC
$LN7@s370_1FFC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FFC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FFC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FFC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FFC:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FFC
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FFC
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FFC
$LN16@s370_1FFC:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FFC:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FFC
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FFC
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FFC
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FFC:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FFC
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FFC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FFB PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FFB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FFB
$LN7@s370_1FFB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FFB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FFB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FFB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FFB:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FFB
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FFB
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FFB
$LN16@s370_1FFB:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FFB:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FFB
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FFB
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FFB
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FFB:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FFB
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FFB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FFA PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FFA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FFA
$LN7@s370_1FFA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FFA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FFA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FFA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FFA:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FFA
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FFA
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FFA
$LN16@s370_1FFA:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FFA:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FFA
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FFA
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FFA
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FFA:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FFA
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FFA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF9 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF9
$LN7@s370_1FF9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF9:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF9
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF9
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF9
$LN16@s370_1FF9:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF9:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF9
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF9
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF9
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF9:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF9
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF8 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF8
$LN7@s370_1FF8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF8:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF8
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF8
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF8
$LN16@s370_1FF8:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF8:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF8
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF8
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF8
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF8:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF8
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF7 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF7
$LN7@s370_1FF7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF7:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF7
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF7
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF7
$LN16@s370_1FF7:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF7:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF7
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF7
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF7
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF7:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF7
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF6 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF6
$LN7@s370_1FF6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF6:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF6
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF6
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF6
$LN16@s370_1FF6:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF6:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF6
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF6
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF6
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF6:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF6
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF5 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF5
$LN7@s370_1FF5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF5:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF5
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF5
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF5
$LN16@s370_1FF5:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF5:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF5
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF5
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF5
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF5:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF5
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF4 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF4
$LN7@s370_1FF4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF4:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF4
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF4
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF4
$LN16@s370_1FF4:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF4:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF4
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF4
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF4
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF4:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF4
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF3 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF3
$LN7@s370_1FF3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF3:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF3
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF3
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF3
$LN16@s370_1FF3:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF3:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF3
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF3
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF3
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF3:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF3
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF2 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF2
$LN7@s370_1FF2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF2:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF2
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF2
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF2
$LN16@s370_1FF2:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF2:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF2
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF2
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF2
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF2:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF2
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF1 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF1
$LN7@s370_1FF1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF1:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF1
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF1
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF1
$LN16@s370_1FF1:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF1:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF1
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF1
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF1
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF1:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF1
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FF0 PROC

; 1486 : SLRgenr2( F )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FF0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FF0
$LN7@s370_1FF0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FF0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FF0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FF0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0f	 imul	 rcx, rcx, 15
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0f	 imul	 rdx, rdx, 15
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FF0:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FF0
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FF0
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FF0
$LN16@s370_1FF0:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FF0:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FF0
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FF0
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 01	 and	 eax, 1
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FF0
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FF0:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FF0
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FF0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FEF PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FEF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FEF
$LN7@s370_1FEF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FEF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FEF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FEF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FEF:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FEF
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FEF
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FEF
$LN16@s370_1FEF:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FEF:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FEF
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FEF
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FEF
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FEF:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FEF
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FEF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FEE PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FEE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FEE
$LN7@s370_1FEE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FEE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FEE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FEE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FEE:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FEE
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FEE
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FEE
$LN16@s370_1FEE:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FEE:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FEE
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FEE
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FEE
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FEE:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FEE
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FEE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FED PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FED:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FED
$LN7@s370_1FED:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FED
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FED:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FED
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FED:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FED
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FED
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FED
$LN16@s370_1FED:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FED:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FED
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FED
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FED
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FED:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FED
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FED ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FEC PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FEC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FEC
$LN7@s370_1FEC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FEC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FEC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FEC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FEC:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FEC
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FEC
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FEC
$LN16@s370_1FEC:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FEC:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FEC
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FEC
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FEC
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FEC:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FEC
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FEC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FEB PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FEB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FEB
$LN7@s370_1FEB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FEB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FEB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FEB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FEB:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FEB
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FEB
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FEB
$LN16@s370_1FEB:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FEB:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FEB
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FEB
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FEB
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FEB:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FEB
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FEB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FEA PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FEA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FEA
$LN7@s370_1FEA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FEA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FEA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FEA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FEA:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FEA
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FEA
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FEA
$LN16@s370_1FEA:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FEA:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FEA
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FEA
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FEA
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FEA:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FEA
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FEA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE9 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE9
$LN7@s370_1FE9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE9:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE9
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE9
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE9
$LN16@s370_1FE9:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE9:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE9
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE9
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE9
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE9:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE9
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE8 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE8
$LN7@s370_1FE8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE8:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE8
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE8
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE8
$LN16@s370_1FE8:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE8:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE8
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE8
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE8
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE8:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE8
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE7 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE7
$LN7@s370_1FE7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE7:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE7
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE7
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE7
$LN16@s370_1FE7:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE7:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE7
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE7
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE7
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE7:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE7
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE6 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE6
$LN7@s370_1FE6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE6:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE6
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE6
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE6
$LN16@s370_1FE6:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE6:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE6
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE6
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE6
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE6:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE6
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE5 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE5
$LN7@s370_1FE5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE5:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE5
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE5
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE5
$LN16@s370_1FE5:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE5:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE5
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE5
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE5
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE5:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE5
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE4 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE4
$LN7@s370_1FE4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE4:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE4
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE4
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE4
$LN16@s370_1FE4:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE4:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE4
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE4
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE4
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE4:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE4
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE3 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE3
$LN7@s370_1FE3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE3:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE3
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE3
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE3
$LN16@s370_1FE3:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE3:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE3
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE3
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE3
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE3:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE3
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE2 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE2
$LN7@s370_1FE2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE2:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE2
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE2
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE2
$LN16@s370_1FE2:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE2:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE2
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE2
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE2
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE2:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE2
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE1 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE1
$LN7@s370_1FE1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE1:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE1
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE1
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE1
$LN16@s370_1FE1:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE1:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE1
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE1
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE1
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE1:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE1
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FE0 PROC

; 1485 : SLRgenr2( E )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FE0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FE0
$LN7@s370_1FE0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FE0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FE0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FE0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0e	 imul	 rcx, rcx, 14
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0e	 imul	 rdx, rdx, 14
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FE0:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FE0
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FE0
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FE0
$LN16@s370_1FE0:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FE0:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FE0
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FE0
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 02	 and	 eax, 2
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FE0
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FE0:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FE0
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FE0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FDF PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FDF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FDF
$LN7@s370_1FDF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FDF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FDF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FDF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FDF:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FDF
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FDF
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FDF
$LN16@s370_1FDF:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FDF:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FDF
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FDF
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FDF
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FDF:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FDF
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FDE PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FDE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FDE
$LN7@s370_1FDE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FDE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FDE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FDE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FDE:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FDE
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FDE
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FDE
$LN16@s370_1FDE:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FDE:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FDE
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FDE
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FDE
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FDE:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FDE
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FDE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FDD PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FDD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FDD
$LN7@s370_1FDD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FDD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FDD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FDD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FDD:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FDD
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FDD
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FDD
$LN16@s370_1FDD:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FDD:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FDD
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FDD
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FDD
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FDD:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FDD
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FDD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FDC PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FDC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FDC
$LN7@s370_1FDC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FDC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FDC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FDC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FDC:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FDC
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FDC
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FDC
$LN16@s370_1FDC:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FDC:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FDC
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FDC
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FDC
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FDC:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FDC
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FDC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FDB PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FDB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FDB
$LN7@s370_1FDB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FDB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FDB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FDB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FDB:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FDB
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FDB
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FDB
$LN16@s370_1FDB:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FDB:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FDB
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FDB
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FDB
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FDB:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FDB
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FDB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FDA PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FDA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FDA
$LN7@s370_1FDA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FDA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FDA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FDA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FDA:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FDA
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FDA
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FDA
$LN16@s370_1FDA:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FDA:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FDA
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FDA
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FDA
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FDA:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FDA
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FDA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD9 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD9
$LN7@s370_1FD9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD9:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD9
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD9
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD9
$LN16@s370_1FD9:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD9:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD9
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD9
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD9
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD9:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD9
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD8 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD8
$LN7@s370_1FD8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD8:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD8
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD8
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD8
$LN16@s370_1FD8:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD8:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD8
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD8
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD8
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD8:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD8
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD7 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD7
$LN7@s370_1FD7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD7:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD7
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD7
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD7
$LN16@s370_1FD7:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD7:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD7
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD7
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD7
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD7:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD7
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD6 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD6
$LN7@s370_1FD6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD6:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD6
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD6
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD6
$LN16@s370_1FD6:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD6:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD6
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD6
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD6
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD6:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD6
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD5 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD5
$LN7@s370_1FD5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD5:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD5
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD5
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD5
$LN16@s370_1FD5:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD5:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD5
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD5
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD5
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD5:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD5
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD4 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD4
$LN7@s370_1FD4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD4:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD4
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD4
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD4
$LN16@s370_1FD4:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD4:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD4
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD4
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD4
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD4:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD4
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD3 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD3
$LN7@s370_1FD3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD3:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD3
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD3
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD3
$LN16@s370_1FD3:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD3:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD3
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD3
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD3
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD3:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD3
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD2 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD2
$LN7@s370_1FD2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD2:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD2
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD2
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD2
$LN16@s370_1FD2:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD2:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD2
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD2
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD2
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD2:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD2
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD1 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD1
$LN7@s370_1FD1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD1:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD1
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD1
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD1
$LN16@s370_1FD1:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD1:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD1
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD1
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD1
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD1:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD1
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FD0 PROC

; 1484 : SLRgenr2( D )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FD0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FD0
$LN7@s370_1FD0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FD0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FD0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FD0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0d	 imul	 rcx, rcx, 13
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0d	 imul	 rdx, rdx, 13
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FD0:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FD0
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FD0
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FD0
$LN16@s370_1FD0:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FD0:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FD0
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FD0
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 04	 and	 eax, 4
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FD0
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FD0:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FD0
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FD0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FCF PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FCF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FCF
$LN7@s370_1FCF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FCF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FCF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FCF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FCF:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FCF
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FCF
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FCF
$LN16@s370_1FCF:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FCF:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FCF
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FCF
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FCF
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FCF:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FCF
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FCF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FCE PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FCE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FCE
$LN7@s370_1FCE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FCE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FCE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FCE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FCE:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FCE
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FCE
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FCE
$LN16@s370_1FCE:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FCE:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FCE
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FCE
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FCE
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FCE:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FCE
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FCE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FCD PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FCD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FCD
$LN7@s370_1FCD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FCD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FCD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FCD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FCD:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FCD
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FCD
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FCD
$LN16@s370_1FCD:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FCD:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FCD
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FCD
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FCD
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FCD:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FCD
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FCD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FCC PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FCC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FCC
$LN7@s370_1FCC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FCC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FCC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FCC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FCC:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FCC
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FCC
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FCC
$LN16@s370_1FCC:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FCC:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FCC
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FCC
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FCC
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FCC:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FCC
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FCC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FCB PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FCB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FCB
$LN7@s370_1FCB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FCB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FCB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FCB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FCB:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FCB
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FCB
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FCB
$LN16@s370_1FCB:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FCB:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FCB
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FCB
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FCB
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FCB:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FCB
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FCB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FCA PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FCA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FCA
$LN7@s370_1FCA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FCA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FCA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FCA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FCA:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FCA
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FCA
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FCA
$LN16@s370_1FCA:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FCA:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FCA
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FCA
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FCA
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FCA:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FCA
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FCA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC9 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC9
$LN7@s370_1FC9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC9:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC9
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC9
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC9
$LN16@s370_1FC9:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC9:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC9
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC9
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC9
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC9:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC9
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC8 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC8
$LN7@s370_1FC8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC8:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC8
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC8
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC8
$LN16@s370_1FC8:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC8:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC8
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC8
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC8
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC8:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC8
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC7 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC7
$LN7@s370_1FC7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC7:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC7
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC7
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC7
$LN16@s370_1FC7:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC7:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC7
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC7
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC7
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC7:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC7
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC6 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC6
$LN7@s370_1FC6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC6:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC6
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC6
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC6
$LN16@s370_1FC6:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC6:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC6
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC6
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC6
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC6:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC6
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC5 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC5
$LN7@s370_1FC5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC5:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC5
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC5
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC5
$LN16@s370_1FC5:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC5:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC5
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC5
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC5
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC5:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC5
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC4 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC4
$LN7@s370_1FC4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC4:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC4
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC4
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC4
$LN16@s370_1FC4:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC4:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC4
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC4
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC4
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC4:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC4
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC3 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC3
$LN7@s370_1FC3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC3:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC3
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC3
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC3
$LN16@s370_1FC3:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC3:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC3
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC3
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC3
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC3:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC3
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC2 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC2
$LN7@s370_1FC2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC2:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC2
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC2
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC2
$LN16@s370_1FC2:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC2:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC2
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC2
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC2
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC2:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC2
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC1 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC1
$LN7@s370_1FC1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC1:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC1
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC1
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC1
$LN16@s370_1FC1:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC1:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC1
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC1
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC1
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC1:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC1
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FC0 PROC

; 1483 : SLRgenr2( C )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FC0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FC0
$LN7@s370_1FC0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FC0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FC0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FC0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0c	 imul	 rcx, rcx, 12
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0c	 imul	 rdx, rdx, 12
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FC0:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FC0
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FC0
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FC0
$LN16@s370_1FC0:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FC0:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FC0
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FC0
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 08	 and	 eax, 8
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FC0
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FC0:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FC0
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FC0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FBF PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FBF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FBF
$LN7@s370_1FBF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FBF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FBF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FBF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FBF:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FBF
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FBF
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FBF
$LN16@s370_1FBF:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FBF:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FBF
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FBF
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FBF
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FBF:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FBF
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FBF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FBE PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FBE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FBE
$LN7@s370_1FBE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FBE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FBE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FBE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FBE:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FBE
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FBE
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FBE
$LN16@s370_1FBE:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FBE:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FBE
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FBE
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FBE
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FBE:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FBE
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FBE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FBD PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FBD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FBD
$LN7@s370_1FBD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FBD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FBD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FBD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FBD:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FBD
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FBD
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FBD
$LN16@s370_1FBD:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FBD:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FBD
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FBD
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FBD
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FBD:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FBD
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FBD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FBC PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FBC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FBC
$LN7@s370_1FBC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FBC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FBC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FBC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FBC:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FBC
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FBC
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FBC
$LN16@s370_1FBC:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FBC:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FBC
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FBC
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FBC
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FBC:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FBC
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FBC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FBB PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FBB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FBB
$LN7@s370_1FBB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FBB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FBB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FBB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FBB:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FBB
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FBB
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FBB
$LN16@s370_1FBB:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FBB:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FBB
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FBB
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FBB
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FBB:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FBB
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FBB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FBA PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FBA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FBA
$LN7@s370_1FBA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FBA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FBA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FBA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FBA:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FBA
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FBA
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FBA
$LN16@s370_1FBA:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FBA:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FBA
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FBA
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FBA
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FBA:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FBA
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FBA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB9 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB9
$LN7@s370_1FB9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB9:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB9
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB9
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB9
$LN16@s370_1FB9:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB9:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB9
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB9
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB9
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB9:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB9
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB8 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB8
$LN7@s370_1FB8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB8:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB8
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB8
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB8
$LN16@s370_1FB8:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB8:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB8
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB8
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB8
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB8:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB8
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB7 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB7
$LN7@s370_1FB7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB7:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB7
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB7
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB7
$LN16@s370_1FB7:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB7:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB7
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB7
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB7
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB7:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB7
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB6 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB6
$LN7@s370_1FB6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB6:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB6
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB6
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB6
$LN16@s370_1FB6:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB6:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB6
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB6
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB6
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB6:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB6
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB5 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB5
$LN7@s370_1FB5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB5:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB5
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB5
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB5
$LN16@s370_1FB5:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB5:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB5
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB5
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB5
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB5:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB5
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB4 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB4
$LN7@s370_1FB4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB4:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB4
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB4
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB4
$LN16@s370_1FB4:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB4:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB4
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB4
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB4
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB4:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB4
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB3 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB3
$LN7@s370_1FB3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB3:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB3
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB3
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB3
$LN16@s370_1FB3:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB3:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB3
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB3
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB3
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB3:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB3
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB2 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB2
$LN7@s370_1FB2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB2:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB2
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB2
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB2
$LN16@s370_1FB2:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB2:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB2
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB2
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB2
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB2:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB2
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB1 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB1
$LN7@s370_1FB1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB1:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB1
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB1
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB1
$LN16@s370_1FB1:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB1:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB1
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB1
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB1
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB1:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB1
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FB0 PROC

; 1482 : SLRgenr2( B )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FB0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FB0
$LN7@s370_1FB0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FB0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FB0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FB0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0b	 imul	 rcx, rcx, 11
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0b	 imul	 rdx, rdx, 11
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FB0:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FB0
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FB0
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FB0
$LN16@s370_1FB0:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FB0:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FB0
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FB0
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 10	 and	 eax, 16
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FB0
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FB0:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FB0
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FB0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FAF PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FAF:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FAF
$LN7@s370_1FAF:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FAF
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FAF:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FAF
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FAF:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FAF
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FAF
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FAF
$LN16@s370_1FAF:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FAF:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FAF
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FAF
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FAF
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FAF:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FAF
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FAF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FAE PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FAE:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FAE
$LN7@s370_1FAE:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FAE
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FAE:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FAE
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FAE:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FAE
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FAE
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FAE
$LN16@s370_1FAE:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FAE:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FAE
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FAE
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FAE
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FAE:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FAE
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FAE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FAD PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FAD:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FAD
$LN7@s370_1FAD:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FAD
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FAD:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FAD
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FAD:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FAD
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FAD
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FAD
$LN16@s370_1FAD:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FAD:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FAD
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FAD
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FAD
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FAD:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FAD
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FAD ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FAC PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FAC:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FAC
$LN7@s370_1FAC:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FAC
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FAC:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FAC
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FAC:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FAC
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FAC
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FAC
$LN16@s370_1FAC:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FAC:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FAC
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FAC
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FAC
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FAC:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FAC
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FAC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FAB PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FAB:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FAB
$LN7@s370_1FAB:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FAB
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FAB:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FAB
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FAB:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FAB
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FAB
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FAB
$LN16@s370_1FAB:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FAB:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FAB
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FAB
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FAB
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FAB:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FAB
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FAB ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FAA PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FAA:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FAA
$LN7@s370_1FAA:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FAA
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FAA:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FAA
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FAA:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FAA
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FAA
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FAA
$LN16@s370_1FAA:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FAA:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FAA
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FAA
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FAA
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FAA:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FAA
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FAA ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA9 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA9:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA9
$LN7@s370_1FA9:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA9
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA9:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA9
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA9:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA9
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA9
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA9
$LN16@s370_1FA9:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA9:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA9
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA9
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA9
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA9:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA9
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA9 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA8 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA8:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA8
$LN7@s370_1FA8:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA8
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA8:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA8
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA8:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA8
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA8
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA8
$LN16@s370_1FA8:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA8:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA8
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA8
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA8
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA8:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA8
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA7 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA7:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA7
$LN7@s370_1FA7:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA7
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA7:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA7
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA7:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA7
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA7
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA7
$LN16@s370_1FA7:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA7:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA7
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA7
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA7
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA7:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA7
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA7 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA6 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA6:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA6
$LN7@s370_1FA6:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA6
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA6:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA6
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA6:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA6
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA6
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA6
$LN16@s370_1FA6:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA6:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA6
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA6
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA6
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA6:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA6
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA5 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA5:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA5
$LN7@s370_1FA5:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA5
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA5:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA5
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA5:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA5
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA5
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA5
$LN16@s370_1FA5:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA5:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA5
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA5
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA5
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA5:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA5
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA4 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA4:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA4
$LN7@s370_1FA4:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA4
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA4:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA4
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA4:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA4
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA4
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA4
$LN16@s370_1FA4:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA4:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA4
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA4
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA4
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA4:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA4
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA3 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA3:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA3
$LN7@s370_1FA3:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA3
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA3:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA3
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA3:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA3
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA3
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA3
$LN16@s370_1FA3:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA3:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA3
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA3
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA3
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA3:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA3
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA2 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA2:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA2
$LN7@s370_1FA2:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA2
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA2:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA2
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA2:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA2
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA2
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA2
$LN16@s370_1FA2:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA2:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA2
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA2
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA2
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA2:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA2
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA1 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA1:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA1
$LN7@s370_1FA1:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA1
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA1:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA1
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA1:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA1
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA1
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA1
$LN16@s370_1FA1:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA1:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA1
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA1
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA1
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA1:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA1
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1FA0 PROC

; 1481 : SLRgenr2( A )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1FA0:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1FA0
$LN7@s370_1FA0:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1FA0
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1FA0:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1FA0
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 0a	 imul	 rcx, rcx, 10
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 0a	 imul	 rdx, rdx, 10
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1FA0:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1FA0
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1FA0
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1FA0
$LN16@s370_1FA0:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1FA0:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1FA0
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1FA0
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 20	 and	 eax, 32			; 00000020H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1FA0
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1FA0:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1FA0
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1FA0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F9F PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F9F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F9F
$LN7@s370_1F9F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F9F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F9F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F9F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F9F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F9F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F9F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F9F
$LN16@s370_1F9F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F9F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F9F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F9F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F9F
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F9F:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F9F
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F9F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F9E PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F9E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F9E
$LN7@s370_1F9E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F9E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F9E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F9E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F9E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F9E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F9E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F9E
$LN16@s370_1F9E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F9E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F9E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F9E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F9E
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F9E:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F9E
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F9E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F9D PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F9D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F9D
$LN7@s370_1F9D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F9D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F9D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F9D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F9D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F9D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F9D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F9D
$LN16@s370_1F9D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F9D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F9D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F9D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F9D
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F9D:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F9D
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F9D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F9C PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F9C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F9C
$LN7@s370_1F9C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F9C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F9C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F9C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F9C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F9C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F9C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F9C
$LN16@s370_1F9C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F9C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F9C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F9C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F9C
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F9C:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F9C
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F9C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F9B PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F9B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F9B
$LN7@s370_1F9B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F9B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F9B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F9B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F9B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F9B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F9B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F9B
$LN16@s370_1F9B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F9B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F9B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F9B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F9B
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F9B:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F9B
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F9B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F9A PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F9A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F9A
$LN7@s370_1F9A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F9A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F9A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F9A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F9A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F9A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F9A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F9A
$LN16@s370_1F9A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F9A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F9A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F9A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F9A
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F9A:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F9A
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F9A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F99 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F99:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F99
$LN7@s370_1F99:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F99
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F99:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F99
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F99:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F99
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F99
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F99
$LN16@s370_1F99:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F99:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F99
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F99
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F99
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F99:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F99
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F99 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F98 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F98:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F98
$LN7@s370_1F98:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F98
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F98:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F98
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F98:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F98
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F98
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F98
$LN16@s370_1F98:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F98:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F98
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F98
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F98
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F98:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F98
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F98 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F97 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F97:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F97
$LN7@s370_1F97:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F97
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F97:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F97
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F97:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F97
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F97
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F97
$LN16@s370_1F97:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F97:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F97
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F97
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F97
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F97:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F97
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F97 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F96 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F96:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F96
$LN7@s370_1F96:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F96
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F96:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F96
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F96:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F96
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F96
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F96
$LN16@s370_1F96:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F96:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F96
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F96
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F96
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F96:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F96
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F96 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F95 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F95:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F95
$LN7@s370_1F95:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F95
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F95:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F95
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F95:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F95
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F95
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F95
$LN16@s370_1F95:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F95:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F95
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F95
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F95
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F95:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F95
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F95 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F94 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F94:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F94
$LN7@s370_1F94:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F94
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F94:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F94
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F94:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F94
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F94
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F94
$LN16@s370_1F94:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F94:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F94
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F94
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F94
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F94:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F94
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F94 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F93 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F93:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F93
$LN7@s370_1F93:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F93
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F93:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F93
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F93:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F93
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F93
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F93
$LN16@s370_1F93:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F93:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F93
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F93
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F93
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F93:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F93
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F93 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F92 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F92:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F92
$LN7@s370_1F92:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F92
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F92:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F92
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F92:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F92
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F92
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F92
$LN16@s370_1F92:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F92:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F92
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F92
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F92
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F92:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F92
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F92 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F91 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F91:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F91
$LN7@s370_1F91:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F91
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F91:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F91
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F91:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F91
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F91
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F91
$LN16@s370_1F91:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F91:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F91
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F91
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F91
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F91:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F91
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F91 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F90 PROC

; 1480 : SLRgenr2( 9 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F90:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F90
$LN7@s370_1F90:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F90
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F90:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F90
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 09	 imul	 rcx, rcx, 9
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 09	 imul	 rdx, rdx, 9
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F90:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6a		 je	 SHORT $LN12@s370_1F90
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F90
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F90
$LN16@s370_1F90:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F90:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3c		 je	 SHORT $LN12@s370_1F90
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2b		 je	 SHORT $LN12@s370_1F90
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	83 e0 40	 and	 eax, 64			; 00000040H
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@s370_1F90
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F90:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 89		 jne	 SHORT $LN10@s370_1F90
  00115	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00119	c3		 ret	 0
s370_1F90 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F8F PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F8F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F8F
$LN7@s370_1F8F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F8F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F8F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F8F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F8F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F8F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F8F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F8F
$LN16@s370_1F8F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F8F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F8F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F8F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F8F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F8F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F8F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F8F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F8E PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F8E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F8E
$LN7@s370_1F8E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F8E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F8E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F8E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F8E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F8E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F8E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F8E
$LN16@s370_1F8E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F8E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F8E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F8E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F8E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F8E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F8E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F8E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F8D PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F8D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F8D
$LN7@s370_1F8D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F8D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F8D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F8D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F8D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F8D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F8D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F8D
$LN16@s370_1F8D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F8D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F8D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F8D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F8D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F8D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F8D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F8D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F8C PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F8C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F8C
$LN7@s370_1F8C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F8C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F8C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F8C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F8C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F8C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F8C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F8C
$LN16@s370_1F8C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F8C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F8C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F8C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F8C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F8C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F8C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F8C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F8B PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F8B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F8B
$LN7@s370_1F8B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F8B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F8B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F8B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F8B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F8B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F8B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F8B
$LN16@s370_1F8B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F8B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F8B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F8B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F8B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F8B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F8B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F8B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F8A PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F8A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F8A
$LN7@s370_1F8A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F8A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F8A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F8A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F8A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F8A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F8A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F8A
$LN16@s370_1F8A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F8A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F8A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F8A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F8A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F8A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F8A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F8A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F89 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F89:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F89
$LN7@s370_1F89:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F89
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F89:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F89
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F89:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F89
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F89
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F89
$LN16@s370_1F89:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F89:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F89
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F89
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F89
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F89:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F89
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F89 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F88 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F88:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F88
$LN7@s370_1F88:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F88
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F88:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F88
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F88:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F88
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F88
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F88
$LN16@s370_1F88:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F88:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F88
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F88
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F88
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F88:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F88
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F88 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F87 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F87:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F87
$LN7@s370_1F87:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F87
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F87:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F87
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F87:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F87
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F87
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F87
$LN16@s370_1F87:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F87:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F87
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F87
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F87
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F87:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F87
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F87 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F86 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F86:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F86
$LN7@s370_1F86:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F86
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F86:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F86
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F86:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F86
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F86
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F86
$LN16@s370_1F86:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F86:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F86
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F86
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F86
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F86:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F86
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F85 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F85:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F85
$LN7@s370_1F85:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F85
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F85:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F85
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F85:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F85
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F85
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F85
$LN16@s370_1F85:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F85:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F85
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F85
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F85
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F85:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F85
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F85 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F84 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F84:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F84
$LN7@s370_1F84:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F84
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F84:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F84
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F84:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F84
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F84
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F84
$LN16@s370_1F84:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F84:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F84
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F84
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F84
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F84:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F84
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F84 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F83 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F83:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F83
$LN7@s370_1F83:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F83
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F83:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F83
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F83:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F83
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F83
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F83
$LN16@s370_1F83:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F83:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F83
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F83
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F83
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F83:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F83
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F83 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F82 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F82:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F82
$LN7@s370_1F82:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F82
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F82:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F82
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F82:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F82
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F82
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F82
$LN16@s370_1F82:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F82:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F82
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F82
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F82
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F82:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F82
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F82 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F81 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F81:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F81
$LN7@s370_1F81:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F81
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F81:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F81
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F81:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F81
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F81
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F81
$LN16@s370_1F81:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F81:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F81
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F81
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F81
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F81:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F81
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F81 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F80 PROC

; 1479 : SLRgenr2( 8 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F80:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F80
$LN7@s370_1F80:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F80
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F80:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F80
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 08	 imul	 rcx, rcx, 8
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 08	 imul	 rdx, rdx, 8
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F80:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F80
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F80
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F80
$LN16@s370_1F80:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F80:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F80
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F80
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F80
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F80:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F80
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F80 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F7F PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F7F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F7F
$LN7@s370_1F7F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F7F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F7F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F7F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F7F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F7F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F7F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F7F
$LN16@s370_1F7F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F7F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F7F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F7F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F7F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F7F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F7F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F7F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F7E PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F7E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F7E
$LN7@s370_1F7E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F7E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F7E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F7E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F7E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F7E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F7E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F7E
$LN16@s370_1F7E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F7E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F7E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F7E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F7E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F7E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F7E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F7E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F7D PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F7D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F7D
$LN7@s370_1F7D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F7D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F7D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F7D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F7D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F7D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F7D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F7D
$LN16@s370_1F7D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F7D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F7D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F7D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F7D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F7D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F7D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F7D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F7C PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F7C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F7C
$LN7@s370_1F7C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F7C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F7C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F7C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F7C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F7C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F7C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F7C
$LN16@s370_1F7C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F7C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F7C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F7C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F7C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F7C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F7C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F7C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F7B PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F7B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F7B
$LN7@s370_1F7B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F7B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F7B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F7B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F7B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F7B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F7B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F7B
$LN16@s370_1F7B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F7B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F7B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F7B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F7B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F7B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F7B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F7B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F7A PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F7A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F7A
$LN7@s370_1F7A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F7A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F7A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F7A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F7A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F7A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F7A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F7A
$LN16@s370_1F7A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F7A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F7A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F7A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F7A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F7A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F7A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F7A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F79 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F79:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F79
$LN7@s370_1F79:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F79
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F79:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F79
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F79:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F79
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F79
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F79
$LN16@s370_1F79:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F79:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F79
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F79
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F79
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F79:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F79
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F79 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F78 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F78:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F78
$LN7@s370_1F78:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F78
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F78:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F78
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F78:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F78
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F78
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F78
$LN16@s370_1F78:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F78:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F78
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F78
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F78
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F78:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F78
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F78 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F77 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F77:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F77
$LN7@s370_1F77:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F77
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F77:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F77
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F77:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F77
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F77
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F77
$LN16@s370_1F77:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F77:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F77
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F77
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F77
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F77:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F77
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F77 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F76 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F76:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F76
$LN7@s370_1F76:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F76
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F76:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F76
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F76:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F76
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F76
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F76
$LN16@s370_1F76:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F76:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F76
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F76
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F76
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F76:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F76
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F76 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F75 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F75:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F75
$LN7@s370_1F75:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F75
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F75:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F75
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F75:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F75
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F75
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F75
$LN16@s370_1F75:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F75:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F75
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F75
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F75
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F75:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F75
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F75 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F74 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F74:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F74
$LN7@s370_1F74:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F74
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F74:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F74
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F74:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F74
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F74
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F74
$LN16@s370_1F74:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F74:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F74
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F74
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F74
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F74:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F74
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F74 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F73 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F73:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F73
$LN7@s370_1F73:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F73
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F73:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F73
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F73:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F73
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F73
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F73
$LN16@s370_1F73:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F73:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F73
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F73
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F73
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F73:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F73
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F73 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F72 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F72:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F72
$LN7@s370_1F72:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F72
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F72:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F72
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F72:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F72
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F72
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F72
$LN16@s370_1F72:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F72:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F72
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F72
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F72
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F72:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F72
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F72 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F71 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F71:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F71
$LN7@s370_1F71:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F71
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F71:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F71
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F71:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F71
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F71
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F71
$LN16@s370_1F71:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F71:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F71
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F71
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F71
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F71:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F71
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F71 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F70 PROC

; 1478 : SLRgenr2( 7 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F70:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F70
$LN7@s370_1F70:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F70
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F70:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F70
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 07	 imul	 rcx, rcx, 7
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 07	 imul	 rdx, rdx, 7
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F70:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F70
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F70
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F70
$LN16@s370_1F70:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F70:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F70
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F70
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F70
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F70:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F70
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F70 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F6F PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F6F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F6F
$LN7@s370_1F6F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F6F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F6F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F6F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F6F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F6F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F6F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F6F
$LN16@s370_1F6F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F6F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F6F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F6F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F6F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F6F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F6F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F6F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F6E PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F6E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F6E
$LN7@s370_1F6E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F6E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F6E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F6E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F6E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F6E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F6E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F6E
$LN16@s370_1F6E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F6E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F6E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F6E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F6E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F6E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F6E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F6E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F6D PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F6D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F6D
$LN7@s370_1F6D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F6D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F6D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F6D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F6D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F6D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F6D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F6D
$LN16@s370_1F6D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F6D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F6D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F6D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F6D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F6D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F6D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F6D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F6C PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F6C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F6C
$LN7@s370_1F6C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F6C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F6C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F6C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F6C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F6C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F6C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F6C
$LN16@s370_1F6C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F6C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F6C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F6C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F6C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F6C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F6C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F6C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F6B PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F6B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F6B
$LN7@s370_1F6B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F6B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F6B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F6B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F6B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F6B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F6B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F6B
$LN16@s370_1F6B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F6B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F6B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F6B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F6B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F6B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F6B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F6B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F6A PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F6A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F6A
$LN7@s370_1F6A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F6A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F6A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F6A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F6A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F6A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F6A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F6A
$LN16@s370_1F6A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F6A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F6A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F6A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F6A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F6A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F6A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F6A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F69 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F69:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F69
$LN7@s370_1F69:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F69
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F69:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F69
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F69:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F69
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F69
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F69
$LN16@s370_1F69:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F69:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F69
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F69
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F69
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F69:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F69
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F69 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F68 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F68:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F68
$LN7@s370_1F68:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F68
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F68:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F68
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F68:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F68
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F68
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F68
$LN16@s370_1F68:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F68:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F68
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F68
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F68
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F68:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F68
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F68 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F67 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F67:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F67
$LN7@s370_1F67:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F67
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F67:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F67
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F67:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F67
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F67
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F67
$LN16@s370_1F67:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F67:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F67
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F67
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F67
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F67:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F67
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F67 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F66 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F66:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F66
$LN7@s370_1F66:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F66
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F66:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F66
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F66:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F66
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F66
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F66
$LN16@s370_1F66:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F66:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F66
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F66
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F66
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F66:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F66
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F66 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F65 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F65:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F65
$LN7@s370_1F65:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F65
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F65:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F65
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F65:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F65
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F65
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F65
$LN16@s370_1F65:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F65:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F65
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F65
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F65
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F65:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F65
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F65 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F64 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F64:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F64
$LN7@s370_1F64:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F64
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F64:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F64
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F64:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F64
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F64
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F64
$LN16@s370_1F64:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F64:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F64
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F64
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F64
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F64:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F64
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F63 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F63:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F63
$LN7@s370_1F63:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F63
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F63:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F63
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F63:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F63
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F63
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F63
$LN16@s370_1F63:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F63:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F63
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F63
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F63
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F63:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F63
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F63 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F62 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F62:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F62
$LN7@s370_1F62:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F62
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F62:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F62
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F62:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F62
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F62
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F62
$LN16@s370_1F62:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F62:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F62
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F62
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F62
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F62:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F62
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F62 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F61 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F61:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F61
$LN7@s370_1F61:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F61
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F61:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F61
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F61:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F61
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F61
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F61
$LN16@s370_1F61:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F61:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F61
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F61
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F61
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F61:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F61
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F61 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F60 PROC

; 1477 : SLRgenr2( 6 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F60:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F60
$LN7@s370_1F60:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F60
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F60:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F60
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 06	 imul	 rcx, rcx, 6
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 06	 imul	 rdx, rdx, 6
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F60:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F60
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F60
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F60
$LN16@s370_1F60:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F60:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F60
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F60
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F60
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F60:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F60
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F60 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F5F PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F5F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F5F
$LN7@s370_1F5F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F5F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F5F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F5F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F5F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F5F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F5F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F5F
$LN16@s370_1F5F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F5F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F5F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F5F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F5F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F5F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F5F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F5F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F5E PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F5E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F5E
$LN7@s370_1F5E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F5E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F5E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F5E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F5E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F5E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F5E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F5E
$LN16@s370_1F5E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F5E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F5E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F5E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F5E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F5E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F5E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F5E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F5D PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F5D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F5D
$LN7@s370_1F5D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F5D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F5D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F5D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F5D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F5D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F5D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F5D
$LN16@s370_1F5D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F5D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F5D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F5D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F5D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F5D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F5D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F5D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F5C PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F5C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F5C
$LN7@s370_1F5C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F5C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F5C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F5C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F5C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F5C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F5C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F5C
$LN16@s370_1F5C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F5C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F5C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F5C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F5C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F5C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F5C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F5C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F5B PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F5B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F5B
$LN7@s370_1F5B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F5B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F5B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F5B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F5B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F5B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F5B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F5B
$LN16@s370_1F5B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F5B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F5B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F5B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F5B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F5B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F5B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F5B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F5A PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F5A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F5A
$LN7@s370_1F5A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F5A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F5A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F5A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F5A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F5A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F5A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F5A
$LN16@s370_1F5A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F5A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F5A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F5A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F5A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F5A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F5A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F5A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F59 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F59:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F59
$LN7@s370_1F59:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F59
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F59:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F59
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F59:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F59
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F59
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F59
$LN16@s370_1F59:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F59:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F59
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F59
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F59
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F59:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F59
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F59 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F58 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F58:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F58
$LN7@s370_1F58:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F58
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F58:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F58
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F58:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F58
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F58
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F58
$LN16@s370_1F58:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F58:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F58
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F58
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F58
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F58:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F58
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F58 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F57 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F57:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F57
$LN7@s370_1F57:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F57
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F57:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F57
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F57:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F57
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F57
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F57
$LN16@s370_1F57:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F57:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F57
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F57
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F57
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F57:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F57
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F57 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F56 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F56:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F56
$LN7@s370_1F56:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F56
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F56:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F56
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F56:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F56
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F56
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F56
$LN16@s370_1F56:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F56:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F56
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F56
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F56
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F56:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F56
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F56 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F55 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F55:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F55
$LN7@s370_1F55:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F55
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F55:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F55
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F55:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F55
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F55
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F55
$LN16@s370_1F55:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F55:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F55
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F55
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F55
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F55:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F55
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F55 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F54 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F54:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F54
$LN7@s370_1F54:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F54
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F54:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F54
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F54:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F54
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F54
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F54
$LN16@s370_1F54:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F54:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F54
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F54
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F54
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F54:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F54
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F54 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F53 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F53:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F53
$LN7@s370_1F53:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F53
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F53:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F53
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F53:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F53
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F53
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F53
$LN16@s370_1F53:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F53:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F53
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F53
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F53
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F53:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F53
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F53 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F52 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F52:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F52
$LN7@s370_1F52:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F52
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F52:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F52
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F52:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F52
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F52
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F52
$LN16@s370_1F52:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F52:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F52
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F52
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F52
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F52:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F52
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F52 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F51 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F51:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F51
$LN7@s370_1F51:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F51
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F51:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F51
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F51:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F51
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F51
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F51
$LN16@s370_1F51:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F51:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F51
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F51
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F51
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F51:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F51
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F51 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F50 PROC

; 1476 : SLRgenr2( 5 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F50:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F50
$LN7@s370_1F50:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F50
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F50:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F50
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 05	 imul	 rcx, rcx, 5
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 05	 imul	 rdx, rdx, 5
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F50:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F50
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F50
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F50
$LN16@s370_1F50:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F50:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F50
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F50
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F50
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F50:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F50
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F50 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F4F PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F4F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F4F
$LN7@s370_1F4F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F4F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F4F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F4F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F4F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F4F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F4F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F4F
$LN16@s370_1F4F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F4F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F4F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F4F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F4F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F4F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F4F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F4F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F4E PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F4E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F4E
$LN7@s370_1F4E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F4E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F4E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F4E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F4E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F4E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F4E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F4E
$LN16@s370_1F4E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F4E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F4E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F4E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F4E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F4E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F4E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F4E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F4D PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F4D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F4D
$LN7@s370_1F4D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F4D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F4D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F4D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F4D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F4D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F4D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F4D
$LN16@s370_1F4D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F4D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F4D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F4D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F4D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F4D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F4D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F4D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F4C PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F4C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F4C
$LN7@s370_1F4C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F4C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F4C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F4C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F4C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F4C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F4C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F4C
$LN16@s370_1F4C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F4C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F4C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F4C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F4C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F4C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F4C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F4C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F4B PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F4B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F4B
$LN7@s370_1F4B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F4B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F4B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F4B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F4B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F4B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F4B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F4B
$LN16@s370_1F4B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F4B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F4B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F4B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F4B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F4B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F4B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F4B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F4A PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F4A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F4A
$LN7@s370_1F4A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F4A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F4A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F4A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F4A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F4A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F4A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F4A
$LN16@s370_1F4A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F4A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F4A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F4A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F4A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F4A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F4A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F4A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F49 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F49:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F49
$LN7@s370_1F49:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F49
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F49:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F49
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F49:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F49
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F49
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F49
$LN16@s370_1F49:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F49:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F49
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F49
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F49
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F49:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F49
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F49 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F48 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F48:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F48
$LN7@s370_1F48:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F48
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F48:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F48
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F48:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F48
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F48
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F48
$LN16@s370_1F48:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F48:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F48
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F48
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F48
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F48:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F48
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F48 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F47 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F47:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F47
$LN7@s370_1F47:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F47
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F47:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F47
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F47:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F47
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F47
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F47
$LN16@s370_1F47:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F47:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F47
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F47
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F47
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F47:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F47
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F47 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F46 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F46:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F46
$LN7@s370_1F46:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F46
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F46:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F46
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F46:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F46
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F46
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F46
$LN16@s370_1F46:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F46:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F46
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F46
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F46
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F46:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F46
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F46 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F45 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F45:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F45
$LN7@s370_1F45:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F45
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F45:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F45
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F45:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F45
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F45
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F45
$LN16@s370_1F45:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F45:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F45
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F45
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F45
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F45:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F45
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F45 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F44 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F44:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F44
$LN7@s370_1F44:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F44
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F44:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F44
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F44:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F44
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F44
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F44
$LN16@s370_1F44:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F44:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F44
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F44
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F44
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F44:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F44
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F44 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F43 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F43:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F43
$LN7@s370_1F43:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F43
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F43:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F43
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F43:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F43
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F43
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F43
$LN16@s370_1F43:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F43:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F43
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F43
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F43
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F43:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F43
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F43 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F42 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F42:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F42
$LN7@s370_1F42:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F42
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F42:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F42
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F42:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F42
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F42
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F42
$LN16@s370_1F42:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F42:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F42
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F42
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F42
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F42:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F42
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F42 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F41 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F41:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F41
$LN7@s370_1F41:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F41
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F41:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F41
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F41:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F41
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F41
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F41
$LN16@s370_1F41:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F41:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F41
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F41
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F41
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F41:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F41
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F41 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F40 PROC

; 1475 : SLRgenr2( 4 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F40:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F40
$LN7@s370_1F40:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F40
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F40:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F40
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 04	 imul	 rcx, rcx, 4
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 04	 imul	 rdx, rdx, 4
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F40:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F40
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F40
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F40
$LN16@s370_1F40:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F40:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F40
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F40
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F40
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F40:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F40
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F40 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F3F PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F3F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F3F
$LN7@s370_1F3F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F3F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F3F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F3F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F3F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F3F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F3F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F3F
$LN16@s370_1F3F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F3F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F3F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F3F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F3F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F3F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F3F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F3F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F3E PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F3E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F3E
$LN7@s370_1F3E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F3E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F3E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F3E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F3E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F3E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F3E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F3E
$LN16@s370_1F3E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F3E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F3E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F3E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F3E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F3E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F3E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F3E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F3D PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F3D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F3D
$LN7@s370_1F3D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F3D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F3D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F3D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F3D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F3D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F3D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F3D
$LN16@s370_1F3D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F3D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F3D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F3D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F3D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F3D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F3D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F3D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F3C PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F3C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F3C
$LN7@s370_1F3C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F3C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F3C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F3C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F3C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F3C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F3C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F3C
$LN16@s370_1F3C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F3C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F3C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F3C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F3C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F3C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F3C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F3C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F3B PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F3B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F3B
$LN7@s370_1F3B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F3B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F3B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F3B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F3B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F3B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F3B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F3B
$LN16@s370_1F3B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F3B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F3B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F3B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F3B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F3B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F3B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F3B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F3A PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F3A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F3A
$LN7@s370_1F3A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F3A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F3A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F3A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F3A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F3A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F3A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F3A
$LN16@s370_1F3A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F3A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F3A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F3A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F3A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F3A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F3A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F3A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F39 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F39:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F39
$LN7@s370_1F39:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F39
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F39:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F39
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F39:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F39
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F39
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F39
$LN16@s370_1F39:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F39:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F39
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F39
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F39
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F39:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F39
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F39 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F38 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F38:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F38
$LN7@s370_1F38:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F38
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F38:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F38
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F38:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F38
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F38
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F38
$LN16@s370_1F38:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F38:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F38
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F38
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F38
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F38:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F38
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F38 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F37 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F37:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F37
$LN7@s370_1F37:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F37
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F37:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F37
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F37:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F37
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F37
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F37
$LN16@s370_1F37:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F37:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F37
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F37
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F37
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F37:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F37
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F37 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F36 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F36:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F36
$LN7@s370_1F36:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F36
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F36:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F36
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F36:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F36
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F36
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F36
$LN16@s370_1F36:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F36:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F36
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F36
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F36
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F36:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F36
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F36 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F35 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F35:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F35
$LN7@s370_1F35:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F35
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F35:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F35
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F35:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F35
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F35
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F35
$LN16@s370_1F35:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F35:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F35
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F35
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F35
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F35:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F35
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F35 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F34 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F34:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F34
$LN7@s370_1F34:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F34
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F34:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F34
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F34:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F34
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F34
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F34
$LN16@s370_1F34:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F34:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F34
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F34
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F34
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F34:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F34
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F34 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F33 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F33:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F33
$LN7@s370_1F33:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F33
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F33:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F33
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F33:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F33
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F33
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F33
$LN16@s370_1F33:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F33:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F33
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F33
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F33
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F33:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F33
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F33 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F32 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F32:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F32
$LN7@s370_1F32:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F32
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F32:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F32
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F32:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F32
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F32
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F32
$LN16@s370_1F32:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F32:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F32
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F32
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F32
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F32:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F32
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F31 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F31:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F31
$LN7@s370_1F31:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F31
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F31:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F31
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F31:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F31
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F31
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F31
$LN16@s370_1F31:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F31:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F31
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F31
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F31
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F31:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F31
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F31 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F30 PROC

; 1474 : SLRgenr2( 3 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F30:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F30
$LN7@s370_1F30:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F30
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F30:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F30
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 03	 imul	 rcx, rcx, 3
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 03	 imul	 rdx, rdx, 3
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F30:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F30
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F30
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F30
$LN16@s370_1F30:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F30:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F30
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F30
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F30
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F30:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F30
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F30 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F2F PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F2F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F2F
$LN7@s370_1F2F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F2F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F2F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F2F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F2F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F2F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F2F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F2F
$LN16@s370_1F2F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F2F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F2F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F2F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F2F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F2F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F2F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F2F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F2E PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F2E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F2E
$LN7@s370_1F2E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F2E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F2E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F2E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F2E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F2E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F2E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F2E
$LN16@s370_1F2E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F2E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F2E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F2E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F2E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F2E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F2E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F2E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F2D PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F2D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F2D
$LN7@s370_1F2D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F2D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F2D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F2D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F2D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F2D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F2D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F2D
$LN16@s370_1F2D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F2D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F2D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F2D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F2D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F2D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F2D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F2D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F2C PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F2C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F2C
$LN7@s370_1F2C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F2C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F2C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F2C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F2C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F2C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F2C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F2C
$LN16@s370_1F2C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F2C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F2C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F2C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F2C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F2C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F2C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F2C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F2B PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F2B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F2B
$LN7@s370_1F2B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F2B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F2B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F2B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F2B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F2B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F2B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F2B
$LN16@s370_1F2B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F2B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F2B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F2B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F2B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F2B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F2B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F2B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F2A PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F2A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F2A
$LN7@s370_1F2A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F2A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F2A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F2A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F2A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F2A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F2A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F2A
$LN16@s370_1F2A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F2A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F2A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F2A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F2A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F2A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F2A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F2A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F29 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F29:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F29
$LN7@s370_1F29:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F29
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F29:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F29
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F29:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F29
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F29
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F29
$LN16@s370_1F29:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F29:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F29
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F29
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F29
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F29:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F29
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F29 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F28 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F28:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F28
$LN7@s370_1F28:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F28
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F28:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F28
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F28:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F28
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F28
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F28
$LN16@s370_1F28:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F28:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F28
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F28
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F28
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F28:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F28
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F28 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F27 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F27:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F27
$LN7@s370_1F27:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F27
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F27:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F27
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F27:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F27
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F27
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F27
$LN16@s370_1F27:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F27:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F27
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F27
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F27
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F27:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F27
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F27 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F26 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F26:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F26
$LN7@s370_1F26:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F26
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F26:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F26
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F26:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F26
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F26
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F26
$LN16@s370_1F26:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F26:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F26
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F26
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F26
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F26:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F26
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F26 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F25 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F25:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F25
$LN7@s370_1F25:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F25
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F25:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F25
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F25:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F25
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F25
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F25
$LN16@s370_1F25:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F25:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F25
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F25
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F25
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F25:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F25
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F25 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F24 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F24:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F24
$LN7@s370_1F24:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F24
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F24:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F24
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F24:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F24
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F24
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F24
$LN16@s370_1F24:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F24:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F24
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F24
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F24
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F24:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F24
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F24 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F23 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F23:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F23
$LN7@s370_1F23:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F23
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F23:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F23
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F23:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F23
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F23
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F23
$LN16@s370_1F23:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F23:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F23
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F23
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F23
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F23:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F23
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F23 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F22 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F22:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F22
$LN7@s370_1F22:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F22
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F22:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F22
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F22:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F22
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F22
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F22
$LN16@s370_1F22:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F22:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F22
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F22
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F22
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F22:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F22
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F22 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F21 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F21:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F21
$LN7@s370_1F21:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F21
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F21:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F21
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F21:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F21
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F21
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F21
$LN16@s370_1F21:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F21:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F21
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F21
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F21
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F21:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F21
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F21 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F20 PROC

; 1473 : SLRgenr2( 2 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F20:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F20
$LN7@s370_1F20:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F20
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F20:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F20
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 02	 imul	 rcx, rcx, 2
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 02	 imul	 rdx, rdx, 2
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F20:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F20
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F20
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F20
$LN16@s370_1F20:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F20:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F20
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F20
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F20
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F20:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F20
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F1F PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F1F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F1F
$LN7@s370_1F1F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F1F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F1F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F1F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F1F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F1F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F1F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F1F
$LN16@s370_1F1F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F1F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F1F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F1F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F1F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F1F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F1F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F1F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F1E PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F1E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F1E
$LN7@s370_1F1E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F1E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F1E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F1E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F1E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F1E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F1E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F1E
$LN16@s370_1F1E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F1E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F1E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F1E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F1E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F1E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F1E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F1E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F1D PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F1D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F1D
$LN7@s370_1F1D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F1D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F1D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F1D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F1D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F1D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F1D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F1D
$LN16@s370_1F1D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F1D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F1D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F1D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F1D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F1D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F1D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F1D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F1C PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F1C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F1C
$LN7@s370_1F1C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F1C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F1C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F1C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F1C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F1C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F1C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F1C
$LN16@s370_1F1C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F1C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F1C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F1C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F1C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F1C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F1C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F1C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F1B PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F1B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F1B
$LN7@s370_1F1B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F1B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F1B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F1B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F1B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F1B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F1B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F1B
$LN16@s370_1F1B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F1B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F1B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F1B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F1B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F1B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F1B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F1B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F1A PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F1A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F1A
$LN7@s370_1F1A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F1A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F1A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F1A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F1A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F1A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F1A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F1A
$LN16@s370_1F1A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F1A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F1A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F1A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F1A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F1A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F1A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F1A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F19 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F19:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F19
$LN7@s370_1F19:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F19
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F19:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F19
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F19:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F19
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F19
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F19
$LN16@s370_1F19:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F19:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F19
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F19
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F19
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F19:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F19
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F19 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F18 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F18:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F18
$LN7@s370_1F18:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F18
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F18:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F18
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F18:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F18
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F18
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F18
$LN16@s370_1F18:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F18:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F18
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F18
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F18
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F18:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F18
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F18 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F17 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F17:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F17
$LN7@s370_1F17:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F17
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F17:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F17
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F17:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F17
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F17
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F17
$LN16@s370_1F17:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F17:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F17
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F17
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F17
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F17:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F17
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F17 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F16 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F16:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F16
$LN7@s370_1F16:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F16
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F16:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F16
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F16:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F16
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F16
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F16
$LN16@s370_1F16:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F16:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F16
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F16
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F16
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F16:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F16
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F15 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F15:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F15
$LN7@s370_1F15:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F15
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F15:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F15
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F15:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F15
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F15
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F15
$LN16@s370_1F15:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F15:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F15
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F15
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F15
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F15:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F15
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F15 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F14 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F14:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F14
$LN7@s370_1F14:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F14
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F14:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F14
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F14:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F14
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F14
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F14
$LN16@s370_1F14:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F14:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F14
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F14
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F14
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F14:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F14
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F14 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F13 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F13:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F13
$LN7@s370_1F13:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F13
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F13:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F13
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F13:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F13
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F13
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F13
$LN16@s370_1F13:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F13:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F13
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F13
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F13
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F13:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F13
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F13 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F12 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F12:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F12
$LN7@s370_1F12:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F12
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F12:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F12
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F12:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F12
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F12
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F12
$LN16@s370_1F12:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F12:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F12
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F12
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F12
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F12:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F12
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F11 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F11:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F11
$LN7@s370_1F11:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F11
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F11:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F11
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F11:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F11
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F11
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F11
$LN16@s370_1F11:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F11:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F11
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F11
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F11
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F11:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F11
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F11 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F10 PROC

; 1472 : SLRgenr2( 1 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F10:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F10
$LN7@s370_1F10:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F10
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F10:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F10
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 01	 imul	 rcx, rcx, 1
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 01	 imul	 rdx, rdx, 1
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F10:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F10
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F10
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F10
$LN16@s370_1F10:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F10:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F10
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F10
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F10
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F10:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F10
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F0F PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F0F:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F0F
$LN7@s370_1F0F:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F0F
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F0F:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F0F
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0f	 imul	 rax, rax, 15
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F0F:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F0F
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F0F
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F0F
$LN16@s370_1F0F:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F0F:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F0F
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F0F
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F0F
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F0F:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F0F
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F0F ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F0E PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F0E:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F0E
$LN7@s370_1F0E:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F0E
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F0E:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F0E
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0e	 imul	 rax, rax, 14
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F0E:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F0E
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F0E
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F0E
$LN16@s370_1F0E:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F0E:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F0E
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F0E
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F0E
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F0E:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F0E
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F0E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F0D PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F0D:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F0D
$LN7@s370_1F0D:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F0D
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F0D:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F0D
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0d	 imul	 rax, rax, 13
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F0D:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F0D
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F0D
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F0D
$LN16@s370_1F0D:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F0D:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F0D
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F0D
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F0D
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F0D:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F0D
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F0D ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F0C PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F0C:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F0C
$LN7@s370_1F0C:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F0C
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F0C:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F0C
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0c	 imul	 rax, rax, 12
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F0C:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F0C
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F0C
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F0C
$LN16@s370_1F0C:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F0C:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F0C
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F0C
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F0C
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F0C:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F0C
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F0C ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F0B PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F0B:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F0B
$LN7@s370_1F0B:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F0B
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F0B:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F0B
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0b	 imul	 rax, rax, 11
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F0B:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F0B
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F0B
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F0B
$LN16@s370_1F0B:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F0B:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F0B
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F0B
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F0B
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F0B:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F0B
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F0B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F0A PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F0A:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F0A
$LN7@s370_1F0A:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F0A
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F0A:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F0A
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 0a	 imul	 rax, rax, 10
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F0A:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F0A
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F0A
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F0A
$LN16@s370_1F0A:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F0A:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F0A
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F0A
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F0A
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F0A:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F0A
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F0A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F09 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F09:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F09
$LN7@s370_1F09:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F09
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F09:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F09
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 09	 imul	 rax, rax, 9
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F09:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F09
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F09
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F09
$LN16@s370_1F09:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F09:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F09
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F09
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F09
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F09:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F09
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F09 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F08 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F08:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F08
$LN7@s370_1F08:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F08
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F08:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F08
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 08	 imul	 rax, rax, 8
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F08:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F08
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F08
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F08
$LN16@s370_1F08:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F08:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F08
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F08
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F08
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F08:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F08
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F08 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F07 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F07:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F07
$LN7@s370_1F07:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F07
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F07:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F07
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 07	 imul	 rax, rax, 7
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F07:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F07
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F07
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F07
$LN16@s370_1F07:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F07:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F07
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F07
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F07
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F07:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F07
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F07 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F06 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F06:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F06
$LN7@s370_1F06:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F06
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F06:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F06
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 06	 imul	 rax, rax, 6
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F06:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F06
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F06
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F06
$LN16@s370_1F06:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F06:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F06
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F06
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F06
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F06:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F06
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F06 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F05 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F05:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F05
$LN7@s370_1F05:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F05
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F05:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F05
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 05	 imul	 rax, rax, 5
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F05:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F05
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F05
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F05
$LN16@s370_1F05:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F05:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F05
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F05
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F05
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F05:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F05
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F05 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F04 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F04:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F04
$LN7@s370_1F04:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F04
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F04:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F04
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 04	 imul	 rax, rax, 4
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F04:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F04
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F04
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F04
$LN16@s370_1F04:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F04:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F04
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F04
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F04
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F04:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F04
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F04 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F03 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F03:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F03
$LN7@s370_1F03:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F03
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F03:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F03
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 03	 imul	 rax, rax, 3
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F03:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F03
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F03
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F03
$LN16@s370_1F03:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F03:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F03
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F03
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F03
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F03:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F03
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F03 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F02 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F02:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F02
$LN7@s370_1F02:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F02
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F02:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F02
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 02	 imul	 rax, rax, 2
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F02:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F02
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F02
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F02
$LN16@s370_1F02:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F02:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F02
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F02
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F02
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F02:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F02
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F02 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F01 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F01:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F01
$LN7@s370_1F01:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F01
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F01:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F01
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 01	 imul	 rax, rax, 1
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F01:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F01
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F01
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F01
$LN16@s370_1F01:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F01:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F01
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F01
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F01
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F01:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F01
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F01 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tv132 = 32
tv86 = 40
inst$ = 64
regs$ = 72
s370_1F00 PROC

; 1471 : SLRgenr2( 0 )

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370_1F00:
  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@s370_1F00
$LN7@s370_1F00:
  00014	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00019	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001d	48 83 c0 02	 add	 rax, 2
  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00026	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0002a	33 c0		 xor	 eax, eax
  0002c	83 f8 02	 cmp	 eax, 2
  0002f	74 0c		 je	 SHORT $LN11@s370_1F00
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00036	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_1F00:
  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 d1		 jne	 SHORT $LN7@s370_1F00
  00043	b8 08 00 00 00	 mov	 eax, 8
  00048	48 6b c0 00	 imul	 rax, rax, 0
  0004c	b9 08 00 00 00	 mov	 ecx, 8
  00051	48 6b c9 00	 imul	 rcx, rcx, 0
  00055	ba 08 00 00 00	 mov	 edx, 8
  0005a	48 6b d2 00	 imul	 rdx, rdx, 0
  0005e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00063	49 8d 94 10 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx+640]
  0006b	48 89 54 24 28	 mov	 QWORD PTR tv86[rsp], rdx
  00070	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  00075	45 8b 84 00 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax+640]
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00082	8b 94 08 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx+640]
  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR tv86[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 sub_logical
  00096	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_1F00:
  0009e	33 c0		 xor	 eax, eax
  000a0	83 f8 01	 cmp	 eax, 1
  000a3	74 6c		 je	 SHORT $LN12@s370_1F00
  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000aa	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000b0	c1 e8 02	 shr	 eax, 2
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN16@s370_1F00
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN17@s370_1F00
$LN16@s370_1F00:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN17@s370_1F00:
  000cc	83 7c 24 20 00	 cmp	 DWORD PTR tv132[rsp], 0
  000d1	74 3e		 je	 SHORT $LN12@s370_1F00
  000d3	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000d8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000db	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  000e0	85 c0		 test	 eax, eax
  000e2	74 2d		 je	 SHORT $LN12@s370_1F00
  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 0a	 imul	 rax, rax, 10
  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  000f9	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00103	85 c0		 test	 eax, eax
  00105	74 0a		 je	 SHORT $LN12@s370_1F00
  00107	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_1F00:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 87		 jne	 SHORT $LN10@s370_1F00
  00117	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011b	c3		 ret	 0
s370_1F00 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9101 PROC

; 1720 : TMgen( 01 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9101
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9101:
$LN4@s370_9101:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9101
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9101:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9101
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN7@s370_9101
  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c3	eb 09		 jmp	 SHORT $LN8@s370_9101
$LN7@s370_9101:
  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9101:
  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
s370_9101 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9102 PROC

; 1719 : TMgen( 02 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9102
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9102:
$LN4@s370_9102:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9102
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9102:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9102
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	83 e0 02	 and	 eax, 2
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN7@s370_9102
  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c3	eb 09		 jmp	 SHORT $LN8@s370_9102
$LN7@s370_9102:
  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9102:
  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
s370_9102 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9104 PROC

; 1718 : TMgen( 04 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9104
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9104:
$LN4@s370_9104:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9104
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9104:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9104
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	83 e0 04	 and	 eax, 4
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN7@s370_9104
  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c3	eb 09		 jmp	 SHORT $LN8@s370_9104
$LN7@s370_9104:
  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9104:
  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
s370_9104 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9108 PROC

; 1717 : TMgen( 08 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9108
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9108:
$LN4@s370_9108:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9108
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9108:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9108
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	83 e0 08	 and	 eax, 8
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN7@s370_9108
  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c3	eb 09		 jmp	 SHORT $LN8@s370_9108
$LN7@s370_9108:
  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9108:
  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
s370_9108 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9110 PROC

; 1716 : TMgen( 10 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9110
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9110:
$LN4@s370_9110:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9110
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9110:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9110
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	83 e0 10	 and	 eax, 16
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN7@s370_9110
  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c3	eb 09		 jmp	 SHORT $LN8@s370_9110
$LN7@s370_9110:
  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9110:
  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
s370_9110 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9120 PROC

; 1715 : TMgen( 20 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9120
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9120:
$LN4@s370_9120:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9120
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9120:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9120
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	83 e0 20	 and	 eax, 32			; 00000020H
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN7@s370_9120
  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c3	eb 09		 jmp	 SHORT $LN8@s370_9120
$LN7@s370_9120:
  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9120:
  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
s370_9120 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9140 PROC

; 1714 : TMgen( 40 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9140
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9140:
$LN4@s370_9140:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9140
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9140:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9140
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	83 e0 40	 and	 eax, 64			; 00000040H
  000b6	85 c0		 test	 eax, eax
  000b8	74 0b		 je	 SHORT $LN7@s370_9140
  000ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000bf	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c3	eb 09		 jmp	 SHORT $LN8@s370_9140
$LN7@s370_9140:
  000c5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9140:
  000ce	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d2	c3		 ret	 0
s370_9140 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 32
b1$ = 36
temp$1 = 40
inst$ = 64
regs$ = 72
s370_9180 PROC

; 1713 : TMgen( 80 )

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 24	 mov	 DWORD PTR b1$[rsp], eax
  0003e	83 7c 24 24 00	 cmp	 DWORD PTR b1$[rsp], 0
  00043	74 2a		 je	 SHORT $LN5@s370_9180
  00045	48 63 44 24 24	 movsxd	 rax, DWORD PTR b1$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00062	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 20	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_9180:
$LN4@s370_9180:
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN6@s370_9180
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_9180:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_9180
  0009e	4c 8b 44 24 48	 mov	 r8, QWORD PTR regs$[rsp]
  000a3	8b 54 24 24	 mov	 edx, DWORD PTR b1$[rsp]
  000a7	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_vfetchb
  000b0	0f b6 c0	 movzx	 eax, al
  000b3	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000b8	85 c0		 test	 eax, eax
  000ba	74 0b		 je	 SHORT $LN7@s370_9180
  000bc	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000c1	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
  000c5	eb 09		 jmp	 SHORT $LN8@s370_9180
$LN7@s370_9180:
  000c7	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000cc	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_9180:
  000d0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d4	c3		 ret	 0
s370_9180 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
rmask$ = 32
nodeaddr$ = 36
nodecode$ = 40
index$ = 44
tv185 = 48
nodedata$ = 52
tv253 = 56
inst$ = 80
regs$ = 88
s370_update_tree PROC

; 2168 : {

$LN35:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2169 : GREG    index;                          /* tree index                */
; 2170 : GREG    nodecode;                       /* current node's codeword   */
; 2171 : GREG    nodedata;                       /* current node's other data */
; 2172 : VADR    nodeaddr;                       /* work addr of current node */
; 2173 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2174 : BYTE    a64 = regs->psw.amode64;        /* 64-bit mode flag          */
; 2175 : #endif
; 2176 : #if defined( FEATURE_PER1 )
; 2177 : U16     rmask = 0x0000;

  0000e	33 c0		 xor	 eax, eax
  00010	66 89 44 24 20	 mov	 WORD PTR rmask$[rsp], ax
$LN4@s370_updat:

; 2178 : #endif
; 2179 : 
; 2180 :     E(inst, regs);

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@s370_updat
$LN7@s370_updat:
  0001b	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00020	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00024	48 83 c0 02	 add	 rax, 2
  00028	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0002d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00031	33 c0		 xor	 eax, eax
  00033	83 f8 02	 cmp	 eax, 2
  00036	74 0c		 je	 SHORT $LN17@s370_updat
  00038	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0003d	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN17@s370_updat:
  00044	33 c0		 xor	 eax, eax
  00046	85 c0		 test	 eax, eax
  00048	75 d1		 jne	 SHORT $LN7@s370_updat

; 2181 :     PER_ZEROADDR_CHECK( regs, 4 );
; 2182 : 
; 2183 :     TXFC_INSTR_CHECK( regs );
; 2184 : 
; 2185 :     /*
; 2186 :     **  GR0, GR1    node values (codeword and other data) of node
; 2187 :     **              with "highest encountered codeword value"
; 2188 :     **  GR2, GR3    node values (codeword and other data) from whichever
; 2189 :     **              node we happened to have encountered that had a code-
; 2190 :     **              word value equal to our current "highest encountered
; 2191 :     **              codeword value" (e.g. GR0)  (cc0 only)
; 2192 :     **  GR4         pointer to one node BEFORE the beginning of the tree
; 2193 :     **  GR5         current node index (tree displacement to current node)
; 2194 :     */
; 2195 : 
; 2196 :     /* Check GR4, GR5 for proper alignment */
; 2197 :     if (0
; 2198 :         || ( GR_A(4,regs) & UPT_ALIGN_MASK )
; 2199 :         || ( GR_A(5,regs) & UPT_ALIGN_MASK )

  0004a	33 c0		 xor	 eax, eax
  0004c	85 c0		 test	 eax, eax
  0004e	75 38		 jne	 SHORT $LN19@s370_updat
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 04	 imul	 rax, rax, 4
  00059	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0005e	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00065	83 e0 07	 and	 eax, 7
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN19@s370_updat
  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 05	 imul	 rax, rax, 5
  00075	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0007a	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00081	83 e0 07	 and	 eax, 7
  00084	85 c0		 test	 eax, eax
  00086	74 15		 je	 SHORT $LN18@s370_updat
$LN19@s370_updat:

; 2200 :     )
; 2201 :         regs->program_interrupt (regs, PGM_SPECIFICATION_EXCEPTION);

  00088	ba 06 00 00 00	 mov	 edx, 6
  0008d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00092	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00097	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_updat:
$LN8@s370_updat:

; 2202 : 
; 2203 :     /* Bubble the tree by moving successively higher nodes towards the
; 2204 :        front (beginning) of the tree, only stopping whenever we either:
; 2205 : 
; 2206 :             1. reach the beginning of the tree, -OR-
; 2207 :             2. encounter a node with a negative codeword value, -OR-
; 2208 :             3. encounter a node whose codeword is equal to
; 2209 :                our current "highest encountered codeword".
; 2210 : 
; 2211 :        Thus, when we're done, GR0 & GR1 will then contain the node values
; 2212 :        of the node with the highest encountered codeword value, and all
; 2213 :        other traversed nodes will have been reordered into descending code-
; 2214 :        word sequence (i.e. from highest codeword value to lowest codeword
; 2215 :        value; this is after all an instruction used for sorting/merging).
; 2216 :     */
; 2217 : 
; 2218 :     for (;;)
; 2219 :     {
; 2220 :         /* Calculate index value of next node to be examined (half
; 2221 :            as far from beginning of tree to where we currently are)
; 2222 :         */
; 2223 :         index = (GR_A(5,regs) >> 1) & UPT_SHIFT_MASK;

  0009d	b8 08 00 00 00	 mov	 eax, 8
  000a2	48 6b c0 05	 imul	 rax, rax, 5
  000a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000ab	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  000b2	d1 e8		 shr	 eax, 1
  000b4	83 e0 f8	 and	 eax, -8			; fffffff8H
  000b7	89 44 24 2c	 mov	 DWORD PTR index$[rsp], eax

; 2224 : 
; 2225 :         /* Exit with cc1 when we've gone as far as we can go */
; 2226 :         if ( !index )

  000bb	83 7c 24 2c 00	 cmp	 DWORD PTR index$[rsp], 0
  000c0	75 0e		 jne	 SHORT $LN20@s370_updat

; 2227 :         {
; 2228 :             regs->psw.cc = 1;

  000c2	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000c7	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2229 :             break;

  000cb	e9 62 02 00 00	 jmp	 $LN9@s370_updat
$LN20@s370_updat:

; 2230 :         }
; 2231 : 
; 2232 :         /* Exit with cc3 when we encounter a negative codeword value
; 2233 :            (i.e. any codeword value with its highest-order bit on)
; 2234 :         */
; 2235 :         if ( GR_A(0,regs) & UPT_HIGH_BIT )

  000d0	b8 08 00 00 00	 mov	 eax, 8
  000d5	48 6b c0 00	 imul	 rax, rax, 0
  000d9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000de	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  000e5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  000ea	85 c0		 test	 eax, eax
  000ec	74 0e		 je	 SHORT $LN21@s370_updat

; 2236 :         {
; 2237 :             regs->psw.cc = 3;

  000ee	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000f3	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 2238 :             break;

  000f7	e9 36 02 00 00	 jmp	 $LN9@s370_updat
$LN21@s370_updat:

; 2239 :         }
; 2240 : 
; 2241 :         /* Retrieve this node's values for closer examination... */
; 2242 : 
; 2243 :         nodeaddr = regs->GR(4) + index;

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 04	 imul	 rax, rax, 4
  00105	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00111	03 44 24 2c	 add	 eax, DWORD PTR index$[rsp]
  00115	89 44 24 24	 mov	 DWORD PTR nodeaddr$[rsp], eax

; 2244 : 
; 2245 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2246 :         if ( a64 )
; 2247 :         {
; 2248 :             nodecode = ARCH_DEP(vfetch8) ( (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2249 :             nodedata = ARCH_DEP(vfetch8) ( (nodeaddr+8) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2250 :         }
; 2251 :         else
; 2252 : #endif
; 2253 :         {
; 2254 :             nodecode = ARCH_DEP(vfetch4) ( (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  00119	8b 44 24 24	 mov	 eax, DWORD PTR nodeaddr$[rsp]
  0011d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00122	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00127	ba 04 00 00 00	 mov	 edx, 4
  0012c	8b c8		 mov	 ecx, eax
  0012e	e8 00 00 00 00	 call	 s370_vfetch4
  00133	89 44 24 28	 mov	 DWORD PTR nodecode$[rsp], eax

; 2255 :             nodedata = ARCH_DEP(vfetch4) ( (nodeaddr+4) & ADDRESS_MAXWRAP(regs), AR4, regs );

  00137	8b 44 24 24	 mov	 eax, DWORD PTR nodeaddr$[rsp]
  0013b	83 c0 04	 add	 eax, 4
  0013e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00143	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00148	ba 04 00 00 00	 mov	 edx, 4
  0014d	8b c8		 mov	 ecx, eax
  0014f	e8 00 00 00 00	 call	 s370_vfetch4
  00154	89 44 24 34	 mov	 DWORD PTR nodedata$[rsp], eax

; 2256 :         }
; 2257 : 
; 2258 :         /* GR5 must remain UNCHANGED if the execution of a unit of operation
; 2259 :            is nullified or suppressed! Thus it must ONLY be updated/committed
; 2260 :            AFTER we've successfully retrieved the node data (since the storage
; 2261 :            access could cause a program-check thereby nullifying/suppressing
; 2262 :            the instruction's "current unit of operation")
; 2263 :         */
; 2264 :         SET_GR_A(5,regs,index);     // (do AFTER node data is accessed!)

  00158	b8 08 00 00 00	 mov	 eax, 8
  0015d	48 6b c0 05	 imul	 rax, rax, 5
  00161	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00166	8b 54 24 2c	 mov	 edx, DWORD PTR index$[rsp]
  0016a	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2265 : #if defined( FEATURE_PER1 )
; 2266 :         rmask |= PER_GRA_MASK( 5 );

  00171	0f b7 44 24 20	 movzx	 eax, WORD PTR rmask$[rsp]
  00176	0f ba e8 0a	 bts	 eax, 10
  0017a	66 89 44 24 20	 mov	 WORD PTR rmask$[rsp], ax

; 2267 : #endif
; 2268 : 
; 2269 :         /* Exit with cc0 whenever we reach a node whose codeword is equal
; 2270 :            to our current "highest encountered" codeword value (i.e. any
; 2271 :            node whose codeword matches our current "highest" (GR0) value)
; 2272 :         */
; 2273 :         if ( nodecode == GR_A(0,regs) )

  0017f	b8 08 00 00 00	 mov	 eax, 8
  00184	48 6b c0 00	 imul	 rax, rax, 0
  00188	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0018d	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00194	39 44 24 28	 cmp	 DWORD PTR nodecode$[rsp], eax
  00198	0f 85 cb 00 00
	00		 jne	 $LN22@s370_updat

; 2274 :         {
; 2275 :             /* Load GR2 and GR3 with the equal codeword node's values */
; 2276 :             SET_GR_A(2,regs,nodecode);

  0019e	b8 08 00 00 00	 mov	 eax, 8
  001a3	48 6b c0 02	 imul	 rax, rax, 2
  001a7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  001ac	8b 54 24 28	 mov	 edx, DWORD PTR nodecode$[rsp]
  001b0	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2277 :             SET_GR_A(3,regs,nodedata);

  001b7	b8 08 00 00 00	 mov	 eax, 8
  001bc	48 6b c0 03	 imul	 rax, rax, 3
  001c0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  001c5	8b 54 24 34	 mov	 edx, DWORD PTR nodedata$[rsp]
  001c9	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2278 :             regs->psw.cc = 0;

  001d0	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  001d5	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2279 : #if defined( FEATURE_PER1 )
; 2280 :             rmask |= PER_GRA_MASK2( 2, 3 );

  001d9	0f b7 44 24 20	 movzx	 eax, WORD PTR rmask$[rsp]
  001de	0d 00 30 00 00	 or	 eax, 12288		; 00003000H
  001e3	66 89 44 24 20	 mov	 WORD PTR rmask$[rsp], ax
$LN13@s370_updat:

; 2281 :             PER_GRA_CHECK( regs, rmask );

  001e8	33 c0		 xor	 eax, eax
  001ea	83 f8 01	 cmp	 eax, 1
  001ed	74 6f		 je	 SHORT $LN23@s370_updat
  001ef	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  001f4	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  001fa	c1 e8 02	 shr	 eax, 2
  001fd	83 e0 01	 and	 eax, 1
  00200	85 c0		 test	 eax, eax
  00202	74 0a		 je	 SHORT $LN29@s370_updat
  00204	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv185[rsp], 1
  0020c	eb 08		 jmp	 SHORT $LN30@s370_updat
$LN29@s370_updat:
  0020e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv185[rsp], 0
$LN30@s370_updat:
  00216	83 7c 24 30 00	 cmp	 DWORD PTR tv185[rsp], 0
  0021b	74 41		 je	 SHORT $LN23@s370_updat
  0021d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00222	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00225	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  0022a	85 c0		 test	 eax, eax
  0022c	74 30		 je	 SHORT $LN23@s370_updat
  0022e	0f b7 44 24 20	 movzx	 eax, WORD PTR rmask$[rsp]
  00233	b9 08 00 00 00	 mov	 ecx, 8
  00238	48 6b c9 0a	 imul	 rcx, rcx, 10
  0023c	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  00241	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00248	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0024e	23 c1		 and	 eax, ecx
  00250	85 c0		 test	 eax, eax
  00252	74 0a		 je	 SHORT $LN23@s370_updat
  00254	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00259	e8 00 00 00 00	 call	 s370_per1_gra
$LN23@s370_updat:
  0025e	33 c0		 xor	 eax, eax
  00260	85 c0		 test	 eax, eax
  00262	75 84		 jne	 SHORT $LN13@s370_updat

; 2282 : #endif
; 2283 :             return;

  00264	e9 6c 01 00 00	 jmp	 $LN1@s370_updat
$LN22@s370_updat:

; 2284 :         }
; 2285 : 
; 2286 :         /* Keep resequencing the tree's nodes, moving successively higher
; 2287 :            nodes to the front (beginning of tree)...
; 2288 :         */
; 2289 :         if ( nodecode < GR_A(0,regs) )

  00269	b8 08 00 00 00	 mov	 eax, 8
  0026e	48 6b c0 00	 imul	 rax, rax, 0
  00272	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00277	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0027e	39 44 24 28	 cmp	 DWORD PTR nodecode$[rsp], eax
  00282	73 05		 jae	 SHORT $LN24@s370_updat

; 2290 :             continue;

  00284	e9 14 fe ff ff	 jmp	 $LN8@s370_updat
$LN24@s370_updat:

; 2291 : 
; 2292 :         /* This node has a codeword value higher than our currently saved
; 2293 :            highest encountered codeword value (GR0). Swap our GR0/1 values
; 2294 :            with this node's values, such that GR0/1 always hold the values
; 2295 :            from the node with the highest encountered codeword value...
; 2296 :         */
; 2297 : 
; 2298 :         /* Store obsolete GR0 and GR1 values into this node's entry */
; 2299 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 2300 :         if ( a64 )
; 2301 :         {
; 2302 :             ARCH_DEP(vstore8) ( GR_A(0,regs), (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2303 :             ARCH_DEP(vstore8) ( GR_A(1,regs), (nodeaddr+8) & ADDRESS_MAXWRAP(regs), AR4, regs );
; 2304 :         }
; 2305 :         else
; 2306 : #endif
; 2307 :         {
; 2308 :             ARCH_DEP(vstore4) ( GR_A(0,regs), (nodeaddr+0) & ADDRESS_MAXWRAP(regs), AR4, regs );

  00289	8b 44 24 24	 mov	 eax, DWORD PTR nodeaddr$[rsp]
  0028d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00292	b9 08 00 00 00	 mov	 ecx, 8
  00297	48 6b c9 00	 imul	 rcx, rcx, 0
  0029b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR regs$[rsp]
  002a0	41 b8 04 00 00
	00		 mov	 r8d, 4
  002a6	8b d0		 mov	 edx, eax
  002a8	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  002ad	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  002b4	e8 00 00 00 00	 call	 s370_vstore4

; 2309 :             ARCH_DEP(vstore4) ( GR_A(1,regs), (nodeaddr+4) & ADDRESS_MAXWRAP(regs), AR4, regs );

  002b9	8b 44 24 24	 mov	 eax, DWORD PTR nodeaddr$[rsp]
  002bd	83 c0 04	 add	 eax, 4
  002c0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002c5	b9 08 00 00 00	 mov	 ecx, 8
  002ca	48 6b c9 01	 imul	 rcx, rcx, 1
  002ce	4c 8b 4c 24 58	 mov	 r9, QWORD PTR regs$[rsp]
  002d3	41 b8 04 00 00
	00		 mov	 r8d, 4
  002d9	8b d0		 mov	 edx, eax
  002db	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  002e0	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  002e7	e8 00 00 00 00	 call	 s370_vstore4

; 2310 :         }
; 2311 : 
; 2312 :         /* Update GR0 and GR1 with the new "highest encountered" values */
; 2313 :         SET_GR_A(0,regs,nodecode);

  002ec	b8 08 00 00 00	 mov	 eax, 8
  002f1	48 6b c0 00	 imul	 rax, rax, 0
  002f5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  002fa	8b 54 24 28	 mov	 edx, DWORD PTR nodecode$[rsp]
  002fe	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2314 :         SET_GR_A(1,regs,nodedata);

  00305	b8 08 00 00 00	 mov	 eax, 8
  0030a	48 6b c0 01	 imul	 rax, rax, 1
  0030e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00313	8b 54 24 34	 mov	 edx, DWORD PTR nodedata$[rsp]
  00317	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2315 : #if defined( FEATURE_PER1 )
; 2316 :         rmask |= PER_GRA_MASK2( 0, 1 );

  0031e	0f b7 44 24 20	 movzx	 eax, WORD PTR rmask$[rsp]
  00323	0d 00 c0 00 00	 or	 eax, 49152		; 0000c000H
  00328	66 89 44 24 20	 mov	 WORD PTR rmask$[rsp], ax

; 2317 : #endif
; 2318 :     }

  0032d	e9 6b fd ff ff	 jmp	 $LN8@s370_updat
$LN9@s370_updat:

; 2319 : 
; 2320 :     /* Commit GR5 with the actual index value we stopped on */
; 2321 :     SET_GR_A(5,regs,index);

  00332	b8 08 00 00 00	 mov	 eax, 8
  00337	48 6b c0 05	 imul	 rax, rax, 5
  0033b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00340	8b 54 24 2c	 mov	 edx, DWORD PTR index$[rsp]
  00344	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2322 : 
; 2323 : #if defined( FEATURE_PER1 )
; 2324 :     /* Check for PER 1 GRA event */
; 2325 :     rmask |= PER_GRA_MASK( 5 );

  0034b	0f b7 44 24 20	 movzx	 eax, WORD PTR rmask$[rsp]
  00350	0f ba e8 0a	 bts	 eax, 10
  00354	66 89 44 24 20	 mov	 WORD PTR rmask$[rsp], ax
$LN16@s370_updat:

; 2326 :     PER_GRA_CHECK( regs, rmask );

  00359	33 c0		 xor	 eax, eax
  0035b	83 f8 01	 cmp	 eax, 1
  0035e	74 6f		 je	 SHORT $LN25@s370_updat
  00360	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00365	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  0036b	c1 e8 02	 shr	 eax, 2
  0036e	83 e0 01	 and	 eax, 1
  00371	85 c0		 test	 eax, eax
  00373	74 0a		 je	 SHORT $LN33@s370_updat
  00375	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv253[rsp], 1
  0037d	eb 08		 jmp	 SHORT $LN34@s370_updat
$LN33@s370_updat:
  0037f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv253[rsp], 0
$LN34@s370_updat:
  00387	83 7c 24 38 00	 cmp	 DWORD PTR tv253[rsp], 0
  0038c	74 41		 je	 SHORT $LN25@s370_updat
  0038e	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00393	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00396	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  0039b	85 c0		 test	 eax, eax
  0039d	74 30		 je	 SHORT $LN25@s370_updat
  0039f	0f b7 44 24 20	 movzx	 eax, WORD PTR rmask$[rsp]
  003a4	b9 08 00 00 00	 mov	 ecx, 8
  003a9	48 6b c9 0a	 imul	 rcx, rcx, 10
  003ad	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  003b2	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  003b9	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  003bf	23 c1		 and	 eax, ecx
  003c1	85 c0		 test	 eax, eax
  003c3	74 0a		 je	 SHORT $LN25@s370_updat
  003c5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  003ca	e8 00 00 00 00	 call	 s370_per1_gra
$LN25@s370_updat:
  003cf	33 c0		 xor	 eax, eax
  003d1	85 c0		 test	 eax, eax
  003d3	75 84		 jne	 SHORT $LN16@s370_updat
$LN1@s370_updat:

; 2327 : #endif
; 2328 : }

  003d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  003d9	c3		 ret	 0
s370_update_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 48
effective_addr1$ = 52
rbyte$ = 56
effective_addr2$ = 60
lbyte$ = 64
i$ = 68
b1$ = 72
b2$ = 76
temp$1 = 80
l1$ = 84
l2$ = 88
j$ = 92
tv178 = 96
inst$ = 128
regs$ = 136
s370_unpack PROC

; 2098 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2099 : int     l1, l2;                         /* Register numbers          */
; 2100 : int     b1, b2;                         /* Base registers            */
; 2101 : VADR    effective_addr1,
; 2102 :         effective_addr2;                /* Effective addressES       */
; 2103 : int     i, j;                           /* Loop counters             */
; 2104 : BYTE    sbyte;                          /* Source operand byte       */
; 2105 : BYTE    rbyte;                          /* Right result byte of pair */
; 2106 : BYTE    lbyte;                          /* Left result byte of pair  */
; 2107 : 
; 2108 :     SS(inst, regs, l1, l2, b1, effective_addr1, b2, effective_addr2);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 50	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003a	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  0003e	c1 e8 0c	 shr	 eax, 12
  00041	83 e0 0f	 and	 eax, 15
  00044	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax
  00048	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 10	 shr	 eax, 16
  0004f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00054	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00058	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  0005c	c1 e8 1c	 shr	 eax, 28
  0005f	83 e0 0f	 and	 eax, 15
  00062	89 44 24 48	 mov	 DWORD PTR b1$[rsp], eax
  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00077	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007b	83 e0 0f	 and	 eax, 15
  0007e	89 44 24 58	 mov	 DWORD PTR l2$[rsp], eax
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00093	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00097	c1 f8 04	 sar	 eax, 4
  0009a	83 e0 0f	 and	 eax, 15
  0009d	89 44 24 54	 mov	 DWORD PTR l1$[rsp], eax
  000a1	83 7c 24 48 00	 cmp	 DWORD PTR b1$[rsp], 0
  000a6	74 2d		 je	 SHORT $LN8@s370_unpac
  000a8	48 63 44 24 48	 movsxd	 rax, DWORD PTR b1$[rsp]
  000ad	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000bc	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000c0	03 c8		 add	 ecx, eax
  000c2	8b c1		 mov	 eax, ecx
  000c4	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000c8	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000cc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000d1	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s370_unpac:
  000d5	83 7c 24 4c 00	 cmp	 DWORD PTR b2$[rsp], 0
  000da	74 2d		 je	 SHORT $LN9@s370_unpac
  000dc	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b2$[rsp]
  000e1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e9	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000f0	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000f4	03 c8		 add	 ecx, eax
  000f6	8b c1		 mov	 eax, ecx
  000f8	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000fc	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00100	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00105	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_unpac:
$LN4@s370_unpac:
  00109	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00111	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00115	48 83 c0 06	 add	 rax, 6
  00119	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00121	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00125	33 c0		 xor	 eax, eax
  00127	83 f8 06	 cmp	 eax, 6
  0012a	74 0f		 je	 SHORT $LN10@s370_unpac
  0012c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00134	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s370_unpac:
  0013b	33 c0		 xor	 eax, eax
  0013d	85 c0		 test	 eax, eax
  0013f	75 c8		 jne	 SHORT $LN4@s370_unpac

; 2109 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 2110 :     TXFC_INSTR_CHECK( regs );
; 2111 : 
; 2112 :     /* If operand 1 crosses a page, make sure both pages are accessible */
; 2113 :     if((effective_addr1 & PAGEFRAME_PAGEMASK) !=

  00141	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00145	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  0014a	8b 4c 24 54	 mov	 ecx, DWORD PTR l1$[rsp]
  0014e	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00152	03 d1		 add	 edx, ecx
  00154	8b ca		 mov	 ecx, edx
  00156	81 e1 00 f8 ff
	7f		 and	 ecx, 2147481600		; 7ffff800H
  0015c	3b c1		 cmp	 eax, ecx
  0015e	74 25		 je	 SHORT $LN11@s370_unpac

; 2114 :         ((effective_addr1 + l1) & PAGEFRAME_PAGEMASK))
; 2115 :         ARCH_DEP(validate_operand) (effective_addr1, b1, l1, ACCTYPE_WRITE_SKP, regs);

  00160	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00173	44 8b 44 24 54	 mov	 r8d, DWORD PTR l1$[rsp]
  00178	8b 54 24 48	 mov	 edx, DWORD PTR b1$[rsp]
  0017c	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00180	e8 00 00 00 00	 call	 s370_validate_operand
$LN11@s370_unpac:

; 2116 : 
; 2117 :     /* If operand 2 crosses a page, make sure both pages are accessible */
; 2118 :     if((effective_addr2 & PAGEFRAME_PAGEMASK) !=

  00185	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00189	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  0018e	8b 4c 24 58	 mov	 ecx, DWORD PTR l2$[rsp]
  00192	8b 54 24 3c	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00196	03 d1		 add	 edx, ecx
  00198	8b ca		 mov	 ecx, edx
  0019a	81 e1 00 f8 ff
	7f		 and	 ecx, 2147481600		; 7ffff800H
  001a0	3b c1		 cmp	 eax, ecx
  001a2	74 25		 je	 SHORT $LN12@s370_unpac

; 2119 :         ((effective_addr2 + l2) & PAGEFRAME_PAGEMASK))
; 2120 :         ARCH_DEP(validate_operand) (effective_addr2, b2, l2, ACCTYPE_READ, regs);

  001a4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b1	41 b9 04 00 00
	00		 mov	 r9d, 4
  001b7	44 8b 44 24 58	 mov	 r8d, DWORD PTR l2$[rsp]
  001bc	8b 54 24 4c	 mov	 edx, DWORD PTR b2$[rsp]
  001c0	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001c4	e8 00 00 00 00	 call	 s370_validate_operand
$LN12@s370_unpac:

; 2121 : 
; 2122 :     /* Exchange the digits in the rightmost byte */
; 2123 :     effective_addr1 += l1;

  001c9	8b 44 24 54	 mov	 eax, DWORD PTR l1$[rsp]
  001cd	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  001d1	03 c8		 add	 ecx, eax
  001d3	8b c1		 mov	 eax, ecx
  001d5	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 2124 :     effective_addr2 += l2;

  001d9	8b 44 24 58	 mov	 eax, DWORD PTR l2$[rsp]
  001dd	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001e1	03 c8		 add	 ecx, eax
  001e3	8b c1		 mov	 eax, ecx
  001e5	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 2125 :     sbyte = ARCH_DEP(vfetchb) ( effective_addr2, b2, regs );

  001e9	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001f1	8b 54 24 4c	 mov	 edx, DWORD PTR b2$[rsp]
  001f5	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001f9	e8 00 00 00 00	 call	 s370_vfetchb
  001fe	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 2126 :     rbyte = ((sbyte << 4) | (sbyte >> 4)) & 0xff;

  00202	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  00207	c1 e0 04	 shl	 eax, 4
  0020a	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR sbyte$[rsp]
  0020f	c1 f9 04	 sar	 ecx, 4
  00212	0b c1		 or	 eax, ecx
  00214	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00219	88 44 24 38	 mov	 BYTE PTR rbyte$[rsp], al

; 2127 :     ARCH_DEP(vstoreb) ( rbyte, effective_addr1, b1, regs );

  0021d	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00225	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  0022a	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0022e	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR rbyte$[rsp]
  00233	e8 00 00 00 00	 call	 s370_vstoreb

; 2128 : 
; 2129 :     /* Process remaining bytes from right to left */
; 2130 :     for (i = l1, j = l2; i > 0; i--)

  00238	8b 44 24 54	 mov	 eax, DWORD PTR l1$[rsp]
  0023c	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
  00240	8b 44 24 58	 mov	 eax, DWORD PTR l2$[rsp]
  00244	89 44 24 5c	 mov	 DWORD PTR j$[rsp], eax
  00248	eb 0a		 jmp	 SHORT $LN7@s370_unpac
$LN5@s370_unpac:
  0024a	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  0024e	ff c8		 dec	 eax
  00250	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN7@s370_unpac:
  00254	83 7c 24 44 00	 cmp	 DWORD PTR i$[rsp], 0
  00259	0f 8e f1 00 00
	00		 jle	 $LN6@s370_unpac

; 2131 :     {
; 2132 :         /* Fetch source byte from second operand */
; 2133 :         if (j-- > 0)

  0025f	8b 44 24 5c	 mov	 eax, DWORD PTR j$[rsp]
  00263	89 44 24 60	 mov	 DWORD PTR tv178[rsp], eax
  00267	8b 44 24 5c	 mov	 eax, DWORD PTR j$[rsp]
  0026b	ff c8		 dec	 eax
  0026d	89 44 24 5c	 mov	 DWORD PTR j$[rsp], eax
  00271	83 7c 24 60 00	 cmp	 DWORD PTR tv178[rsp], 0
  00276	7e 47		 jle	 SHORT $LN13@s370_unpac

; 2134 :         {
; 2135 :             sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  00278	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0027c	ff c8		 dec	 eax
  0027e	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00282	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0028a	8b 54 24 4c	 mov	 edx, DWORD PTR b2$[rsp]
  0028e	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00292	e8 00 00 00 00	 call	 s370_vfetchb
  00297	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 2136 :             rbyte = (sbyte & 0x0F) | 0xF0;

  0029b	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002a0	83 e0 0f	 and	 eax, 15
  002a3	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  002a8	88 44 24 38	 mov	 BYTE PTR rbyte$[rsp], al

; 2137 :             lbyte = (sbyte >> 4) | 0xF0;

  002ac	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002b1	c1 f8 04	 sar	 eax, 4
  002b4	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  002b9	88 44 24 40	 mov	 BYTE PTR lbyte$[rsp], al

; 2138 :         }

  002bd	eb 0a		 jmp	 SHORT $LN14@s370_unpac
$LN13@s370_unpac:

; 2139 :         else
; 2140 :         {
; 2141 :             rbyte = 0xF0;

  002bf	c6 44 24 38 f0	 mov	 BYTE PTR rbyte$[rsp], 240 ; 000000f0H

; 2142 :             lbyte = 0xF0;

  002c4	c6 44 24 40 f0	 mov	 BYTE PTR lbyte$[rsp], 240 ; 000000f0H
$LN14@s370_unpac:

; 2143 :         }
; 2144 : 
; 2145 :         /* Store unpacked bytes at first operand address */
; 2146 :         ARCH_DEP(vstoreb) ( rbyte, --effective_addr1, b1, regs );

  002c9	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  002cd	ff c8		 dec	 eax
  002cf	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  002d3	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002db	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  002e0	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  002e4	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR rbyte$[rsp]
  002e9	e8 00 00 00 00	 call	 s370_vstoreb

; 2147 :         if (--i > 0)

  002ee	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  002f2	ff c8		 dec	 eax
  002f4	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
  002f8	83 7c 24 44 00	 cmp	 DWORD PTR i$[rsp], 0
  002fd	7e 32		 jle	 SHORT $LN15@s370_unpac

; 2148 :         {
; 2149 :             effective_addr1 &= ADDRESS_MAXWRAP(regs);

  002ff	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00303	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00308	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 2150 :             ARCH_DEP(vstoreb) ( lbyte, --effective_addr1, b1, regs );

  0030c	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00310	ff c8		 dec	 eax
  00312	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00316	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0031e	44 8b 44 24 48	 mov	 r8d, DWORD PTR b1$[rsp]
  00323	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00327	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR lbyte$[rsp]
  0032c	e8 00 00 00 00	 call	 s370_vstoreb
$LN15@s370_unpac:

; 2151 :         }
; 2152 : 
; 2153 :         /* Wraparound according to addressing mode */
; 2154 :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  00331	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00335	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033a	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 2155 :         effective_addr2 &= ADDRESS_MAXWRAP(regs);

  0033e	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00342	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00347	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 2156 : 
; 2157 :     } /* end for(i) */

  0034b	e9 fa fe ff ff	 jmp	 $LN5@s370_unpac
$LN6@s370_unpac:

; 2158 : 
; 2159 : }

  00350	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00354	c3		 ret	 0
s370_unpack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 0
i$ = 4
op2crosses$ = 8
effective_addr1$ = 12
op1crosses$ = 16
effective_addr2$ = 20
dbyte$ = 24
len$ = 28
b1$ = 32
b2$ = 36
temp$1 = 40
tv141 = 44
tv143 = 48
tv158 = 52
tv160 = 56
tv175 = 60
tv183 = 64
tv218 = 68
tv271 = 72
cc$ = 76
tv286 = 80
op1$ = 128
op2$ = 384
__$ArrayPad$ = 640
inst$ = 784
regs$ = 792
s370_translate_and_test PROC

; 1890 : {

$LN71:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 00 03
	00 00		 sub	 rsp, 768		; 00000300H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 80 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1891 : CACHE_ALIGN BYTE op1[256], op2[256];    /* Operand work areas        */
; 1892 : VADR    effective_addr1;                /* Effective address         */
; 1893 : VADR    effective_addr2;                /* Effective address         */
; 1894 : int     b1, b2;                         /* Base registers            */
; 1895 : int     len;                            /* Length - 1                */
; 1896 : int     i;                              /* work variable             */
; 1897 : int     cc = 0;                         /* Condition code            */

  0002c	c7 45 4c 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 1898 : BYTE    dbyte, sbyte = 0;               /* Byte work areas           */

  00033	c6 45 00 00	 mov	 BYTE PTR sbyte$[rbp], 0

; 1899 : bool    op1crosses, op2crosses;         /* Operand crosses Page Bdy  */
; 1900 : 
; 1901 :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00037	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0003f	48 83 c0 02	 add	 rax, 2
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 fetch_fw_noswap
  0004b	8b c8		 mov	 ecx, eax
  0004d	e8 00 00 00 00	 call	 _byteswap_ulong
  00052	89 45 28	 mov	 DWORD PTR temp$1[rbp], eax
  00055	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  00058	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005d	89 45 14	 mov	 DWORD PTR effective_addr2$[rbp], eax
  00060	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  00063	c1 e8 0c	 shr	 eax, 12
  00066	83 e0 0f	 and	 eax, 15
  00069	89 45 24	 mov	 DWORD PTR b2$[rbp], eax
  0006c	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  0006f	c1 e8 10	 shr	 eax, 16
  00072	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00077	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
  0007a	8b 45 28	 mov	 eax, DWORD PTR temp$1[rbp]
  0007d	c1 e8 1c	 shr	 eax, 28
  00080	83 e0 0f	 and	 eax, 15
  00083	89 45 20	 mov	 DWORD PTR b1$[rbp], eax
  00086	b8 01 00 00 00	 mov	 eax, 1
  0008b	48 6b c0 01	 imul	 rax, rax, 1
  0008f	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00097	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009b	89 45 1c	 mov	 DWORD PTR len$[rbp], eax
  0009e	83 7d 20 00	 cmp	 DWORD PTR b1$[rbp], 0
  000a2	74 28		 je	 SHORT $LN20@s370_trans
  000a4	48 63 45 20	 movsxd	 rax, DWORD PTR b1$[rbp]
  000a8	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b0	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  000ba	03 c8		 add	 ecx, eax
  000bc	8b c1		 mov	 eax, ecx
  000be	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
  000c1	8b 45 0c	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  000c4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c9	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
$LN20@s370_trans:
  000cc	83 7d 24 00	 cmp	 DWORD PTR b2$[rbp], 0
  000d0	74 28		 je	 SHORT $LN21@s370_trans
  000d2	48 63 45 24	 movsxd	 rax, DWORD PTR b2$[rbp]
  000d6	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000de	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000e5	8b 4d 14	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  000e8	03 c8		 add	 ecx, eax
  000ea	8b c1		 mov	 eax, ecx
  000ec	89 45 14	 mov	 DWORD PTR effective_addr2$[rbp], eax
  000ef	8b 45 14	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  000f2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000f7	89 45 14	 mov	 DWORD PTR effective_addr2$[rbp], eax
$LN21@s370_trans:
$LN4@s370_trans:
  000fa	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00102	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00106	48 83 c0 06	 add	 rax, 6
  0010a	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00112	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00116	33 c0		 xor	 eax, eax
  00118	83 f8 06	 cmp	 eax, 6
  0011b	74 0f		 je	 SHORT $LN22@s370_trans
  0011d	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00125	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN22@s370_trans:
  0012c	33 c0		 xor	 eax, eax
  0012e	85 c0		 test	 eax, eax
  00130	75 c8		 jne	 SHORT $LN4@s370_trans

; 1902 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 1903 : 
; 1904 :     TXFC_INSTR_CHECK( regs );
; 1905 : 
; 1906 :     /* Copy operand-1 data to work area if within same page */
; 1907 :     if (!(op1crosses = CROSSPAGE( effective_addr1, len )))

  00132	8b 45 0c	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  00135	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0013a	b9 ff 07 00 00	 mov	 ecx, 2047		; 000007ffH
  0013f	2b 4d 1c	 sub	 ecx, DWORD PTR len$[rbp]
  00142	3b c1		 cmp	 eax, ecx
  00144	7e 09		 jle	 SHORT $LN43@s370_trans
  00146	c7 45 2c 01 00
	00 00		 mov	 DWORD PTR tv141[rbp], 1
  0014d	eb 07		 jmp	 SHORT $LN44@s370_trans
$LN43@s370_trans:
  0014f	c7 45 2c 00 00
	00 00		 mov	 DWORD PTR tv141[rbp], 0
$LN44@s370_trans:
  00156	83 7d 2c 00	 cmp	 DWORD PTR tv141[rbp], 0
  0015a	75 09		 jne	 SHORT $LN45@s370_trans
  0015c	c7 45 30 00 00
	00 00		 mov	 DWORD PTR tv143[rbp], 0
  00163	eb 07		 jmp	 SHORT $LN46@s370_trans
$LN45@s370_trans:
  00165	c7 45 30 01 00
	00 00		 mov	 DWORD PTR tv143[rbp], 1
$LN46@s370_trans:
  0016c	0f b6 45 30	 movzx	 eax, BYTE PTR tv143[rbp]
  00170	88 45 10	 mov	 BYTE PTR op1crosses$[rbp], al
  00173	0f b6 45 10	 movzx	 eax, BYTE PTR op1crosses$[rbp]
  00177	85 c0		 test	 eax, eax
  00179	75 25		 jne	 SHORT $LN23@s370_trans

; 1908 :         ARCH_DEP( vfetchc )( op1, len, effective_addr1, b1, regs );

  0017b	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00183	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00188	44 8b 4d 20	 mov	 r9d, DWORD PTR b1$[rbp]
  0018c	44 8b 45 0c	 mov	 r8d, DWORD PTR effective_addr1$[rbp]
  00190	0f b6 55 1c	 movzx	 edx, BYTE PTR len$[rbp]
  00194	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR op1$[rbp]
  0019b	e8 00 00 00 00	 call	 s370_vfetchc
$LN23@s370_trans:

; 1909 : 
; 1910 :     /* Copy operand-2 data to work area if within same page */
; 1911 :     if (!(op2crosses = CROSSPAGE( effective_addr2, 256-1 )))

  001a0	8b 45 14	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  001a3	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  001a8	3d 00 07 00 00	 cmp	 eax, 1792		; 00000700H
  001ad	7e 09		 jle	 SHORT $LN49@s370_trans
  001af	c7 45 34 01 00
	00 00		 mov	 DWORD PTR tv158[rbp], 1
  001b6	eb 07		 jmp	 SHORT $LN50@s370_trans
$LN49@s370_trans:
  001b8	c7 45 34 00 00
	00 00		 mov	 DWORD PTR tv158[rbp], 0
$LN50@s370_trans:
  001bf	83 7d 34 00	 cmp	 DWORD PTR tv158[rbp], 0
  001c3	75 09		 jne	 SHORT $LN51@s370_trans
  001c5	c7 45 38 00 00
	00 00		 mov	 DWORD PTR tv160[rbp], 0
  001cc	eb 07		 jmp	 SHORT $LN52@s370_trans
$LN51@s370_trans:
  001ce	c7 45 38 01 00
	00 00		 mov	 DWORD PTR tv160[rbp], 1
$LN52@s370_trans:
  001d5	0f b6 45 38	 movzx	 eax, BYTE PTR tv160[rbp]
  001d9	88 45 08	 mov	 BYTE PTR op2crosses$[rbp], al
  001dc	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  001e0	85 c0		 test	 eax, eax
  001e2	75 23		 jne	 SHORT $LN24@s370_trans

; 1912 :         ARCH_DEP( vfetchc )( op2, 256-1, effective_addr2, b2, regs );

  001e4	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f1	44 8b 4d 24	 mov	 r9d, DWORD PTR b2$[rbp]
  001f5	44 8b 45 14	 mov	 r8d, DWORD PTR effective_addr2$[rbp]
  001f9	b2 ff		 mov	 dl, 255			; 000000ffH
  001fb	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR op2$[rbp]
  00202	e8 00 00 00 00	 call	 s370_vfetchc
$LN24@s370_trans:

; 1913 : 
; 1914 :     /* Process first operand from left to right */
; 1915 :     if (unlikely( op1crosses ))

  00207	0f b6 45 10	 movzx	 eax, BYTE PTR op1crosses$[rbp]
  0020b	85 c0		 test	 eax, eax
  0020d	74 09		 je	 SHORT $LN55@s370_trans
  0020f	c7 45 3c 01 00
	00 00		 mov	 DWORD PTR tv175[rbp], 1
  00216	eb 07		 jmp	 SHORT $LN56@s370_trans
$LN55@s370_trans:
  00218	c7 45 3c 00 00
	00 00		 mov	 DWORD PTR tv175[rbp], 0
$LN56@s370_trans:
  0021f	83 7d 3c 00	 cmp	 DWORD PTR tv175[rbp], 0
  00223	0f 84 d8 00 00
	00		 je	 $LN25@s370_trans

; 1916 :     {
; 1917 :         /* Operand-1 crosses a page boundary */
; 1918 :         if (unlikely( op2crosses ))

  00229	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  0022d	85 c0		 test	 eax, eax
  0022f	74 09		 je	 SHORT $LN59@s370_trans
  00231	c7 45 40 01 00
	00 00		 mov	 DWORD PTR tv183[rbp], 1
  00238	eb 07		 jmp	 SHORT $LN60@s370_trans
$LN59@s370_trans:
  0023a	c7 45 40 00 00
	00 00		 mov	 DWORD PTR tv183[rbp], 0
$LN60@s370_trans:
  00241	83 7d 40 00	 cmp	 DWORD PTR tv183[rbp], 0
  00245	74 66		 je	 SHORT $LN27@s370_trans

; 1919 :         {
; 1920 :             /* WORST case: BOTH operands cross a page boundary */
; 1921 :             for (i=0; i <= len; i++)

  00247	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  0024e	eb 08		 jmp	 SHORT $LN7@s370_trans
$LN5@s370_trans:
  00250	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00253	ff c0		 inc	 eax
  00255	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN7@s370_trans:
  00258	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  0025b	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0025e	7f 4b		 jg	 SHORT $LN6@s370_trans

; 1922 :             {
; 1923 :                 dbyte = ARCH_DEP( vfetchb )( effective_addr1+i, b1, regs );

  00260	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00263	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  00266	03 c8		 add	 ecx, eax
  00268	8b c1		 mov	 eax, ecx
  0026a	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00272	8b 55 20	 mov	 edx, DWORD PTR b1$[rbp]
  00275	8b c8		 mov	 ecx, eax
  00277	e8 00 00 00 00	 call	 s370_vfetchb
  0027c	88 45 18	 mov	 BYTE PTR dbyte$[rbp], al

; 1924 :                 if ((sbyte = ARCH_DEP( vfetchb )( effective_addr2+dbyte, b2, regs )))

  0027f	0f b6 45 18	 movzx	 eax, BYTE PTR dbyte$[rbp]
  00283	8b 4d 14	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  00286	03 c8		 add	 ecx, eax
  00288	8b c1		 mov	 eax, ecx
  0028a	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00292	8b 55 24	 mov	 edx, DWORD PTR b2$[rbp]
  00295	8b c8		 mov	 ecx, eax
  00297	e8 00 00 00 00	 call	 s370_vfetchb
  0029c	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  0029f	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  002a3	85 c0		 test	 eax, eax
  002a5	74 02		 je	 SHORT $LN29@s370_trans

; 1925 :                     break;

  002a7	eb 02		 jmp	 SHORT $LN6@s370_trans
$LN29@s370_trans:

; 1926 :             }

  002a9	eb a5		 jmp	 SHORT $LN5@s370_trans
$LN6@s370_trans:

; 1927 :         }

  002ab	eb 4f		 jmp	 SHORT $LN28@s370_trans
$LN27@s370_trans:

; 1928 :         else /* Only operand-1 crosses a page boundary */
; 1929 :         {
; 1930 :             for (i=0; i <= len; i++)

  002ad	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  002b4	eb 08		 jmp	 SHORT $LN10@s370_trans
$LN8@s370_trans:
  002b6	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  002b9	ff c0		 inc	 eax
  002bb	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN10@s370_trans:
  002be	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  002c1	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  002c4	7f 36		 jg	 SHORT $LN9@s370_trans

; 1931 :                 if ((sbyte = op2[ ARCH_DEP( vfetchb )( effective_addr1+i, b1, regs ) ]))

  002c6	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  002c9	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  002cc	03 c8		 add	 ecx, eax
  002ce	8b c1		 mov	 eax, ecx
  002d0	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002d8	8b 55 20	 mov	 edx, DWORD PTR b1$[rbp]
  002db	8b c8		 mov	 ecx, eax
  002dd	e8 00 00 00 00	 call	 s370_vfetchb
  002e2	0f b6 c0	 movzx	 eax, al
  002e5	0f b6 84 05 80
	01 00 00	 movzx	 eax, BYTE PTR op2$[rbp+rax]
  002ed	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  002f0	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  002f4	85 c0		 test	 eax, eax
  002f6	74 02		 je	 SHORT $LN30@s370_trans

; 1932 :                     break;

  002f8	eb 02		 jmp	 SHORT $LN9@s370_trans
$LN30@s370_trans:
  002fa	eb ba		 jmp	 SHORT $LN8@s370_trans
$LN9@s370_trans:
$LN28@s370_trans:

; 1933 :         }
; 1934 :     }

  002fc	e9 a9 00 00 00	 jmp	 $LN26@s370_trans
$LN25@s370_trans:

; 1935 :     else /* Operand-1 does NOT cross a page boundary */
; 1936 :     {
; 1937 :        if (unlikely( op2crosses ))

  00301	0f b6 45 08	 movzx	 eax, BYTE PTR op2crosses$[rbp]
  00305	85 c0		 test	 eax, eax
  00307	74 09		 je	 SHORT $LN63@s370_trans
  00309	c7 45 44 01 00
	00 00		 mov	 DWORD PTR tv218[rbp], 1
  00310	eb 07		 jmp	 SHORT $LN64@s370_trans
$LN63@s370_trans:
  00312	c7 45 44 00 00
	00 00		 mov	 DWORD PTR tv218[rbp], 0
$LN64@s370_trans:
  00319	83 7d 44 00	 cmp	 DWORD PTR tv218[rbp], 0
  0031d	74 4f		 je	 SHORT $LN31@s370_trans

; 1938 :        {
; 1939 :             /* But operand-2 DOES cross a page boundary */
; 1940 :             for (i=0; i <= len; i++)

  0031f	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00326	eb 08		 jmp	 SHORT $LN13@s370_trans
$LN11@s370_trans:
  00328	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0032b	ff c0		 inc	 eax
  0032d	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN13@s370_trans:
  00330	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  00333	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00336	7f 34		 jg	 SHORT $LN12@s370_trans

; 1941 :                 if ((sbyte = ARCH_DEP( vfetchb )( effective_addr2+op1[i], b2, regs )))

  00338	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  0033c	0f b6 84 05 80
	00 00 00	 movzx	 eax, BYTE PTR op1$[rbp+rax]
  00344	8b 4d 14	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  00347	03 c8		 add	 ecx, eax
  00349	8b c1		 mov	 eax, ecx
  0034b	4c 8b 84 24 18
	03 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00353	8b 55 24	 mov	 edx, DWORD PTR b2$[rbp]
  00356	8b c8		 mov	 ecx, eax
  00358	e8 00 00 00 00	 call	 s370_vfetchb
  0035d	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  00360	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  00364	85 c0		 test	 eax, eax
  00366	74 02		 je	 SHORT $LN33@s370_trans

; 1942 :                     break;

  00368	eb 02		 jmp	 SHORT $LN12@s370_trans
$LN33@s370_trans:
  0036a	eb bc		 jmp	 SHORT $LN11@s370_trans
$LN12@s370_trans:

; 1943 :        }

  0036c	eb 3c		 jmp	 SHORT $LN32@s370_trans
$LN31@s370_trans:

; 1944 :        else /* BEST case: NEITHER operand crosses a page boundary */
; 1945 :        {
; 1946 :             for (i=0; i <= len; i++)

  0036e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00375	eb 08		 jmp	 SHORT $LN16@s370_trans
$LN14@s370_trans:
  00377	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0037a	ff c0		 inc	 eax
  0037c	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN16@s370_trans:
  0037f	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  00382	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00385	7f 23		 jg	 SHORT $LN15@s370_trans

; 1947 :                 if ((sbyte = op2[ op1[i] ]))

  00387	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  0038b	0f b6 84 05 80
	00 00 00	 movzx	 eax, BYTE PTR op1$[rbp+rax]
  00393	0f b6 84 05 80
	01 00 00	 movzx	 eax, BYTE PTR op2$[rbp+rax]
  0039b	88 45 00	 mov	 BYTE PTR sbyte$[rbp], al
  0039e	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  003a2	85 c0		 test	 eax, eax
  003a4	74 02		 je	 SHORT $LN34@s370_trans

; 1948 :                     break;

  003a6	eb 02		 jmp	 SHORT $LN15@s370_trans
$LN34@s370_trans:
  003a8	eb cd		 jmp	 SHORT $LN14@s370_trans
$LN15@s370_trans:
$LN32@s370_trans:
$LN26@s370_trans:

; 1949 :        }
; 1950 :     }
; 1951 : 
; 1952 :     /* Test for non-zero function byte */
; 1953 :     if (sbyte != 0)

  003aa	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  003ae	85 c0		 test	 eax, eax
  003b0	0f 84 c6 00 00
	00		 je	 $LN35@s370_trans

; 1954 :     {
; 1955 :         effective_addr1 += i;

  003b6	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  003b9	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  003bc	03 c8		 add	 ecx, eax
  003be	8b c1		 mov	 eax, ecx
  003c0	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax

; 1956 :         effective_addr1 &= ADDRESS_MAXWRAP( regs );

  003c3	8b 45 0c	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  003c6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003cb	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax

; 1957 : 
; 1958 :         /* Store address of argument byte in register 1 */
; 1959 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 1960 :         if (regs->psw.amode64)
; 1961 :             regs->GR_G(1) = effective_addr1;
; 1962 :         else
; 1963 : #endif
; 1964 :         if (regs->psw.amode)

  003ce	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003d6	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  003dc	d1 e8		 shr	 eax, 1
  003de	83 e0 01	 and	 eax, 1
  003e1	85 c0		 test	 eax, eax
  003e3	74 1d		 je	 SHORT $LN36@s370_trans

; 1965 :             regs->GR_L(1) = effective_addr1;

  003e5	b8 08 00 00 00	 mov	 eax, 8
  003ea	48 6b c0 01	 imul	 rax, rax, 1
  003ee	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003f6	8b 55 0c	 mov	 edx, DWORD PTR effective_addr1$[rbp]
  003f9	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
  00400	eb 40		 jmp	 SHORT $LN37@s370_trans
$LN36@s370_trans:

; 1966 :         else
; 1967 :             regs->GR_LA24(1) = effective_addr1;

  00402	b8 08 00 00 00	 mov	 eax, 8
  00407	48 6b c0 01	 imul	 rax, rax, 1
  0040b	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  0040e	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00414	48 8b 94 24 18
	03 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0041c	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  00423	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00428	0b c1		 or	 eax, ecx
  0042a	b9 08 00 00 00	 mov	 ecx, 8
  0042f	48 6b c9 01	 imul	 rcx, rcx, 1
  00433	48 8b 94 24 18
	03 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0043b	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN37@s370_trans:

; 1968 : 
; 1969 :         /* Store function byte in low-order byte of reg.2 */
; 1970 :         regs->GR_LHLCL(2) = sbyte;

  00442	b8 08 00 00 00	 mov	 eax, 8
  00447	48 6b c0 02	 imul	 rax, rax, 2
  0044b	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00453	0f b6 55 00	 movzx	 edx, BYTE PTR sbyte$[rbp]
  00457	88 94 01 80 02
	00 00		 mov	 BYTE PTR [rcx+rax+640], dl

; 1971 : 
; 1972 :         /* Set condition code 2 if argument byte was last byte
; 1973 :            of first operand, otherwise set condition code 1 */
; 1974 :         cc = (i == len) ? 2 : 1;

  0045e	8b 45 1c	 mov	 eax, DWORD PTR len$[rbp]
  00461	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00464	75 09		 jne	 SHORT $LN65@s370_trans
  00466	c7 45 48 02 00
	00 00		 mov	 DWORD PTR tv271[rbp], 2
  0046d	eb 07		 jmp	 SHORT $LN66@s370_trans
$LN65@s370_trans:
  0046f	c7 45 48 01 00
	00 00		 mov	 DWORD PTR tv271[rbp], 1
$LN66@s370_trans:
  00476	8b 45 48	 mov	 eax, DWORD PTR tv271[rbp]
  00479	89 45 4c	 mov	 DWORD PTR cc$[rbp], eax
$LN35@s370_trans:

; 1975 :     }
; 1976 : 
; 1977 :     /* Update the condition code */
; 1978 :     regs->psw.cc = cc;

  0047c	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00484	0f b6 4d 4c	 movzx	 ecx, BYTE PTR cc$[rbp]
  00488	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1979 : 
; 1980 : #if defined( FEATURE_PER1 )
; 1981 :     /* Check for PER 1 GRA event */
; 1982 :     if (sbyte != 0) // were GR1 and GR2 modified?

  0048b	0f b6 45 00	 movzx	 eax, BYTE PTR sbyte$[rbp]
  0048f	85 c0		 test	 eax, eax
  00491	0f 84 86 00 00
	00		 je	 $LN38@s370_trans
$LN19@s370_trans:

; 1983 :         PER_GRA_CHECK( regs, PER_GRA_MASK2( 1, 2 ));

  00497	33 c0		 xor	 eax, eax
  00499	83 f8 01	 cmp	 eax, 1
  0049c	74 75		 je	 SHORT $LN39@s370_trans
  0049e	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004a6	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  004ac	c1 e8 02	 shr	 eax, 2
  004af	83 e0 01	 and	 eax, 1
  004b2	85 c0		 test	 eax, eax
  004b4	74 09		 je	 SHORT $LN69@s370_trans
  004b6	c7 45 50 01 00
	00 00		 mov	 DWORD PTR tv286[rbp], 1
  004bd	eb 07		 jmp	 SHORT $LN70@s370_trans
$LN69@s370_trans:
  004bf	c7 45 50 00 00
	00 00		 mov	 DWORD PTR tv286[rbp], 0
$LN70@s370_trans:
  004c6	83 7d 50 00	 cmp	 DWORD PTR tv286[rbp], 0
  004ca	74 47		 je	 SHORT $LN39@s370_trans
  004cc	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004d4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  004d7	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  004dc	85 c0		 test	 eax, eax
  004de	74 33		 je	 SHORT $LN39@s370_trans
  004e0	b8 08 00 00 00	 mov	 eax, 8
  004e5	48 6b c0 0a	 imul	 rax, rax, 10
  004e9	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004f1	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  004f8	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  004fd	25 00 60 00 00	 and	 eax, 24576		; 00006000H
  00502	85 c0		 test	 eax, eax
  00504	74 0d		 je	 SHORT $LN39@s370_trans
  00506	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0050e	e8 00 00 00 00	 call	 s370_per1_gra
$LN39@s370_trans:
  00513	33 c0		 xor	 eax, eax
  00515	85 c0		 test	 eax, eax
  00517	0f 85 7a ff ff
	ff		 jne	 $LN19@s370_trans
$LN38@s370_trans:

; 1984 : #endif
; 1985 : }

  0051d	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00524	48 33 cc	 xor	 rcx, rsp
  00527	e8 00 00 00 00	 call	 __security_check_cookie
  0052c	48 81 c4 00 03
	00 00		 add	 rsp, 768		; 00000300H
  00533	5d		 pop	 rbp
  00534	c3		 ret	 0
s370_translate_and_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
n$ = 52
b$ = 56
effective_addr2$ = 60
len$ = 64
effective_addr1$ = 68
len2$ = 72
b2$ = 76
temp$1 = 80
b1$ = 84
dest$ = 88
dest2$ = 96
tab$ = 104
tv151 = 112
tv175 = 116
tv313 = 120
tv341 = 124
tab2$ = 128
tv249 = 136
tv286 = 144
inst$ = 176
regs$ = 184
s370_translate PROC

; 1817 : {

$LN54:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1818 : int     len, len2 = -1;                 /* Lengths                   */

  00011	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR len2$[rsp], -1

; 1819 : int     b1, b2;                         /* Values of base field      */
; 1820 : int     i, b, n;                        /* Work variables            */
; 1821 : VADR    effective_addr1;                /* Effective address         */
; 1822 : VADR    effective_addr2;                /* Effective address         */
; 1823 : BYTE   *dest, *dest2 = NULL, *tab, *tab2; /* Mainstor pointers       */

  00019	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR dest2$[rsp], 0

; 1824 : 
; 1825 :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00022	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002a	48 83 c0 02	 add	 rax, 2
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 fetch_fw_noswap
  00036	8b c8		 mov	 ecx, eax
  00038	e8 00 00 00 00	 call	 _byteswap_ulong
  0003d	89 44 24 50	 mov	 DWORD PTR temp$1[rsp], eax
  00041	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004a	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0004e	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00052	c1 e8 0c	 shr	 eax, 12
  00055	83 e0 0f	 and	 eax, 15
  00058	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax
  0005c	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00060	c1 e8 10	 shr	 eax, 16
  00063	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00068	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0006c	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00070	c1 e8 1c	 shr	 eax, 28
  00073	83 e0 0f	 and	 eax, 15
  00076	89 44 24 54	 mov	 DWORD PTR b1$[rsp], eax
  0007a	b8 01 00 00 00	 mov	 eax, 1
  0007f	48 6b c0 01	 imul	 rax, rax, 1
  00083	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0008b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008f	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
  00093	83 7c 24 54 00	 cmp	 DWORD PTR b1$[rsp], 0
  00098	74 2d		 je	 SHORT $LN29@s370_trans
  0009a	48 63 44 24 54	 movsxd	 rax, DWORD PTR b1$[rsp]
  0009f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000a7	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ae	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b2	03 c8		 add	 ecx, eax
  000b4	8b c1		 mov	 eax, ecx
  000b6	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000ba	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000be	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c3	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN29@s370_trans:
  000c7	83 7c 24 4c 00	 cmp	 DWORD PTR b2$[rsp], 0
  000cc	74 2d		 je	 SHORT $LN30@s370_trans
  000ce	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b2$[rsp]
  000d3	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000db	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000e2	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000e6	03 c8		 add	 ecx, eax
  000e8	8b c1		 mov	 eax, ecx
  000ea	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000ee	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000f2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000f7	89 44 24 3c	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN30@s370_trans:
$LN4@s370_trans:
  000fb	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00103	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00107	48 83 c0 06	 add	 rax, 6
  0010b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00113	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00117	33 c0		 xor	 eax, eax
  00119	83 f8 06	 cmp	 eax, 6
  0011c	74 0f		 je	 SHORT $LN31@s370_trans
  0011e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00126	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN31@s370_trans:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 c8		 jne	 SHORT $LN4@s370_trans

; 1826 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 1827 : 
; 1828 :     TXFC_INSTR_CHECK( regs );
; 1829 : 
; 1830 :     /* Get destination pointer */
; 1831 :     dest = MADDRL( effective_addr1, len+1, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00133	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00137	ff c0		 inc	 eax
  00139	48 98		 cdqe
  0013b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00143	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00147	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0014b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00153	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0015b	44 8b 44 24 54	 mov	 r8d, DWORD PTR b1$[rsp]
  00160	48 8b d0	 mov	 rdx, rax
  00163	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00167	e8 00 00 00 00	 call	 s370_maddr_l
  0016c	48 89 44 24 58	 mov	 QWORD PTR dest$[rsp], rax

; 1832 : 
; 1833 :     /* Get pointer to next page if destination crosses a boundary */
; 1834 :     if (CROSSPAGE( effective_addr1, len ))

  00171	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00175	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0017a	b9 ff 07 00 00	 mov	 ecx, 2047		; 000007ffH
  0017f	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  00183	3b c1		 cmp	 eax, ecx
  00185	7e 0a		 jle	 SHORT $LN40@s370_trans
  00187	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv151[rsp], 1
  0018f	eb 08		 jmp	 SHORT $LN41@s370_trans
$LN40@s370_trans:
  00191	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
$LN41@s370_trans:
  00199	83 7c 24 70 00	 cmp	 DWORD PTR tv151[rsp], 0
  0019e	74 79		 je	 SHORT $LN32@s370_trans

; 1835 :     {
; 1836 :         len2 = len;

  001a0	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  001a4	89 44 24 48	 mov	 DWORD PTR len2$[rsp], eax

; 1837 :         len = PAGEFRAME_BYTEMASK - (effective_addr1 & PAGEFRAME_BYTEMASK);

  001a8	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  001ac	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  001b1	b9 ff 07 00 00	 mov	 ecx, 2047		; 000007ffH
  001b6	2b c8		 sub	 ecx, eax
  001b8	8b c1		 mov	 eax, ecx
  001ba	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax

; 1838 :         len2 -= (len + 1);

  001be	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  001c2	ff c0		 inc	 eax
  001c4	8b 4c 24 48	 mov	 ecx, DWORD PTR len2$[rsp]
  001c8	2b c8		 sub	 ecx, eax
  001ca	8b c1		 mov	 eax, ecx
  001cc	89 44 24 48	 mov	 DWORD PTR len2$[rsp], eax

; 1839 :         dest2 = MADDRL((effective_addr1+len+1) & ADDRESS_MAXWRAP( regs ),

  001d0	48 63 44 24 48	 movsxd	 rax, DWORD PTR len2$[rsp]
  001d5	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  001d9	8b 54 24 40	 mov	 edx, DWORD PTR len$[rsp]
  001dd	8d 4c 11 01	 lea	 ecx, DWORD PTR [rcx+rdx+1]
  001e1	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  001e7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001ef	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  001f3	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  001f7	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001ff	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00207	44 8b 44 24 54	 mov	 r8d, DWORD PTR b1$[rsp]
  0020c	48 8b d0	 mov	 rdx, rax
  0020f	e8 00 00 00 00	 call	 s370_maddr_l
  00214	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax
$LN32@s370_trans:

; 1840 :                   len2, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );
; 1841 :     }
; 1842 : 
; 1843 :     /* Fast path if table does not cross a boundary */
; 1844 :     if (NOCROSSPAGE( effective_addr2, 255 ))

  00219	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0021d	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00222	3d 00 07 00 00	 cmp	 eax, 1792		; 00000700H
  00227	7f 0a		 jg	 SHORT $LN44@s370_trans
  00229	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv175[rsp], 1
  00231	eb 08		 jmp	 SHORT $LN45@s370_trans
$LN44@s370_trans:
  00233	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv175[rsp], 0
$LN45@s370_trans:
  0023b	83 7c 24 74 00	 cmp	 DWORD PTR tv175[rsp], 0
  00240	0f 84 c7 00 00
	00		 je	 $LN33@s370_trans

; 1845 :     {
; 1846 :         tab = MADDRL(effective_addr2, 256, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  00246	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0024e	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00252	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00256	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0025e	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00266	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  0026b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00270	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00274	e8 00 00 00 00	 call	 s370_maddr_l
  00279	48 89 44 24 68	 mov	 QWORD PTR tab$[rsp], rax

; 1847 :         /* Perform translate function */
; 1848 :         for (i=0; i <= len;  i++) dest [i] = tab[dest [i]];

  0027e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00286	eb 0a		 jmp	 SHORT $LN7@s370_trans
$LN5@s370_trans:
  00288	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0028c	ff c0		 inc	 eax
  0028e	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@s370_trans:
  00292	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00296	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0029a	7f 27		 jg	 SHORT $LN6@s370_trans
  0029c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  002a1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  002a6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002aa	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  002af	48 8b 54 24 58	 mov	 rdx, QWORD PTR dest$[rsp]
  002b4	4c 8b 44 24 68	 mov	 r8, QWORD PTR tab$[rsp]
  002b9	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  002be	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  002c1	eb c5		 jmp	 SHORT $LN5@s370_trans
$LN6@s370_trans:

; 1849 :         for (i=0; i <= len2; i++) dest2[i] = tab[dest2[i]];

  002c3	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  002cb	eb 0a		 jmp	 SHORT $LN10@s370_trans
$LN8@s370_trans:
  002cd	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  002d1	ff c0		 inc	 eax
  002d3	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN10@s370_trans:
  002d7	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  002db	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  002df	7f 27		 jg	 SHORT $LN9@s370_trans
  002e1	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  002e6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  002eb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002ef	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  002f4	48 8b 54 24 60	 mov	 rdx, QWORD PTR dest2$[rsp]
  002f9	4c 8b 44 24 68	 mov	 r8, QWORD PTR tab$[rsp]
  002fe	41 0f b6 04 00	 movzx	 eax, BYTE PTR [r8+rax]
  00303	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00306	eb c5		 jmp	 SHORT $LN8@s370_trans
$LN9@s370_trans:

; 1850 :     }

  00308	e9 a7 03 00 00	 jmp	 $LN34@s370_trans
$LN33@s370_trans:

; 1851 :     else /* Translate table spans a boundary */
; 1852 :     {
; 1853 :         n = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  0030d	8b 44 24 3c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00311	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00316	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0031b	2b c8		 sub	 ecx, eax
  0031d	8b c1		 mov	 eax, ecx
  0031f	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 1854 :         b = dest[0];

  00323	b8 01 00 00 00	 mov	 eax, 1
  00328	48 6b c0 00	 imul	 rax, rax, 0
  0032c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00331	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00335	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax

; 1855 : 
; 1856 :         /* Referenced part of the table may or may not span boundary */
; 1857 :         if (b < n)

  00339	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  0033d	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00341	0f 8d 32 01 00
	00		 jge	 $LN35@s370_trans

; 1858 :         {
; 1859 :             tab = MADDRL(effective_addr2, n, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  00347	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  0034c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00354	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00358	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0035c	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00364	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0036c	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  00371	48 8b d0	 mov	 rdx, rax
  00374	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00378	e8 00 00 00 00	 call	 s370_maddr_l
  0037d	48 89 44 24 68	 mov	 QWORD PTR tab$[rsp], rax

; 1860 :             for (i=1; i <= len  && b < n; i++) b = dest [i];

  00382	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  0038a	eb 0a		 jmp	 SHORT $LN13@s370_trans
$LN11@s370_trans:
  0038c	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00390	ff c0		 inc	 eax
  00392	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@s370_trans:
  00396	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0039a	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0039e	7f 1e		 jg	 SHORT $LN12@s370_trans
  003a0	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  003a4	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  003a8	7d 14		 jge	 SHORT $LN12@s370_trans
  003aa	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  003af	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  003b4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003b8	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  003bc	eb ce		 jmp	 SHORT $LN11@s370_trans
$LN12@s370_trans:

; 1861 :             for (i=0; i <= len2 && b < n; i++) b = dest2[i];

  003be	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003c6	eb 0a		 jmp	 SHORT $LN16@s370_trans
$LN14@s370_trans:
  003c8	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003cc	ff c0		 inc	 eax
  003ce	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s370_trans:
  003d2	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  003d6	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  003da	7f 1e		 jg	 SHORT $LN15@s370_trans
  003dc	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  003e0	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  003e4	7d 14		 jge	 SHORT $LN15@s370_trans
  003e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  003eb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  003f0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  003f4	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  003f8	eb ce		 jmp	 SHORT $LN14@s370_trans
$LN15@s370_trans:

; 1862 : 
; 1863 :             tab2 = b < n ? NULL

  003fa	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  003fe	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  00402	7d 0e		 jge	 SHORT $LN46@s370_trans
  00404	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv249[rsp], 0
  00410	eb 52		 jmp	 SHORT $LN47@s370_trans
$LN46@s370_trans:
  00412	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  00417	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  0041b	48 98		 cdqe
  0041d	8b 4c 24 34	 mov	 ecx, DWORD PTR n$[rsp]
  00421	8b 54 24 3c	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00425	03 d1		 add	 edx, ecx
  00427	8b ca		 mov	 ecx, edx
  00429	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0042f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00437	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  0043b	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0043f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00447	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0044f	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  00454	48 8b d0	 mov	 rdx, rax
  00457	e8 00 00 00 00	 call	 s370_maddr_l
  0045c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv249[rsp], rax
$LN47@s370_trans:
  00464	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv249[rsp]
  0046c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tab2$[rsp], rax

; 1864 :                          : MADDRL((effective_addr2+n) & ADDRESS_MAXWRAP( regs ),
; 1865 :                             256 - n, b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1866 :         }

  00474	e9 2d 01 00 00	 jmp	 $LN36@s370_trans
$LN35@s370_trans:

; 1867 :         else
; 1868 :         {
; 1869 :             tab2 = MADDRL((effective_addr2+n) & ADDRESS_MAXWRAP( regs ),

  00479	b8 00 01 00 00	 mov	 eax, 256		; 00000100H
  0047e	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  00482	48 98		 cdqe
  00484	8b 4c 24 34	 mov	 ecx, DWORD PTR n$[rsp]
  00488	8b 54 24 3c	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  0048c	03 d1		 add	 edx, ecx
  0048e	8b ca		 mov	 ecx, edx
  00490	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00496	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0049e	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  004a2	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  004a6	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  004ae	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004b6	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  004bb	48 8b d0	 mov	 rdx, rax
  004be	e8 00 00 00 00	 call	 s370_maddr_l
  004c3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tab2$[rsp], rax

; 1870 :                   256 - n, b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1871 :             for (i=1; i <= len  && b >= n; i++) b = dest [i];

  004cb	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  004d3	eb 0a		 jmp	 SHORT $LN19@s370_trans
$LN17@s370_trans:
  004d5	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  004d9	ff c0		 inc	 eax
  004db	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@s370_trans:
  004df	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  004e3	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  004e7	7f 1e		 jg	 SHORT $LN18@s370_trans
  004e9	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  004ed	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  004f1	7c 14		 jl	 SHORT $LN18@s370_trans
  004f3	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  004f8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  004fd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00501	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  00505	eb ce		 jmp	 SHORT $LN17@s370_trans
$LN18@s370_trans:

; 1872 :             for (i=0; i <= len2 && b >= n; i++) b = dest2[i];

  00507	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0050f	eb 0a		 jmp	 SHORT $LN22@s370_trans
$LN20@s370_trans:
  00511	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00515	ff c0		 inc	 eax
  00517	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@s370_trans:
  0051b	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  0051f	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00523	7f 1e		 jg	 SHORT $LN21@s370_trans
  00525	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00529	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  0052d	7c 14		 jl	 SHORT $LN21@s370_trans
  0052f	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00534	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00539	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0053d	89 44 24 38	 mov	 DWORD PTR b$[rsp], eax
  00541	eb ce		 jmp	 SHORT $LN20@s370_trans
$LN21@s370_trans:

; 1873 : 
; 1874 :             tab = b >= n ? NULL

  00543	8b 44 24 34	 mov	 eax, DWORD PTR n$[rsp]
  00547	39 44 24 38	 cmp	 DWORD PTR b$[rsp], eax
  0054b	7c 0e		 jl	 SHORT $LN48@s370_trans
  0054d	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv286[rsp], 0
  00559	eb 3e		 jmp	 SHORT $LN49@s370_trans
$LN48@s370_trans:
  0055b	48 63 44 24 34	 movsxd	 rax, DWORD PTR n$[rsp]
  00560	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00568	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0056c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00570	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00578	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00580	44 8b 44 24 4c	 mov	 r8d, DWORD PTR b2$[rsp]
  00585	48 8b d0	 mov	 rdx, rax
  00588	8b 4c 24 3c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0058c	e8 00 00 00 00	 call	 s370_maddr_l
  00591	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv286[rsp], rax
$LN49@s370_trans:
  00599	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv286[rsp]
  005a1	48 89 44 24 68	 mov	 QWORD PTR tab$[rsp], rax
$LN36@s370_trans:

; 1875 :                          : MADDRL(effective_addr2, n,
; 1876 :                                   b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 1877 :         }
; 1878 : 
; 1879 :         /* Perform translate function */
; 1880 :         for (i=0; i <= len;  i++) dest [i] = dest [i] < n ? tab[dest [i]] : tab2[dest [i]-n];

  005a6	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005ae	eb 0a		 jmp	 SHORT $LN25@s370_trans
$LN23@s370_trans:
  005b0	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  005b4	ff c0		 inc	 eax
  005b6	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@s370_trans:
  005ba	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  005be	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  005c2	7f 69		 jg	 SHORT $LN24@s370_trans
  005c4	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  005c9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  005ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005d2	3b 44 24 34	 cmp	 eax, DWORD PTR n$[rsp]
  005d6	7d 1d		 jge	 SHORT $LN50@s370_trans
  005d8	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  005dd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  005e2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005e6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tab$[rsp]
  005eb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  005ef	89 44 24 78	 mov	 DWORD PTR tv313[rsp], eax
  005f3	eb 24		 jmp	 SHORT $LN51@s370_trans
$LN50@s370_trans:
  005f5	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  005fa	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  005ff	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00603	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  00607	48 98		 cdqe
  00609	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tab2$[rsp]
  00611	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00615	89 44 24 78	 mov	 DWORD PTR tv313[rsp], eax
$LN51@s370_trans:
  00619	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0061e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dest$[rsp]
  00623	0f b6 54 24 78	 movzx	 edx, BYTE PTR tv313[rsp]
  00628	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  0062b	eb 83		 jmp	 SHORT $LN23@s370_trans
$LN24@s370_trans:

; 1881 :         for (i=0; i <= len2; i++) dest2[i] = dest2[i] < n ? tab[dest2[i]] : tab2[dest2[i]-n];

  0062d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00635	eb 0a		 jmp	 SHORT $LN28@s370_trans
$LN26@s370_trans:
  00637	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0063b	ff c0		 inc	 eax
  0063d	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@s370_trans:
  00641	8b 44 24 48	 mov	 eax, DWORD PTR len2$[rsp]
  00645	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00649	7f 69		 jg	 SHORT $LN27@s370_trans
  0064b	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00650	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00655	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00659	3b 44 24 34	 cmp	 eax, DWORD PTR n$[rsp]
  0065d	7d 1d		 jge	 SHORT $LN52@s370_trans
  0065f	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00664	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00669	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0066d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tab$[rsp]
  00672	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00676	89 44 24 7c	 mov	 DWORD PTR tv341[rsp], eax
  0067a	eb 24		 jmp	 SHORT $LN53@s370_trans
$LN52@s370_trans:
  0067c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00681	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00686	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0068a	2b 44 24 34	 sub	 eax, DWORD PTR n$[rsp]
  0068e	48 98		 cdqe
  00690	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tab2$[rsp]
  00698	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0069c	89 44 24 7c	 mov	 DWORD PTR tv341[rsp], eax
$LN53@s370_trans:
  006a0	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  006a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  006aa	0f b6 54 24 7c	 movzx	 edx, BYTE PTR tv341[rsp]
  006af	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  006b2	eb 83		 jmp	 SHORT $LN26@s370_trans
$LN27@s370_trans:
$LN34@s370_trans:

; 1882 :     }
; 1883 : }

  006b4	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  006bb	c3		 ret	 0
s370_translate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tbyte$ = 32
i2$ = 33
effective_addr1$ = 36
temp$1 = 40
b1$ = 44
tv134 = 48
tv135 = 52
inst$ = 80
regs$ = 88
s370_test_under_mask PROC

; 1729 : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1730 : BYTE    i2;                             /* Immediate operand         */
; 1731 : int     b1;                             /* Base of effective addr    */
; 1732 : VADR    effective_addr1;                /* Effective address         */
; 1733 : BYTE    tbyte;                          /* Work byte                 */
; 1734 : 
; 1735 :     SI(inst, regs, i2, b1, effective_addr1);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b1$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004a	88 44 24 21	 mov	 BYTE PTR i2$[rsp], al
  0004e	83 7c 24 2c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00053	74 2a		 je	 SHORT $LN5@s370_test_
  00055	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0005a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00066	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0006a	03 c8		 add	 ecx, eax
  0006c	8b c1		 mov	 eax, ecx
  0006e	89 44 24 24	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00072	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00076	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0007b	89 44 24 24	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN5@s370_test_:
$LN4@s370_test_:
  0007f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00084	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00088	48 83 c0 04	 add	 rax, 4
  0008c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00091	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00095	33 c0		 xor	 eax, eax
  00097	83 f8 04	 cmp	 eax, 4
  0009a	74 0c		 je	 SHORT $LN6@s370_test_
  0009c	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000a1	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_test_:
  000a8	33 c0		 xor	 eax, eax
  000aa	85 c0		 test	 eax, eax
  000ac	75 d1		 jne	 SHORT $LN4@s370_test_

; 1736 :     PER_ZEROADDR_XCHECK( regs, b1 );
; 1737 : 
; 1738 :     /* Fetch byte from operand address */
; 1739 :     tbyte = ARCH_DEP(vfetchb) ( effective_addr1, b1, regs );

  000ae	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000b3	8b 54 24 2c	 mov	 edx, DWORD PTR b1$[rsp]
  000b7	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000bb	e8 00 00 00 00	 call	 s370_vfetchb
  000c0	88 44 24 20	 mov	 BYTE PTR tbyte$[rsp], al

; 1740 : 
; 1741 :     /* AND with immediate operand mask */
; 1742 :     tbyte &= i2;

  000c4	0f b6 44 24 21	 movzx	 eax, BYTE PTR i2$[rsp]
  000c9	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR tbyte$[rsp]
  000ce	23 c8		 and	 ecx, eax
  000d0	8b c1		 mov	 eax, ecx
  000d2	88 44 24 20	 mov	 BYTE PTR tbyte$[rsp], al

; 1743 : 
; 1744 :     /* Set condition code according to result */
; 1745 :     regs->psw.cc =

  000d6	0f b6 44 24 20	 movzx	 eax, BYTE PTR tbyte$[rsp]
  000db	85 c0		 test	 eax, eax
  000dd	75 0a		 jne	 SHORT $LN10@s370_test_
  000df	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
  000e7	eb 28		 jmp	 SHORT $LN11@s370_test_
$LN10@s370_test_:
  000e9	0f b6 44 24 20	 movzx	 eax, BYTE PTR tbyte$[rsp]
  000ee	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR i2$[rsp]
  000f3	3b c1		 cmp	 eax, ecx
  000f5	75 0a		 jne	 SHORT $LN8@s370_test_
  000f7	c7 44 24 30 03
	00 00 00	 mov	 DWORD PTR tv134[rsp], 3
  000ff	eb 08		 jmp	 SHORT $LN9@s370_test_
$LN8@s370_test_:
  00101	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
$LN9@s370_test_:
  00109	8b 44 24 30	 mov	 eax, DWORD PTR tv134[rsp]
  0010d	89 44 24 34	 mov	 DWORD PTR tv135[rsp], eax
$LN11@s370_test_:
  00111	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00116	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR tv135[rsp]
  0011b	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1746 :             ( tbyte == 0 ) ? 0 :            /* result all zeroes */
; 1747 :             ( tbyte == i2) ? 3 :            /* result all ones   */
; 1748 :             1 ;                             /* result mixed      */
; 1749 : }

  0011e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00122	c3		 ret	 0
s370_test_under_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
old$ = 48
effective_addr2$ = 52
b2$ = 56
temp$1 = 60
tv89 = 64
tv131 = 68
tv186 = 72
tv196 = 76
main2$ = 80
inst$ = 112
regs$ = 120
s370_test_and_set PROC

; 1621 : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1622 : int     b2;                             /* Base of effective addr    */
; 1623 : VADR    effective_addr2;                /* Effective address         */
; 1624 : BYTE   *main2;                          /* Mainstor address          */
; 1625 : BYTE    old;                            /* Old value                 */
; 1626 : 
; 1627 :     S(inst, regs, b2, effective_addr2);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 3c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 3c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 3c	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 38	 mov	 DWORD PTR b2$[rsp], eax
  0003e	83 7c 24 38 00	 cmp	 DWORD PTR b2$[rsp], 0
  00043	74 2a		 je	 SHORT $LN13@s370_test_
  00045	48 63 44 24 38	 movsxd	 rax, DWORD PTR b2$[rsp]
  0004a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00056	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00062	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00066	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0006b	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN13@s370_test_:
$LN4@s370_test_:
  0006f	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00078	48 83 c0 04	 add	 rax, 4
  0007c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00081	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00085	33 c0		 xor	 eax, eax
  00087	83 f8 04	 cmp	 eax, 4
  0008a	74 0c		 je	 SHORT $LN14@s370_test_
  0008c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00091	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN14@s370_test_:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	75 d1		 jne	 SHORT $LN4@s370_test_
$LN7@s370_test_:

; 1628 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1629 : 
; 1630 :     TXFC_INSTR_CHECK( regs );
; 1631 : 
; 1632 :     ITIMER_SYNC(effective_addr2,0,regs);

  0009e	83 7c 24 34 54	 cmp	 DWORD PTR effective_addr2$[rsp], 84 ; 00000054H
  000a3	73 0a		 jae	 SHORT $LN28@s370_test_
  000a5	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  000ad	eb 08		 jmp	 SHORT $LN29@s370_test_
$LN28@s370_test_:
  000af	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN29@s370_test_:
  000b7	83 7c 24 40 00	 cmp	 DWORD PTR tv89[rsp], 0
  000bc	74 11		 je	 SHORT $LN30@s370_test_
  000be	83 7c 24 34 50	 cmp	 DWORD PTR effective_addr2$[rsp], 80 ; 00000050H
  000c3	72 0a		 jb	 SHORT $LN30@s370_test_
  000c5	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000cd	eb 08		 jmp	 SHORT $LN36@s370_test_
$LN30@s370_test_:
  000cf	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN36@s370_test_:
  000d7	83 7c 24 44 00	 cmp	 DWORD PTR tv131[rsp], 0
  000dc	74 0a		 je	 SHORT $LN15@s370_test_
  000de	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000e3	e8 00 00 00 00	 call	 s370_store_int_timer
$LN15@s370_test_:
  000e8	33 c0		 xor	 eax, eax
  000ea	85 c0		 test	 eax, eax
  000ec	75 b0		 jne	 SHORT $LN7@s370_test_

; 1633 : 
; 1634 :     /* Perform serialization before and after operation */
; 1635 :     PERFORM_SERIALIZATION( regs );

  000ee	0f ae f0	 mfence

; 1636 :     {
; 1637 :         /* Get operand absolute address */
; 1638 :         main2 = MADDR (effective_addr2, b2, regs, ACCTYPE_WRITE, regs->psw.pkey);

  000f1	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f6	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000fa	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000fe	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00106	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0010b	44 8b 44 24 38	 mov	 r8d, DWORD PTR b2$[rsp]
  00110	ba 01 00 00 00	 mov	 edx, 1
  00115	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00119	e8 00 00 00 00	 call	 s370_maddr_l
  0011e	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 1639 : 
; 1640 :         /* MAINLOCK may be required if cmpxchg assists unavailable */
; 1641 :         OBTAIN_MAINLOCK( regs );
; 1642 :         {
; 1643 :             /* Get old value */
; 1644 :             old = *main2;

  00123	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  00128	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0012b	88 44 24 30	 mov	 BYTE PTR old$[rsp], al

; 1645 : 
; 1646 :             /* Attempt to exchange the values */
; 1647 :             /*  The WHILE statement that follows could lead to a        */
; 1648 :             /*  TS-style lock release never being noticed, because      */
; 1649 :             /*  because such release statements are implemented using   */
; 1650 :             /*  regular instructions such as MVI or even ST which set   */
; 1651 :             /*  [the most significant bit of] the mem_lockbyte to zero; */
; 1652 :             /*  these are NOT being protected using _MAINLOCK.  In the  */
; 1653 :             /*  absence of a machine assist for "cmpxchg1" it is then   */
; 1654 :             /*  possible that this reset occurs in between the test     */
; 1655 :             /*  IF (old == mem_lockbyte), and the updating of           */
; 1656 :             /*  mem_lockbyte = 255;  As this update in the case         */
; 1657 :             /*  old == 255 is not needed to start with, we have         */
; 1658 :             /*  inserted the test IF (old != 255) in front of the       */
; 1659 :             /*  original WHILE statement.                               */
; 1660 :             /*  (The above bug WAS experienced running VM on an ARM     */
; 1661 :             /*  Raspberry PI; this correction fixed it.)                */
; 1662 :             /*                              (Peter J. Jansen, May 2015) */
; 1663 :             if (old != 255)

  0012f	0f b6 44 24 30	 movzx	 eax, BYTE PTR old$[rsp]
  00134	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00139	74 1a		 je	 SHORT $LN16@s370_test_
$LN8@s370_test_:

; 1664 :                 while (cmpxchg1( &old, 255, main2 ));

  0013b	4c 8b 44 24 50	 mov	 r8, QWORD PTR main2$[rsp]
  00140	b2 ff		 mov	 dl, 255			; 000000ffH
  00142	48 8d 4c 24 30	 lea	 rcx, QWORD PTR old$[rsp]
  00147	e8 00 00 00 00	 call	 cmpxchg1_x86
  0014c	0f b6 c0	 movzx	 eax, al
  0014f	85 c0		 test	 eax, eax
  00151	74 02		 je	 SHORT $LN9@s370_test_
  00153	eb e6		 jmp	 SHORT $LN8@s370_test_
$LN9@s370_test_:
$LN16@s370_test_:

; 1665 :             regs->psw.cc = old >> 7;

  00155	0f b6 44 24 30	 movzx	 eax, BYTE PTR old$[rsp]
  0015a	c1 f8 07	 sar	 eax, 7
  0015d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00162	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1666 :         }
; 1667 :         RELEASE_MAINLOCK( regs );
; 1668 :     }
; 1669 :     PERFORM_SERIALIZATION( regs );

  00165	0f ae f0	 mfence

; 1670 : 
; 1671 :     if (regs->psw.cc == 1)

  00168	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0016d	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  00171	83 f8 01	 cmp	 eax, 1
  00174	0f 85 9c 00 00
	00		 jne	 $LN17@s370_test_

; 1672 :     {
; 1673 : #if defined( _FEATURE_SIE )
; 1674 :         if(SIE_STATE_BIT_ON(regs, IC0, TS1))

  0017a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0017f	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00185	d1 e8		 shr	 eax, 1
  00187	83 e0 01	 and	 eax, 1
  0018a	85 c0		 test	 eax, eax
  0018c	74 70		 je	 SHORT $LN19@s370_test_
  0018e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00193	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	48 6b c9 00	 imul	 rcx, rcx, 0
  001a3	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  001a8	83 e0 08	 and	 eax, 8
  001ab	85 c0		 test	 eax, eax
  001ad	74 4f		 je	 SHORT $LN19@s370_test_

; 1675 :         {
; 1676 :             if( !OPEN_IC_PER(regs) )

  001af	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001b4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001b9	8b 49 4c	 mov	 ecx, DWORD PTR [rcx+76]
  001bc	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001bf	23 c1		 and	 eax, ecx
  001c1	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  001c6	85 c0		 test	 eax, eax
  001c8	75 1a		 jne	 SHORT $LN21@s370_test_

; 1677 :                 longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  001ca	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001cf	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  001d5	ba fc ff ff ff	 mov	 edx, -4
  001da	48 8b c8	 mov	 rcx, rax
  001dd	e8 00 00 00 00	 call	 longjmp
  001e2	eb 18		 jmp	 SHORT $LN22@s370_test_
$LN21@s370_test_:

; 1678 :             else
; 1679 :                 longjmp(regs->progjmp, SIE_INTERCEPT_INSTCOMP);

  001e4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001e9	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  001ef	ba fb ff ff ff	 mov	 edx, -5
  001f4	48 8b c8	 mov	 rcx, rax
  001f7	e8 00 00 00 00	 call	 longjmp
$LN22@s370_test_:

; 1680 :         }

  001fc	eb 16		 jmp	 SHORT $LN20@s370_test_
$LN19@s370_test_:

; 1681 :         else
; 1682 : #endif
; 1683 :             if (sysblk.cpus > 1)

  001fe	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00205	83 b8 04 01 00
	00 01		 cmp	 DWORD PTR [rax+260], 1
  0020c	7e 06		 jle	 SHORT $LN23@s370_test_

; 1684 :                 sched_yield();

  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN23@s370_test_:
$LN20@s370_test_:

; 1685 :     }

  00214	eb 50		 jmp	 SHORT $LN18@s370_test_
$LN17@s370_test_:
$LN12@s370_test_:

; 1686 :     else
; 1687 :     {
; 1688 :         ITIMER_UPDATE(effective_addr2,0,regs);

  00216	83 7c 24 34 54	 cmp	 DWORD PTR effective_addr2$[rsp], 84 ; 00000054H
  0021b	73 0a		 jae	 SHORT $LN39@s370_test_
  0021d	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv186[rsp], 1
  00225	eb 08		 jmp	 SHORT $LN40@s370_test_
$LN39@s370_test_:
  00227	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv186[rsp], 0
$LN40@s370_test_:
  0022f	83 7c 24 48 00	 cmp	 DWORD PTR tv186[rsp], 0
  00234	74 11		 je	 SHORT $LN41@s370_test_
  00236	83 7c 24 34 50	 cmp	 DWORD PTR effective_addr2$[rsp], 80 ; 00000050H
  0023b	72 0a		 jb	 SHORT $LN41@s370_test_
  0023d	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv196[rsp], 1
  00245	eb 08		 jmp	 SHORT $LN47@s370_test_
$LN41@s370_test_:
  00247	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv196[rsp], 0
$LN47@s370_test_:
  0024f	83 7c 24 4c 00	 cmp	 DWORD PTR tv196[rsp], 0
  00254	74 0a		 je	 SHORT $LN24@s370_test_
  00256	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0025b	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN24@s370_test_:
  00260	33 c0		 xor	 eax, eax
  00262	85 c0		 test	 eax, eax
  00264	75 b0		 jne	 SHORT $LN12@s370_test_
$LN18@s370_test_:
$LN25@s370_test_:

; 1689 :     }
; 1690 : }

  00266	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0026a	c3		 ret	 0
s370_test_and_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
tv207 = 52
tv214 = 56
tv221 = 60
tv223 = 64
rc$ = 68
psa$ = 72
px$ = 80
inst$ = 112
regs$ = 120
s370_supervisor_call PROC

; 1549 : {

$LN31:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1550 : BYTE    i;                              /* Instruction byte 1        */
; 1551 : PSA    *psa;                            /* -> prefixed storage area  */
; 1552 : RADR    px;                             /* prefix                    */
; 1553 : int     rc;                             /* Return code               */
; 1554 : 
; 1555 :     RR_SVC(inst, regs, i);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	88 44 24 30	 mov	 BYTE PTR i$[rsp], al
$LN4@s370_super:
  00024	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00029	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0002d	48 83 c0 02	 add	 rax, 2
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00036	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0003a	33 c0		 xor	 eax, eax
  0003c	83 f8 02	 cmp	 eax, 2
  0003f	74 0c		 je	 SHORT $LN11@s370_super
  00041	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00046	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN11@s370_super:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 d1		 jne	 SHORT $LN4@s370_super

; 1556 : 
; 1557 :     TXF_INSTR_CHECK( regs );
; 1558 : 
; 1559 : #if defined( FEATURE_ECPSVM )
; 1560 :     if(ecpsvm_dosvc(regs,i)==0)

  00053	0f b6 44 24 30	 movzx	 eax, BYTE PTR i$[rsp]
  00058	8b d0		 mov	 edx, eax
  0005a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	e8 00 00 00 00	 call	 ecpsvm_dosvc
  00064	85 c0		 test	 eax, eax
  00066	75 05		 jne	 SHORT $LN12@s370_super

; 1561 :     {
; 1562 :         return;

  00068	e9 53 03 00 00	 jmp	 $LN1@s370_super
$LN12@s370_super:

; 1563 :     }
; 1564 : #endif
; 1565 : 
; 1566 : #if defined( _FEATURE_SIE )
; 1567 :     if(SIE_MODE(regs) &&

  0006d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00072	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00078	d1 e8		 shr	 eax, 1
  0007a	83 e0 01	 and	 eax, 1
  0007d	85 c0		 test	 eax, eax
  0007f	0f 84 0f 01 00
	00		 je	 $LN13@s370_super
  00085	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00091	b9 01 00 00 00	 mov	 ecx, 1
  00096	48 6b c9 00	 imul	 rcx, rcx, 0
  0009a	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  0009f	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000a4	85 c0		 test	 eax, eax
  000a6	0f 85 d0 00 00
	00		 jne	 $LN14@s370_super
  000ac	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000b1	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000b8	b9 01 00 00 00	 mov	 ecx, 1
  000bd	48 6b c9 00	 imul	 rcx, rcx, 0
  000c1	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  000c6	83 e0 40	 and	 eax, 64			; 00000040H
  000c9	85 c0		 test	 eax, eax
  000cb	74 27		 je	 SHORT $LN15@s370_super
  000cd	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000d2	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000d9	b9 01 00 00 00	 mov	 ecx, 1
  000de	48 6b c9 01	 imul	 rcx, rcx, 1
  000e2	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  000e7	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  000ec	3b c1		 cmp	 eax, ecx
  000ee	0f 84 88 00 00
	00		 je	 $LN14@s370_super
$LN15@s370_super:
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00100	b9 01 00 00 00	 mov	 ecx, 1
  00105	48 6b c9 00	 imul	 rcx, rcx, 0
  00109	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  0010e	83 e0 20	 and	 eax, 32			; 00000020H
  00111	85 c0		 test	 eax, eax
  00113	74 23		 je	 SHORT $LN16@s370_super
  00115	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011a	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00121	b9 01 00 00 00	 mov	 ecx, 1
  00126	48 6b c9 02	 imul	 rcx, rcx, 2
  0012a	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  0012f	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  00134	3b c1		 cmp	 eax, ecx
  00136	74 44		 je	 SHORT $LN14@s370_super
$LN16@s370_super:
  00138	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0013d	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00144	b9 01 00 00 00	 mov	 ecx, 1
  00149	48 6b c9 00	 imul	 rcx, rcx, 0
  0014d	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00152	83 e0 10	 and	 eax, 16
  00155	85 c0		 test	 eax, eax
  00157	74 3b		 je	 SHORT $LN13@s370_super
  00159	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0015e	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  00165	b9 01 00 00 00	 mov	 ecx, 1
  0016a	48 6b c9 03	 imul	 rcx, rcx, 3
  0016e	0f b6 44 08 40	 movzx	 eax, BYTE PTR [rax+rcx+64]
  00173	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i$[rsp]
  00178	3b c1		 cmp	 eax, ecx
  0017a	75 18		 jne	 SHORT $LN13@s370_super
$LN14@s370_super:

; 1568 :       ( (regs->siebk->svc_ctl[0] & SIE_SVC0_ALL)
; 1569 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_1N) &&
; 1570 :               regs->siebk->svc_ctl[1] == i)
; 1571 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_2N) &&
; 1572 :               regs->siebk->svc_ctl[2] == i)
; 1573 :         || ( (regs->siebk->svc_ctl[0] & SIE_SVC0_3N) &&
; 1574 :               regs->siebk->svc_ctl[3] == i) ))
; 1575 :         longjmp(regs->progjmp, SIE_INTERCEPT_INST);

  0017c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00181	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00187	ba fc ff ff ff	 mov	 edx, -4
  0018c	48 8b c8	 mov	 rcx, rax
  0018f	e8 00 00 00 00	 call	 longjmp
$LN13@s370_super:

; 1576 : #endif
; 1577 : 
; 1578 :     px = regs->PX;

  00194	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00199	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0019c	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax
$LN7@s370_super:

; 1579 :     SIE_TRANSLATE(&px, ACCTYPE_WRITE, regs);

  001a1	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001a6	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  001ac	d1 e8		 shr	 eax, 1
  001ae	83 e0 01	 and	 eax, 1
  001b1	85 c0		 test	 eax, eax
  001b3	74 6a		 je	 SHORT $LN17@s370_super
  001b5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001ba	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  001c0	c1 e8 02	 shr	 eax, 2
  001c3	83 e0 01	 and	 eax, 1
  001c6	85 c0		 test	 eax, eax
  001c8	75 55		 jne	 SHORT $LN17@s370_super
  001ca	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001cf	48 8b 80 98 08
	00 00		 mov	 rax, QWORD PTR [rax+2200]
  001d6	48 03 44 24 50	 add	 rax, QWORD PTR px$[rsp]
  001db	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR [rsp+40], 1
  001e4	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  001e9	41 b9 02 00 00
	00		 mov	 r9d, 2
  001ef	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001f4	4c 8b 81 68 08
	00 00		 mov	 r8, QWORD PTR [rcx+2152]
  001fb	ba fd ff ff ff	 mov	 edx, -3
  00200	8b c8		 mov	 ecx, eax
  00202	e8 00 00 00 00	 call	 s390_logical_to_main_l
  00207	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0020c	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00213	48 8b 80 08 08
	00 00		 mov	 rax, QWORD PTR [rax+2056]
  0021a	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax
$LN17@s370_super:
  0021f	33 c0		 xor	 eax, eax
  00221	85 c0		 test	 eax, eax
  00223	0f 85 78 ff ff
	ff		 jne	 $LN7@s370_super

; 1580 : 
; 1581 :     /* Set the main storage reference and change bits */
; 1582 :     ARCH_DEP( or_storage_key )( px, (STORKEY_REF | STORKEY_CHANGE) );

  00229	b2 06		 mov	 dl, 6
  0022b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR px$[rsp]
  00230	e8 00 00 00 00	 call	 s370_or_storage_key

; 1583 : 
; 1584 :     /* Use the I-byte to set the SVC interruption code */
; 1585 :     regs->psw.intcode = i;

  00235	0f b6 44 24 30	 movzx	 eax, BYTE PTR i$[rsp]
  0023a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0023f	66 89 81 98 00
	00 00		 mov	 WORD PTR [rcx+152], ax

; 1586 : 
; 1587 :     /* Point to PSA in main storage */
; 1588 :     psa = (void*)(regs->mainstor + px);

  00246	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0024b	48 8b 80 48 08
	00 00		 mov	 rax, QWORD PTR [rax+2120]
  00252	48 03 44 24 50	 add	 rax, QWORD PTR px$[rsp]
  00257	48 89 44 24 48	 mov	 QWORD PTR psa$[rsp], rax

; 1589 : 
; 1590 : #if defined( FEATURE_BCMODE )
; 1591 :     /* For ECMODE, store SVC interrupt code at PSA+X'88' */
; 1592 :     if ( ECMODE(&regs->psw) )

  0025c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00261	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00265	83 e0 08	 and	 eax, 8
  00268	85 c0		 test	 eax, eax
  0026a	0f 84 e4 00 00
	00		 je	 $LN18@s370_super

; 1593 : #endif
; 1594 :     {
; 1595 :         psa->svcint[0] = 0;

  00270	b8 01 00 00 00	 mov	 eax, 1
  00275	48 6b c0 00	 imul	 rax, rax, 0
  00279	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  0027e	c6 84 01 88 00
	00 00 00	 mov	 BYTE PTR [rcx+rax+136], 0

; 1596 :         psa->svcint[1] = REAL_ILC(regs);

  00286	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0028b	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00291	83 e0 01	 and	 eax, 1
  00294	85 c0		 test	 eax, eax
  00296	75 0a		 jne	 SHORT $LN21@s370_super
  00298	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv207[rsp], 1
  002a0	eb 08		 jmp	 SHORT $LN22@s370_super
$LN21@s370_super:
  002a2	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv207[rsp], 0
$LN22@s370_super:
  002aa	83 7c 24 34 00	 cmp	 DWORD PTR tv207[rsp], 0
  002af	74 0a		 je	 SHORT $LN25@s370_super
  002b1	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv214[rsp], 1
  002b9	eb 08		 jmp	 SHORT $LN26@s370_super
$LN25@s370_super:
  002bb	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv214[rsp], 0
$LN26@s370_super:
  002c3	83 7c 24 38 00	 cmp	 DWORD PTR tv214[rsp], 0
  002c8	74 12		 je	 SHORT $LN29@s370_super
  002ca	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002cf	0f b6 80 9a 00
	00 00		 movzx	 eax, BYTE PTR [rax+154]
  002d6	89 44 24 40	 mov	 DWORD PTR tv223[rsp], eax
  002da	eb 2e		 jmp	 SHORT $LN30@s370_super
$LN29@s370_super:
  002dc	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002e1	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  002e7	d1 e8		 shr	 eax, 1
  002e9	83 e0 01	 and	 eax, 1
  002ec	85 c0		 test	 eax, eax
  002ee	74 0a		 je	 SHORT $LN27@s370_super
  002f0	c7 44 24 3c 06
	00 00 00	 mov	 DWORD PTR tv221[rsp], 6
  002f8	eb 08		 jmp	 SHORT $LN28@s370_super
$LN27@s370_super:
  002fa	c7 44 24 3c 04
	00 00 00	 mov	 DWORD PTR tv221[rsp], 4
$LN28@s370_super:
  00302	8b 44 24 3c	 mov	 eax, DWORD PTR tv221[rsp]
  00306	89 44 24 40	 mov	 DWORD PTR tv223[rsp], eax
$LN30@s370_super:
  0030a	b8 01 00 00 00	 mov	 eax, 1
  0030f	48 6b c0 01	 imul	 rax, rax, 1
  00313	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  00318	0f b6 54 24 40	 movzx	 edx, BYTE PTR tv223[rsp]
  0031d	88 94 01 88 00
	00 00		 mov	 BYTE PTR [rcx+rax+136], dl

; 1597 :         psa->svcint[2] = 0;

  00324	b8 01 00 00 00	 mov	 eax, 1
  00329	48 6b c0 02	 imul	 rax, rax, 2
  0032d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  00332	c6 84 01 88 00
	00 00 00	 mov	 BYTE PTR [rcx+rax+136], 0

; 1598 :         psa->svcint[3] = i;

  0033a	b8 01 00 00 00	 mov	 eax, 1
  0033f	48 6b c0 03	 imul	 rax, rax, 3
  00343	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psa$[rsp]
  00348	0f b6 54 24 30	 movzx	 edx, BYTE PTR i$[rsp]
  0034d	88 94 01 88 00
	00 00		 mov	 BYTE PTR [rcx+rax+136], dl
$LN18@s370_super:

; 1599 :     }
; 1600 : 
; 1601 :     /* Store current PSW at PSA+X'20' */
; 1602 :     ARCH_DEP(store_psw) ( regs, psa->svcold );

  00354	48 8b 44 24 48	 mov	 rax, QWORD PTR psa$[rsp]
  00359	48 83 c0 20	 add	 rax, 32			; 00000020H
  0035d	48 8b d0	 mov	 rdx, rax
  00360	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00365	e8 00 00 00 00	 call	 s370_store_psw

; 1603 : 
; 1604 :     /* Load new PSW from PSA+X'60' */
; 1605 :     if ( (rc = ARCH_DEP(load_psw) ( regs, psa->svcnew ) ) )

  0036a	48 8b 44 24 48	 mov	 rax, QWORD PTR psa$[rsp]
  0036f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00373	48 8b d0	 mov	 rdx, rax
  00376	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0037b	e8 00 00 00 00	 call	 s370_load_psw
  00380	89 44 24 44	 mov	 DWORD PTR rc$[rsp], eax
  00384	83 7c 24 44 00	 cmp	 DWORD PTR rc$[rsp], 0
  00389	74 14		 je	 SHORT $LN19@s370_super

; 1606 :         regs->program_interrupt (regs, rc);

  0038b	8b 54 24 44	 mov	 edx, DWORD PTR rc$[rsp]
  0038f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00394	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00399	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN19@s370_super:

; 1607 : 
; 1608 :     /* Perform serialization and checkpoint synchronization */
; 1609 :     PERFORM_SERIALIZATION (regs);

  0039f	0f ae f0	 mfence
$LN10@s370_super:

; 1610 :     PERFORM_CHKPT_SYNC (regs);

  003a2	33 c0		 xor	 eax, eax
  003a4	85 c0		 test	 eax, eax
  003a6	75 fa		 jne	 SHORT $LN10@s370_super

; 1611 : 
; 1612 :     RETURN_INTCHECK(regs);

  003a8	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003ad	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  003b3	ba ff ff ff ff	 mov	 edx, -1
  003b8	48 8b c8	 mov	 rcx, rax
  003bb	e8 00 00 00 00	 call	 longjmp
$LN1@s370_super:
$LN20@s370_super:

; 1613 : 
; 1614 : }

  003c0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003c4	c3		 ret	 0
s370_supervisor_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
i$1 = 36
tv150 = 40
r2$ = 44
tv195 = 48
tv94 = 56
inst$ = 80
regs$ = 88
s370_subtract_register PROC

; 1342 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1343 : int     r1, r2;                         /* Values of R fields        */
; 1344 : 
; 1345 :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 2c	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_subtr:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 02	 cmp	 eax, 2
  00058	74 0c		 je	 SHORT $LN8@s370_subtr
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s370_subtr:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s370_subtr

; 1346 : 
; 1347 :     /* Subtract signed operands and set condition code */
; 1348 :     regs->psw.cc =

  0006c	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r2$[rsp]
  00071	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00076	48 63 54 24 20	 movsxd	 rdx, DWORD PTR r1$[rsp]
  0007b	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00080	49 8d 94 d0 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx*8+640]
  00088	48 89 54 24 38	 mov	 QWORD PTR tv94[rsp], rdx
  0008d	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00092	45 8b 84 c0 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax*8+640]
  0009a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0009f	8b 94 c8 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx*8+640]
  000a6	48 8b 44 24 38	 mov	 rax, QWORD PTR tv94[rsp]
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	e8 00 00 00 00	 call	 sub_signed
  000b3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000b8	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1349 :             sub_signed (&(regs->GR_L(r1)),
; 1350 :                     regs->GR_L(r1),
; 1351 :                     regs->GR_L(r2));
; 1352 : 
; 1353 :     /* Program check if fixed-point overflow */
; 1354 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  000bb	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000c0	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  000c4	83 f8 03	 cmp	 eax, 3
  000c7	75 25		 jne	 SHORT $LN9@s370_subtr
  000c9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ce	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  000d2	83 e0 08	 and	 eax, 8
  000d5	85 c0		 test	 eax, eax
  000d7	74 15		 je	 SHORT $LN9@s370_subtr

; 1355 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  000d9	ba 08 00 00 00	 mov	 edx, 8
  000de	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000e3	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e8	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@s370_subtr:
$LN7@s370_subtr:

; 1356 : 
; 1357 :     /* Check for PER 1 GRA event */
; 1358 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  000ee	33 c0		 xor	 eax, eax
  000f0	83 f8 01	 cmp	 eax, 1
  000f3	0f 84 80 00 00
	00		 je	 $LN10@s370_subtr
  000f9	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000fe	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00104	c1 e8 02	 shr	 eax, 2
  00107	83 e0 01	 and	 eax, 1
  0010a	85 c0		 test	 eax, eax
  0010c	74 0a		 je	 SHORT $LN14@s370_subtr
  0010e	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv150[rsp], 1
  00116	eb 08		 jmp	 SHORT $LN15@s370_subtr
$LN14@s370_subtr:
  00118	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv150[rsp], 0
$LN15@s370_subtr:
  00120	83 7c 24 28 00	 cmp	 DWORD PTR tv150[rsp], 0
  00125	74 52		 je	 SHORT $LN10@s370_subtr
  00127	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0012c	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0012f	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00134	85 c0		 test	 eax, eax
  00136	74 41		 je	 SHORT $LN10@s370_subtr
  00138	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  0013c	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  00141	89 4c 24 30	 mov	 DWORD PTR tv195[rsp], ecx
  00145	0f b6 c8	 movzx	 ecx, al
  00148	8b 44 24 30	 mov	 eax, DWORD PTR tv195[rsp]
  0014c	d3 f8		 sar	 eax, cl
  0014e	b9 08 00 00 00	 mov	 ecx, 8
  00153	48 6b c9 0a	 imul	 rcx, rcx, 10
  00157	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  0015c	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00163	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00169	23 c1		 and	 eax, ecx
  0016b	85 c0		 test	 eax, eax
  0016d	74 0a		 je	 SHORT $LN10@s370_subtr
  0016f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00174	e8 00 00 00 00	 call	 s370_per1_gra
$LN10@s370_subtr:
  00179	33 c0		 xor	 eax, eax
  0017b	85 c0		 test	 eax, eax
  0017d	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_subtr

; 1359 : }

  00183	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00187	c3		 ret	 0
s370_subtract_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
i$1 = 36
tv80 = 40
r2$ = 44
tv152 = 48
tv196 = 52
tv138 = 56
inst$ = 80
regs$ = 88
s370_subtract_logical_register PROC

; 1495 : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1496 : int     r1, r2;                         /* Values of R fields        */
; 1497 : 
; 1498 :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 2c	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_subtr:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 02	 cmp	 eax, 2
  00058	74 0c		 je	 SHORT $LN8@s370_subtr
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s370_subtr:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s370_subtr

; 1499 : 
; 1500 :     /* Subtract unsigned operands and set condition code */
; 1501 :     if (likely(r1 == r2))

  0006c	8b 44 24 2c	 mov	 eax, DWORD PTR r2$[rsp]
  00070	39 44 24 20	 cmp	 DWORD PTR r1$[rsp], eax
  00074	75 0a		 jne	 SHORT $LN15@s370_subtr
  00076	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  0007e	eb 08		 jmp	 SHORT $LN16@s370_subtr
$LN15@s370_subtr:
  00080	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN16@s370_subtr:
  00088	83 7c 24 28 00	 cmp	 DWORD PTR tv80[rsp], 0
  0008d	74 20		 je	 SHORT $LN9@s370_subtr

; 1502 :     {
; 1503 :         regs->psw.cc = 2;

  0008f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00094	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 1504 :         regs->GR_L(r1) = 0;

  00098	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0009d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000a2	c7 84 c1 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*8+640], 0

; 1505 :     }

  000ad	eb 4f		 jmp	 SHORT $LN10@s370_subtr
$LN9@s370_subtr:

; 1506 :     else
; 1507 :         regs->psw.cc =

  000af	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r2$[rsp]
  000b4	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  000b9	48 63 54 24 20	 movsxd	 rdx, DWORD PTR r1$[rsp]
  000be	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000c3	49 8d 94 d0 80
	02 00 00	 lea	 rdx, QWORD PTR [r8+rdx*8+640]
  000cb	48 89 54 24 38	 mov	 QWORD PTR tv138[rsp], rdx
  000d0	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  000d5	45 8b 84 c0 80
	02 00 00	 mov	 r8d, DWORD PTR [r8+rax*8+640]
  000dd	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e2	8b 94 c8 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rcx*8+640]
  000e9	48 8b 44 24 38	 mov	 rax, QWORD PTR tv138[rsp]
  000ee	48 8b c8	 mov	 rcx, rax
  000f1	e8 00 00 00 00	 call	 sub_logical
  000f6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN10@s370_subtr:
$LN7@s370_subtr:

; 1508 :             sub_logical (&(regs->GR_L(r1)),
; 1509 :                            regs->GR_L(r1),
; 1510 :                            regs->GR_L(r2));
; 1511 : 
; 1512 :     /* Check for PER 1 GRA event */
; 1513 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  000fe	33 c0		 xor	 eax, eax
  00100	83 f8 01	 cmp	 eax, 1
  00103	0f 84 80 00 00
	00		 je	 $LN11@s370_subtr
  00109	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00114	c1 e8 02	 shr	 eax, 2
  00117	83 e0 01	 and	 eax, 1
  0011a	85 c0		 test	 eax, eax
  0011c	74 0a		 je	 SHORT $LN19@s370_subtr
  0011e	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv152[rsp], 1
  00126	eb 08		 jmp	 SHORT $LN20@s370_subtr
$LN19@s370_subtr:
  00128	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
$LN20@s370_subtr:
  00130	83 7c 24 30 00	 cmp	 DWORD PTR tv152[rsp], 0
  00135	74 52		 je	 SHORT $LN11@s370_subtr
  00137	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0013c	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0013f	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00144	85 c0		 test	 eax, eax
  00146	74 41		 je	 SHORT $LN11@s370_subtr
  00148	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  0014c	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  00151	89 4c 24 34	 mov	 DWORD PTR tv196[rsp], ecx
  00155	0f b6 c8	 movzx	 ecx, al
  00158	8b 44 24 34	 mov	 eax, DWORD PTR tv196[rsp]
  0015c	d3 f8		 sar	 eax, cl
  0015e	b9 08 00 00 00	 mov	 ecx, 8
  00163	48 6b c9 0a	 imul	 rcx, rcx, 10
  00167	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  0016c	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00173	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00179	23 c1		 and	 eax, ecx
  0017b	85 c0		 test	 eax, eax
  0017d	74 0a		 je	 SHORT $LN11@s370_subtr
  0017f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00184	e8 00 00 00 00	 call	 s370_per1_gra
$LN11@s370_subtr:
  00189	33 c0		 xor	 eax, eax
  0018b	85 c0		 test	 eax, eax
  0018d	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_subtr

; 1514 : }

  00193	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00197	c3		 ret	 0
s370_subtract_logical_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
r1$ = 44
tv77 = 48
x2$ = 52
tv88 = 56
tv167 = 60
n$ = 64
tv225 = 68
inst$ = 96
regs$ = 104
s370_subtract_logical PROC

; 1521 : {

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1522 : int     r1;                             /* Value of R field          */
; 1523 : int     x2;                             /* Index register            */
; 1524 : int     b2;                             /* Base of effective addr    */
; 1525 : VADR    effective_addr2;                /* Effective address         */
; 1526 : U32     n;                              /* 32-bit operand values     */
; 1527 : 
; 1528 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 34	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 2c	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN16@s370_subtr
  00053	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN17@s370_subtr
$LN16@s370_subtr:
  0005d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN17@s370_subtr:
  00065	83 7c 24 30 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN8@s370_subtr
  0006c	48 63 44 24 34	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN8@s370_subtr:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN18@s370_subtr
  0009e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN19@s370_subtr
$LN18@s370_subtr:
  000a8	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN19@s370_subtr:
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN9@s370_subtr
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_subtr:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 0d		 je	 SHORT $LN10@s370_subtr
  000db	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000e4	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN10@s370_subtr:
$LN4@s370_subtr:
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f1	48 83 c0 04	 add	 rax, 4
  000f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000fa	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000fe	33 c0		 xor	 eax, eax
  00100	83 f8 04	 cmp	 eax, 4
  00103	74 0c		 je	 SHORT $LN11@s370_subtr
  00105	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0010a	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN11@s370_subtr:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 d1		 jne	 SHORT $LN4@s370_subtr

; 1529 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1530 : 
; 1531 :     /* Load second operand from operand address */
; 1532 :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00117	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0011c	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  00120	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00124	e8 00 00 00 00	 call	 s370_vfetch4
  00129	89 44 24 40	 mov	 DWORD PTR n$[rsp], eax

; 1533 : 
; 1534 :     /* Subtract unsigned operands and set condition code */
; 1535 :     regs->psw.cc =

  0012d	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00132	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00137	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0013c	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  00144	44 8b 44 24 40	 mov	 r8d, DWORD PTR n$[rsp]
  00149	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0014e	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  00155	e8 00 00 00 00	 call	 sub_logical
  0015a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0015f	88 41 7c	 mov	 BYTE PTR [rcx+124], al
$LN7@s370_subtr:

; 1536 :             sub_logical (&(regs->GR_L(r1)),
; 1537 :                     regs->GR_L(r1),
; 1538 :                     n);
; 1539 : 
; 1540 :     /* Check for PER 1 GRA event */
; 1541 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  00162	33 c0		 xor	 eax, eax
  00164	83 f8 01	 cmp	 eax, 1
  00167	0f 84 80 00 00
	00		 je	 $LN12@s370_subtr
  0016d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00172	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00178	c1 e8 02	 shr	 eax, 2
  0017b	83 e0 01	 and	 eax, 1
  0017e	85 c0		 test	 eax, eax
  00180	74 0a		 je	 SHORT $LN22@s370_subtr
  00182	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv167[rsp], 1
  0018a	eb 08		 jmp	 SHORT $LN23@s370_subtr
$LN22@s370_subtr:
  0018c	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv167[rsp], 0
$LN23@s370_subtr:
  00194	83 7c 24 3c 00	 cmp	 DWORD PTR tv167[rsp], 0
  00199	74 52		 je	 SHORT $LN12@s370_subtr
  0019b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001a0	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001a3	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001a8	85 c0		 test	 eax, eax
  001aa	74 41		 je	 SHORT $LN12@s370_subtr
  001ac	8b 44 24 2c	 mov	 eax, DWORD PTR r1$[rsp]
  001b0	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  001b5	89 4c 24 44	 mov	 DWORD PTR tv225[rsp], ecx
  001b9	0f b6 c8	 movzx	 ecx, al
  001bc	8b 44 24 44	 mov	 eax, DWORD PTR tv225[rsp]
  001c0	d3 f8		 sar	 eax, cl
  001c2	b9 08 00 00 00	 mov	 ecx, 8
  001c7	48 6b c9 0a	 imul	 rcx, rcx, 10
  001cb	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  001d0	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  001d7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001dd	23 c1		 and	 eax, ecx
  001df	85 c0		 test	 eax, eax
  001e1	74 0a		 je	 SHORT $LN12@s370_subtr
  001e3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001e8	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_subtr:
  001ed	33 c0		 xor	 eax, eax
  001ef	85 c0		 test	 eax, eax
  001f1	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_subtr

; 1542 : }

  001f7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001fb	c3		 ret	 0
s370_subtract_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
r1$ = 44
tv77 = 48
x2$ = 52
tv88 = 56
tv178 = 60
n$ = 64
tv240 = 68
inst$ = 96
regs$ = 104
s370_subtract_halfword PROC

; 1398 : {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1399 : int     r1;                             /* Value of R field          */
; 1400 : int     x2;                             /* Index register            */
; 1401 : int     b2;                             /* Base of effective addr    */
; 1402 : VADR    effective_addr2;                /* Effective address         */
; 1403 : U32     n;                              /* 32-bit operand values     */
; 1404 : 
; 1405 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 34	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 2c	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN17@s370_subtr
  00053	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN18@s370_subtr
$LN17@s370_subtr:
  0005d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN18@s370_subtr:
  00065	83 7c 24 30 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN8@s370_subtr
  0006c	48 63 44 24 34	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN8@s370_subtr:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN19@s370_subtr
  0009e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN20@s370_subtr
$LN19@s370_subtr:
  000a8	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN20@s370_subtr:
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN9@s370_subtr
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_subtr:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 0d		 je	 SHORT $LN10@s370_subtr
  000db	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000e4	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN10@s370_subtr:
$LN4@s370_subtr:
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f1	48 83 c0 04	 add	 rax, 4
  000f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000fa	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000fe	33 c0		 xor	 eax, eax
  00100	83 f8 04	 cmp	 eax, 4
  00103	74 0c		 je	 SHORT $LN11@s370_subtr
  00105	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0010a	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN11@s370_subtr:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 d1		 jne	 SHORT $LN4@s370_subtr

; 1406 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1407 : 
; 1408 :     /* Load 2 bytes from operand address */
; 1409 :     n = (S16)ARCH_DEP(vfetch2) ( effective_addr2, b2, regs );

  00117	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0011c	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  00120	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00124	e8 00 00 00 00	 call	 s370_vfetch2
  00129	98		 cwde
  0012a	89 44 24 40	 mov	 DWORD PTR n$[rsp], eax

; 1410 : 
; 1411 :     /* Subtract signed operands and set condition code */
; 1412 :     regs->psw.cc =

  0012e	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00133	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00138	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0013d	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  00145	44 8b 44 24 40	 mov	 r8d, DWORD PTR n$[rsp]
  0014a	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0014f	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  00156	e8 00 00 00 00	 call	 sub_signed
  0015b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00160	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1413 :             sub_signed (&(regs->GR_L(r1)),
; 1414 :                     regs->GR_L(r1),
; 1415 :                     n);
; 1416 : 
; 1417 :     /* Program check if fixed-point overflow */
; 1418 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  00163	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00168	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  0016c	83 f8 03	 cmp	 eax, 3
  0016f	75 25		 jne	 SHORT $LN12@s370_subtr
  00171	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00176	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  0017a	83 e0 08	 and	 eax, 8
  0017d	85 c0		 test	 eax, eax
  0017f	74 15		 je	 SHORT $LN12@s370_subtr

; 1419 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  00181	ba 08 00 00 00	 mov	 edx, 8
  00186	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0018b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00190	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN12@s370_subtr:
$LN7@s370_subtr:

; 1420 : 
; 1421 :     /* Check for PER 1 GRA event */
; 1422 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  00196	33 c0		 xor	 eax, eax
  00198	83 f8 01	 cmp	 eax, 1
  0019b	0f 84 80 00 00
	00		 je	 $LN13@s370_subtr
  001a1	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001a6	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  001ac	c1 e8 02	 shr	 eax, 2
  001af	83 e0 01	 and	 eax, 1
  001b2	85 c0		 test	 eax, eax
  001b4	74 0a		 je	 SHORT $LN23@s370_subtr
  001b6	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv178[rsp], 1
  001be	eb 08		 jmp	 SHORT $LN24@s370_subtr
$LN23@s370_subtr:
  001c0	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv178[rsp], 0
$LN24@s370_subtr:
  001c8	83 7c 24 3c 00	 cmp	 DWORD PTR tv178[rsp], 0
  001cd	74 52		 je	 SHORT $LN13@s370_subtr
  001cf	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001d4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001d7	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001dc	85 c0		 test	 eax, eax
  001de	74 41		 je	 SHORT $LN13@s370_subtr
  001e0	8b 44 24 2c	 mov	 eax, DWORD PTR r1$[rsp]
  001e4	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  001e9	89 4c 24 44	 mov	 DWORD PTR tv240[rsp], ecx
  001ed	0f b6 c8	 movzx	 ecx, al
  001f0	8b 44 24 44	 mov	 eax, DWORD PTR tv240[rsp]
  001f4	d3 f8		 sar	 eax, cl
  001f6	b9 08 00 00 00	 mov	 ecx, 8
  001fb	48 6b c9 0a	 imul	 rcx, rcx, 10
  001ff	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00204	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  0020b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00211	23 c1		 and	 eax, ecx
  00213	85 c0		 test	 eax, eax
  00215	74 0a		 je	 SHORT $LN13@s370_subtr
  00217	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0021c	e8 00 00 00 00	 call	 s370_per1_gra
$LN13@s370_subtr:
  00221	33 c0		 xor	 eax, eax
  00223	85 c0		 test	 eax, eax
  00225	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_subtr

; 1423 : }

  0022b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0022f	c3		 ret	 0
s370_subtract_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
r1$ = 44
tv77 = 48
x2$ = 52
tv88 = 56
tv177 = 60
n$ = 64
tv239 = 68
inst$ = 96
regs$ = 104
s370_subtract PROC

; 1366 : {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1367 : int     r1;                             /* Value of R field          */
; 1368 : int     x2;                             /* Index register            */
; 1369 : int     b2;                             /* Base of effective addr    */
; 1370 : VADR    effective_addr2;                /* Effective address         */
; 1371 : U32     n;                              /* 32-bit operand values     */
; 1372 : 
; 1373 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 34	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 2c	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN17@s370_subtr
  00053	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN18@s370_subtr
$LN17@s370_subtr:
  0005d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN18@s370_subtr:
  00065	83 7c 24 30 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN8@s370_subtr
  0006c	48 63 44 24 34	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN8@s370_subtr:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN19@s370_subtr
  0009e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN20@s370_subtr
$LN19@s370_subtr:
  000a8	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN20@s370_subtr:
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN9@s370_subtr
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_subtr:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 0d		 je	 SHORT $LN10@s370_subtr
  000db	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000e4	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN10@s370_subtr:
$LN4@s370_subtr:
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f1	48 83 c0 04	 add	 rax, 4
  000f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000fa	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000fe	33 c0		 xor	 eax, eax
  00100	83 f8 04	 cmp	 eax, 4
  00103	74 0c		 je	 SHORT $LN11@s370_subtr
  00105	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0010a	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN11@s370_subtr:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 d1		 jne	 SHORT $LN4@s370_subtr

; 1374 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1375 : 
; 1376 :     /* Load second operand from operand address */
; 1377 :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00117	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0011c	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  00120	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00124	e8 00 00 00 00	 call	 s370_vfetch4
  00129	89 44 24 40	 mov	 DWORD PTR n$[rsp], eax

; 1378 : 
; 1379 :     /* Subtract signed operands and set condition code */
; 1380 :     regs->psw.cc =

  0012d	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00132	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00137	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0013c	48 8d 8c ca 80
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx*8+640]
  00144	44 8b 44 24 40	 mov	 r8d, DWORD PTR n$[rsp]
  00149	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0014e	8b 94 c2 80 02
	00 00		 mov	 edx, DWORD PTR [rdx+rax*8+640]
  00155	e8 00 00 00 00	 call	 sub_signed
  0015a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0015f	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 1381 :             sub_signed (&(regs->GR_L(r1)),
; 1382 :                     regs->GR_L(r1),
; 1383 :                     n);
; 1384 : 
; 1385 :     /* Program check if fixed-point overflow */
; 1386 :     if ( regs->psw.cc == 3 && FOMASK(&regs->psw) )

  00162	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00167	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  0016b	83 f8 03	 cmp	 eax, 3
  0016e	75 25		 jne	 SHORT $LN12@s370_subtr
  00170	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00175	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00179	83 e0 08	 and	 eax, 8
  0017c	85 c0		 test	 eax, eax
  0017e	74 15		 je	 SHORT $LN12@s370_subtr

; 1387 :         regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  00180	ba 08 00 00 00	 mov	 edx, 8
  00185	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0018a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0018f	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN12@s370_subtr:
$LN7@s370_subtr:

; 1388 : 
; 1389 :     /* Check for PER 1 GRA event */
; 1390 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  00195	33 c0		 xor	 eax, eax
  00197	83 f8 01	 cmp	 eax, 1
  0019a	0f 84 80 00 00
	00		 je	 $LN13@s370_subtr
  001a0	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001a5	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  001ab	c1 e8 02	 shr	 eax, 2
  001ae	83 e0 01	 and	 eax, 1
  001b1	85 c0		 test	 eax, eax
  001b3	74 0a		 je	 SHORT $LN23@s370_subtr
  001b5	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv177[rsp], 1
  001bd	eb 08		 jmp	 SHORT $LN24@s370_subtr
$LN23@s370_subtr:
  001bf	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv177[rsp], 0
$LN24@s370_subtr:
  001c7	83 7c 24 3c 00	 cmp	 DWORD PTR tv177[rsp], 0
  001cc	74 52		 je	 SHORT $LN13@s370_subtr
  001ce	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001d3	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001d6	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001db	85 c0		 test	 eax, eax
  001dd	74 41		 je	 SHORT $LN13@s370_subtr
  001df	8b 44 24 2c	 mov	 eax, DWORD PTR r1$[rsp]
  001e3	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  001e8	89 4c 24 44	 mov	 DWORD PTR tv239[rsp], ecx
  001ec	0f b6 c8	 movzx	 ecx, al
  001ef	8b 44 24 44	 mov	 eax, DWORD PTR tv239[rsp]
  001f3	d3 f8		 sar	 eax, cl
  001f5	b9 08 00 00 00	 mov	 ecx, 8
  001fa	48 6b c9 0a	 imul	 rcx, rcx, 10
  001fe	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00203	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  0020a	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00210	23 c1		 and	 eax, ecx
  00212	85 c0		 test	 eax, eax
  00214	74 0a		 je	 SHORT $LN13@s370_subtr
  00216	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0021b	e8 00 00 00 00	 call	 s370_per1_gra
$LN13@s370_subtr:
  00220	33 c0		 xor	 eax, eax
  00222	85 c0		 test	 eax, eax
  00224	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_subtr

; 1391 : }

  0022a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0022e	c3		 ret	 0
s370_subtract ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
effective_addr2$ = 52
n$ = 56
m$ = 60
r1$ = 64
temp$1 = 68
b2$ = 72
p1$ = 80
b2$2 = 88
b1$3 = 96
tv141 = 104
tv147 = 108
tv154 = 112
tv189 = 116
tv205 = 120
tv223 = 124
tv229 = 128
bp1$ = 136
p2$ = 144
r3$ = 152
tv169 = 160
tv245 = 168
tv261 = 176
rwork$4 = 192
__$ArrayPad$ = 256
inst$ = 288
regs$ = 296
s370_store_multiple PROC

; 1256 : {

$LN67:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1257 : int     r1, r3;                         /* Register numbers          */
; 1258 : int     b2;                             /* effective address base    */
; 1259 : VADR    effective_addr2;                /* effective address         */
; 1260 : int     i, m, n;                        /* Integer work areas        */
; 1261 : U32    *p1, *p2;                        /* Mainstor pointers         */
; 1262 : BYTE   *bp1;                            /* Unaligned mainstor ptr    */
; 1263 : 
; 1264 :     RS( inst, regs, r1, r3, b2, effective_addr2 );

  00023	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	e8 00 00 00 00	 call	 fetch_fw_noswap
  00030	8b c8		 mov	 ecx, eax
  00032	e8 00 00 00 00	 call	 _byteswap_ulong
  00037	89 44 24 44	 mov	 DWORD PTR temp$1[rsp], eax
  0003b	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0003f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00044	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00048	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 0c	 shr	 eax, 12
  0004f	83 e0 0f	 and	 eax, 15
  00052	89 44 24 48	 mov	 DWORD PTR b2$[rsp], eax
  00056	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0005a	c1 e8 10	 shr	 eax, 16
  0005d	83 e0 0f	 and	 eax, 15
  00060	89 84 24 98 00
	00 00		 mov	 DWORD PTR r3$[rsp], eax
  00067	8b 44 24 44	 mov	 eax, DWORD PTR temp$1[rsp]
  0006b	c1 e8 14	 shr	 eax, 20
  0006e	83 e0 0f	 and	 eax, 15
  00071	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax
  00075	83 7c 24 48 00	 cmp	 DWORD PTR b2$[rsp], 0
  0007a	74 34		 je	 SHORT $LN29@s370_store
  0007c	48 63 44 24 48	 movsxd	 rax, DWORD PTR b2$[rsp]
  00081	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00089	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00090	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00094	03 c8		 add	 ecx, eax
  00096	8b c1		 mov	 eax, ecx
  00098	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0009c	33 c0		 xor	 eax, eax
  0009e	83 f8 04	 cmp	 eax, 4
  000a1	74 0d		 je	 SHORT $LN30@s370_store
  000a3	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000a7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ac	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN30@s370_store:
$LN29@s370_store:
$LN4@s370_store:
  000b0	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b8	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000bc	48 83 c0 04	 add	 rax, 4
  000c0	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c8	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000cc	33 c0		 xor	 eax, eax
  000ce	83 f8 04	 cmp	 eax, 4
  000d1	74 0f		 je	 SHORT $LN31@s370_store
  000d3	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000db	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN31@s370_store:
  000e2	33 c0		 xor	 eax, eax
  000e4	85 c0		 test	 eax, eax
  000e6	75 c8		 jne	 SHORT $LN4@s370_store

; 1265 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1266 : 
; 1267 :     /* Calculate number of bytes to store */
; 1268 :     n = (((r3 - r1) & 0xF) + 1) << 2;

  000e8	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  000ec	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR r3$[rsp]
  000f3	2b c8		 sub	 ecx, eax
  000f5	8b c1		 mov	 eax, ecx
  000f7	83 e0 0f	 and	 eax, 15
  000fa	8d 04 85 04 00
	00 00		 lea	 eax, DWORD PTR [rax*4+4]
  00101	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1269 : 
; 1270 :     /* Calculate number of bytes to next boundary */
; 1271 :     m = PAGEFRAME_PAGESIZE - ((VADR_L)effective_addr2 & PAGEFRAME_BYTEMASK);

  00105	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00109	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0010e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00113	2b c8		 sub	 ecx, eax
  00115	8b c1		 mov	 eax, ecx
  00117	89 44 24 3c	 mov	 DWORD PTR m$[rsp], eax

; 1272 : 
; 1273 :     /* Get address of first page */
; 1274 :     bp1 = (BYTE*) MADDRL( effective_addr2, n, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0011b	48 63 44 24 38	 movsxd	 rax, DWORD PTR n$[rsp]
  00120	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00128	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0012c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00130	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00138	4c 8b 8c 24 28
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00140	44 8b 44 24 48	 mov	 r8d, DWORD PTR b2$[rsp]
  00145	48 8b d0	 mov	 rdx, rax
  00148	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0014c	e8 00 00 00 00	 call	 s370_maddr_l
  00151	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR bp1$[rsp], rax

; 1275 :     p1  = (U32*)  bp1;

  00159	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR bp1$[rsp]
  00161	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax

; 1276 : 
; 1277 :     if (likely( n <= m ))

  00166	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  0016a	39 44 24 38	 cmp	 DWORD PTR n$[rsp], eax
  0016e	7f 0a		 jg	 SHORT $LN42@s370_store
  00170	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv141[rsp], 1
  00178	eb 08		 jmp	 SHORT $LN43@s370_store
$LN42@s370_store:
  0017a	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN43@s370_store:
  00182	83 7c 24 68 00	 cmp	 DWORD PTR tv141[rsp], 0
  00187	0f 84 85 01 00
	00		 je	 $LN32@s370_store

; 1278 :     {
; 1279 :         /* boundary not crossed */
; 1280 :         n >>= 2;

  0018d	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00191	c1 f8 02	 sar	 eax, 2
  00194	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1281 :         if (likely(!(((uintptr_t)effective_addr2) & 0x03)))

  00198	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0019c	48 83 e0 03	 and	 rax, 3
  001a0	48 85 c0	 test	 rax, rax
  001a3	75 0a		 jne	 SHORT $LN44@s370_store
  001a5	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  001ad	eb 08		 jmp	 SHORT $LN45@s370_store
$LN44@s370_store:
  001af	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN45@s370_store:
  001b7	83 7c 24 6c 00	 cmp	 DWORD PTR tv147[rsp], 0
  001bc	74 0a		 je	 SHORT $LN48@s370_store
  001be	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  001c6	eb 08		 jmp	 SHORT $LN49@s370_store
$LN48@s370_store:
  001c8	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN49@s370_store:
  001d0	83 7c 24 70 00	 cmp	 DWORD PTR tv154[rsp], 0
  001d5	74 71		 je	 SHORT $LN34@s370_store

; 1282 :         {
; 1283 :             for (i=0; i < n; i++)

  001d7	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001df	eb 0a		 jmp	 SHORT $LN7@s370_store
$LN5@s370_store:
  001e1	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001e5	ff c0		 inc	 eax
  001e7	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@s370_store:
  001eb	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  001ef	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  001f3	7d 51		 jge	 SHORT $LN6@s370_store

; 1284 :                 store_fw( p1++, regs->GR_L( (r1 + i) & 0xF ));

  001f5	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  001fa	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv169[rsp], rax
  00202	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00206	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  0020a	03 c8		 add	 ecx, eax
  0020c	8b c1		 mov	 eax, ecx
  0020e	83 e0 0f	 and	 eax, 15
  00211	48 98		 cdqe
  00213	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0021b	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  00222	e8 00 00 00 00	 call	 _byteswap_ulong
  00227	8b d0		 mov	 edx, eax
  00229	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv169[rsp]
  00231	e8 00 00 00 00	 call	 store_fw_noswap
  00236	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  0023b	48 83 c0 04	 add	 rax, 4
  0023f	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax
  00244	eb 9b		 jmp	 SHORT $LN5@s370_store
$LN6@s370_store:

; 1285 :         }

  00246	eb 68		 jmp	 SHORT $LN35@s370_store
$LN34@s370_store:

; 1286 :         else
; 1287 :         {
; 1288 :             for (i=0; i < n; i++, bp1 += 4)

  00248	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00250	eb 1e		 jmp	 SHORT $LN10@s370_store
$LN8@s370_store:
  00252	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00256	ff c0		 inc	 eax
  00258	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
  0025c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR bp1$[rsp]
  00264	48 83 c0 04	 add	 rax, 4
  00268	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR bp1$[rsp], rax
$LN10@s370_store:
  00270	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00274	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00278	7d 36		 jge	 SHORT $LN9@s370_store

; 1289 :                 store_fw( bp1, regs->GR_L( (r1 + i) & 0xF ));

  0027a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0027e	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  00282	03 c8		 add	 ecx, eax
  00284	8b c1		 mov	 eax, ecx
  00286	83 e0 0f	 and	 eax, 15
  00289	48 98		 cdqe
  0028b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00293	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  0029a	e8 00 00 00 00	 call	 _byteswap_ulong
  0029f	8b d0		 mov	 edx, eax
  002a1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR bp1$[rsp]
  002a9	e8 00 00 00 00	 call	 store_fw_noswap
  002ae	eb a2		 jmp	 SHORT $LN8@s370_store
$LN9@s370_store:
$LN35@s370_store:
$LN13@s370_store:

; 1290 :         }
; 1291 :         ITIMER_UPDATE( effective_addr2, (n*4)-1, regs );

  002b0	83 7c 24 34 54	 cmp	 DWORD PTR effective_addr2$[rsp], 84 ; 00000054H
  002b5	73 0a		 jae	 SHORT $LN52@s370_store
  002b7	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv189[rsp], 1
  002bf	eb 08		 jmp	 SHORT $LN53@s370_store
$LN52@s370_store:
  002c1	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv189[rsp], 0
$LN53@s370_store:
  002c9	83 7c 24 74 00	 cmp	 DWORD PTR tv189[rsp], 0
  002ce	74 1b		 je	 SHORT $LN54@s370_store
  002d0	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  002d4	8b 4c 24 38	 mov	 ecx, DWORD PTR n$[rsp]
  002d8	8d 44 88 ff	 lea	 eax, DWORD PTR [rax+rcx*4-1]
  002dc	83 f8 50	 cmp	 eax, 80			; 00000050H
  002df	72 0a		 jb	 SHORT $LN54@s370_store
  002e1	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv205[rsp], 1
  002e9	eb 08		 jmp	 SHORT $LN60@s370_store
$LN54@s370_store:
  002eb	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv205[rsp], 0
$LN60@s370_store:
  002f3	83 7c 24 78 00	 cmp	 DWORD PTR tv205[rsp], 0
  002f8	74 0d		 je	 SHORT $LN36@s370_store
  002fa	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00302	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN36@s370_store:
  00307	33 c0		 xor	 eax, eax
  00309	85 c0		 test	 eax, eax
  0030b	75 a3		 jne	 SHORT $LN13@s370_store

; 1292 :     }

  0030d	e9 b3 02 00 00	 jmp	 $LN33@s370_store
$LN32@s370_store:

; 1293 :     else
; 1294 :     {
; 1295 :         /* boundary crossed, get address of the 2nd page */
; 1296 :         effective_addr2 += m;

  00312	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  00316	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0031a	03 c8		 add	 ecx, eax
  0031c	8b c1		 mov	 eax, ecx
  0031e	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 1297 :         effective_addr2 &= ADDRESS_MAXWRAP( regs );

  00322	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00326	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0032b	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 1298 : 
; 1299 :         p2 = (U32*) MADDRL(effective_addr2, n - m, b2, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0032f	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  00333	8b 4c 24 38	 mov	 ecx, DWORD PTR n$[rsp]
  00337	2b c8		 sub	 ecx, eax
  00339	8b c1		 mov	 eax, ecx
  0033b	48 98		 cdqe
  0033d	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00345	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00349	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0034d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00355	4c 8b 8c 24 28
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0035d	44 8b 44 24 48	 mov	 r8d, DWORD PTR b2$[rsp]
  00362	48 8b d0	 mov	 rdx, rax
  00365	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00369	e8 00 00 00 00	 call	 s370_maddr_l
  0036e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR p2$[rsp], rax

; 1300 :         if (likely( !(m & 0x3) ))

  00376	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  0037a	83 e0 03	 and	 eax, 3
  0037d	85 c0		 test	 eax, eax
  0037f	75 0a		 jne	 SHORT $LN61@s370_store
  00381	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv223[rsp], 1
  00389	eb 08		 jmp	 SHORT $LN62@s370_store
$LN61@s370_store:
  0038b	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv223[rsp], 0
$LN62@s370_store:
  00393	83 7c 24 7c 00	 cmp	 DWORD PTR tv223[rsp], 0
  00398	74 0d		 je	 SHORT $LN65@s370_store
  0039a	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv229[rsp], 1
  003a5	eb 0b		 jmp	 SHORT $LN66@s370_store
$LN65@s370_store:
  003a7	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv229[rsp], 0
$LN66@s370_store:
  003b2	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv229[rsp], 0
  003ba	0f 84 fa 00 00
	00		 je	 $LN37@s370_store

; 1301 :         {
; 1302 :             /* word aligned */
; 1303 :             m >>= 2;

  003c0	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  003c4	c1 f8 02	 sar	 eax, 2
  003c7	89 44 24 3c	 mov	 DWORD PTR m$[rsp], eax

; 1304 : 
; 1305 :             for (i=0; i < m; i++)

  003cb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003d3	eb 0a		 jmp	 SHORT $LN16@s370_store
$LN14@s370_store:
  003d5	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003d9	ff c0		 inc	 eax
  003db	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s370_store:
  003df	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  003e3	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  003e7	7d 51		 jge	 SHORT $LN15@s370_store

; 1306 :                 store_fw( p1++, regs->GR_L( (r1 + i) & 0xF ));

  003e9	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  003ee	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv245[rsp], rax
  003f6	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  003fa	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  003fe	03 c8		 add	 ecx, eax
  00400	8b c1		 mov	 eax, ecx
  00402	83 e0 0f	 and	 eax, 15
  00405	48 98		 cdqe
  00407	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0040f	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  00416	e8 00 00 00 00	 call	 _byteswap_ulong
  0041b	8b d0		 mov	 edx, eax
  0041d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv245[rsp]
  00425	e8 00 00 00 00	 call	 store_fw_noswap
  0042a	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  0042f	48 83 c0 04	 add	 rax, 4
  00433	48 89 44 24 50	 mov	 QWORD PTR p1$[rsp], rax
  00438	eb 9b		 jmp	 SHORT $LN14@s370_store
$LN15@s370_store:

; 1307 : 
; 1308 :             n >>= 2;

  0043a	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  0043e	c1 f8 02	 sar	 eax, 2
  00441	89 44 24 38	 mov	 DWORD PTR n$[rsp], eax

; 1309 : 
; 1310 :             for (; i < n; i++)

  00445	eb 0a		 jmp	 SHORT $LN19@s370_store
$LN17@s370_store:
  00447	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0044b	ff c0		 inc	 eax
  0044d	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@s370_store:
  00451	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00455	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00459	7d 5a		 jge	 SHORT $LN18@s370_store

; 1311 :                 store_fw( p2++, regs->GR_L( (r1 + i) & 0xF ));

  0045b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  00463	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv261[rsp], rax
  0046b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0046f	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  00473	03 c8		 add	 ecx, eax
  00475	8b c1		 mov	 eax, ecx
  00477	83 e0 0f	 and	 eax, 15
  0047a	48 98		 cdqe
  0047c	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00484	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  0048b	e8 00 00 00 00	 call	 _byteswap_ulong
  00490	8b d0		 mov	 edx, eax
  00492	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv261[rsp]
  0049a	e8 00 00 00 00	 call	 store_fw_noswap
  0049f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  004a7	48 83 c0 04	 add	 rax, 4
  004ab	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR p2$[rsp], rax
  004b3	eb 92		 jmp	 SHORT $LN17@s370_store
$LN18@s370_store:

; 1312 :         }

  004b5	e9 0b 01 00 00	 jmp	 $LN38@s370_store
$LN37@s370_store:

; 1313 :         else
; 1314 :         {
; 1315 :             /* worst case */
; 1316 :             U32 rwork[16];
; 1317 :             BYTE *b1, *b2;
; 1318 : 
; 1319 :             for (i=0; i < (n >> 2); i++)

  004ba	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  004c2	eb 0a		 jmp	 SHORT $LN22@s370_store
$LN20@s370_store:
  004c4	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  004c8	ff c0		 inc	 eax
  004ca	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@s370_store:
  004ce	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  004d2	c1 f8 02	 sar	 eax, 2
  004d5	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  004d9	7d 33		 jge	 SHORT $LN21@s370_store

; 1320 :                 rwork[i] = CSWAP32( regs->GR_L( (r1 + i) & 0xF ));

  004db	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  004df	8b 4c 24 40	 mov	 ecx, DWORD PTR r1$[rsp]
  004e3	03 c8		 add	 ecx, eax
  004e5	8b c1		 mov	 eax, ecx
  004e7	83 e0 0f	 and	 eax, 15
  004ea	48 98		 cdqe
  004ec	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004f4	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  004fb	e8 00 00 00 00	 call	 _byteswap_ulong
  00500	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  00505	89 84 8c c0 00
	00 00		 mov	 DWORD PTR rwork$4[rsp+rcx*4], eax
  0050c	eb b6		 jmp	 SHORT $LN20@s370_store
$LN21@s370_store:

; 1321 : 
; 1322 :             b1 = (BYTE*) &rwork[0];

  0050e	b8 04 00 00 00	 mov	 eax, 4
  00513	48 6b c0 00	 imul	 rax, rax, 0
  00517	48 8d 84 04 c0
	00 00 00	 lea	 rax, QWORD PTR rwork$4[rsp+rax]
  0051f	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax

; 1323 :             b2 = (BYTE*) p1;

  00524	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  00529	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax

; 1324 : 
; 1325 :             for (i=0; i < m; i++)

  0052e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00536	eb 0a		 jmp	 SHORT $LN25@s370_store
$LN23@s370_store:
  00538	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0053c	ff c0		 inc	 eax
  0053e	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@s370_store:
  00542	8b 44 24 3c	 mov	 eax, DWORD PTR m$[rsp]
  00546	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0054a	7d 2b		 jge	 SHORT $LN24@s370_store

; 1326 :                 *b2++ = *b1++;

  0054c	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00551	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b1$3[rsp]
  00556	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00559	88 08		 mov	 BYTE PTR [rax], cl
  0055b	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  00560	48 ff c0	 inc	 rax
  00563	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax
  00568	48 8b 44 24 60	 mov	 rax, QWORD PTR b1$3[rsp]
  0056d	48 ff c0	 inc	 rax
  00570	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax
  00575	eb c1		 jmp	 SHORT $LN23@s370_store
$LN24@s370_store:

; 1327 : 
; 1328 :             b2 = (BYTE*) p2;

  00577	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR p2$[rsp]
  0057f	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax

; 1329 : 
; 1330 :             for (; i < n; i++)

  00584	eb 0a		 jmp	 SHORT $LN28@s370_store
$LN26@s370_store:
  00586	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0058a	ff c0		 inc	 eax
  0058c	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@s370_store:
  00590	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00594	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00598	7d 2b		 jge	 SHORT $LN27@s370_store

; 1331 :                 *b2++ = *b1++;

  0059a	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  0059f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b1$3[rsp]
  005a4	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  005a7	88 08		 mov	 BYTE PTR [rax], cl
  005a9	48 8b 44 24 58	 mov	 rax, QWORD PTR b2$2[rsp]
  005ae	48 ff c0	 inc	 rax
  005b1	48 89 44 24 58	 mov	 QWORD PTR b2$2[rsp], rax
  005b6	48 8b 44 24 60	 mov	 rax, QWORD PTR b1$3[rsp]
  005bb	48 ff c0	 inc	 rax
  005be	48 89 44 24 60	 mov	 QWORD PTR b1$3[rsp], rax
  005c3	eb c1		 jmp	 SHORT $LN26@s370_store
$LN27@s370_store:
$LN38@s370_store:
$LN33@s370_store:

; 1332 :         }
; 1333 :     }
; 1334 : 
; 1335 : } /* end DEF_INST( store_multiple ) */

  005c5	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005cd	48 33 cc	 xor	 rcx, rsp
  005d0	e8 00 00 00 00	 call	 __security_check_cookie
  005d5	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  005dc	c3		 ret	 0
s370_store_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
tv77 = 44
x2$ = 48
tv88 = 52
r1$ = 56
inst$ = 80
regs$ = 88
s370_store_halfword PROC

; 1238 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1239 : int     r1;                             /* Value of R field          */
; 1240 : int     x2;                             /* Index register            */
; 1241 : int     b2;                             /* Base of effective addr    */
; 1242 : VADR    effective_addr2;                /* Effective address         */
; 1243 : 
; 1244 :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 30	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 30 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN12@s370_store
  00053	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN13@s370_store
$LN12@s370_store:
  0005d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN13@s370_store:
  00065	83 7c 24 2c 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN5@s370_store
  0006c	48 63 44 24 30	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s370_store:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN14@s370_store
  0009e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN15@s370_store
$LN14@s370_store:
  000a8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN15@s370_store:
  000b0	83 7c 24 34 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN6@s370_store
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN6@s370_store:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 0d		 je	 SHORT $LN7@s370_store
  000db	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000e4	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN7@s370_store:
$LN4@s370_store:
  000e8	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f1	48 83 c0 04	 add	 rax, 4
  000f5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000fa	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000fe	33 c0		 xor	 eax, eax
  00100	83 f8 04	 cmp	 eax, 4
  00103	74 0c		 je	 SHORT $LN8@s370_store
  00105	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0010a	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s370_store:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 d1		 jne	 SHORT $LN4@s370_store

; 1245 :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 1246 : 
; 1247 :     /* Store rightmost 2 bytes of R1 register at operand address */
; 1248 :     ARCH_DEP(vstore2) ( regs->GR_LHL(r1), effective_addr2, b2, regs );

  00117	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  0011c	4c 8b 4c 24 58	 mov	 r9, QWORD PTR regs$[rsp]
  00121	44 8b 44 24 28	 mov	 r8d, DWORD PTR b2$[rsp]
  00126	8b 54 24 20	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  0012a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0012f	0f b7 8c c1 80
	02 00 00	 movzx	 ecx, WORD PTR [rcx+rax*8+640]
  00137	e8 00 00 00 00	 call	 s370_vstore2

; 1249 : }

  0013c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00140	c3		 ret	 0
s370_store_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
b2$ = 36
temp$1 = 40
dreg$ = 48
$T2 = 64
ETOD$ = 80
__$ArrayPad$ = 96
inst$ = 144
regs$ = 152
s370_store_clock PROC

; 1127 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1128 : int     b2;                             /* Base of effective addr    */
; 1129 : VADR    effective_addr2;                /* Effective address         */
; 1130 : U64     dreg;                           /* Double word work area     */
; 1131 : ETOD    ETOD;                           /* Extended TOD clock        */
; 1132 : 
; 1133 :     S( inst, regs, b2, effective_addr2 );

  0001f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00027	e8 00 00 00 00	 call	 fetch_fw_noswap
  0002c	8b c8		 mov	 ecx, eax
  0002e	e8 00 00 00 00	 call	 _byteswap_ulong
  00033	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00037	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00040	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00044	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00048	c1 e8 0c	 shr	 eax, 12
  0004b	83 e0 0f	 and	 eax, 15
  0004e	89 44 24 24	 mov	 DWORD PTR b2$[rsp], eax
  00052	83 7c 24 24 00	 cmp	 DWORD PTR b2$[rsp], 0
  00057	74 2d		 je	 SHORT $LN5@s370_store
  00059	48 63 44 24 24	 movsxd	 rax, DWORD PTR b2$[rsp]
  0005e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00066	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0006d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00071	03 c8		 add	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00079	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0007d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00082	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN5@s370_store:
$LN4@s370_store:
  00086	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0008e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00092	48 83 c0 04	 add	 rax, 4
  00096	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0009e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a2	33 c0		 xor	 eax, eax
  000a4	83 f8 04	 cmp	 eax, 4
  000a7	74 0f		 je	 SHORT $LN6@s370_store
  000a9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b1	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN6@s370_store:
  000b8	33 c0		 xor	 eax, eax
  000ba	85 c0		 test	 eax, eax
  000bc	75 c8		 jne	 SHORT $LN4@s370_store

; 1134 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1135 : 
; 1136 : #if defined( _FEATURE_SIE )
; 1137 : 
; 1138 :     if (SIE_STATE_BIT_ON( regs, IC2, STCK ))

  000be	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000c6	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  000cc	d1 e8		 shr	 eax, 1
  000ce	83 e0 01	 and	 eax, 1
  000d1	85 c0		 test	 eax, eax
  000d3	74 41		 je	 SHORT $LN7@s370_store
  000d5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000dd	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  000e4	b9 01 00 00 00	 mov	 ecx, 1
  000e9	48 6b c9 02	 imul	 rcx, rcx, 2
  000ed	0f b6 44 08 48	 movzx	 eax, BYTE PTR [rax+rcx+72]
  000f2	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000f7	85 c0		 test	 eax, eax
  000f9	74 1b		 je	 SHORT $LN7@s370_store

; 1139 :         longjmp( regs->progjmp, SIE_INTERCEPT_INST );

  000fb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00103	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00109	ba fc ff ff ff	 mov	 edx, -4
  0010e	48 8b c8	 mov	 rcx, rax
  00111	e8 00 00 00 00	 call	 longjmp
$LN7@s370_store:

; 1140 : #endif
; 1141 : 
; 1142 : #if defined( FEATURE_025_STORE_CLOCK_FAST_FACILITY )
; 1143 : 
; 1144 :     if (inst[1] == 0x7C) // STCKF only
; 1145 :     {
; 1146 :         /* Retrieve the TOD clock value without embedded CPU address */
; 1147 :         etod_clock( regs, &ETOD, ETOD_fast );
; 1148 :     }
; 1149 :     else
; 1150 : #endif
; 1151 :     {
; 1152 :         /* Perform serialization before fetching clock */
; 1153 :         PERFORM_SERIALIZATION( regs );

  00116	0f ae f0	 mfence

; 1154 : 
; 1155 :         /* Retrieve the TOD clock value with embedded CPU address*/
; 1156 :         etod_clock( regs, &ETOD, ETOD_standard );

  00119	41 b8 02 00 00
	00		 mov	 r8d, 2
  0011f	48 8d 54 24 50	 lea	 rdx, QWORD PTR ETOD$[rsp]
  00124	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0012c	e8 00 00 00 00	 call	 etod_clock

; 1157 :     }
; 1158 : 
; 1159 :     /* Shift out epoch */
; 1160 :     dreg = ETOD2TOD( ETOD );

  00131	48 8d 44 24 40	 lea	 rax, QWORD PTR $T2[rsp]
  00136	48 8d 4c 24 50	 lea	 rcx, QWORD PTR ETOD$[rsp]
  0013b	48 8b f8	 mov	 rdi, rax
  0013e	48 8b f1	 mov	 rsi, rcx
  00141	b9 10 00 00 00	 mov	 ecx, 16
  00146	f3 a4		 rep movsb
  00148	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  0014d	e8 00 00 00 00	 call	 ETOD2TOD
  00152	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 1161 : 
; 1162 : // /*debug*/logmsg("Store TOD clock=%16.16"PRIX64"\n", dreg);
; 1163 : 
; 1164 :     /* Store TOD clock value at operand address */
; 1165 :     ARCH_DEP( vstore8 )( dreg, effective_addr2, b2, regs );

  00157	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0015f	44 8b 44 24 24	 mov	 r8d, DWORD PTR b2$[rsp]
  00164	8b 54 24 20	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00168	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dreg$[rsp]
  0016d	e8 00 00 00 00	 call	 s370_vstore8

; 1166 : 
; 1167 : #if defined( FEATURE_025_STORE_CLOCK_FAST_FACILITY )
; 1168 : 
; 1169 :     if (inst[1] != 0x7C) // not STCKF
; 1170 : #endif
; 1171 :     {
; 1172 :         /* Perform serialization after storing clock */
; 1173 :         PERFORM_SERIALIZATION( regs );

  00172	0f ae f0	 mfence

; 1174 :     }
; 1175 : 
; 1176 :     /* Set condition code zero */
; 1177 :     regs->psw.cc = 0;

  00175	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0017d	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN8@s370_store:

; 1178 : }

  00181	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00186	48 33 cc	 xor	 rcx, rsp
  00189	e8 00 00 00 00	 call	 __security_check_cookie
  0018e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00192	5f		 pop	 rdi
  00193	5e		 pop	 rsi
  00194	c3		 ret	 0
s370_store_clock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
effective_addr2$ = 52
r1$ = 56
rbyte$ = 60
r3$ = 64
b2$ = 68
temp$1 = 72
tv90 = 76
inst$ = 96
regs$ = 104
s370_store_characters_under_mask PROC

; 1075 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1076 : int     r1, r3;                         /* Register numbers          */
; 1077 : int     b2;                             /* effective address base    */
; 1078 : VADR    effective_addr2;                /* effective address         */
; 1079 : int     i;                              /* Integer work area         */
; 1080 : BYTE    rbyte[4];                       /* Byte work area            */
; 1081 : 
; 1082 :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 44	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 38	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 44 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN7@s370_store
  00061	48 63 44 24 44	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN8@s370_store
  00085	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN8@s370_store:
$LN7@s370_store:
$LN4@s370_store:
  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN9@s370_store
  000af	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN9@s370_store:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_store

; 1083 :     PER_ZEROADDR_XCHECK( regs, b2 );
; 1084 : 
; 1085 :     switch (r3) {

  000c1	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  000c5	89 44 24 4c	 mov	 DWORD PTR tv90[rsp], eax
  000c9	83 7c 24 4c 07	 cmp	 DWORD PTR tv90[rsp], 7
  000ce	74 09		 je	 SHORT $LN10@s370_store
  000d0	83 7c 24 4c 0f	 cmp	 DWORD PTR tv90[rsp], 15
  000d5	74 4c		 je	 SHORT $LN11@s370_store
  000d7	eb 73		 jmp	 SHORT $LN12@s370_store
$LN10@s370_store:

; 1086 : 
; 1087 :     case 7:
; 1088 :         /* Optimized case */
; 1089 :         store_fw(rbyte, regs->GR_L(r1));

  000d9	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  000de	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000e3	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  000ea	e8 00 00 00 00	 call	 _byteswap_ulong
  000ef	8b d0		 mov	 edx, eax
  000f1	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR rbyte$[rsp]
  000f6	e8 00 00 00 00	 call	 store_fw_noswap

; 1090 :         ARCH_DEP(vstorec) (rbyte+1, 2, effective_addr2, b2, regs);

  000fb	48 8d 44 24 3d	 lea	 rax, QWORD PTR rbyte$[rsp+1]
  00100	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00105	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0010a	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  0010f	44 8b 44 24 34	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00114	b2 02		 mov	 dl, 2
  00116	48 8b c8	 mov	 rcx, rax
  00119	e8 00 00 00 00	 call	 s370_vstorec

; 1091 :         break;

  0011e	e9 38 01 00 00	 jmp	 $LN5@s370_store
$LN11@s370_store:

; 1092 : 
; 1093 :     case 15:
; 1094 :         /* Optimized case */
; 1095 :         ARCH_DEP(vstore4) (regs->GR_L(r1), effective_addr2, b2, regs);

  00123	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  00128	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  0012d	44 8b 44 24 44	 mov	 r8d, DWORD PTR b2$[rsp]
  00132	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00136	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0013b	8b 8c c1 80 02
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*8+640]
  00142	e8 00 00 00 00	 call	 s370_vstore4

; 1096 :         break;

  00147	e9 0f 01 00 00	 jmp	 $LN5@s370_store
$LN12@s370_store:

; 1097 : 
; 1098 :     default:
; 1099 :         /* Extract value from register by mask */
; 1100 :         i = 0;

  0014c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 1101 :         if (r3 & 0x8) rbyte[i++] = (regs->GR_L(r1) >> 24) & 0xFF;

  00154	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  00158	83 e0 08	 and	 eax, 8
  0015b	85 c0		 test	 eax, eax
  0015d	74 2c		 je	 SHORT $LN13@s370_store
  0015f	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  00164	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00169	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00170	c1 e8 18	 shr	 eax, 24
  00173	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00178	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  0017d	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  00181	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00185	ff c0		 inc	 eax
  00187	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN13@s370_store:

; 1102 :         if (r3 & 0x4) rbyte[i++] = (regs->GR_L(r1) >> 16) & 0xFF;

  0018b	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  0018f	83 e0 04	 and	 eax, 4
  00192	85 c0		 test	 eax, eax
  00194	74 2c		 je	 SHORT $LN14@s370_store
  00196	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  0019b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001a0	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001a7	c1 e8 10	 shr	 eax, 16
  001aa	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001af	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  001b4	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  001b8	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001bc	ff c0		 inc	 eax
  001be	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN14@s370_store:

; 1103 :         if (r3 & 0x2) rbyte[i++] = (regs->GR_L(r1) >>  8) & 0xFF;

  001c2	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  001c6	83 e0 02	 and	 eax, 2
  001c9	85 c0		 test	 eax, eax
  001cb	74 2c		 je	 SHORT $LN15@s370_store
  001cd	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  001d2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  001d7	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001de	c1 e8 08	 shr	 eax, 8
  001e1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001e6	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  001eb	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  001ef	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001f3	ff c0		 inc	 eax
  001f5	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN15@s370_store:

; 1104 :         if (r3 & 0x1) rbyte[i++] = (regs->GR_L(r1)      ) & 0xFF;

  001f9	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  001fd	83 e0 01	 and	 eax, 1
  00200	85 c0		 test	 eax, eax
  00202	74 29		 je	 SHORT $LN16@s370_store
  00204	48 63 44 24 38	 movsxd	 rax, DWORD PTR r1$[rsp]
  00209	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0020e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00215	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0021a	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  0021f	88 44 0c 3c	 mov	 BYTE PTR rbyte$[rsp+rcx], al
  00223	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00227	ff c0		 inc	 eax
  00229	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s370_store:

; 1105 : 
; 1106 :         if (i)

  0022d	83 7c 24 30 00	 cmp	 DWORD PTR i$[rsp], 0
  00232	74 27		 je	 SHORT $LN17@s370_store

; 1107 :             ARCH_DEP(vstorec) (rbyte, i-1, effective_addr2, b2, regs);

  00234	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00238	ff c8		 dec	 eax
  0023a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0023f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00244	44 8b 4c 24 44	 mov	 r9d, DWORD PTR b2$[rsp]
  00249	44 8b 44 24 34	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0024e	0f b6 d0	 movzx	 edx, al
  00251	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR rbyte$[rsp]
  00256	e8 00 00 00 00	 call	 s370_vstorec
$LN17@s370_store:
$LN5@s370_store:

; 1108 : #if defined( MODEL_DEPENDENT_STCM )
; 1109 :         /* If the mask is all zero, we nevertheless access one byte
; 1110 :            from the storage operand, because POP states that an
; 1111 :            access exception may be recognized on the first byte */
; 1112 :         else
; 1113 :             ARCH_DEP(validate_operand) (effective_addr2, b2, 0,
; 1114 :                                         ACCTYPE_WRITE, regs);
; 1115 : #endif
; 1116 :         break;
; 1117 : 
; 1118 :     } /* switch (r3) */
; 1119 : }

  0025b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0025f	c3		 ret	 0
s370_store_characters_under_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
r1$ = 40
b2$ = 44
n$ = 48
tv135 = 52
tv147 = 56
tv202 = 60
r3$ = 64
inst$ = 96
regs$ = 104
s370_shift_right_single_logical PROC

; 1009 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1010 : int     r1, r3;                         /* Register numbers          */
; 1011 : int     b2;                             /* effective address base    */
; 1012 : VADR    effective_addr2;                /* effective address         */
; 1013 : U32     n;                              /* Integer work areas        */
; 1014 : 
; 1015 :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 28	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN8@s370_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN9@s370_shift
  00085	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_shift:
$LN8@s370_shift:
$LN4@s370_shift:
  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN10@s370_shift
  000af	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s370_shift:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_shift

; 1016 : 
; 1017 :     /* Use rightmost six bits of operand address as shift count */
; 1018 :     n = effective_addr2 & 0x3F;

  000c1	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000c8	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 1019 : 
; 1020 :     /* Shift the R1 register */
; 1021 :     regs->GR_L(r1) = n > 31 ? 0 : regs->GR_L(r1) >> n;

  000cc	83 7c 24 30 1f	 cmp	 DWORD PTR n$[rsp], 31
  000d1	76 0a		 jbe	 SHORT $LN13@s370_shift
  000d3	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
  000db	eb 1b		 jmp	 SHORT $LN14@s370_shift
$LN13@s370_shift:
  000dd	48 63 44 24 28	 movsxd	 rax, DWORD PTR r1$[rsp]
  000e2	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  000e6	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  000eb	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  000f2	d3 e8		 shr	 eax, cl
  000f4	89 44 24 34	 mov	 DWORD PTR tv135[rsp], eax
$LN14@s370_shift:
  000f8	48 63 44 24 28	 movsxd	 rax, DWORD PTR r1$[rsp]
  000fd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00102	8b 54 24 34	 mov	 edx, DWORD PTR tv135[rsp]
  00106	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN7@s370_shift:

; 1022 : 
; 1023 :     /* Check for PER 1 GRA event */
; 1024 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  0010d	33 c0		 xor	 eax, eax
  0010f	83 f8 01	 cmp	 eax, 1
  00112	0f 84 80 00 00
	00		 je	 $LN11@s370_shift
  00118	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0011d	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00123	c1 e8 02	 shr	 eax, 2
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 0a		 je	 SHORT $LN17@s370_shift
  0012d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  00135	eb 08		 jmp	 SHORT $LN18@s370_shift
$LN17@s370_shift:
  00137	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN18@s370_shift:
  0013f	83 7c 24 38 00	 cmp	 DWORD PTR tv147[rsp], 0
  00144	74 52		 je	 SHORT $LN11@s370_shift
  00146	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0014b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0014e	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00153	85 c0		 test	 eax, eax
  00155	74 41		 je	 SHORT $LN11@s370_shift
  00157	8b 44 24 28	 mov	 eax, DWORD PTR r1$[rsp]
  0015b	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  00160	89 4c 24 3c	 mov	 DWORD PTR tv202[rsp], ecx
  00164	0f b6 c8	 movzx	 ecx, al
  00167	8b 44 24 3c	 mov	 eax, DWORD PTR tv202[rsp]
  0016b	d3 f8		 sar	 eax, cl
  0016d	b9 08 00 00 00	 mov	 ecx, 8
  00172	48 6b c9 0a	 imul	 rcx, rcx, 10
  00176	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0017b	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00182	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00188	23 c1		 and	 eax, ecx
  0018a	85 c0		 test	 eax, eax
  0018c	74 0a		 je	 SHORT $LN11@s370_shift
  0018e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00193	e8 00 00 00 00	 call	 s370_per1_gra
$LN11@s370_shift:
  00198	33 c0		 xor	 eax, eax
  0019a	85 c0		 test	 eax, eax
  0019c	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_shift

; 1025 : }

  001a2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a6	c3		 ret	 0
s370_shift_right_single_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
b2$ = 44
tv135 = 48
n$ = 52
tv142 = 56
tv156 = 60
tv157 = 64
tv170 = 68
tv232 = 72
r3$ = 76
inst$ = 96
regs$ = 104
s370_shift_right_single PROC

; 980  : {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 981  : int     r1, r3;                         /* Register numbers          */
; 982  : int     b2;                             /* effective address base    */
; 983  : VADR    effective_addr2;                /* effective address         */
; 984  : U32     n;                              /* Integer work areas        */
; 985  : 
; 986  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 4c	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN8@s370_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN9@s370_shift
  00085	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_shift:
$LN8@s370_shift:
$LN4@s370_shift:
  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN10@s370_shift
  000af	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s370_shift:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_shift

; 987  : 
; 988  :     /* Use rightmost six bits of operand address as shift count */
; 989  :     n = effective_addr2 & 0x3F;

  000c1	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000c8	89 44 24 34	 mov	 DWORD PTR n$[rsp], eax

; 990  : 
; 991  :     /* Shift the signed value of the R1 register */
; 992  :     regs->GR_L(r1) = n > 30 ?

  000cc	83 7c 24 34 1e	 cmp	 DWORD PTR n$[rsp], 30
  000d1	76 30		 jbe	 SHORT $LN15@s370_shift
  000d3	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000d8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000dd	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  000e5	7d 0a		 jge	 SHORT $LN13@s370_shift
  000e7	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR tv135[rsp], -1
  000ef	eb 08		 jmp	 SHORT $LN14@s370_shift
$LN13@s370_shift:
  000f1	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN14@s370_shift:
  000f9	8b 44 24 30	 mov	 eax, DWORD PTR tv135[rsp]
  000fd	89 44 24 38	 mov	 DWORD PTR tv142[rsp], eax
  00101	eb 1b		 jmp	 SHORT $LN16@s370_shift
$LN15@s370_shift:
  00103	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00108	8b 4c 24 34	 mov	 ecx, DWORD PTR n$[rsp]
  0010c	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00111	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  00118	d3 f8		 sar	 eax, cl
  0011a	89 44 24 38	 mov	 DWORD PTR tv142[rsp], eax
$LN16@s370_shift:
  0011e	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00123	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00128	8b 54 24 38	 mov	 edx, DWORD PTR tv142[rsp]
  0012c	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 993  :                     ((S32)regs->GR_L(r1) < 0 ? -1 : 0) :
; 994  :                     (S32)regs->GR_L(r1) >> n;
; 995  : 
; 996  :     /* Set the condition code */
; 997  :     regs->psw.cc = ((S32)regs->GR_L(r1) > 0) ? 2 :

  00133	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00138	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0013d	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  00145	7e 0a		 jle	 SHORT $LN19@s370_shift
  00147	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR tv157[rsp], 2
  0014f	eb 2e		 jmp	 SHORT $LN20@s370_shift
$LN19@s370_shift:
  00151	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00156	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0015b	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  00163	7d 0a		 jge	 SHORT $LN17@s370_shift
  00165	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  0016d	eb 08		 jmp	 SHORT $LN18@s370_shift
$LN17@s370_shift:
  0016f	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN18@s370_shift:
  00177	8b 44 24 3c	 mov	 eax, DWORD PTR tv156[rsp]
  0017b	89 44 24 40	 mov	 DWORD PTR tv157[rsp], eax
$LN20@s370_shift:
  0017f	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00184	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR tv157[rsp]
  00189	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN7@s370_shift:

; 998  :                    (((S32)regs->GR_L(r1) < 0) ? 1 : 0);
; 999  : 
; 1000 :     /* Check for PER 1 GRA event */
; 1001 :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  0018c	33 c0		 xor	 eax, eax
  0018e	83 f8 01	 cmp	 eax, 1
  00191	0f 84 80 00 00
	00		 je	 $LN11@s370_shift
  00197	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0019c	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  001a2	c1 e8 02	 shr	 eax, 2
  001a5	83 e0 01	 and	 eax, 1
  001a8	85 c0		 test	 eax, eax
  001aa	74 0a		 je	 SHORT $LN23@s370_shift
  001ac	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv170[rsp], 1
  001b4	eb 08		 jmp	 SHORT $LN24@s370_shift
$LN23@s370_shift:
  001b6	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv170[rsp], 0
$LN24@s370_shift:
  001be	83 7c 24 44 00	 cmp	 DWORD PTR tv170[rsp], 0
  001c3	74 52		 je	 SHORT $LN11@s370_shift
  001c5	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001ca	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001cd	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001d2	85 c0		 test	 eax, eax
  001d4	74 41		 je	 SHORT $LN11@s370_shift
  001d6	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  001da	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  001df	89 4c 24 48	 mov	 DWORD PTR tv232[rsp], ecx
  001e3	0f b6 c8	 movzx	 ecx, al
  001e6	8b 44 24 48	 mov	 eax, DWORD PTR tv232[rsp]
  001ea	d3 f8		 sar	 eax, cl
  001ec	b9 08 00 00 00	 mov	 ecx, 8
  001f1	48 6b c9 0a	 imul	 rcx, rcx, 10
  001f5	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  001fa	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00201	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00207	23 c1		 and	 eax, ecx
  00209	85 c0		 test	 eax, eax
  0020b	74 0a		 je	 SHORT $LN11@s370_shift
  0020d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00212	e8 00 00 00 00	 call	 s370_per1_gra
$LN11@s370_shift:
  00217	33 c0		 xor	 eax, eax
  00219	85 c0		 test	 eax, eax
  0021b	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_shift

; 1002 : }

  00221	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00225	c3		 ret	 0
s370_shift_right_single ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
b2$ = 44
tv171 = 48
dreg$ = 56
n$ = 64
tv241 = 68
r3$ = 72
inst$ = 96
regs$ = 104
s370_shift_right_double_logical PROC

; 951  : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 952  : int     r1, r3;                         /* Register numbers          */
; 953  : int     b2;                             /* effective address base    */
; 954  : VADR    effective_addr2;                /* effective address         */
; 955  : U32     n;                              /* 32-bit operand values     */
; 956  : U64     dreg;                           /* Double register work area */
; 957  : 
; 958  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 48	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN8@s370_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN9@s370_shift
  00085	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_shift:
$LN8@s370_shift:
$LN4@s370_shift:
  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN10@s370_shift
  000af	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s370_shift:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_shift

; 959  : 
; 960  :     ODD_CHECK(r1, regs);

  000c1	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000c5	83 e0 01	 and	 eax, 1
  000c8	85 c0		 test	 eax, eax
  000ca	74 15		 je	 SHORT $LN11@s370_shift
  000cc	ba 06 00 00 00	 mov	 edx, 6
  000d1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000d6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000db	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_shift:

; 961  : 
; 962  :         /* Use rightmost six bits of operand address as shift count */
; 963  :     n = effective_addr2 & 0x3F;

  000e1	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000e5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000e8	89 44 24 40	 mov	 DWORD PTR n$[rsp], eax

; 964  : 
; 965  :     /* Shift the R1 and R1+1 registers */
; 966  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  000ec	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000f1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000f6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000fd	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00101	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00105	ff c1		 inc	 ecx
  00107	48 63 c9	 movsxd	 rcx, ecx
  0010a	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0010f	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00116	48 0b c1	 or	 rax, rcx
  00119	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 967  :     dreg >>= n;

  0011e	8b 44 24 40	 mov	 eax, DWORD PTR n$[rsp]
  00122	0f b6 c8	 movzx	 ecx, al
  00125	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  0012a	48 d3 e8	 shr	 rax, cl
  0012d	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 968  :     regs->GR_L(r1) = dreg >> 32;

  00132	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  00137	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0013b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00140	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00145	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 969  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  0014c	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00151	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dreg$[rsp]
  00156	48 23 c8	 and	 rcx, rax
  00159	48 8b c1	 mov	 rax, rcx
  0015c	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00160	ff c1		 inc	 ecx
  00162	48 63 c9	 movsxd	 rcx, ecx
  00165	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0016a	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN7@s370_shift:

; 970  : 
; 971  :     /* Check for PER 1 GRA event */
; 972  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));

  00171	33 c0		 xor	 eax, eax
  00173	83 f8 01	 cmp	 eax, 1
  00176	0f 84 91 00 00
	00		 je	 $LN12@s370_shift
  0017c	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00181	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00187	c1 e8 02	 shr	 eax, 2
  0018a	83 e0 01	 and	 eax, 1
  0018d	85 c0		 test	 eax, eax
  0018f	74 0a		 je	 SHORT $LN16@s370_shift
  00191	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv171[rsp], 1
  00199	eb 08		 jmp	 SHORT $LN17@s370_shift
$LN16@s370_shift:
  0019b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv171[rsp], 0
$LN17@s370_shift:
  001a3	83 7c 24 30 00	 cmp	 DWORD PTR tv171[rsp], 0
  001a8	74 63		 je	 SHORT $LN12@s370_shift
  001aa	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001af	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001b2	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001b7	85 c0		 test	 eax, eax
  001b9	74 52		 je	 SHORT $LN12@s370_shift
  001bb	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  001bf	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  001c4	89 4c 24 44	 mov	 DWORD PTR tv241[rsp], ecx
  001c8	0f b6 c8	 movzx	 ecx, al
  001cb	8b 44 24 44	 mov	 eax, DWORD PTR tv241[rsp]
  001cf	d3 f8		 sar	 eax, cl
  001d1	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  001d5	ff c1		 inc	 ecx
  001d7	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  001dc	d3 fa		 sar	 edx, cl
  001de	8b ca		 mov	 ecx, edx
  001e0	0b c1		 or	 eax, ecx
  001e2	b9 08 00 00 00	 mov	 ecx, 8
  001e7	48 6b c9 0a	 imul	 rcx, rcx, 10
  001eb	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  001f0	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  001f7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001fd	23 c1		 and	 eax, ecx
  001ff	85 c0		 test	 eax, eax
  00201	74 0a		 je	 SHORT $LN12@s370_shift
  00203	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00208	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_shift:
  0020d	33 c0		 xor	 eax, eax
  0020f	85 c0		 test	 eax, eax
  00211	0f 85 5a ff ff
	ff		 jne	 $LN7@s370_shift

; 973  : }

  00217	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0021b	c3		 ret	 0
s370_shift_right_double_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
dreg$ = 48
b2$ = 56
tv162 = 60
tv163 = 64
tv176 = 68
n$ = 72
tv249 = 76
r3$ = 80
inst$ = 112
regs$ = 120
s370_shift_right_double PROC

; 919  : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 920  : int     r1, r3;                         /* Register numbers          */
; 921  : int     b2;                             /* effective address base    */
; 922  : VADR    effective_addr2;                /* effective address         */
; 923  : U32     n;                              /* 32-bit operand values     */
; 924  : U64     dreg;                           /* Double register work area */
; 925  : 
; 926  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 38	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 50	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 38 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN8@s370_shift
  00061	48 63 44 24 38	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN9@s370_shift
  00085	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_shift:
$LN8@s370_shift:
$LN4@s370_shift:
  00092	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN10@s370_shift
  000af	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s370_shift:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_shift

; 927  : 
; 928  :     ODD_CHECK(r1, regs);

  000c1	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000c5	83 e0 01	 and	 eax, 1
  000c8	85 c0		 test	 eax, eax
  000ca	74 15		 je	 SHORT $LN11@s370_shift
  000cc	ba 06 00 00 00	 mov	 edx, 6
  000d1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d6	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000db	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_shift:

; 929  : 
; 930  :     /* Use rightmost six bits of operand address as shift count */
; 931  :     n = effective_addr2 & 0x3F;

  000e1	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000e5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000e8	89 44 24 48	 mov	 DWORD PTR n$[rsp], eax

; 932  : 
; 933  :     /* Shift the R1 and R1+1 registers */
; 934  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  000ec	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000f1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000f6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000fd	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00101	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00105	ff c1		 inc	 ecx
  00107	48 63 c9	 movsxd	 rcx, ecx
  0010a	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0010f	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00116	48 0b c1	 or	 rax, rcx
  00119	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 935  :     dreg = (U64)((S64)dreg >> n);

  0011e	8b 44 24 48	 mov	 eax, DWORD PTR n$[rsp]
  00122	0f b6 c8	 movzx	 ecx, al
  00125	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  0012a	48 d3 f8	 sar	 rax, cl
  0012d	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 936  :     regs->GR_L(r1) = dreg >> 32;

  00132	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  00137	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0013b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00140	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00145	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 937  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  0014c	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00151	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dreg$[rsp]
  00156	48 23 c8	 and	 rcx, rax
  00159	48 8b c1	 mov	 rax, rcx
  0015c	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00160	ff c1		 inc	 ecx
  00162	48 63 c9	 movsxd	 rcx, ecx
  00165	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0016a	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 938  : 
; 939  :     /* Set the condition code */
; 940  :     regs->psw.cc = (S64)dreg > 0 ? 2 : (S64)dreg < 0 ? 1 : 0;

  00171	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  00177	7e 0a		 jle	 SHORT $LN16@s370_shift
  00179	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR tv163[rsp], 2
  00181	eb 22		 jmp	 SHORT $LN17@s370_shift
$LN16@s370_shift:
  00183	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  00189	7d 0a		 jge	 SHORT $LN14@s370_shift
  0018b	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv162[rsp], 1
  00193	eb 08		 jmp	 SHORT $LN15@s370_shift
$LN14@s370_shift:
  00195	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv162[rsp], 0
$LN15@s370_shift:
  0019d	8b 44 24 3c	 mov	 eax, DWORD PTR tv162[rsp]
  001a1	89 44 24 40	 mov	 DWORD PTR tv163[rsp], eax
$LN17@s370_shift:
  001a5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001aa	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR tv163[rsp]
  001af	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN7@s370_shift:

; 941  : 
; 942  :     /* Check for PER 1 GRA event */
; 943  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));

  001b2	33 c0		 xor	 eax, eax
  001b4	83 f8 01	 cmp	 eax, 1
  001b7	0f 84 91 00 00
	00		 je	 $LN12@s370_shift
  001bd	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001c2	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  001c8	c1 e8 02	 shr	 eax, 2
  001cb	83 e0 01	 and	 eax, 1
  001ce	85 c0		 test	 eax, eax
  001d0	74 0a		 je	 SHORT $LN20@s370_shift
  001d2	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv176[rsp], 1
  001da	eb 08		 jmp	 SHORT $LN21@s370_shift
$LN20@s370_shift:
  001dc	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv176[rsp], 0
$LN21@s370_shift:
  001e4	83 7c 24 44 00	 cmp	 DWORD PTR tv176[rsp], 0
  001e9	74 63		 je	 SHORT $LN12@s370_shift
  001eb	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f0	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001f3	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001f8	85 c0		 test	 eax, eax
  001fa	74 52		 je	 SHORT $LN12@s370_shift
  001fc	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  00200	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  00205	89 4c 24 4c	 mov	 DWORD PTR tv249[rsp], ecx
  00209	0f b6 c8	 movzx	 ecx, al
  0020c	8b 44 24 4c	 mov	 eax, DWORD PTR tv249[rsp]
  00210	d3 f8		 sar	 eax, cl
  00212	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00216	ff c1		 inc	 ecx
  00218	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  0021d	d3 fa		 sar	 edx, cl
  0021f	8b ca		 mov	 ecx, edx
  00221	0b c1		 or	 eax, ecx
  00223	b9 08 00 00 00	 mov	 ecx, 8
  00228	48 6b c9 0a	 imul	 rcx, rcx, 10
  0022c	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00231	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00238	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0023e	23 c1		 and	 eax, ecx
  00240	85 c0		 test	 eax, eax
  00242	74 0a		 je	 SHORT $LN12@s370_shift
  00244	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00249	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_shift:
  0024e	33 c0		 xor	 eax, eax
  00250	85 c0		 test	 eax, eax
  00252	0f 85 5a ff ff
	ff		 jne	 $LN7@s370_shift

; 944  : }

  00258	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0025c	c3		 ret	 0
s370_shift_right_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
r1$ = 40
b2$ = 44
n$ = 48
tv135 = 52
tv147 = 56
tv202 = 60
r3$ = 64
inst$ = 96
regs$ = 104
s370_shift_left_single_logical PROC

; 896  : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 897  : int     r1, r3;                         /* Register numbers          */
; 898  : int     b2;                             /* effective address base    */
; 899  : VADR    effective_addr2;                /* effective address         */
; 900  : U32     n;                              /* Integer work areas        */
; 901  : 
; 902  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 28	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN8@s370_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN9@s370_shift
  00085	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_shift:
$LN8@s370_shift:
$LN4@s370_shift:
  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN10@s370_shift
  000af	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s370_shift:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_shift

; 903  : 
; 904  :     /* Use rightmost six bits of operand address as shift count */
; 905  :     n = effective_addr2 & 0x3F;

  000c1	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000c8	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 906  : 
; 907  :     /* Shift the R1 register */
; 908  :     regs->GR_L(r1) = n > 31 ? 0 : regs->GR_L(r1) << n;

  000cc	83 7c 24 30 1f	 cmp	 DWORD PTR n$[rsp], 31
  000d1	76 0a		 jbe	 SHORT $LN13@s370_shift
  000d3	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
  000db	eb 1b		 jmp	 SHORT $LN14@s370_shift
$LN13@s370_shift:
  000dd	48 63 44 24 28	 movsxd	 rax, DWORD PTR r1$[rsp]
  000e2	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  000e6	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  000eb	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  000f2	d3 e0		 shl	 eax, cl
  000f4	89 44 24 34	 mov	 DWORD PTR tv135[rsp], eax
$LN14@s370_shift:
  000f8	48 63 44 24 28	 movsxd	 rax, DWORD PTR r1$[rsp]
  000fd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00102	8b 54 24 34	 mov	 edx, DWORD PTR tv135[rsp]
  00106	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN7@s370_shift:

; 909  : 
; 910  :     /* Check for PER 1 GRA event */
; 911  :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  0010d	33 c0		 xor	 eax, eax
  0010f	83 f8 01	 cmp	 eax, 1
  00112	0f 84 80 00 00
	00		 je	 $LN11@s370_shift
  00118	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0011d	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00123	c1 e8 02	 shr	 eax, 2
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 0a		 je	 SHORT $LN17@s370_shift
  0012d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  00135	eb 08		 jmp	 SHORT $LN18@s370_shift
$LN17@s370_shift:
  00137	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN18@s370_shift:
  0013f	83 7c 24 38 00	 cmp	 DWORD PTR tv147[rsp], 0
  00144	74 52		 je	 SHORT $LN11@s370_shift
  00146	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0014b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0014e	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00153	85 c0		 test	 eax, eax
  00155	74 41		 je	 SHORT $LN11@s370_shift
  00157	8b 44 24 28	 mov	 eax, DWORD PTR r1$[rsp]
  0015b	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  00160	89 4c 24 3c	 mov	 DWORD PTR tv202[rsp], ecx
  00164	0f b6 c8	 movzx	 ecx, al
  00167	8b 44 24 3c	 mov	 eax, DWORD PTR tv202[rsp]
  0016b	d3 f8		 sar	 eax, cl
  0016d	b9 08 00 00 00	 mov	 ecx, 8
  00172	48 6b c9 0a	 imul	 rcx, rcx, 10
  00176	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0017b	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00182	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00188	23 c1		 and	 eax, ecx
  0018a	85 c0		 test	 eax, eax
  0018c	74 0a		 je	 SHORT $LN11@s370_shift
  0018e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00193	e8 00 00 00 00	 call	 s370_per1_gra
$LN11@s370_shift:
  00198	33 c0		 xor	 eax, eax
  0019a	85 c0		 test	 eax, eax
  0019c	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_shift

; 912  : }

  001a2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a6	c3		 ret	 0
s370_shift_left_single_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
n1$ = 44
n$ = 48
i$ = 52
b2$ = 56
tv148 = 60
n2$ = 64
j$ = 68
tv196 = 72
tv197 = 76
tv210 = 80
tv288 = 84
r3$ = 88
inst$ = 112
regs$ = 120
s370_shift_left_single PROC

; 836  : {

$LN30:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 837  : int     r1, r3;                         /* Register numbers          */
; 838  : int     b2;                             /* effective address base    */
; 839  : VADR    effective_addr2;                /* effective address         */
; 840  : U32     n, n1, n2;                      /* 32-bit operand values     */
; 841  : U32     i, j;                           /* Integer work areas        */
; 842  : 
; 843  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 38	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 58	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 38 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN11@s370_shift
  00061	48 63 44 24 38	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN12@s370_shift
  00085	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_shift:
$LN11@s370_shift:
$LN4@s370_shift:
  00092	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN13@s370_shift
  000af	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN13@s370_shift:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_shift

; 844  : 
; 845  :     /* Use rightmost six bits of operand address as shift count */
; 846  :     n = effective_addr2 & 0x3F;

  000c1	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000c8	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 847  : 
; 848  :     /* Fast path if no possible overflow */
; 849  :     if (regs->GR_L(r1) < 0x10000 && n < 16)

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000d1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d6	81 bc c1 80 02
	00 00 00 00 01
	00		 cmp	 DWORD PTR [rcx+rax*8+640], 65536 ; 00010000H
  000e1	73 67		 jae	 SHORT $LN14@s370_shift
  000e3	83 7c 24 30 10	 cmp	 DWORD PTR n$[rsp], 16
  000e8	73 60		 jae	 SHORT $LN14@s370_shift

; 850  :     {
; 851  :         regs->GR_L(r1) <<= n;

  000ea	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000ef	8b 4c 24 30	 mov	 ecx, DWORD PTR n$[rsp]
  000f3	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f8	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  000ff	d3 e0		 shl	 eax, cl
  00101	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00106	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0010b	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 852  :         regs->psw.cc = regs->GR_L(r1) ? 2 : 0;

  00112	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00117	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0011c	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  00124	74 0a		 je	 SHORT $LN20@s370_shift
  00126	c7 44 24 3c 02
	00 00 00	 mov	 DWORD PTR tv148[rsp], 2
  0012e	eb 08		 jmp	 SHORT $LN21@s370_shift
$LN20@s370_shift:
  00130	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN21@s370_shift:
  00138	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0013d	0f b6 4c 24 3c	 movzx	 ecx, BYTE PTR tv148[rsp]
  00142	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 853  :         return;

  00145	e9 c1 01 00 00	 jmp	 $LN1@s370_shift
$LN14@s370_shift:

; 854  :     }
; 855  : 
; 856  :     /* Load the numeric and sign portions from the R1 register */
; 857  :     n1 = regs->GR_L(r1) & 0x7FFFFFFF;

  0014a	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0014f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00154	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0015b	0f ba f0 1f	 btr	 eax, 31
  0015f	89 44 24 2c	 mov	 DWORD PTR n1$[rsp], eax

; 858  :     n2 = regs->GR_L(r1) & 0x80000000;

  00163	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00168	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0016d	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00174	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00179	89 44 24 40	 mov	 DWORD PTR n2$[rsp], eax

; 859  : 
; 860  :     /* Shift the numeric portion left n positions */
; 861  :     for (i = 0, j = 0; i < n; i++)

  0017d	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00185	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0018d	eb 0a		 jmp	 SHORT $LN7@s370_shift
$LN5@s370_shift:
  0018f	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00193	ff c0		 inc	 eax
  00195	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN7@s370_shift:
  00199	8b 44 24 30	 mov	 eax, DWORD PTR n$[rsp]
  0019d	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  001a1	73 23		 jae	 SHORT $LN6@s370_shift

; 862  :     {
; 863  :         /* Shift bits 1-31 left one bit position */
; 864  :         n1 <<= 1;

  001a3	8b 44 24 2c	 mov	 eax, DWORD PTR n1$[rsp]
  001a7	d1 e0		 shl	 eax, 1
  001a9	89 44 24 2c	 mov	 DWORD PTR n1$[rsp], eax

; 865  : 
; 866  :         /* Overflow if bit shifted out is unlike the sign bit */
; 867  :         if ((n1 & 0x80000000) != n2)

  001ad	8b 44 24 2c	 mov	 eax, DWORD PTR n1$[rsp]
  001b1	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001b6	3b 44 24 40	 cmp	 eax, DWORD PTR n2$[rsp]
  001ba	74 08		 je	 SHORT $LN15@s370_shift

; 868  :             j = 1;

  001bc	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1
$LN15@s370_shift:

; 869  :     }

  001c4	eb c9		 jmp	 SHORT $LN5@s370_shift
$LN6@s370_shift:

; 870  : 
; 871  :     /* Load the updated value into the R1 register */
; 872  :     regs->GR_L(r1) = (n1 & 0x7FFFFFFF) | n2;

  001c6	8b 44 24 2c	 mov	 eax, DWORD PTR n1$[rsp]
  001ca	0f ba f0 1f	 btr	 eax, 31
  001ce	0b 44 24 40	 or	 eax, DWORD PTR n2$[rsp]
  001d2	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  001d7	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  001dc	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 873  : 
; 874  :     /* Condition code 3 and program check if overflow occurred */
; 875  :     if (j)

  001e3	83 7c 24 44 00	 cmp	 DWORD PTR j$[rsp], 0
  001e8	74 33		 je	 SHORT $LN16@s370_shift

; 876  :     {
; 877  :         regs->psw.cc = 3;

  001ea	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001ef	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 878  :         if ( FOMASK(&regs->psw) )

  001f3	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f8	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  001fc	83 e0 08	 and	 eax, 8
  001ff	85 c0		 test	 eax, eax
  00201	74 15		 je	 SHORT $LN17@s370_shift

; 879  :             regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  00203	ba 08 00 00 00	 mov	 edx, 8
  00208	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0020d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00212	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN17@s370_shift:

; 880  :         return;

  00218	e9 ee 00 00 00	 jmp	 $LN1@s370_shift
$LN16@s370_shift:

; 881  :     }
; 882  : 
; 883  :     /* Set the condition code */
; 884  :     regs->psw.cc = (S32)regs->GR_L(r1) > 0 ? 2 :

  0021d	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00222	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00227	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0022f	7e 0a		 jle	 SHORT $LN24@s370_shift
  00231	c7 44 24 4c 02
	00 00 00	 mov	 DWORD PTR tv197[rsp], 2
  00239	eb 2e		 jmp	 SHORT $LN25@s370_shift
$LN24@s370_shift:
  0023b	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00240	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00245	83 bc c1 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax*8+640], 0
  0024d	7d 0a		 jge	 SHORT $LN22@s370_shift
  0024f	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv196[rsp], 1
  00257	eb 08		 jmp	 SHORT $LN23@s370_shift
$LN22@s370_shift:
  00259	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv196[rsp], 0
$LN23@s370_shift:
  00261	8b 44 24 48	 mov	 eax, DWORD PTR tv196[rsp]
  00265	89 44 24 4c	 mov	 DWORD PTR tv197[rsp], eax
$LN25@s370_shift:
  00269	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0026e	0f b6 4c 24 4c	 movzx	 ecx, BYTE PTR tv197[rsp]
  00273	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN10@s370_shift:

; 885  :                    (S32)regs->GR_L(r1) < 0 ? 1 : 0;
; 886  : 
; 887  :     /* Check for PER 1 GRA event */
; 888  :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  00276	33 c0		 xor	 eax, eax
  00278	83 f8 01	 cmp	 eax, 1
  0027b	0f 84 80 00 00
	00		 je	 $LN18@s370_shift
  00281	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00286	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  0028c	c1 e8 02	 shr	 eax, 2
  0028f	83 e0 01	 and	 eax, 1
  00292	85 c0		 test	 eax, eax
  00294	74 0a		 je	 SHORT $LN28@s370_shift
  00296	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv210[rsp], 1
  0029e	eb 08		 jmp	 SHORT $LN29@s370_shift
$LN28@s370_shift:
  002a0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv210[rsp], 0
$LN29@s370_shift:
  002a8	83 7c 24 50 00	 cmp	 DWORD PTR tv210[rsp], 0
  002ad	74 52		 je	 SHORT $LN18@s370_shift
  002af	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002b4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  002b7	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  002bc	85 c0		 test	 eax, eax
  002be	74 41		 je	 SHORT $LN18@s370_shift
  002c0	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  002c4	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  002c9	89 4c 24 54	 mov	 DWORD PTR tv288[rsp], ecx
  002cd	0f b6 c8	 movzx	 ecx, al
  002d0	8b 44 24 54	 mov	 eax, DWORD PTR tv288[rsp]
  002d4	d3 f8		 sar	 eax, cl
  002d6	b9 08 00 00 00	 mov	 ecx, 8
  002db	48 6b c9 0a	 imul	 rcx, rcx, 10
  002df	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  002e4	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  002eb	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  002f1	23 c1		 and	 eax, ecx
  002f3	85 c0		 test	 eax, eax
  002f5	74 0a		 je	 SHORT $LN18@s370_shift
  002f7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  002fc	e8 00 00 00 00	 call	 s370_per1_gra
$LN18@s370_shift:
  00301	33 c0		 xor	 eax, eax
  00303	85 c0		 test	 eax, eax
  00305	0f 85 6b ff ff
	ff		 jne	 $LN10@s370_shift
$LN1@s370_shift:

; 889  : }

  0030b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0030f	c3		 ret	 0
s370_shift_left_single ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
b2$ = 44
tv171 = 48
dreg$ = 56
n$ = 64
tv241 = 68
r3$ = 72
inst$ = 96
regs$ = 104
s370_shift_left_double_logical PROC

; 807  : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 808  : int     r1, r3;                         /* Register numbers          */
; 809  : int     b2;                             /* effective address base    */
; 810  : VADR    effective_addr2;                /* effective address         */
; 811  : U32     n;                              /* 32-bit operand values     */
; 812  : U64     dreg;                           /* Double register work area */
; 813  : 
; 814  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 0c	 shr	 eax, 12
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 2c	 mov	 DWORD PTR b2$[rsp], eax
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 10	 shr	 eax, 16
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 48	 mov	 DWORD PTR r3$[rsp], eax
  0004c	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00050	c1 e8 14	 shr	 eax, 20
  00053	83 e0 0f	 and	 eax, 15
  00056	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005a	83 7c 24 2c 00	 cmp	 DWORD PTR b2$[rsp], 0
  0005f	74 31		 je	 SHORT $LN8@s370_shift
  00061	48 63 44 24 2c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00072	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00076	03 c8		 add	 ecx, eax
  00078	8b c1		 mov	 eax, ecx
  0007a	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0007e	33 c0		 xor	 eax, eax
  00080	83 f8 04	 cmp	 eax, 4
  00083	74 0d		 je	 SHORT $LN9@s370_shift
  00085	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0008e	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_shift:
$LN8@s370_shift:
$LN4@s370_shift:
  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00097	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009b	48 83 c0 04	 add	 rax, 4
  0009f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000a4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a8	33 c0		 xor	 eax, eax
  000aa	83 f8 04	 cmp	 eax, 4
  000ad	74 0c		 je	 SHORT $LN10@s370_shift
  000af	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000b4	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN10@s370_shift:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 d1		 jne	 SHORT $LN4@s370_shift

; 815  : 
; 816  :     ODD_CHECK(r1, regs);

  000c1	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000c5	83 e0 01	 and	 eax, 1
  000c8	85 c0		 test	 eax, eax
  000ca	74 15		 je	 SHORT $LN11@s370_shift
  000cc	ba 06 00 00 00	 mov	 edx, 6
  000d1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000d6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000db	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_shift:

; 817  : 
; 818  :     /* Use rightmost six bits of operand address as shift count */
; 819  :     n = effective_addr2 & 0x3F;

  000e1	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000e5	83 e0 3f	 and	 eax, 63			; 0000003fH
  000e8	89 44 24 40	 mov	 DWORD PTR n$[rsp], eax

; 820  : 
; 821  :     /* Shift the R1 and R1+1 registers */
; 822  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  000ec	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  000f1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000f6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000fd	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00101	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00105	ff c1		 inc	 ecx
  00107	48 63 c9	 movsxd	 rcx, ecx
  0010a	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0010f	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00116	48 0b c1	 or	 rax, rcx
  00119	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 823  :     dreg <<= n;

  0011e	8b 44 24 40	 mov	 eax, DWORD PTR n$[rsp]
  00122	0f b6 c8	 movzx	 ecx, al
  00125	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  0012a	48 d3 e0	 shl	 rax, cl
  0012d	48 89 44 24 38	 mov	 QWORD PTR dreg$[rsp], rax

; 824  :     regs->GR_L(r1) = dreg >> 32;

  00132	48 8b 44 24 38	 mov	 rax, QWORD PTR dreg$[rsp]
  00137	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0013b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00140	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  00145	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 825  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  0014c	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00151	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dreg$[rsp]
  00156	48 23 c8	 and	 rcx, rax
  00159	48 8b c1	 mov	 rax, rcx
  0015c	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00160	ff c1		 inc	 ecx
  00162	48 63 c9	 movsxd	 rcx, ecx
  00165	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0016a	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN7@s370_shift:

; 826  : 
; 827  :     /* Check for PER 1 GRA event */
; 828  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));

  00171	33 c0		 xor	 eax, eax
  00173	83 f8 01	 cmp	 eax, 1
  00176	0f 84 91 00 00
	00		 je	 $LN12@s370_shift
  0017c	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00181	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00187	c1 e8 02	 shr	 eax, 2
  0018a	83 e0 01	 and	 eax, 1
  0018d	85 c0		 test	 eax, eax
  0018f	74 0a		 je	 SHORT $LN16@s370_shift
  00191	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv171[rsp], 1
  00199	eb 08		 jmp	 SHORT $LN17@s370_shift
$LN16@s370_shift:
  0019b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv171[rsp], 0
$LN17@s370_shift:
  001a3	83 7c 24 30 00	 cmp	 DWORD PTR tv171[rsp], 0
  001a8	74 63		 je	 SHORT $LN12@s370_shift
  001aa	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001af	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001b2	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001b7	85 c0		 test	 eax, eax
  001b9	74 52		 je	 SHORT $LN12@s370_shift
  001bb	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  001bf	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  001c4	89 4c 24 44	 mov	 DWORD PTR tv241[rsp], ecx
  001c8	0f b6 c8	 movzx	 ecx, al
  001cb	8b 44 24 44	 mov	 eax, DWORD PTR tv241[rsp]
  001cf	d3 f8		 sar	 eax, cl
  001d1	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  001d5	ff c1		 inc	 ecx
  001d7	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  001dc	d3 fa		 sar	 edx, cl
  001de	8b ca		 mov	 ecx, edx
  001e0	0b c1		 or	 eax, ecx
  001e2	b9 08 00 00 00	 mov	 ecx, 8
  001e7	48 6b c9 0a	 imul	 rcx, rcx, 10
  001eb	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  001f0	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  001f7	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001fd	23 c1		 and	 eax, ecx
  001ff	85 c0		 test	 eax, eax
  00201	74 0a		 je	 SHORT $LN12@s370_shift
  00203	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00208	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_shift:
  0020d	33 c0		 xor	 eax, eax
  0020f	85 c0		 test	 eax, eax
  00211	0f 85 5a ff ff
	ff		 jne	 $LN7@s370_shift

; 829  : }

  00217	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0021b	c3		 ret	 0
s370_shift_left_double_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
effective_addr2$ = 36
temp$1 = 40
dreg$ = 48
i$ = 56
b2$ = 60
tv144 = 64
tv149 = 68
m$ = 72
j$ = 76
tv191 = 80
tv192 = 84
tv205 = 88
n$ = 92
h$ = 96
tv288 = 100
r3$ = 104
inst$ = 128
regs$ = 136
s370_shift_left_double PROC

; 749  : {

$LN33:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 750  : int     r1, r3;                         /* Register numbers          */
; 751  : int     b2;                             /* effective address base    */
; 752  : VADR    effective_addr2;                /* effective address         */
; 753  : U32     n;                              /* 32-bit operand values     */
; 754  : U64     dreg;                           /* Double register work area */
; 755  : U32     h, i, j, m;                     /* Integer work areas        */
; 756  : 
; 757  :     RS(inst, regs, r1, r3, b2, effective_addr2);

  0000e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00016	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 _byteswap_ulong
  00022	89 44 24 28	 mov	 DWORD PTR temp$1[rsp], eax
  00026	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  0002a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002f	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00033	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 3c	 mov	 DWORD PTR b2$[rsp], eax
  00041	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 68	 mov	 DWORD PTR r3$[rsp], eax
  0004f	8b 44 24 28	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 14	 shr	 eax, 20
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
  0005d	83 7c 24 3c 00	 cmp	 DWORD PTR b2$[rsp], 0
  00062	74 34		 je	 SHORT $LN11@s370_shift
  00064	48 63 44 24 3c	 movsxd	 rax, DWORD PTR b2$[rsp]
  00069	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00071	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00078	8b 4c 24 24	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0007c	03 c8		 add	 ecx, eax
  0007e	8b c1		 mov	 eax, ecx
  00080	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00084	33 c0		 xor	 eax, eax
  00086	83 f8 04	 cmp	 eax, 4
  00089	74 0d		 je	 SHORT $LN12@s370_shift
  0008b	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0008f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00094	89 44 24 24	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_shift:
$LN11@s370_shift:
$LN4@s370_shift:
  00098	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000a0	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a4	48 83 c0 04	 add	 rax, 4
  000a8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b0	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000b4	33 c0		 xor	 eax, eax
  000b6	83 f8 04	 cmp	 eax, 4
  000b9	74 0f		 je	 SHORT $LN13@s370_shift
  000bb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000c3	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN13@s370_shift:
  000ca	33 c0		 xor	 eax, eax
  000cc	85 c0		 test	 eax, eax
  000ce	75 c8		 jne	 SHORT $LN4@s370_shift

; 758  : 
; 759  :     ODD_CHECK(r1, regs);

  000d0	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  000d4	83 e0 01	 and	 eax, 1
  000d7	85 c0		 test	 eax, eax
  000d9	74 1b		 je	 SHORT $LN14@s370_shift
  000db	ba 06 00 00 00	 mov	 edx, 6
  000e0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000f0	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_shift:

; 760  : 
; 761  :     /* Use rightmost six bits of operand address as shift count */
; 762  :     n = effective_addr2 & 0x3F;

  000f6	8b 44 24 24	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000fa	83 e0 3f	 and	 eax, 63			; 0000003fH
  000fd	89 44 24 5c	 mov	 DWORD PTR n$[rsp], eax

; 763  : 
; 764  :     /* Load the signed value from the R1 and R1+1 registers */
; 765  :     dreg = (U64)regs->GR_L(r1) << 32 | regs->GR_L(r1+1);

  00101	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00106	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00115	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  00119	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0011d	ff c1		 inc	 ecx
  0011f	48 63 c9	 movsxd	 rcx, ecx
  00122	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0012a	8b 8c ca 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*8+640]
  00131	48 0b c1	 or	 rax, rcx
  00134	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 766  :     m = ((S64)dreg < 0) ? 1 : 0;

  00139	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  0013f	7d 0a		 jge	 SHORT $LN21@s370_shift
  00141	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  00149	eb 08		 jmp	 SHORT $LN22@s370_shift
$LN21@s370_shift:
  0014b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN22@s370_shift:
  00153	8b 44 24 40	 mov	 eax, DWORD PTR tv144[rsp]
  00157	89 44 24 48	 mov	 DWORD PTR m$[rsp], eax

; 767  : 
; 768  :     /* Shift the numeric portion of the value */
; 769  :     for (i = 0, j = 0; i < n; i++)

  0015b	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00163	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0016b	eb 0a		 jmp	 SHORT $LN7@s370_shift
$LN5@s370_shift:
  0016d	8b 44 24 38	 mov	 eax, DWORD PTR i$[rsp]
  00171	ff c0		 inc	 eax
  00173	89 44 24 38	 mov	 DWORD PTR i$[rsp], eax
$LN7@s370_shift:
  00177	8b 44 24 5c	 mov	 eax, DWORD PTR n$[rsp]
  0017b	39 44 24 38	 cmp	 DWORD PTR i$[rsp], eax
  0017f	73 43		 jae	 SHORT $LN6@s370_shift

; 770  :     {
; 771  :         /* Shift bits 1-63 left one bit position */
; 772  :         dreg <<= 1;

  00181	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  00186	48 d1 e0	 shl	 rax, 1
  00189	48 89 44 24 30	 mov	 QWORD PTR dreg$[rsp], rax

; 773  : 
; 774  :         /* Overflow if bit shifted out is unlike the sign bit */
; 775  :         h = ((S64)dreg < 0) ? 1 : 0;

  0018e	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  00194	7d 0a		 jge	 SHORT $LN23@s370_shift
  00196	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
  0019e	eb 08		 jmp	 SHORT $LN24@s370_shift
$LN23@s370_shift:
  001a0	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
$LN24@s370_shift:
  001a8	8b 44 24 44	 mov	 eax, DWORD PTR tv149[rsp]
  001ac	89 44 24 60	 mov	 DWORD PTR h$[rsp], eax

; 776  :         if (h != m)

  001b0	8b 44 24 48	 mov	 eax, DWORD PTR m$[rsp]
  001b4	39 44 24 60	 cmp	 DWORD PTR h$[rsp], eax
  001b8	74 08		 je	 SHORT $LN15@s370_shift

; 777  :             j = 1;

  001ba	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1
$LN15@s370_shift:

; 778  :     }

  001c2	eb a9		 jmp	 SHORT $LN5@s370_shift
$LN6@s370_shift:

; 779  : 
; 780  :     /* Load updated value into the R1 and R1+1 registers */
; 781  :     regs->GR_L(r1) = (dreg >> 32) & 0x7FFFFFFF;

  001c4	48 8b 44 24 30	 mov	 rax, QWORD PTR dreg$[rsp]
  001c9	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  001cd	48 25 ff ff ff
	7f		 and	 rax, 2147483647		; 7fffffffH
  001d3	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  001d8	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001e0	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 782  :     if (m)

  001e7	83 7c 24 48 00	 cmp	 DWORD PTR m$[rsp], 0
  001ec	74 2c		 je	 SHORT $LN16@s370_shift

; 783  :         regs->GR_L(r1) |= 0x80000000;

  001ee	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  001f3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001fb	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00202	0f ba e8 1f	 bts	 eax, 31
  00206	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR r1$[rsp]
  0020b	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00213	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax
$LN16@s370_shift:

; 784  :     regs->GR_L(r1+1) = dreg & 0xFFFFFFFF;

  0021a	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0021f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dreg$[rsp]
  00224	48 23 c8	 and	 rcx, rax
  00227	48 8b c1	 mov	 rax, rcx
  0022a	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  0022e	ff c1		 inc	 ecx
  00230	48 63 c9	 movsxd	 rcx, ecx
  00233	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0023b	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 785  : 
; 786  :     /* Condition code 3 and program check if overflow occurred */
; 787  :     if (j)

  00242	83 7c 24 4c 00	 cmp	 DWORD PTR j$[rsp], 0
  00247	74 3f		 je	 SHORT $LN17@s370_shift

; 788  :     {
; 789  :         regs->psw.cc = 3;

  00249	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00251	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 790  :         if ( FOMASK(&regs->psw) )

  00255	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0025d	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00261	83 e0 08	 and	 eax, 8
  00264	85 c0		 test	 eax, eax
  00266	74 1b		 je	 SHORT $LN18@s370_shift

; 791  :             regs->program_interrupt (regs, PGM_FIXED_POINT_OVERFLOW_EXCEPTION);

  00268	ba 08 00 00 00	 mov	 edx, 8
  0026d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00275	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0027d	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_shift:

; 792  :         return;

  00283	e9 f6 00 00 00	 jmp	 $LN1@s370_shift
$LN17@s370_shift:

; 793  :     }
; 794  : 
; 795  :     /* Set the condition code */
; 796  :     regs->psw.cc = (S64)dreg > 0 ? 2 : (S64)dreg < 0 ? 1 : 0;

  00288	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  0028e	7e 0a		 jle	 SHORT $LN27@s370_shift
  00290	c7 44 24 54 02
	00 00 00	 mov	 DWORD PTR tv192[rsp], 2
  00298	eb 22		 jmp	 SHORT $LN28@s370_shift
$LN27@s370_shift:
  0029a	48 83 7c 24 30
	00		 cmp	 QWORD PTR dreg$[rsp], 0
  002a0	7d 0a		 jge	 SHORT $LN25@s370_shift
  002a2	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv191[rsp], 1
  002aa	eb 08		 jmp	 SHORT $LN26@s370_shift
$LN25@s370_shift:
  002ac	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv191[rsp], 0
$LN26@s370_shift:
  002b4	8b 44 24 50	 mov	 eax, DWORD PTR tv191[rsp]
  002b8	89 44 24 54	 mov	 DWORD PTR tv192[rsp], eax
$LN28@s370_shift:
  002bc	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002c4	0f b6 4c 24 54	 movzx	 ecx, BYTE PTR tv192[rsp]
  002c9	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN10@s370_shift:

; 797  : 
; 798  :     /* Check for PER 1 GRA event */
; 799  :     PER_GRA_CHECK( regs, PER_GRA_MASK2( r1, r1+1 ));

  002cc	33 c0		 xor	 eax, eax
  002ce	83 f8 01	 cmp	 eax, 1
  002d1	0f 84 9d 00 00
	00		 je	 $LN19@s370_shift
  002d7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002df	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  002e5	c1 e8 02	 shr	 eax, 2
  002e8	83 e0 01	 and	 eax, 1
  002eb	85 c0		 test	 eax, eax
  002ed	74 0a		 je	 SHORT $LN31@s370_shift
  002ef	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv205[rsp], 1
  002f7	eb 08		 jmp	 SHORT $LN32@s370_shift
$LN31@s370_shift:
  002f9	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv205[rsp], 0
$LN32@s370_shift:
  00301	83 7c 24 58 00	 cmp	 DWORD PTR tv205[rsp], 0
  00306	74 6c		 je	 SHORT $LN19@s370_shift
  00308	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00310	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00313	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00318	85 c0		 test	 eax, eax
  0031a	74 58		 je	 SHORT $LN19@s370_shift
  0031c	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  00320	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  00325	89 4c 24 64	 mov	 DWORD PTR tv288[rsp], ecx
  00329	0f b6 c8	 movzx	 ecx, al
  0032c	8b 44 24 64	 mov	 eax, DWORD PTR tv288[rsp]
  00330	d3 f8		 sar	 eax, cl
  00332	8b 4c 24 20	 mov	 ecx, DWORD PTR r1$[rsp]
  00336	ff c1		 inc	 ecx
  00338	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  0033d	d3 fa		 sar	 edx, cl
  0033f	8b ca		 mov	 ecx, edx
  00341	0b c1		 or	 eax, ecx
  00343	b9 08 00 00 00	 mov	 ecx, 8
  00348	48 6b c9 0a	 imul	 rcx, rcx, 10
  0034c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00354	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  0035b	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00361	23 c1		 and	 eax, ecx
  00363	85 c0		 test	 eax, eax
  00365	74 0d		 je	 SHORT $LN19@s370_shift
  00367	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0036f	e8 00 00 00 00	 call	 s370_per1_gra
$LN19@s370_shift:
  00374	33 c0		 xor	 eax, eax
  00376	85 c0		 test	 eax, eax
  00378	0f 85 4e ff ff
	ff		 jne	 $LN10@s370_shift
$LN1@s370_shift:

; 800  : }

  0037e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00382	c3		 ret	 0
s370_shift_left_double ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$1 = 0
r1$ = 4
r2$ = 8
inst$ = 32
regs$ = 40
s370_set_program_mask PROC

; 732  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 733  : int     r1, r2;                         /* Values of R fields        */
; 734  : 
; 735  :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 20	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
  00023	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00026	83 e0 0f	 and	 eax, 15
  00029	89 44 24 08	 mov	 DWORD PTR r2$[rsp], eax
  0002d	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  00030	c1 f8 04	 sar	 eax, 4
  00033	83 e0 0f	 and	 eax, 15
  00036	89 44 24 04	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_set_p:
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0003f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00043	48 83 c0 02	 add	 rax, 2
  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  0004c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00050	33 c0		 xor	 eax, eax
  00052	83 f8 02	 cmp	 eax, 2
  00055	74 0c		 je	 SHORT $LN5@s370_set_p
  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0005c	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN5@s370_set_p:
  00063	33 c0		 xor	 eax, eax
  00065	85 c0		 test	 eax, eax
  00067	75 d1		 jne	 SHORT $LN4@s370_set_p

; 736  : 
; 737  :     /* Set condition code from bits 2-3 of R1 register */
; 738  :     regs->psw.cc = ( regs->GR_L(r1) & 0x30000000 ) >> 28;

  00069	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0006e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00073	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007a	25 00 00 00 30	 and	 eax, 805306368		; 30000000H
  0007f	c1 e8 1c	 shr	 eax, 28
  00082	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00087	88 41 7c	 mov	 BYTE PTR [rcx+124], al

; 739  : 
; 740  :     /* Set program mask from bits 4-7 of R1 register */
; 741  :     regs->psw.progmask = ( regs->GR_L(r1) >> 24) & PSW_PROGMASK;

  0008a	48 63 44 24 04	 movsxd	 rax, DWORD PTR r1$[rsp]
  0008f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00094	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0009b	c1 e8 18	 shr	 eax, 24
  0009e	83 e0 0f	 and	 eax, 15
  000a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000a6	88 41 7d	 mov	 BYTE PTR [rcx+125], al

; 742  : }

  000a9	48 83 c4 18	 add	 rsp, 24
  000ad	c3		 ret	 0
s370_set_program_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 48
dbyte$ = 49
effective_addr2$ = 52
effective_addr1$ = 56
j$ = 60
b2$ = 64
b1$ = 68
temp$1 = 72
l1$ = 76
l2$ = 80
i$ = 84
tv178 = 88
tv189 = 92
inst$ = 112
regs$ = 120
s370_pack PROC

; 291  : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 292  : int     l1, l2;                         /* Lenght values             */
; 293  : int     b1, b2;                         /* Values of base registers  */
; 294  : VADR    effective_addr1,
; 295  :         effective_addr2;                /* Effective addresses       */
; 296  : int     i, j;                           /* Loop counters             */
; 297  : BYTE    sbyte;                          /* Source operand byte       */
; 298  : BYTE    dbyte;                          /* Destination operand byte  */
; 299  : 
; 300  :     SS(inst, regs, l1, l2, b1, effective_addr1, b2, effective_addr2);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 40	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 44	 mov	 DWORD PTR b1$[rsp], eax
  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	48 6b c0 01	 imul	 rax, rax, 1
  0006c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  00071	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00075	83 e0 0f	 and	 eax, 15
  00078	89 44 24 50	 mov	 DWORD PTR l2$[rsp], eax
  0007c	b8 01 00 00 00	 mov	 eax, 1
  00081	48 6b c0 01	 imul	 rax, rax, 1
  00085	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  0008a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008e	c1 f8 04	 sar	 eax, 4
  00091	83 e0 0f	 and	 eax, 15
  00094	89 44 24 4c	 mov	 DWORD PTR l1$[rsp], eax
  00098	83 7c 24 44 00	 cmp	 DWORD PTR b1$[rsp], 0
  0009d	74 2a		 je	 SHORT $LN8@s370_pack
  0009f	48 63 44 24 44	 movsxd	 rax, DWORD PTR b1$[rsp]
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b0	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000b4	03 c8		 add	 ecx, eax
  000b6	8b c1		 mov	 eax, ecx
  000b8	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000bc	8b 44 24 38	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000c0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c5	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s370_pack:
  000c9	83 7c 24 40 00	 cmp	 DWORD PTR b2$[rsp], 0
  000ce	74 2a		 je	 SHORT $LN9@s370_pack
  000d0	48 63 44 24 40	 movsxd	 rax, DWORD PTR b2$[rsp]
  000d5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000da	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000e1	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000e5	03 c8		 add	 ecx, eax
  000e7	8b c1		 mov	 eax, ecx
  000e9	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000ed	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000f1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000f6	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_pack:
$LN4@s370_pack:
  000fa	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ff	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00103	48 83 c0 06	 add	 rax, 6
  00107	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00110	33 c0		 xor	 eax, eax
  00112	83 f8 06	 cmp	 eax, 6
  00115	74 0c		 je	 SHORT $LN10@s370_pack
  00117	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011c	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s370_pack:
  00123	33 c0		 xor	 eax, eax
  00125	85 c0		 test	 eax, eax
  00127	75 d1		 jne	 SHORT $LN4@s370_pack

; 301  :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 302  :     TXFC_INSTR_CHECK( regs );
; 303  : 
; 304  :     /* If operand 1 crosses a page, make sure both pages are accessible */
; 305  :     if((effective_addr1 & PAGEFRAME_PAGEMASK) !=

  00129	8b 44 24 38	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0012d	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00132	8b 4c 24 4c	 mov	 ecx, DWORD PTR l1$[rsp]
  00136	8b 54 24 38	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0013a	03 d1		 add	 edx, ecx
  0013c	8b ca		 mov	 ecx, edx
  0013e	81 e1 00 f8 ff
	7f		 and	 ecx, 2147481600		; 7ffff800H
  00144	3b c1		 cmp	 eax, ecx
  00146	74 22		 je	 SHORT $LN11@s370_pack

; 306  :         ((effective_addr1 + l1) & PAGEFRAME_PAGEMASK))
; 307  :         ARCH_DEP(validate_operand) (effective_addr1, b1, l1, ACCTYPE_WRITE_SKP, regs);

  00148	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0014d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00152	41 b9 01 00 00
	00		 mov	 r9d, 1
  00158	44 8b 44 24 4c	 mov	 r8d, DWORD PTR l1$[rsp]
  0015d	8b 54 24 44	 mov	 edx, DWORD PTR b1$[rsp]
  00161	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00165	e8 00 00 00 00	 call	 s370_validate_operand
$LN11@s370_pack:

; 308  : 
; 309  :     /* If operand 2 crosses a page, make sure both pages are accessible */
; 310  :     if((effective_addr2 & PAGEFRAME_PAGEMASK) !=

  0016a	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0016e	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00173	8b 4c 24 50	 mov	 ecx, DWORD PTR l2$[rsp]
  00177	8b 54 24 34	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  0017b	03 d1		 add	 edx, ecx
  0017d	8b ca		 mov	 ecx, edx
  0017f	81 e1 00 f8 ff
	7f		 and	 ecx, 2147481600		; 7ffff800H
  00185	3b c1		 cmp	 eax, ecx
  00187	74 22		 je	 SHORT $LN12@s370_pack

; 311  :         ((effective_addr2 + l2) & PAGEFRAME_PAGEMASK))
; 312  :         ARCH_DEP(validate_operand) (effective_addr2, b2, l2, ACCTYPE_READ, regs);

  00189	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0018e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00193	41 b9 04 00 00
	00		 mov	 r9d, 4
  00199	44 8b 44 24 50	 mov	 r8d, DWORD PTR l2$[rsp]
  0019e	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  001a2	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001a6	e8 00 00 00 00	 call	 s370_validate_operand
$LN12@s370_pack:

; 313  : 
; 314  :     /* Exchange the digits in the rightmost byte */
; 315  :     effective_addr1 += l1;

  001ab	8b 44 24 4c	 mov	 eax, DWORD PTR l1$[rsp]
  001af	8b 4c 24 38	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  001b3	03 c8		 add	 ecx, eax
  001b5	8b c1		 mov	 eax, ecx
  001b7	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 316  :     effective_addr2 += l2;

  001bb	8b 44 24 50	 mov	 eax, DWORD PTR l2$[rsp]
  001bf	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001c3	03 c8		 add	 ecx, eax
  001c5	8b c1		 mov	 eax, ecx
  001c7	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 317  :     sbyte = ARCH_DEP(vfetchb) ( effective_addr2, b2, regs );

  001cb	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001d0	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  001d4	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001d8	e8 00 00 00 00	 call	 s370_vfetchb
  001dd	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 318  :     dbyte = ( (sbyte << 4) | (sbyte >> 4) ) & 0xff;

  001e1	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  001e6	c1 e0 04	 shl	 eax, 4
  001e9	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR sbyte$[rsp]
  001ee	c1 f9 04	 sar	 ecx, 4
  001f1	0b c1		 or	 eax, ecx
  001f3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001f8	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al

; 319  :     ARCH_DEP(vstoreb) ( dbyte, effective_addr1, b1, regs );

  001fc	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00201	44 8b 44 24 44	 mov	 r8d, DWORD PTR b1$[rsp]
  00206	8b 54 24 38	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  0020a	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  0020f	e8 00 00 00 00	 call	 s370_vstoreb

; 320  : 
; 321  :     /* Process remaining bytes from right to left */
; 322  :     for (i = l1, j = l2; i > 0; i--)

  00214	8b 44 24 4c	 mov	 eax, DWORD PTR l1$[rsp]
  00218	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
  0021c	8b 44 24 50	 mov	 eax, DWORD PTR l2$[rsp]
  00220	89 44 24 3c	 mov	 DWORD PTR j$[rsp], eax
  00224	eb 0a		 jmp	 SHORT $LN7@s370_pack
$LN5@s370_pack:
  00226	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  0022a	ff c8		 dec	 eax
  0022c	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN7@s370_pack:
  00230	83 7c 24 54 00	 cmp	 DWORD PTR i$[rsp], 0
  00235	0f 8e f1 00 00
	00		 jle	 $LN6@s370_pack

; 323  :     {
; 324  :         /* Fetch source bytes from second operand */
; 325  :         if (j-- > 0)

  0023b	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  0023f	89 44 24 58	 mov	 DWORD PTR tv178[rsp], eax
  00243	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  00247	ff c8		 dec	 eax
  00249	89 44 24 3c	 mov	 DWORD PTR j$[rsp], eax
  0024d	83 7c 24 58 00	 cmp	 DWORD PTR tv178[rsp], 0
  00252	0f 8e 8e 00 00
	00		 jle	 $LN13@s370_pack

; 326  :         {
; 327  :             sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  00258	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0025c	ff c8		 dec	 eax
  0025e	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00262	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  00267	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  0026b	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0026f	e8 00 00 00 00	 call	 s370_vfetchb
  00274	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 328  :             dbyte = sbyte & 0x0F;

  00278	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  0027d	83 e0 0f	 and	 eax, 15
  00280	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al

; 329  : 
; 330  :             if (j-- > 0)

  00284	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  00288	89 44 24 5c	 mov	 DWORD PTR tv189[rsp], eax
  0028c	8b 44 24 3c	 mov	 eax, DWORD PTR j$[rsp]
  00290	ff c8		 dec	 eax
  00292	89 44 24 3c	 mov	 DWORD PTR j$[rsp], eax
  00296	83 7c 24 5c 00	 cmp	 DWORD PTR tv189[rsp], 0
  0029b	7e 47		 jle	 SHORT $LN15@s370_pack

; 331  :             {
; 332  :                 effective_addr2 &= ADDRESS_MAXWRAP(regs);

  0029d	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  002a1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002a6	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 333  :                 sbyte = ARCH_DEP(vfetchb) ( --effective_addr2, b2, regs );

  002aa	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  002ae	ff c8		 dec	 eax
  002b0	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax
  002b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  002b9	8b 54 24 40	 mov	 edx, DWORD PTR b2$[rsp]
  002bd	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  002c1	e8 00 00 00 00	 call	 s370_vfetchb
  002c6	88 44 24 30	 mov	 BYTE PTR sbyte$[rsp], al

; 334  :                 dbyte |= (sbyte << 4) & 0xff;

  002ca	0f b6 44 24 30	 movzx	 eax, BYTE PTR sbyte$[rsp]
  002cf	c1 e0 04	 shl	 eax, 4
  002d2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002d7	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  002dc	0b c8		 or	 ecx, eax
  002de	8b c1		 mov	 eax, ecx
  002e0	88 44 24 31	 mov	 BYTE PTR dbyte$[rsp], al
$LN15@s370_pack:

; 335  :             }
; 336  :         }

  002e4	eb 05		 jmp	 SHORT $LN14@s370_pack
$LN13@s370_pack:

; 337  :         else
; 338  :         {
; 339  :             dbyte = 0;

  002e6	c6 44 24 31 00	 mov	 BYTE PTR dbyte$[rsp], 0
$LN14@s370_pack:

; 340  :         }
; 341  : 
; 342  :         /* Store packed digits at first operand address */
; 343  :         ARCH_DEP(vstoreb) ( dbyte, --effective_addr1, b1, regs );

  002eb	8b 44 24 38	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  002ef	ff c8		 dec	 eax
  002f1	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax
  002f5	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  002fa	44 8b 44 24 44	 mov	 r8d, DWORD PTR b1$[rsp]
  002ff	8b 54 24 38	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00303	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR dbyte$[rsp]
  00308	e8 00 00 00 00	 call	 s370_vstoreb

; 344  : 
; 345  :         /* Wraparound according to addressing mode */
; 346  :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  0030d	8b 44 24 38	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00311	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00316	89 44 24 38	 mov	 DWORD PTR effective_addr1$[rsp], eax

; 347  :         effective_addr2 &= ADDRESS_MAXWRAP(regs);

  0031a	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0031e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00323	89 44 24 34	 mov	 DWORD PTR effective_addr2$[rsp], eax

; 348  : 
; 349  :     } /* end for(i) */

  00327	e9 fa fe ff ff	 jmp	 $LN5@s370_pack
$LN6@s370_pack:

; 350  : 
; 351  : }

  0032c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00330	c3		 ret	 0
s370_pack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
r1$ = 32
i$1 = 36
tv92 = 40
tv94 = 44
tv139 = 48
r2$ = 52
tv182 = 56
inst$ = 80
regs$ = 88
s370_or_register PROC

; 55   : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 56   : int     r1, r2;                         /* Values of R fields        */
; 57   : 
; 58   :     RR(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 01	 imul	 rax, rax, 1
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 34	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 20	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_or_re:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 02	 add	 rax, 2
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 02	 cmp	 eax, 2
  00058	74 0c		 je	 SHORT $LN8@s370_or_re
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN8@s370_or_re:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s370_or_re

; 59   : 
; 60   :     /* OR second operand with first and set condition code */
; 61   :     regs->psw.cc = ( regs->GR_L(r1) |= regs->GR_L(r2) ) ? 1 : 0;

  0006c	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  00071	48 63 4c 24 34	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00076	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  0007b	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00080	41 8b 8c c8 80
	02 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+640]
  00088	8b 84 c2 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+640]
  0008f	0b c1		 or	 eax, ecx
  00091	89 44 24 28	 mov	 DWORD PTR tv92[rsp], eax
  00095	48 63 44 24 20	 movsxd	 rax, DWORD PTR r1$[rsp]
  0009a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0009f	8b 54 24 28	 mov	 edx, DWORD PTR tv92[rsp]
  000a3	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
  000aa	83 7c 24 28 00	 cmp	 DWORD PTR tv92[rsp], 0
  000af	74 0a		 je	 SHORT $LN11@s370_or_re
  000b1	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  000b9	eb 08		 jmp	 SHORT $LN12@s370_or_re
$LN11@s370_or_re:
  000bb	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN12@s370_or_re:
  000c3	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000c8	0f b6 4c 24 2c	 movzx	 ecx, BYTE PTR tv94[rsp]
  000cd	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN7@s370_or_re:

; 62   : 
; 63   :     /* Check for PER 1 GRA event */
; 64   :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  000d0	33 c0		 xor	 eax, eax
  000d2	83 f8 01	 cmp	 eax, 1
  000d5	0f 84 80 00 00
	00		 je	 $LN9@s370_or_re
  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000e0	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  000e6	c1 e8 02	 shr	 eax, 2
  000e9	83 e0 01	 and	 eax, 1
  000ec	85 c0		 test	 eax, eax
  000ee	74 0a		 je	 SHORT $LN15@s370_or_re
  000f0	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv139[rsp], 1
  000f8	eb 08		 jmp	 SHORT $LN16@s370_or_re
$LN15@s370_or_re:
  000fa	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
$LN16@s370_or_re:
  00102	83 7c 24 30 00	 cmp	 DWORD PTR tv139[rsp], 0
  00107	74 52		 je	 SHORT $LN9@s370_or_re
  00109	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00111	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  00116	85 c0		 test	 eax, eax
  00118	74 41		 je	 SHORT $LN9@s370_or_re
  0011a	8b 44 24 20	 mov	 eax, DWORD PTR r1$[rsp]
  0011e	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  00123	89 4c 24 38	 mov	 DWORD PTR tv182[rsp], ecx
  00127	0f b6 c8	 movzx	 ecx, al
  0012a	8b 44 24 38	 mov	 eax, DWORD PTR tv182[rsp]
  0012e	d3 f8		 sar	 eax, cl
  00130	b9 08 00 00 00	 mov	 ecx, 8
  00135	48 6b c9 0a	 imul	 rcx, rcx, 10
  00139	48 8b 54 24 58	 mov	 rdx, QWORD PTR regs$[rsp]
  0013e	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  00145	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0014b	23 c1		 and	 eax, ecx
  0014d	85 c0		 test	 eax, eax
  0014f	74 0a		 je	 SHORT $LN9@s370_or_re
  00151	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00156	e8 00 00 00 00	 call	 s370_per1_gra
$LN9@s370_or_re:
  0015b	33 c0		 xor	 eax, eax
  0015d	85 c0		 test	 eax, eax
  0015f	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_or_re

; 65   : }

  00165	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00169	c3		 ret	 0
s370_or_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i2$ = 48
effective_addr1$ = 52
temp$1 = 56
b1$ = 60
tv92 = 64
tv134 = 68
tv155 = 72
tv161 = 76
tv171 = 80
tv177 = 88
dest$ = 96
inst$ = 128
regs$ = 136
s370_or_immediate PROC

; 97   : {

$LN41:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 98   : BYTE    i2;                             /* Immediate operand byte    */
; 99   : int     b1;                             /* Base of effective addr    */
; 100  : VADR    effective_addr1;                /* Effective address         */
; 101  : BYTE   *dest;                           /* Pointer to target byte    */
; 102  : 
; 103  :     SI(inst, regs, i2, b1, effective_addr1);

  0000e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00016	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 _byteswap_ulong
  00022	89 44 24 38	 mov	 DWORD PTR temp$1[rsp], eax
  00026	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  0002a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002f	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00033	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00037	c1 e8 0c	 shr	 eax, 12
  0003a	83 e0 0f	 and	 eax, 15
  0003d	89 44 24 3c	 mov	 DWORD PTR b1$[rsp], eax
  00041	8b 44 24 38	 mov	 eax, DWORD PTR temp$1[rsp]
  00045	c1 e8 10	 shr	 eax, 16
  00048	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0004d	88 44 24 30	 mov	 BYTE PTR i2$[rsp], al
  00051	83 7c 24 3c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00056	74 2d		 je	 SHORT $LN11@s370_or_im
  00058	48 63 44 24 3c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0005d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00065	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0006c	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00070	03 c8		 add	 ecx, eax
  00072	8b c1		 mov	 eax, ecx
  00074	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00078	8b 44 24 34	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0007c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00081	89 44 24 34	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_or_im:
$LN4@s370_or_im:
  00085	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0008d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00091	48 83 c0 04	 add	 rax, 4
  00095	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0009d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000a1	33 c0		 xor	 eax, eax
  000a3	83 f8 04	 cmp	 eax, 4
  000a6	74 0f		 je	 SHORT $LN12@s370_or_im
  000a8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b0	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN12@s370_or_im:
  000b7	33 c0		 xor	 eax, eax
  000b9	85 c0		 test	 eax, eax
  000bb	75 c8		 jne	 SHORT $LN4@s370_or_im
$LN7@s370_or_im:

; 104  :     PER_ZEROADDR_XCHECK( regs, b1 );
; 105  : 
; 106  :     ITIMER_SYNC(effective_addr1, 0, regs);

  000bd	83 7c 24 34 54	 cmp	 DWORD PTR effective_addr1$[rsp], 84 ; 00000054H
  000c2	73 0a		 jae	 SHORT $LN18@s370_or_im
  000c4	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000cc	eb 08		 jmp	 SHORT $LN19@s370_or_im
$LN18@s370_or_im:
  000ce	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN19@s370_or_im:
  000d6	83 7c 24 40 00	 cmp	 DWORD PTR tv92[rsp], 0
  000db	74 11		 je	 SHORT $LN20@s370_or_im
  000dd	83 7c 24 34 50	 cmp	 DWORD PTR effective_addr1$[rsp], 80 ; 00000050H
  000e2	72 0a		 jb	 SHORT $LN20@s370_or_im
  000e4	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
  000ec	eb 08		 jmp	 SHORT $LN26@s370_or_im
$LN20@s370_or_im:
  000ee	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN26@s370_or_im:
  000f6	83 7c 24 44 00	 cmp	 DWORD PTR tv134[rsp], 0
  000fb	74 0d		 je	 SHORT $LN13@s370_or_im
  000fd	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00105	e8 00 00 00 00	 call	 s370_store_int_timer
$LN13@s370_or_im:
  0010a	33 c0		 xor	 eax, eax
  0010c	85 c0		 test	 eax, eax
  0010e	75 ad		 jne	 SHORT $LN7@s370_or_im

; 107  :     /* Get byte mainstor address */
; 108  :     dest = MADDR (effective_addr1, b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00110	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00118	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0011c	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00120	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00128	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00130	44 8b 44 24 3c	 mov	 r8d, DWORD PTR b1$[rsp]
  00135	ba 01 00 00 00	 mov	 edx, 1
  0013a	8b 4c 24 34	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0013e	e8 00 00 00 00	 call	 s370_maddr_l
  00143	48 89 44 24 60	 mov	 QWORD PTR dest$[rsp], rax

; 109  : 
; 110  :     /* MAINLOCK may be required if cmpxchg assists unavailable */
; 111  :     OBTAIN_MAINLOCK( regs );
; 112  :     {
; 113  :         /* OR byte with immediate operand, setting condition code */
; 114  :         regs->psw.cc = (H_ATOMIC_OP( dest, i2, or, Or, | ) != 0);

  00148	48 8b 44 24 60	 mov	 rax, QWORD PTR dest$[rsp]
  0014d	48 89 44 24 58	 mov	 QWORD PTR tv177[rsp], rax
  00152	48 8b 44 24 58	 mov	 rax, QWORD PTR tv177[rsp]
  00157	0f 0d 08	 prefetchw BYTE PTR [rax]
  0015a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv177[rsp]
  0015f	0f b6 01	 movzx	 eax, BYTE PTR [rcx]
$LL40@s370_or_im:
  00162	0f b6 d0	 movzx	 edx, al
  00165	0a 54 24 30	 or	 dl, BYTE PTR i2$[rsp]
  00169	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv177[rsp]
  0016e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv177[rsp]
  00173	f0 0f b0 11	 lock cmpxchg BYTE PTR [rcx], dl
  00177	75 e9		 jne	 SHORT $LL40@s370_or_im
  00179	0f b6 c0	 movzx	 eax, al
  0017c	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR i2$[rsp]
  00181	0b c1		 or	 eax, ecx
  00183	8b c0		 mov	 eax, eax
  00185	48 85 c0	 test	 rax, rax
  00188	74 0a		 je	 SHORT $LN27@s370_or_im
  0018a	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  00192	eb 08		 jmp	 SHORT $LN28@s370_or_im
$LN27@s370_or_im:
  00194	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN28@s370_or_im:
  0019c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001a4	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR tv155[rsp]
  001a9	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN10@s370_or_im:

; 115  :     }
; 116  :     RELEASE_MAINLOCK( regs );
; 117  : 
; 118  :     ITIMER_UPDATE(effective_addr1, 0, regs);

  001ac	83 7c 24 34 54	 cmp	 DWORD PTR effective_addr1$[rsp], 84 ; 00000054H
  001b1	73 0a		 jae	 SHORT $LN31@s370_or_im
  001b3	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  001bb	eb 08		 jmp	 SHORT $LN32@s370_or_im
$LN31@s370_or_im:
  001bd	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN32@s370_or_im:
  001c5	83 7c 24 4c 00	 cmp	 DWORD PTR tv161[rsp], 0
  001ca	74 11		 je	 SHORT $LN33@s370_or_im
  001cc	83 7c 24 34 50	 cmp	 DWORD PTR effective_addr1$[rsp], 80 ; 00000050H
  001d1	72 0a		 jb	 SHORT $LN33@s370_or_im
  001d3	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv171[rsp], 1
  001db	eb 08		 jmp	 SHORT $LN39@s370_or_im
$LN33@s370_or_im:
  001dd	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv171[rsp], 0
$LN39@s370_or_im:
  001e5	83 7c 24 50 00	 cmp	 DWORD PTR tv171[rsp], 0
  001ea	74 0d		 je	 SHORT $LN14@s370_or_im
  001ec	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f4	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN14@s370_or_im:
  001f9	33 c0		 xor	 eax, eax
  001fb	85 c0		 test	 eax, eax
  001fd	75 ad		 jne	 SHORT $LN10@s370_or_im

; 119  : }

  001ff	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00203	c3		 ret	 0
s370_or_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
i$ = 48
len2$ = 52
dest1$ = 56
len$ = 64
effective_addr1$ = 68
effective_addr2$ = 72
cc$ = 76
source1$ = 80
len3$ = 88
dest2$ = 96
source2$ = 104
b2$ = 112
b1$ = 116
temp$1 = 120
tv174 = 124
tv179 = 128
tv204 = 132
tv210 = 136
tv222 = 140
tv255 = 144
tv265 = 148
tv342 = 152
tv486 = 156
tv498 = 160
tv137 = 164
tv149 = 168
tv157 = 172
tv169 = 176
tv366 = 180
tv393 = 184
tv405 = 188
tv417 = 192
tv277 = 196
tv441 = 200
tv452 = 204
tv464 = 208
tv476 = 212
tv429 = 216
tv303 = 220
tv315 = 224
tv354 = 228
sk1$ = 232
sk2$ = 240
inst$ = 272
regs$ = 280
s370_or_character PROC

; 126  : {

$LN152:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 127  : int     len, len2, len3;                /* Lengths to copy           */
; 128  : int     b1, b2;                         /* Base register numbers     */
; 129  : VADR    effective_addr1;                /* Virtual address           */
; 130  : VADR    effective_addr2;                /* Virtual address           */
; 131  : BYTE   *dest1, *dest2;                  /* Destination addresses     */
; 132  : BYTE   *source1, *source2;              /* Source addresses          */
; 133  : BYTE   *sk1, *sk2;                      /* Storage key addresses     */
; 134  : int     i;                              /* Loop counter              */
; 135  : int     cc = 0;                         /* Condition code            */

  00011	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR cc$[rsp], 0

; 136  : 
; 137  :     SS_L( inst, regs, len, b1, effective_addr1, b2, effective_addr2 );

  00019	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00021	48 83 c0 02	 add	 rax, 2
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 fetch_fw_noswap
  0002d	8b c8		 mov	 ecx, eax
  0002f	e8 00 00 00 00	 call	 _byteswap_ulong
  00034	89 44 24 78	 mov	 DWORD PTR temp$1[rsp], eax
  00038	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  0003c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00041	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00045	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 0c	 shr	 eax, 12
  0004c	83 e0 0f	 and	 eax, 15
  0004f	89 44 24 70	 mov	 DWORD PTR b2$[rsp], eax
  00053	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00057	c1 e8 10	 shr	 eax, 16
  0005a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005f	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00063	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00067	c1 e8 1c	 shr	 eax, 28
  0006a	83 e0 0f	 and	 eax, 15
  0006d	89 44 24 74	 mov	 DWORD PTR b1$[rsp], eax
  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	48 6b c0 01	 imul	 rax, rax, 1
  0007a	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00082	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00086	89 44 24 40	 mov	 DWORD PTR len$[rsp], eax
  0008a	83 7c 24 74 00	 cmp	 DWORD PTR b1$[rsp], 0
  0008f	74 2d		 je	 SHORT $LN56@s370_or_ch
  00091	48 63 44 24 74	 movsxd	 rax, DWORD PTR b1$[rsp]
  00096	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0009e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000a5	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000a9	03 c8		 add	 ecx, eax
  000ab	8b c1		 mov	 eax, ecx
  000ad	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000b1	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000b5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ba	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN56@s370_or_ch:
  000be	83 7c 24 70 00	 cmp	 DWORD PTR b2$[rsp], 0
  000c3	74 2d		 je	 SHORT $LN57@s370_or_ch
  000c5	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  000ca	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d2	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000d9	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000dd	03 c8		 add	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000e5	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000e9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ee	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN57@s370_or_ch:
$LN4@s370_or_ch:
  000f2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fa	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000fe	48 83 c0 06	 add	 rax, 6
  00102	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0010a	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0010e	33 c0		 xor	 eax, eax
  00110	83 f8 06	 cmp	 eax, 6
  00113	74 0f		 je	 SHORT $LN58@s370_or_ch
  00115	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011d	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN58@s370_or_ch:
  00124	33 c0		 xor	 eax, eax
  00126	85 c0		 test	 eax, eax
  00128	75 c8		 jne	 SHORT $LN4@s370_or_ch
$LN7@s370_or_ch:

; 138  :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 139  : 
; 140  :     TXFC_INSTR_CHECK( regs );
; 141  : 
; 142  :     ITIMER_SYNC( effective_addr1, len, regs );

  0012a	83 7c 24 44 54	 cmp	 DWORD PTR effective_addr1$[rsp], 84 ; 00000054H
  0012f	73 0d		 jae	 SHORT $LN90@s370_or_ch
  00131	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv137[rsp], 1
  0013c	eb 0b		 jmp	 SHORT $LN91@s370_or_ch
$LN90@s370_or_ch:
  0013e	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv137[rsp], 0
$LN91@s370_or_ch:
  00149	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR tv137[rsp], 0
  00151	74 1e		 je	 SHORT $LN92@s370_or_ch
  00153	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00157	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0015b	03 c8		 add	 ecx, eax
  0015d	8b c1		 mov	 eax, ecx
  0015f	83 f8 50	 cmp	 eax, 80			; 00000050H
  00162	72 0d		 jb	 SHORT $LN92@s370_or_ch
  00164	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv149[rsp], 1
  0016f	eb 0b		 jmp	 SHORT $LN98@s370_or_ch
$LN92@s370_or_ch:
  00171	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv149[rsp], 0
$LN98@s370_or_ch:
  0017c	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv149[rsp], 0
  00184	74 0d		 je	 SHORT $LN59@s370_or_ch
  00186	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0018e	e8 00 00 00 00	 call	 s370_store_int_timer
$LN59@s370_or_ch:
  00193	33 c0		 xor	 eax, eax
  00195	85 c0		 test	 eax, eax
  00197	75 91		 jne	 SHORT $LN7@s370_or_ch
$LN10@s370_or_ch:

; 143  :     ITIMER_SYNC( effective_addr2, len, regs );

  00199	83 7c 24 48 54	 cmp	 DWORD PTR effective_addr2$[rsp], 84 ; 00000054H
  0019e	73 0d		 jae	 SHORT $LN101@s370_or_ch
  001a0	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv157[rsp], 1
  001ab	eb 0b		 jmp	 SHORT $LN102@s370_or_ch
$LN101@s370_or_ch:
  001ad	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv157[rsp], 0
$LN102@s370_or_ch:
  001b8	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR tv157[rsp], 0
  001c0	74 1e		 je	 SHORT $LN103@s370_or_ch
  001c2	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  001c6	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  001ca	03 c8		 add	 ecx, eax
  001cc	8b c1		 mov	 eax, ecx
  001ce	83 f8 50	 cmp	 eax, 80			; 00000050H
  001d1	72 0d		 jb	 SHORT $LN103@s370_or_ch
  001d3	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv169[rsp], 1
  001de	eb 0b		 jmp	 SHORT $LN109@s370_or_ch
$LN103@s370_or_ch:
  001e0	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv169[rsp], 0
$LN109@s370_or_ch:
  001eb	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR tv169[rsp], 0
  001f3	74 0d		 je	 SHORT $LN60@s370_or_ch
  001f5	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001fd	e8 00 00 00 00	 call	 s370_store_int_timer
$LN60@s370_or_ch:
  00202	33 c0		 xor	 eax, eax
  00204	85 c0		 test	 eax, eax
  00206	75 91		 jne	 SHORT $LN10@s370_or_ch

; 144  : 
; 145  :     /* Quick out for 1 byte (no boundary crossed) */
; 146  :     if (unlikely( !len ))

  00208	83 7c 24 40 00	 cmp	 DWORD PTR len$[rsp], 0
  0020d	75 0a		 jne	 SHORT $LN110@s370_or_ch
  0020f	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv174[rsp], 1
  00217	eb 08		 jmp	 SHORT $LN111@s370_or_ch
$LN110@s370_or_ch:
  00219	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv174[rsp], 0
$LN111@s370_or_ch:
  00221	83 7c 24 7c 00	 cmp	 DWORD PTR tv174[rsp], 0
  00226	74 0d		 je	 SHORT $LN114@s370_or_ch
  00228	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv179[rsp], 1
  00233	eb 0b		 jmp	 SHORT $LN115@s370_or_ch
$LN114@s370_or_ch:
  00235	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv179[rsp], 0
$LN115@s370_or_ch:
  00240	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv179[rsp], 0
  00248	0f 84 36 01 00
	00		 je	 $LN61@s370_or_ch

; 147  :     {
; 148  :         source1 = MADDR( effective_addr2,  b2, regs, ACCTYPE_READ,  regs->psw.pkey );

  0024e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00256	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0025a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0025e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00266	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0026e	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  00273	ba 01 00 00 00	 mov	 edx, 1
  00278	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0027c	e8 00 00 00 00	 call	 s370_maddr_l
  00281	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax

; 149  :         dest1   = MADDR( effective_addr1,  b1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00286	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0028e	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00292	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00296	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0029e	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002a6	44 8b 44 24 74	 mov	 r8d, DWORD PTR b1$[rsp]
  002ab	ba 01 00 00 00	 mov	 edx, 1
  002b0	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  002b4	e8 00 00 00 00	 call	 s370_maddr_l
  002b9	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax

; 150  :         *dest1 |= *source1;

  002be	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  002c3	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002c6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  002cb	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  002ce	0b c8		 or	 ecx, eax
  002d0	8b c1		 mov	 eax, ecx
  002d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  002d7	88 01		 mov	 BYTE PTR [rcx], al

; 151  :         regs->psw.cc = (*dest1 != 0);

  002d9	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  002de	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002e1	85 c0		 test	 eax, eax
  002e3	74 0d		 je	 SHORT $LN116@s370_or_ch
  002e5	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv204[rsp], 1
  002f0	eb 0b		 jmp	 SHORT $LN117@s370_or_ch
$LN116@s370_or_ch:
  002f2	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv204[rsp], 0
$LN117@s370_or_ch:
  002fd	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00305	0f b6 8c 24 84
	00 00 00	 movzx	 ecx, BYTE PTR tv204[rsp]
  0030d	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN13@s370_or_ch:

; 152  :         ITIMER_UPDATE( effective_addr1, len, regs );

  00310	83 7c 24 44 54	 cmp	 DWORD PTR effective_addr1$[rsp], 84 ; 00000054H
  00315	73 0d		 jae	 SHORT $LN120@s370_or_ch
  00317	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv210[rsp], 1
  00322	eb 0b		 jmp	 SHORT $LN121@s370_or_ch
$LN120@s370_or_ch:
  00324	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
$LN121@s370_or_ch:
  0032f	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv210[rsp], 0
  00337	74 1e		 je	 SHORT $LN122@s370_or_ch
  00339	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0033d	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00341	03 c8		 add	 ecx, eax
  00343	8b c1		 mov	 eax, ecx
  00345	83 f8 50	 cmp	 eax, 80			; 00000050H
  00348	72 0d		 jb	 SHORT $LN122@s370_or_ch
  0034a	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv222[rsp], 1
  00355	eb 0b		 jmp	 SHORT $LN128@s370_or_ch
$LN122@s370_or_ch:
  00357	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv222[rsp], 0
$LN128@s370_or_ch:
  00362	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR tv222[rsp], 0
  0036a	74 0d		 je	 SHORT $LN62@s370_or_ch
  0036c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00374	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN62@s370_or_ch:
  00379	33 c0		 xor	 eax, eax
  0037b	85 c0		 test	 eax, eax
  0037d	75 91		 jne	 SHORT $LN13@s370_or_ch

; 153  :         return;

  0037f	e9 db 09 00 00	 jmp	 $LN1@s370_or_ch
$LN61@s370_or_ch:

; 154  :     }
; 155  : 
; 156  :     /* There are several scenarios (in optimal order):
; 157  :      * (1) dest boundary and source boundary not crossed
; 158  :      * (2) dest boundary not crossed and source boundary crossed
; 159  :      * (3) dest boundary crossed and source boundary not crossed
; 160  :      * (4) dest boundary and source boundary are crossed
; 161  :      *     (a) dest and source boundary cross at the same time
; 162  :      *     (b) dest boundary crossed first
; 163  :      *     (c) source boundary crossed first
; 164  :      */
; 165  : 
; 166  :     /* Translate addresses of leftmost operand bytes */
; 167  :     dest1 = MADDRL( effective_addr1, len+1, b1, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00384	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00388	ff c0		 inc	 eax
  0038a	48 98		 cdqe
  0038c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00394	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00398	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0039c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  003a4	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003ac	44 8b 44 24 74	 mov	 r8d, DWORD PTR b1$[rsp]
  003b1	48 8b d0	 mov	 rdx, rax
  003b4	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  003b8	e8 00 00 00 00	 call	 s370_maddr_l
  003bd	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax

; 168  :     sk1 = regs->dat.storkey;

  003c2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003ca	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  003d1	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR sk1$[rsp], rax

; 169  :     source1 = MADDRL( effective_addr2, len+1, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  003d9	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  003dd	ff c0		 inc	 eax
  003df	48 98		 cdqe
  003e1	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003e9	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  003ed	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  003f1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003f9	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00401	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  00406	48 8b d0	 mov	 rdx, rax
  00409	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0040d	e8 00 00 00 00	 call	 s370_maddr_l
  00412	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax

; 170  : 
; 171  :     if (NOCROSSPAGE( effective_addr1, len ))

  00417	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0041b	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00420	b9 ff 07 00 00	 mov	 ecx, 2047		; 000007ffH
  00425	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  00429	3b c1		 cmp	 eax, ecx
  0042b	7f 0d		 jg	 SHORT $LN131@s370_or_ch
  0042d	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv255[rsp], 1
  00438	eb 0b		 jmp	 SHORT $LN132@s370_or_ch
$LN131@s370_or_ch:
  0043a	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv255[rsp], 0
$LN132@s370_or_ch:
  00445	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR tv255[rsp], 0
  0044d	0f 84 29 02 00
	00		 je	 $LN63@s370_or_ch

; 172  :     {
; 173  :         if (NOCROSSPAGE( effective_addr2, len ))

  00453	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00457	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0045c	b9 ff 07 00 00	 mov	 ecx, 2047		; 000007ffH
  00461	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  00465	3b c1		 cmp	 eax, ecx
  00467	7f 0d		 jg	 SHORT $LN135@s370_or_ch
  00469	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv265[rsp], 1
  00474	eb 0b		 jmp	 SHORT $LN136@s370_or_ch
$LN135@s370_or_ch:
  00476	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN136@s370_or_ch:
  00481	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR tv265[rsp], 0
  00489	74 7b		 je	 SHORT $LN65@s370_or_ch

; 174  :         {
; 175  :             /* (1) - No boundaries are crossed */
; 176  :             for (i=0; i <= len; i++)

  0048b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00493	eb 0a		 jmp	 SHORT $LN16@s370_or_ch
$LN14@s370_or_ch:
  00495	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00499	ff c0		 inc	 eax
  0049b	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN16@s370_or_ch:
  0049f	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  004a3	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  004a7	7f 58		 jg	 SHORT $LN15@s370_or_ch

; 177  :                 if ((*dest1++ |= *source1++))

  004a9	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  004ae	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  004b1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  004b6	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  004b9	0b c8		 or	 ecx, eax
  004bb	8b c1		 mov	 eax, ecx
  004bd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  004c2	88 01		 mov	 BYTE PTR [rcx], al
  004c4	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  004c9	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  004cc	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv277[rsp], eax
  004d3	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  004d8	48 ff c0	 inc	 rax
  004db	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  004e0	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  004e5	48 ff c0	 inc	 rax
  004e8	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  004ed	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR tv277[rsp], 0
  004f5	74 08		 je	 SHORT $LN67@s370_or_ch

; 178  :                     cc = 1;

  004f7	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN67@s370_or_ch:
  004ff	eb 94		 jmp	 SHORT $LN14@s370_or_ch
$LN15@s370_or_ch:

; 179  :         }

  00501	e9 62 01 00 00	 jmp	 $LN66@s370_or_ch
$LN65@s370_or_ch:

; 180  :         else
; 181  :         {
; 182  :              /* (2) - Second operand crosses a boundary */
; 183  :              len2 = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  00506	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0050a	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0050f	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00514	2b c8		 sub	 ecx, eax
  00516	8b c1		 mov	 eax, ecx
  00518	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 184  :              source2 = MADDRL((effective_addr2 + len2) & ADDRESS_MAXWRAP( regs ),

  0051c	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00520	ff c0		 inc	 eax
  00522	2b 44 24 34	 sub	 eax, DWORD PTR len2$[rsp]
  00526	48 98		 cdqe
  00528	8b 4c 24 34	 mov	 ecx, DWORD PTR len2$[rsp]
  0052c	8b 54 24 48	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00530	03 d1		 add	 edx, ecx
  00532	8b ca		 mov	 ecx, edx
  00534	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0053a	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00542	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00546	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0054a	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00552	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0055a	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  0055f	48 8b d0	 mov	 rdx, rax
  00562	e8 00 00 00 00	 call	 s370_maddr_l
  00567	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax

; 185  :               len + 1 - len2,  b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 186  :              for (i=0; i < len2; i++)

  0056c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00574	eb 0a		 jmp	 SHORT $LN19@s370_or_ch
$LN17@s370_or_ch:
  00576	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0057a	ff c0		 inc	 eax
  0057c	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN19@s370_or_ch:
  00580	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00584	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00588	7d 58		 jge	 SHORT $LN18@s370_or_ch

; 187  :                  if ( (*dest1++ |= *source1++) )

  0058a	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  0058f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00592	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00597	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0059a	0b c8		 or	 ecx, eax
  0059c	8b c1		 mov	 eax, ecx
  0059e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  005a3	88 01		 mov	 BYTE PTR [rcx], al
  005a5	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  005aa	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  005ad	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv303[rsp], eax
  005b4	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  005b9	48 ff c0	 inc	 rax
  005bc	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  005c1	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  005c6	48 ff c0	 inc	 rax
  005c9	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  005ce	83 bc 24 dc 00
	00 00 00	 cmp	 DWORD PTR tv303[rsp], 0
  005d6	74 08		 je	 SHORT $LN68@s370_or_ch

; 188  :                      cc = 1;

  005d8	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN68@s370_or_ch:
  005e0	eb 94		 jmp	 SHORT $LN17@s370_or_ch
$LN18@s370_or_ch:

; 189  : 
; 190  :              len2 = len - len2;

  005e2	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  005e6	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  005ea	2b c8		 sub	 ecx, eax
  005ec	8b c1		 mov	 eax, ecx
  005ee	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 191  : 
; 192  :              for (i=0; i <= len2; i++)

  005f2	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  005fa	eb 0a		 jmp	 SHORT $LN22@s370_or_ch
$LN20@s370_or_ch:
  005fc	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00600	ff c0		 inc	 eax
  00602	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN22@s370_or_ch:
  00606	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0060a	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0060e	7f 58		 jg	 SHORT $LN21@s370_or_ch

; 193  :                  if ( (*dest1++ |= *source2++) )

  00610	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00615	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00618	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0061d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00620	0b c8		 or	 ecx, eax
  00622	8b c1		 mov	 eax, ecx
  00624	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00629	88 01		 mov	 BYTE PTR [rcx], al
  0062b	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00630	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00633	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv315[rsp], eax
  0063a	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  0063f	48 ff c0	 inc	 rax
  00642	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  00647	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  0064c	48 ff c0	 inc	 rax
  0064f	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00654	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR tv315[rsp], 0
  0065c	74 08		 je	 SHORT $LN69@s370_or_ch

; 194  :                      cc = 1;

  0065e	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN69@s370_or_ch:
  00666	eb 94		 jmp	 SHORT $LN20@s370_or_ch
$LN21@s370_or_ch:
$LN66@s370_or_ch:

; 195  :         }
; 196  :         ARCH_DEP( or_storage_key_by_ptr )( sk1, (STORKEY_REF | STORKEY_CHANGE) );

  00668	b2 06		 mov	 dl, 6
  0066a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR sk1$[rsp]
  00672	e8 00 00 00 00	 call	 s370_or_storage_key_by_ptr

; 197  :     }

  00677	e9 64 06 00 00	 jmp	 $LN64@s370_or_ch
$LN63@s370_or_ch:

; 198  :     else
; 199  :     {
; 200  :         /* First operand crosses a boundary */
; 201  :         len2 = PAGEFRAME_PAGESIZE - (effective_addr1 & PAGEFRAME_BYTEMASK);

  0067c	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00680	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00685	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0068a	2b c8		 sub	 ecx, eax
  0068c	8b c1		 mov	 eax, ecx
  0068e	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 202  :         dest2 = MADDRL((effective_addr1 + len2) & ADDRESS_MAXWRAP( regs ),

  00692	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00696	ff c0		 inc	 eax
  00698	2b 44 24 34	 sub	 eax, DWORD PTR len2$[rsp]
  0069c	48 98		 cdqe
  0069e	8b 4c 24 34	 mov	 ecx, DWORD PTR len2$[rsp]
  006a2	8b 54 24 44	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  006a6	03 d1		 add	 edx, ecx
  006a8	8b ca		 mov	 ecx, edx
  006aa	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  006b0	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  006b8	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  006bc	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  006c0	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  006c8	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  006d0	44 8b 44 24 74	 mov	 r8d, DWORD PTR b1$[rsp]
  006d5	48 8b d0	 mov	 rdx, rax
  006d8	e8 00 00 00 00	 call	 s370_maddr_l
  006dd	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax

; 203  :          len + 1 - len2,b1, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );
; 204  :         sk2 = regs->dat.storkey;

  006e2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006ea	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  006f1	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR sk2$[rsp], rax

; 205  : 
; 206  :         if (NOCROSSPAGE( effective_addr2, len ))

  006f9	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  006fd	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00702	b9 ff 07 00 00	 mov	 ecx, 2047		; 000007ffH
  00707	2b 4c 24 40	 sub	 ecx, DWORD PTR len$[rsp]
  0070b	3b c1		 cmp	 eax, ecx
  0070d	7f 0d		 jg	 SHORT $LN139@s370_or_ch
  0070f	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv342[rsp], 1
  0071a	eb 0b		 jmp	 SHORT $LN140@s370_or_ch
$LN139@s370_or_ch:
  0071c	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv342[rsp], 0
$LN140@s370_or_ch:
  00727	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv342[rsp], 0
  0072f	0f 84 01 01 00
	00		 je	 $LN70@s370_or_ch

; 207  :         {
; 208  :              /* (3) - First operand crosses a boundary */
; 209  :              for (i=0; i < len2; i++)

  00735	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0073d	eb 0a		 jmp	 SHORT $LN25@s370_or_ch
$LN23@s370_or_ch:
  0073f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00743	ff c0		 inc	 eax
  00745	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@s370_or_ch:
  00749	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  0074d	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00751	7d 58		 jge	 SHORT $LN24@s370_or_ch

; 210  :                  if ((*dest1++ |= *source1++))

  00753	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00758	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0075b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00760	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00763	0b c8		 or	 ecx, eax
  00765	8b c1		 mov	 eax, ecx
  00767	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  0076c	88 01		 mov	 BYTE PTR [rcx], al
  0076e	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00773	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00776	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv354[rsp], eax
  0077d	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00782	48 ff c0	 inc	 rax
  00785	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  0078a	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  0078f	48 ff c0	 inc	 rax
  00792	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00797	83 bc 24 e4 00
	00 00 00	 cmp	 DWORD PTR tv354[rsp], 0
  0079f	74 08		 je	 SHORT $LN72@s370_or_ch

; 211  :                      cc = 1;

  007a1	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN72@s370_or_ch:
  007a9	eb 94		 jmp	 SHORT $LN23@s370_or_ch
$LN24@s370_or_ch:

; 212  : 
; 213  :              len2 = len - len2;

  007ab	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  007af	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  007b3	2b c8		 sub	 ecx, eax
  007b5	8b c1		 mov	 eax, ecx
  007b7	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 214  : 
; 215  :              for (i=0; i <= len2; i++)

  007bb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  007c3	eb 0a		 jmp	 SHORT $LN28@s370_or_ch
$LN26@s370_or_ch:
  007c5	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  007c9	ff c0		 inc	 eax
  007cb	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@s370_or_ch:
  007cf	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  007d3	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  007d7	7f 58		 jg	 SHORT $LN27@s370_or_ch

; 216  :                  if ((*dest2++ |= *source1++))

  007d9	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  007de	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007e1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  007e6	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  007e9	0b c8		 or	 ecx, eax
  007eb	8b c1		 mov	 eax, ecx
  007ed	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  007f2	88 01		 mov	 BYTE PTR [rcx], al
  007f4	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  007f9	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007fc	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv366[rsp], eax
  00803	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00808	48 ff c0	 inc	 rax
  0080b	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  00810	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  00815	48 ff c0	 inc	 rax
  00818	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax
  0081d	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR tv366[rsp], 0
  00825	74 08		 je	 SHORT $LN73@s370_or_ch

; 217  :                      cc = 1;

  00827	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN73@s370_or_ch:
  0082f	eb 94		 jmp	 SHORT $LN26@s370_or_ch
$LN27@s370_or_ch:

; 218  :         }

  00831	e9 8c 04 00 00	 jmp	 $LN71@s370_or_ch
$LN70@s370_or_ch:

; 219  :         else
; 220  :         {
; 221  :             /* (4) - Both operands cross a boundary */
; 222  :             len3 = PAGEFRAME_PAGESIZE - (effective_addr2 & PAGEFRAME_BYTEMASK);

  00836	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0083a	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0083f	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00844	2b c8		 sub	 ecx, eax
  00846	8b c1		 mov	 eax, ecx
  00848	89 44 24 58	 mov	 DWORD PTR len3$[rsp], eax

; 223  :             source2 = MADDRL((effective_addr2 + len3) & ADDRESS_MAXWRAP( regs ),

  0084c	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00850	ff c0		 inc	 eax
  00852	2b 44 24 58	 sub	 eax, DWORD PTR len3$[rsp]
  00856	48 98		 cdqe
  00858	8b 4c 24 58	 mov	 ecx, DWORD PTR len3$[rsp]
  0085c	8b 54 24 48	 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00860	03 d1		 add	 edx, ecx
  00862	8b ca		 mov	 ecx, edx
  00864	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0086a	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00872	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  00876	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  0087a	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00882	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0088a	44 8b 44 24 70	 mov	 r8d, DWORD PTR b2$[rsp]
  0088f	48 8b d0	 mov	 rdx, rax
  00892	e8 00 00 00 00	 call	 s370_maddr_l
  00897	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax

; 224  :              len + 1 - len3,  b2, regs, ACCTYPE_READ, regs->psw.pkey );
; 225  :             if (len2 == len3)

  0089c	8b 44 24 58	 mov	 eax, DWORD PTR len3$[rsp]
  008a0	39 44 24 34	 cmp	 DWORD PTR len2$[rsp], eax
  008a4	0f 85 01 01 00
	00		 jne	 $LN74@s370_or_ch

; 226  :             {
; 227  :                 /* (4a) - Both operands cross at the same time */
; 228  :                 for (i=0; i < len2; i++)

  008aa	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  008b2	eb 0a		 jmp	 SHORT $LN31@s370_or_ch
$LN29@s370_or_ch:
  008b4	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  008b8	ff c0		 inc	 eax
  008ba	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN31@s370_or_ch:
  008be	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  008c2	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  008c6	7d 58		 jge	 SHORT $LN30@s370_or_ch

; 229  :                     if ((*dest1++ |= *source1++))

  008c8	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  008cd	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008d0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  008d5	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  008d8	0b c8		 or	 ecx, eax
  008da	8b c1		 mov	 eax, ecx
  008dc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  008e1	88 01		 mov	 BYTE PTR [rcx], al
  008e3	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  008e8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008eb	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv393[rsp], eax
  008f2	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  008f7	48 ff c0	 inc	 rax
  008fa	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  008ff	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00904	48 ff c0	 inc	 rax
  00907	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  0090c	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR tv393[rsp], 0
  00914	74 08		 je	 SHORT $LN76@s370_or_ch

; 230  :                         cc = 1;

  00916	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN76@s370_or_ch:
  0091e	eb 94		 jmp	 SHORT $LN29@s370_or_ch
$LN30@s370_or_ch:

; 231  : 
; 232  :                 len2 = len - len2;

  00920	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00924	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00928	2b c8		 sub	 ecx, eax
  0092a	8b c1		 mov	 eax, ecx
  0092c	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 233  : 
; 234  :                 for (i=0; i <= len2; i++)

  00930	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00938	eb 0a		 jmp	 SHORT $LN34@s370_or_ch
$LN32@s370_or_ch:
  0093a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0093e	ff c0		 inc	 eax
  00940	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN34@s370_or_ch:
  00944	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00948	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0094c	7f 58		 jg	 SHORT $LN33@s370_or_ch

; 235  :                     if ((*dest2++ |= *source2++))

  0094e	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00953	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00956	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  0095b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0095e	0b c8		 or	 ecx, eax
  00960	8b c1		 mov	 eax, ecx
  00962	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00967	88 01		 mov	 BYTE PTR [rcx], al
  00969	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  0096e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00971	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv405[rsp], eax
  00978	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  0097d	48 ff c0	 inc	 rax
  00980	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  00985	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  0098a	48 ff c0	 inc	 rax
  0098d	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax
  00992	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR tv405[rsp], 0
  0099a	74 08		 je	 SHORT $LN77@s370_or_ch

; 236  :                         cc = 1;

  0099c	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN77@s370_or_ch:
  009a4	eb 94		 jmp	 SHORT $LN32@s370_or_ch
$LN33@s370_or_ch:

; 237  :             }

  009a6	e9 17 03 00 00	 jmp	 $LN75@s370_or_ch
$LN74@s370_or_ch:

; 238  :             else if (len2 < len3)

  009ab	8b 44 24 58	 mov	 eax, DWORD PTR len3$[rsp]
  009af	39 44 24 34	 cmp	 DWORD PTR len2$[rsp], eax
  009b3	0f 8d 87 01 00
	00		 jge	 $LN78@s370_or_ch

; 239  :             {
; 240  :                 /* (4b) - First operand crosses first */
; 241  :                 for (i=0; i < len2; i++)

  009b9	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  009c1	eb 0a		 jmp	 SHORT $LN37@s370_or_ch
$LN35@s370_or_ch:
  009c3	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  009c7	ff c0		 inc	 eax
  009c9	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN37@s370_or_ch:
  009cd	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  009d1	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  009d5	7d 58		 jge	 SHORT $LN36@s370_or_ch

; 242  :                     if ((*dest1++ |= *source1++))

  009d7	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  009dc	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009df	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  009e4	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  009e7	0b c8		 or	 ecx, eax
  009e9	8b c1		 mov	 eax, ecx
  009eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  009f0	88 01		 mov	 BYTE PTR [rcx], al
  009f2	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  009f7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009fa	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv417[rsp], eax
  00a01	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00a06	48 ff c0	 inc	 rax
  00a09	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  00a0e	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00a13	48 ff c0	 inc	 rax
  00a16	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00a1b	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR tv417[rsp], 0
  00a23	74 08		 je	 SHORT $LN80@s370_or_ch

; 243  :                         cc = 1;

  00a25	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN80@s370_or_ch:
  00a2d	eb 94		 jmp	 SHORT $LN35@s370_or_ch
$LN36@s370_or_ch:

; 244  : 
; 245  :                 len2 = len3 - len2;

  00a2f	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00a33	8b 4c 24 58	 mov	 ecx, DWORD PTR len3$[rsp]
  00a37	2b c8		 sub	 ecx, eax
  00a39	8b c1		 mov	 eax, ecx
  00a3b	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 246  : 
; 247  :                 for (i=0; i < len2; i++)

  00a3f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00a47	eb 0a		 jmp	 SHORT $LN40@s370_or_ch
$LN38@s370_or_ch:
  00a49	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00a4d	ff c0		 inc	 eax
  00a4f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN40@s370_or_ch:
  00a53	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00a57	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00a5b	7d 58		 jge	 SHORT $LN39@s370_or_ch

; 248  :                     if ((*dest2++ |= *source1++))

  00a5d	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00a62	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a65	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00a6a	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00a6d	0b c8		 or	 ecx, eax
  00a6f	8b c1		 mov	 eax, ecx
  00a71	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00a76	88 01		 mov	 BYTE PTR [rcx], al
  00a78	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  00a7d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a80	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv429[rsp], eax
  00a87	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00a8c	48 ff c0	 inc	 rax
  00a8f	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  00a94	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  00a99	48 ff c0	 inc	 rax
  00a9c	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax
  00aa1	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR tv429[rsp], 0
  00aa9	74 08		 je	 SHORT $LN81@s370_or_ch

; 249  :                         cc = 1;

  00aab	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN81@s370_or_ch:
  00ab3	eb 94		 jmp	 SHORT $LN38@s370_or_ch
$LN39@s370_or_ch:

; 250  : 
; 251  :                 len2 = len - len3;

  00ab5	8b 44 24 58	 mov	 eax, DWORD PTR len3$[rsp]
  00ab9	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00abd	2b c8		 sub	 ecx, eax
  00abf	8b c1		 mov	 eax, ecx
  00ac1	89 44 24 34	 mov	 DWORD PTR len2$[rsp], eax

; 252  : 
; 253  :                 for (i=0; i <= len2; i++)

  00ac5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00acd	eb 0a		 jmp	 SHORT $LN43@s370_or_ch
$LN41@s370_or_ch:
  00acf	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00ad3	ff c0		 inc	 eax
  00ad5	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN43@s370_or_ch:
  00ad9	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00add	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00ae1	7f 58		 jg	 SHORT $LN42@s370_or_ch

; 254  :                     if ((*dest2++ |= *source2++))

  00ae3	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00ae8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00aeb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00af0	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00af3	0b c8		 or	 ecx, eax
  00af5	8b c1		 mov	 eax, ecx
  00af7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00afc	88 01		 mov	 BYTE PTR [rcx], al
  00afe	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  00b03	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b06	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv441[rsp], eax
  00b0d	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00b12	48 ff c0	 inc	 rax
  00b15	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  00b1a	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  00b1f	48 ff c0	 inc	 rax
  00b22	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax
  00b27	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR tv441[rsp], 0
  00b2f	74 08		 je	 SHORT $LN82@s370_or_ch

; 255  :                         cc = 1;

  00b31	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN82@s370_or_ch:
  00b39	eb 94		 jmp	 SHORT $LN41@s370_or_ch
$LN42@s370_or_ch:

; 256  :             }

  00b3b	e9 82 01 00 00	 jmp	 $LN79@s370_or_ch
$LN78@s370_or_ch:

; 257  :             else
; 258  :             {
; 259  :                 /* (4c) - Second operand crosses first */
; 260  :                 for ( i = 0; i < len3; i++)

  00b40	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00b48	eb 0a		 jmp	 SHORT $LN46@s370_or_ch
$LN44@s370_or_ch:
  00b4a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00b4e	ff c0		 inc	 eax
  00b50	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN46@s370_or_ch:
  00b54	8b 44 24 58	 mov	 eax, DWORD PTR len3$[rsp]
  00b58	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00b5c	7d 58		 jge	 SHORT $LN45@s370_or_ch

; 261  :                     if ((*dest1++ |= *source1++))

  00b5e	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00b63	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b66	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00b6b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00b6e	0b c8		 or	 ecx, eax
  00b70	8b c1		 mov	 eax, ecx
  00b72	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00b77	88 01		 mov	 BYTE PTR [rcx], al
  00b79	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00b7e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b81	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv452[rsp], eax
  00b88	48 8b 44 24 50	 mov	 rax, QWORD PTR source1$[rsp]
  00b8d	48 ff c0	 inc	 rax
  00b90	48 89 44 24 50	 mov	 QWORD PTR source1$[rsp], rax
  00b95	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00b9a	48 ff c0	 inc	 rax
  00b9d	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00ba2	83 bc 24 cc 00
	00 00 00	 cmp	 DWORD PTR tv452[rsp], 0
  00baa	74 08		 je	 SHORT $LN83@s370_or_ch

; 262  :                         cc = 1;

  00bac	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN83@s370_or_ch:
  00bb4	eb 94		 jmp	 SHORT $LN44@s370_or_ch
$LN45@s370_or_ch:

; 263  : 
; 264  :                 len3 = len2 - len3;

  00bb6	8b 44 24 58	 mov	 eax, DWORD PTR len3$[rsp]
  00bba	8b 4c 24 34	 mov	 ecx, DWORD PTR len2$[rsp]
  00bbe	2b c8		 sub	 ecx, eax
  00bc0	8b c1		 mov	 eax, ecx
  00bc2	89 44 24 58	 mov	 DWORD PTR len3$[rsp], eax

; 265  : 
; 266  :                 for (i=0; i < len3; i++)

  00bc6	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00bce	eb 0a		 jmp	 SHORT $LN49@s370_or_ch
$LN47@s370_or_ch:
  00bd0	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00bd4	ff c0		 inc	 eax
  00bd6	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN49@s370_or_ch:
  00bda	8b 44 24 58	 mov	 eax, DWORD PTR len3$[rsp]
  00bde	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00be2	7d 58		 jge	 SHORT $LN48@s370_or_ch

; 267  :                     if ((*dest1++ |= *source2++))

  00be4	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00be9	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00bec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00bf1	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00bf4	0b c8		 or	 ecx, eax
  00bf6	8b c1		 mov	 eax, ecx
  00bf8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dest1$[rsp]
  00bfd	88 01		 mov	 BYTE PTR [rcx], al
  00bff	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00c04	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00c07	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv464[rsp], eax
  00c0e	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00c13	48 ff c0	 inc	 rax
  00c16	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  00c1b	48 8b 44 24 38	 mov	 rax, QWORD PTR dest1$[rsp]
  00c20	48 ff c0	 inc	 rax
  00c23	48 89 44 24 38	 mov	 QWORD PTR dest1$[rsp], rax
  00c28	83 bc 24 d0 00
	00 00 00	 cmp	 DWORD PTR tv464[rsp], 0
  00c30	74 08		 je	 SHORT $LN84@s370_or_ch

; 268  :                         cc = 1;

  00c32	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN84@s370_or_ch:
  00c3a	eb 94		 jmp	 SHORT $LN47@s370_or_ch
$LN48@s370_or_ch:

; 269  : 
; 270  :                 len3 = len - len2;

  00c3c	8b 44 24 34	 mov	 eax, DWORD PTR len2$[rsp]
  00c40	8b 4c 24 40	 mov	 ecx, DWORD PTR len$[rsp]
  00c44	2b c8		 sub	 ecx, eax
  00c46	8b c1		 mov	 eax, ecx
  00c48	89 44 24 58	 mov	 DWORD PTR len3$[rsp], eax

; 271  : 
; 272  :                 for (i=0; i <= len3; i++)

  00c4c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00c54	eb 0a		 jmp	 SHORT $LN52@s370_or_ch
$LN50@s370_or_ch:
  00c56	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00c5a	ff c0		 inc	 eax
  00c5c	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN52@s370_or_ch:
  00c60	8b 44 24 58	 mov	 eax, DWORD PTR len3$[rsp]
  00c64	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00c68	7f 58		 jg	 SHORT $LN51@s370_or_ch

; 273  :                     if ((*dest2++ |= *source2++))

  00c6a	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00c6f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00c72	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00c77	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00c7a	0b c8		 or	 ecx, eax
  00c7c	8b c1		 mov	 eax, ecx
  00c7e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dest2$[rsp]
  00c83	88 01		 mov	 BYTE PTR [rcx], al
  00c85	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  00c8a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00c8d	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv476[rsp], eax
  00c94	48 8b 44 24 68	 mov	 rax, QWORD PTR source2$[rsp]
  00c99	48 ff c0	 inc	 rax
  00c9c	48 89 44 24 68	 mov	 QWORD PTR source2$[rsp], rax
  00ca1	48 8b 44 24 60	 mov	 rax, QWORD PTR dest2$[rsp]
  00ca6	48 ff c0	 inc	 rax
  00ca9	48 89 44 24 60	 mov	 QWORD PTR dest2$[rsp], rax
  00cae	83 bc 24 d4 00
	00 00 00	 cmp	 DWORD PTR tv476[rsp], 0
  00cb6	74 08		 je	 SHORT $LN85@s370_or_ch

; 274  :                         cc = 1;

  00cb8	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR cc$[rsp], 1
$LN85@s370_or_ch:
  00cc0	eb 94		 jmp	 SHORT $LN50@s370_or_ch
$LN51@s370_or_ch:
$LN79@s370_or_ch:
$LN75@s370_or_ch:
$LN71@s370_or_ch:

; 275  :             }
; 276  :         }
; 277  :         ARCH_DEP( or_storage_key_by_ptr )( sk1, (STORKEY_REF | STORKEY_CHANGE) );

  00cc2	b2 06		 mov	 dl, 6
  00cc4	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR sk1$[rsp]
  00ccc	e8 00 00 00 00	 call	 s370_or_storage_key_by_ptr

; 278  :         ARCH_DEP( or_storage_key_by_ptr )( sk2, (STORKEY_REF | STORKEY_CHANGE) );

  00cd1	b2 06		 mov	 dl, 6
  00cd3	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR sk2$[rsp]
  00cdb	e8 00 00 00 00	 call	 s370_or_storage_key_by_ptr
$LN64@s370_or_ch:

; 279  :     }
; 280  : 
; 281  :     regs->psw.cc = cc;

  00ce0	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ce8	0f b6 4c 24 4c	 movzx	 ecx, BYTE PTR cc$[rsp]
  00ced	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN55@s370_or_ch:

; 282  : 
; 283  :     ITIMER_UPDATE( effective_addr1, len, regs );

  00cf0	83 7c 24 44 54	 cmp	 DWORD PTR effective_addr1$[rsp], 84 ; 00000054H
  00cf5	73 0d		 jae	 SHORT $LN143@s370_or_ch
  00cf7	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv486[rsp], 1
  00d02	eb 0b		 jmp	 SHORT $LN144@s370_or_ch
$LN143@s370_or_ch:
  00d04	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv486[rsp], 0
$LN144@s370_or_ch:
  00d0f	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR tv486[rsp], 0
  00d17	74 1e		 je	 SHORT $LN145@s370_or_ch
  00d19	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  00d1d	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00d21	03 c8		 add	 ecx, eax
  00d23	8b c1		 mov	 eax, ecx
  00d25	83 f8 50	 cmp	 eax, 80			; 00000050H
  00d28	72 0d		 jb	 SHORT $LN145@s370_or_ch
  00d2a	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv498[rsp], 1
  00d35	eb 0b		 jmp	 SHORT $LN151@s370_or_ch
$LN145@s370_or_ch:
  00d37	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv498[rsp], 0
$LN151@s370_or_ch:
  00d42	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv498[rsp], 0
  00d4a	74 0d		 je	 SHORT $LN86@s370_or_ch
  00d4c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d54	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN86@s370_or_ch:
  00d59	33 c0		 xor	 eax, eax
  00d5b	85 c0		 test	 eax, eax
  00d5d	75 91		 jne	 SHORT $LN55@s370_or_ch
$LN1@s370_or_ch:

; 284  : }

  00d5f	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00d66	c3		 ret	 0
s370_or_character ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr2$ = 32
temp$1 = 36
b2$ = 40
r1$ = 44
tv77 = 48
x2$ = 52
tv88 = 56
tv151 = 60
tv153 = 64
tv166 = 68
n$ = 72
tv226 = 76
inst$ = 96
regs$ = 104
s370_or	PROC

; 72   : {

$LN26:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 73   : int     r1;                             /* Value of R field          */
; 74   : int     x2;                             /* Index register            */
; 75   : int     b2;                             /* Base of effective addr    */
; 76   : VADR    effective_addr2;                /* Effective address         */
; 77   : U32     n;                              /* 32-bit operand values     */
; 78   : 
; 79   :     RX(inst, regs, r1, x2, b2, effective_addr2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 24	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0002c	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00030	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 0f	 and	 eax, 15
  0003a	89 44 24 34	 mov	 DWORD PTR x2$[rsp], eax
  0003e	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  00042	c1 e8 14	 shr	 eax, 20
  00045	83 e0 0f	 and	 eax, 15
  00048	89 44 24 2c	 mov	 DWORD PTR r1$[rsp], eax
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR x2$[rsp], 0
  00051	74 0a		 je	 SHORT $LN16@s370_or
  00053	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0005b	eb 08		 jmp	 SHORT $LN17@s370_or
$LN16@s370_or:
  0005d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN17@s370_or:
  00065	83 7c 24 30 00	 cmp	 DWORD PTR tv77[rsp], 0
  0006a	74 1d		 je	 SHORT $LN8@s370_or
  0006c	48 63 44 24 34	 movsxd	 rax, DWORD PTR x2$[rsp]
  00071	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00076	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007d	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00081	03 c8		 add	 ecx, eax
  00083	8b c1		 mov	 eax, ecx
  00085	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN8@s370_or:
  00089	8b 44 24 24	 mov	 eax, DWORD PTR temp$1[rsp]
  0008d	c1 e8 0c	 shr	 eax, 12
  00090	83 e0 0f	 and	 eax, 15
  00093	89 44 24 28	 mov	 DWORD PTR b2$[rsp], eax
  00097	83 7c 24 28 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009c	74 0a		 je	 SHORT $LN18@s370_or
  0009e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000a6	eb 08		 jmp	 SHORT $LN19@s370_or
$LN18@s370_or:
  000a8	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN19@s370_or:
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv88[rsp], 0
  000b5	74 1d		 je	 SHORT $LN9@s370_or
  000b7	48 63 44 24 28	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000c1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c8	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cc	03 c8		 add	 ecx, eax
  000ce	8b c1		 mov	 eax, ecx
  000d0	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_or:
  000d4	33 c0		 xor	 eax, eax
  000d6	83 f8 04	 cmp	 eax, 4
  000d9	74 0d		 je	 SHORT $LN10@s370_or
  000db	8b 44 24 20	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000e4	89 44 24 20	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN10@s370_or:
$LN4@s370_or:
  000e8	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  000ed	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f1	48 83 c0 04	 add	 rax, 4
  000f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  000fa	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000fe	33 c0		 xor	 eax, eax
  00100	83 f8 04	 cmp	 eax, 4
  00103	74 0c		 je	 SHORT $LN11@s370_or
  00105	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0010a	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN11@s370_or:
  00111	33 c0		 xor	 eax, eax
  00113	85 c0		 test	 eax, eax
  00115	75 d1		 jne	 SHORT $LN4@s370_or

; 80   :     PER_ZEROADDR_XCHECK2( regs, x2, b2 );
; 81   : 
; 82   :     /* Load second operand from operand address */
; 83   :     n = ARCH_DEP(vfetch4) ( effective_addr2, b2, regs );

  00117	4c 8b 44 24 68	 mov	 r8, QWORD PTR regs$[rsp]
  0011c	8b 54 24 28	 mov	 edx, DWORD PTR b2$[rsp]
  00120	8b 4c 24 20	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00124	e8 00 00 00 00	 call	 s370_vfetch4
  00129	89 44 24 48	 mov	 DWORD PTR n$[rsp], eax

; 84   : 
; 85   :     /* OR second operand with first and set condition code */
; 86   :     regs->psw.cc = ( regs->GR_L(r1) |= n ) ? 1 : 0;

  0012d	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00132	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00137	8b 54 24 48	 mov	 edx, DWORD PTR n$[rsp]
  0013b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00142	0b c2		 or	 eax, edx
  00144	89 44 24 3c	 mov	 DWORD PTR tv151[rsp], eax
  00148	48 63 44 24 2c	 movsxd	 rax, DWORD PTR r1$[rsp]
  0014d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00152	8b 54 24 3c	 mov	 edx, DWORD PTR tv151[rsp]
  00156	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
  0015d	83 7c 24 3c 00	 cmp	 DWORD PTR tv151[rsp], 0
  00162	74 0a		 je	 SHORT $LN20@s370_or
  00164	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv153[rsp], 1
  0016c	eb 08		 jmp	 SHORT $LN21@s370_or
$LN20@s370_or:
  0016e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN21@s370_or:
  00176	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0017b	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR tv153[rsp]
  00180	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN7@s370_or:

; 87   : 
; 88   :     /* Check for PER 1 GRA event */
; 89   :     PER_GRA_CHECK( regs, PER_GRA_MASK( r1 ));

  00183	33 c0		 xor	 eax, eax
  00185	83 f8 01	 cmp	 eax, 1
  00188	0f 84 80 00 00
	00		 je	 $LN12@s370_or
  0018e	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00193	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00199	c1 e8 02	 shr	 eax, 2
  0019c	83 e0 01	 and	 eax, 1
  0019f	85 c0		 test	 eax, eax
  001a1	74 0a		 je	 SHORT $LN24@s370_or
  001a3	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  001ab	eb 08		 jmp	 SHORT $LN25@s370_or
$LN24@s370_or:
  001ad	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN25@s370_or:
  001b5	83 7c 24 44 00	 cmp	 DWORD PTR tv166[rsp], 0
  001ba	74 52		 je	 SHORT $LN12@s370_or
  001bc	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  001c1	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001c4	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  001c9	85 c0		 test	 eax, eax
  001cb	74 41		 je	 SHORT $LN12@s370_or
  001cd	8b 44 24 2c	 mov	 eax, DWORD PTR r1$[rsp]
  001d1	b9 00 80 00 00	 mov	 ecx, 32768		; 00008000H
  001d6	89 4c 24 4c	 mov	 DWORD PTR tv226[rsp], ecx
  001da	0f b6 c8	 movzx	 ecx, al
  001dd	8b 44 24 4c	 mov	 eax, DWORD PTR tv226[rsp]
  001e1	d3 f8		 sar	 eax, cl
  001e3	b9 08 00 00 00	 mov	 ecx, 8
  001e8	48 6b c9 0a	 imul	 rcx, rcx, 10
  001ec	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  001f1	8b 8c 0a 00 06
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+1536]
  001f8	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  001fe	23 c1		 and	 eax, ecx
  00200	85 c0		 test	 eax, eax
  00202	74 0a		 je	 SHORT $LN12@s370_or
  00204	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00209	e8 00 00 00 00	 call	 s370_per1_gra
$LN12@s370_or:
  0020e	33 c0		 xor	 eax, eax
  00210	85 c0		 test	 eax, eax
  00212	0f 85 6b ff ff
	ff		 jne	 $LN7@s370_or

; 90   : }

  00218	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0021c	c3		 ret	 0
s370_or	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
addr2$ = 48
termchar$ = 52
cpu_length$ = 56
i$ = 60
r2$ = 64
addr1$ = 68
dist$ = 72
r1$ = 76
main2$ = 80
i$1 = 88
tv141 = 92
tv154 = 96
inst$ = 128
regs$ = 136
s370_search_string PROC

; 543  : {

$LN35:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 544  : int     r1, r2;                         /* Values of R fields        */
; 545  : int     i;                              /* Loop counter              */
; 546  : int     dist;                           /* length working distance   */
; 547  : int     cpu_length;                     /* CPU determined length     */
; 548  : VADR    addr1, addr2;                   /* End/start addresses       */
; 549  : BYTE    *main2;                         /* Operand-2 mainstor addr   */
; 550  : BYTE    termchar;                       /* Terminating character     */
; 551  : 
; 552  :     RRE( inst, regs, r1, r2 );

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0001f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00023	89 44 24 58	 mov	 DWORD PTR i$1[rsp], eax
  00027	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  0002b	83 e0 0f	 and	 eax, 15
  0002e	89 44 24 40	 mov	 DWORD PTR r2$[rsp], eax
  00032	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  00036	c1 f8 04	 sar	 eax, 4
  00039	83 e0 0f	 and	 eax, 15
  0003c	89 44 24 4c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_searc:
  00040	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00048	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004c	48 83 c0 04	 add	 rax, 4
  00050	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00058	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0005c	33 c0		 xor	 eax, eax
  0005e	83 f8 04	 cmp	 eax, 4
  00061	74 0f		 je	 SHORT $LN13@s370_searc
  00063	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN13@s370_searc:
  00072	33 c0		 xor	 eax, eax
  00074	85 c0		 test	 eax, eax
  00076	75 c8		 jne	 SHORT $LN4@s370_searc

; 553  :     PER_ZEROADDR_CHECK( regs, r2 );
; 554  : 
; 555  :     TXFC_INSTR_CHECK( regs );
; 556  : 
; 557  :     /* Program check if bits 0-23 of register 0 not zero */
; 558  :     if ((regs->GR_L(0) & 0xFFFFFF00) != 0)

  00078	b8 08 00 00 00	 mov	 eax, 8
  0007d	48 6b c0 00	 imul	 rax, rax, 0
  00081	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00089	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00090	25 00 ff ff ff	 and	 eax, -256		; ffffff00H
  00095	85 c0		 test	 eax, eax
  00097	74 1b		 je	 SHORT $LN14@s370_searc

; 559  :         regs->program_interrupt( regs, PGM_SPECIFICATION_EXCEPTION );

  00099	ba 06 00 00 00	 mov	 edx, 6
  0009e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000a6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ae	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_searc:

; 560  : 
; 561  :     /* Load string terminating character from register 0 bits 24-31 */
; 562  :     termchar = regs->GR_LHLCL(0);

  000b4	b8 08 00 00 00	 mov	 eax, 8
  000b9	48 6b c0 00	 imul	 rax, rax, 0
  000bd	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c5	0f b6 84 01 80
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+640]
  000cd	88 44 24 34	 mov	 BYTE PTR termchar$[rsp], al

; 563  : 
; 564  :     /* Determine the operand end and start addresses */
; 565  :     addr1 = regs->GR( r1 ) & ADDRESS_MAXWRAP( regs );

  000d1	48 63 44 24 4c	 movsxd	 rax, DWORD PTR r1$[rsp]
  000d6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000de	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000e5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ea	89 44 24 44	 mov	 DWORD PTR addr1$[rsp], eax

; 566  :     addr2 = regs->GR( r2 ) & ADDRESS_MAXWRAP( regs );

  000ee	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  000f3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00102	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00107	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 567  : 
; 568  :     /* Set the minimum CPU determined length per the specification  */
; 569  :     cpu_length = 256;

  0010b	c7 44 24 38 00
	01 00 00	 mov	 DWORD PTR cpu_length$[rsp], 256 ; 00000100H

; 570  : 
; 571  :     /* Should the second operand cross a page boundary, we need to
; 572  :        break up the search into two parts (one part in each page)
; 573  :        to meet the minimum requirement of 256 CPU determined bytes. */
; 574  :     if (unlikely( CROSSPAGEL( addr2, cpu_length )))

  00113	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  00117	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0011c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00121	2b 4c 24 38	 sub	 ecx, DWORD PTR cpu_length$[rsp]
  00125	3b c1		 cmp	 eax, ecx
  00127	7e 0a		 jle	 SHORT $LN25@s370_searc
  00129	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv141[rsp], 1
  00131	eb 08		 jmp	 SHORT $LN26@s370_searc
$LN25@s370_searc:
  00133	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN26@s370_searc:
  0013b	83 7c 24 5c 00	 cmp	 DWORD PTR tv141[rsp], 0
  00140	74 0a		 je	 SHORT $LN33@s370_searc
  00142	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  0014a	eb 08		 jmp	 SHORT $LN34@s370_searc
$LN33@s370_searc:
  0014c	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN34@s370_searc:
  00154	83 7c 24 60 00	 cmp	 DWORD PTR tv154[rsp], 0
  00159	0f 84 59 01 00
	00		 je	 $LN15@s370_searc

; 575  :     {
; 576  :         /* Compute the distance to the end of operand-2's page */
; 577  :         dist = PAGEFRAME_PAGESIZE - (addr2 & PAGEFRAME_BYTEMASK);

  0015f	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  00163	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00168	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0016d	2b c8		 sub	 ecx, eax
  0016f	8b c1		 mov	 eax, ecx
  00171	89 44 24 48	 mov	 DWORD PTR dist$[rsp], eax
$LN5@s370_searc:

; 578  : 
; 579  :         while (cpu_length)

  00175	83 7c 24 38 00	 cmp	 DWORD PTR cpu_length$[rsp], 0
  0017a	0f 84 0f 01 00
	00		 je	 $LN6@s370_searc

; 580  :         {
; 581  :             /* We need to check the boundary condition
; 582  :                BEFORE attempting to access storage,
; 583  :                because if the boundary condition is met,
; 584  :                there is no further need to access storage.
; 585  :             */
; 586  :             /* NOTE: "When the address in general register R1 is less
; 587  :                than the address in general register R2, condition code
; 588  :                2 can be set only if the operand wraps around from the
; 589  :                top of storage to location 0."  The below comparison
; 590  :                for == is thus correct.
; 591  :             */
; 592  :             if (addr2 == addr1)

  00180	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  00184	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  00188	75 11		 jne	 SHORT $LN16@s370_searc

; 593  :             {
; 594  :                 regs->psw.cc = 2;

  0018a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00192	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 595  :                 return;

  00196	e9 46 02 00 00	 jmp	 $LN1@s370_searc
$LN16@s370_searc:

; 596  :             }
; 597  :             main2 = MADDRL(addr2, cpu_length, r2, regs, ACCTYPE_READ, regs->psw.pkey );

  0019b	48 63 44 24 38	 movsxd	 rax, DWORD PTR cpu_length$[rsp]
  001a0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001a8	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  001ac	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001b0	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001b8	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001c0	44 8b 44 24 40	 mov	 r8d, DWORD PTR r2$[rsp]
  001c5	48 8b d0	 mov	 rdx, rax
  001c8	8b 4c 24 30	 mov	 ecx, DWORD PTR addr2$[rsp]
  001cc	e8 00 00 00 00	 call	 s370_maddr_l
  001d1	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 598  :             for (i=0; i < dist; i++)

  001d6	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001de	eb 0a		 jmp	 SHORT $LN9@s370_searc
$LN7@s370_searc:
  001e0	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  001e4	ff c0		 inc	 eax
  001e6	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN9@s370_searc:
  001ea	8b 44 24 48	 mov	 eax, DWORD PTR dist$[rsp]
  001ee	39 44 24 3c	 cmp	 DWORD PTR i$[rsp], eax
  001f2	7d 7e		 jge	 SHORT $LN8@s370_searc

; 599  :             {
; 600  :                 /* If operand end address has been reached, return
; 601  :                    CC=2 and leave the R1 and R2 registers unchanged
; 602  :                 */
; 603  :                 /* NOTE: "When the address in general register R1 is
; 604  :                    less than the address in general register R2, then
; 605  :                    condition code 2 can be set only when the operand
; 606  :                    wraps around from the top of storage to location 0."
; 607  :                    Thus the below == comparison is correct.
; 608  :                 */
; 609  :                 if (addr2 == addr1)

  001f4	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  001f8	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  001fc	75 11		 jne	 SHORT $LN17@s370_searc

; 610  :                 {
; 611  :                     regs->psw.cc = 2;

  001fe	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00206	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 612  :                     return;

  0020a	e9 d2 01 00 00	 jmp	 $LN1@s370_searc
$LN17@s370_searc:

; 613  :                 }
; 614  : 
; 615  :                 /* Set CC=1 if the terminating character was found,
; 616  :                    and load the address of that character into R1 */
; 617  :                 if (*main2 == termchar)

  0020f	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  00214	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00217	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR termchar$[rsp]
  0021c	3b c1		 cmp	 eax, ecx
  0021e	75 29		 jne	 SHORT $LN18@s370_searc

; 618  :                 {
; 619  :                     SET_GR_A( r1, regs, addr2 );

  00220	48 63 44 24 4c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00225	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0022d	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  00231	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 620  :                     regs->psw.cc = 1;

  00238	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00240	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 621  :                     return;

  00244	e9 98 01 00 00	 jmp	 $LN1@s370_searc
$LN18@s370_searc:

; 622  :                 }
; 623  : 
; 624  :                 /* Bump operand-2 */
; 625  :                 main2++;

  00249	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  0024e	48 ff c0	 inc	 rax
  00251	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 626  :                 addr2++;

  00256	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  0025a	ff c0		 inc	 eax
  0025c	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 627  :                 addr2 &= ADDRESS_MAXWRAP( regs );

  00260	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  00264	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00269	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 628  : 
; 629  :             } /* end for(i) */

  0026d	e9 6e ff ff ff	 jmp	 $LN7@s370_searc
$LN8@s370_searc:

; 630  : 
; 631  :             cpu_length -= dist;

  00272	8b 44 24 48	 mov	 eax, DWORD PTR dist$[rsp]
  00276	8b 4c 24 38	 mov	 ecx, DWORD PTR cpu_length$[rsp]
  0027a	2b c8		 sub	 ecx, eax
  0027c	8b c1		 mov	 eax, ecx
  0027e	89 44 24 38	 mov	 DWORD PTR cpu_length$[rsp], eax

; 632  :             dist = cpu_length;

  00282	8b 44 24 38	 mov	 eax, DWORD PTR cpu_length$[rsp]
  00286	89 44 24 48	 mov	 DWORD PTR dist$[rsp], eax

; 633  : 
; 634  :         } /* end while */

  0028a	e9 e6 fe ff ff	 jmp	 $LN5@s370_searc
$LN6@s370_searc:

; 635  : 
; 636  :         /* The CPU determine number of bytes has been reached. Set R2
; 637  :            to point to next character of operand, set CC=3 and exit */
; 638  :         SET_GR_A( r2, regs, addr2 );

  0028f	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  00294	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0029c	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  002a0	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 639  :         regs->psw.cc = 3;

  002a7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002af	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 640  :         return;

  002b3	e9 29 01 00 00	 jmp	 $LN1@s370_searc
$LN15@s370_searc:

; 641  :     } /* end if unlikely() */
; 642  : 
; 643  :     /* We don't cross a page boundary with the minimum length, so
; 644  :        extend the CPU determined length out to the end of the page */
; 645  :     cpu_length = PAGEFRAME_PAGESIZE - (addr2 & PAGEFRAME_BYTEMASK);

  002b8	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  002bc	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  002c1	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  002c6	2b c8		 sub	 ecx, eax
  002c8	8b c1		 mov	 eax, ecx
  002ca	89 44 24 38	 mov	 DWORD PTR cpu_length$[rsp], eax

; 646  : 
; 647  :     /* We need to check the boundary condition
; 648  :        BEFORE attempting to access storage,
; 649  :        because if the boundary condition is met,
; 650  :        there is no further need to access storage.
; 651  :     */
; 652  :     /* NOTE: "When the address in general register R1 is less
; 653  :        than the address in general register R2, condition code
; 654  :        2 can be set only if the operand wraps around from the
; 655  :        top of storage to location 0."  The below comparison
; 656  :        for == is thus correct.
; 657  :     */
; 658  :     if (addr2 == addr1)

  002ce	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  002d2	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  002d6	75 11		 jne	 SHORT $LN19@s370_searc

; 659  :     {
; 660  :         regs->psw.cc = 2;

  002d8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002e0	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 661  :         return;

  002e4	e9 f8 00 00 00	 jmp	 $LN1@s370_searc
$LN19@s370_searc:

; 662  :     }
; 663  : 
; 664  :     main2 = MADDRL(addr2, cpu_length, r2, regs, ACCTYPE_READ, regs->psw.pkey );

  002e9	48 63 44 24 38	 movsxd	 rax, DWORD PTR cpu_length$[rsp]
  002ee	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002f6	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  002fa	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002fe	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00306	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0030e	44 8b 44 24 40	 mov	 r8d, DWORD PTR r2$[rsp]
  00313	48 8b d0	 mov	 rdx, rax
  00316	8b 4c 24 30	 mov	 ecx, DWORD PTR addr2$[rsp]
  0031a	e8 00 00 00 00	 call	 s370_maddr_l
  0031f	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 665  :     for (i=0; i < cpu_length; i++)

  00324	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0032c	eb 0a		 jmp	 SHORT $LN12@s370_searc
$LN10@s370_searc:
  0032e	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  00332	ff c0		 inc	 eax
  00334	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN12@s370_searc:
  00338	8b 44 24 38	 mov	 eax, DWORD PTR cpu_length$[rsp]
  0033c	39 44 24 3c	 cmp	 DWORD PTR i$[rsp], eax
  00340	7d 7b		 jge	 SHORT $LN11@s370_searc

; 666  :     {
; 667  :         /* If operand end address has been reached, return
; 668  :            CC=2 and leave the R1 and R2 registers unchanged
; 669  :         */
; 670  :         /* NOTE: "When the address in general register R1 is less
; 671  :            than the address in general register R2, condition code
; 672  :            2 can be set only if the operand wraps around from the
; 673  :            top of storage to location 0."  The below comparison
; 674  :            for == is thus correct.
; 675  :         */
; 676  :         if (addr2 == addr1)

  00342	8b 44 24 44	 mov	 eax, DWORD PTR addr1$[rsp]
  00346	39 44 24 30	 cmp	 DWORD PTR addr2$[rsp], eax
  0034a	75 11		 jne	 SHORT $LN20@s370_searc

; 677  :         {
; 678  :             regs->psw.cc = 2;

  0034c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00354	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 679  :             return;

  00358	e9 84 00 00 00	 jmp	 $LN1@s370_searc
$LN20@s370_searc:

; 680  :         }
; 681  : 
; 682  :         /* If the terminating character was found, return
; 683  :            CC=1 and load the address of the character in R1 */
; 684  :         if (*main2 == termchar)

  0035d	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  00362	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00365	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR termchar$[rsp]
  0036a	3b c1		 cmp	 eax, ecx
  0036c	75 26		 jne	 SHORT $LN21@s370_searc

; 685  :         {
; 686  :             SET_GR_A( r1, regs, addr2 );

  0036e	48 63 44 24 4c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00373	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0037b	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  0037f	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 687  :             regs->psw.cc = 1;

  00386	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0038e	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 688  :             return;

  00392	eb 4d		 jmp	 SHORT $LN1@s370_searc
$LN21@s370_searc:

; 689  :         }
; 690  : 
; 691  :         /* Bump operand-2 */
; 692  :         main2++;

  00394	48 8b 44 24 50	 mov	 rax, QWORD PTR main2$[rsp]
  00399	48 ff c0	 inc	 rax
  0039c	48 89 44 24 50	 mov	 QWORD PTR main2$[rsp], rax

; 693  :         addr2++;

  003a1	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  003a5	ff c0		 inc	 eax
  003a7	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 694  :         addr2 &= ADDRESS_MAXWRAP( regs );

  003ab	8b 44 24 30	 mov	 eax, DWORD PTR addr2$[rsp]
  003af	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003b4	89 44 24 30	 mov	 DWORD PTR addr2$[rsp], eax

; 695  : 
; 696  :     } /* end for(i) */

  003b8	e9 71 ff ff ff	 jmp	 $LN10@s370_searc
$LN11@s370_searc:

; 697  : 
; 698  :     /* The CPU determine number of bytes has been reached.
; 699  :        Set R2 to point to next character of operand-2 and
; 700  :        return CC=3.
; 701  :     */
; 702  :     SET_GR_A( r2, regs, addr2 );

  003bd	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  003c2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003ca	8b 54 24 30	 mov	 edx, DWORD PTR addr2$[rsp]
  003ce	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 703  :     regs->psw.cc = 3;

  003d5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003dd	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@s370_searc:

; 704  : 
; 705  : } /* end DEF_INST(search_string) */

  003e1	48 83 c4 78	 add	 rsp, 120		; 00000078H
  003e5	c3		 ret	 0
s370_search_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
h2$ = 32
i2$ = 36
h1$ = 40
temp$1 = 44
tv138 = 48
tv139 = 52
tv140 = 56
r1$ = 60
opcd$ = 64
inst$ = 96
regs$ = 104
s370_test_under_mask_low PROC

; 1787 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1788 : int     r1;                             /* Register number           */
; 1789 : int     opcd;                           /* Opcode                    */
; 1790 : U16     i2;                             /* 16-bit operand values     */
; 1791 : U16     h1;                             /* 16-bit operand values     */
; 1792 : U16     h2;                             /* 16-bit operand values     */
; 1793 : 
; 1794 :     RI(inst, regs, r1, opcd, i2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 2c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002c	66 89 44 24 24	 mov	 WORD PTR i2$[rsp], ax
  00031	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00035	c1 e8 10	 shr	 eax, 16
  00038	83 e0 0f	 and	 eax, 15
  0003b	89 44 24 40	 mov	 DWORD PTR opcd$[rsp], eax
  0003f	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 14	 shr	 eax, 20
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_test_:
  0004d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00052	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00056	48 83 c0 04	 add	 rax, 4
  0005a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00063	33 c0		 xor	 eax, eax
  00065	83 f8 04	 cmp	 eax, 4
  00068	74 0c		 je	 SHORT $LN8@s370_test_
  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s370_test_:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d1		 jne	 SHORT $LN4@s370_test_

; 1795 : 
; 1796 :     /* AND register bits 16-31 with immediate operand */
; 1797 :     h1 = i2 & regs->GR_LHL(r1);

  0007c	0f b7 44 24 24	 movzx	 eax, WORD PTR i2$[rsp]
  00081	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0008b	0f b7 8c ca 80
	02 00 00	 movzx	 ecx, WORD PTR [rdx+rcx*8+640]
  00093	23 c1		 and	 eax, ecx
  00095	66 89 44 24 28	 mov	 WORD PTR h1$[rsp], ax

; 1798 : 
; 1799 :     /* Isolate leftmost bit of immediate operand */
; 1800 :     for ( h2 = 0x8000; h2 != 0 && (h2 & i2) == 0; h2 >>= 1 );

  0009a	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0009f	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
  000a4	eb 0d		 jmp	 SHORT $LN7@s370_test_
$LN5@s370_test_:
  000a6	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000ab	66 d1 e8	 shr	 ax, 1
  000ae	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
$LN7@s370_test_:
  000b3	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 12		 je	 SHORT $LN6@s370_test_
  000bc	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000c1	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000c6	23 c1		 and	 eax, ecx
  000c8	85 c0		 test	 eax, eax
  000ca	75 02		 jne	 SHORT $LN6@s370_test_
  000cc	eb d8		 jmp	 SHORT $LN5@s370_test_
$LN6@s370_test_:

; 1801 : 
; 1802 :     /* Set condition code according to result */
; 1803 :     regs->psw.cc =

  000ce	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000d3	85 c0		 test	 eax, eax
  000d5	75 0a		 jne	 SHORT $LN14@s370_test_
  000d7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  000df	eb 4a		 jmp	 SHORT $LN15@s370_test_
$LN14@s370_test_:
  000e1	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000e6	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000eb	3b c1		 cmp	 eax, ecx
  000ed	75 0a		 jne	 SHORT $LN12@s370_test_
  000ef	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR tv139[rsp], 3
  000f7	eb 2a		 jmp	 SHORT $LN13@s370_test_
$LN12@s370_test_:
  000f9	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000fe	0f b7 4c 24 20	 movzx	 ecx, WORD PTR h2$[rsp]
  00103	23 c1		 and	 eax, ecx
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN10@s370_test_
  00109	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00111	eb 08		 jmp	 SHORT $LN11@s370_test_
$LN10@s370_test_:
  00113	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR tv138[rsp], 2
$LN11@s370_test_:
  0011b	8b 44 24 30	 mov	 eax, DWORD PTR tv138[rsp]
  0011f	89 44 24 34	 mov	 DWORD PTR tv139[rsp], eax
$LN13@s370_test_:
  00123	8b 44 24 34	 mov	 eax, DWORD PTR tv139[rsp]
  00127	89 44 24 38	 mov	 DWORD PTR tv140[rsp], eax
$LN15@s370_test_:
  0012b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00130	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv140[rsp]
  00135	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1804 :             ( h1 == 0 ) ? 0 :           /* result all zeroes */
; 1805 :             ( h1 == i2) ? 3 :           /* result all ones   */
; 1806 :             ((h1 & h2) == 0) ? 1 :      /* leftmost bit zero */
; 1807 :             2;                          /* leftmost bit one  */
; 1808 : 
; 1809 : }

  00138	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013c	c3		 ret	 0
s370_test_under_mask_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
h2$ = 32
i2$ = 36
h1$ = 40
temp$1 = 44
tv138 = 48
tv139 = 52
tv140 = 56
r1$ = 60
opcd$ = 64
inst$ = 96
regs$ = 104
s370_test_under_mask_high PROC

; 1757 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1758 : int     r1;                             /* Register number           */
; 1759 : int     opcd;                           /* Opcode                    */
; 1760 : U16     i2;                             /* 16-bit operand values     */
; 1761 : U16     h1;                             /* 16-bit operand values     */
; 1762 : U16     h2;                             /* 16-bit operand values     */
; 1763 : 
; 1764 :     RI(inst, regs, r1, opcd, i2);

  0000e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR inst$[rsp]
  00013	e8 00 00 00 00	 call	 fetch_fw_noswap
  00018	8b c8		 mov	 ecx, eax
  0001a	e8 00 00 00 00	 call	 _byteswap_ulong
  0001f	89 44 24 2c	 mov	 DWORD PTR temp$1[rsp], eax
  00023	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00027	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0002c	66 89 44 24 24	 mov	 WORD PTR i2$[rsp], ax
  00031	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00035	c1 e8 10	 shr	 eax, 16
  00038	83 e0 0f	 and	 eax, 15
  0003b	89 44 24 40	 mov	 DWORD PTR opcd$[rsp], eax
  0003f	8b 44 24 2c	 mov	 eax, DWORD PTR temp$1[rsp]
  00043	c1 e8 14	 shr	 eax, 20
  00046	83 e0 0f	 and	 eax, 15
  00049	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_test_:
  0004d	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00052	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00056	48 83 c0 04	 add	 rax, 4
  0005a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0005f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00063	33 c0		 xor	 eax, eax
  00065	83 f8 04	 cmp	 eax, 4
  00068	74 0c		 je	 SHORT $LN8@s370_test_
  0006a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s370_test_:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 d1		 jne	 SHORT $LN4@s370_test_

; 1765 : 
; 1766 :     /* AND register bits 0-15 with immediate operand */
; 1767 :     h1 = i2 & regs->GR_LHH(r1);

  0007c	0f b7 44 24 24	 movzx	 eax, WORD PTR i2$[rsp]
  00081	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00086	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  0008b	0f b7 8c ca 82
	02 00 00	 movzx	 ecx, WORD PTR [rdx+rcx*8+642]
  00093	23 c1		 and	 eax, ecx
  00095	66 89 44 24 28	 mov	 WORD PTR h1$[rsp], ax

; 1768 : 
; 1769 :     /* Isolate leftmost bit of immediate operand */
; 1770 :     for ( h2 = 0x8000; h2 != 0 && (h2 & i2) == 0; h2 >>= 1 );

  0009a	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  0009f	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
  000a4	eb 0d		 jmp	 SHORT $LN7@s370_test_
$LN5@s370_test_:
  000a6	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000ab	66 d1 e8	 shr	 ax, 1
  000ae	66 89 44 24 20	 mov	 WORD PTR h2$[rsp], ax
$LN7@s370_test_:
  000b3	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000b8	85 c0		 test	 eax, eax
  000ba	74 12		 je	 SHORT $LN6@s370_test_
  000bc	0f b7 44 24 20	 movzx	 eax, WORD PTR h2$[rsp]
  000c1	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000c6	23 c1		 and	 eax, ecx
  000c8	85 c0		 test	 eax, eax
  000ca	75 02		 jne	 SHORT $LN6@s370_test_
  000cc	eb d8		 jmp	 SHORT $LN5@s370_test_
$LN6@s370_test_:

; 1771 : 
; 1772 :     /* Set condition code according to result */
; 1773 :     regs->psw.cc =

  000ce	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000d3	85 c0		 test	 eax, eax
  000d5	75 0a		 jne	 SHORT $LN14@s370_test_
  000d7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  000df	eb 4a		 jmp	 SHORT $LN15@s370_test_
$LN14@s370_test_:
  000e1	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000e6	0f b7 4c 24 24	 movzx	 ecx, WORD PTR i2$[rsp]
  000eb	3b c1		 cmp	 eax, ecx
  000ed	75 0a		 jne	 SHORT $LN12@s370_test_
  000ef	c7 44 24 34 03
	00 00 00	 mov	 DWORD PTR tv139[rsp], 3
  000f7	eb 2a		 jmp	 SHORT $LN13@s370_test_
$LN12@s370_test_:
  000f9	0f b7 44 24 28	 movzx	 eax, WORD PTR h1$[rsp]
  000fe	0f b7 4c 24 20	 movzx	 ecx, WORD PTR h2$[rsp]
  00103	23 c1		 and	 eax, ecx
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN10@s370_test_
  00109	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00111	eb 08		 jmp	 SHORT $LN11@s370_test_
$LN10@s370_test_:
  00113	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR tv138[rsp], 2
$LN11@s370_test_:
  0011b	8b 44 24 30	 mov	 eax, DWORD PTR tv138[rsp]
  0011f	89 44 24 34	 mov	 DWORD PTR tv139[rsp], eax
$LN13@s370_test_:
  00123	8b 44 24 34	 mov	 eax, DWORD PTR tv139[rsp]
  00127	89 44 24 38	 mov	 DWORD PTR tv140[rsp], eax
$LN15@s370_test_:
  0012b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  00130	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR tv140[rsp]
  00135	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 1774 :             ( h1 == 0 ) ? 0 :           /* result all zeroes */
; 1775 :             ( h1 == i2) ? 3 :           /* result all ones   */
; 1776 :             ((h1 & h2) == 0) ? 1 :      /* leftmost bit zero */
; 1777 :             2;                          /* leftmost bit one  */
; 1778 : }

  00138	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013c	c3		 ret	 0
s370_test_under_mask_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
tbyte$ = 0
addr1$ = 4
r1$ = 8
len1$ = 12
len$ = 16
translen$ = 20
cc$ = 24
i$1 = 28
r2$ = 32
main1$ = 40
addr2$ = 48
i$ = 56
trtab$ = 64
__$ArrayPad$ = 320
inst$ = 464
regs$ = 472
s370_translate_extended PROC

; 1994 : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec c0 01
	00 00		 sub	 rsp, 448		; 000001c0H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 40 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1995 : int     r1, r2;                     /* Values of R fields            */
; 1996 : U64     i;                          /* Loop counter                  */
; 1997 : int     cc = 0;                     /* Condition code                */

  0002c	c7 45 18 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 1998 : VADR    addr1, addr2;               /* Operand addresses             */
; 1999 : GREG    len1;                       /* Operand length                */
; 2000 : BYTE    tbyte;                      /* Test byte                     */
; 2001 : CACHE_ALIGN BYTE  trtab[256];       /* Translate table               */
; 2002 : GREG    len;                        /* on page translate length      */
; 2003 : int     translen = 0;               /* translated length             */

  00033	c7 45 14 00 00
	00 00		 mov	 DWORD PTR translen$[rbp], 0

; 2004 : BYTE   *main1;                      /* Mainstor addresses            */
; 2005 : 
; 2006 :     RRE(inst, regs, r1, r2);

  0003a	b8 01 00 00 00	 mov	 eax, 1
  0003f	48 6b c0 03	 imul	 rax, rax, 3
  00043	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0004b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0004f	89 45 1c	 mov	 DWORD PTR i$1[rbp], eax
  00052	8b 45 1c	 mov	 eax, DWORD PTR i$1[rbp]
  00055	83 e0 0f	 and	 eax, 15
  00058	89 45 20	 mov	 DWORD PTR r2$[rbp], eax
  0005b	8b 45 1c	 mov	 eax, DWORD PTR i$1[rbp]
  0005e	c1 f8 04	 sar	 eax, 4
  00061	83 e0 0f	 and	 eax, 15
  00064	89 45 08	 mov	 DWORD PTR r1$[rbp], eax
$LN4@s370_trans:
  00067	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00073	48 83 c0 04	 add	 rax, 4
  00077	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00083	33 c0		 xor	 eax, eax
  00085	83 f8 04	 cmp	 eax, 4
  00088	74 0f		 je	 SHORT $LN8@s370_trans
  0008a	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00092	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s370_trans:
  00099	33 c0		 xor	 eax, eax
  0009b	85 c0		 test	 eax, eax
  0009d	75 c8		 jne	 SHORT $LN4@s370_trans

; 2007 :     PER_ZEROADDR_LCHECK( regs, r1, r1+1 );
; 2008 :     PER_ZEROADDR_CHECK( regs, r2 );
; 2009 : 
; 2010 :     TXFC_INSTR_CHECK( regs );
; 2011 :     ODD_CHECK(r1, regs);

  0009f	8b 45 08	 mov	 eax, DWORD PTR r1$[rbp]
  000a2	83 e0 01	 and	 eax, 1
  000a5	85 c0		 test	 eax, eax
  000a7	74 1b		 je	 SHORT $LN9@s370_trans
  000a9	ba 06 00 00 00	 mov	 edx, 6
  000ae	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b6	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000be	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@s370_trans:

; 2012 : 
; 2013 :     /* Load first operand length from R1+1 */
; 2014 :     len1 = GR_A(r1+1, regs);

  000c4	8b 45 08	 mov	 eax, DWORD PTR r1$[rbp]
  000c7	ff c0		 inc	 eax
  000c9	48 98		 cdqe
  000cb	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000da	89 45 0c	 mov	 DWORD PTR len1$[rbp], eax

; 2015 : 
; 2016 :     /* fast exit path */
; 2017 :     if (len1 == 0) {

  000dd	83 7d 0c 00	 cmp	 DWORD PTR len1$[rbp], 0
  000e1	75 11		 jne	 SHORT $LN10@s370_trans

; 2018 :         regs->psw.cc =  0;

  000e3	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000eb	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2019 :         return;

  000ef	e9 99 01 00 00	 jmp	 $LN1@s370_trans
$LN10@s370_trans:

; 2020 :     }
; 2021 : 
; 2022 :     /* Load the operand addresses */
; 2023 :     addr1 = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000f4	48 63 45 08	 movsxd	 rax, DWORD PTR r1$[rbp]
  000f8	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00100	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00107	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0010c	89 45 04	 mov	 DWORD PTR addr1$[rbp], eax

; 2024 :     addr2 = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  0010f	48 63 45 20	 movsxd	 rax, DWORD PTR r2$[rbp]
  00113	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00122	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00127	89 45 30	 mov	 DWORD PTR addr2$[rbp], eax

; 2025 : 
; 2026 :     /* Load the test byte from bits 24-31 of register 0 */
; 2027 :     tbyte = regs->GR_LHLCL(0);

  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 00	 imul	 rax, rax, 0
  00133	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0013b	0f b6 84 01 80
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+640]
  00143	88 45 00	 mov	 BYTE PTR tbyte$[rbp], al

; 2028 : 
; 2029 :     /* Fetch second operand into work area.
; 2030 :        [7.5.101] Access exceptions for all 256 bytes of the second
; 2031 :        operand may be recognized, even if not all bytes are used */
; 2032 :     ARCH_DEP(vfetchc) ( trtab, 255, addr2, r2, regs );

  00146	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0014e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00153	44 8b 4d 20	 mov	 r9d, DWORD PTR r2$[rbp]
  00157	44 8b 45 30	 mov	 r8d, DWORD PTR addr2$[rbp]
  0015b	b2 ff		 mov	 dl, 255			; 000000ffH
  0015d	48 8d 4d 40	 lea	 rcx, QWORD PTR trtab$[rbp]
  00161	e8 00 00 00 00	 call	 s370_vfetchc

; 2033 : 
; 2034 :     /* Process first operand from left to right */
; 2035 :     /*  POP : SA22-7832-13 Page 7-422
; 2036 :         The amount of processing that results in the setting
; 2037 :         of condition code 3 is determined by the CPU on the
; 2038 :         basis of improving system performance, and it may
; 2039 :         be a different amount each time the instruction is
; 2040 :         executed.
; 2041 : 
; 2042 :         CC=3 :  Processed first operand to end of page and
; 2043 :                 indicate more data remaining.
; 2044 :     */
; 2045 : 
; 2046 :     /* get on page translate length */
; 2047 :     len = PAGEFRAME_PAGESIZE - (addr1 & PAGEFRAME_BYTEMASK);

  00166	8b 45 04	 mov	 eax, DWORD PTR addr1$[rbp]
  00169	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0016e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00173	2b c8		 sub	 ecx, eax
  00175	8b c1		 mov	 eax, ecx
  00177	89 45 10	 mov	 DWORD PTR len$[rbp], eax

; 2048 :     if (len1 > len)

  0017a	8b 45 10	 mov	 eax, DWORD PTR len$[rbp]
  0017d	39 45 0c	 cmp	 DWORD PTR len1$[rbp], eax
  00180	76 09		 jbe	 SHORT $LN11@s370_trans

; 2049 :     {
; 2050 :        cc = 3;        /* maybe partial data */

  00182	c7 45 18 03 00
	00 00		 mov	 DWORD PTR cc$[rbp], 3

; 2051 :     }

  00189	eb 0d		 jmp	 SHORT $LN12@s370_trans
$LN11@s370_trans:

; 2052 :     else
; 2053 :     {
; 2054 :       len = len1;     /* all of operand 1 is on page */

  0018b	8b 45 0c	 mov	 eax, DWORD PTR len1$[rbp]
  0018e	89 45 10	 mov	 DWORD PTR len$[rbp], eax

; 2055 :       cc = 0;         /* can't be a cc=3, assume 0 */

  00191	c7 45 18 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0
$LN12@s370_trans:

; 2056 :     }
; 2057 : 
; 2058 :     /* Get operand 1 on page address */
; 2059 :     main1 = MADDRL( addr1, len, r1, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00198	8b 45 10	 mov	 eax, DWORD PTR len$[rbp]
  0019b	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001a3	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  001a7	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001ab	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001b3	4c 8b 8c 24 d8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001bb	44 8b 45 08	 mov	 r8d, DWORD PTR r1$[rbp]
  001bf	8b d0		 mov	 edx, eax
  001c1	8b 4d 04	 mov	 ecx, DWORD PTR addr1$[rbp]
  001c4	e8 00 00 00 00	 call	 s370_maddr_l
  001c9	48 89 45 28	 mov	 QWORD PTR main1$[rbp], rax

; 2060 : 
; 2061 :     /* translate on page data */
; 2062 :     for (i = 0; i < len; i++)

  001cd	48 c7 45 38 00
	00 00 00	 mov	 QWORD PTR i$[rbp], 0
  001d5	eb 0b		 jmp	 SHORT $LN7@s370_trans
$LN5@s370_trans:
  001d7	48 8b 45 38	 mov	 rax, QWORD PTR i$[rbp]
  001db	48 ff c0	 inc	 rax
  001de	48 89 45 38	 mov	 QWORD PTR i$[rbp], rax
$LN7@s370_trans:
  001e2	8b 45 10	 mov	 eax, DWORD PTR len$[rbp]
  001e5	48 39 45 38	 cmp	 QWORD PTR i$[rbp], rax
  001e9	73 3f		 jae	 SHORT $LN6@s370_trans

; 2063 :     {
; 2064 :         /* If equal to test byte, exit with condition code 1 */
; 2065 :         if (*main1 == tbyte)

  001eb	48 8b 45 28	 mov	 rax, QWORD PTR main1$[rbp]
  001ef	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001f2	0f b6 4d 00	 movzx	 ecx, BYTE PTR tbyte$[rbp]
  001f6	3b c1		 cmp	 eax, ecx
  001f8	75 09		 jne	 SHORT $LN13@s370_trans

; 2066 :         {
; 2067 :             cc = 1;

  001fa	c7 45 18 01 00
	00 00		 mov	 DWORD PTR cc$[rbp], 1

; 2068 :             break;

  00201	eb 27		 jmp	 SHORT $LN6@s370_trans
$LN13@s370_trans:

; 2069 :         }
; 2070 : 
; 2071 :         /* Load indicated byte from translate table */
; 2072 :         *main1 = trtab[ *main1 ];

  00203	48 8b 45 28	 mov	 rax, QWORD PTR main1$[rbp]
  00207	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0020a	48 8b 4d 28	 mov	 rcx, QWORD PTR main1$[rbp]
  0020e	0f b6 44 05 40	 movzx	 eax, BYTE PTR trtab$[rbp+rax]
  00213	88 01		 mov	 BYTE PTR [rcx], al

; 2073 : 
; 2074 :         main1++;

  00215	48 8b 45 28	 mov	 rax, QWORD PTR main1$[rbp]
  00219	48 ff c0	 inc	 rax
  0021c	48 89 45 28	 mov	 QWORD PTR main1$[rbp], rax

; 2075 :         translen++;

  00220	8b 45 14	 mov	 eax, DWORD PTR translen$[rbp]
  00223	ff c0		 inc	 eax
  00225	89 45 14	 mov	 DWORD PTR translen$[rbp], eax

; 2076 :     } /* end for(i) */

  00228	eb ad		 jmp	 SHORT $LN5@s370_trans
$LN6@s370_trans:

; 2077 : 
; 2078 :     /* Update the registers */
; 2079 :     addr1 += translen;

  0022a	8b 45 14	 mov	 eax, DWORD PTR translen$[rbp]
  0022d	8b 4d 04	 mov	 ecx, DWORD PTR addr1$[rbp]
  00230	03 c8		 add	 ecx, eax
  00232	8b c1		 mov	 eax, ecx
  00234	89 45 04	 mov	 DWORD PTR addr1$[rbp], eax

; 2080 :     addr1 &= ADDRESS_MAXWRAP(regs);

  00237	8b 45 04	 mov	 eax, DWORD PTR addr1$[rbp]
  0023a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0023f	89 45 04	 mov	 DWORD PTR addr1$[rbp], eax

; 2081 :     SET_GR_A(r1, regs, addr1);

  00242	48 63 45 08	 movsxd	 rax, DWORD PTR r1$[rbp]
  00246	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0024e	8b 55 04	 mov	 edx, DWORD PTR addr1$[rbp]
  00251	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2082 : 
; 2083 :     len1  -= translen;

  00258	8b 45 14	 mov	 eax, DWORD PTR translen$[rbp]
  0025b	8b 4d 0c	 mov	 ecx, DWORD PTR len1$[rbp]
  0025e	2b c8		 sub	 ecx, eax
  00260	8b c1		 mov	 eax, ecx
  00262	89 45 0c	 mov	 DWORD PTR len1$[rbp], eax

; 2084 :     SET_GR_A(r1+1, regs, len1);

  00265	8b 45 08	 mov	 eax, DWORD PTR r1$[rbp]
  00268	ff c0		 inc	 eax
  0026a	48 98		 cdqe
  0026c	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00274	8b 55 0c	 mov	 edx, DWORD PTR len1$[rbp]
  00277	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2085 : 
; 2086 :     /* Set condition code */
; 2087 :     regs->psw.cc =  cc;

  0027e	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00286	0f b6 4d 18	 movzx	 ecx, BYTE PTR cc$[rbp]
  0028a	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN1@s370_trans:

; 2088 : 
; 2089 : } /* end translate_extended */

  0028d	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00294	48 33 cc	 xor	 rcx, rsp
  00297	e8 00 00 00 00	 call	 __security_check_cookie
  0029c	48 81 c4 c0 01
	00 00		 add	 rsp, 448		; 000001c0H
  002a3	5d		 pop	 rbp
  002a4	c3		 ret	 0
s370_translate_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_translate_and_test_reverse_extended PROC

; 3411 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3412 :     ARCH_DEP( translate_and_test_xxx_extended )( inst, regs );

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_translate_and_test_xxx_extended

; 3413 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_translate_and_test_reverse_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_translate_and_test_extended PROC

; 3403 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3404 :     ARCH_DEP( translate_and_test_xxx_extended )( inst, regs );

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_translate_and_test_xxx_extended

; 3405 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_translate_and_test_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
effective_addr1$ = 0
sbyte$ = 4
effective_addr2$ = 8
temp$1 = 12
b2$ = 16
i$ = 20
b1$ = 24
m1$ = 32
tv139 = 40
len$ = 44
tv208 = 48
cc$ = 52
p_fct$ = 56
m1pg$ = 64
trtab$ = 128
__$ArrayPad$ = 384
inst$ = 528
regs$ = 536
s370_translate_and_test_reverse PROC

; 3039 : {

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  00012	48 8d 6c 24 70	 lea	 rbp, QWORD PTR [rsp+112]
  00017	48 83 e5 c0	 and	 rbp, -64		; ffffffffffffffc0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 85 80 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3040 :     int b1, b2;                        // Values of base field
; 3041 :     int cc = 0;                        // Condition code

  0002c	c7 45 34 00 00
	00 00		 mov	 DWORD PTR cc$[rbp], 0

; 3042 :     VADR effective_addr1;
; 3043 :     VADR effective_addr2;              // Effective addresses
; 3044 :     int i;                             // Integer work areas
; 3045 :     int len;                           // Length byte
; 3046 :     BYTE sbyte;                        // Byte work areas
; 3047 : 
; 3048 :     CACHE_ALIGN BYTE  trtab[256];      // Translate table - copy
; 3049 :     BYTE*   p_fct;                     // ptr to FC Table
; 3050 :     BYTE*   m1;                        // operand mainstor addresses
; 3051 :     BYTE   *m1pg;                      // operand page
; 3052 : 
; 3053 :     SS_L(inst, regs, len, b1, effective_addr1, b2, effective_addr2);

  00033	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0003b	48 83 c0 02	 add	 rax, 2
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 fetch_fw_noswap
  00047	8b c8		 mov	 ecx, eax
  00049	e8 00 00 00 00	 call	 _byteswap_ulong
  0004e	89 45 0c	 mov	 DWORD PTR temp$1[rbp], eax
  00051	8b 45 0c	 mov	 eax, DWORD PTR temp$1[rbp]
  00054	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00059	89 45 08	 mov	 DWORD PTR effective_addr2$[rbp], eax
  0005c	8b 45 0c	 mov	 eax, DWORD PTR temp$1[rbp]
  0005f	c1 e8 0c	 shr	 eax, 12
  00062	83 e0 0f	 and	 eax, 15
  00065	89 45 10	 mov	 DWORD PTR b2$[rbp], eax
  00068	8b 45 0c	 mov	 eax, DWORD PTR temp$1[rbp]
  0006b	c1 e8 10	 shr	 eax, 16
  0006e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00073	89 45 00	 mov	 DWORD PTR effective_addr1$[rbp], eax
  00076	8b 45 0c	 mov	 eax, DWORD PTR temp$1[rbp]
  00079	c1 e8 1c	 shr	 eax, 28
  0007c	83 e0 0f	 and	 eax, 15
  0007f	89 45 18	 mov	 DWORD PTR b1$[rbp], eax
  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00093	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00097	89 45 2c	 mov	 DWORD PTR len$[rbp], eax
  0009a	83 7d 18 00	 cmp	 DWORD PTR b1$[rbp], 0
  0009e	74 28		 je	 SHORT $LN8@s370_trans
  000a0	48 63 45 18	 movsxd	 rax, DWORD PTR b1$[rbp]
  000a4	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ac	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b3	8b 4d 00	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  000b6	03 c8		 add	 ecx, eax
  000b8	8b c1		 mov	 eax, ecx
  000ba	89 45 00	 mov	 DWORD PTR effective_addr1$[rbp], eax
  000bd	8b 45 00	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  000c0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c5	89 45 00	 mov	 DWORD PTR effective_addr1$[rbp], eax
$LN8@s370_trans:
  000c8	83 7d 10 00	 cmp	 DWORD PTR b2$[rbp], 0
  000cc	74 28		 je	 SHORT $LN9@s370_trans
  000ce	48 63 45 10	 movsxd	 rax, DWORD PTR b2$[rbp]
  000d2	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000da	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  000e4	03 c8		 add	 ecx, eax
  000e6	8b c1		 mov	 eax, ecx
  000e8	89 45 08	 mov	 DWORD PTR effective_addr2$[rbp], eax
  000eb	8b 45 08	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  000ee	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000f3	89 45 08	 mov	 DWORD PTR effective_addr2$[rbp], eax
$LN9@s370_trans:
$LN4@s370_trans:
  000f6	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fe	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00102	48 83 c0 06	 add	 rax, 6
  00106	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00112	33 c0		 xor	 eax, eax
  00114	83 f8 06	 cmp	 eax, 6
  00117	74 0f		 je	 SHORT $LN10@s370_trans
  00119	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00121	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s370_trans:
  00128	33 c0		 xor	 eax, eax
  0012a	85 c0		 test	 eax, eax
  0012c	75 c8		 jne	 SHORT $LN4@s370_trans

; 3054 :     PER_ZEROADDR_XCHECK2( regs, b1, b2 );
; 3055 : 
; 3056 :     TXFC_INSTR_CHECK( regs );
; 3057 : 
; 3058 :     /* Get pointer to Function Code table or copy */
; 3059 :     if (CROSSPAGE( effective_addr2, 256-1))

  0012e	8b 45 08	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  00131	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00136	3d 00 07 00 00	 cmp	 eax, 1792		; 00000700H
  0013b	7e 09		 jle	 SHORT $LN20@s370_trans
  0013d	c7 45 28 01 00
	00 00		 mov	 DWORD PTR tv139[rbp], 1
  00144	eb 07		 jmp	 SHORT $LN21@s370_trans
$LN20@s370_trans:
  00146	c7 45 28 00 00
	00 00		 mov	 DWORD PTR tv139[rbp], 0
$LN21@s370_trans:
  0014d	83 7d 28 00	 cmp	 DWORD PTR tv139[rbp], 0
  00151	74 30		 je	 SHORT $LN11@s370_trans

; 3060 :     {
; 3061 :         ARCH_DEP( vfetchc )( trtab, 256-1, effective_addr2, b2, regs );

  00153	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0015b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00160	44 8b 4d 10	 mov	 r9d, DWORD PTR b2$[rbp]
  00164	44 8b 45 08	 mov	 r8d, DWORD PTR effective_addr2$[rbp]
  00168	b2 ff		 mov	 dl, 255			; 000000ffH
  0016a	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR trtab$[rbp]
  00171	e8 00 00 00 00	 call	 s370_vfetchc

; 3062 :         p_fct = (BYTE *) &trtab;

  00176	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR trtab$[rbp]
  0017d	48 89 45 38	 mov	 QWORD PTR p_fct$[rbp], rax

; 3063 :     }

  00181	eb 35		 jmp	 SHORT $LN12@s370_trans
$LN11@s370_trans:

; 3064 :     else
; 3065 :     {
; 3066 :         p_fct = MADDRL( effective_addr2, 256, b2, regs, ACCTYPE_READ, regs->psw.pkey );

  00183	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0018b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0018f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00193	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0019b	4c 8b 8c 24 18
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001a3	44 8b 45 10	 mov	 r8d, DWORD PTR b2$[rbp]
  001a7	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  001ac	8b 4d 08	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  001af	e8 00 00 00 00	 call	 s370_maddr_l
  001b4	48 89 45 38	 mov	 QWORD PTR p_fct$[rbp], rax
$LN12@s370_trans:

; 3067 :     }
; 3068 : 
; 3069 :     /* Get mainstor address to test byte */
; 3070 :     m1 = MADDRL( effective_addr1, 1, b1, regs, ACCTYPE_READ, regs->psw.pkey );

  001b8	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001c0	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  001c4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  001c8	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001d0	4c 8b 8c 24 18
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001d8	44 8b 45 18	 mov	 r8d, DWORD PTR b1$[rbp]
  001dc	ba 01 00 00 00	 mov	 edx, 1
  001e1	8b 4d 00	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  001e4	e8 00 00 00 00	 call	 s370_maddr_l
  001e9	48 89 45 20	 mov	 QWORD PTR m1$[rbp], rax

; 3071 :     m1pg = MAINSTOR_PAGEBASE ( m1 );

  001ed	48 8b 45 20	 mov	 rax, QWORD PTR m1$[rbp]
  001f1	48 25 00 f8 ff
	7f		 and	 rax, 2147481600		; 7ffff800H
  001f7	48 89 45 40	 mov	 QWORD PTR m1pg$[rbp], rax

; 3072 : 
; 3073 :     /* Process first operand from right to left*/
; 3074 :     for(i = 0; i <= len; i++)

  001fb	c7 45 14 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00202	eb 08		 jmp	 SHORT $LN7@s370_trans
$LN5@s370_trans:
  00204	8b 45 14	 mov	 eax, DWORD PTR i$[rbp]
  00207	ff c0		 inc	 eax
  00209	89 45 14	 mov	 DWORD PTR i$[rbp], eax
$LN7@s370_trans:
  0020c	8b 45 2c	 mov	 eax, DWORD PTR len$[rbp]
  0020f	39 45 14	 cmp	 DWORD PTR i$[rbp], eax
  00212	0f 8f 93 01 00
	00		 jg	 $LN6@s370_trans

; 3075 :     {
; 3076 :         /* Fetch argument byte from first operand */
; 3077 :         // dbyte = ARCH_DEP(vfetchb)(effective_addr1, b1, regs);
; 3078 : 
; 3079 :         /* Fetch function byte from second operand */
; 3080 :         // sbyte = ARCH_DEP(vfetchb)((effective_addr2 + dbyte) & ADDRESS_MAXWRAP(regs), b2, regs);
; 3081 : 
; 3082 :         sbyte = p_fct[ *m1 ];

  00218	48 8b 45 20	 mov	 rax, QWORD PTR m1$[rbp]
  0021c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0021f	48 8b 4d 38	 mov	 rcx, QWORD PTR p_fct$[rbp]
  00223	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00227	88 45 04	 mov	 BYTE PTR sbyte$[rbp], al

; 3083 : 
; 3084 :         /* Test for non-zero function byte */
; 3085 :         if(sbyte != 0)

  0022a	0f b6 45 04	 movzx	 eax, BYTE PTR sbyte$[rbp]
  0022e	85 c0		 test	 eax, eax
  00230	0f 84 ff 00 00
	00		 je	 $LN13@s370_trans

; 3086 :         {
; 3087 :             /* Store address of argument byte in register 1 */
; 3088 : #if defined( FEATURE_001_ZARCH_INSTALLED_FACILITY )
; 3089 :             if(regs->psw.amode64)
; 3090 :                 regs->GR_G(1) = effective_addr1;
; 3091 :             else
; 3092 : #endif
; 3093 :             if(regs->psw.amode)

  00236	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0023e	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00244	d1 e8		 shr	 eax, 1
  00246	83 e0 01	 and	 eax, 1
  00249	85 c0		 test	 eax, eax
  0024b	74 6c		 je	 SHORT $LN14@s370_trans

; 3094 :             {
; 3095 :                 /* Note: TRTR differs from TRT in 31 bit mode.
; 3096 :                 TRTR leaves bit 32 unchanged, TRT clears bit 32 */
; 3097 :                 regs->GR_L(1) &= 0x80000000;

  0024d	b8 08 00 00 00	 mov	 eax, 8
  00252	48 6b c0 01	 imul	 rax, rax, 1
  00256	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0025e	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00265	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0026a	b9 08 00 00 00	 mov	 ecx, 8
  0026f	48 6b c9 01	 imul	 rcx, rcx, 1
  00273	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0027b	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3098 :                 regs->GR_L(1) |= effective_addr1;

  00282	b8 08 00 00 00	 mov	 eax, 8
  00287	48 6b c0 01	 imul	 rax, rax, 1
  0028b	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00293	8b 55 00	 mov	 edx, DWORD PTR effective_addr1$[rbp]
  00296	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0029d	0b c2		 or	 eax, edx
  0029f	b9 08 00 00 00	 mov	 ecx, 8
  002a4	48 6b c9 01	 imul	 rcx, rcx, 1
  002a8	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002b0	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3099 :             }

  002b7	eb 40		 jmp	 SHORT $LN15@s370_trans
$LN14@s370_trans:

; 3100 :             else
; 3101 :                 regs->GR_LA24(1) = effective_addr1;

  002b9	b8 08 00 00 00	 mov	 eax, 8
  002be	48 6b c0 01	 imul	 rax, rax, 1
  002c2	8b 4d 00	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  002c5	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  002cb	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002d3	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  002da	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  002df	0b c1		 or	 eax, ecx
  002e1	b9 08 00 00 00	 mov	 ecx, 8
  002e6	48 6b c9 01	 imul	 rcx, rcx, 1
  002ea	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002f2	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN15@s370_trans:

; 3102 : 
; 3103 :             /* Store function byte in low-order byte of reg.2 */
; 3104 :             regs->GR_LHLCL(2) = sbyte;

  002f9	b8 08 00 00 00	 mov	 eax, 8
  002fe	48 6b c0 02	 imul	 rax, rax, 2
  00302	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0030a	0f b6 55 04	 movzx	 edx, BYTE PTR sbyte$[rbp]
  0030e	88 94 01 80 02
	00 00		 mov	 BYTE PTR [rcx+rax+640], dl

; 3105 : 
; 3106 :             /* Set condition code 2 if argument byte was last byte
; 3107 :              of first operand, otherwise set condition code 1 */
; 3108 :             cc = (i == len) ? 2 : 1;

  00315	8b 45 2c	 mov	 eax, DWORD PTR len$[rbp]
  00318	39 45 14	 cmp	 DWORD PTR i$[rbp], eax
  0031b	75 09		 jne	 SHORT $LN22@s370_trans
  0031d	c7 45 30 02 00
	00 00		 mov	 DWORD PTR tv208[rbp], 2
  00324	eb 07		 jmp	 SHORT $LN23@s370_trans
$LN22@s370_trans:
  00326	c7 45 30 01 00
	00 00		 mov	 DWORD PTR tv208[rbp], 1
$LN23@s370_trans:
  0032d	8b 45 30	 mov	 eax, DWORD PTR tv208[rbp]
  00330	89 45 34	 mov	 DWORD PTR cc$[rbp], eax

; 3109 : 
; 3110 :             /* Terminate the operation at this point */
; 3111 :             break;

  00333	eb 76		 jmp	 SHORT $LN6@s370_trans
$LN13@s370_trans:

; 3112 : 
; 3113 :         } /* end if(sbyte) */
; 3114 : 
; 3115 :         /* Decrement first operand address */
; 3116 :         effective_addr1--; /* Another difference with TRT */

  00335	8b 45 00	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  00338	ff c8		 dec	 eax
  0033a	89 45 00	 mov	 DWORD PTR effective_addr1$[rbp], eax

; 3117 :         effective_addr1 &= ADDRESS_MAXWRAP(regs);

  0033d	8b 45 00	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  00340	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00345	89 45 00	 mov	 DWORD PTR effective_addr1$[rbp], eax

; 3118 : 
; 3119 :         /* update mainstor address */
; 3120 :         m1--;

  00348	48 8b 45 20	 mov	 rax, QWORD PTR m1$[rbp]
  0034c	48 ff c8	 dec	 rax
  0034f	48 89 45 20	 mov	 QWORD PTR m1$[rbp], rax

; 3121 : 
; 3122 :         /* check for page cross */
; 3123 :         if ( MAINSTOR_PAGEBASE ( m1 ) != m1pg )

  00353	48 8b 45 20	 mov	 rax, QWORD PTR m1$[rbp]
  00357	48 25 00 f8 ff
	7f		 and	 rax, 2147481600		; 7ffff800H
  0035d	48 3b 45 40	 cmp	 rax, QWORD PTR m1pg$[rbp]
  00361	74 43		 je	 SHORT $LN16@s370_trans

; 3124 :         {
; 3125 :             m1 = MADDRL(effective_addr1, 1, b1, regs, ACCTYPE_READ, regs->psw.pkey );

  00363	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0036b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0036f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00373	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0037b	4c 8b 8c 24 18
	02 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00383	44 8b 45 18	 mov	 r8d, DWORD PTR b1$[rbp]
  00387	ba 01 00 00 00	 mov	 edx, 1
  0038c	8b 4d 00	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  0038f	e8 00 00 00 00	 call	 s370_maddr_l
  00394	48 89 45 20	 mov	 QWORD PTR m1$[rbp], rax

; 3126 :             m1pg = MAINSTOR_PAGEBASE ( m1 );

  00398	48 8b 45 20	 mov	 rax, QWORD PTR m1$[rbp]
  0039c	48 25 00 f8 ff
	7f		 and	 rax, 2147481600		; 7ffff800H
  003a2	48 89 45 40	 mov	 QWORD PTR m1pg$[rbp], rax
$LN16@s370_trans:

; 3127 :         }
; 3128 : 
; 3129 :     } /* end for(i) */

  003a6	e9 59 fe ff ff	 jmp	 $LN5@s370_trans
$LN6@s370_trans:

; 3130 : 
; 3131 :     /* Update the condition code */
; 3132 :     regs->psw.cc = cc;

  003ab	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003b3	0f b6 4d 34	 movzx	 ecx, BYTE PTR cc$[rbp]
  003b7	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 3133 : }

  003ba	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003c1	48 33 cc	 xor	 rcx, rsp
  003c4	e8 00 00 00 00	 call	 __security_check_cookie
  003c9	48 81 c4 00 02
	00 00		 add	 rsp, 512		; 00000200H
  003d0	5d		 pop	 rbp
  003d1	c3		 ret	 0
s370_translate_and_test_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
sbyte$ = 32
termchar$ = 36
addr2$ = 40
addr1$ = 44
i$ = 48
r2$ = 52
i$1 = 56
r1$ = 60
inst$ = 80
regs$ = 88
s370_search_string_unicode PROC

; 2952 : {

$LN14:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2953 :     VADR addr1, addr2;                  /* End/start addresses       */
; 2954 :     int i;                              /* Loop counter              */
; 2955 :     int r1, r2;                         /* Values of R fields        */
; 2956 :     U16 sbyte;                          /* String character          */
; 2957 :     U16 termchar;                       /* Terminating character     */
; 2958 : 
; 2959 :     RRE( inst, regs, r1, r2 );

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 38	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 38	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 34	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 38	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_searc:
  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 04	 add	 rax, 4
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 04	 cmp	 eax, 4
  00058	74 0c		 je	 SHORT $LN8@s370_searc
  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN8@s370_searc:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s370_searc

; 2960 :     PER_ZEROADDR_CHECK2( regs, r1, r2 );
; 2961 :     TXFC_INSTR_CHECK( regs );
; 2962 : 
; 2963 :     /* Program check if bits 0-15 of register 0 not zero */
; 2964 :     if (regs->GR_L(0) & 0xFFFF0000)

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 00	 imul	 rax, rax, 0
  00075	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0007a	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00081	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00086	85 c0		 test	 eax, eax
  00088	74 15		 je	 SHORT $LN9@s370_searc

; 2965 :         regs->program_interrupt( regs, PGM_SPECIFICATION_EXCEPTION );

  0008a	ba 06 00 00 00	 mov	 edx, 6
  0008f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00094	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00099	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN9@s370_searc:

; 2966 : 
; 2967 :     /* Load string terminating character from register 0 bits 16-31 */
; 2968 :     termchar = (U16) regs->GR(0);

  0009f	b8 08 00 00 00	 mov	 eax, 8
  000a4	48 6b c0 00	 imul	 rax, rax, 0
  000a8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000ad	0f b7 84 01 80
	02 00 00	 movzx	 eax, WORD PTR [rcx+rax+640]
  000b5	66 89 44 24 24	 mov	 WORD PTR termchar$[rsp], ax

; 2969 : 
; 2970 :     /* Determine the operand end and start addresses */
; 2971 :     addr1 = regs->GR( r1 ) & ADDRESS_MAXWRAP( regs );

  000ba	48 63 44 24 3c	 movsxd	 rax, DWORD PTR r1$[rsp]
  000bf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000c4	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000cb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000d0	89 44 24 2c	 mov	 DWORD PTR addr1$[rsp], eax

; 2972 :     addr2 = regs->GR( r2 ) & ADDRESS_MAXWRAP( regs );

  000d4	48 63 44 24 34	 movsxd	 rax, DWORD PTR r2$[rsp]
  000d9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000de	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000e5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ea	89 44 24 28	 mov	 DWORD PTR addr2$[rsp], eax

; 2973 : 
; 2974 :     /* "When the contents of bit position 63 of general registers R1
; 2975 :         and R2 differ (that is, when one address is even and the other
; 2976 :         is odd), the location of the first two-byte character after
; 2977 :         the second operand is ONE MORE THAN the contents of general
; 2978 :         register R1." (emphasis added)
; 2979 :     */
; 2980 :     if ((addr1 & 1) != (addr2 & 1))

  000ee	8b 44 24 2c	 mov	 eax, DWORD PTR addr1$[rsp]
  000f2	83 e0 01	 and	 eax, 1
  000f5	8b 4c 24 28	 mov	 ecx, DWORD PTR addr2$[rsp]
  000f9	83 e1 01	 and	 ecx, 1
  000fc	3b c1		 cmp	 eax, ecx
  000fe	74 17		 je	 SHORT $LN10@s370_searc

; 2981 :     {
; 2982 :         addr1++;

  00100	8b 44 24 2c	 mov	 eax, DWORD PTR addr1$[rsp]
  00104	ff c0		 inc	 eax
  00106	89 44 24 2c	 mov	 DWORD PTR addr1$[rsp], eax

; 2983 :         addr1 &= ADDRESS_MAXWRAP( regs );

  0010a	8b 44 24 2c	 mov	 eax, DWORD PTR addr1$[rsp]
  0010e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00113	89 44 24 2c	 mov	 DWORD PTR addr1$[rsp], eax
$LN10@s370_searc:

; 2984 :     }
; 2985 : 
; 2986 : #undef  SRSTU_MAX
; 2987 : #define SRSTU_MAX   _4K     /* (Sheesh! 256 bytes is WAY too small!) */
; 2988 : 
; 2989 :     /* Search up to CPU-determined bytes or until end of operand */
; 2990 :     for (i=0; i < SRSTU_MAX; i++)

  00117	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0011f	eb 0a		 jmp	 SHORT $LN7@s370_searc
$LN5@s370_searc:
  00121	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00125	ff c0		 inc	 eax
  00127	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@s370_searc:
  0012b	81 7c 24 30 00
	10 00 00	 cmp	 DWORD PTR i$[rsp], 4096	; 00001000H
  00133	7d 7a		 jge	 SHORT $LN6@s370_searc

; 2991 :     {
; 2992 :         /* If operand end address has been reached, return condition
; 2993 :            code 2 and leave the R1 and R2 registers unchanged
; 2994 :         */
; 2995 :         /* NOTE: "When the address in general register R1 is less than
; 2996 :            the address in general register R2, condition code 2 can be
; 2997 :            set only if the operand wraps around from the top of storage
; 2998 :            to location 0."  Thus the below == comparison is correct.
; 2999 :         */
; 3000 :         if (addr2 == addr1)

  00135	8b 44 24 2c	 mov	 eax, DWORD PTR addr1$[rsp]
  00139	39 44 24 28	 cmp	 DWORD PTR addr2$[rsp], eax
  0013d	75 0e		 jne	 SHORT $LN11@s370_searc

; 3001 :         {
; 3002 :             regs->psw.cc = 2;

  0013f	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00144	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 3003 :             return;

  00148	e9 80 00 00 00	 jmp	 $LN1@s370_searc
$LN11@s370_searc:

; 3004 :         }
; 3005 : 
; 3006 :         /* Fetch 2 bytes from the operand */
; 3007 :         sbyte = ARCH_DEP( vfetch2 )( addr2, r2, regs );

  0014d	4c 8b 44 24 58	 mov	 r8, QWORD PTR regs$[rsp]
  00152	8b 54 24 34	 mov	 edx, DWORD PTR r2$[rsp]
  00156	8b 4c 24 28	 mov	 ecx, DWORD PTR addr2$[rsp]
  0015a	e8 00 00 00 00	 call	 s370_vfetch2
  0015f	66 89 44 24 20	 mov	 WORD PTR sbyte$[rsp], ax

; 3008 : 
; 3009 :         /* If the terminating character was found, return condition
; 3010 :            code 1 and load the address of the character into R1 */
; 3011 :         if (sbyte == termchar)

  00164	0f b7 44 24 20	 movzx	 eax, WORD PTR sbyte$[rsp]
  00169	0f b7 4c 24 24	 movzx	 ecx, WORD PTR termchar$[rsp]
  0016e	3b c1		 cmp	 eax, ecx
  00170	75 20		 jne	 SHORT $LN12@s370_searc

; 3012 :         {
; 3013 :             SET_GR_A( r1, regs, addr2 );

  00172	48 63 44 24 3c	 movsxd	 rax, DWORD PTR r1$[rsp]
  00177	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0017c	8b 54 24 28	 mov	 edx, DWORD PTR addr2$[rsp]
  00180	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 3014 :             regs->psw.cc = 1;

  00187	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0018c	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 3015 :             return;

  00190	eb 3b		 jmp	 SHORT $LN1@s370_searc
$LN12@s370_searc:

; 3016 :         }
; 3017 : 
; 3018 :         /* Increment operand address */
; 3019 :         addr2 += 2;

  00192	8b 44 24 28	 mov	 eax, DWORD PTR addr2$[rsp]
  00196	83 c0 02	 add	 eax, 2
  00199	89 44 24 28	 mov	 DWORD PTR addr2$[rsp], eax

; 3020 :         addr2 &= ADDRESS_MAXWRAP( regs );

  0019d	8b 44 24 28	 mov	 eax, DWORD PTR addr2$[rsp]
  001a1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001a6	89 44 24 28	 mov	 DWORD PTR addr2$[rsp], eax

; 3021 : 
; 3022 :     } /* end for(i) */

  001aa	e9 72 ff ff ff	 jmp	 $LN5@s370_searc
$LN6@s370_searc:

; 3023 : 
; 3024 :     /* Set R2 to point to next character of operand */
; 3025 :     SET_GR_A( r2, regs, addr2 );

  001af	48 63 44 24 34	 movsxd	 rax, DWORD PTR r2$[rsp]
  001b4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  001b9	8b 54 24 28	 mov	 edx, DWORD PTR addr2$[rsp]
  001bd	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 3026 : 
; 3027 :     /* Return condition code 3 */
; 3028 :     regs->psw.cc = 3;

  001c4	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  001c9	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@s370_searc:

; 3029 : }

  001cd	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001d1	c3		 ret	 0
s370_search_string_unicode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf8$ = 48
wfc$ = 52
utf32$ = 56
r2$ = 60
srce$ = 64
srcelen$ = 68
r1$ = 72
read$ = 76
dest$ = 80
destlen$ = 84
temp$1 = 88
xlated$ = 92
m3$ = 96
$T2 = 104
$T3 = 112
$T4 = 120
$T5 = 128
$T6 = 136
inst$ = 160
regs$ = 168
s370_convert_utf8_to_utf32 PROC

; 2335 : {

$LN65:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 2336 :     VADR dest;                     /* Destination address            */
; 2337 :     GREG destlen;                  /* Destination length             */
; 2338 :     int r1;
; 2339 :     int r2;
; 2340 :     int m3;                        /* Mask                           */
; 2341 :     int read;                      /* Bytes read                     */
; 2342 :     VADR srce;                     /* Source address                 */
; 2343 :     GREG srcelen;                  /* Source length                  */
; 2344 :     BYTE utf32[4];                 /* utf32 character(s)             */
; 2345 :     BYTE utf8[4];                  /* utf8 character(s)              */
; 2346 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2347 :     bool wfc;                      /* Well-Formedness-Checking (W)   */
; 2348 : #endif
; 2349 :     int xlated;                    /* characters translated          */
; 2350 : 
; 2351 :     RRF_M(inst, regs, r1, r2, m3);

  00011	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00019	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 _byteswap_ulong
  00025	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  00029	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0002d	83 e0 0f	 and	 eax, 15
  00030	89 44 24 3c	 mov	 DWORD PTR r2$[rsp], eax
  00034	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00038	c1 e8 04	 shr	 eax, 4
  0003b	83 e0 0f	 and	 eax, 15
  0003e	89 44 24 48	 mov	 DWORD PTR r1$[rsp], eax
  00042	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	c1 e8 0c	 shr	 eax, 12
  00049	83 e0 0f	 and	 eax, 15
  0004c	89 44 24 60	 mov	 DWORD PTR m3$[rsp], eax
$LN4@s370_conve:
  00050	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00058	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005c	48 83 c0 04	 add	 rax, 4
  00060	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00068	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0006c	33 c0		 xor	 eax, eax
  0006e	83 f8 04	 cmp	 eax, 4
  00071	74 0f		 je	 SHORT $LN7@s370_conve
  00073	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0007b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s370_conve:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 c8		 jne	 SHORT $LN4@s370_conve

; 2352 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );
; 2353 :     ODD2_CHECK(r1, r2, regs);

  00088	8b 44 24 48	 mov	 eax, DWORD PTR r1$[rsp]
  0008c	83 e0 01	 and	 eax, 1
  0008f	85 c0		 test	 eax, eax
  00091	75 0b		 jne	 SHORT $LN9@s370_conve
  00093	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  00097	83 e0 01	 and	 eax, 1
  0009a	85 c0		 test	 eax, eax
  0009c	74 1b		 je	 SHORT $LN8@s370_conve
$LN9@s370_conve:
  0009e	ba 06 00 00 00	 mov	 edx, 6
  000a3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ab	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@s370_conve:

; 2354 : 
; 2355 :     /* Get paramaters */
; 2356 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000b9	48 63 44 24 48	 movsxd	 rax, DWORD PTR r1$[rsp]
  000be	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000cd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000d2	89 44 24 50	 mov	 DWORD PTR dest$[rsp], eax

; 2357 :     destlen = GR_A(r1 + 1, regs);

  000d6	8b 44 24 48	 mov	 eax, DWORD PTR r1$[rsp]
  000da	ff c0		 inc	 eax
  000dc	48 98		 cdqe
  000de	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ed	89 44 24 54	 mov	 DWORD PTR destlen$[rsp], eax

; 2358 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  000f1	48 63 44 24 3c	 movsxd	 rax, DWORD PTR r2$[rsp]
  000f6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fe	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00105	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0010a	89 44 24 40	 mov	 DWORD PTR srce$[rsp], eax

; 2359 :     srcelen = GR_A(r2 + 1, regs);

  0010e	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  00112	ff c0		 inc	 eax
  00114	48 98		 cdqe
  00116	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00125	89 44 24 44	 mov	 DWORD PTR srcelen$[rsp], eax

; 2360 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2361 :     if ((m3 & 0x01) && FACILITY_ENABLED( 030_ETF3_ENHANCEMENT, regs ))

  00129	8b 44 24 60	 mov	 eax, DWORD PTR m3$[rsp]
  0012d	83 e0 01	 and	 eax, 1
  00130	85 c0		 test	 eax, eax
  00132	74 27		 je	 SHORT $LN10@s370_conve
  00134	b8 01 00 00 00	 mov	 eax, 1
  00139	48 6b c0 03	 imul	 rax, rax, 3
  0013d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00145	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  0014d	83 e0 02	 and	 eax, 2
  00150	85 c0		 test	 eax, eax
  00152	74 07		 je	 SHORT $LN10@s370_conve

; 2362 :         wfc = true;

  00154	c6 44 24 34 01	 mov	 BYTE PTR wfc$[rsp], 1
  00159	eb 05		 jmp	 SHORT $LN11@s370_conve
$LN10@s370_conve:

; 2363 :     else
; 2364 :         wfc = false;

  0015b	c6 44 24 34 00	 mov	 BYTE PTR wfc$[rsp], 0
$LN11@s370_conve:

; 2365 : #endif
; 2366 : 
; 2367 :     /* Every valid utf-32 starts with 0x00 */
; 2368 :     utf32[0] = 0x00;

  00160	b8 01 00 00 00	 mov	 eax, 1
  00165	48 6b c0 00	 imul	 rax, rax, 0
  00169	48 89 44 24 68	 mov	 QWORD PTR $T2[rsp], rax
  0016e	48 83 7c 24 68
	04		 cmp	 QWORD PTR $T2[rsp], 4
  00174	73 02		 jae	 SHORT $LN55@s370_conve
  00176	eb 05		 jmp	 SHORT $LN56@s370_conve
$LN55@s370_conve:
  00178	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN56@s370_conve:
  0017d	48 8b 44 24 68	 mov	 rax, QWORD PTR $T2[rsp]
  00182	c6 44 04 38 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2369 : 
; 2370 :     /* Initialize number of translated charachters */
; 2371 :     xlated = 0;

  00187	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0
$LN5@s370_conve:

; 2372 :     while(xlated < 4096)

  0018f	81 7c 24 5c 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  00197	0f 8d 84 09 00
	00		 jge	 $LN6@s370_conve

; 2373 :     {
; 2374 :         /* Check end of source or destination */
; 2375 :         if(srcelen < 1)

  0019d	83 7c 24 44 01	 cmp	 DWORD PTR srcelen$[rsp], 1
  001a2	73 11		 jae	 SHORT $LN12@s370_conve

; 2376 :         {
; 2377 :             regs->psw.cc = 0;

  001a4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001ac	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2378 :             return;

  001b0	e9 78 09 00 00	 jmp	 $LN1@s370_conve
$LN12@s370_conve:

; 2379 :         }
; 2380 :         if(destlen < 4)

  001b5	83 7c 24 54 04	 cmp	 DWORD PTR destlen$[rsp], 4
  001ba	73 11		 jae	 SHORT $LN13@s370_conve

; 2381 :         {
; 2382 :             regs->psw.cc = 1;

  001bc	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001c4	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2383 :         return;

  001c8	e9 60 09 00 00	 jmp	 $LN1@s370_conve
$LN13@s370_conve:

; 2384 :         }
; 2385 : 
; 2386 :         /* Fetch a byte */
; 2387 :         utf8[0] = ARCH_DEP(vfetchb)(srce, r2, regs);

  001cd	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001d5	8b 54 24 3c	 mov	 edx, DWORD PTR r2$[rsp]
  001d9	8b 4c 24 40	 mov	 ecx, DWORD PTR srce$[rsp]
  001dd	e8 00 00 00 00	 call	 s370_vfetchb
  001e2	b9 01 00 00 00	 mov	 ecx, 1
  001e7	48 6b c9 00	 imul	 rcx, rcx, 0
  001eb	88 44 0c 30	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2388 :         if(utf8[0] < 0x80)

  001ef	b8 01 00 00 00	 mov	 eax, 1
  001f4	48 6b c0 00	 imul	 rax, rax, 0
  001f8	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  001fd	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00202	7d 71		 jge	 SHORT $LN14@s370_conve

; 2389 :         {
; 2390 :             /* xlate range 00-7f */
; 2391 :             /* 0jklmnop -> 00000000 00000000 00000000 0jklmnop */
; 2392 :             utf32[1] = 0x00;

  00204	48 c7 44 24 70
	01 00 00 00	 mov	 QWORD PTR $T3[rsp], 1
  0020d	48 83 7c 24 70
	04		 cmp	 QWORD PTR $T3[rsp], 4
  00213	73 02		 jae	 SHORT $LN57@s370_conve
  00215	eb 05		 jmp	 SHORT $LN58@s370_conve
$LN57@s370_conve:
  00217	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN58@s370_conve:
  0021c	48 8b 44 24 70	 mov	 rax, QWORD PTR $T3[rsp]
  00221	c6 44 04 38 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2393 :             utf32[2] = 0x00;

  00226	b8 01 00 00 00	 mov	 eax, 1
  0022b	48 6b c0 02	 imul	 rax, rax, 2
  0022f	48 89 44 24 78	 mov	 QWORD PTR $T4[rsp], rax
  00234	48 83 7c 24 78
	04		 cmp	 QWORD PTR $T4[rsp], 4
  0023a	73 02		 jae	 SHORT $LN59@s370_conve
  0023c	eb 05		 jmp	 SHORT $LN60@s370_conve
$LN59@s370_conve:
  0023e	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN60@s370_conve:
  00243	48 8b 44 24 78	 mov	 rax, QWORD PTR $T4[rsp]
  00248	c6 44 04 38 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2394 :             utf32[3] = utf8[0];

  0024d	b8 01 00 00 00	 mov	 eax, 1
  00252	48 6b c0 00	 imul	 rax, rax, 0
  00256	b9 01 00 00 00	 mov	 ecx, 1
  0025b	48 6b c9 03	 imul	 rcx, rcx, 3
  0025f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00264	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2395 :             read = 1;

  00268	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR read$[rsp], 1

; 2396 :         }

  00270	e9 ce 07 00 00	 jmp	 $LN15@s370_conve
$LN14@s370_conve:

; 2397 :         else if(utf8[0] >= 0xc0 && utf8[0] <= 0xdf)

  00275	b8 01 00 00 00	 mov	 eax, 1
  0027a	48 6b c0 00	 imul	 rax, rax, 0
  0027e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00283	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00288	0f 8c 54 01 00
	00		 jl	 $LN16@s370_conve
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	48 6b c0 00	 imul	 rax, rax, 0
  00297	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0029c	3d df 00 00 00	 cmp	 eax, 223		; 000000dfH
  002a1	0f 8f 3b 01 00
	00		 jg	 $LN16@s370_conve

; 2398 :         {
; 2399 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2400 :             /* WellFormednessChecking */
; 2401 :             if (wfc)

  002a7	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  002ac	85 c0		 test	 eax, eax
  002ae	74 26		 je	 SHORT $LN18@s370_conve

; 2402 :             {
; 2403 :                 if (utf8[0] <= 0xc1)

  002b0	b8 01 00 00 00	 mov	 eax, 1
  002b5	48 6b c0 00	 imul	 rax, rax, 0
  002b9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  002be	3d c1 00 00 00	 cmp	 eax, 193		; 000000c1H
  002c3	7f 11		 jg	 SHORT $LN19@s370_conve

; 2404 :                 {
; 2405 :                     regs->psw.cc = 2;

  002c5	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002cd	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2406 :                     return;

  002d1	e9 57 08 00 00	 jmp	 $LN1@s370_conve
$LN19@s370_conve:
$LN18@s370_conve:

; 2407 :                 }
; 2408 :             }
; 2409 : #endif
; 2410 : 
; 2411 :             /* Check end of source */
; 2412 :             if(srcelen < 2)

  002d6	83 7c 24 44 02	 cmp	 DWORD PTR srcelen$[rsp], 2
  002db	73 11		 jae	 SHORT $LN20@s370_conve

; 2413 :             {
; 2414 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  002dd	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002e5	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2415 :                 return;

  002e9	e9 3f 08 00 00	 jmp	 $LN1@s370_conve
$LN20@s370_conve:

; 2416 :             }
; 2417 : 
; 2418 :             /* Get the next byte */
; 2419 :             utf8[1] = ARCH_DEP(vfetchb)(srce + 1, r2, regs);

  002ee	8b 44 24 40	 mov	 eax, DWORD PTR srce$[rsp]
  002f2	ff c0		 inc	 eax
  002f4	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002fc	8b 54 24 3c	 mov	 edx, DWORD PTR r2$[rsp]
  00300	8b c8		 mov	 ecx, eax
  00302	e8 00 00 00 00	 call	 s370_vfetchb
  00307	b9 01 00 00 00	 mov	 ecx, 1
  0030c	48 6b c9 01	 imul	 rcx, rcx, 1
  00310	88 44 0c 30	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2420 : 
; 2421 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2422 :             /* WellFormednessChecking */
; 2423 :             if (wfc)

  00314	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  00319	85 c0		 test	 eax, eax
  0031b	74 3b		 je	 SHORT $LN21@s370_conve

; 2424 :             {
; 2425 :                 if (utf8[1] < 0x80 || utf8[1] > 0xbf)

  0031d	b8 01 00 00 00	 mov	 eax, 1
  00322	48 6b c0 01	 imul	 rax, rax, 1
  00326	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0032b	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00330	7c 15		 jl	 SHORT $LN23@s370_conve
  00332	b8 01 00 00 00	 mov	 eax, 1
  00337	48 6b c0 01	 imul	 rax, rax, 1
  0033b	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00340	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00345	7e 11		 jle	 SHORT $LN22@s370_conve
$LN23@s370_conve:

; 2426 :                 {
; 2427 :                     regs->psw.cc = 2;

  00347	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0034f	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2428 :                     return;

  00353	e9 d5 07 00 00	 jmp	 $LN1@s370_conve
$LN22@s370_conve:
$LN21@s370_conve:

; 2429 :                 }
; 2430 :             }
; 2431 : #endif
; 2432 : 
; 2433 :             /* xlate range c000-dfff */
; 2434 :             /* 110fghij 10klmnop -> 00000000 00000000 00000fgh ijklmnop */
; 2435 :             utf32[1] = 0x00;

  00358	48 c7 84 24 80
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T5[rsp], 1
  00364	48 83 bc 24 80
	00 00 00 04	 cmp	 QWORD PTR $T5[rsp], 4
  0036d	73 02		 jae	 SHORT $LN61@s370_conve
  0036f	eb 05		 jmp	 SHORT $LN62@s370_conve
$LN61@s370_conve:
  00371	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN62@s370_conve:
  00376	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]
  0037e	c6 44 04 38 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2436 :             utf32[2] = (utf8[0] & 0x1c) >> 2;

  00383	b8 01 00 00 00	 mov	 eax, 1
  00388	48 6b c0 00	 imul	 rax, rax, 0
  0038c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00391	83 e0 1c	 and	 eax, 28
  00394	c1 f8 02	 sar	 eax, 2
  00397	b9 01 00 00 00	 mov	 ecx, 1
  0039c	48 6b c9 02	 imul	 rcx, rcx, 2
  003a0	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2437 :             utf32[3] = (utf8[0] << 6) | (utf8[1] & 0x3f);

  003a4	b8 01 00 00 00	 mov	 eax, 1
  003a9	48 6b c0 00	 imul	 rax, rax, 0
  003ad	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  003b2	c1 e0 06	 shl	 eax, 6
  003b5	b9 01 00 00 00	 mov	 ecx, 1
  003ba	48 6b c9 01	 imul	 rcx, rcx, 1
  003be	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  003c3	83 e1 3f	 and	 ecx, 63			; 0000003fH
  003c6	0b c1		 or	 eax, ecx
  003c8	b9 01 00 00 00	 mov	 ecx, 1
  003cd	48 6b c9 03	 imul	 rcx, rcx, 3
  003d1	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2438 :             read = 2;

  003d5	c7 44 24 4c 02
	00 00 00	 mov	 DWORD PTR read$[rsp], 2

; 2439 :         }

  003dd	e9 61 06 00 00	 jmp	 $LN17@s370_conve
$LN16@s370_conve:

; 2440 :         else if(utf8[0] >= 0xe0 && utf8[0] <= 0xef)

  003e2	b8 01 00 00 00	 mov	 eax, 1
  003e7	48 6b c0 00	 imul	 rax, rax, 0
  003eb	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  003f0	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  003f5	0f 8c b8 02 00
	00		 jl	 $LN24@s370_conve
  003fb	b8 01 00 00 00	 mov	 eax, 1
  00400	48 6b c0 00	 imul	 rax, rax, 0
  00404	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00409	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  0040e	0f 8f 9f 02 00
	00		 jg	 $LN24@s370_conve

; 2441 :         {
; 2442 :             /* Check end of source */
; 2443 :             if(srcelen < 3)

  00414	83 7c 24 44 03	 cmp	 DWORD PTR srcelen$[rsp], 3
  00419	73 11		 jae	 SHORT $LN26@s370_conve

; 2444 :             {
; 2445 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  0041b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00423	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2446 :                 return;

  00427	e9 01 07 00 00	 jmp	 $LN1@s370_conve
$LN26@s370_conve:

; 2447 :             }
; 2448 : 
; 2449 :             /* Get the next 2 bytes */
; 2450 :             ARCH_DEP(vfetchc)(&utf8[1], 1, srce + 1, r2, regs);

  0042c	8b 44 24 40	 mov	 eax, DWORD PTR srce$[rsp]
  00430	ff c0		 inc	 eax
  00432	b9 01 00 00 00	 mov	 ecx, 1
  00437	48 6b c9 01	 imul	 rcx, rcx, 1
  0043b	48 8d 4c 0c 30	 lea	 rcx, QWORD PTR utf8$[rsp+rcx]
  00440	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00448	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0044d	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r2$[rsp]
  00452	44 8b c0	 mov	 r8d, eax
  00455	b2 01		 mov	 dl, 1
  00457	e8 00 00 00 00	 call	 s370_vfetchc

; 2451 : 
; 2452 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2453 :             /* WellformednessChecking */
; 2454 :             if (wfc)

  0045c	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  00461	85 c0		 test	 eax, eax
  00463	0f 84 ad 01 00
	00		 je	 $LN27@s370_conve

; 2455 :             {
; 2456 :                 if (utf8[0] == 0xe0)

  00469	b8 01 00 00 00	 mov	 eax, 1
  0046e	48 6b c0 00	 imul	 rax, rax, 0
  00472	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00477	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  0047c	75 65		 jne	 SHORT $LN28@s370_conve

; 2457 :                 {
; 2458 :                     if (utf8[1] < 0xa0 || utf8[1] > 0xbf || utf8[2] < 0x80 || utf8[2] > 0xbf)

  0047e	b8 01 00 00 00	 mov	 eax, 1
  00483	48 6b c0 01	 imul	 rax, rax, 1
  00487	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0048c	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  00491	7c 3f		 jl	 SHORT $LN30@s370_conve
  00493	b8 01 00 00 00	 mov	 eax, 1
  00498	48 6b c0 01	 imul	 rax, rax, 1
  0049c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  004a1	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  004a6	7f 2a		 jg	 SHORT $LN30@s370_conve
  004a8	b8 01 00 00 00	 mov	 eax, 1
  004ad	48 6b c0 02	 imul	 rax, rax, 2
  004b1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  004b6	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  004bb	7c 15		 jl	 SHORT $LN30@s370_conve
  004bd	b8 01 00 00 00	 mov	 eax, 1
  004c2	48 6b c0 02	 imul	 rax, rax, 2
  004c6	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  004cb	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  004d0	7e 11		 jle	 SHORT $LN29@s370_conve
$LN30@s370_conve:

; 2459 :                     {
; 2460 :                         regs->psw.cc = 2;

  004d2	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004da	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2461 :                         return;

  004de	e9 4a 06 00 00	 jmp	 $LN1@s370_conve
$LN29@s370_conve:
$LN28@s370_conve:

; 2462 :                     }
; 2463 :                 }
; 2464 :                 if ((utf8[0] >= 0xe1 && utf8[0] <= 0xec) || (utf8[0] >= 0xee && utf8[0] <= 0xef))

  004e3	b8 01 00 00 00	 mov	 eax, 1
  004e8	48 6b c0 00	 imul	 rax, rax, 0
  004ec	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  004f1	3d e1 00 00 00	 cmp	 eax, 225		; 000000e1H
  004f6	7c 15		 jl	 SHORT $LN33@s370_conve
  004f8	b8 01 00 00 00	 mov	 eax, 1
  004fd	48 6b c0 00	 imul	 rax, rax, 0
  00501	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00506	3d ec 00 00 00	 cmp	 eax, 236		; 000000ecH
  0050b	7e 2a		 jle	 SHORT $LN32@s370_conve
$LN33@s370_conve:
  0050d	b8 01 00 00 00	 mov	 eax, 1
  00512	48 6b c0 00	 imul	 rax, rax, 0
  00516	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0051b	3d ee 00 00 00	 cmp	 eax, 238		; 000000eeH
  00520	7c 7a		 jl	 SHORT $LN31@s370_conve
  00522	b8 01 00 00 00	 mov	 eax, 1
  00527	48 6b c0 00	 imul	 rax, rax, 0
  0052b	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00530	3d ef 00 00 00	 cmp	 eax, 239		; 000000efH
  00535	7f 65		 jg	 SHORT $LN31@s370_conve
$LN32@s370_conve:

; 2465 :                 {
; 2466 :                     if (utf8[1] < 0x80 || utf8[1] > 0xbf || utf8[2] < 0x80 || utf8[2] > 0xbf)

  00537	b8 01 00 00 00	 mov	 eax, 1
  0053c	48 6b c0 01	 imul	 rax, rax, 1
  00540	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00545	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0054a	7c 3f		 jl	 SHORT $LN35@s370_conve
  0054c	b8 01 00 00 00	 mov	 eax, 1
  00551	48 6b c0 01	 imul	 rax, rax, 1
  00555	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0055a	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  0055f	7f 2a		 jg	 SHORT $LN35@s370_conve
  00561	b8 01 00 00 00	 mov	 eax, 1
  00566	48 6b c0 02	 imul	 rax, rax, 2
  0056a	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0056f	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00574	7c 15		 jl	 SHORT $LN35@s370_conve
  00576	b8 01 00 00 00	 mov	 eax, 1
  0057b	48 6b c0 02	 imul	 rax, rax, 2
  0057f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00584	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00589	7e 11		 jle	 SHORT $LN34@s370_conve
$LN35@s370_conve:

; 2467 :                     {
; 2468 :                         regs->psw.cc = 2;

  0058b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00593	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2469 :                         return;

  00597	e9 91 05 00 00	 jmp	 $LN1@s370_conve
$LN34@s370_conve:
$LN31@s370_conve:

; 2470 :                     }
; 2471 :                 }
; 2472 :                 if (utf8[0] == 0xed)

  0059c	b8 01 00 00 00	 mov	 eax, 1
  005a1	48 6b c0 00	 imul	 rax, rax, 0
  005a5	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005aa	3d ed 00 00 00	 cmp	 eax, 237		; 000000edH
  005af	75 65		 jne	 SHORT $LN36@s370_conve

; 2473 :                 {
; 2474 :                     if (utf8[1] < 0x80 || utf8[1] > 0x9f || utf8[2] < 0x80 || utf8[2] > 0xbf)

  005b1	b8 01 00 00 00	 mov	 eax, 1
  005b6	48 6b c0 01	 imul	 rax, rax, 1
  005ba	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005bf	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  005c4	7c 3f		 jl	 SHORT $LN38@s370_conve
  005c6	b8 01 00 00 00	 mov	 eax, 1
  005cb	48 6b c0 01	 imul	 rax, rax, 1
  005cf	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005d4	3d 9f 00 00 00	 cmp	 eax, 159		; 0000009fH
  005d9	7f 2a		 jg	 SHORT $LN38@s370_conve
  005db	b8 01 00 00 00	 mov	 eax, 1
  005e0	48 6b c0 02	 imul	 rax, rax, 2
  005e4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005e9	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  005ee	7c 15		 jl	 SHORT $LN38@s370_conve
  005f0	b8 01 00 00 00	 mov	 eax, 1
  005f5	48 6b c0 02	 imul	 rax, rax, 2
  005f9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  005fe	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00603	7e 11		 jle	 SHORT $LN37@s370_conve
$LN38@s370_conve:

; 2475 :                     {
; 2476 :                         regs->psw.cc = 2;

  00605	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0060d	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2477 :                         return;

  00611	e9 17 05 00 00	 jmp	 $LN1@s370_conve
$LN37@s370_conve:
$LN36@s370_conve:
$LN27@s370_conve:

; 2478 :                     }
; 2479 :                 }
; 2480 :             }
; 2481 : #endif /* defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY ) */
; 2482 : 
; 2483 :             /* xlate range e00000-efffff */
; 2484 :             /* 1110abcd 10efghij 10klmnop -> 00000000 00000000 abcdefgh ijklmnop */
; 2485 :             utf32[1] = 0x00;

  00616	48 c7 84 24 88
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T6[rsp], 1
  00622	48 83 bc 24 88
	00 00 00 04	 cmp	 QWORD PTR $T6[rsp], 4
  0062b	73 02		 jae	 SHORT $LN63@s370_conve
  0062d	eb 05		 jmp	 SHORT $LN64@s370_conve
$LN63@s370_conve:
  0062f	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN64@s370_conve:
  00634	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  0063c	c6 44 04 38 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2486 :             utf32[2] = (utf8[0] << 4) | ((utf8[1] & 0x3c) >> 2);

  00641	b8 01 00 00 00	 mov	 eax, 1
  00646	48 6b c0 00	 imul	 rax, rax, 0
  0064a	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0064f	c1 e0 04	 shl	 eax, 4
  00652	b9 01 00 00 00	 mov	 ecx, 1
  00657	48 6b c9 01	 imul	 rcx, rcx, 1
  0065b	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  00660	83 e1 3c	 and	 ecx, 60			; 0000003cH
  00663	c1 f9 02	 sar	 ecx, 2
  00666	0b c1		 or	 eax, ecx
  00668	b9 01 00 00 00	 mov	 ecx, 1
  0066d	48 6b c9 02	 imul	 rcx, rcx, 2
  00671	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2487 :             utf32[3] = (utf8[1] << 6) | (utf8[2] & 0x3f);

  00675	b8 01 00 00 00	 mov	 eax, 1
  0067a	48 6b c0 01	 imul	 rax, rax, 1
  0067e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00683	c1 e0 06	 shl	 eax, 6
  00686	b9 01 00 00 00	 mov	 ecx, 1
  0068b	48 6b c9 02	 imul	 rcx, rcx, 2
  0068f	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  00694	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00697	0b c1		 or	 eax, ecx
  00699	b9 01 00 00 00	 mov	 ecx, 1
  0069e	48 6b c9 03	 imul	 rcx, rcx, 3
  006a2	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2488 :             read = 3;

  006a6	c7 44 24 4c 03
	00 00 00	 mov	 DWORD PTR read$[rsp], 3

; 2489 :         }

  006ae	e9 90 03 00 00	 jmp	 $LN25@s370_conve
$LN24@s370_conve:

; 2490 :         else if(utf8[0] >= 0xf0 && utf8[0] <= 0xf7)

  006b3	b8 01 00 00 00	 mov	 eax, 1
  006b8	48 6b c0 00	 imul	 rax, rax, 0
  006bc	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006c1	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  006c6	0f 8c 66 03 00
	00		 jl	 $LN39@s370_conve
  006cc	b8 01 00 00 00	 mov	 eax, 1
  006d1	48 6b c0 00	 imul	 rax, rax, 0
  006d5	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006da	3d f7 00 00 00	 cmp	 eax, 247		; 000000f7H
  006df	0f 8f 4d 03 00
	00		 jg	 $LN39@s370_conve

; 2491 :         {
; 2492 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2493 :             /* WellFormednessChecking */
; 2494 :             if (wfc)

  006e5	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  006ea	85 c0		 test	 eax, eax
  006ec	74 26		 je	 SHORT $LN41@s370_conve

; 2495 :             {
; 2496 :                 if (utf8[0] > 0xf4)

  006ee	b8 01 00 00 00	 mov	 eax, 1
  006f3	48 6b c0 00	 imul	 rax, rax, 0
  006f7	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  006fc	3d f4 00 00 00	 cmp	 eax, 244		; 000000f4H
  00701	7e 11		 jle	 SHORT $LN42@s370_conve

; 2497 :                 {
; 2498 :                     regs->psw.cc = 2;

  00703	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0070b	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2499 :                     return;

  0070f	e9 19 04 00 00	 jmp	 $LN1@s370_conve
$LN42@s370_conve:
$LN41@s370_conve:

; 2500 :                 }
; 2501 :             }
; 2502 : #endif
; 2503 : 
; 2504 :             /* Check end of source */
; 2505 :             if(srcelen < 4)

  00714	83 7c 24 44 04	 cmp	 DWORD PTR srcelen$[rsp], 4
  00719	73 11		 jae	 SHORT $LN43@s370_conve

; 2506 :             {
; 2507 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  0071b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00723	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2508 :                 return;

  00727	e9 01 04 00 00	 jmp	 $LN1@s370_conve
$LN43@s370_conve:

; 2509 :             }
; 2510 : 
; 2511 :             /* Get the next 3 bytes */
; 2512 :             ARCH_DEP(vfetchc)(&utf8[1], 2, srce + 1, r2, regs);

  0072c	8b 44 24 40	 mov	 eax, DWORD PTR srce$[rsp]
  00730	ff c0		 inc	 eax
  00732	b9 01 00 00 00	 mov	 ecx, 1
  00737	48 6b c9 01	 imul	 rcx, rcx, 1
  0073b	48 8d 4c 0c 30	 lea	 rcx, QWORD PTR utf8$[rsp+rcx]
  00740	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00748	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0074d	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r2$[rsp]
  00752	44 8b c0	 mov	 r8d, eax
  00755	b2 02		 mov	 dl, 2
  00757	e8 00 00 00 00	 call	 s370_vfetchc

; 2513 : 
; 2514 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2515 :             /* WellFormdnessChecking */
; 2516 :             if (wfc)

  0075c	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  00761	85 c0		 test	 eax, eax
  00763	0f 84 23 02 00
	00		 je	 $LN44@s370_conve

; 2517 :             {
; 2518 :                 if (utf8[0] == 0xf0)

  00769	b8 01 00 00 00	 mov	 eax, 1
  0076e	48 6b c0 00	 imul	 rax, rax, 0
  00772	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00777	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  0077c	0f 85 95 00 00
	00		 jne	 $LN45@s370_conve

; 2519 :                 {
; 2520 :                     if (0
; 2521 :                         || utf8[1] < 0x90
; 2522 :                         || utf8[1] > 0xbf
; 2523 : 
; 2524 :                         || utf8[2] < 0x80
; 2525 :                         || utf8[2] > 0xbf
; 2526 : 
; 2527 :                         || utf8[3] < 0x80
; 2528 :                         || utf8[3] > 0xbf

  00782	33 c0		 xor	 eax, eax
  00784	85 c0		 test	 eax, eax
  00786	75 7e		 jne	 SHORT $LN47@s370_conve
  00788	b8 01 00 00 00	 mov	 eax, 1
  0078d	48 6b c0 01	 imul	 rax, rax, 1
  00791	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00796	3d 90 00 00 00	 cmp	 eax, 144		; 00000090H
  0079b	7c 69		 jl	 SHORT $LN47@s370_conve
  0079d	b8 01 00 00 00	 mov	 eax, 1
  007a2	48 6b c0 01	 imul	 rax, rax, 1
  007a6	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007ab	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  007b0	7f 54		 jg	 SHORT $LN47@s370_conve
  007b2	b8 01 00 00 00	 mov	 eax, 1
  007b7	48 6b c0 02	 imul	 rax, rax, 2
  007bb	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007c0	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  007c5	7c 3f		 jl	 SHORT $LN47@s370_conve
  007c7	b8 01 00 00 00	 mov	 eax, 1
  007cc	48 6b c0 02	 imul	 rax, rax, 2
  007d0	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007d5	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  007da	7f 2a		 jg	 SHORT $LN47@s370_conve
  007dc	b8 01 00 00 00	 mov	 eax, 1
  007e1	48 6b c0 03	 imul	 rax, rax, 3
  007e5	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007ea	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  007ef	7c 15		 jl	 SHORT $LN47@s370_conve
  007f1	b8 01 00 00 00	 mov	 eax, 1
  007f6	48 6b c0 03	 imul	 rax, rax, 3
  007fa	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  007ff	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00804	7e 11		 jle	 SHORT $LN46@s370_conve
$LN47@s370_conve:

; 2529 :                     )
; 2530 :                     {
; 2531 :                         regs->psw.cc = 2;

  00806	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0080e	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2532 :                         return;

  00812	e9 16 03 00 00	 jmp	 $LN1@s370_conve
$LN46@s370_conve:
$LN45@s370_conve:

; 2533 :                     }
; 2534 :                 }
; 2535 :                 if (utf8[0] >= 0xf1 && utf8[0] <= 0xf3)

  00817	b8 01 00 00 00	 mov	 eax, 1
  0081c	48 6b c0 00	 imul	 rax, rax, 0
  00820	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00825	3d f1 00 00 00	 cmp	 eax, 241		; 000000f1H
  0082a	0f 8c ae 00 00
	00		 jl	 $LN48@s370_conve
  00830	b8 01 00 00 00	 mov	 eax, 1
  00835	48 6b c0 00	 imul	 rax, rax, 0
  00839	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0083e	3d f3 00 00 00	 cmp	 eax, 243		; 000000f3H
  00843	0f 8f 95 00 00
	00		 jg	 $LN48@s370_conve

; 2536 :                 {
; 2537 :                     if (0
; 2538 :                         || utf8[1] < 0x80
; 2539 :                         || utf8[1] > 0xbf
; 2540 : 
; 2541 :                         || utf8[2] < 0x80
; 2542 :                         || utf8[2] > 0xbf
; 2543 : 
; 2544 :                         || utf8[3] < 0x80
; 2545 :                         || utf8[3] > 0xbf

  00849	33 c0		 xor	 eax, eax
  0084b	85 c0		 test	 eax, eax
  0084d	75 7e		 jne	 SHORT $LN50@s370_conve
  0084f	b8 01 00 00 00	 mov	 eax, 1
  00854	48 6b c0 01	 imul	 rax, rax, 1
  00858	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0085d	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00862	7c 69		 jl	 SHORT $LN50@s370_conve
  00864	b8 01 00 00 00	 mov	 eax, 1
  00869	48 6b c0 01	 imul	 rax, rax, 1
  0086d	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00872	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00877	7f 54		 jg	 SHORT $LN50@s370_conve
  00879	b8 01 00 00 00	 mov	 eax, 1
  0087e	48 6b c0 02	 imul	 rax, rax, 2
  00882	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00887	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0088c	7c 3f		 jl	 SHORT $LN50@s370_conve
  0088e	b8 01 00 00 00	 mov	 eax, 1
  00893	48 6b c0 02	 imul	 rax, rax, 2
  00897	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0089c	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  008a1	7f 2a		 jg	 SHORT $LN50@s370_conve
  008a3	b8 01 00 00 00	 mov	 eax, 1
  008a8	48 6b c0 03	 imul	 rax, rax, 3
  008ac	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008b1	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  008b6	7c 15		 jl	 SHORT $LN50@s370_conve
  008b8	b8 01 00 00 00	 mov	 eax, 1
  008bd	48 6b c0 03	 imul	 rax, rax, 3
  008c1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008c6	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  008cb	7e 11		 jle	 SHORT $LN49@s370_conve
$LN50@s370_conve:

; 2546 :                     )
; 2547 :                     {
; 2548 :                         regs->psw.cc = 2;

  008cd	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008d5	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2549 :                         return;

  008d9	e9 4f 02 00 00	 jmp	 $LN1@s370_conve
$LN49@s370_conve:
$LN48@s370_conve:

; 2550 :                     }
; 2551 :                 }
; 2552 :                 if (utf8[0] == 0xf4)

  008de	b8 01 00 00 00	 mov	 eax, 1
  008e3	48 6b c0 00	 imul	 rax, rax, 0
  008e7	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  008ec	3d f4 00 00 00	 cmp	 eax, 244		; 000000f4H
  008f1	0f 85 95 00 00
	00		 jne	 $LN51@s370_conve

; 2553 :                 {
; 2554 :                     if (0
; 2555 :                         || utf8[1] < 0x80
; 2556 :                         || utf8[1] > 0x8f
; 2557 : 
; 2558 :                         || utf8[2] < 0x80
; 2559 :                         || utf8[2] > 0xbf
; 2560 : 
; 2561 :                         || utf8[3] < 0x80
; 2562 :                         || utf8[3] > 0xbf

  008f7	33 c0		 xor	 eax, eax
  008f9	85 c0		 test	 eax, eax
  008fb	75 7e		 jne	 SHORT $LN53@s370_conve
  008fd	b8 01 00 00 00	 mov	 eax, 1
  00902	48 6b c0 01	 imul	 rax, rax, 1
  00906	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0090b	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00910	7c 69		 jl	 SHORT $LN53@s370_conve
  00912	b8 01 00 00 00	 mov	 eax, 1
  00917	48 6b c0 01	 imul	 rax, rax, 1
  0091b	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00920	3d 8f 00 00 00	 cmp	 eax, 143		; 0000008fH
  00925	7f 54		 jg	 SHORT $LN53@s370_conve
  00927	b8 01 00 00 00	 mov	 eax, 1
  0092c	48 6b c0 02	 imul	 rax, rax, 2
  00930	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00935	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0093a	7c 3f		 jl	 SHORT $LN53@s370_conve
  0093c	b8 01 00 00 00	 mov	 eax, 1
  00941	48 6b c0 02	 imul	 rax, rax, 2
  00945	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0094a	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  0094f	7f 2a		 jg	 SHORT $LN53@s370_conve
  00951	b8 01 00 00 00	 mov	 eax, 1
  00956	48 6b c0 03	 imul	 rax, rax, 3
  0095a	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0095f	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00964	7c 15		 jl	 SHORT $LN53@s370_conve
  00966	b8 01 00 00 00	 mov	 eax, 1
  0096b	48 6b c0 03	 imul	 rax, rax, 3
  0096f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00974	3d bf 00 00 00	 cmp	 eax, 191		; 000000bfH
  00979	7e 11		 jle	 SHORT $LN52@s370_conve
$LN53@s370_conve:

; 2563 :                     )
; 2564 :                     {
; 2565 :                         regs->psw.cc = 2;

  0097b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00983	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2566 :                         return;

  00987	e9 a1 01 00 00	 jmp	 $LN1@s370_conve
$LN52@s370_conve:
$LN51@s370_conve:
$LN44@s370_conve:

; 2567 :                     }
; 2568 :                 }
; 2569 :             }
; 2570 : #endif /* defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY ) */
; 2571 : 
; 2572 :             /* xlate range f0000000-f7000000 */
; 2573 :             /* 1110uvw 10xyefgh 10ijklmn 10opqrst -> 00000000 000uvwxy efghijkl mnopqrst */
; 2574 :             utf32[1] = ((utf8[0] & 0x07) << 2) | ((utf8[1] & 0x30) >> 4);

  0098c	b8 01 00 00 00	 mov	 eax, 1
  00991	48 6b c0 00	 imul	 rax, rax, 0
  00995	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  0099a	83 e0 07	 and	 eax, 7
  0099d	c1 e0 02	 shl	 eax, 2
  009a0	b9 01 00 00 00	 mov	 ecx, 1
  009a5	48 6b c9 01	 imul	 rcx, rcx, 1
  009a9	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  009ae	83 e1 30	 and	 ecx, 48			; 00000030H
  009b1	c1 f9 04	 sar	 ecx, 4
  009b4	0b c1		 or	 eax, ecx
  009b6	b9 01 00 00 00	 mov	 ecx, 1
  009bb	48 6b c9 01	 imul	 rcx, rcx, 1
  009bf	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2575 :             utf32[2] = (utf8[1] << 4) | ((utf8[2] & 0x3c) >> 2);

  009c3	b8 01 00 00 00	 mov	 eax, 1
  009c8	48 6b c0 01	 imul	 rax, rax, 1
  009cc	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  009d1	c1 e0 04	 shl	 eax, 4
  009d4	b9 01 00 00 00	 mov	 ecx, 1
  009d9	48 6b c9 02	 imul	 rcx, rcx, 2
  009dd	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  009e2	83 e1 3c	 and	 ecx, 60			; 0000003cH
  009e5	c1 f9 02	 sar	 ecx, 2
  009e8	0b c1		 or	 eax, ecx
  009ea	b9 01 00 00 00	 mov	 ecx, 1
  009ef	48 6b c9 02	 imul	 rcx, rcx, 2
  009f3	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2576 :             utf32[3] = (utf8[2] << 6) | (utf8[3] & 0x3f);

  009f7	b8 01 00 00 00	 mov	 eax, 1
  009fc	48 6b c0 02	 imul	 rax, rax, 2
  00a00	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf8$[rsp+rax]
  00a05	c1 e0 06	 shl	 eax, 6
  00a08	b9 01 00 00 00	 mov	 ecx, 1
  00a0d	48 6b c9 03	 imul	 rcx, rcx, 3
  00a11	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf8$[rsp+rcx]
  00a16	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00a19	0b c1		 or	 eax, ecx
  00a1b	b9 01 00 00 00	 mov	 ecx, 1
  00a20	48 6b c9 03	 imul	 rcx, rcx, 3
  00a24	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2577 :             read = 4;

  00a28	c7 44 24 4c 04
	00 00 00	 mov	 DWORD PTR read$[rsp], 4

; 2578 :         }

  00a30	eb 11		 jmp	 SHORT $LN40@s370_conve
$LN39@s370_conve:

; 2579 :         else
; 2580 :         {
; 2581 :             regs->psw.cc = 2;

  00a32	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a3a	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2582 :             return;

  00a3e	e9 ea 00 00 00	 jmp	 $LN1@s370_conve
$LN40@s370_conve:
$LN25@s370_conve:
$LN17@s370_conve:
$LN15@s370_conve:

; 2583 :         }
; 2584 : 
; 2585 :         /* Write and commit registers */
; 2586 :         ARCH_DEP(vstorec)(utf32, 3, dest, r1, regs);

  00a43	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a4b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a50	44 8b 4c 24 48	 mov	 r9d, DWORD PTR r1$[rsp]
  00a55	44 8b 44 24 50	 mov	 r8d, DWORD PTR dest$[rsp]
  00a5a	b2 03		 mov	 dl, 3
  00a5c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR utf32$[rsp]
  00a61	e8 00 00 00 00	 call	 s370_vstorec

; 2587 :         SET_GR_A(r1, regs, (dest += 4) & ADDRESS_MAXWRAP(regs));

  00a66	8b 44 24 50	 mov	 eax, DWORD PTR dest$[rsp]
  00a6a	83 c0 04	 add	 eax, 4
  00a6d	89 44 24 50	 mov	 DWORD PTR dest$[rsp], eax
  00a71	8b 44 24 50	 mov	 eax, DWORD PTR dest$[rsp]
  00a75	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a7a	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00a7f	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00a87	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2588 :         SET_GR_A(r1 + 1, regs, destlen -= 4);

  00a8e	8b 44 24 54	 mov	 eax, DWORD PTR destlen$[rsp]
  00a92	83 e8 04	 sub	 eax, 4
  00a95	89 44 24 54	 mov	 DWORD PTR destlen$[rsp], eax
  00a99	8b 44 24 48	 mov	 eax, DWORD PTR r1$[rsp]
  00a9d	ff c0		 inc	 eax
  00a9f	48 98		 cdqe
  00aa1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00aa9	8b 54 24 54	 mov	 edx, DWORD PTR destlen$[rsp]
  00aad	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2589 :         SET_GR_A(r2, regs, (srce += read) & ADDRESS_MAXWRAP(regs));

  00ab4	8b 44 24 4c	 mov	 eax, DWORD PTR read$[rsp]
  00ab8	8b 4c 24 40	 mov	 ecx, DWORD PTR srce$[rsp]
  00abc	03 c8		 add	 ecx, eax
  00abe	8b c1		 mov	 eax, ecx
  00ac0	89 44 24 40	 mov	 DWORD PTR srce$[rsp], eax
  00ac4	8b 44 24 40	 mov	 eax, DWORD PTR srce$[rsp]
  00ac8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00acd	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00ad2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00ada	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2590 :         SET_GR_A(r2 + 1, regs, srcelen -= read);

  00ae1	8b 44 24 4c	 mov	 eax, DWORD PTR read$[rsp]
  00ae5	8b 4c 24 44	 mov	 ecx, DWORD PTR srcelen$[rsp]
  00ae9	2b c8		 sub	 ecx, eax
  00aeb	8b c1		 mov	 eax, ecx
  00aed	89 44 24 44	 mov	 DWORD PTR srcelen$[rsp], eax
  00af1	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  00af5	ff c0		 inc	 eax
  00af7	48 98		 cdqe
  00af9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b01	8b 54 24 44	 mov	 edx, DWORD PTR srcelen$[rsp]
  00b05	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2591 : 
; 2592 :         xlated += read;

  00b0c	8b 44 24 4c	 mov	 eax, DWORD PTR read$[rsp]
  00b10	8b 4c 24 5c	 mov	 ecx, DWORD PTR xlated$[rsp]
  00b14	03 c8		 add	 ecx, eax
  00b16	8b c1		 mov	 eax, ecx
  00b18	89 44 24 5c	 mov	 DWORD PTR xlated$[rsp], eax

; 2593 :     }

  00b1c	e9 6e f6 ff ff	 jmp	 $LN5@s370_conve
$LN6@s370_conve:

; 2594 : 
; 2595 :     /* CPU determined number of characters reached */
; 2596 :     regs->psw.cc = 3;

  00b21	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b29	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@s370_conve:
$LN54@s370_conve:

; 2597 : }

  00b2d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00b34	c3		 ret	 0
s370_convert_utf8_to_utf32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf32$ = 48
utf8$ = 52
write$ = 56
destlen$ = 60
r1$ = 64
r2$ = 68
dest$ = 72
srce$ = 76
srcelen$ = 80
xlated$ = 84
i$1 = 88
inst$ = 112
regs$ = 120
s370_convert_utf32_to_utf8 PROC

; 2717 : {

$LN30:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2718 :     VADR dest;                     /* Destination address            */
; 2719 :     GREG destlen;                  /* Destination length             */
; 2720 :     int r1;
; 2721 :     int r2;
; 2722 :     VADR srce;                     /* Source address                 */
; 2723 :     GREG srcelen;                  /* Source length                  */
; 2724 :     BYTE utf32[4];                 /* utf32 character(s)             */
; 2725 :     BYTE utf8[4];                  /* utf8 character(s)              */
; 2726 :     int write;                     /* Bytes written                  */
; 2727 :     int xlated;                    /* characters translated          */
; 2728 : 
; 2729 :     RRE(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 58	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 44	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 58	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_conve:
  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 04	 add	 rax, 4
  0004a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 04	 cmp	 eax, 4
  00058	74 0c		 je	 SHORT $LN7@s370_conve
  0005a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s370_conve:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s370_conve

; 2730 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );
; 2731 :     ODD2_CHECK(r1, r2, regs);

  0006c	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  00070	83 e0 01	 and	 eax, 1
  00073	85 c0		 test	 eax, eax
  00075	75 0b		 jne	 SHORT $LN9@s370_conve
  00077	8b 44 24 44	 mov	 eax, DWORD PTR r2$[rsp]
  0007b	83 e0 01	 and	 eax, 1
  0007e	85 c0		 test	 eax, eax
  00080	74 15		 je	 SHORT $LN8@s370_conve
$LN9@s370_conve:
  00082	ba 06 00 00 00	 mov	 edx, 6
  00087	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0008c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00091	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@s370_conve:

; 2732 : 
; 2733 :     /* Get paramaters */
; 2734 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  00097	48 63 44 24 40	 movsxd	 rax, DWORD PTR r1$[rsp]
  0009c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000a8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ad	89 44 24 48	 mov	 DWORD PTR dest$[rsp], eax

; 2735 :     destlen = GR_A(r1 + 1, regs);

  000b1	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  000b5	ff c0		 inc	 eax
  000b7	48 98		 cdqe
  000b9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c5	89 44 24 3c	 mov	 DWORD PTR destlen$[rsp], eax

; 2736 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  000c9	48 63 44 24 44	 movsxd	 rax, DWORD PTR r2$[rsp]
  000ce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000da	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000df	89 44 24 4c	 mov	 DWORD PTR srce$[rsp], eax

; 2737 :     srcelen = GR_A(r2 + 1, regs);

  000e3	8b 44 24 44	 mov	 eax, DWORD PTR r2$[rsp]
  000e7	ff c0		 inc	 eax
  000e9	48 98		 cdqe
  000eb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000f0	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000f7	89 44 24 50	 mov	 DWORD PTR srcelen$[rsp], eax

; 2738 : 
; 2739 :     /* Initialize number of translated charachters */
; 2740 :     xlated = 0;

  000fb	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0

; 2741 :     write = 0;

  00103	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR write$[rsp], 0
$LN5@s370_conve:

; 2742 :     while(xlated < 4096)

  0010b	81 7c 24 54 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  00113	0f 8d 1d 04 00
	00		 jge	 $LN6@s370_conve

; 2743 :     {
; 2744 :         /* Check end of source or destination */
; 2745 :         if(srcelen < 4)

  00119	83 7c 24 50 04	 cmp	 DWORD PTR srcelen$[rsp], 4
  0011e	73 0e		 jae	 SHORT $LN10@s370_conve

; 2746 :         {
; 2747 :             regs->psw.cc = 0;

  00120	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00125	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2748 :             return;

  00129	e9 11 04 00 00	 jmp	 $LN1@s370_conve
$LN10@s370_conve:

; 2749 :         }
; 2750 :         if(destlen < 1)

  0012e	83 7c 24 3c 01	 cmp	 DWORD PTR destlen$[rsp], 1
  00133	73 0e		 jae	 SHORT $LN11@s370_conve

; 2751 :         {
; 2752 :             regs->psw.cc = 1;

  00135	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0013a	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2753 :             return;

  0013e	e9 fc 03 00 00	 jmp	 $LN1@s370_conve
$LN11@s370_conve:

; 2754 :         }
; 2755 : 
; 2756 :         /* Get 4 bytes */
; 2757 :         ARCH_DEP(vfetchc)(utf32, 3, srce, r2, regs);

  00143	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00148	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014d	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r2$[rsp]
  00152	44 8b 44 24 4c	 mov	 r8d, DWORD PTR srce$[rsp]
  00157	b2 03		 mov	 dl, 3
  00159	48 8d 4c 24 30	 lea	 rcx, QWORD PTR utf32$[rsp]
  0015e	e8 00 00 00 00	 call	 s370_vfetchc

; 2758 : 
; 2759 :         if(utf32[0] != 0x00)

  00163	b8 01 00 00 00	 mov	 eax, 1
  00168	48 6b c0 00	 imul	 rax, rax, 0
  0016c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00171	85 c0		 test	 eax, eax
  00173	74 13		 je	 SHORT $LN12@s370_conve

; 2760 :         {
; 2761 :             regs->psw.cc = 2;

  00175	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0017a	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2762 :             return;

  0017e	e9 bc 03 00 00	 jmp	 $LN1@s370_conve

; 2763 :         }

  00183	e9 dd 02 00 00	 jmp	 $LN13@s370_conve
$LN12@s370_conve:

; 2764 :         else if(utf32[1] == 0x00)

  00188	b8 01 00 00 00	 mov	 eax, 1
  0018d	48 6b c0 01	 imul	 rax, rax, 1
  00191	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00196	85 c0		 test	 eax, eax
  00198	0f 85 b7 01 00
	00		 jne	 $LN14@s370_conve

; 2765 :         {
; 2766 :             if(utf32[2] == 0x00)

  0019e	b8 01 00 00 00	 mov	 eax, 1
  001a3	48 6b c0 02	 imul	 rax, rax, 2
  001a7	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001ac	85 c0		 test	 eax, eax
  001ae	75 3b		 jne	 SHORT $LN16@s370_conve

; 2767 :             {
; 2768 :                 if(utf32[3] <= 0x7f)

  001b0	b8 01 00 00 00	 mov	 eax, 1
  001b5	48 6b c0 03	 imul	 rax, rax, 3
  001b9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001be	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  001c1	7f 23		 jg	 SHORT $LN18@s370_conve

; 2769 :                 {
; 2770 :                     /* xlate range 00000000-0000007f */
; 2771 :                     /* 00000000 00000000 00000000 0jklmnop -> 0jklmnop */
; 2772 :                     utf8[0] = utf32[3];

  001c3	b8 01 00 00 00	 mov	 eax, 1
  001c8	48 6b c0 03	 imul	 rax, rax, 3
  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	48 6b c9 00	 imul	 rcx, rcx, 0
  001d5	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001da	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2773 :                     write = 1;

  001de	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR write$[rsp], 1
$LN18@s370_conve:

; 2774 :                 }
; 2775 :             }

  001e6	e9 65 01 00 00	 jmp	 $LN17@s370_conve
$LN16@s370_conve:

; 2776 :             else if(utf32[2] <= 0x07)

  001eb	b8 01 00 00 00	 mov	 eax, 1
  001f0	48 6b c0 02	 imul	 rax, rax, 2
  001f4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001f9	83 f8 07	 cmp	 eax, 7
  001fc	7f 7a		 jg	 SHORT $LN19@s370_conve

; 2777 :             {
; 2778 :                 /* Check destination length */
; 2779 :                 if(destlen < 2)

  001fe	83 7c 24 3c 02	 cmp	 DWORD PTR destlen$[rsp], 2
  00203	73 0e		 jae	 SHORT $LN21@s370_conve

; 2780 :                 {
; 2781 :                     regs->psw.cc = 1;

  00205	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0020a	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2782 :                     return;

  0020e	e9 2c 03 00 00	 jmp	 $LN1@s370_conve
$LN21@s370_conve:

; 2783 :                 }
; 2784 : 
; 2785 :                 /* xlate range 00000080-000007ff */
; 2786 :                 /* 00000000 00000000 00000fgh ijklmnop -> 110fghij 10klmnop */
; 2787 :                 utf8[0] = 0xc0 | (utf32[2] << 2) | (utf32[2] >> 6);

  00213	b8 01 00 00 00	 mov	 eax, 1
  00218	48 6b c0 02	 imul	 rax, rax, 2
  0021c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00221	c1 e0 02	 shl	 eax, 2
  00224	0d c0 00 00 00	 or	 eax, 192		; 000000c0H
  00229	b9 01 00 00 00	 mov	 ecx, 1
  0022e	48 6b c9 02	 imul	 rcx, rcx, 2
  00232	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  00237	c1 f9 06	 sar	 ecx, 6
  0023a	0b c1		 or	 eax, ecx
  0023c	b9 01 00 00 00	 mov	 ecx, 1
  00241	48 6b c9 00	 imul	 rcx, rcx, 0
  00245	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2788 :                 utf8[1] = 0x80 | (utf32[2] & 0x3f);

  00249	b8 01 00 00 00	 mov	 eax, 1
  0024e	48 6b c0 02	 imul	 rax, rax, 2
  00252	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00257	83 e0 3f	 and	 eax, 63			; 0000003fH
  0025a	0f ba e8 07	 bts	 eax, 7
  0025e	b9 01 00 00 00	 mov	 ecx, 1
  00263	48 6b c9 01	 imul	 rcx, rcx, 1
  00267	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2789 :                 write = 2;

  0026b	c7 44 24 38 02
	00 00 00	 mov	 DWORD PTR write$[rsp], 2

; 2790 :             }

  00273	e9 d8 00 00 00	 jmp	 $LN20@s370_conve
$LN19@s370_conve:

; 2791 :             else if(utf32[2] <= 0xd7 || utf32[2] > 0xdc)

  00278	b8 01 00 00 00	 mov	 eax, 1
  0027d	48 6b c0 02	 imul	 rax, rax, 2
  00281	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00286	3d d7 00 00 00	 cmp	 eax, 215		; 000000d7H
  0028b	7e 19		 jle	 SHORT $LN24@s370_conve
  0028d	b8 01 00 00 00	 mov	 eax, 1
  00292	48 6b c0 02	 imul	 rax, rax, 2
  00296	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0029b	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  002a0	0f 8e 9c 00 00
	00		 jle	 $LN22@s370_conve
$LN24@s370_conve:

; 2792 :             {
; 2793 :                 /* Check destination length */
; 2794 :                 if(destlen < 3)

  002a6	83 7c 24 3c 03	 cmp	 DWORD PTR destlen$[rsp], 3
  002ab	73 0e		 jae	 SHORT $LN25@s370_conve

; 2795 :                 {
; 2796 :                     regs->psw.cc = 1;

  002ad	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002b2	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2797 :                     return;

  002b6	e9 84 02 00 00	 jmp	 $LN1@s370_conve
$LN25@s370_conve:

; 2798 :                 }
; 2799 : 
; 2800 :                 /* xlate range 00000800-0000d7ff and 0000dc00-0000ffff */
; 2801 :                 /* 00000000 00000000 abcdefgh ijklnmop -> 1110abcd 10efghij 10klmnop */
; 2802 :                 utf8[0] = 0xe0 | (utf32[2] >> 4);

  002bb	b8 01 00 00 00	 mov	 eax, 1
  002c0	48 6b c0 02	 imul	 rax, rax, 2
  002c4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002c9	c1 f8 04	 sar	 eax, 4
  002cc	0d e0 00 00 00	 or	 eax, 224		; 000000e0H
  002d1	b9 01 00 00 00	 mov	 ecx, 1
  002d6	48 6b c9 00	 imul	 rcx, rcx, 0
  002da	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2803 :                 utf8[1] = 0x80 | ((utf32[2] & 0x0f) << 2) | (utf32[3] >> 6);

  002de	b8 01 00 00 00	 mov	 eax, 1
  002e3	48 6b c0 02	 imul	 rax, rax, 2
  002e7	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002ec	83 e0 0f	 and	 eax, 15
  002ef	c1 e0 02	 shl	 eax, 2
  002f2	0f ba e8 07	 bts	 eax, 7
  002f6	b9 01 00 00 00	 mov	 ecx, 1
  002fb	48 6b c9 03	 imul	 rcx, rcx, 3
  002ff	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  00304	c1 f9 06	 sar	 ecx, 6
  00307	0b c1		 or	 eax, ecx
  00309	b9 01 00 00 00	 mov	 ecx, 1
  0030e	48 6b c9 01	 imul	 rcx, rcx, 1
  00312	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2804 :                 utf8[2] = 0x80 | (utf32[3] & 0x3f);

  00316	b8 01 00 00 00	 mov	 eax, 1
  0031b	48 6b c0 03	 imul	 rax, rax, 3
  0031f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00324	83 e0 3f	 and	 eax, 63			; 0000003fH
  00327	0f ba e8 07	 bts	 eax, 7
  0032b	b9 01 00 00 00	 mov	 ecx, 1
  00330	48 6b c9 02	 imul	 rcx, rcx, 2
  00334	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2805 :                 write = 3;

  00338	c7 44 24 38 03
	00 00 00	 mov	 DWORD PTR write$[rsp], 3

; 2806 :             }

  00340	eb 0e		 jmp	 SHORT $LN23@s370_conve
$LN22@s370_conve:

; 2807 :             else
; 2808 :             {
; 2809 :                 regs->psw.cc = 2;

  00342	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00347	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2810 :                 return;

  0034b	e9 ef 01 00 00	 jmp	 $LN1@s370_conve
$LN23@s370_conve:
$LN20@s370_conve:
$LN17@s370_conve:

; 2811 :             }
; 2812 :         }

  00350	e9 10 01 00 00	 jmp	 $LN15@s370_conve
$LN14@s370_conve:

; 2813 :         else if(utf32[1] >= 0x01 && utf32[1] <= 0x10)

  00355	b8 01 00 00 00	 mov	 eax, 1
  0035a	48 6b c0 01	 imul	 rax, rax, 1
  0035e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00363	83 f8 01	 cmp	 eax, 1
  00366	0f 8c eb 00 00
	00		 jl	 $LN26@s370_conve
  0036c	b8 01 00 00 00	 mov	 eax, 1
  00371	48 6b c0 01	 imul	 rax, rax, 1
  00375	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0037a	83 f8 10	 cmp	 eax, 16
  0037d	0f 8f d4 00 00
	00		 jg	 $LN26@s370_conve

; 2814 :         {
; 2815 :             /* Check destination length */
; 2816 :             if(destlen < 4)

  00383	83 7c 24 3c 04	 cmp	 DWORD PTR destlen$[rsp], 4
  00388	73 0e		 jae	 SHORT $LN28@s370_conve

; 2817 :             {
; 2818 :                 regs->psw.cc = 1;

  0038a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0038f	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2819 :                 return;

  00393	e9 a7 01 00 00	 jmp	 $LN1@s370_conve
$LN28@s370_conve:

; 2820 :             }
; 2821 : 
; 2822 :             /* xlate range 00010000-0010ffff */
; 2823 :             /* 00000000 000uvwxy efghijkl mnopqrst -> 11110uvw 10xyefgh 10ijklmn 10opqrst */
; 2824 :             utf8[0] = 0xf0 | (utf32[1] >> 2);

  00398	b8 01 00 00 00	 mov	 eax, 1
  0039d	48 6b c0 01	 imul	 rax, rax, 1
  003a1	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  003a6	c1 f8 02	 sar	 eax, 2
  003a9	0d f0 00 00 00	 or	 eax, 240		; 000000f0H
  003ae	b9 01 00 00 00	 mov	 ecx, 1
  003b3	48 6b c9 00	 imul	 rcx, rcx, 0
  003b7	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2825 :             utf8[1] = 0x80 | ((utf32[1] & 0x03) << 4) | (utf32[2] >> 4);

  003bb	b8 01 00 00 00	 mov	 eax, 1
  003c0	48 6b c0 01	 imul	 rax, rax, 1
  003c4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  003c9	83 e0 03	 and	 eax, 3
  003cc	c1 e0 04	 shl	 eax, 4
  003cf	0f ba e8 07	 bts	 eax, 7
  003d3	b9 01 00 00 00	 mov	 ecx, 1
  003d8	48 6b c9 02	 imul	 rcx, rcx, 2
  003dc	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  003e1	c1 f9 04	 sar	 ecx, 4
  003e4	0b c1		 or	 eax, ecx
  003e6	b9 01 00 00 00	 mov	 ecx, 1
  003eb	48 6b c9 01	 imul	 rcx, rcx, 1
  003ef	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2826 :             utf8[2] = 0x80 | ((utf32[2] & 0x0f) << 2) | (utf32[3] >> 6);

  003f3	b8 01 00 00 00	 mov	 eax, 1
  003f8	48 6b c0 02	 imul	 rax, rax, 2
  003fc	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00401	83 e0 0f	 and	 eax, 15
  00404	c1 e0 02	 shl	 eax, 2
  00407	0f ba e8 07	 bts	 eax, 7
  0040b	b9 01 00 00 00	 mov	 ecx, 1
  00410	48 6b c9 03	 imul	 rcx, rcx, 3
  00414	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  00419	c1 f9 06	 sar	 ecx, 6
  0041c	0b c1		 or	 eax, ecx
  0041e	b9 01 00 00 00	 mov	 ecx, 1
  00423	48 6b c9 02	 imul	 rcx, rcx, 2
  00427	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2827 :             utf8[3] = 0x80 | (utf32[3] & 0x3f);

  0042b	b8 01 00 00 00	 mov	 eax, 1
  00430	48 6b c0 03	 imul	 rax, rax, 3
  00434	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00439	83 e0 3f	 and	 eax, 63			; 0000003fH
  0043c	0f ba e8 07	 bts	 eax, 7
  00440	b9 01 00 00 00	 mov	 ecx, 1
  00445	48 6b c9 03	 imul	 rcx, rcx, 3
  00449	88 44 0c 34	 mov	 BYTE PTR utf8$[rsp+rcx], al

; 2828 :             write = 4;

  0044d	c7 44 24 38 04
	00 00 00	 mov	 DWORD PTR write$[rsp], 4

; 2829 :         }

  00455	eb 0e		 jmp	 SHORT $LN27@s370_conve
$LN26@s370_conve:

; 2830 :         else
; 2831 :         {
; 2832 :             regs->psw.cc = 2;

  00457	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0045c	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2833 :             return;

  00460	e9 da 00 00 00	 jmp	 $LN1@s370_conve
$LN27@s370_conve:
$LN15@s370_conve:
$LN13@s370_conve:

; 2834 :         }
; 2835 : 
; 2836 :         /* Write and commit registers */
; 2837 :         ARCH_DEP(vstorec)(utf8, write - 1, dest, r1, regs);

  00465	8b 44 24 38	 mov	 eax, DWORD PTR write$[rsp]
  00469	ff c8		 dec	 eax
  0046b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00470	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00475	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  0047a	44 8b 44 24 48	 mov	 r8d, DWORD PTR dest$[rsp]
  0047f	0f b6 d0	 movzx	 edx, al
  00482	48 8d 4c 24 34	 lea	 rcx, QWORD PTR utf8$[rsp]
  00487	e8 00 00 00 00	 call	 s370_vstorec

; 2838 :         SET_GR_A(r1, regs, (dest += write) & ADDRESS_MAXWRAP(regs));

  0048c	8b 44 24 38	 mov	 eax, DWORD PTR write$[rsp]
  00490	8b 4c 24 48	 mov	 ecx, DWORD PTR dest$[rsp]
  00494	03 c8		 add	 ecx, eax
  00496	8b c1		 mov	 eax, ecx
  00498	89 44 24 48	 mov	 DWORD PTR dest$[rsp], eax
  0049c	8b 44 24 48	 mov	 eax, DWORD PTR dest$[rsp]
  004a0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004a5	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR r1$[rsp]
  004aa	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  004af	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2839 :         SET_GR_A(r1 + 1, regs, destlen -= write);

  004b6	8b 44 24 38	 mov	 eax, DWORD PTR write$[rsp]
  004ba	8b 4c 24 3c	 mov	 ecx, DWORD PTR destlen$[rsp]
  004be	2b c8		 sub	 ecx, eax
  004c0	8b c1		 mov	 eax, ecx
  004c2	89 44 24 3c	 mov	 DWORD PTR destlen$[rsp], eax
  004c6	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  004ca	ff c0		 inc	 eax
  004cc	48 98		 cdqe
  004ce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  004d3	8b 54 24 3c	 mov	 edx, DWORD PTR destlen$[rsp]
  004d7	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2840 :         SET_GR_A(r2, regs, (srce += 4) & ADDRESS_MAXWRAP(regs));

  004de	8b 44 24 4c	 mov	 eax, DWORD PTR srce$[rsp]
  004e2	83 c0 04	 add	 eax, 4
  004e5	89 44 24 4c	 mov	 DWORD PTR srce$[rsp], eax
  004e9	8b 44 24 4c	 mov	 eax, DWORD PTR srce$[rsp]
  004ed	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004f2	48 63 4c 24 44	 movsxd	 rcx, DWORD PTR r2$[rsp]
  004f7	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  004fc	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2841 :         SET_GR_A(r2 + 1, regs, srcelen -= 4);

  00503	8b 44 24 50	 mov	 eax, DWORD PTR srcelen$[rsp]
  00507	83 e8 04	 sub	 eax, 4
  0050a	89 44 24 50	 mov	 DWORD PTR srcelen$[rsp], eax
  0050e	8b 44 24 44	 mov	 eax, DWORD PTR r2$[rsp]
  00512	ff c0		 inc	 eax
  00514	48 98		 cdqe
  00516	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0051b	8b 54 24 50	 mov	 edx, DWORD PTR srcelen$[rsp]
  0051f	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2842 : 
; 2843 :         xlated += 4;

  00526	8b 44 24 54	 mov	 eax, DWORD PTR xlated$[rsp]
  0052a	83 c0 04	 add	 eax, 4
  0052d	89 44 24 54	 mov	 DWORD PTR xlated$[rsp], eax

; 2844 :     }

  00531	e9 d5 fb ff ff	 jmp	 $LN5@s370_conve
$LN6@s370_conve:

; 2845 : 
; 2846 :     /* CPU determined number of characters reached */
; 2847 :     regs->psw.cc = 3;

  00536	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0053b	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@s370_conve:

; 2848 : }

  0053f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00543	c3		 ret	 0
s370_convert_utf32_to_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf32$ = 48
zabcd$ = 52
utf16$ = 56
r1$ = 60
r2$ = 64
destlen$ = 68
dest$ = 72
write$ = 76
srce$ = 80
srcelen$ = 84
xlated$ = 88
i$1 = 92
inst$ = 112
regs$ = 120
s370_convert_utf32_to_utf16 PROC

; 2854 : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2855 :     VADR dest;                     /* Destination address            */
; 2856 :     GREG destlen;                  /* Destination length             */
; 2857 :     int r1;
; 2858 :     int r2;
; 2859 :     VADR srce;                     /* Source address                 */
; 2860 :     GREG srcelen;                  /* Source length                  */
; 2861 :     BYTE utf16[4];                 /* utf16 character(s)             */
; 2862 :     BYTE utf32[4];                 /* utf32 character(s)             */
; 2863 :     int write;                     /* Bytes written                  */
; 2864 :     int xlated;                    /* characters translated          */
; 2865 :     BYTE zabcd;                    /* Work value                     */
; 2866 : 
; 2867 :     RRE(inst, regs, r1, r2);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 03	 imul	 rax, rax, 3
  00017	48 8b 4c 24 70	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	89 44 24 5c	 mov	 DWORD PTR i$1[rsp], eax
  00024	8b 44 24 5c	 mov	 eax, DWORD PTR i$1[rsp]
  00028	83 e0 0f	 and	 eax, 15
  0002b	89 44 24 40	 mov	 DWORD PTR r2$[rsp], eax
  0002f	8b 44 24 5c	 mov	 eax, DWORD PTR i$1[rsp]
  00033	c1 f8 04	 sar	 eax, 4
  00036	83 e0 0f	 and	 eax, 15
  00039	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax
$LN4@s370_conve:
  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00046	48 83 c0 04	 add	 rax, 4
  0004a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00053	33 c0		 xor	 eax, eax
  00055	83 f8 04	 cmp	 eax, 4
  00058	74 0c		 je	 SHORT $LN7@s370_conve
  0005a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0005f	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s370_conve:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 d1		 jne	 SHORT $LN4@s370_conve

; 2868 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );
; 2869 :     ODD2_CHECK(r1, r2, regs);

  0006c	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  00070	83 e0 01	 and	 eax, 1
  00073	85 c0		 test	 eax, eax
  00075	75 0b		 jne	 SHORT $LN9@s370_conve
  00077	8b 44 24 40	 mov	 eax, DWORD PTR r2$[rsp]
  0007b	83 e0 01	 and	 eax, 1
  0007e	85 c0		 test	 eax, eax
  00080	74 15		 je	 SHORT $LN8@s370_conve
$LN9@s370_conve:
  00082	ba 06 00 00 00	 mov	 edx, 6
  00087	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0008c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00091	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@s370_conve:

; 2870 : 
; 2871 :     /* Get paramaters */
; 2872 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  00097	48 63 44 24 3c	 movsxd	 rax, DWORD PTR r1$[rsp]
  0009c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000a8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ad	89 44 24 48	 mov	 DWORD PTR dest$[rsp], eax

; 2873 :     destlen = GR_A(r1 + 1, regs);

  000b1	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  000b5	ff c0		 inc	 eax
  000b7	48 98		 cdqe
  000b9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000be	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c5	89 44 24 44	 mov	 DWORD PTR destlen$[rsp], eax

; 2874 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  000c9	48 63 44 24 40	 movsxd	 rax, DWORD PTR r2$[rsp]
  000ce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000da	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000df	89 44 24 50	 mov	 DWORD PTR srce$[rsp], eax

; 2875 :     srcelen = GR_A(r2 + 1, regs);

  000e3	8b 44 24 40	 mov	 eax, DWORD PTR r2$[rsp]
  000e7	ff c0		 inc	 eax
  000e9	48 98		 cdqe
  000eb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000f0	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000f7	89 44 24 54	 mov	 DWORD PTR srcelen$[rsp], eax

; 2876 : 
; 2877 :     /* Initialize number of translated charachters */
; 2878 :     xlated = 0;

  000fb	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0
$LN5@s370_conve:

; 2879 :     while(xlated < 4096)

  00103	81 7c 24 58 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  0010b	0f 8d b1 02 00
	00		 jge	 $LN6@s370_conve

; 2880 :     {
; 2881 :         /* Check end of source or destination */
; 2882 :         if(srcelen < 4)

  00111	83 7c 24 54 04	 cmp	 DWORD PTR srcelen$[rsp], 4
  00116	73 0e		 jae	 SHORT $LN10@s370_conve

; 2883 :         {
; 2884 :             regs->psw.cc = 0;

  00118	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011d	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2885 :             return;

  00121	e9 a5 02 00 00	 jmp	 $LN1@s370_conve
$LN10@s370_conve:

; 2886 :         }
; 2887 :         if(destlen < 2)

  00126	83 7c 24 44 02	 cmp	 DWORD PTR destlen$[rsp], 2
  0012b	73 0e		 jae	 SHORT $LN11@s370_conve

; 2888 :         {
; 2889 :             regs->psw.cc = 1;

  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2890 :             return;

  00136	e9 90 02 00 00	 jmp	 $LN1@s370_conve
$LN11@s370_conve:

; 2891 :         }
; 2892 : 
; 2893 :         /* Get 4 bytes */
; 2894 :         ARCH_DEP(vfetchc)(utf32, 3, srce, r2, regs);

  0013b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00140	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00145	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r2$[rsp]
  0014a	44 8b 44 24 50	 mov	 r8d, DWORD PTR srce$[rsp]
  0014f	b2 03		 mov	 dl, 3
  00151	48 8d 4c 24 30	 lea	 rcx, QWORD PTR utf32$[rsp]
  00156	e8 00 00 00 00	 call	 s370_vfetchc

; 2895 : 
; 2896 :         if(utf32[0] != 0x00)

  0015b	b8 01 00 00 00	 mov	 eax, 1
  00160	48 6b c0 00	 imul	 rax, rax, 0
  00164	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00169	85 c0		 test	 eax, eax
  0016b	74 13		 je	 SHORT $LN12@s370_conve

; 2897 :         {
; 2898 :             regs->psw.cc = 2;

  0016d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00172	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2899 :             return;

  00176	e9 50 02 00 00	 jmp	 $LN1@s370_conve

; 2900 :         }

  0017b	e9 71 01 00 00	 jmp	 $LN13@s370_conve
$LN12@s370_conve:

; 2901 :         else if(utf32[1] == 0x00 && (utf32[2] <= 0xd7 || utf32[2] >= 0xdc))

  00180	b8 01 00 00 00	 mov	 eax, 1
  00185	48 6b c0 01	 imul	 rax, rax, 1
  00189	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0018e	85 c0		 test	 eax, eax
  00190	75 6d		 jne	 SHORT $LN14@s370_conve
  00192	b8 01 00 00 00	 mov	 eax, 1
  00197	48 6b c0 02	 imul	 rax, rax, 2
  0019b	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001a0	3d d7 00 00 00	 cmp	 eax, 215		; 000000d7H
  001a5	7e 15		 jle	 SHORT $LN16@s370_conve
  001a7	b8 01 00 00 00	 mov	 eax, 1
  001ac	48 6b c0 02	 imul	 rax, rax, 2
  001b0	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001b5	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  001ba	7c 43		 jl	 SHORT $LN14@s370_conve
$LN16@s370_conve:

; 2902 :         {
; 2903 :             /* xlate range 00000000-0000d7ff and 0000dc00-0000ffff */
; 2904 :             /* 00000000 00000000 abcdefgh ijklmnop -> abcdefgh ijklmnop */
; 2905 :             utf16[0] = utf32[2];

  001bc	b8 01 00 00 00	 mov	 eax, 1
  001c1	48 6b c0 02	 imul	 rax, rax, 2
  001c5	b9 01 00 00 00	 mov	 ecx, 1
  001ca	48 6b c9 00	 imul	 rcx, rcx, 0
  001ce	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001d3	88 44 0c 38	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2906 :             utf16[1] = utf32[3];

  001d7	b8 01 00 00 00	 mov	 eax, 1
  001dc	48 6b c0 03	 imul	 rax, rax, 3
  001e0	b9 01 00 00 00	 mov	 ecx, 1
  001e5	48 6b c9 01	 imul	 rcx, rcx, 1
  001e9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  001ee	88 44 0c 38	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2907 :             write = 2;

  001f2	c7 44 24 4c 02
	00 00 00	 mov	 DWORD PTR write$[rsp], 2

; 2908 :         }

  001fa	e9 f2 00 00 00	 jmp	 $LN15@s370_conve
$LN14@s370_conve:

; 2909 :         else if(utf32[1] >= 0x01 && utf32[1] <= 0x10)

  001ff	b8 01 00 00 00	 mov	 eax, 1
  00204	48 6b c0 01	 imul	 rax, rax, 1
  00208	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  0020d	83 f8 01	 cmp	 eax, 1
  00210	0f 8c cd 00 00
	00		 jl	 $LN17@s370_conve
  00216	b8 01 00 00 00	 mov	 eax, 1
  0021b	48 6b c0 01	 imul	 rax, rax, 1
  0021f	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00224	83 f8 10	 cmp	 eax, 16
  00227	0f 8f b6 00 00
	00		 jg	 $LN17@s370_conve

; 2910 :         {
; 2911 :             /* Check end of destination */
; 2912 :             if(destlen < 4)

  0022d	83 7c 24 44 04	 cmp	 DWORD PTR destlen$[rsp], 4
  00232	73 0e		 jae	 SHORT $LN19@s370_conve

; 2913 :             {
; 2914 :                 regs->psw.cc = 1;

  00234	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00239	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2915 :                 return;

  0023d	e9 89 01 00 00	 jmp	 $LN1@s370_conve
$LN19@s370_conve:

; 2916 :             }
; 2917 : 
; 2918 :             /* xlate range 00010000-0010ffff */
; 2919 :             /* 00000000 000uvwxy efghijkl mnopqrst -> 110110ab cdefghij 110111kl mnopqrst */
; 2920 :             /* 000zabcd = 000uvwxy - 1 */
; 2921 :             zabcd = (utf32[1] - 1) & 0x0f;

  00242	b8 01 00 00 00	 mov	 eax, 1
  00247	48 6b c0 01	 imul	 rax, rax, 1
  0024b	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  00250	ff c8		 dec	 eax
  00252	83 e0 0f	 and	 eax, 15
  00255	88 44 24 34	 mov	 BYTE PTR zabcd$[rsp], al

; 2922 :             utf16[0] = 0xd8 | (zabcd >> 2);

  00259	0f b6 44 24 34	 movzx	 eax, BYTE PTR zabcd$[rsp]
  0025e	c1 f8 02	 sar	 eax, 2
  00261	0d d8 00 00 00	 or	 eax, 216		; 000000d8H
  00266	b9 01 00 00 00	 mov	 ecx, 1
  0026b	48 6b c9 00	 imul	 rcx, rcx, 0
  0026f	88 44 0c 38	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2923 :             utf16[1] = (zabcd << 6) | (utf32[2] >> 2);

  00273	0f b6 44 24 34	 movzx	 eax, BYTE PTR zabcd$[rsp]
  00278	c1 e0 06	 shl	 eax, 6
  0027b	b9 01 00 00 00	 mov	 ecx, 1
  00280	48 6b c9 02	 imul	 rcx, rcx, 2
  00284	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf32$[rsp+rcx]
  00289	c1 f9 02	 sar	 ecx, 2
  0028c	0b c1		 or	 eax, ecx
  0028e	b9 01 00 00 00	 mov	 ecx, 1
  00293	48 6b c9 01	 imul	 rcx, rcx, 1
  00297	88 44 0c 38	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2924 :             utf16[2] = 0xdc | (utf32[2] & 0x03);

  0029b	b8 01 00 00 00	 mov	 eax, 1
  002a0	48 6b c0 02	 imul	 rax, rax, 2
  002a4	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002a9	83 e0 03	 and	 eax, 3
  002ac	0d dc 00 00 00	 or	 eax, 220		; 000000dcH
  002b1	b9 01 00 00 00	 mov	 ecx, 1
  002b6	48 6b c9 02	 imul	 rcx, rcx, 2
  002ba	88 44 0c 38	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2925 :             utf16[3] = utf32[3];

  002be	b8 01 00 00 00	 mov	 eax, 1
  002c3	48 6b c0 03	 imul	 rax, rax, 3
  002c7	b9 01 00 00 00	 mov	 ecx, 1
  002cc	48 6b c9 03	 imul	 rcx, rcx, 3
  002d0	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf32$[rsp+rax]
  002d5	88 44 0c 38	 mov	 BYTE PTR utf16$[rsp+rcx], al

; 2926 :             write = 4;

  002d9	c7 44 24 4c 04
	00 00 00	 mov	 DWORD PTR write$[rsp], 4

; 2927 :         }

  002e1	eb 0e		 jmp	 SHORT $LN18@s370_conve
$LN17@s370_conve:

; 2928 :         else
; 2929 :         {
; 2930 :             regs->psw.cc = 2;

  002e3	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  002e8	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2931 :             return;

  002ec	e9 da 00 00 00	 jmp	 $LN1@s370_conve
$LN18@s370_conve:
$LN15@s370_conve:
$LN13@s370_conve:

; 2932 :         }
; 2933 : 
; 2934 :         /* Write and commit registers */
; 2935 :         ARCH_DEP(vstorec)(utf16, write - 1, dest, r1, regs);

  002f1	8b 44 24 4c	 mov	 eax, DWORD PTR write$[rsp]
  002f5	ff c8		 dec	 eax
  002f7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  002fc	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00301	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r1$[rsp]
  00306	44 8b 44 24 48	 mov	 r8d, DWORD PTR dest$[rsp]
  0030b	0f b6 d0	 movzx	 edx, al
  0030e	48 8d 4c 24 38	 lea	 rcx, QWORD PTR utf16$[rsp]
  00313	e8 00 00 00 00	 call	 s370_vstorec

; 2936 :         SET_GR_A(r1, regs, (dest += write) & ADDRESS_MAXWRAP(regs));

  00318	8b 44 24 4c	 mov	 eax, DWORD PTR write$[rsp]
  0031c	8b 4c 24 48	 mov	 ecx, DWORD PTR dest$[rsp]
  00320	03 c8		 add	 ecx, eax
  00322	8b c1		 mov	 eax, ecx
  00324	89 44 24 48	 mov	 DWORD PTR dest$[rsp], eax
  00328	8b 44 24 48	 mov	 eax, DWORD PTR dest$[rsp]
  0032c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00331	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00336	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0033b	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2937 :         SET_GR_A(r1 + 1, regs, destlen -= write);

  00342	8b 44 24 4c	 mov	 eax, DWORD PTR write$[rsp]
  00346	8b 4c 24 44	 mov	 ecx, DWORD PTR destlen$[rsp]
  0034a	2b c8		 sub	 ecx, eax
  0034c	8b c1		 mov	 eax, ecx
  0034e	89 44 24 44	 mov	 DWORD PTR destlen$[rsp], eax
  00352	8b 44 24 3c	 mov	 eax, DWORD PTR r1$[rsp]
  00356	ff c0		 inc	 eax
  00358	48 98		 cdqe
  0035a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0035f	8b 54 24 44	 mov	 edx, DWORD PTR destlen$[rsp]
  00363	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2938 :         SET_GR_A(r2, regs, (srce += 4) & ADDRESS_MAXWRAP(regs));

  0036a	8b 44 24 50	 mov	 eax, DWORD PTR srce$[rsp]
  0036e	83 c0 04	 add	 eax, 4
  00371	89 44 24 50	 mov	 DWORD PTR srce$[rsp], eax
  00375	8b 44 24 50	 mov	 eax, DWORD PTR srce$[rsp]
  00379	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0037e	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR r2$[rsp]
  00383	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00388	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2939 :         SET_GR_A(r2 + 1, regs, srcelen -= 4);

  0038f	8b 44 24 54	 mov	 eax, DWORD PTR srcelen$[rsp]
  00393	83 e8 04	 sub	 eax, 4
  00396	89 44 24 54	 mov	 DWORD PTR srcelen$[rsp], eax
  0039a	8b 44 24 40	 mov	 eax, DWORD PTR r2$[rsp]
  0039e	ff c0		 inc	 eax
  003a0	48 98		 cdqe
  003a2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  003a7	8b 54 24 54	 mov	 edx, DWORD PTR srcelen$[rsp]
  003ab	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2940 : 
; 2941 :         xlated += 4;

  003b2	8b 44 24 58	 mov	 eax, DWORD PTR xlated$[rsp]
  003b6	83 c0 04	 add	 eax, 4
  003b9	89 44 24 58	 mov	 DWORD PTR xlated$[rsp], eax

; 2942 :     }

  003bd	e9 41 fd ff ff	 jmp	 $LN5@s370_conve
$LN6@s370_conve:

; 2943 : 
; 2944 :     /* CPU determined number of characters reached */
; 2945 :     regs->psw.cc = 3;

  003c2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003c7	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@s370_conve:

; 2946 : }

  003cb	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003cf	c3		 ret	 0
s370_convert_utf32_to_utf16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\general2.c
_TEXT	SEGMENT
utf16$ = 48
wfc$ = 52
uvwxy$ = 53
utf32$ = 56
r2$ = 60
r1$ = 64
srce$ = 68
srcelen$ = 72
dest$ = 76
destlen$ = 80
read$ = 84
temp$1 = 88
xlated$ = 92
m3$ = 96
$T2 = 104
$T3 = 112
inst$ = 144
regs$ = 152
s370_convert_utf16_to_utf32 PROC

; 2603 : {

$LN26:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 2604 :     VADR dest;                     /* Destination address            */
; 2605 :     GREG destlen;                  /* Destination length             */
; 2606 :     int r1;
; 2607 :     int r2;
; 2608 :     int m3;                        /* Mask                           */
; 2609 :     int read;                      /* Bytes read                     */
; 2610 :     VADR srce;                     /* Source address                 */
; 2611 :     GREG srcelen;                  /* Source length                  */
; 2612 :     BYTE utf16[4];                 /* utf16 character(s)             */
; 2613 :     BYTE utf32[4];                 /* utf328 character(s)            */
; 2614 :     BYTE uvwxy;                    /* Work value                     */
; 2615 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2616 :     bool wfc;                      /* Well-Formedness-Checking (W)   */
; 2617 : #endif
; 2618 :     int xlated;                    /* characters translated          */
; 2619 : 
; 2620 :     RRF_M(inst, regs, r1, r2, m3);

  00011	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00019	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001e	8b c8		 mov	 ecx, eax
  00020	e8 00 00 00 00	 call	 _byteswap_ulong
  00025	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  00029	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0002d	83 e0 0f	 and	 eax, 15
  00030	89 44 24 3c	 mov	 DWORD PTR r2$[rsp], eax
  00034	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00038	c1 e8 04	 shr	 eax, 4
  0003b	83 e0 0f	 and	 eax, 15
  0003e	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax
  00042	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	c1 e8 0c	 shr	 eax, 12
  00049	83 e0 0f	 and	 eax, 15
  0004c	89 44 24 60	 mov	 DWORD PTR m3$[rsp], eax
$LN4@s370_conve:
  00050	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00058	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005c	48 83 c0 04	 add	 rax, 4
  00060	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00068	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0006c	33 c0		 xor	 eax, eax
  0006e	83 f8 04	 cmp	 eax, 4
  00071	74 0f		 je	 SHORT $LN7@s370_conve
  00073	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0007b	c6 80 9a 00 00
	00 04		 mov	 BYTE PTR [rax+154], 4
$LN7@s370_conve:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 c8		 jne	 SHORT $LN4@s370_conve

; 2621 :     PER_ZEROADDR_LCHECK2( regs, r1, r1+1, r2, r2+1 );
; 2622 :     ODD2_CHECK(r1, r2, regs);

  00088	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  0008c	83 e0 01	 and	 eax, 1
  0008f	85 c0		 test	 eax, eax
  00091	75 0b		 jne	 SHORT $LN9@s370_conve
  00093	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  00097	83 e0 01	 and	 eax, 1
  0009a	85 c0		 test	 eax, eax
  0009c	74 1b		 je	 SHORT $LN8@s370_conve
$LN9@s370_conve:
  0009e	ba 06 00 00 00	 mov	 edx, 6
  000a3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ab	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000b3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN8@s370_conve:

; 2623 : 
; 2624 :     /* Get paramaters */
; 2625 :     dest = regs->GR(r1) & ADDRESS_MAXWRAP(regs);

  000b9	48 63 44 24 40	 movsxd	 rax, DWORD PTR r1$[rsp]
  000be	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000cd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000d2	89 44 24 4c	 mov	 DWORD PTR dest$[rsp], eax

; 2626 :     destlen = GR_A(r1 + 1, regs);

  000d6	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  000da	ff c0		 inc	 eax
  000dc	48 98		 cdqe
  000de	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e6	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ed	89 44 24 50	 mov	 DWORD PTR destlen$[rsp], eax

; 2627 :     srce = regs->GR(r2) & ADDRESS_MAXWRAP(regs);

  000f1	48 63 44 24 3c	 movsxd	 rax, DWORD PTR r2$[rsp]
  000f6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fe	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00105	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0010a	89 44 24 44	 mov	 DWORD PTR srce$[rsp], eax

; 2628 :     srcelen = GR_A(r2 + 1, regs);

  0010e	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  00112	ff c0		 inc	 eax
  00114	48 98		 cdqe
  00116	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011e	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00125	89 44 24 48	 mov	 DWORD PTR srcelen$[rsp], eax

; 2629 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2630 :     if ((m3 & 0x01) && FACILITY_ENABLED( 030_ETF3_ENHANCEMENT, regs ))

  00129	8b 44 24 60	 mov	 eax, DWORD PTR m3$[rsp]
  0012d	83 e0 01	 and	 eax, 1
  00130	85 c0		 test	 eax, eax
  00132	74 27		 je	 SHORT $LN10@s370_conve
  00134	b8 01 00 00 00	 mov	 eax, 1
  00139	48 6b c0 03	 imul	 rax, rax, 3
  0013d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00145	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  0014d	83 e0 02	 and	 eax, 2
  00150	85 c0		 test	 eax, eax
  00152	74 07		 je	 SHORT $LN10@s370_conve

; 2631 :         wfc = true;

  00154	c6 44 24 34 01	 mov	 BYTE PTR wfc$[rsp], 1
  00159	eb 05		 jmp	 SHORT $LN11@s370_conve
$LN10@s370_conve:

; 2632 :     else
; 2633 :         wfc = false;

  0015b	c6 44 24 34 00	 mov	 BYTE PTR wfc$[rsp], 0
$LN11@s370_conve:

; 2634 : #endif
; 2635 : 
; 2636 :     /* Every valid utf-32 starts with 0x00 */
; 2637 :     utf32[0] = 0x00;

  00160	b8 01 00 00 00	 mov	 eax, 1
  00165	48 6b c0 00	 imul	 rax, rax, 0
  00169	48 89 44 24 68	 mov	 QWORD PTR $T2[rsp], rax
  0016e	48 83 7c 24 68
	04		 cmp	 QWORD PTR $T2[rsp], 4
  00174	73 02		 jae	 SHORT $LN22@s370_conve
  00176	eb 05		 jmp	 SHORT $LN23@s370_conve
$LN22@s370_conve:
  00178	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN23@s370_conve:
  0017d	48 8b 44 24 68	 mov	 rax, QWORD PTR $T2[rsp]
  00182	c6 44 04 38 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2638 : 
; 2639 :     /* Initialize number of translated charachters */
; 2640 :     xlated = 0;

  00187	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR xlated$[rsp], 0
$LN5@s370_conve:

; 2641 :     while(xlated < 4096)

  0018f	81 7c 24 5c 00
	10 00 00	 cmp	 DWORD PTR xlated$[rsp], 4096 ; 00001000H
  00197	0f 8d de 02 00
	00		 jge	 $LN6@s370_conve

; 2642 :     {
; 2643 :         /* Check end of source or destination */
; 2644 :         if(srcelen < 2)

  0019d	83 7c 24 48 02	 cmp	 DWORD PTR srcelen$[rsp], 2
  001a2	73 11		 jae	 SHORT $LN12@s370_conve

; 2645 :         {
; 2646 :             regs->psw.cc = 0;

  001a4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001ac	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2647 :             return;

  001b0	e9 d2 02 00 00	 jmp	 $LN1@s370_conve
$LN12@s370_conve:

; 2648 :         }
; 2649 :         if(destlen < 4)

  001b5	83 7c 24 50 04	 cmp	 DWORD PTR destlen$[rsp], 4
  001ba	73 11		 jae	 SHORT $LN13@s370_conve

; 2650 :         {
; 2651 :             regs->psw.cc = 1;

  001bc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001c4	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 2652 :             return;

  001c8	e9 ba 02 00 00	 jmp	 $LN1@s370_conve
$LN13@s370_conve:

; 2653 :         }
; 2654 : 
; 2655 :         /* Fetch 2 bytes */
; 2656 :         ARCH_DEP(vfetchc)(utf16, 1, srce, r2, regs);

  001cd	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001d5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001da	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r2$[rsp]
  001df	44 8b 44 24 44	 mov	 r8d, DWORD PTR srce$[rsp]
  001e4	b2 01		 mov	 dl, 1
  001e6	48 8d 4c 24 30	 lea	 rcx, QWORD PTR utf16$[rsp]
  001eb	e8 00 00 00 00	 call	 s370_vfetchc

; 2657 :         if(utf16[0] <= 0xd7 || utf16[0] >= 0xdc)

  001f0	b8 01 00 00 00	 mov	 eax, 1
  001f5	48 6b c0 00	 imul	 rax, rax, 0
  001f9	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  001fe	3d d7 00 00 00	 cmp	 eax, 215		; 000000d7H
  00203	7e 15		 jle	 SHORT $LN16@s370_conve
  00205	b8 01 00 00 00	 mov	 eax, 1
  0020a	48 6b c0 00	 imul	 rax, rax, 0
  0020e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00213	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  00218	7c 65		 jl	 SHORT $LN14@s370_conve
$LN16@s370_conve:

; 2658 :         {
; 2659 :             /* xlate range 0000-d7fff and dc00-ffff */
; 2660 :             /* abcdefgh ijklmnop -> 00000000 00000000 abcdefgh ijklmnop */
; 2661 :             utf32[1] = 0x00;

  0021a	48 c7 44 24 70
	01 00 00 00	 mov	 QWORD PTR $T3[rsp], 1
  00223	48 83 7c 24 70
	04		 cmp	 QWORD PTR $T3[rsp], 4
  00229	73 02		 jae	 SHORT $LN24@s370_conve
  0022b	eb 05		 jmp	 SHORT $LN25@s370_conve
$LN24@s370_conve:
  0022d	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN25@s370_conve:
  00232	48 8b 44 24 70	 mov	 rax, QWORD PTR $T3[rsp]
  00237	c6 44 04 38 00	 mov	 BYTE PTR utf32$[rsp+rax], 0

; 2662 :             utf32[2] = utf16[0];

  0023c	b8 01 00 00 00	 mov	 eax, 1
  00241	48 6b c0 00	 imul	 rax, rax, 0
  00245	b9 01 00 00 00	 mov	 ecx, 1
  0024a	48 6b c9 02	 imul	 rcx, rcx, 2
  0024e	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00253	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2663 :             utf32[3] = utf16[1];

  00257	b8 01 00 00 00	 mov	 eax, 1
  0025c	48 6b c0 01	 imul	 rax, rax, 1
  00260	b9 01 00 00 00	 mov	 ecx, 1
  00265	48 6b c9 03	 imul	 rcx, rcx, 3
  00269	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  0026e	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2664 :             read = 2;

  00272	c7 44 24 54 02
	00 00 00	 mov	 DWORD PTR read$[rsp], 2

; 2665 :         }

  0027a	e9 1e 01 00 00	 jmp	 $LN15@s370_conve
$LN14@s370_conve:

; 2666 :         else
; 2667 :         {
; 2668 :             /* Check end of source */
; 2669 :             if(srcelen < 4)

  0027f	83 7c 24 48 04	 cmp	 DWORD PTR srcelen$[rsp], 4
  00284	73 11		 jae	 SHORT $LN17@s370_conve

; 2670 :             {
; 2671 :                 regs->psw.cc = 0;   /* Strange but stated in POP */

  00286	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0028e	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2672 :                 return;

  00292	e9 f0 01 00 00	 jmp	 $LN1@s370_conve
$LN17@s370_conve:

; 2673 :             }
; 2674 : 
; 2675 :             /* Fetch another 2 bytes */
; 2676 :             ARCH_DEP(vfetchc)(&utf16[2], 1, srce, r2, regs);

  00297	b8 01 00 00 00	 mov	 eax, 1
  0029c	48 6b c0 02	 imul	 rax, rax, 2
  002a0	48 8d 44 04 30	 lea	 rax, QWORD PTR utf16$[rsp+rax]
  002a5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ad	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  002b2	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r2$[rsp]
  002b7	44 8b 44 24 44	 mov	 r8d, DWORD PTR srce$[rsp]
  002bc	b2 01		 mov	 dl, 1
  002be	48 8b c8	 mov	 rcx, rax
  002c1	e8 00 00 00 00	 call	 s370_vfetchc

; 2677 : 
; 2678 : #if defined( FEATURE_030_ETF3_ENHANCEMENT_FACILITY )
; 2679 :             /* WellFormednessChecking */
; 2680 :             if (wfc)

  002c6	0f b6 44 24 34	 movzx	 eax, BYTE PTR wfc$[rsp]
  002cb	85 c0		 test	 eax, eax
  002cd	74 3b		 je	 SHORT $LN18@s370_conve

; 2681 :             {
; 2682 :                 if (utf16[2] < 0xdc || utf16[2] > 0xdf)

  002cf	b8 01 00 00 00	 mov	 eax, 1
  002d4	48 6b c0 02	 imul	 rax, rax, 2
  002d8	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  002dd	3d dc 00 00 00	 cmp	 eax, 220		; 000000dcH
  002e2	7c 15		 jl	 SHORT $LN20@s370_conve
  002e4	b8 01 00 00 00	 mov	 eax, 1
  002e9	48 6b c0 02	 imul	 rax, rax, 2
  002ed	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  002f2	3d df 00 00 00	 cmp	 eax, 223		; 000000dfH
  002f7	7e 11		 jle	 SHORT $LN19@s370_conve
$LN20@s370_conve:

; 2683 :                 {
; 2684 :                     regs->psw.cc = 2;

  002f9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00301	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 2685 :                     return;

  00305	e9 7d 01 00 00	 jmp	 $LN1@s370_conve
$LN19@s370_conve:
$LN18@s370_conve:

; 2686 :                 }
; 2687 :             }
; 2688 : #endif
; 2689 :             /* xlate range d800-dbff */
; 2690 :             /* 110110ab cdefghij 110111kl mnopqrst -> 00000000 000uvwxy efghijkl mnopqrst */
; 2691 :             /* 000uvwxy = 0000abcde + 1 */
; 2692 :             uvwxy = (((utf16[0] & 0x03) << 2) | (utf16[1] >> 6)) + 1;

  0030a	b8 01 00 00 00	 mov	 eax, 1
  0030f	48 6b c0 00	 imul	 rax, rax, 0
  00313	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00318	83 e0 03	 and	 eax, 3
  0031b	c1 e0 02	 shl	 eax, 2
  0031e	b9 01 00 00 00	 mov	 ecx, 1
  00323	48 6b c9 01	 imul	 rcx, rcx, 1
  00327	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf16$[rsp+rcx]
  0032c	c1 f9 06	 sar	 ecx, 6
  0032f	0b c1		 or	 eax, ecx
  00331	ff c0		 inc	 eax
  00333	88 44 24 35	 mov	 BYTE PTR uvwxy$[rsp], al

; 2693 :             utf32[1] = uvwxy;

  00337	b8 01 00 00 00	 mov	 eax, 1
  0033c	48 6b c0 01	 imul	 rax, rax, 1
  00340	0f b6 4c 24 35	 movzx	 ecx, BYTE PTR uvwxy$[rsp]
  00345	88 4c 04 38	 mov	 BYTE PTR utf32$[rsp+rax], cl

; 2694 :             utf32[2] = (utf16[1] << 2) | (utf16[2] & 0x03);

  00349	b8 01 00 00 00	 mov	 eax, 1
  0034e	48 6b c0 01	 imul	 rax, rax, 1
  00352	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00357	c1 e0 02	 shl	 eax, 2
  0035a	b9 01 00 00 00	 mov	 ecx, 1
  0035f	48 6b c9 02	 imul	 rcx, rcx, 2
  00363	0f b6 4c 0c 30	 movzx	 ecx, BYTE PTR utf16$[rsp+rcx]
  00368	83 e1 03	 and	 ecx, 3
  0036b	0b c1		 or	 eax, ecx
  0036d	b9 01 00 00 00	 mov	 ecx, 1
  00372	48 6b c9 02	 imul	 rcx, rcx, 2
  00376	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2695 :             utf32[3] = utf16[3];

  0037a	b8 01 00 00 00	 mov	 eax, 1
  0037f	48 6b c0 03	 imul	 rax, rax, 3
  00383	b9 01 00 00 00	 mov	 ecx, 1
  00388	48 6b c9 03	 imul	 rcx, rcx, 3
  0038c	0f b6 44 04 30	 movzx	 eax, BYTE PTR utf16$[rsp+rax]
  00391	88 44 0c 38	 mov	 BYTE PTR utf32$[rsp+rcx], al

; 2696 :             read = 4;

  00395	c7 44 24 54 04
	00 00 00	 mov	 DWORD PTR read$[rsp], 4
$LN15@s370_conve:

; 2697 :         }
; 2698 : 
; 2699 :         /* Write and commit registers */
; 2700 :         ARCH_DEP(vstorec)(utf32, 3, dest, r1, regs);

  0039d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003aa	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  003af	44 8b 44 24 4c	 mov	 r8d, DWORD PTR dest$[rsp]
  003b4	b2 03		 mov	 dl, 3
  003b6	48 8d 4c 24 38	 lea	 rcx, QWORD PTR utf32$[rsp]
  003bb	e8 00 00 00 00	 call	 s370_vstorec

; 2701 :         SET_GR_A(r1, regs, (dest += 4) & ADDRESS_MAXWRAP(regs));

  003c0	8b 44 24 4c	 mov	 eax, DWORD PTR dest$[rsp]
  003c4	83 c0 04	 add	 eax, 4
  003c7	89 44 24 4c	 mov	 DWORD PTR dest$[rsp], eax
  003cb	8b 44 24 4c	 mov	 eax, DWORD PTR dest$[rsp]
  003cf	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003d4	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR r1$[rsp]
  003d9	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  003e1	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2702 :         SET_GR_A(r1 + 1, regs, destlen -= 4);

  003e8	8b 44 24 50	 mov	 eax, DWORD PTR destlen$[rsp]
  003ec	83 e8 04	 sub	 eax, 4
  003ef	89 44 24 50	 mov	 DWORD PTR destlen$[rsp], eax
  003f3	8b 44 24 40	 mov	 eax, DWORD PTR r1$[rsp]
  003f7	ff c0		 inc	 eax
  003f9	48 98		 cdqe
  003fb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00403	8b 54 24 50	 mov	 edx, DWORD PTR destlen$[rsp]
  00407	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2703 :         SET_GR_A(r2, regs, (srce += read) & ADDRESS_MAXWRAP(regs));

  0040e	8b 44 24 54	 mov	 eax, DWORD PTR read$[rsp]
  00412	8b 4c 24 44	 mov	 ecx, DWORD PTR srce$[rsp]
  00416	03 c8		 add	 ecx, eax
  00418	8b c1		 mov	 eax, ecx
  0041a	89 44 24 44	 mov	 DWORD PTR srce$[rsp], eax
  0041e	8b 44 24 44	 mov	 eax, DWORD PTR srce$[rsp]
  00422	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00427	48 63 4c 24 3c	 movsxd	 rcx, DWORD PTR r2$[rsp]
  0042c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00434	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 2704 :         SET_GR_A(r2 + 1, regs, srcelen -= read);

  0043b	8b 44 24 54	 mov	 eax, DWORD PTR read$[rsp]
  0043f	8b 4c 24 48	 mov	 ecx, DWORD PTR srcelen$[rsp]
  00443	2b c8		 sub	 ecx, eax
  00445	8b c1		 mov	 eax, ecx
  00447	89 44 24 48	 mov	 DWORD PTR srcelen$[rsp], eax
  0044b	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  0044f	ff c0		 inc	 eax
  00451	48 98		 cdqe
  00453	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0045b	8b 54 24 48	 mov	 edx, DWORD PTR srcelen$[rsp]
  0045f	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 2705 : 
; 2706 :         xlated += read;

  00466	8b 44 24 54	 mov	 eax, DWORD PTR read$[rsp]
  0046a	8b 4c 24 5c	 mov	 ecx, DWORD PTR xlated$[rsp]
  0046e	03 c8		 add	 ecx, eax
  00470	8b c1		 mov	 eax, ecx
  00472	89 44 24 5c	 mov	 DWORD PTR xlated$[rsp], eax

; 2707 :     }

  00476	e9 14 fd ff ff	 jmp	 $LN5@s370_conve
$LN6@s370_conve:

; 2708 : 
; 2709 :     /* CPU determined number of characters reached */
; 2710 :     regs->psw.cc = 3;

  0047b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00483	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN1@s370_conve:
$LN21@s370_conve:

; 2711 : }

  00487	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0048e	c3		 ret	 0
s370_convert_utf16_to_utf32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\clock.h
_TEXT	SEGMENT
ETOD$ = 8
ETOD2TOD PROC

; 205  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 206  :     return ((ETOD.high << 8) | (ETOD.low >> (64-8)));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR ETOD$[rsp]
  0000a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000e	48 c1 e0 08	 shl	 rax, 8
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ETOD$[rsp]
  00017	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001a	48 c1 e9 38	 shr	 rcx, 56			; 00000038H
  0001e	48 0b c1	 or	 rax, rcx

; 207  : }

  00021	c3		 ret	 0
ETOD2TOD ENDP
_TEXT	ENDS
END
