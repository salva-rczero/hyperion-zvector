; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	g_tt32_hmoddll
PUBLIC	g_tt32_pfn_open_ex
PUBLIC	g_tt32_pfn_open
PUBLIC	g_tt32_pfn_close_ex
PUBLIC	g_tt32_pfn_close
PUBLIC	g_tt32_pfn_read_ex
PUBLIC	g_tt32_pfn_read
PUBLIC	g_tt32_pfn_write_ex
PUBLIC	g_tt32_pfn_write
PUBLIC	g_tt32_pfn_ioctl_ex
PUBLIC	g_tt32_pfn_ioctl
PUBLIC	g_tt32_pfn_get_stats_ex
PUBLIC	g_tt32_pfn_get_stats
PUBLIC	g_tt32_pfn_get_default_iface_ex
PUBLIC	g_tt32_pfn_get_default_iface
PUBLIC	g_tt32_pfn_set_debug_output_func_ex
PUBLIC	g_tt32_pfn_set_debug_output_func
PUBLIC	g_tt32_pfn_version_string_ex
PUBLIC	g_tt32_pfn_version_string
PUBLIC	g_tt32_pfn_version_numbers_ex
PUBLIC	g_tt32_pfn_version_numbers
PUBLIC	g_tt32_pfn_copyright_string_ex
PUBLIC	g_tt32_pfn_copyright_string
PUBLIC	g_tt32_pfn_build_herc_iface_mac_ex
PUBLIC	g_tt32_pfn_build_herc_iface_mac
PUBLIC	g_tt32_pfn_beg_write_multi_ex
PUBLIC	g_tt32_pfn_beg_write_multi
PUBLIC	g_tt32_pfn_end_write_multi_ex
PUBLIC	g_tt32_pfn_end_write_multi
PUBLIC	g_tt32_dllname
_DATA	SEGMENT
COMM	g_tt32_lock:BYTE:028H
_DATA	ENDS
_BSS	SEGMENT
g_tt32_hmoddll DQ 01H DUP (?)
g_tt32_pfn_open_ex DQ 01H DUP (?)
g_tt32_pfn_open DQ 01H DUP (?)
g_tt32_pfn_close_ex DQ 01H DUP (?)
g_tt32_pfn_close DQ 01H DUP (?)
g_tt32_pfn_read_ex DQ 01H DUP (?)
g_tt32_pfn_read DQ 01H DUP (?)
g_tt32_pfn_write_ex DQ 01H DUP (?)
g_tt32_pfn_write DQ 01H DUP (?)
g_tt32_pfn_ioctl_ex DQ 01H DUP (?)
g_tt32_pfn_ioctl DQ 01H DUP (?)
g_tt32_pfn_get_stats_ex DQ 01H DUP (?)
g_tt32_pfn_get_stats DQ 01H DUP (?)
g_tt32_pfn_get_default_iface_ex DQ 01H DUP (?)
g_tt32_pfn_get_default_iface DQ 01H DUP (?)
g_tt32_pfn_set_debug_output_func_ex DQ 01H DUP (?)
g_tt32_pfn_set_debug_output_func DQ 01H DUP (?)
g_tt32_pfn_version_string_ex DQ 01H DUP (?)
g_tt32_pfn_version_string DQ 01H DUP (?)
g_tt32_pfn_version_numbers_ex DQ 01H DUP (?)
g_tt32_pfn_version_numbers DQ 01H DUP (?)
g_tt32_pfn_copyright_string_ex DQ 01H DUP (?)
g_tt32_pfn_copyright_string DQ 01H DUP (?)
g_tt32_pfn_build_herc_iface_mac_ex DQ 01H DUP (?)
g_tt32_pfn_build_herc_iface_mac DQ 01H DUP (?)
g_tt32_pfn_beg_write_multi_ex DQ 01H DUP (?)
g_tt32_pfn_beg_write_multi DQ 01H DUP (?)
g_tt32_pfn_end_write_multi_ex DQ 01H DUP (?)
g_tt32_pfn_end_write_multi DQ 01H DUP (?)
g_tt32_dllname DB 0200H DUP (?)
_BSS	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	sprintf
PUBLIC	tt32_open
PUBLIC	tt32_read
PUBLIC	tt32_write
PUBLIC	tt32_beg_write_multi
PUBLIC	tt32_end_write_multi
PUBLIC	tt32_close
PUBLIC	tt32_ioctl
PUBLIC	tt32_get_default_iface
PUBLIC	tt32_build_herc_iface_mac
PUBLIC	tt32_version_numbers
PUBLIC	display_tt32_stats
PUBLIC	enable_tt32_debug_tracing
PUBLIC	GetTT32ProcAddrs
PUBLIC	tt32_output_debug_string
PUBLIC	tt32_loaddll
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp__errno:PROC
EXTRN	strchr:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_InitializeCriticalSection:PROC
EXTRN	__imp_EnterCriticalSection:PROC
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryExA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp__fullpath:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp_get_symbol:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hdl_getpath:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
?tt32_init_done@?1??tt32_loaddll@@9@9 DD 01H DUP (?)	; `tt32_loaddll'::`2'::tt32_init_done
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$tt32_open DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$tt32_open
$pdata$tt32_read DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$tt32_read
$pdata$tt32_write DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$tt32_write
$pdata$tt32_beg_write_multi DD imagerel $LN8
	DD	imagerel $LN8+122
	DD	imagerel $unwind$tt32_beg_write_multi
$pdata$tt32_end_write_multi DD imagerel $LN8
	DD	imagerel $LN8+110
	DD	imagerel $unwind$tt32_end_write_multi
$pdata$tt32_close DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$tt32_close
$pdata$tt32_ioctl DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$tt32_ioctl
$pdata$tt32_get_default_iface DD imagerel $LN8
	DD	imagerel $LN8+115
	DD	imagerel $unwind$tt32_get_default_iface
$pdata$tt32_build_herc_iface_mac DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$tt32_build_herc_iface_mac
$pdata$tt32_version_numbers DD imagerel $LN4
	DD	imagerel $LN4+108
	DD	imagerel $unwind$tt32_version_numbers
$pdata$display_tt32_stats DD imagerel $LN8
	DD	imagerel $LN8+3239
	DD	imagerel $unwind$display_tt32_stats
$pdata$enable_tt32_debug_tracing DD imagerel $LN10
	DD	imagerel $LN10+117
	DD	imagerel $unwind$enable_tt32_debug_tracing
$pdata$GetTT32ProcAddrs DD imagerel $LN14
	DD	imagerel $LN14+1060
	DD	imagerel $unwind$GetTT32ProcAddrs
$pdata$tt32_output_debug_string DD imagerel $LN10
	DD	imagerel $LN10+279
	DD	imagerel $unwind$tt32_output_debug_string
$pdata$tt32_loaddll DD imagerel $LN35
	DD	imagerel $LN35+1138
	DD	imagerel $unwind$tt32_loaddll
pdata	ENDS
_DATA	SEGMENT
$SG159142 DB	'tuntap32_open_ex', 00H
	ORG $+7
$SG159143 DB	'tuntap32_open', 00H
	ORG $+2
$SG159145 DB	'tuntap32_close_ex', 00H
	ORG $+2
$SG159181 DB	'E', 00H
	ORG $+2
$SG159146 DB	'tuntap32_close', 00H
	ORG $+1
$SG159148 DB	'tuntap32_read_ex', 00H
	ORG $+3
$SG159201 DB	'D', 00H
	ORG $+2
$SG159149 DB	'tuntap32_read', 00H
	ORG $+2
$SG159151 DB	'tuntap32_write_ex', 00H
	ORG $+2
$SG159256 DB	'/', 00H
	ORG $+2
$SG159152 DB	'tuntap32_write', 00H
	ORG $+1
$SG159154 DB	'tuntap32_ioctl_ex', 00H
	ORG $+2
$SG159270 DB	'E', 00H
	ORG $+2
$SG159155 DB	'tuntap32_ioctl', 00H
	ORG $+1
$SG159157 DB	'tuntap32_get_stats_ex', 00H
	ORG $+2
$SG159158 DB	'tuntap32_get_stats', 00H
	ORG $+1
$SG159275 DB	'I', 00H
	ORG $+2
$SG159160 DB	'tuntap32_get_default_iface_ex', 00H
	ORG $+2
$SG159161 DB	'tuntap32_get_default_iface', 00H
	ORG $+1
$SG159378 DB	'I', 00H
	ORG $+2
$SG159163 DB	'tuntap32_set_debug_output_func_ex', 00H
	ORG $+2
$SG159383 DB	'I', 00H
	ORG $+2
$SG159164 DB	'tuntap32_set_debug_output_func', 00H
	ORG $+1
$SG159166 DB	'tuntap32_version_string_ex', 00H
	ORG $+1
$SG159388 DB	'I', 00H
	ORG $+2
$SG159167 DB	'tuntap32_version_string', 00H
$SG159169 DB	'tuntap32_version_numbers_ex', 00H
$SG159393 DB	'I', 00H
	ORG $+2
$SG159170 DB	'tuntap32_version_numbers', 00H
	ORG $+3
$SG159398 DB	'I', 00H
	ORG $+2
$SG159172 DB	'tuntap32_copyright_string_ex', 00H
	ORG $+3
$SG159173 DB	'tuntap32_copyright_string', 00H
	ORG $+2
$SG159403 DB	'I', 00H
	ORG $+2
$SG159175 DB	'tuntap32_build_herc_iface_mac_ex', 00H
	ORG $+3
$SG159408 DB	'I', 00H
	ORG $+2
$SG159176 DB	'tuntap32_build_herc_iface_mac', 00H
	ORG $+2
$SG159177 DB	'tuntap32_beg_write_multi_ex', 00H
$SG159413 DB	'I', 00H
	ORG $+2
$SG159178 DB	'tuntap32_beg_write_multi', 00H
	ORG $+3
$SG159418 DB	'I', 00H
	ORG $+2
$SG159179 DB	'tuntap32_end_write_multi_ex', 00H
$SG159423 DB	'I', 00H
	ORG $+2
$SG159180 DB	'tuntap32_end_write_multi', 00H
	ORG $+3
$SG159428 DB	'I', 00H
	ORG $+2
$SG159182 DB	'HHC04102%s One of the GetProcAddress calls failed', 0aH, 00H
	ORG $+1
$SG159433 DB	'I', 00H
	ORG $+2
$SG159183 DB	'GetTT32ProcAddrs', 00H
	ORG $+3
$SG159438 DB	'I', 00H
	ORG $+2
$SG159184 DB	'w32ctca.c', 00H
	ORG $+2
$SG159443 DB	'I', 00H
	ORG $+2
$SG159202 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159448 DB	'I', 00H
	ORG $+2
$SG159203 DB	'tt32_output_debug_string', 00H
	ORG $+3
$SG159453 DB	'I', 00H
	ORG $+2
$SG159204 DB	'w32ctca.c', 00H
	ORG $+2
$SG159458 DB	'I', 00H
	ORG $+2
$SG159241 DB	'HERCULES_IFC', 00H
	ORG $+3
$SG159242 DB	'TunTap64D.dll', 00H
	ORG $+2
$SG159245 DB	'tt32_loaddll', 00H
	ORG $+3
$SG159246 DB	'w32ctca.c', 00H
	ORG $+6
$SG159249 DB	'tt32_loaddll', 00H
	ORG $+3
$SG159269 DB	'LoadLibraryEx(%s)', 00H
	ORG $+6
$SG159247 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159250 DB	'w32ctca.c', 00H
	ORG $+6
$SG159259 DB	'tt32_loaddll', 00H
	ORG $+3
$SG159276 DB	'HHC04100%s %s version %s initiated', 0aH, 00H
	ORG $+4
$SG159251 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159260 DB	'w32ctca.c', 00H
	ORG $+6
$SG159263 DB	'tt32_loaddll', 00H
	ORG $+3
$SG159367 DB	'00-00-5E-80-00-00', 00H
	ORG $+6
$SG159261 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159264 DB	'w32ctca.c', 00H
	ORG $+6
$SG159272 DB	'tt32_loaddll', 00H
	ORG $+3
$SG159380 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159265 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159271 DB	'HHC00161%s Function %s failed: [%02d] %s', 0aH, 00H
	ORG $+2
$SG159462 DB	'I', 00H
	ORG $+2
$SG159273 DB	'w32ctca.c', 00H
	ORG $+2
$SG159467 DB	'I', 00H
	ORG $+2
$SG159277 DB	'tt32_loaddll', 00H
	ORG $+3
$SG159278 DB	'w32ctca.c', 00H
	ORG $+2
$SG159472 DB	'I', 00H
	ORG $+2
$SG159379 DB	'HHC04101%s %s Statistics:', 0aH, 00H
	ORG $+1
$SG159477 DB	'I', 00H
	ORG $+2
$SG159381 DB	'w32ctca.c', 00H
	ORG $+2
$SG159482 DB	'I', 00H
	ORG $+2
$SG159382 DB	'Size of Kernel Hold Buffer:      ', 00H
	ORG $+2
$SG159487 DB	'I', 00H
	ORG $+2
$SG159384 DB	'HHC04103%s   %s%5luK', 0aH, 00H
	ORG $+2
$SG159385 DB	'display_tt32_stats', 00H
	ORG $+1
$SG159492 DB	'I', 00H
	ORG $+2
$SG159386 DB	'w32ctca.c', 00H
	ORG $+2
$SG159497 DB	'I', 00H
	ORG $+2
$SG159387 DB	'Size of DLL I/O Buffer:          ', 00H
	ORG $+2
$SG159502 DB	'I', 00H
	ORG $+2
$SG159389 DB	'HHC04103%s   %s%5luK', 0aH, 00H
	ORG $+2
$SG159390 DB	'display_tt32_stats', 00H
	ORG $+1
$SG159507 DB	'I', 00H
	ORG $+2
$SG159391 DB	'w32ctca.c', 00H
	ORG $+2
$SG159512 DB	'I', 00H
	ORG $+2
$SG159392 DB	'Maximum DLL I/O Bytes Received:  ', 00H
	ORG $+2
$SG159517 DB	'I', 00H
	ORG $+2
$SG159394 DB	'HHC04103%s   %s%5luK', 0aH, 00H
	ORG $+2
$SG159395 DB	'display_tt32_stats', 00H
	ORG $+1
$SG159522 DB	'I', 00H
	ORG $+2
$SG159396 DB	'w32ctca.c', 00H
	ORG $+2
$SG159527 DB	'I', 00H
	ORG $+2
$SG159397 DB	'Total Write Calls', 00H
	ORG $+6
$SG159399 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159400 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159401 DB	'w32ctca.c', 00H
	ORG $+6
$SG159402 DB	'Total Write I/Os', 00H
	ORG $+7
$SG159404 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159405 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159406 DB	'w32ctca.c', 00H
	ORG $+6
$SG159407 DB	'Packets To All Zeroes MAC Written', 00H
	ORG $+6
$SG159409 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159410 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159411 DB	'w32ctca.c', 00H
	ORG $+6
$SG159412 DB	'Total Packets Written', 00H
	ORG $+2
$SG159414 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159415 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159416 DB	'w32ctca.c', 00H
	ORG $+6
$SG159417 DB	'Total Bytes Written', 00H
	ORG $+4
$SG159419 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159420 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159421 DB	'w32ctca.c', 00H
	ORG $+6
$SG159422 DB	'Total Read Calls', 00H
	ORG $+7
$SG159424 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159425 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159426 DB	'w32ctca.c', 00H
	ORG $+6
$SG159427 DB	'Total Read I/Os', 00H
$SG159429 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159430 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159431 DB	'w32ctca.c', 00H
	ORG $+6
$SG159432 DB	'Internally Handled ARP Packets', 00H
	ORG $+1
$SG159434 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159435 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159436 DB	'w32ctca.c', 00H
	ORG $+6
$SG159437 DB	'Packets From Ourself', 00H
	ORG $+3
$SG159439 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159440 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159441 DB	'w32ctca.c', 00H
	ORG $+6
$SG159442 DB	'Total Ignored Packets', 00H
	ORG $+2
$SG159444 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159445 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159446 DB	'w32ctca.c', 00H
	ORG $+6
$SG159447 DB	'Packets To All Zeroes MAC Read', 00H
	ORG $+1
$SG159449 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159450 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159451 DB	'w32ctca.c', 00H
	ORG $+6
$SG159452 DB	'Total Packets Read', 00H
	ORG $+5
$SG159454 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159455 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159456 DB	'w32ctca.c', 00H
	ORG $+6
$SG159457 DB	'Total Bytes Read', 00H
	ORG $+7
$SG159459 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159460 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159461 DB	'w32ctca.c', 00H
	ORG $+6
$SG159463 DB	'HHC04101%s %s Statistics:', 0aH, 00H
	ORG $+5
$SG159464 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159465 DB	'w32ctca.c', 00H
	ORG $+6
$SG159466 DB	'Size of Kernel Hold Buffer:      ', 00H
	ORG $+6
$SG159468 DB	'HHC04103%s   %s%5luK', 0aH, 00H
	ORG $+2
$SG159469 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159470 DB	'w32ctca.c', 00H
	ORG $+6
$SG159471 DB	'Size of DLL I/O Buffer:          ', 00H
	ORG $+6
$SG159473 DB	'HHC04103%s   %s%5luK', 0aH, 00H
	ORG $+2
$SG159474 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159475 DB	'w32ctca.c', 00H
	ORG $+6
$SG159476 DB	'Maximum DLL I/O Bytes Received:  ', 00H
	ORG $+6
$SG159478 DB	'HHC04103%s   %s%5luK', 0aH, 00H
	ORG $+2
$SG159479 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159480 DB	'w32ctca.c', 00H
	ORG $+6
$SG159481 DB	'Total Write Calls', 00H
	ORG $+6
$SG159483 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159484 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159485 DB	'w32ctca.c', 00H
	ORG $+6
$SG159486 DB	'Total Write I/Os', 00H
	ORG $+7
$SG159488 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159489 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159490 DB	'w32ctca.c', 00H
	ORG $+6
$SG159491 DB	'Total Packets Written', 00H
	ORG $+2
$SG159493 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159494 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159495 DB	'w32ctca.c', 00H
	ORG $+6
$SG159496 DB	'Total Bytes Written', 00H
	ORG $+4
$SG159498 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159499 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159500 DB	'w32ctca.c', 00H
	ORG $+6
$SG159501 DB	'Total Read Calls', 00H
	ORG $+7
$SG159503 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159504 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159505 DB	'w32ctca.c', 00H
	ORG $+6
$SG159506 DB	'Total Read I/Os', 00H
$SG159508 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159509 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159510 DB	'w32ctca.c', 00H
	ORG $+6
$SG159511 DB	'Internally Handled ARP Packets', 00H
	ORG $+1
$SG159513 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159514 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159515 DB	'w32ctca.c', 00H
	ORG $+6
$SG159516 DB	'Total Ignored Packets', 00H
	ORG $+2
$SG159518 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159519 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159520 DB	'w32ctca.c', 00H
	ORG $+6
$SG159521 DB	'Total Packets Read', 00H
	ORG $+5
$SG159523 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159524 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159525 DB	'w32ctca.c', 00H
	ORG $+6
$SG159526 DB	'Total Bytes Read', 00H
	ORG $+7
$SG159528 DB	'HHC04104%s   %12lld  %s', 0aH, 00H
	ORG $+7
$SG159529 DB	'display_tt32_stats', 00H
	ORG $+5
$SG159530 DB	'w32ctca.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tt32_loaddll
	DD	013H
	DD	0459H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:display_tt32_stats
	DD	016H
	DD	0c8eH
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$tt32_open DD 010d01H
	DD	0620dH
$unwind$tt32_read DD 011201H
	DD	06212H
$unwind$tt32_write DD 011201H
	DD	06212H
$unwind$tt32_beg_write_multi DD 010c01H
	DD	0620cH
$unwind$tt32_end_write_multi DD 010801H
	DD	06208H
$unwind$tt32_close DD 010801H
	DD	06208H
$unwind$tt32_ioctl DD 011101H
	DD	06211H
$unwind$tt32_get_default_iface DD 010401H
	DD	08204H
$unwind$tt32_build_herc_iface_mac DD 010e01H
	DD	0420eH
$unwind$tt32_version_numbers DD 011801H
	DD	04218H
$unwind$display_tt32_stats DD 031e19H
	DD	022010cH
	DD	07005H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$enable_tt32_debug_tracing DD 010801H
	DD	06208H
$unwind$GetTT32ProcAddrs DD 010401H
	DD	08204H
$unwind$tt32_output_debug_string DD 010901H
	DD	0c209H
$unwind$tt32_loaddll DD 031b19H
	DD	09a0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	04c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
pszDLLName$ = 80
dwLastError$1 = 88
$T2 = 96
tv198 = 104
tv217 = 112
tt32_dllname_in_buff$ = 128
tt32_dllname_out_buff$ = 400
str$3 = 672
__$ArrayPad$ = 1216
tt32_loaddll PROC

; 156  : {

$LN35:
  00000	40 57		 push	 rdi
  00002	48 81 ec d0 04
	00 00		 sub	 rsp, 1232		; 000004d0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 157  :     const char*  pszDLLName;
; 158  :     char         tt32_dllname_in_buff  [ MAX_PATH ];
; 159  :     char         tt32_dllname_out_buff [ MAX_PATH ] = {0};

  0001b	48 8d 84 24 90
	01 00 00	 lea	 rax, QWORD PTR tt32_dllname_out_buff$[rsp]
  00023	48 8b f8	 mov	 rdi, rax
  00026	33 c0		 xor	 eax, eax
  00028	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  0002d	f3 aa		 rep stosb

; 160  :     static int   tt32_init_done = 0;
; 161  : 
; 162  :     if (!tt32_init_done)

  0002f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?tt32_init_done@?1??tt32_loaddll@@9@9, 0
  00036	75 17		 jne	 SHORT $LN14@tt32_loadd

; 163  :     {
; 164  :         InitializeCriticalSection( &g_tt32_lock );

  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_lock
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSection

; 165  :         tt32_init_done = 1;

  00045	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?tt32_init_done@?1??tt32_loaddll@@9@9, 1
$LN14@tt32_loadd:

; 166  :     }
; 167  : 
; 168  :     EnterCriticalSection(&g_tt32_lock);

  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_lock
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 169  : 
; 170  :     if (g_tt32_hmoddll)

  0005c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_hmoddll, 0
  00064	74 17		 je	 SHORT $LN15@tt32_loadd

; 171  :     {
; 172  :         LeaveCriticalSection(&g_tt32_lock);

  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_lock
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 173  :         return TRUE;

  00073	b8 01 00 00 00	 mov	 eax, 1
  00078	e9 dc 03 00 00	 jmp	 $LN1@tt32_loadd
$LN15@tt32_loadd:

; 174  :     }
; 175  : 
; 176  :     // First, determine the name of the DLL we should try loading...
; 177  : 
; 178  :     if (!(pszDLLName = get_symbol( "HERCULES_IFC" )) || !*pszDLLName)

  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159241
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_symbol
  0008a	48 89 44 24 50	 mov	 QWORD PTR pszDLLName$[rsp], rax
  0008f	48 83 7c 24 50
	00		 cmp	 QWORD PTR pszDLLName$[rsp], 0
  00095	74 0c		 je	 SHORT $LN17@tt32_loadd
  00097	48 8b 44 24 50	 mov	 rax, QWORD PTR pszDLLName$[rsp]
  0009c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009f	85 c0		 test	 eax, eax
  000a1	75 0c		 jne	 SHORT $LN16@tt32_loadd
$LN17@tt32_loadd:

; 179  :         pszDLLName = DEF_TT32_DLLNAME;

  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159242
  000aa	48 89 44 24 50	 mov	 QWORD PTR pszDLLName$[rsp], rax
$LN16@tt32_loadd:
$LN4@tt32_loadd:

; 180  : 
; 181  :     ASSERT( pszDLLName && *pszDLLName );

  000af	48 83 7c 24 50
	00		 cmp	 QWORD PTR pszDLLName$[rsp], 0
  000b5	74 0c		 je	 SHORT $LN19@tt32_loadd
  000b7	48 8b 44 24 50	 mov	 rax, QWORD PTR pszDLLName$[rsp]
  000bc	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000bf	85 c0		 test	 eax, eax
  000c1	75 5c		 jne	 SHORT $LN18@tt32_loadd
$LN19@tt32_loadd:
$LN7@tt32_loadd:
  000c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159245
  000ca	41 b8 b5 00 00
	00		 mov	 r8d, 181		; 000000b5H
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159246
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159247
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000ea	85 c0		 test	 eax, eax
  000ec	74 20		 je	 SHORT $LN20@tt32_loadd
  000ee	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159249
  000f5	41 b8 b5 00 00
	00		 mov	 r8d, 181		; 000000b5H
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159250
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159251
  00109	e8 00 00 00 00	 call	 DebuggerTrace
$LN20@tt32_loadd:
  0010e	33 c0		 xor	 eax, eax
  00110	85 c0		 test	 eax, eax
  00112	75 af		 jne	 SHORT $LN7@tt32_loadd
  00114	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0011a	85 c0		 test	 eax, eax
  0011c	74 01		 je	 SHORT $LN21@tt32_loadd
  0011e	cc		 int	 3
$LN21@tt32_loadd:
$LN18@tt32_loadd:
  0011f	33 c0		 xor	 eax, eax
  00121	85 c0		 test	 eax, eax
  00123	75 8a		 jne	 SHORT $LN4@tt32_loadd

; 182  : 
; 183  :     // Then check to see if the "name" contains path information or not...
; 184  : 
; 185  :     if ( strchr( pszDLLName, '/' ) || strchr( pszDLLName, '\\' ) )

  00125	ba 2f 00 00 00	 mov	 edx, 47			; 0000002fH
  0012a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pszDLLName$[rsp]
  0012f	e8 00 00 00 00	 call	 strchr
  00134	48 85 c0	 test	 rax, rax
  00137	75 14		 jne	 SHORT $LN24@tt32_loadd
  00139	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  0013e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pszDLLName$[rsp]
  00143	e8 00 00 00 00	 call	 strchr
  00148	48 85 c0	 test	 rax, rax
  0014b	74 1b		 je	 SHORT $LN22@tt32_loadd
$LN24@tt32_loadd:

; 186  :     {
; 187  :         // It's already a path...
; 188  :         STRLCPY( tt32_dllname_in_buff, pszDLLName );

  0014d	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00153	48 8b 54 24 50	 mov	 rdx, QWORD PTR pszDLLName$[rsp]
  00158	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR tt32_dllname_in_buff$[rsp]
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 189  :     }

  00166	eb 51		 jmp	 SHORT $LN23@tt32_loadd
$LN22@tt32_loadd:

; 190  :     else
; 191  :     {
; 192  :         // It's not a path, so make it one, using loadable module path
; 193  : 
; 194  :         STRLCPY( tt32_dllname_in_buff, hdl_getpath());

  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_getpath
  0016e	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00174	48 8b d0	 mov	 rdx, rax
  00177	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR tt32_dllname_in_buff$[rsp]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 195  :         STRLCAT( tt32_dllname_in_buff, PATHSEPS );

  00185	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159256
  00192	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR tt32_dllname_in_buff$[rsp]
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 196  :         STRLCAT( tt32_dllname_in_buff, pszDLLName );

  001a0	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  001a6	48 8b 54 24 50	 mov	 rdx, QWORD PTR pszDLLName$[rsp]
  001ab	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR tt32_dllname_in_buff$[rsp]
  001b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN23@tt32_loadd:

; 197  :     }
; 198  : 
; 199  :     // Now convert it to a full path...
; 200  : 
; 201  :     // PROGRAMMING NOTE: It's important here to ensure that our end result is a path
; 202  :     // with BACKWARD slashes in it and NOT forward slashes! LoadLibrary is one of the
; 203  :     // few Win32 functions that cannot handle paths with forward slashes in it. For
; 204  :     // 'open', etc, yeah, forward slashes are fine, but for LoadLibrary they're not!
; 205  : 
; 206  : #ifdef _MSVC_
; 207  :     if ( !_fullpath( tt32_dllname_out_buff, tt32_dllname_in_buff, sizeof(tt32_dllname_out_buff) ) )

  001b9	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  001bf	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR tt32_dllname_in_buff$[rsp]
  001c7	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR tt32_dllname_out_buff$[rsp]
  001cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fullpath
  001d5	48 85 c0	 test	 rax, rax
  001d8	75 1c		 jne	 SHORT $LN25@tt32_loadd

; 208  :         STRLCPY(     tt32_dllname_out_buff, tt32_dllname_in_buff );

  001da	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  001e0	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR tt32_dllname_in_buff$[rsp]
  001e8	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR tt32_dllname_out_buff$[rsp]
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN25@tt32_loadd:

; 209  : #else // (presumed cygwin)
; 210  :     cygwin_conv_to_full_win32_path( tt32_dllname_in_buff, tt32_dllname_out_buff );
; 211  : #endif // _MSVC_
; 212  : 
; 213  :     tt32_dllname_out_buff[ sizeof(tt32_dllname_out_buff) - 1 ] = 0;

  001f6	b8 01 00 00 00	 mov	 eax, 1
  001fb	48 69 c0 03 01
	00 00		 imul	 rax, rax, 259		; 00000103H
  00202	48 89 44 24 60	 mov	 QWORD PTR $T2[rsp], rax
  00207	48 81 7c 24 60
	04 01 00 00	 cmp	 QWORD PTR $T2[rsp], 260	; 00000104H
  00210	73 02		 jae	 SHORT $LN33@tt32_loadd
  00212	eb 05		 jmp	 SHORT $LN34@tt32_loadd
$LN33@tt32_loadd:
  00214	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN34@tt32_loadd:
  00219	48 8b 44 24 60	 mov	 rax, QWORD PTR $T2[rsp]
  0021e	c6 84 04 90 01
	00 00 00	 mov	 BYTE PTR tt32_dllname_out_buff$[rsp+rax], 0

; 214  : 
; 215  :     // Finally, copy it to our global home for it...
; 216  : 
; 217  :     STRLCPY( g_tt32_dllname, tt32_dllname_out_buff );

  00226	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0022c	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR tt32_dllname_out_buff$[rsp]
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN10@tt32_loadd:

; 218  : 
; 219  :     ASSERT(g_tt32_dllname[0]);

  00241	b8 01 00 00 00	 mov	 eax, 1
  00246	48 6b c0 00	 imul	 rax, rax, 0
  0024a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  00251	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00255	85 c0		 test	 eax, eax
  00257	75 5c		 jne	 SHORT $LN26@tt32_loadd
$LN13@tt32_loadd:
  00259	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159259
  00260	41 b8 db 00 00
	00		 mov	 r8d, 219		; 000000dbH
  00266	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159260
  0026d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159261
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00280	85 c0		 test	 eax, eax
  00282	74 20		 je	 SHORT $LN27@tt32_loadd
  00284	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159263
  0028b	41 b8 db 00 00
	00		 mov	 r8d, 219		; 000000dbH
  00291	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159264
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159265
  0029f	e8 00 00 00 00	 call	 DebuggerTrace
$LN27@tt32_loadd:
  002a4	33 c0		 xor	 eax, eax
  002a6	85 c0		 test	 eax, eax
  002a8	75 af		 jne	 SHORT $LN13@tt32_loadd
  002aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002b0	85 c0		 test	 eax, eax
  002b2	74 01		 je	 SHORT $LN28@tt32_loadd
  002b4	cc		 int	 3
$LN28@tt32_loadd:
$LN26@tt32_loadd:
  002b5	33 c0		 xor	 eax, eax
  002b7	85 c0		 test	 eax, eax
  002b9	75 86		 jne	 SHORT $LN10@tt32_loadd

; 220  : 
; 221  :     g_tt32_hmoddll = LoadLibraryEx( g_tt32_dllname, NULL, LOAD_WITH_ALTERED_SEARCH_PATH );

  002bb	41 b8 08 00 00
	00		 mov	 r8d, 8
  002c1	33 d2		 xor	 edx, edx
  002c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  002ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryExA
  002d0	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_hmoddll, rax

; 222  : 
; 223  :     if (!g_tt32_hmoddll)

  002d7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_hmoddll, 0
  002df	0f 85 f0 00 00
	00		 jne	 $LN29@tt32_loadd

; 224  :     {
; 225  :         // Try again WITHOUT the path this time...
; 226  : 
; 227  :         STRLCPY( g_tt32_dllname, pszDLLName );

  002e5	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  002eb	48 8b 54 24 50	 mov	 rdx, QWORD PTR pszDLLName$[rsp]
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  002f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 228  : 
; 229  :         g_tt32_hmoddll = LoadLibraryEx( g_tt32_dllname, NULL, LOAD_WITH_ALTERED_SEARCH_PATH );

  002fd	41 b8 08 00 00
	00		 mov	 r8d, 8
  00303	33 d2		 xor	 edx, edx
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  0030c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadLibraryExA
  00312	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_hmoddll, rax

; 230  : 
; 231  :         if (!g_tt32_hmoddll)

  00319	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_hmoddll, 0
  00321	0f 85 ae 00 00
	00		 jne	 $LN30@tt32_loadd

; 232  :         {
; 233  :             char str[MAX_TT32_DLLNAMELEN + 32];
; 234  :             DWORD dwLastError = GetLastError();

  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0032d	89 44 24 58	 mov	 DWORD PTR dwLastError$1[rsp], eax

; 235  :             LeaveCriticalSection(&g_tt32_lock);

  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_lock
  00338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 236  :             sprintf(str, "LoadLibraryEx(%s)", g_tt32_dllname);

  0033e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:g_tt32_dllname
  00345	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159269
  0034c	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR str$3[rsp]
  00354	e8 00 00 00 00	 call	 sprintf

; 237  :             WRMSG ( HHC00161, "E", str, (int)dwLastError, strerror(dwLastError) );

  00359	8b 4c 24 58	 mov	 ecx, DWORD PTR dwLastError$1[rsp]
  0035d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00363	48 89 44 24 68	 mov	 QWORD PTR tv198[rsp], rax
  00368	b9 01 00 00 00	 mov	 ecx, 1
  0036d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00373	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv198[rsp]
  00378	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0037d	8b 4c 24 58	 mov	 ecx, DWORD PTR dwLastError$1[rsp]
  00381	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00385	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR str$3[rsp]
  0038d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00392	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159270
  00399	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0039e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159271
  003a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003af	41 b9 03 00 00
	00		 mov	 r9d, 3
  003b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159272
  003bc	ba ed 00 00 00	 mov	 edx, 237		; 000000edH
  003c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159273
  003c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 238  :             return FALSE;

  003ce	33 c0		 xor	 eax, eax
  003d0	e9 84 00 00 00	 jmp	 $LN1@tt32_loadd
$LN30@tt32_loadd:
$LN29@tt32_loadd:

; 239  :         }
; 240  :     }
; 241  : 
; 242  :     // Resolve our required DLL entry-point variables...
; 243  : 
; 244  :     if (!GetTT32ProcAddrs())

  003d5	e8 00 00 00 00	 call	 GetTT32ProcAddrs
  003da	85 c0		 test	 eax, eax
  003dc	75 04		 jne	 SHORT $LN31@tt32_loadd

; 245  :         return FALSE;

  003de	33 c0		 xor	 eax, eax
  003e0	eb 77		 jmp	 SHORT $LN1@tt32_loadd
$LN31@tt32_loadd:

; 246  : 
; 247  :     WRMSG ( HHC04100, "I", g_tt32_dllname, g_tt32_pfn_version_string() );

  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_version_string
  003e8	48 89 44 24 70	 mov	 QWORD PTR tv217[rsp], rax
  003ed	b9 01 00 00 00	 mov	 ecx, 1
  003f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003f8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv217[rsp]
  003fd	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00402	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  00409	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0040e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159275
  00415	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0041a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159276
  00421	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00426	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0042b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00431	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159277
  00438	ba f7 00 00 00	 mov	 edx, 247		; 000000f7H
  0043d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159278
  00444	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 248  : 
; 249  : #if defined(DEBUG) || defined(_DEBUG)
; 250  :     enable_tt32_debug_tracing(1);   // (enable debug tracing by default for DEBUG builds)

  0044a	b9 01 00 00 00	 mov	 ecx, 1
  0044f	e8 00 00 00 00	 call	 enable_tt32_debug_tracing

; 251  : #endif
; 252  : 
; 253  :     return TRUE;

  00454	b8 01 00 00 00	 mov	 eax, 1
$LN1@tt32_loadd:
$LN32@tt32_loadd:

; 254  : }

  00459	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00461	48 33 cc	 xor	 rcx, rsp
  00464	e8 00 00 00 00	 call	 __security_check_cookie
  00469	48 81 c4 d0 04
	00 00		 add	 rsp, 1232		; 000004d0H
  00470	5f		 pop	 rdi
  00471	c3		 ret	 0
tt32_loaddll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
nl2$ = 64
p2$ = 72
nl$ = 80
p$ = 88
debug_string$ = 112
tt32_output_debug_string PROC

; 113  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 114  :     char *p,  *p2;
; 115  :     char *nl, *nl2;
; 116  : 
; 117  :     // Write each line separately so it looks nice
; 118  :     for (p2 = p = strdup( debug_string );

  00009	48 8b 4c 24 70	 mov	 rcx, QWORD PTR debug_string$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00014	48 89 44 24 58	 mov	 QWORD PTR p$[rsp], rax
  00019	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  0001e	48 89 44 24 48	 mov	 QWORD PTR p2$[rsp], rax
  00023	eb 0d		 jmp	 SHORT $LN4@tt32_outpu
$LN2@tt32_outpu:

; 119  :         *p2 && (nl2 = nl = strchr( p2, '\n' )); p2 = nl+1)

  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR nl$[rsp]
  0002a	48 ff c0	 inc	 rax
  0002d	48 89 44 24 48	 mov	 QWORD PTR p2$[rsp], rax
$LN4@tt32_outpu:
  00032	48 8b 44 24 48	 mov	 rax, QWORD PTR p2$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 c5 00 00
	00		 je	 $LN3@tt32_outpu
  00042	ba 0a 00 00 00	 mov	 edx, 10
  00047	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p2$[rsp]
  0004c	e8 00 00 00 00	 call	 strchr
  00051	48 89 44 24 50	 mov	 QWORD PTR nl$[rsp], rax
  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR nl$[rsp]
  0005b	48 89 44 24 40	 mov	 QWORD PTR nl2$[rsp], rax
  00060	48 83 7c 24 40
	00		 cmp	 QWORD PTR nl2$[rsp], 0
  00066	0f 84 9b 00 00
	00		 je	 $LN3@tt32_outpu

; 120  :     {
; 121  :         // Remove trailing whitespace to conform to Hercules logmsg format.
; 122  :         for (; nl2 >= p2 && isspace(*nl2); --nl2)

  0006c	eb 0d		 jmp	 SHORT $LN7@tt32_outpu
$LN5@tt32_outpu:
  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR nl2$[rsp]
  00073	48 ff c8	 dec	 rax
  00076	48 89 44 24 40	 mov	 QWORD PTR nl2$[rsp], rax
$LN7@tt32_outpu:
  0007b	48 8b 44 24 48	 mov	 rax, QWORD PTR p2$[rsp]
  00080	48 39 44 24 40	 cmp	 QWORD PTR nl2$[rsp], rax
  00085	72 1e		 jb	 SHORT $LN6@tt32_outpu
  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR nl2$[rsp]
  0008c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0008f	8b c8		 mov	 ecx, eax
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  00097	85 c0		 test	 eax, eax
  00099	74 0a		 je	 SHORT $LN6@tt32_outpu

; 123  :             *nl2 = 0;

  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR nl2$[rsp]
  000a0	c6 00 00	 mov	 BYTE PTR [rax], 0
  000a3	eb c9		 jmp	 SHORT $LN5@tt32_outpu
$LN6@tt32_outpu:

; 124  :         if (*p2)

  000a5	48 8b 44 24 48	 mov	 rax, QWORD PTR p2$[rsp]
  000aa	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ad	85 c0		 test	 eax, eax
  000af	74 51		 je	 SHORT $LN8@tt32_outpu

; 125  :             // "DBG: %s"
; 126  :             WRMSG ( HHC90000, "D", p2 );

  000b1	b9 01 00 00 00	 mov	 ecx, 1
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p2$[rsp]
  000c1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159201
  000cd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159202
  000d9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159203
  000f0	ba 7e 00 00 00	 mov	 edx, 126		; 0000007eH
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159204
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@tt32_outpu:

; 127  :     }

  00102	e9 1e ff ff ff	 jmp	 $LN2@tt32_outpu
$LN3@tt32_outpu:

; 128  : 
; 129  :     free(p);

  00107	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 130  : }

  00112	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00116	c3		 ret	 0
tt32_output_debug_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
GetTT32ProcAddrs PROC

; 76   : {

$LN14:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 77   :     // (required entry-points...)
; 78   : 
; 79   :     GET_REQUIRED_TT32_PROCADDR ( open                  );

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159142
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00018	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_open_ex, rax
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159143
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00033	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_open, rax
  0003a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_open, 0
  00042	75 05		 jne	 SHORT $LN2@GetTT32Pro
  00044	e9 68 03 00 00	 jmp	 $error$15
$LN2@GetTT32Pro:

; 80   :     GET_REQUIRED_TT32_PROCADDR ( close                 );

  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159145
  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0005d	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_close_ex, rax
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159146
  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00078	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_close, rax
  0007f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_close, 0
  00087	75 05		 jne	 SHORT $LN3@GetTT32Pro
  00089	e9 23 03 00 00	 jmp	 $error$15
$LN3@GetTT32Pro:

; 81   :     GET_REQUIRED_TT32_PROCADDR ( read                  );

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159148
  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  000a2	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_read_ex, rax
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159149
  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  000bd	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_read, rax
  000c4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_read, 0
  000cc	75 05		 jne	 SHORT $LN4@GetTT32Pro
  000ce	e9 de 02 00 00	 jmp	 $error$15
$LN4@GetTT32Pro:

; 82   :     GET_REQUIRED_TT32_PROCADDR ( write                 );

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159151
  000da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  000e7	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_write_ex, rax
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159152
  000f5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00102	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_write, rax
  00109	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_write, 0
  00111	75 05		 jne	 SHORT $LN5@GetTT32Pro
  00113	e9 99 02 00 00	 jmp	 $error$15
$LN5@GetTT32Pro:

; 83   :     GET_REQUIRED_TT32_PROCADDR ( ioctl                 );

  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159154
  0011f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0012c	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_ioctl_ex, rax
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159155
  0013a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00147	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_ioctl, rax
  0014e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_ioctl, 0
  00156	75 05		 jne	 SHORT $LN6@GetTT32Pro
  00158	e9 54 02 00 00	 jmp	 $error$15
$LN6@GetTT32Pro:

; 84   :     GET_REQUIRED_TT32_PROCADDR ( get_stats             );

  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159157
  00164	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00171	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_get_stats_ex, rax
  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159158
  0017f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0018c	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_get_stats, rax
  00193	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_get_stats, 0
  0019b	75 05		 jne	 SHORT $LN7@GetTT32Pro
  0019d	e9 0f 02 00 00	 jmp	 $error$15
$LN7@GetTT32Pro:

; 85   :     GET_REQUIRED_TT32_PROCADDR ( get_default_iface     );

  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159160
  001a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  001b6	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_get_default_iface_ex, rax
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159161
  001c4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  001d1	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_get_default_iface, rax
  001d8	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_get_default_iface, 0
  001e0	75 05		 jne	 SHORT $LN8@GetTT32Pro
  001e2	e9 ca 01 00 00	 jmp	 $error$15
$LN8@GetTT32Pro:

; 86   :     GET_REQUIRED_TT32_PROCADDR ( set_debug_output_func );

  001e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159163
  001ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  001fb	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_set_debug_output_func_ex, rax
  00202	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159164
  00209	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00216	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_set_debug_output_func, rax
  0021d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_set_debug_output_func, 0
  00225	75 05		 jne	 SHORT $LN9@GetTT32Pro
  00227	e9 85 01 00 00	 jmp	 $error$15
$LN9@GetTT32Pro:

; 87   :     GET_REQUIRED_TT32_PROCADDR ( version_string        );

  0022c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159166
  00233	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00240	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_version_string_ex, rax
  00247	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159167
  0024e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00255	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0025b	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_version_string, rax
  00262	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_version_string, 0
  0026a	75 05		 jne	 SHORT $LN10@GetTT32Pro
  0026c	e9 40 01 00 00	 jmp	 $error$15
$LN10@GetTT32Pro:

; 88   :     GET_REQUIRED_TT32_PROCADDR ( version_numbers       );

  00271	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159169
  00278	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0027f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00285	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_version_numbers_ex, rax
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159170
  00293	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  002a0	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_version_numbers, rax
  002a7	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_version_numbers, 0
  002af	75 05		 jne	 SHORT $LN11@GetTT32Pro
  002b1	e9 fb 00 00 00	 jmp	 $error$15
$LN11@GetTT32Pro:

; 89   :     GET_REQUIRED_TT32_PROCADDR ( copyright_string      );

  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159172
  002bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  002c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  002ca	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_copyright_string_ex, rax
  002d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159173
  002d8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  002e5	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_copyright_string, rax
  002ec	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_copyright_string, 0
  002f4	75 05		 jne	 SHORT $LN12@GetTT32Pro
  002f6	e9 b6 00 00 00	 jmp	 $error$15
$LN12@GetTT32Pro:

; 90   : 
; 91   :     // (optional entry-points...)
; 92   : 
; 93   :     GET_OPTIONAL_TT32_PROCADDR ( build_herc_iface_mac );

  002fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159175
  00302	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00309	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0030f	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_build_herc_iface_mac_ex, rax
  00316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159176
  0031d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00324	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0032a	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_build_herc_iface_mac, rax

; 94   :     GET_OPTIONAL_TT32_PROCADDR ( beg_write_multi      );

  00331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159177
  00338	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0033f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00345	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_beg_write_multi_ex, rax
  0034c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159178
  00353	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  0035a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00360	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_beg_write_multi, rax

; 95   :     GET_OPTIONAL_TT32_PROCADDR ( end_write_multi      );

  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159179
  0036e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00375	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  0037b	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_end_write_multi_ex, rax
  00382	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159180
  00389	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetProcAddress
  00396	48 89 05 00 00
	00 00		 mov	 QWORD PTR g_tt32_pfn_end_write_multi, rax

; 96   : 
; 97   :     LeaveCriticalSection(&g_tt32_lock);

  0039d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_lock
  003a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 98   :     return TRUE;

  003aa	b8 01 00 00 00	 mov	 eax, 1
  003af	eb 6e		 jmp	 SHORT $LN1@GetTT32Pro
$error$15:

; 99   : 
; 100  : error:
; 101  : 
; 102  :     FreeLibrary( g_tt32_hmoddll );

  003b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR g_tt32_hmoddll
  003b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FreeLibrary

; 103  :     g_tt32_hmoddll = NULL;

  003be	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR g_tt32_hmoddll, 0

; 104  :     WRMSG ( HHC04102, "E" );

  003c9	b9 01 00 00 00	 mov	 ecx, 1
  003ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159181
  003db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159182
  003e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159183
  003fe	ba 68 00 00 00	 mov	 edx, 104		; 00000068H
  00403	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159184
  0040a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 105  :     LeaveCriticalSection(&g_tt32_lock);

  00410	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_lock
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 106  :     return FALSE;

  0041d	33 c0		 xor	 eax, eax
$LN1@GetTT32Pro:

; 107  : }

  0041f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00423	c3		 ret	 0
GetTT32ProcAddrs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
tv72 = 32
tv70 = 40
enable$ = 64
enable_tt32_debug_tracing PROC

; 135  : {

$LN10:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 136  :     // Pass to TunTap32 DLL a pointer to the function it can use to
; 137  :     // display debug messages with. This function of ours (that we
; 138  :     // are passing it a pointer to) will then display its debugging
; 139  :     // message (string) on the Hercules console so we can see it.
; 140  : 
; 141  :     // Returns true/false = whether debug tracing is enabled or not.
; 142  : 
; 143  :     if (!g_tt32_pfn_set_debug_output_func)

  00008	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_set_debug_output_func, 0
  00010	75 17		 jne	 SHORT $LN2@enable_tt3

; 144  :         if (!tt32_loaddll() || !g_tt32_pfn_set_debug_output_func)

  00012	e8 00 00 00 00	 call	 tt32_loaddll
  00017	85 c0		 test	 eax, eax
  00019	74 0a		 je	 SHORT $LN4@enable_tt3
  0001b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_set_debug_output_func, 0
  00023	75 04		 jne	 SHORT $LN3@enable_tt3
$LN4@enable_tt3:

; 145  :             return false; // (debug tracing NOT enabled)

  00025	32 c0		 xor	 al, al
  00027	eb 47		 jmp	 SHORT $LN1@enable_tt3
$LN3@enable_tt3:
$LN2@enable_tt3:

; 146  : 
; 147  :     g_tt32_pfn_set_debug_output_func( enable ? &tt32_output_debug_string : NULL );

  00029	83 7c 24 40 00	 cmp	 DWORD PTR enable$[rsp], 0
  0002e	74 0e		 je	 SHORT $LN6@enable_tt3
  00030	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tt32_output_debug_string
  00037	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  0003c	eb 09		 jmp	 SHORT $LN7@enable_tt3
$LN6@enable_tt3:
  0003e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv70[rsp], 0
$LN7@enable_tt3:
  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv70[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_set_debug_output_func

; 148  : 
; 149  :     return enable;  // (enabled or disabled as requested)

  00052	83 7c 24 40 00	 cmp	 DWORD PTR enable$[rsp], 0
  00057	75 0a		 jne	 SHORT $LN8@enable_tt3
  00059	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
  00061	eb 08		 jmp	 SHORT $LN9@enable_tt3
$LN8@enable_tt3:
  00063	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
$LN9@enable_tt3:
  0006b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv72[rsp]
$LN1@enable_tt3:

; 150  : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
enable_tt32_debug_tracing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
errnum$ = 80
tv90 = 84
tv135 = 88
tv148 = 92
tv410 = 96
tv423 = 100
tv436 = 104
stats$ = 112
__$ArrayPad$ = 256
fd$ = 288
display_tt32_stats PROC

; 383  : {

$LN8:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 384  :     int errnum;
; 385  :     TT32STATS stats;
; 386  : 
; 387  :     if (!tt32_loaddll()) return -1;

  0001e	e8 00 00 00 00	 call	 tt32_loaddll
  00023	85 c0		 test	 eax, eax
  00025	75 0a		 jne	 SHORT $LN2@display_tt
  00027	b8 ff ff ff ff	 mov	 eax, -1
  0002c	e9 5d 0c 00 00	 jmp	 $LN1@display_tt
$LN2@display_tt:

; 388  : 
; 389  :     memset(&stats, 0, sizeof(stats));

  00031	48 8d 44 24 70	 lea	 rax, QWORD PTR stats$[rsp]
  00036	48 8b f8	 mov	 rdi, rax
  00039	33 c0		 xor	 eax, eax
  0003b	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00040	f3 aa		 rep stosb

; 390  :     stats.dwStructSize = sizeof(stats);

  00042	c7 44 24 70 88
	00 00 00	 mov	 DWORD PTR stats$[rsp], 136 ; 00000088H

; 391  : 
; 392  :     if (!  g_tt32_pfn_get_stats_ex )

  0004a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_get_stats_ex, 0
  00052	75 14		 jne	 SHORT $LN3@display_tt

; 393  :            g_tt32_pfn_get_stats    ( fd, &stats );

  00054	48 8d 54 24 70	 lea	 rdx, QWORD PTR stats$[rsp]
  00059	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_get_stats
  00066	eb 23		 jmp	 SHORT $LN4@display_tt
$LN3@display_tt:

; 394  :     else { g_tt32_pfn_get_stats_ex ( fd, &stats, &errnum );

  00068	4c 8d 44 24 50	 lea	 r8, QWORD PTR errnum$[rsp]
  0006d	48 8d 54 24 70	 lea	 rdx, QWORD PTR stats$[rsp]
  00072	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_get_stats_ex

; 395  :         errno =                                   errnum;

  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00085	8b 4c 24 50	 mov	 ecx, DWORD PTR errnum$[rsp]
  00089	89 08		 mov	 DWORD PTR [rax], ecx
$LN4@display_tt:

; 396  :     }
; 397  : 
; 398  :     if (stats.dwStructSize >= sizeof(stats))

  0008b	8b 44 24 70	 mov	 eax, DWORD PTR stats$[rsp]
  0008f	48 3d 88 00 00
	00		 cmp	 rax, 136		; 00000088H
  00095	0f 82 8b 06 00
	00		 jb	 $LN5@display_tt

; 399  :     {
; 400  :         // New version 3.3 stats
; 401  : 
; 402  :         // "%s Statistics:"
; 403  :         WRMSG( HHC04101, "I", g_tt32_dllname );

  0009b	b9 01 00 00 00	 mov	 ecx, 1
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  000ad	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159378
  000b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159379
  000c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159380
  000dc	ba 93 01 00 00	 mov	 edx, 403		; 00000193H
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159381
  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 404  : 
; 405  :         // "  %s%5luK"
; 406  :         WRMSG( HHC04103, "I", "Size of Kernel Hold Buffer:      ", (stats.dwKernelBuffSize   + 1023) / 1024 );

  000ee	8b 44 24 74	 mov	 eax, DWORD PTR stats$[rsp+4]
  000f2	05 ff 03 00 00	 add	 eax, 1023		; 000003ffH
  000f7	33 d2		 xor	 edx, edx
  000f9	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  000fe	f7 f1		 div	 ecx
  00100	89 44 24 54	 mov	 DWORD PTR tv90[rsp], eax
  00104	b9 01 00 00 00	 mov	 ecx, 1
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0010f	8b 4c 24 54	 mov	 ecx, DWORD PTR tv90[rsp]
  00113	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159382
  0011e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159383
  0012a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159384
  00136	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00140	41 b9 03 00 00
	00		 mov	 r9d, 3
  00146	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159385
  0014d	ba 96 01 00 00	 mov	 edx, 406		; 00000196H
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159386
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 407  :         WRMSG( HHC04103, "I", "Size of DLL I/O Buffer:          ", (stats.dwReadBuffSize     + 1023) / 1024 );

  0015f	8b 44 24 78	 mov	 eax, DWORD PTR stats$[rsp+8]
  00163	05 ff 03 00 00	 add	 eax, 1023		; 000003ffH
  00168	33 d2		 xor	 edx, edx
  0016a	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0016f	f7 f1		 div	 ecx
  00171	89 44 24 58	 mov	 DWORD PTR tv135[rsp], eax
  00175	b9 01 00 00 00	 mov	 ecx, 1
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00180	8b 4c 24 58	 mov	 ecx, DWORD PTR tv135[rsp]
  00184	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159387
  0018f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159388
  0019b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159389
  001a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159390
  001be	ba 97 01 00 00	 mov	 edx, 407		; 00000197H
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159391
  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 408  :         WRMSG( HHC04103, "I", "Maximum DLL I/O Bytes Received:  ", (stats.dwMaxBytesReceived + 1023) / 1024 );

  001d0	8b 44 24 7c	 mov	 eax, DWORD PTR stats$[rsp+12]
  001d4	05 ff 03 00 00	 add	 eax, 1023		; 000003ffH
  001d9	33 d2		 xor	 edx, edx
  001db	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  001e0	f7 f1		 div	 ecx
  001e2	89 44 24 5c	 mov	 DWORD PTR tv148[rsp], eax
  001e6	b9 01 00 00 00	 mov	 ecx, 1
  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f1	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv148[rsp]
  001f5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159392
  00200	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159393
  0020c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159394
  00218	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0021d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00222	41 b9 03 00 00
	00		 mov	 r9d, 3
  00228	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159395
  0022f	ba 98 01 00 00	 mov	 edx, 408		; 00000198H
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159396
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 409  : 
; 410  :         // "  %12"PRId64"  %s"
; 411  :         WRMSG( HHC04104, "I", stats.n64WriteCalls,             "Total Write Calls" );

  00241	b9 01 00 00 00	 mov	 ecx, 1
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0024c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159397
  00253	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00258	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+16]
  00260	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159398
  0026c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159399
  00278	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00282	41 b9 03 00 00
	00		 mov	 r9d, 3
  00288	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159400
  0028f	ba 9b 01 00 00	 mov	 edx, 411		; 0000019bH
  00294	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159401
  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 412  :         WRMSG( HHC04104, "I", stats.n64WriteIOs,               "Total Write I/Os" );

  002a1	b9 01 00 00 00	 mov	 ecx, 1
  002a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159402
  002b3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002b8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+24]
  002c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159403
  002cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159404
  002d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  002e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159405
  002ef	ba 9c 01 00 00	 mov	 edx, 412		; 0000019cH
  002f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159406
  002fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 413  :         WRMSG( HHC04104, "I", stats.n64ZeroMACPacketsWritten,  "Packets To All Zeroes MAC Written" );

  00301	b9 01 00 00 00	 mov	 ecx, 1
  00306	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159407
  00313	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00318	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+112]
  00320	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159408
  0032c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159409
  00338	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00342	41 b9 03 00 00
	00		 mov	 r9d, 3
  00348	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159410
  0034f	ba 9d 01 00 00	 mov	 edx, 413		; 0000019dH
  00354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159411
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 414  :         WRMSG( HHC04104, "I", stats.n64PacketsWritten,         "Total Packets Written" );

  00361	b9 01 00 00 00	 mov	 ecx, 1
  00366	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0036c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159412
  00373	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00378	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+56]
  00380	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00385	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159413
  0038c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00391	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159414
  00398	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0039d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159415
  003af	ba 9e 01 00 00	 mov	 edx, 414		; 0000019eH
  003b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159416
  003bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 415  :         WRMSG( HHC04104, "I", stats.n64BytesWritten,           "Total Bytes Written" );

  003c1	b9 01 00 00 00	 mov	 ecx, 1
  003c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159417
  003d3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003d8	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+72]
  003e0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159418
  003ec	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159419
  003f8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00402	41 b9 03 00 00
	00		 mov	 r9d, 3
  00408	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159420
  0040f	ba 9f 01 00 00	 mov	 edx, 415		; 0000019fH
  00414	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159421
  0041b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 416  :         WRMSG( HHC04104, "I", stats.n64ReadCalls,              "Total Read Calls" );

  00421	b9 01 00 00 00	 mov	 ecx, 1
  00426	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0042c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159422
  00433	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00438	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+32]
  00440	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00445	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159423
  0044c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159424
  00458	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0045d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00462	41 b9 03 00 00
	00		 mov	 r9d, 3
  00468	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159425
  0046f	ba a0 01 00 00	 mov	 edx, 416		; 000001a0H
  00474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159426
  0047b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 417  :         WRMSG( HHC04104, "I", stats.n64ReadIOs,                "Total Read I/Os" );

  00481	b9 01 00 00 00	 mov	 ecx, 1
  00486	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0048c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159427
  00493	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00498	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+40]
  004a0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159428
  004ac	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159429
  004b8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004c2	41 b9 03 00 00
	00		 mov	 r9d, 3
  004c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159430
  004cf	ba a1 01 00 00	 mov	 edx, 417		; 000001a1H
  004d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159431
  004db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 418  :         WRMSG( HHC04104, "I", stats.n64InternalPackets,        "Internally Handled ARP Packets" );

  004e1	b9 01 00 00 00	 mov	 ecx, 1
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159432
  004f3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004f8	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+80]
  00500	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00505	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159433
  0050c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00511	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159434
  00518	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0051d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00522	41 b9 03 00 00
	00		 mov	 r9d, 3
  00528	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159435
  0052f	ba a2 01 00 00	 mov	 edx, 418		; 000001a2H
  00534	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159436
  0053b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 419  :         WRMSG( HHC04104, "I", stats.n64OwnPacketsIgnored,      "Packets From Ourself" );

  00541	b9 01 00 00 00	 mov	 ecx, 1
  00546	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0054c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159437
  00553	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00558	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+96]
  00560	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00565	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159438
  0056c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00571	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159439
  00578	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0057d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00582	41 b9 03 00 00
	00		 mov	 r9d, 3
  00588	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159440
  0058f	ba a3 01 00 00	 mov	 edx, 419		; 000001a3H
  00594	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159441
  0059b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 420  :         WRMSG( HHC04104, "I", stats.n64IgnoredPackets,         "Total Ignored Packets" );

  005a1	b9 01 00 00 00	 mov	 ecx, 1
  005a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159442
  005b3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005b8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+88]
  005c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159443
  005cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159444
  005d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  005e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159445
  005ef	ba a4 01 00 00	 mov	 edx, 420		; 000001a4H
  005f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159446
  005fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 421  :         WRMSG( HHC04104, "I", stats.n64ZeroMACPacketsRead,     "Packets To All Zeroes MAC Read" );

  00601	b9 01 00 00 00	 mov	 ecx, 1
  00606	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159447
  00613	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00618	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+104]
  00620	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00625	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159448
  0062c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00631	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159449
  00638	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0063d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00642	41 b9 03 00 00
	00		 mov	 r9d, 3
  00648	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159450
  0064f	ba a5 01 00 00	 mov	 edx, 421		; 000001a5H
  00654	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159451
  0065b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 422  :         WRMSG( HHC04104, "I", stats.n64PacketsRead,            "Total Packets Read" );

  00661	b9 01 00 00 00	 mov	 ecx, 1
  00666	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0066c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159452
  00673	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00678	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+48]
  00680	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159453
  0068c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00691	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159454
  00698	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0069d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  006a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159455
  006af	ba a6 01 00 00	 mov	 edx, 422		; 000001a6H
  006b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159456
  006bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 423  :         WRMSG( HHC04104, "I", stats.n64BytesRead,              "Total Bytes Read" );

  006c1	b9 01 00 00 00	 mov	 ecx, 1
  006c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159457
  006d3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006d8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+64]
  006e0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159458
  006ec	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159459
  006f8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00702	41 b9 03 00 00
	00		 mov	 r9d, 3
  00708	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159460
  0070f	ba a7 01 00 00	 mov	 edx, 423		; 000001a7H
  00714	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159461
  0071b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 424  :     }

  00721	e9 66 05 00 00	 jmp	 $LN6@display_tt
$LN5@display_tt:

; 425  :     else
; 426  :     {
; 427  :         // Old pre version 3.3 stats
; 428  : 
; 429  :         // "%s Statistics:"
; 430  :         WRMSG( HHC04101, "I", g_tt32_dllname );

  00726	b9 01 00 00 00	 mov	 ecx, 1
  0072b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00731	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_tt32_dllname
  00738	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0073d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159462
  00744	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159463
  00750	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00755	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00760	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159464
  00767	ba ae 01 00 00	 mov	 edx, 430		; 000001aeH
  0076c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159465
  00773	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 431  : 
; 432  :         // "  %s%5luK"
; 433  :         WRMSG( HHC04103, "I", "Size of Kernel Hold Buffer:      ", (stats.dwKernelBuffSize   + 1023) / 1024 );

  00779	8b 44 24 74	 mov	 eax, DWORD PTR stats$[rsp+4]
  0077d	05 ff 03 00 00	 add	 eax, 1023		; 000003ffH
  00782	33 d2		 xor	 edx, edx
  00784	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00789	f7 f1		 div	 ecx
  0078b	89 44 24 60	 mov	 DWORD PTR tv410[rsp], eax
  0078f	b9 01 00 00 00	 mov	 ecx, 1
  00794	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0079a	8b 4c 24 60	 mov	 ecx, DWORD PTR tv410[rsp]
  0079e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  007a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159466
  007a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159467
  007b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159468
  007c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  007d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159469
  007d8	ba b1 01 00 00	 mov	 edx, 433		; 000001b1H
  007dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159470
  007e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 434  :         WRMSG( HHC04103, "I", "Size of DLL I/O Buffer:          ", (stats.dwReadBuffSize     + 1023) / 1024 );

  007ea	8b 44 24 78	 mov	 eax, DWORD PTR stats$[rsp+8]
  007ee	05 ff 03 00 00	 add	 eax, 1023		; 000003ffH
  007f3	33 d2		 xor	 edx, edx
  007f5	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  007fa	f7 f1		 div	 ecx
  007fc	89 44 24 64	 mov	 DWORD PTR tv423[rsp], eax
  00800	b9 01 00 00 00	 mov	 ecx, 1
  00805	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0080b	8b 4c 24 64	 mov	 ecx, DWORD PTR tv423[rsp]
  0080f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00813	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159471
  0081a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159472
  00826	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0082b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159473
  00832	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00837	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0083c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00842	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159474
  00849	ba b2 01 00 00	 mov	 edx, 434		; 000001b2H
  0084e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159475
  00855	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 435  :         WRMSG( HHC04103, "I", "Maximum DLL I/O Bytes Received:  ", (stats.dwMaxBytesReceived + 1023) / 1024 );

  0085b	8b 44 24 7c	 mov	 eax, DWORD PTR stats$[rsp+12]
  0085f	05 ff 03 00 00	 add	 eax, 1023		; 000003ffH
  00864	33 d2		 xor	 edx, edx
  00866	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0086b	f7 f1		 div	 ecx
  0086d	89 44 24 68	 mov	 DWORD PTR tv436[rsp], eax
  00871	b9 01 00 00 00	 mov	 ecx, 1
  00876	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0087c	8b 4c 24 68	 mov	 ecx, DWORD PTR tv436[rsp]
  00880	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00884	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159476
  0088b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00890	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159477
  00897	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0089c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159478
  008a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  008b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159479
  008ba	ba b3 01 00 00	 mov	 edx, 435		; 000001b3H
  008bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159480
  008c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 436  : 
; 437  :         // "  %12"PRId64"  %s"
; 438  :         WRMSG( HHC04104, "I", stats.n64WriteCalls,             "Total Write Calls" );

  008cc	b9 01 00 00 00	 mov	 ecx, 1
  008d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159481
  008de	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  008e3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+16]
  008eb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159482
  008f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159483
  00903	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00908	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0090d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00913	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159484
  0091a	ba b6 01 00 00	 mov	 edx, 438		; 000001b6H
  0091f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159485
  00926	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 439  :         WRMSG( HHC04104, "I", stats.n64WriteIOs,               "Total Write I/Os" );

  0092c	b9 01 00 00 00	 mov	 ecx, 1
  00931	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00937	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159486
  0093e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00943	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+24]
  0094b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00950	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159487
  00957	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0095c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159488
  00963	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00968	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0096d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00973	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159489
  0097a	ba b7 01 00 00	 mov	 edx, 439		; 000001b7H
  0097f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159490
  00986	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 440  : //      WRMSG( HHC04104, "I", stats.n64ZeroMACPacketsWritten,  "Packets To All Zeroes MAC Written" );
; 441  :         WRMSG( HHC04104, "I", stats.n64PacketsWritten,         "Total Packets Written" );

  0098c	b9 01 00 00 00	 mov	 ecx, 1
  00991	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00997	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159491
  0099e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009a3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+56]
  009ab	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159492
  009b7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159493
  009c3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009c8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009cd	41 b9 03 00 00
	00		 mov	 r9d, 3
  009d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159494
  009da	ba b9 01 00 00	 mov	 edx, 441		; 000001b9H
  009df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159495
  009e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 442  :         WRMSG( HHC04104, "I", stats.n64BytesWritten,           "Total Bytes Written" );

  009ec	b9 01 00 00 00	 mov	 ecx, 1
  009f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159496
  009fe	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a03	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+72]
  00a0b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159497
  00a17	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159498
  00a23	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a28	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a2d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a33	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159499
  00a3a	ba ba 01 00 00	 mov	 edx, 442		; 000001baH
  00a3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159500
  00a46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 443  :         WRMSG( HHC04104, "I", stats.n64ReadCalls,              "Total Read Calls" );

  00a4c	b9 01 00 00 00	 mov	 ecx, 1
  00a51	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159501
  00a5e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a63	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+32]
  00a6b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159502
  00a77	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159503
  00a83	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a88	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a8d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a93	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159504
  00a9a	ba bb 01 00 00	 mov	 edx, 443		; 000001bbH
  00a9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159505
  00aa6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 444  :         WRMSG( HHC04104, "I", stats.n64ReadIOs,                "Total Read I/Os" );

  00aac	b9 01 00 00 00	 mov	 ecx, 1
  00ab1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ab7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159506
  00abe	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00ac3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+40]
  00acb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ad0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159507
  00ad7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00adc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159508
  00ae3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ae8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aed	41 b9 03 00 00
	00		 mov	 r9d, 3
  00af3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159509
  00afa	ba bc 01 00 00	 mov	 edx, 444		; 000001bcH
  00aff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159510
  00b06	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 445  :         WRMSG( HHC04104, "I", stats.n64InternalPackets,        "Internally Handled ARP Packets" );

  00b0c	b9 01 00 00 00	 mov	 ecx, 1
  00b11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159511
  00b1e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00b23	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+80]
  00b2b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159512
  00b37	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159513
  00b43	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b48	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b4d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b53	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159514
  00b5a	ba bd 01 00 00	 mov	 edx, 445		; 000001bdH
  00b5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159515
  00b66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 446  : //      WRMSG( HHC04104, "I", stats.n64OwnPacketsIgnored,      "Packets From Ourself" );
; 447  :         WRMSG( HHC04104, "I", stats.n64IgnoredPackets,         "Total Ignored Packets" );

  00b6c	b9 01 00 00 00	 mov	 ecx, 1
  00b71	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b77	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159516
  00b7e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00b83	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+88]
  00b8b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b90	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159517
  00b97	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159518
  00ba3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ba8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bad	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bb3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159519
  00bba	ba bf 01 00 00	 mov	 edx, 447		; 000001bfH
  00bbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159520
  00bc6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 448  : //      WRMSG( HHC04104, "I", stats.n64ZeroMACPacketsRead,     "Packets To All Zeroes MAC Read" );
; 449  :         WRMSG( HHC04104, "I", stats.n64PacketsRead,            "Total Packets Read" );

  00bcc	b9 01 00 00 00	 mov	 ecx, 1
  00bd1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bd7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159521
  00bde	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00be3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+48]
  00beb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00bf0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159522
  00bf7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159523
  00c03	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c08	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c0d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c13	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159524
  00c1a	ba c1 01 00 00	 mov	 edx, 449		; 000001c1H
  00c1f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159525
  00c26	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 450  :         WRMSG( HHC04104, "I", stats.n64BytesRead,              "Total Bytes Read" );

  00c2c	b9 01 00 00 00	 mov	 ecx, 1
  00c31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159526
  00c3e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00c43	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR stats$[rsp+64]
  00c4b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159527
  00c57	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159528
  00c63	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c68	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c6d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c73	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159529
  00c7a	ba c2 01 00 00	 mov	 edx, 450		; 000001c2H
  00c7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159530
  00c86	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@display_tt:

; 451  :     }
; 452  : 
; 453  :     return 0;

  00c8c	33 c0		 xor	 eax, eax
$LN1@display_tt:

; 454  : }

  00c8e	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00c96	48 33 cc	 xor	 rcx, rsp
  00c99	e8 00 00 00 00	 call	 __security_check_cookie
  00c9e	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  00ca5	5f		 pop	 rdi
  00ca6	c3		 ret	 0
display_tt32_stats ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
major$ = 48
inter$ = 56
minor$ = 64
build$ = 72
tt32_version_numbers PROC

; 259  : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 260  :     *major = *inter = *minor = *build = 0;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR build$[rsp]
  0001d	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR minor$[rsp]
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0002e	48 8b 44 24 38	 mov	 rax, QWORD PTR inter$[rsp]
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR major$[rsp]
  0003e	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 261  :     if (tt32_loaddll())

  00044	e8 00 00 00 00	 call	 tt32_loaddll
  00049	85 c0		 test	 eax, eax
  0004b	74 1a		 je	 SHORT $LN2@tt32_versi

; 262  :         g_tt32_pfn_version_numbers( major, inter, minor, build );

  0004d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR build$[rsp]
  00052	4c 8b 44 24 40	 mov	 r8, QWORD PTR minor$[rsp]
  00057	48 8b 54 24 38	 mov	 rdx, QWORD PTR inter$[rsp]
  0005c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR major$[rsp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_version_numbers
$LN2@tt32_versi:

; 263  : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
tt32_version_numbers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
out_mac$ = 48
in_ip$ = 56
tt32_build_herc_iface_mac PROC

; 460  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 461  :     // We prefer to let TunTap32 do it for us (since IT'S the one
; 462  :     // that decides what it should really be) but if they're using
; 463  :     // an older version of TunTap32 that doesn't have the function
; 464  :     // then we'll do it ourselves just like before...
; 465  : 
; 466  :     if (!g_tt32_pfn_build_herc_iface_mac)

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_build_herc_iface_mac, 0
  00016	75 04		 jne	 SHORT $LN2@tt32_build

; 467  :         return 0;   // (FALSE: must do it yourself)

  00018	33 c0		 xor	 eax, eax
  0001a	eb 15		 jmp	 SHORT $LN1@tt32_build
$LN2@tt32_build:

; 468  : 
; 469  :     g_tt32_pfn_build_herc_iface_mac( out_mac, in_ip );

  0001c	48 8b 54 24 38	 mov	 rdx, QWORD PTR in_ip$[rsp]
  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out_mac$[rsp]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_build_herc_iface_mac

; 470  :     return 1;       // (TRUE: ok we did it for you)

  0002c	b8 01 00 00 00	 mov	 eax, 1
$LN1@tt32_build:

; 471  : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
tt32_build_herc_iface_mac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
errnum$ = 32
pszDefaultIFace$ = 40
tv72 = 48
tt32_get_default_iface PROC

; 366  : {

$LN8:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 367  :     int errnum;
; 368  :     const char* pszDefaultIFace = NULL;

  00004	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR pszDefaultIFace$[rsp], 0

; 369  :     if (tt32_loaddll())

  0000d	e8 00 00 00 00	 call	 tt32_loaddll
  00012	85 c0		 test	 eax, eax
  00014	74 33		 je	 SHORT $LN2@tt32_get_d

; 370  :     {
; 371  :         if (!                    g_tt32_pfn_get_default_iface_ex )

  00016	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_get_default_iface_ex, 0
  0001e	75 0d		 jne	 SHORT $LN3@tt32_get_d

; 372  :                pszDefaultIFace = g_tt32_pfn_get_default_iface    ();

  00020	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_get_default_iface
  00026	48 89 44 24 28	 mov	 QWORD PTR pszDefaultIFace$[rsp], rax
  0002b	eb 1c		 jmp	 SHORT $LN4@tt32_get_d
$LN3@tt32_get_d:

; 373  :         else { pszDefaultIFace = g_tt32_pfn_get_default_iface_ex ( &errnum );

  0002d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR errnum$[rsp]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_get_default_iface_ex
  00038	48 89 44 24 28	 mov	 QWORD PTR pszDefaultIFace$[rsp], rax

; 374  :             errno =                                                 errnum;

  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00043	8b 4c 24 20	 mov	 ecx, DWORD PTR errnum$[rsp]
  00047	89 08		 mov	 DWORD PTR [rax], ecx
$LN4@tt32_get_d:
$LN2@tt32_get_d:

; 375  :         }
; 376  :     }
; 377  :     return ( pszDefaultIFace ? pszDefaultIFace : TT32_DEFAULT_IFACE );

  00049	48 83 7c 24 28
	00		 cmp	 QWORD PTR pszDefaultIFace$[rsp], 0
  0004f	74 0c		 je	 SHORT $LN6@tt32_get_d
  00051	48 8b 44 24 28	 mov	 rax, QWORD PTR pszDefaultIFace$[rsp]
  00056	48 89 44 24 30	 mov	 QWORD PTR tv72[rsp], rax
  0005b	eb 0c		 jmp	 SHORT $LN7@tt32_get_d
$LN6@tt32_get_d:
  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159367
  00064	48 89 44 24 30	 mov	 QWORD PTR tv72[rsp], rax
$LN7@tt32_get_d:
  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR tv72[rsp]

; 378  : }

  0006e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00072	c3		 ret	 0
tt32_get_default_iface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
errnum$ = 32
rc$ = 36
fd$ = 64
iRequest$ = 72
argp$ = 80
tt32_ioctl PROC

; 353  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 354  :     int rc, errnum;
; 355  :     if (!tt32_loaddll()) return -1;

  00011	e8 00 00 00 00	 call	 tt32_loaddll
  00016	85 c0		 test	 eax, eax
  00018	75 07		 jne	 SHORT $LN2@tt32_ioctl
  0001a	b8 ff ff ff ff	 mov	 eax, -1
  0001f	eb 4b		 jmp	 SHORT $LN1@tt32_ioctl
$LN2@tt32_ioctl:

; 356  :     if (!      g_tt32_pfn_ioctl_ex )

  00021	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_ioctl_ex, 0
  00029	75 15		 jne	 SHORT $LN3@tt32_ioctl

; 357  :         return g_tt32_pfn_ioctl    ( fd, iRequest, argp );

  0002b	4c 8b 44 24 50	 mov	 r8, QWORD PTR argp$[rsp]
  00030	8b 54 24 48	 mov	 edx, DWORD PTR iRequest$[rsp]
  00034	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_ioctl
  0003e	eb 2c		 jmp	 SHORT $LN1@tt32_ioctl
$LN3@tt32_ioctl:

; 358  :     rc    =    g_tt32_pfn_ioctl_ex ( fd, iRequest, argp, &errnum );

  00040	4c 8d 4c 24 20	 lea	 r9, QWORD PTR errnum$[rsp]
  00045	4c 8b 44 24 50	 mov	 r8, QWORD PTR argp$[rsp]
  0004a	8b 54 24 48	 mov	 edx, DWORD PTR iRequest$[rsp]
  0004e	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_ioctl_ex
  00058	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 359  :     errno =                                               errnum;

  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00062	8b 4c 24 20	 mov	 ecx, DWORD PTR errnum$[rsp]
  00066	89 08		 mov	 DWORD PTR [rax], ecx

; 360  :     return rc;

  00068	8b 44 24 24	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tt32_ioctl:

; 361  : }

  0006c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00070	c3		 ret	 0
tt32_ioctl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
errnum$ = 32
rc$ = 36
fd$ = 64
tt32_close PROC

; 337  : {

$LN5:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 338  :     int rc, errnum;
; 339  :     if (!tt32_loaddll()) return -1;

  00008	e8 00 00 00 00	 call	 tt32_loaddll
  0000d	85 c0		 test	 eax, eax
  0000f	75 07		 jne	 SHORT $LN2@tt32_close
  00011	b8 ff ff ff ff	 mov	 eax, -1
  00016	eb 42		 jmp	 SHORT $LN1@tt32_close
$LN2@tt32_close:

; 340  : #if defined(DEBUG) || defined(_DEBUG)
; 341  :     display_tt32_stats(fd);

  00018	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0001c	e8 00 00 00 00	 call	 display_tt32_stats

; 342  : #endif
; 343  :     if (!      g_tt32_pfn_close_ex )

  00021	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_close_ex, 0
  00029	75 0c		 jne	 SHORT $LN3@tt32_close

; 344  :         return g_tt32_pfn_close    ( fd );

  0002b	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_close
  00035	eb 23		 jmp	 SHORT $LN1@tt32_close
$LN3@tt32_close:

; 345  :     rc    =    g_tt32_pfn_close_ex ( fd, &errnum );

  00037	48 8d 54 24 20	 lea	 rdx, QWORD PTR errnum$[rsp]
  0003c	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_close_ex
  00046	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 346  :     errno =                               errnum;

  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00050	8b 4c 24 20	 mov	 ecx, DWORD PTR errnum$[rsp]
  00054	89 08		 mov	 DWORD PTR [rax], ecx

; 347  :     return rc;

  00056	8b 44 24 24	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tt32_close:

; 348  : }

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
tt32_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
rc$ = 32
errnum$1 = 36
fd$ = 64
tt32_end_write_multi PROC

; 321  : {

$LN8:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 322  :     int rc; if (!tt32_loaddll()) return -1;

  00008	e8 00 00 00 00	 call	 tt32_loaddll
  0000d	85 c0		 test	 eax, eax
  0000f	75 07		 jne	 SHORT $LN2@tt32_end_w
  00011	b8 ff ff ff ff	 mov	 eax, -1
  00016	eb 51		 jmp	 SHORT $LN1@tt32_end_w
$LN2@tt32_end_w:

; 323  : 
; 324  :     if (     g_tt32_pfn_end_write_multi_ex ) { int        errnum;

  00018	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_end_write_multi_ex, 0
  00020	74 21		 je	 SHORT $LN3@tt32_end_w

; 325  :         rc = g_tt32_pfn_end_write_multi_ex ( fd,         &errnum );

  00022	48 8d 54 24 24	 lea	 rdx, QWORD PTR errnum$1[rsp]
  00027	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_end_write_multi_ex
  00031	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 326  :                                                   errno = errnum;} else

  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0003b	8b 4c 24 24	 mov	 ecx, DWORD PTR errnum$1[rsp]
  0003f	89 08		 mov	 DWORD PTR [rax], ecx
  00041	eb 22		 jmp	 SHORT $LN4@tt32_end_w
$LN3@tt32_end_w:

; 327  :     if (     g_tt32_pfn_end_write_multi )

  00043	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_end_write_multi, 0
  0004b	74 10		 je	 SHORT $LN5@tt32_end_w

; 328  :         rc = g_tt32_pfn_end_write_multi    ( fd );

  0004d	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_end_write_multi
  00057	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  0005b	eb 08		 jmp	 SHORT $LN6@tt32_end_w
$LN5@tt32_end_w:

; 329  :     else
; 330  :         rc = 0;   // (don't fail, treat as nop instead)

  0005d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN6@tt32_end_w:
$LN4@tt32_end_w:

; 331  :     return rc;

  00065	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tt32_end_w:

; 332  : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
tt32_end_write_multi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
rc$ = 32
errnum$1 = 36
fd$ = 64
bufsiz$ = 72
tt32_beg_write_multi PROC

; 307  : {

$LN8:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 308  :     int rc; if (!tt32_loaddll()) return -1;

  0000c	e8 00 00 00 00	 call	 tt32_loaddll
  00011	85 c0		 test	 eax, eax
  00013	75 07		 jne	 SHORT $LN2@tt32_beg_w
  00015	b8 ff ff ff ff	 mov	 eax, -1
  0001a	eb 59		 jmp	 SHORT $LN1@tt32_beg_w
$LN2@tt32_beg_w:

; 309  : 
; 310  :     if (     g_tt32_pfn_beg_write_multi_ex ) { int        errnum;

  0001c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_beg_write_multi_ex, 0
  00024	74 25		 je	 SHORT $LN3@tt32_beg_w

; 311  :         rc = g_tt32_pfn_beg_write_multi_ex ( fd, bufsiz, &errnum );

  00026	4c 8d 44 24 24	 lea	 r8, QWORD PTR errnum$1[rsp]
  0002b	8b 54 24 48	 mov	 edx, DWORD PTR bufsiz$[rsp]
  0002f	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_beg_write_multi_ex
  00039	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 312  :                                                   errno = errnum;} else

  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00043	8b 4c 24 24	 mov	 ecx, DWORD PTR errnum$1[rsp]
  00047	89 08		 mov	 DWORD PTR [rax], ecx
  00049	eb 26		 jmp	 SHORT $LN4@tt32_beg_w
$LN3@tt32_beg_w:

; 313  :     if (     g_tt32_pfn_beg_write_multi )

  0004b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_beg_write_multi, 0
  00053	74 14		 je	 SHORT $LN5@tt32_beg_w

; 314  :         rc = g_tt32_pfn_beg_write_multi    ( fd, bufsiz );

  00055	8b 54 24 48	 mov	 edx, DWORD PTR bufsiz$[rsp]
  00059	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_beg_write_multi
  00063	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00067	eb 08		 jmp	 SHORT $LN6@tt32_beg_w
$LN5@tt32_beg_w:

; 315  :     else
; 316  :         rc = 0;   // (don't fail, treat as nop instead)

  00069	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN6@tt32_beg_w:
$LN4@tt32_beg_w:

; 317  :     return rc;

  00071	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tt32_beg_w:

; 318  : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
tt32_beg_write_multi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
errnum$ = 32
rc$ = 36
fd$ = 64
buffer$ = 72
size$ = 80
tt32_write PROC

; 294  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 295  :     int rc, errnum;
; 296  :     if (!tt32_loaddll()) return -1;

  00012	e8 00 00 00 00	 call	 tt32_loaddll
  00017	85 c0		 test	 eax, eax
  00019	75 07		 jne	 SHORT $LN2@tt32_write
  0001b	b8 ff ff ff ff	 mov	 eax, -1
  00020	eb 4d		 jmp	 SHORT $LN1@tt32_write
$LN2@tt32_write:

; 297  :     if (!      g_tt32_pfn_write_ex )

  00022	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_write_ex, 0
  0002a	75 16		 jne	 SHORT $LN3@tt32_write

; 298  :         return g_tt32_pfn_write    ( fd, buffer, size );

  0002c	44 8b 44 24 50	 mov	 r8d, DWORD PTR size$[rsp]
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR buffer$[rsp]
  00036	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_write
  00040	eb 2d		 jmp	 SHORT $LN1@tt32_write
$LN3@tt32_write:

; 299  :     rc    =    g_tt32_pfn_write_ex ( fd, buffer, size, &errnum );

  00042	4c 8d 4c 24 20	 lea	 r9, QWORD PTR errnum$[rsp]
  00047	44 8b 44 24 50	 mov	 r8d, DWORD PTR size$[rsp]
  0004c	48 8b 54 24 48	 mov	 rdx, QWORD PTR buffer$[rsp]
  00051	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_write_ex
  0005b	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 300  :     errno =                                             errnum;

  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00065	8b 4c 24 20	 mov	 ecx, DWORD PTR errnum$[rsp]
  00069	89 08		 mov	 DWORD PTR [rax], ecx

; 301  :     return rc;

  0006b	8b 44 24 24	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tt32_write:

; 302  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
tt32_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
errnum$ = 32
rc$ = 36
fd$ = 64
buffer$ = 72
size$ = 80
tt32_read PROC

; 281  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 282  :     int rc, errnum;
; 283  :     if (!tt32_loaddll()) return -1;

  00012	e8 00 00 00 00	 call	 tt32_loaddll
  00017	85 c0		 test	 eax, eax
  00019	75 07		 jne	 SHORT $LN2@tt32_read
  0001b	b8 ff ff ff ff	 mov	 eax, -1
  00020	eb 4d		 jmp	 SHORT $LN1@tt32_read
$LN2@tt32_read:

; 284  :     if (!      g_tt32_pfn_read_ex )

  00022	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_read_ex, 0
  0002a	75 16		 jne	 SHORT $LN3@tt32_read

; 285  :         return g_tt32_pfn_read    ( fd, buffer, size );

  0002c	44 8b 44 24 50	 mov	 r8d, DWORD PTR size$[rsp]
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR buffer$[rsp]
  00036	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_read
  00040	eb 2d		 jmp	 SHORT $LN1@tt32_read
$LN3@tt32_read:

; 286  :     rc    =    g_tt32_pfn_read_ex ( fd, buffer, size, &errnum );

  00042	4c 8d 4c 24 20	 lea	 r9, QWORD PTR errnum$[rsp]
  00047	44 8b 44 24 50	 mov	 r8d, DWORD PTR size$[rsp]
  0004c	48 8b 54 24 48	 mov	 rdx, QWORD PTR buffer$[rsp]
  00051	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_read_ex
  0005b	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 287  :     errno =                                            errnum;

  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00065	8b 4c 24 20	 mov	 ecx, DWORD PTR errnum$[rsp]
  00069	89 08		 mov	 DWORD PTR [rax], ecx

; 288  :     return rc;

  0006b	8b 44 24 24	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tt32_read:

; 289  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
tt32_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\w32ctca.c
_TEXT	SEGMENT
errnum$ = 32
rc$ = 36
pszGatewayDevice$ = 64
iFlags$ = 72
tt32_open PROC

; 268  : {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 269  :     int rc, errnum;
; 270  :     if (!tt32_loaddll()) return -1;

  0000d	e8 00 00 00 00	 call	 tt32_loaddll
  00012	85 c0		 test	 eax, eax
  00014	75 07		 jne	 SHORT $LN2@tt32_open
  00016	b8 ff ff ff ff	 mov	 eax, -1
  0001b	eb 43		 jmp	 SHORT $LN1@tt32_open
$LN2@tt32_open:

; 271  :     if (!      g_tt32_pfn_open_ex )

  0001d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR g_tt32_pfn_open_ex, 0
  00025	75 11		 jne	 SHORT $LN3@tt32_open

; 272  :         return g_tt32_pfn_open    ( pszGatewayDevice, iFlags );

  00027	8b 54 24 48	 mov	 edx, DWORD PTR iFlags$[rsp]
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pszGatewayDevice$[rsp]
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_open
  00036	eb 28		 jmp	 SHORT $LN1@tt32_open
$LN3@tt32_open:

; 273  :     rc    =    g_tt32_pfn_open_ex ( pszGatewayDevice, iFlags, &errnum );

  00038	4c 8d 44 24 20	 lea	 r8, QWORD PTR errnum$[rsp]
  0003d	8b 54 24 48	 mov	 edx, DWORD PTR iFlags$[rsp]
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pszGatewayDevice$[rsp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR g_tt32_pfn_open_ex
  0004c	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 274  :     errno =                                                    errnum;

  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00056	8b 4c 24 20	 mov	 ecx, DWORD PTR errnum$[rsp]
  0005a	89 08		 mov	 DWORD PTR [rax], ecx

; 275  :     return rc;

  0005c	8b 44 24 24	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tt32_open:

; 276  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
tt32_open ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
