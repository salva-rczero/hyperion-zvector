; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG159053 DB	'MVS', 00H
$SG159054 DB	'VM', 00H
	ORG $+1
$SG159055 DB	'VSE', 00H
$SG159056 DB	'TPF', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	losc_set
PUBLIC	losc_check
EXTRN	strlen:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_sysblk:BYTE
_BSS	SEGMENT
os_licensed DD	01H DUP (?)
check_done DB	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$losc_check DD imagerel $LN10
	DD	imagerel $LN10+286
	DD	imagerel $unwind$losc_check
$pdata$stop_all_cpus_intlock_held DD imagerel stop_all_cpus_intlock_held
	DD	imagerel stop_all_cpus_intlock_held+221
	DD	imagerel $unwind$stop_all_cpus_intlock_held
pdata	ENDS
_DATA	SEGMENT
$SG158926 DB	'C:\papa\MyGit\hyperion-zvector\hinlines.h:466', 00H
	ORG $+2
licensed_os DQ	FLAT:$SG159053
	DQ	FLAT:$SG159054
	DQ	FLAT:$SG159055
	DQ	FLAT:$SG159056
	DQ	0000000000000000H
$SG159073 DB	'W', 00H
	ORG $+6
$SG159074 DB	'HHC00130%s PGMPRDOS LICENSED specified and a licenced pr'
	DB	'ogram product operating system is running', 0aH, 00H
	ORG $+1
$SG159077 DB	'A', 00H
	ORG $+2
$SG159075 DB	'losc_check', 00H
	ORG $+1
$SG159076 DB	'losc.c', 00H
	ORG $+5
$SG159078 DB	'HHC00131%s A licensed program product operating system d'
	DB	'etected, all processors have been stopped', 0aH, 00H
	ORG $+5
$SG159079 DB	'losc_check', 00H
	ORG $+1
$SG159080 DB	'losc.c', 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$losc_check DD 010901H
	DD	0a209H
$unwind$stop_all_cpus_intlock_held DD 010401H
	DD	08204H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
cpu$ = 32
regs$ = 40
mask$ = 48
stop_all_cpus_intlock_held PROC

; 451  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 452  :     CPU_BITMAP  mask;
; 453  :     REGS*       regs;
; 454  :     int         cpu;
; 455  : 
; 456  :     mask = sysblk.started_mask & sysblk.config_mask;

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00012	48 8b 89 a8 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4776]
  00019	48 8b 80 b0 12
	00 00		 mov	 rax, QWORD PTR [rax+4784]
  00020	48 23 c1	 and	 rax, rcx
  00023	48 89 44 24 30	 mov	 QWORD PTR mask$[rsp], rax

; 457  : 
; 458  :     for (cpu=0; mask; cpu++)

  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR cpu$[rsp], 0
  00030	eb 0a		 jmp	 SHORT $LN4@stop_all_c
$LN2@stop_all_c:
  00032	8b 44 24 20	 mov	 eax, DWORD PTR cpu$[rsp]
  00036	ff c0		 inc	 eax
  00038	89 44 24 20	 mov	 DWORD PTR cpu$[rsp], eax
$LN4@stop_all_c:
  0003c	48 83 7c 24 30
	00		 cmp	 QWORD PTR mask$[rsp], 0
  00042	0f 84 90 00 00
	00		 je	 $LN3@stop_all_c

; 459  :     {
; 460  :         if (mask & 1)   // (configured and started?)

  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR mask$[rsp]
  0004d	48 83 e0 01	 and	 rax, 1
  00051	48 85 c0	 test	 rax, rax
  00054	74 70		 je	 SHORT $LN8@stop_all_c

; 461  :         {
; 462  :             regs = sysblk.regs[ cpu ];

  00056	48 63 44 24 20	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00062	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0006a	48 89 44 24 28	 mov	 QWORD PTR regs$[rsp], rax

; 463  :             regs->opinterv = 1;

  0006f	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  00074	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  0007a	83 c8 10	 or	 eax, 16
  0007d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00082	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 464  :             regs->cpustate = CPUSTATE_STOPPING;

  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  0008d	c6 40 60 02	 mov	 BYTE PTR [rax+96], 2
$LN7@stop_all_c:

; 465  :             ON_IC_INTERRUPT( regs );

  00091	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  00096	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00099	0f ba e8 1f	 bts	 eax, 31
  0009d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000a2	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  000a5	33 c0		 xor	 eax, eax
  000a7	85 c0		 test	 eax, eax
  000a9	75 e6		 jne	 SHORT $LN7@stop_all_c

; 466  :             signal_condition( &regs->intcond );

  000ab	48 8b 44 24 28	 mov	 rax, QWORD PTR regs$[rsp]
  000b0	48 05 80 0c 00
	00		 add	 rax, 3200		; 00000c80H
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG158926
  000bd	48 8b c8	 mov	 rcx, rax
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN8@stop_all_c:

; 467  :         }
; 468  :          mask >>= 1;

  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR mask$[rsp]
  000cb	48 d1 e8	 shr	 rax, 1
  000ce	48 89 44 24 30	 mov	 QWORD PTR mask$[rsp], rax

; 469  :     }

  000d3	e9 5a ff ff ff	 jmp	 $LN2@stop_all_c
$LN3@stop_all_c:

; 470  : }

  000d8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000dc	c3		 ret	 0
stop_all_cpus_intlock_held ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\losc.c
_TEXT	SEGMENT
lictype$ = 64
ostype$ = 96
losc_check PROC

; 34   : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 35   :     char**  lictype;
; 36   : 
; 37   :     if (check_done)

  00009	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR check_done
  00010	85 c0		 test	 eax, eax
  00012	74 05		 je	 SHORT $LN5@losc_check

; 38   :         return;

  00014	e9 00 01 00 00	 jmp	 $LN1@losc_check
$LN5@losc_check:

; 39   : 
; 40   :     check_done = true;

  00019	c6 05 00 00 00
	00 01		 mov	 BYTE PTR check_done, 1

; 41   : 
; 42   :     for (lictype = licensed_os; *lictype; lictype++)

  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:licensed_os
  00027	48 89 44 24 40	 mov	 QWORD PTR lictype$[rsp], rax
  0002c	eb 0e		 jmp	 SHORT $LN4@losc_check
$LN2@losc_check:
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR lictype$[rsp]
  00033	48 83 c0 08	 add	 rax, 8
  00037	48 89 44 24 40	 mov	 QWORD PTR lictype$[rsp], rax
$LN4@losc_check:
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR lictype$[rsp]
  00041	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00045	0f 84 ce 00 00
	00		 je	 $LN3@losc_check

; 43   :     {
; 44   :         if (!strncasecmp( ostype, *lictype, strlen( *lictype )))

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR lictype$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	e8 00 00 00 00	 call	 strlen
  00058	4c 8b c0	 mov	 r8, rax
  0005b	48 8b 44 24 40	 mov	 rax, QWORD PTR lictype$[rsp]
  00060	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00063	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ostype$[rsp]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0006e	85 c0		 test	 eax, eax
  00070	0f 85 9e 00 00
	00		 jne	 $LN6@losc_check

; 45   :         {
; 46   :             if (os_licensed == PGM_PRD_OS_LICENSED)

  00076	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR os_licensed, 0
  0007d	75 49		 jne	 SHORT $LN7@losc_check

; 47   :             {
; 48   :                 // "PGMPRDOS LICENSED specified and a licenced program product operating system is running"
; 49   :                 WRMSG( HHC00130, "W" );

  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159073
  00091	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159074
  0009d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159075
  000b4	ba 31 00 00 00	 mov	 edx, 49			; 00000031H
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159076
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 50   :             }

  000c6	eb 4c		 jmp	 SHORT $LN8@losc_check
$LN7@losc_check:

; 51   :             else// (os_licensed == PGM_PRD_OS_RESTRICTED)
; 52   :             {
; 53   :                 // "A licensed program product operating system detected, all processors have been stopped"
; 54   :                 WRMSG( HHC00131, "A" );

  000c8	b9 01 00 00 00	 mov	 ecx, 1
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159077
  000da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159078
  000e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159079
  000fd	ba 36 00 00 00	 mov	 edx, 54			; 00000036H
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159080
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 55   : 
; 56   :                 stop_all_cpus_intlock_held();

  0010f	e8 00 00 00 00	 call	 stop_all_cpus_intlock_held
$LN8@losc_check:
$LN6@losc_check:

; 57   :             }
; 58   :         }
; 59   :     }

  00114	e9 15 ff ff ff	 jmp	 $LN2@losc_check
$LN3@losc_check:
$LN1@losc_check:

; 60   : }

  00119	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011d	c3		 ret	 0
losc_check ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\losc.c
_TEXT	SEGMENT
license_status$ = 8
losc_set PROC

; 28   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 29   :     os_licensed = license_status;

  00004	8b 44 24 08	 mov	 eax, DWORD PTR license_status$[rsp]
  00008	89 05 00 00 00
	00		 mov	 DWORD PTR os_licensed, eax

; 30   :     check_done  = false;

  0000e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR check_done, 0

; 31   : }

  00015	c3		 ret	 0
losc_set ENDP
_TEXT	ENDS
END
