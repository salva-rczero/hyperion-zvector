; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG159169 DB	'DAT-Off', 00H
$SG159170 DB	'Primary', 00H
$SG159171 DB	'AR', 00H
	ORG $+5
$SG159172 DB	'Secondary', 00H
	ORG $+2
$SG159173 DB	'Home', 00H
	ORG $+7
$SG159174 DB	'PER/DAT-Off', 00H
	ORG $+4
$SG159175 DB	'PER/Primary', 00H
$SG159176 DB	'PER/AR', 00H
	ORG $+5
$SG159177 DB	'PER/Secondary', 00H
	ORG $+2
$SG159178 DB	'PER/Home', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
?fbyte@?1??enable_lparmode@@9@9 DD 020H			; `enable_lparmode'::`2'::fbyte
?fbit@?1??enable_lparmode@@9@9 DD 08H			; `enable_lparmode'::`2'::fbit
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	aia_cmd
PUBLIC	createCpuId
PUBLIC	setAllCpuIds
PUBLIC	setAllCpuIds_lock
PUBLIC	setCpuIdregs
PUBLIC	setCpuId
PUBLIC	resetAllCpuIds
PUBLIC	setOperationMode
PUBLIC	enable_lparmode
PUBLIC	s370_archdep_pr_cmd
PUBLIC	s390_archdep_pr_cmd
PUBLIC	z900_archdep_pr_cmd
PUBLIC	aea_cmd
PUBLIC	traceopt_cmd
PUBLIC	tlb_cmd
PUBLIC	ar_cmd
PUBLIC	pr_cmd
PUBLIC	psw_cmd
PUBLIC	abs_or_r_cmd
PUBLIC	u_cmd
PUBLIC	v_cmd
PUBLIC	tf_cmd
PUBLIC	trace_cmd
PUBLIC	txf_cmd
PUBLIC	auto_trace_cmd
PUBLIC	ipending_cmd
PUBLIC	bear_cmd
PUBLIC	gpr_cmd
PUBLIC	fpr_cmd
PUBLIC	fpc_cmd
PUBLIC	cr_cmd
PUBLIC	i_cmd
PUBLIC	__real@4059000000000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_tolower:PROC
EXTRN	__imp__errno:PROC
EXTRN	strchr:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_strtoul:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_try_obtain_lock:PROC
EXTRN	__imp_hthread_test_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_rtrim:PROC
EXTRN	__imp_ptyp2short:PROC
EXTRN	__imp_tf_MAX_RECSIZE:PROC
EXTRN	__imp_tf_close_locked:PROC
EXTRN	__imp_tf_autostop:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fclose:PROC
EXTRN	copy_psw:PROC
EXTRN	display_psw:PROC
EXTRN	tac2long:PROC
EXTRN	find_device_by_devnum:PROC
EXTRN	parse_single_devnum:PROC
EXTRN	display_gregs:PROC
EXTRN	display_fregs:PROC
EXTRN	display_cregs:PROC
EXTRN	display_aregs:PROC
EXTRN	FormatCRW:PROC
EXTRN	alter_display_real_or_abs:PROC
EXTRN	alter_display_virt:PROC
EXTRN	disasm_stor:PROC
EXTRN	device_attention:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__imp_panel_command:QWORD
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG159067 DB	01H DUP (?)
$SG159099 DB	01H DUP (?)
$SG159131 DB	01H DUP (?)
$SG159320 DB	01H DUP (?)
$SG159347 DB	01H DUP (?)
$SG159701 DB	01H DUP (?)
$SG160112 DB	01H DUP (?)
$SG160114 DB	01H DUP (?)
$SG160243 DB	01H DUP (?)
$SG160252 DB	01H DUP (?)
$SG160482 DB	01H DUP (?)
$SG160484 DB	01H DUP (?)
$SG160486 DB	01H DUP (?)
$SG160488 DB	01H DUP (?)
$SG160490 DB	01H DUP (?)
$SG160492 DB	01H DUP (?)
$SG160494 DB	01H DUP (?)
$SG160496 DB	01H DUP (?)
$SG160714 DB	01H DUP (?)
$SG160720 DB	01H DUP (?)
$SG160726 DB	01H DUP (?)
$SG160732 DB	01H DUP (?)
$SG160738 DB	01H DUP (?)
$SG160744 DB	01H DUP (?)
$SG160750 DB	01H DUP (?)
$SG160756 DB	01H DUP (?)
$SG160762 DB	01H DUP (?)
$SG160768 DB	01H DUP (?)
$SG160792 DB	01H DUP (?)
$SG160833 DB	01H DUP (?)
$SG160840 DB	01H DUP (?)
$SG160847 DB	01H DUP (?)
$SG160854 DB	01H DUP (?)
$SG160861 DB	01H DUP (?)
$SG160868 DB	01H DUP (?)
$SG160875 DB	01H DUP (?)
$SG160882 DB	01H DUP (?)
$SG160889 DB	01H DUP (?)
$SG160896 DB	01H DUP (?)
$SG160953 DB	01H DUP (?)
$SG160958 DB	01H DUP (?)
$SG160964 DB	01H DUP (?)
$SG160970 DB	01H DUP (?)
$SG160976 DB	01H DUP (?)
$SG160982 DB	01H DUP (?)
$SG161070 DB	01H DUP (?)
$SG161076 DB	01H DUP (?)
$SG161078 DB	01H DUP (?)
$SG161080 DB	01H DUP (?)
$SG161082 DB	01H DUP (?)
$SG161173 DB	01H DUP (?)
$SG161182 DB	01H DUP (?)
$SG161231 DB	01H DUP (?)
$SG161243 DB	01H DUP (?)
$SG161286 DB	01H DUP (?)
$SG161295 DB	01H DUP (?)
$SG161338 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$strcaseabbrev DD imagerel strcaseabbrev
	DD	imagerel strcaseabbrev+320
	DD	imagerel $unwind$strcaseabbrev
$pdata$strupper DD imagerel strupper
	DD	imagerel strupper+114
	DD	imagerel $unwind$strupper
$pdata$aia_cmd DD imagerel $LN14
	DD	imagerel $LN14+867
	DD	imagerel $unwind$aia_cmd
$pdata$createCpuId DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$createCpuId
$pdata$setAllCpuIds DD imagerel $LN17
	DD	imagerel $LN17+434
	DD	imagerel $unwind$setAllCpuIds
$pdata$setAllCpuIds_lock DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$setAllCpuIds_lock
$pdata$setCpuIdregs DD imagerel $LN24
	DD	imagerel $LN24+728
	DD	imagerel $unwind$setCpuIdregs
$pdata$setCpuId DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$setCpuId
$pdata$resetAllCpuIds DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$resetAllCpuIds
$pdata$setOperationMode DD imagerel $LN7
	DD	imagerel $LN7+135
	DD	imagerel $unwind$setOperationMode
$pdata$enable_lparmode DD imagerel $LN5
	DD	imagerel $LN5+539
	DD	imagerel $unwind$enable_lparmode
$pdata$Interrupt_Lock_Obtained DD imagerel Interrupt_Lock_Obtained
	DD	imagerel Interrupt_Lock_Obtained+269
	DD	imagerel $unwind$Interrupt_Lock_Obtained
$pdata$Obtain_Interrupt_Lock DD imagerel Obtain_Interrupt_Lock
	DD	imagerel Obtain_Interrupt_Lock+88
	DD	imagerel $unwind$Obtain_Interrupt_Lock
$pdata$Try_Obtain_Interrupt_Lock DD imagerel Try_Obtain_Interrupt_Lock
	DD	imagerel Try_Obtain_Interrupt_Lock+132
	DD	imagerel $unwind$Try_Obtain_Interrupt_Lock
$pdata$Release_Interrupt_Lock DD imagerel Release_Interrupt_Lock
	DD	imagerel Release_Interrupt_Lock+71
	DD	imagerel $unwind$Release_Interrupt_Lock
$pdata$s370_archdep_pr_cmd DD imagerel $LN7
	DD	imagerel $LN7+553
	DD	imagerel $unwind$s370_archdep_pr_cmd
$pdata$s390_archdep_pr_cmd DD imagerel $LN7
	DD	imagerel $LN7+553
	DD	imagerel $unwind$s390_archdep_pr_cmd
$pdata$z900_archdep_pr_cmd DD imagerel $LN7
	DD	imagerel $LN7+556
	DD	imagerel $unwind$z900_archdep_pr_cmd
$pdata$devnotfound_msg DD imagerel devnotfound_msg
	DD	imagerel devnotfound_msg+129
	DD	imagerel $unwind$devnotfound_msg
$pdata$missing_devnum DD imagerel missing_devnum
	DD	imagerel missing_devnum+80
	DD	imagerel $unwind$missing_devnum
$pdata$aea_mode_str DD imagerel aea_mode_str
	DD	imagerel aea_mode_str+67
	DD	imagerel $unwind$aea_mode_str
$pdata$report_aea DD imagerel report_aea
	DD	imagerel report_aea+1858
	DD	imagerel $unwind$report_aea
$pdata$aea_cmd DD imagerel $LN14
	DD	imagerel $LN14+546
	DD	imagerel $unwind$aea_cmd
$pdata$traceopt_cmd DD imagerel $LN37
	DD	imagerel $LN37+1509
	DD	imagerel $unwind$traceopt_cmd
$pdata$tlb_cmd DD imagerel $LN52
	DD	imagerel $LN52+3432
	DD	imagerel $unwind$tlb_cmd
$pdata$ar_cmd DD imagerel $LN13
	DD	imagerel $LN13+625
	DD	imagerel $unwind$ar_cmd
$pdata$pr_cmd DD imagerel $LN16
	DD	imagerel $LN16+481
	DD	imagerel $unwind$pr_cmd
$pdata$psw_cmd DD imagerel $LN91
	DD	imagerel $LN91+4015
	DD	imagerel $unwind$psw_cmd
$pdata$abs_or_r_cmd DD imagerel $LN10
	DD	imagerel $LN10+423
	DD	imagerel $unwind$abs_or_r_cmd
$pdata$u_cmd DD	imagerel $LN10
	DD	imagerel $LN10+434
	DD	imagerel $unwind$u_cmd
$pdata$v_cmd DD	imagerel $LN10
	DD	imagerel $LN10+434
	DD	imagerel $unwind$v_cmd
$pdata$tf_cmd DD imagerel $LN150
	DD	imagerel $LN150+5018
	DD	imagerel $unwind$tf_cmd
$pdata$trace_cmd DD imagerel $LN146
	DD	imagerel $LN146+5305
	DD	imagerel $unwind$trace_cmd
$pdata$txf_cmd DD imagerel $LN128
	DD	imagerel $LN128+6303
	DD	imagerel $unwind$txf_cmd
$pdata$auto_trace_cmd DD imagerel $LN16
	DD	imagerel $LN16+869
	DD	imagerel $unwind$auto_trace_cmd
$pdata$ipending_cmd DD imagerel $LN163
	DD	imagerel $LN163+15942
	DD	imagerel $unwind$ipending_cmd
$pdata$bear_cmd DD imagerel $LN16
	DD	imagerel $LN16+1273
	DD	imagerel $unwind$bear_cmd
$pdata$gpr_cmd DD imagerel $LN13
	DD	imagerel $LN13+1154
	DD	imagerel $unwind$gpr_cmd
$pdata$fpr_cmd DD imagerel $LN17
	DD	imagerel $LN17+1285
	DD	imagerel $unwind$fpr_cmd
$pdata$fpc_cmd DD imagerel $LN11
	DD	imagerel $LN11+952
	DD	imagerel $unwind$fpc_cmd
$pdata$cr_cmd DD imagerel $LN12
	DD	imagerel $LN12+974
	DD	imagerel $unwind$cr_cmd
$pdata$i_cmd DD	imagerel $LN16
	DD	imagerel $LN16+894
	DD	imagerel $unwind$i_cmd
pdata	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
_DATA	SEGMENT
	ORG $+3
$SG159066 DB	'%llx', 00H
	ORG $+3
$SG159068 DB	'E', 00H
	ORG $+2
$SG159069 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG159074 DB	'E', 00H
	ORG $+2
$SG159070 DB	's370_archdep_pr_cmd', 00H
$SG159079 DB	'I', 00H
	ORG $+2
$SG159071 DB	'hscemode.c', 00H
	ORG $+1
$SG159100 DB	'E', 00H
	ORG $+2
$SG159073 DB	'A:%16.16llX  Addressing exception', 00H
	ORG $+2
$SG159106 DB	'E', 00H
	ORG $+2
$SG159075 DB	'HHC02290%s %s', 0aH, 00H
	ORG $+1
$SG159076 DB	's370_archdep_pr_cmd', 00H
$SG159111 DB	'I', 00H
	ORG $+2
$SG159077 DB	'hscemode.c', 00H
	ORG $+1
$SG159132 DB	'E', 00H
	ORG $+2
$SG159078 DB	'%16.16llX', 00H
	ORG $+2
$SG159138 DB	'E', 00H
	ORG $+2
$SG159080 DB	'HHC02277%s Prefix register: %s', 0aH, 00H
$SG159081 DB	's370_archdep_pr_cmd', 00H
$SG159143 DB	'I', 00H
	ORG $+2
$SG159082 DB	'hscemode.c', 00H
	ORG $+1
$SG159098 DB	'%llx', 00H
	ORG $+3
$SG159153 DB	'E', 00H
	ORG $+2
$SG159101 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG159159 DB	'E', 00H
	ORG $+2
$SG159102 DB	's390_archdep_pr_cmd', 00H
$SG159199 DB	'I', 00H
	ORG $+2
$SG159103 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159206 DB	' %2.2X', 00H
	ORG $+1
$SG159212 DB	'I', 00H
	ORG $+2
$SG159105 DB	'A:%16.16llX  Addressing exception', 00H
	ORG $+2
$SG159210 DB	' %2.2X', 00H
	ORG $+1
$SG159225 DB	'I', 00H
	ORG $+2
$SG159107 DB	'HHC02290%s %s', 0aH, 00H
	ORG $+1
$SG159108 DB	's390_archdep_pr_cmd', 00H
$SG159230 DB	'I', 00H
	ORG $+2
$SG159109 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159219 DB	' %2.2X', 00H
	ORG $+1
$SG159235 DB	'I', 00H
	ORG $+2
$SG159110 DB	'%16.16llX', 00H
	ORG $+2
$SG159223 DB	' %2.2X', 00H
	ORG $+1
$SG159240 DB	'I', 00H
	ORG $+2
$SG159112 DB	'HHC02277%s Prefix register: %s', 0aH, 00H
$SG159113 DB	's390_archdep_pr_cmd', 00H
$SG159245 DB	'I', 00H
	ORG $+2
$SG159114 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159130 DB	'%llx', 00H
	ORG $+3
$SG159251 DB	'I', 00H
	ORG $+2
$SG159133 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG159277 DB	'online', 00H
	ORG $+1
$SG159278 DB	'E', 00H
	ORG $+2
$SG159134 DB	'z900_archdep_pr_cmd', 00H
$SG159284 DB	'I', 00H
	ORG $+2
$SG159135 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159313 DB	'E', 00H
	ORG $+2
$SG159137 DB	'A:%16.16llX  Addressing exception', 00H
	ORG $+2
$SG159321 DB	'NOREGS', 00H
	ORG $+1
$SG159325 DB	'I', 00H
	ORG $+2
$SG159139 DB	'HHC02290%s %s', 0aH, 00H
	ORG $+1
$SG159140 DB	'z900_archdep_pr_cmd', 00H
$SG159341 DB	'E', 00H
	ORG $+2
$SG159141 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159337 DB	'NOREGS', 00H
	ORG $+1
$SG159352 DB	'I', 00H
	ORG $+2
$SG159142 DB	'%16.16llX', 00H
	ORG $+2
$SG159348 DB	'NOREGS', 00H
	ORG $+1
$SG159380 DB	'E', 00H
	ORG $+2
$SG159144 DB	'HHC02277%s Prefix register: %s', 0aH, 00H
$SG159145 DB	'z900_archdep_pr_cmd', 00H
$SG159385 DB	'I', 00H
	ORG $+2
$SG159146 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159379 DB	'online', 00H
	ORG $+1
$SG159392 DB	'I', 00H
	ORG $+2
$SG159154 DB	'HHC02200%s %1d:%04X device not found', 0aH, 00H
	ORG $+2
$SG159155 DB	'devnotfound_msg', 00H
$SG159156 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159443 DB	'online', 00H
	ORG $+1
$SG159444 DB	'W', 00H
	ORG $+2
$SG159160 DB	'HHC02201%s Device number missing', 0aH, 00H
	ORG $+2
$SG159449 DB	'I', 00H
	ORG $+2
$SG159161 DB	'missing_devnum', 00H
	ORG $+1
$SG159162 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159198 DB	'aea mode   %s', 00H
	ORG $+2
$SG159200 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159207 DB	' %2d', 00H
	ORG $+3
?name@?1??aea_mode_str@@9@9 DQ FLAT:$SG159169		; `aea_mode_str'::`2'::name
	DQ	FLAT:$SG159170
	DQ	FLAT:$SG159171
	DQ	FLAT:$SG159172
	DQ	FLAT:$SG159173
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG159174
	DQ	FLAT:$SG159175
	DQ	FLAT:$SG159176
	DQ	FLAT:$SG159177
	DQ	FLAT:$SG159178
$SG159201 DB	'report_aea', 00H
	ORG $+1
$SG159454 DB	'I', 00H
	ORG $+2
$SG159202 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159458 DB	'*', 00H
	ORG $+2
$SG159203 DB	'aea ar    ', 00H
	ORG $+1
$SG159211 DB	' %2d', 00H
	ORG $+3
$SG159391 DB	'SIE: ', 00H
	ORG $+2
$SG159459 DB	' ', 00H
	ORG $+2
$SG159213 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159214 DB	'report_aea', 00H
	ORG $+1
$SG159461 DB	'I', 00H
	ORG $+2
$SG159215 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159466 DB	'I', 00H
	ORG $+2
$SG159216 DB	'aea common            ', 00H
	ORG $+1
$SG159220 DB	' %2d', 00H
	ORG $+3
$SG159224 DB	' %2d', 00H
	ORG $+3
$SG159226 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159227 DB	'report_aea', 00H
	ORG $+1
$SG159472 DB	'I', 00H
	ORG $+2
$SG159228 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159477 DB	'I', 00H
	ORG $+2
$SG159229 DB	'aea cr[1]  %16.16llX', 00H
	ORG $+3
$SG159231 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159232 DB	'report_aea', 00H
	ORG $+1
$SG159481 DB	'*', 00H
	ORG $+2
$SG159233 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159482 DB	' ', 00H
	ORG $+2
$SG159234 DB	'    cr[7]  %16.16llX', 00H
	ORG $+3
$SG159236 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159237 DB	'report_aea', 00H
	ORG $+1
$SG159484 DB	'I', 00H
	ORG $+2
$SG159238 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159489 DB	'I', 00H
	ORG $+2
$SG159239 DB	'    cr[13] %16.16llX', 00H
	ORG $+3
$SG159241 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159242 DB	'report_aea', 00H
	ORG $+1
$SG159518 DB	'W', 00H
	ORG $+2
$SG159243 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159517 DB	'online', 00H
	ORG $+1
$SG159524 DB	'I', 00H
	ORG $+2
$SG159244 DB	'    cr[r]  %16.16llX', 00H
	ORG $+3
$SG159246 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159247 DB	'report_aea', 00H
	ORG $+1
$SG159528 DB	'%s', 00H
	ORG $+1
$SG159248 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159520 DB	'ar_cmd', 00H
	ORG $+1
$SG159556 DB	'W', 00H
	ORG $+2
$SG159250 DB	'    alb[%d] %16.16llX', 00H
	ORG $+2
$SG159252 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159253 DB	'report_aea', 00H
	ORG $+1
$SG159631 DB	'W', 00H
	ORG $+2
$SG159254 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159526 DB	'ar_cmd', 00H
	ORG $+1
$SG159637 DB	'sm=', 00H
$SG159274 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:217', 00H
	ORG $+2
$SG159276 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:221', 00H
	ORG $+2
$SG159279 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG159529 DB	'ar_cmd', 00H
	ORG $+1
$SG159643 DB	'pk=', 00H
$SG159280 DB	'aea_cmd', 00H
$SG159281 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159555 DB	'online', 00H
	ORG $+1
$SG159655 DB	'as=', 00H
$SG159283 DB	'aea SIE', 00H
$SG159285 DB	'HHC02282%s %s', 0aH, 00H
	ORG $+1
$SG159286 DB	'aea_cmd', 00H
$SG159287 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159558 DB	'pr_cmd', 00H
	ORG $+1
$SG159658 DB	'pri', 00H
$SG159288 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:239', 00H
	ORG $+2
$SG159324 DB	'%s%s', 00H
	ORG $+3
$SG159314 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG159630 DB	'online', 00H
	ORG $+1
$SG159661 DB	'ar', 00H
	ORG $+1
$SG159315 DB	'traceopt_cmd', 00H
	ORG $+3
$SG159316 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159664 DB	'sec', 00H
$SG159319 DB	' NOCH9OFLOW', 00H
$SG159671 DB	'cc=', 00H
$SG159322 DB	'REGSFIRST', 00H
	ORG $+2
$SG159677 DB	'pm=', 00H
$SG159323 DB	'TRADITIONAL', 00H
$SG159683 DB	'am=', 00H
$SG159326 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG159327 DB	'traceopt_cmd', 00H
	ORG $+3
$SG159328 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159686 DB	'24', 00H
	ORG $+1
$SG159331 DB	'TRADITIONAL', 00H
$SG159689 DB	'31', 00H
	ORG $+1
$SG159334 DB	'REGSFIRST', 00H
	ORG $+2
$SG159693 DB	'64', 00H
	ORG $+1
$SG159340 DB	'NOCH9OFLOW', 00H
	ORG $+1
$SG159696 DB	'ia=', 00H
$SG159342 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG159343 DB	'traceopt_cmd', 00H
	ORG $+3
$SG159344 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159699 DB	'%llx%c', 00H
	ORG $+1
$SG159702 DB	'E', 00H
	ORG $+2
$SG159346 DB	' NOCH9OFLOW', 00H
$SG159719 DB	'I', 00H
	ORG $+2
$SG159349 DB	'REGSFIRST', 00H
	ORG $+2
$SG159723 DB	'24', 00H
	ORG $+1
$SG159350 DB	'TRADITIONAL', 00H
$SG159351 DB	'%s%s', 00H
	ORG $+3
$SG159649 DB	'cmwp=', 00H
	ORG $+2
$SG159724 DB	'31', 00H
	ORG $+1
$SG159353 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG159725 DB	'64', 00H
	ORG $+1
$SG159354 DB	'traceopt_cmd', 00H
	ORG $+3
$SG159355 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159726 DB	'???', 00H
$SG159376 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:338', 00H
	ORG $+2
$SG159378 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:345', 00H
	ORG $+2
$SG159381 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG159727 DB	'pri', 00H
$SG159382 DB	'aia_cmd', 00H
$SG159383 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159728 DB	'ar', 00H
	ORG $+1
$SG159384 DB	'AIV %16.16llx aip %p ip %p aie %p', 00H
	ORG $+2
$SG159729 DB	'sec', 00H
$SG159386 DB	'HHC02283%s %s', 0aH, 00H
	ORG $+1
$SG159387 DB	'aia_cmd', 00H
$SG159388 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159731 DB	'???', 00H
$SG159390 DB	'AIV %16.16llx aip %p ip %p aie %p', 00H
	ORG $+2
$SG159732 DB	'I', 00H
	ORG $+2
$SG159393 DB	'HHC02283%s %s', 0aH, 00H
	ORG $+1
$SG159394 DB	'aia_cmd', 00H
$SG159395 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159764 DB	'online', 00H
	ORG $+1
$SG159765 DB	'W', 00H
	ORG $+2
$SG159396 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:387', 00H
	ORG $+2
$SG159440 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:420', 00H
	ORG $+2
$SG159442 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:424', 00H
	ORG $+2
$SG159445 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG159789 DB	'online', 00H
	ORG $+1
$SG159790 DB	'W', 00H
	ORG $+2
$SG159446 DB	'tlb_cmd', 00H
$SG159447 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159814 DB	'online', 00H
	ORG $+1
$SG159815 DB	'W', 00H
	ORG $+2
$SG159448 DB	'tlbID 0x%6.6X mainstor %p', 00H
	ORG $+2
$SG159933 DB	'"', 00H
	ORG $+2
$SG159450 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159451 DB	'tlb_cmd', 00H
$SG159452 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159453 DB	'  ix              asd            vaddr              pte '
	DB	'  id c p r w ky     main', 00H
	ORG $+3
$SG159792 DB	'u_cmd', 00H
	ORG $+2
$SG159936 DB	'E', 00H
	ORG $+2
$SG159455 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159456 DB	'tlb_cmd', 00H
$SG159457 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159462 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159463 DB	'tlb_cmd', 00H
$SG159460 DB	'%s%3.3X %16.16llX %16.16llX %16.16llX %4.4X %1d %1d %1d '
	DB	'%1d %2.2X %8.8X', 00H
$SG159464 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159938 DB	'tf_cmd', 00H
	ORG $+1
$SG159944 DB	'ON', 00H
	ORG $+1
$SG159465 DB	'%d tlbID matches', 00H
	ORG $+3
$SG159817 DB	'v_cmd', 00H
	ORG $+2
$SG159949 DB	'OFF', 00H
$SG159467 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159468 DB	'tlb_cmd', 00H
$SG159469 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159954 DB	'NOSTOP', 00H
	ORG $+1
$SG159977 DB	'E', 00H
	ORG $+2
$SG159471 DB	'SIE: tlbID 0x%4.4x mainstor %p', 00H
	ORG $+1
$SG159473 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159474 DB	'tlb_cmd', 00H
$SG159475 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159478 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159479 DB	'tlb_cmd', 00H
$SG159476 DB	'  ix              asd            vaddr              pte '
	DB	'  id c p r w ky       main', 00H
	ORG $+1
$SG159992 DB	'wb', 00H
	ORG $+1
$SG159480 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159485 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159486 DB	'tlb_cmd', 00H
$SG159483 DB	'%s%3.3X %16.16llX %16.16llX %16.16llX %4.4X %1d %1d %1d '
	DB	'%1d %2.2X %8.8X', 00H
$SG159487 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159960 DB	'NOCONT', 00H
	ORG $+1
$SG159993 DB	'E', 00H
	ORG $+2
$SG159488 DB	'SIE: %d tlbID matches', 00H
	ORG $+2
$SG159490 DB	'HHC02284%s %s', 0aH, 00H
	ORG $+1
$SG159491 DB	'tlb_cmd', 00H
$SG159492 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159966 DB	'tf_cmd', 00H
	ORG $+1
$SG160003 DB	'E', 00H
	ORG $+2
$SG159493 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:489', 00H
	ORG $+2
$SG159514 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:524', 00H
	ORG $+2
$SG159516 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:528', 00H
	ORG $+2
$SG159519 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG159970 DB	'tf_cmd', 00H
	ORG $+1
$SG160020 DB	'E', 00H
	ORG $+2
$SG159521 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159975 DB	'(null)', 00H
	ORG $+1
$SG160039 DB	'E', 00H
	ORG $+2
$SG159522 DB	'HHC02272I ', 00H
	ORG $+1
$SG160044 DB	'0', 00H
	ORG $+2
$SG159523 DB	'Access registers', 00H
	ORG $+3
$SG159950 DB	'CLOSE', 00H
	ORG $+2
$SG159979 DB	'tf_cmd', 00H
	ORG $+1
$SG160045 DB	'MAX', 00H
$SG159525 DB	'HHC02272%s %s', 0aH, 00H
	ORG $+1
$SG159527 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159983 DB	'tf_cmd', 00H
	ORG $+1
$SG160046 DB	'E', 00H
	ORG $+2
$SG159530 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159987 DB	'tf_cmd', 00H
	ORG $+1
$SG160067 DB	'E', 00H
	ORG $+2
$SG159531 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:538', 00H
	ORG $+2
$SG159557 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG159995 DB	'tf_cmd', 00H
	ORG $+1
$SG160086 DB	'wb', 00H
	ORG $+1
$SG159559 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160005 DB	'tf_cmd', 00H
	ORG $+1
$SG160087 DB	'E', 00H
	ORG $+2
$SG159560 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:565', 00H
	ORG $+2
$SG159565 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:584', 00H
	ORG $+2
$SG159627 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:614', 00H
	ORG $+2
$SG159629 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:618', 00H
	ORG $+2
$SG159632 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG160009 DB	'tf_cmd', 00H
	ORG $+1
$SG160111 DB	'"', 00H
	ORG $+2
$SG159633 DB	'psw_cmd', 00H
$SG159634 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159640 DB	'%x%c', 00H
	ORG $+3
$SG159646 DB	'%d%c', 00H
	ORG $+3
$SG159652 DB	'%x%c', 00H
	ORG $+3
$SG159667 DB	'home', 00H
	ORG $+3
$SG159674 DB	'%d%c', 00H
	ORG $+3
$SG159680 DB	'%x%c', 00H
	ORG $+3
$SG159963 DB	'FILE=', 00H
	ORG $+2
$SG160013 DB	'tf_cmd', 00H
	ORG $+1
$SG160113 DB	'NO', 00H
	ORG $+1
$SG159703 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG160022 DB	'tf_cmd', 00H
	ORG $+1
$SG160115 DB	'ON', 00H
	ORG $+1
$SG159704 DB	'psw_cmd', 00H
$SG159705 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160026 DB	'tf_cmd', 00H
	ORG $+1
$SG160116 DB	'OFF', 00H
$SG159706 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:721', 00H
	ORG $+2
$SG159720 DB	'HHC02278%s Program status word: %s', 0aH, 00H
$SG160120 DB	'I', 00H
	ORG $+2
$SG159721 DB	'psw_cmd', 00H
$SG159722 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159730 DB	'home', 00H
	ORG $+7
$SG159733 DB	'HHC02300%s sm=%2.2X pk=%d cmwp=%X as=%s cc=%d pm=%X am=%'
	DB	's ia=%llX', 0aH, 00H
	ORG $+1
$SG160124 DB	'I', 00H
	ORG $+2
$SG159734 DB	'psw_cmd', 00H
$SG159735 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160030 DB	'tf_cmd', 00H
	ORG $+1
$SG160131 DB	'I', 00H
	ORG $+2
$SG159744 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:823', 00H
	ORG $+2
$SG159761 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:839', 00H
	ORG $+2
$SG159763 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:843', 00H
	ORG $+2
$SG159766 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG160037 DB	'(null)', 00H
	ORG $+1
$SG160218 DB	'E', 00H
	ORG $+2
$SG159767 DB	'abs_or_r_cmd', 00H
	ORG $+3
$SG159768 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160041 DB	'tf_cmd', 00H
	ORG $+1
$SG160244 DB	'E', 00H
	ORG $+2
$SG159769 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:851', 00H
	ORG $+2
$SG159786 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:867', 00H
	ORG $+2
$SG159788 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:871', 00H
	ORG $+2
$SG159791 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG160048 DB	'tf_cmd', 00H
	ORG $+1
$SG160253 DB	'E', 00H
	ORG $+2
$SG159793 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160052 DB	'tf_cmd', 00H
	ORG $+1
$SG160273 DB	'I', 00H
	ORG $+2
$SG159794 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:879', 00H
	ORG $+2
$SG159811 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:895', 00H
	ORG $+2
$SG159813 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:899', 00H
	ORG $+2
$SG159816 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG160056 DB	'tf_cmd', 00H
	ORG $+1
$SG160286 DB	'on', 00H
	ORG $+1
$SG159818 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160069 DB	'tf_cmd', 00H
	ORG $+1
$SG160287 DB	'off', 00H
$SG159819 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:907', 00H
	ORG $+2
$SG159937 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG160074 DB	'tf_cmd', 00H
	ORG $+1
$SG160292 DB	'I', 00H
	ORG $+2
$SG159939 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159945 DB	'OPEN', 00H
	ORG $+3
$SG159955 DB	'CONT', 00H
	ORG $+3
$SG159959 DB	'STOP', 00H
	ORG $+3
$SG160078 DB	'tf_cmd', 00H
	ORG $+1
$SG160320 DB	'I', 00H
	ORG $+2
$SG159967 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159968 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159971 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG159976 DB	'FILE', 00H
	ORG $+7
$SG159972 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159978 DB	'HHC02380%s Invalid %s= value: %s', 0aH, 00H
	ORG $+2
$SG160089 DB	'tf_cmd', 00H
	ORG $+1
$SG160332 DB	'I', 00H
	ORG $+2
$SG159980 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160094 DB	'tf_cmd', 00H
	ORG $+1
$SG160398 DB	'0', 00H
	ORG $+2
$SG159984 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159985 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159988 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG159994 DB	'HHC02377%s Trace file open error %s: "%s"', 0aH, 00H
	ORG $+1
$SG159999 DB	'MAX=', 00H
	ORG $+7
$SG159989 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159996 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160098 DB	'tf_cmd', 00H
	ORG $+1
$SG160406 DB	'U', 00H
	ORG $+2
$SG160004 DB	'HHC02378%s Invalid MAX= value: %s', 0aH, 00H
	ORG $+1
$SG160409 DB	'C', 00H
	ORG $+2
$SG160006 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160122 DB	'tf_cmd', 00H
	ORG $+1
$SG160418 DB	'BAD', 00H
$SG160010 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160011 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160014 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160038 DB	'FILE', 00H
	ORG $+7
$SG160015 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160040 DB	'HHC02380%s Invalid %s= value: %s', 0aH, 00H
	ORG $+6
$SG160021 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG160126 DB	'tf_cmd', 00H
	ORG $+1
$SG160427 DB	'TDB', 00H
$SG160023 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160133 DB	'tf_cmd', 00H
	ORG $+1
$SG160436 DB	'WHY', 00H
$SG160027 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160047 DB	'HHC02380%s Invalid %s= value: %s', 0aH, 00H
	ORG $+6
$SG160028 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160031 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160062 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1085', 00H
	ORG $+1
$SG160125 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG160032 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160042 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160440 DB	'TAC', 00H
$SG160049 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160443 DB	'TND', 00H
$SG160053 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160066 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1095', 00H
	ORG $+1
$SG160132 DB	'HHC02381%s File closed, tracing %s', 0aH, 00H
	ORG $+4
$SG160054 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160057 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160071 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1099', 00H
	ORG $+1
$SG160245 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG160058 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160068 DB	'HHC00152%s Out of memory', 0aH, 00H
	ORG $+2
$SG160446 DB	'CPU', 00H
$SG160070 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160464 DB	'E', 00H
	ORG $+2
$SG160075 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160088 DB	'HHC02377%s Trace file open error %s: "%s"', 0aH, 00H
	ORG $+5
$SG160091 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1129', 00H
	ORG $+1
$SG160254 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG160076 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160079 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160105 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1167', 00H
	ORG $+1
$SG160274 DB	'HHC02373%s Automatic tracing disabled', 0aH, 00H
	ORG $+1
$SG160080 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160090 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160481 DB	'LINES ', 00H
	ORG $+1
$SG160491 DB	'C ', 00H
	ORG $+1
$SG160095 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160096 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160099 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160117 DB	'%s MAX=%d%c %sSTOP %sFILE=%s%s', 00H
	ORG $+1
$SG160283 DB	' range %llx%c%llx', 00H
	ORG $+6
$SG160100 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160121 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG160493 DB	'U ', 00H
	ORG $+1
$SG160123 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160483 DB	'PAGES ', 00H
	ORG $+1
$SG160502 DB	'I', 00H
	ORG $+2
$SG160127 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160495 DB	'INSTR ', 00H
	ORG $+1
$SG160506 DB	'I', 00H
	ORG $+2
$SG160130 DB	'auto-stopped', 00H
	ORG $+3
$SG160134 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160238 DB	'%llx%c%llx%c', 00H
	ORG $+3
$SG160257 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1372', 00H
	ORG $+1
$SG160285 DB	' asid x''%4.4hx''', 00H
$SG160288 DB	'tracing', 00H
$SG160219 DB	'HHC02211%s Invalid argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG160220 DB	'trace_cmd', 00H
	ORG $+2
$SG160498 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG160513 DB	'I', 00H
	ORG $+2
$SG160221 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160517 DB	'I', 00H
	ORG $+2
$SG160228 DB	'trace_cmd', 00H
	ORG $+2
$SG160521 DB	'I', 00H
	ORG $+2
$SG160229 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160280 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1446', 00H
	ORG $+1
$SG160290 DB	'break', 00H
	ORG $+2
$SG160230 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160232 DB	'trace_cmd', 00H
	ORG $+2
$SG160525 DB	'I', 00H
	ORG $+2
$SG160233 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160291 DB	'(ERR)', 00H
	ORG $+6
$SG160234 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160246 DB	'trace_cmd', 00H
	ORG $+2
$SG160529 DB	'I', 00H
	ORG $+2
$SG160247 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160543 DB	'I', 00H
	ORG $+2
$SG160255 DB	'trace_cmd', 00H
	ORG $+2
$SG160547 DB	'I', 00H
	ORG $+2
$SG160256 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160551 DB	'I', 00H
	ORG $+2
$SG160275 DB	'trace_cmd', 00H
	ORG $+2
$SG160578 DB	'%llu%c', 00H
	ORG $+1
$SG160580 DB	'E', 00H
	ORG $+2
$SG160276 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160579 DB	'%llu%c', 00H
	ORG $+1
$SG160586 DB	'E', 00H
	ORG $+2
$SG160289 DB	'stepping', 00H
	ORG $+3
$SG160393 DB	'STATS', 00H
	ORG $+2
$SG160595 DB	'I', 00H
	ORG $+2
$SG160293 DB	'HHC02229%s Instruction %s %s%s%s', 0aH, 00H
	ORG $+2
$SG160601 DB	'I', 00H
	ORG $+2
$SG160294 DB	'trace_cmd', 00H
	ORG $+2
$SG160605 DB	'I', 00H
	ORG $+2
$SG160295 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160298 DB	'-t+-', 00H
	ORG $+3
$SG160300 DB	'-txf', 00H
	ORG $+3
$SG160403 DB	'INSTR', 00H
	ORG $+2
$SG160702 DB	'I', 00H
	ORG $+2
$SG160302 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1486', 00H
	ORG $+1
$SG160308 DB	'trace_cmd', 00H
	ORG $+2
$SG160706 DB	'I', 00H
	ORG $+2
$SG160309 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160310 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160312 DB	'trace_cmd', 00H
	ORG $+2
$SG160710 DB	'I', 00H
	ORG $+2
$SG160313 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160318 DB	'CPU %s%02X', 00H
	ORG $+5
$SG160319 DB	'instruction ', 00H
	ORG $+3
$SG160321 DB	'HHC02382%s %stracing active for %s', 0aH, 00H
	ORG $+4
$SG160314 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160322 DB	'trace_cmd', 00H
	ORG $+2
$SG160716 DB	'I', 00H
	ORG $+2
$SG160323 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160325 DB	'ORB ', 00H
	ORG $+3
$SG160327 DB	'CCW ', 00H
	ORG $+3
$SG160329 DB	'CKD ', 00H
	ORG $+3
$SG160430 DB	'PAGES', 00H
	ORG $+2
$SG160722 DB	'I', 00H
	ORG $+2
$SG160331 DB	'device %1d:%04X', 00H
$SG160333 DB	'HHC02382%s %stracing active for %s', 0aH, 00H
$SG160728 DB	'I', 00H
	ORG $+2
$SG160334 DB	'trace_cmd', 00H
	ORG $+2
$SG160734 DB	'I', 00H
	ORG $+2
$SG160335 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160740 DB	'I', 00H
	ORG $+2
$SG160337 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1551', 00H
	ORG $+1
$SG160412 DB	'GOOD', 00H
	ORG $+3
$SG160415 DB	'SUCCESS', 00H
$SG160421 DB	'FAILURE', 00H
$SG160424 DB	'FAIL', 00H
	ORG $+3
$SG160433 DB	'LINES', 00H
	ORG $+2
$SG160437 DB	'%x%c', 00H
	ORG $+3
$SG160449 DB	'FAILS', 00H
	ORG $+2
$SG160466 DB	'txf_cmd', 00H
$SG160465 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG160746 DB	'I', 00H
	ORG $+2
$SG160467 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160752 DB	'I', 00H
	ORG $+2
$SG160472 DB	'WHY 0x%8.8X ', 00H
	ORG $+3
$SG160474 DB	'TAC %d ', 00H
$SG160476 DB	'TND %d ', 00H
$SG160478 DB	'CPU %d ', 00H
$SG160480 DB	'FAILS %d ', 00H
	ORG $+2
$SG160485 DB	'TDB ', 00H
	ORG $+3
$SG160487 DB	'BAD ', 00H
	ORG $+3
$SG160489 DB	'GOOD ', 00H
	ORG $+2
$SG160758 DB	'I', 00H
	ORG $+2
$SG160497 DB	'%s%s%s%s%s%s%s%s%s%s%s%s%s', 00H
	ORG $+1
$SG160764 DB	'I', 00H
	ORG $+2
$SG160503 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG160770 DB	'I', 00H
	ORG $+2
$SG160504 DB	'txf_cmd', 00H
$SG160505 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160774 DB	'yes', 00H
$SG160507 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG160508 DB	'txf_cmd', 00H
$SG160509 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160775 DB	'no', 00H
	ORG $+1
$SG160511 DB	'CONSTRAINED', 00H
$SG160776 DB	'I', 00H
	ORG $+2
$SG160512 DB	'UNconstrained', 00H
	ORG $+2
$SG160514 DB	'HHC17730%s Total %s Transactions =%12llu', 0aH, 00H
	ORG $+2
$SG160780 DB	'yes', 00H
$SG160515 DB	'txf_cmd', 00H
$SG160516 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160781 DB	'no', 00H
	ORG $+1
$SG160518 DB	'HHC17731%s Retries for ANY/ALL reason(s):', 0aH, 00H
	ORG $+1
$SG160782 DB	'I', 00H
	ORG $+2
$SG160519 DB	'txf_cmd', 00H
$SG160520 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160786 DB	'yes', 00H
$SG160522 DB	'HHC17732%s %1d%cretries =%12llu  (%4.1f%%)', 0aH, 00H
$SG160787 DB	'no', 00H
	ORG $+1
$SG160523 DB	'txf_cmd', 00H
$SG160524 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160788 DB	'I', 00H
	ORG $+2
$SG160526 DB	'HHC17732%s %1d%cretries =%12llu  (%4.1f%%)', 0aH, 00H
$SG160794 DB	'I', 00H
	ORG $+2
$SG160527 DB	'txf_cmd', 00H
$SG160528 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160803 DB	'I', 00H
	ORG $+2
$SG160530 DB	'HHC17733%s MAXIMUM   =%12llu', 0aH, 00H
	ORG $+2
$SG160531 DB	'txf_cmd', 00H
$SG160532 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160807 DB	'I', 00H
	ORG $+2
$SG160535 DB	'txf_cmd', 00H
$SG160536 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160537 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160539 DB	'txf_cmd', 00H
$SG160540 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160541 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160544 DB	'HHC17734%s %12llu  (%4.1f%%)  Retries due to TAC %3d %s', 0aH
	DB	00H
	ORG $+3
$SG160802 DB	'%4.4X', 00H
	ORG $+2
$SG160811 DB	'I', 00H
	ORG $+2
$SG160545 DB	'txf_cmd', 00H
$SG160546 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160815 DB	'I', 00H
	ORG $+2
$SG160548 DB	'HHC17734%s %12llu  (%4.1f%%)  Retries due to TAC %3d %s', 0aH
	DB	00H
	ORG $+3
$SG160823 DB	'I', 00H
	ORG $+2
$SG160549 DB	'txf_cmd', 00H
$SG160550 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160828 DB	'IE', 00H
	ORG $+1
$SG160552 DB	'HHC17735%s %12llu  (%4.1f%%)  Retries due to other TAC', 0aH
	DB	00H
$SG160553 DB	'txf_cmd', 00H
$SG160554 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160576 DB	'BEG=', 00H
	ORG $+3
$SG160577 DB	'AMT=', 00H
	ORG $+7
$SG160581 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG160829 DB	'I', 00H
	ORG $+2
$SG160582 DB	'auto_trace_cmd', 00H
	ORG $+1
$SG160583 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160588 DB	'auto_trace_cmd', 00H
	ORG $+1
$SG160602 DB	'HHC02375%s Automatic tracing is active', 0aH, 00H
$SG160587 DB	'HHC02376%s Automatic tracing value(s) must be greater th'
	DB	'an zero', 0aH, 00H
	ORG $+3
$SG160835 DB	'IE', 00H
	ORG $+1
$SG160589 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160836 DB	'I', 00H
	ORG $+2
$SG160590 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1946', 00H
	ORG $+1
$SG160591 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1954', 00H
	ORG $+1
$SG160592 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:1960', 00H
	ORG $+1
$SG160596 DB	'HHC02372%s Automatic tracing not enabled', 0aH, 00H
	ORG $+2
$SG160842 DB	'IE', 00H
	ORG $+1
$SG160597 DB	'auto_trace_cmd', 00H
	ORG $+1
$SG160598 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160843 DB	'I', 00H
	ORG $+2
$SG160603 DB	'auto_trace_cmd', 00H
	ORG $+1
$SG160604 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160849 DB	'IE', 00H
	ORG $+1
$SG160606 DB	'HHC02374%s Automatic tracing enabled: BEG=%llu AMT=%llu', 0aH
	DB	00H
	ORG $+3
$SG160850 DB	'I', 00H
	ORG $+2
$SG160607 DB	'auto_trace_cmd', 00H
	ORG $+1
$SG160608 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160689 DB	'?(0)', 00H
	ORG $+3
$SG160856 DB	'IE', 00H
	ORG $+1
$SG160691 DB	'STARTED', 00H
$SG160693 DB	'STOPPING', 00H
	ORG $+3
$SG160857 DB	'I', 00H
	ORG $+2
$SG160695 DB	'STOPPED', 00H
$SG160703 DB	'HHC00820%s Processor %s%02X: offline', 0aH, 00H
	ORG $+2
$SG160704 DB	'ipending_cmd', 00H
	ORG $+3
$SG160705 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160863 DB	'IE', 00H
	ORG $+1
$SG160707 DB	'HHC00815%s Processors %s%02X through %s%02X are offline', 0aH
	DB	00H
	ORG $+3
$SG160864 DB	'I', 00H
	ORG $+2
$SG160708 DB	'ipending_cmd', 00H
	ORG $+3
$SG160709 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160712 DB	'ipending_cmd', 00H
	ORG $+3
$SG160715 DB	'not ', 00H
	ORG $+3
$SG160711 DB	'HHC00850%s Processor %s%02X: CPUint=%8.8X (State:%8.8X)&'
	DB	'(Mask:%8.8X)', 0aH, 00H
	ORG $+2
$SG160713 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160870 DB	'IE', 00H
	ORG $+1
$SG160717 DB	'HHC00851%s Processor %s%02X: interrupt %spending', 0aH, 00H
	ORG $+2
$SG160871 DB	'I', 00H
	ORG $+2
$SG160718 DB	'ipending_cmd', 00H
	ORG $+3
$SG160719 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160721 DB	'not ', 00H
	ORG $+3
$SG160877 DB	'IE', 00H
	ORG $+1
$SG160723 DB	'HHC00852%s Processor %s%02X: I/O interrupt %spending', 0aH
	DB	00H
	ORG $+2
$SG160724 DB	'ipending_cmd', 00H
	ORG $+3
$SG160725 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160727 DB	'not ', 00H
	ORG $+3
$SG160878 DB	'I', 00H
	ORG $+2
$SG160729 DB	'HHC00853%s Processor %s%02X: clock comparator %spending', 0aH
	DB	00H
	ORG $+3
$SG160884 DB	'IE', 00H
	ORG $+1
$SG160730 DB	'ipending_cmd', 00H
	ORG $+3
$SG160731 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160733 DB	'not ', 00H
	ORG $+3
$SG160885 DB	'I', 00H
	ORG $+2
$SG160735 DB	'HHC00854%s Processor %s%02X: CPU timer %spending', 0aH, 00H
	ORG $+2
$SG160891 DB	'IE', 00H
	ORG $+1
$SG160736 DB	'ipending_cmd', 00H
	ORG $+3
$SG160737 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160739 DB	'not ', 00H
	ORG $+3
$SG160892 DB	'I', 00H
	ORG $+2
$SG160741 DB	'HHC00855%s Processor %s%02X: interval timer %spending', 0aH
	DB	00H
	ORG $+1
$SG160742 DB	'ipending_cmd', 00H
	ORG $+3
$SG160743 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160745 DB	'not ', 00H
	ORG $+3
$SG160898 DB	'IE', 00H
	ORG $+1
$SG160747 DB	'HHC00856%s Processor %s%02X: ECPS vtimer %spending', 0aH
	DB	00H
$SG160899 DB	'I', 00H
	ORG $+2
$SG160748 DB	'ipending_cmd', 00H
	ORG $+3
$SG160749 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160751 DB	'not ', 00H
	ORG $+3
$SG160907 DB	'%4.4X', 00H
	ORG $+2
$SG160908 DB	'IE', 00H
	ORG $+1
$SG160753 DB	'HHC00857%s Processor %s%02X: external call %spending', 0aH
	DB	00H
	ORG $+2
$SG160754 DB	'ipending_cmd', 00H
	ORG $+3
$SG160755 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160757 DB	'not ', 00H
	ORG $+3
$SG160909 DB	'I', 00H
	ORG $+2
$SG160759 DB	'HHC00858%s Processor %s%02X: emergency signal %spending', 0aH
	DB	00H
	ORG $+3
$SG160913 DB	'IE', 00H
	ORG $+1
$SG160760 DB	'ipending_cmd', 00H
	ORG $+3
$SG160761 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160763 DB	'not ', 00H
	ORG $+7
$SG160765 DB	'HHC00859%s Processor %s%02X: machine check interrupt %sp'
	DB	'ending', 0aH, 00H
$SG160766 DB	'ipending_cmd', 00H
	ORG $+3
$SG160767 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160769 DB	'not ', 00H
	ORG $+3
$SG160914 DB	'I', 00H
	ORG $+2
$SG160771 DB	'HHC00860%s Processor %s%02X: service signal %spending', 0aH
	DB	00H
	ORG $+1
$SG160772 DB	'ipending_cmd', 00H
	ORG $+3
$SG160773 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160918 DB	'IE', 00H
	ORG $+1
$SG160777 DB	'HHC00861%s Processor %s%02X: mainlock held: %s', 0aH, 00H
$SG160778 DB	'ipending_cmd', 00H
	ORG $+3
$SG160779 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160919 DB	'I', 00H
	ORG $+2
$SG160783 DB	'HHC00862%s Processor %s%02X: intlock held: %s', 0aH, 00H
	ORG $+1
$SG160784 DB	'ipending_cmd', 00H
	ORG $+3
$SG160785 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160923 DB	'IE', 00H
	ORG $+1
$SG160789 DB	'HHC00863%s Processor %s%02X: waiting for intlock: %s', 0aH
	DB	00H
	ORG $+2
$SG160790 DB	'ipending_cmd', 00H
	ORG $+3
$SG160791 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160793 DB	'not ', 00H
	ORG $+3
$SG160924 DB	'I', 00H
	ORG $+2
$SG160795 DB	'HHC00864%s Processor %s%02X: lock %sheld', 0aH, 00H
	ORG $+2
$SG160932 DB	'IE', 00H
	ORG $+1
$SG160796 DB	'ipending_cmd', 00H
	ORG $+3
$SG160797 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160801 DB	'none', 00H
	ORG $+3
$SG160933 DB	'I', 00H
	ORG $+2
$SG160804 DB	'HHC00865%s Processor %s%02X: connected to channelset %s', 0aH
	DB	00H
	ORG $+3
$SG160940 DB	'I', 00H
	ORG $+2
$SG160805 DB	'ipending_cmd', 00H
	ORG $+3
$SG160806 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160944 DB	'I', 00H
	ORG $+2
$SG160808 DB	'HHC00866%s Processor %s%02X: state %s', 0aH, 00H
	ORG $+1
$SG160809 DB	'ipending_cmd', 00H
	ORG $+3
$SG160810 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160948 DB	'I', 00H
	ORG $+2
$SG160812 DB	'HHC00867%s Processor %s%02X: instcount %lld', 0aH, 00H
	ORG $+3
$SG160813 DB	'ipending_cmd', 00H
	ORG $+3
$SG160814 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160954 DB	'I', 00H
	ORG $+2
$SG160816 DB	'HHC00868%s Processor %s%02X: siocount %lld', 0aH, 00H
$SG160960 DB	'I', 00H
	ORG $+2
$SG160817 DB	'ipending_cmd', 00H
	ORG $+3
$SG160818 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160821 DB	'%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X'
	DB	'%2.2X%2.2X%2.2X%2.2X%2.2X', 00H
	ORG $+2
$SG160966 DB	'I', 00H
	ORG $+2
$SG160822 DB	'%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X', 00H
	ORG $+3
$SG160972 DB	'I', 00H
	ORG $+2
$SG160824 DB	'HHC00869%s Processor %s%02X: psw %s', 0aH, 00H
	ORG $+3
$SG160825 DB	'ipending_cmd', 00H
	ORG $+3
$SG160826 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160830 DB	'HHC00850%s Processor %s%02X: CPUint=%8.8X (State:%8.8X)&'
	DB	'(Mask:%8.8X)', 0aH, 00H
	ORG $+2
$SG160831 DB	'ipending_cmd', 00H
	ORG $+3
$SG160832 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160834 DB	'not ', 00H
	ORG $+3
$SG160978 DB	'I', 00H
	ORG $+2
$SG160837 DB	'HHC00851%s Processor %s%02X: interrupt %spending', 0aH, 00H
	ORG $+2
$SG160984 DB	'I', 00H
	ORG $+2
$SG160838 DB	'ipending_cmd', 00H
	ORG $+3
$SG160839 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160841 DB	'not ', 00H
	ORG $+3
$SG160995 DB	'I', 00H
	ORG $+2
$SG160844 DB	'HHC00852%s Processor %s%02X: I/O interrupt %spending', 0aH
	DB	00H
	ORG $+2
$SG160845 DB	'ipending_cmd', 00H
	ORG $+3
$SG160846 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160848 DB	'not ', 00H
	ORG $+3
$SG161001 DB	'I', 00H
	ORG $+2
$SG160851 DB	'HHC00853%s Processor %s%02X: clock comparator %spending', 0aH
	DB	00H
	ORG $+3
$SG161005 DB	'I', 00H
	ORG $+2
$SG160852 DB	'ipending_cmd', 00H
	ORG $+3
$SG160853 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160855 DB	'not ', 00H
	ORG $+3
$SG161009 DB	'I', 00H
	ORG $+2
$SG160858 DB	'HHC00854%s Processor %s%02X: CPU timer %spending', 0aH, 00H
	ORG $+2
$SG161015 DB	'(none)', 00H
	ORG $+1
$SG161023 DB	'I', 00H
	ORG $+2
$SG160859 DB	'ipending_cmd', 00H
	ORG $+3
$SG160860 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160862 DB	'not ', 00H
	ORG $+3
$SG161018 DB	'local', 00H
	ORG $+2
$SG161029 DB	'I', 00H
	ORG $+2
$SG160865 DB	'HHC00855%s Processor %s%02X: interval timer %spending', 0aH
	DB	00H
	ORG $+1
$SG160866 DB	'ipending_cmd', 00H
	ORG $+3
$SG160867 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160869 DB	'not ', 00H
	ORG $+3
$SG161019 DB	'id=%d', 00H
	ORG $+2
$SG161035 DB	'I', 00H
	ORG $+2
$SG160872 DB	'HHC00857%s Processor %s%02X: external call %spending', 0aH
	DB	00H
	ORG $+2
$SG160873 DB	'ipending_cmd', 00H
	ORG $+3
$SG160874 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160876 DB	'not ', 00H
	ORG $+3
$SG161041 DB	'I', 00H
	ORG $+2
$SG160879 DB	'HHC00858%s Processor %s%02X: emergency signal %spending', 0aH
	DB	00H
	ORG $+3
$SG161047 DB	'I', 00H
	ORG $+2
$SG160880 DB	'ipending_cmd', 00H
	ORG $+3
$SG160881 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160883 DB	'not ', 00H
	ORG $+7
$SG160887 DB	'ipending_cmd', 00H
	ORG $+3
$SG160890 DB	'not ', 00H
	ORG $+3
$SG160886 DB	'HHC00859%s Processor %s%02X: machine check interrupt %sp'
	DB	'ending', 0aH, 00H
$SG160888 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161053 DB	'I', 00H
	ORG $+2
$SG160893 DB	'HHC00860%s Processor %s%02X: service signal %spending', 0aH
	DB	00H
	ORG $+1
$SG160894 DB	'ipending_cmd', 00H
	ORG $+3
$SG160895 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160897 DB	'not ', 00H
	ORG $+3
$SG161059 DB	'I', 00H
	ORG $+2
$SG160900 DB	'HHC00864%s Processor %s%02X: lock %sheld', 0aH, 00H
	ORG $+2
$SG161066 DB	'I', 00H
	ORG $+2
$SG160901 DB	'ipending_cmd', 00H
	ORG $+3
$SG160902 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160906 DB	'none', 00H
	ORG $+3
$SG161071 DB	'I', 00H
	ORG $+2
$SG160910 DB	'HHC00865%s Processor %s%02X: connected to channelset %s', 0aH
	DB	00H
	ORG $+3
$SG161083 DB	'I', 00H
	ORG $+2
$SG160911 DB	'ipending_cmd', 00H
	ORG $+3
$SG160912 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161109 DB	'E', 00H
	ORG $+2
$SG160915 DB	'HHC00866%s Processor %s%02X: state %s', 0aH, 00H
	ORG $+1
$SG160916 DB	'ipending_cmd', 00H
	ORG $+3
$SG160917 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161116 DB	'online', 00H
	ORG $+1
$SG161117 DB	'E', 00H
	ORG $+2
$SG160920 DB	'HHC00867%s Processor %s%02X: instcount %lld', 0aH, 00H
	ORG $+3
$SG160921 DB	'ipending_cmd', 00H
	ORG $+3
$SG160922 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161124 DB	'%llx%c', 00H
	ORG $+1
$SG161127 DB	'E', 00H
	ORG $+2
$SG160925 DB	'HHC00868%s Processor %s%02X: siocount %lld', 0aH, 00H
$SG161132 DB	'I', 00H
	ORG $+2
$SG160926 DB	'ipending_cmd', 00H
	ORG $+3
$SG160927 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160930 DB	'%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X'
	DB	'%2.2X%2.2X%2.2X%2.2X%2.2X', 00H
	ORG $+2
$SG161137 DB	'I', 00H
	ORG $+2
$SG160931 DB	'%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X', 00H
	ORG $+3
$SG161165 DB	'online', 00H
	ORG $+1
$SG161166 DB	'W', 00H
	ORG $+2
$SG160934 DB	'HHC00869%s Processor %s%02X: psw %s', 0aH, 00H
	ORG $+3
$SG160935 DB	'ipending_cmd', 00H
	ORG $+3
$SG160936 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161174 DB	'E', 00H
	ORG $+2
$SG160941 DB	'HHC00820%s Processor %s%02X: offline', 0aH, 00H
	ORG $+2
$SG160942 DB	'ipending_cmd', 00H
	ORG $+3
$SG160943 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161183 DB	'E', 00H
	ORG $+2
$SG160945 DB	'HHC00815%s Processors %s%02X through %s%02X are offline', 0aH
	DB	00H
	ORG $+3
$SG161191 DB	'I', 00H
	ORG $+2
$SG160946 DB	'ipending_cmd', 00H
	ORG $+3
$SG160947 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG160949 DB	'HHC00870%s config mask %16.16llX started mask %16.16llX '
	DB	'waiting mask %16.16llX', 0aH, 00H
$SG160950 DB	'ipending_cmd', 00H
	ORG $+3
$SG160951 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161195 DB	'%s', 00H
	ORG $+1
$SG160952 DB	'sync in progress', 00H
	ORG $+3
$SG161223 DB	'online', 00H
	ORG $+1
$SG161224 DB	'W', 00H
	ORG $+2
$SG160955 DB	'HHC00871%s syncbc mask %16.16llX %s', 0aH, 00H
	ORG $+3
$SG160956 DB	'ipending_cmd', 00H
	ORG $+3
$SG160957 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160959 DB	'not ', 00H
	ORG $+3
$SG161232 DB	'E', 00H
	ORG $+2
$SG160961 DB	'HHC00872%s signaling facility %sbusy', 0aH, 00H
	ORG $+2
$SG160962 DB	'ipending_cmd', 00H
	ORG $+3
$SG160963 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160965 DB	'not ', 00H
	ORG $+3
$SG161244 DB	'E', 00H
	ORG $+2
$SG160967 DB	'HHC00873%s TOD lock %sheld', 0aH, 00H
$SG161251 DB	'I', 00H
	ORG $+2
$SG160968 DB	'ipending_cmd', 00H
	ORG $+3
$SG160969 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160971 DB	'not ', 00H
	ORG $+3
$SG161255 DB	'%s', 00H
	ORG $+1
$SG160973 DB	'HHC00874%s mainlock %sheld; owner %4.4x', 0aH, 00H
	ORG $+3
$SG161278 DB	'online', 00H
	ORG $+1
$SG161279 DB	'W', 00H
	ORG $+2
$SG160974 DB	'ipending_cmd', 00H
	ORG $+3
$SG160975 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160977 DB	'not ', 00H
	ORG $+3
$SG161287 DB	'E', 00H
	ORG $+2
$SG160979 DB	'HHC00875%s intlock %sheld; owner %4.4x', 0aH, 00H
$SG160980 DB	'ipending_cmd', 00H
	ORG $+3
$SG160981 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG160983 DB	'not ', 00H
	ORG $+3
$SG161293 DB	'%llx%c', 00H
	ORG $+1
$SG161296 DB	'E', 00H
	ORG $+2
$SG160985 DB	'HHC00876%s ioq lock %sheld', 0aH, 00H
$SG161300 DB	'I', 00H
	ORG $+2
$SG160986 DB	'ipending_cmd', 00H
	ORG $+3
$SG160987 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161328 DB	'online', 00H
	ORG $+1
$SG161329 DB	'W', 00H
	ORG $+2
$SG160988 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2191', 00H
	ORG $+1
$SG160992 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2198', 00H
	ORG $+1
$SG160996 DB	'HHC00883%s Channel Report queue: (NULL)', 0aH, 00H
	ORG $+3
$SG161331 DB	'cr_cmd', 00H
	ORG $+1
$SG161339 DB	'E', 00H
	ORG $+2
$SG160997 DB	'ipending_cmd', 00H
	ORG $+3
$SG160998 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161341 DB	'cr_cmd', 00H
	ORG $+1
$SG161347 DB	'I', 00H
	ORG $+2
$SG161002 DB	'HHC00884%s Channel Report queue: (empty)', 0aH, 00H
	ORG $+2
$SG161349 DB	'cr_cmd', 00H
	ORG $+1
$SG161351 DB	'%s', 00H
	ORG $+1
$SG161003 DB	'ipending_cmd', 00H
	ORG $+3
$SG161004 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161352 DB	'cr_cmd', 00H
	ORG $+1
$SG161378 DB	'I', 00H
	ORG $+2
$SG161006 DB	'HHC00885%s Channel Report queue:', 0aH, 00H
	ORG $+2
$SG161383 DB	'E', 00H
	ORG $+2
$SG161007 DB	'ipending_cmd', 00H
	ORG $+3
$SG161008 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161388 DB	'E', 00H
	ORG $+2
$SG161010 DB	'HHC00886%s CRW 0x%8.8X: %s', 0aH, 00H
$SG161393 DB	'E', 00H
	ORG $+2
$SG161011 DB	'ipending_cmd', 00H
	ORG $+3
$SG161012 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161398 DB	'W', 00H
	ORG $+2
$SG161022 DB	'busy %s', 00H
$SG161024 DB	'HHC00880%s device %1d:%04X: status %s', 0aH, 00H
	ORG $+1
$SG161025 DB	'ipending_cmd', 00H
	ORG $+3
$SG161026 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161028 DB	'reserved %s', 00H
	ORG $+4
$SG161030 DB	'HHC00880%s device %1d:%04X: status %s', 0aH, 00H
	ORG $+1
$SG161031 DB	'ipending_cmd', 00H
	ORG $+3
$SG161032 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161034 DB	'suspended', 00H
	ORG $+6
$SG161036 DB	'HHC00880%s device %1d:%04X: status %s', 0aH, 00H
	ORG $+1
$SG161037 DB	'ipending_cmd', 00H
	ORG $+3
$SG161038 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161040 DB	'I/O pending', 00H
	ORG $+4
$SG161042 DB	'HHC00880%s device %1d:%04X: status %s', 0aH, 00H
	ORG $+1
$SG161043 DB	'ipending_cmd', 00H
	ORG $+3
$SG161044 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161046 DB	'PCI pending', 00H
	ORG $+4
$SG161048 DB	'HHC00880%s device %1d:%04X: status %s', 0aH, 00H
	ORG $+1
$SG161049 DB	'ipending_cmd', 00H
	ORG $+3
$SG161050 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161052 DB	'Attn pending', 00H
	ORG $+3
$SG161054 DB	'HHC00880%s device %1d:%04X: status %s', 0aH, 00H
	ORG $+1
$SG161055 DB	'ipending_cmd', 00H
	ORG $+3
$SG161056 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161058 DB	'lock held', 00H
	ORG $+6
$SG161060 DB	'HHC00880%s device %1d:%04X: status %s', 0aH, 00H
	ORG $+1
$SG161061 DB	'ipending_cmd', 00H
	ORG $+3
$SG161062 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161065 DB	' (NULL)', 00H
$SG161067 DB	'HHC00881%s I/O interrupt queue:%s', 0aH, 00H
	ORG $+5
$SG161068 DB	'ipending_cmd', 00H
	ORG $+3
$SG161069 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161072 DB	'HHC00881%s I/O interrupt queue:%s', 0aH, 00H
	ORG $+5
$SG161073 DB	'ipending_cmd', 00H
	ORG $+3
$SG161074 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161075 DB	' unknown,', 00H
	ORG $+6
$SG161077 DB	' ATTN,   ', 00H
	ORG $+6
$SG161079 DB	' PCI,    ', 00H
	ORG $+6
$SG161081 DB	' normal, ', 00H
	ORG $+6
$SG161085 DB	'ipending_cmd', 00H
	ORG $+3
$SG161113 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2328', 00H
	ORG $+1
$SG161118 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+6
$SG161084 DB	'HHC00882%s device %1d:%04X: %s%s%s%s pri ISC %02X CSS %0'
	DB	'2X CU %02X', 0aH, 00H
	ORG $+4
$SG161086 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161115 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2335', 00H
	ORG $+1
$SG161126 DB	': invalid address', 00H
	ORG $+6
$SG161110 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG161111 DB	'bear_cmd', 00H
	ORG $+7
$SG161112 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161119 DB	'bear_cmd', 00H
	ORG $+7
$SG161120 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161125 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2348', 00H
	ORG $+1
$SG161128 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161129 DB	'bear_cmd', 00H
	ORG $+7
$SG161130 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161131 DB	'%llx', 00H
	ORG $+7
$SG161133 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
	ORG $+4
$SG161134 DB	'bear_cmd', 00H
	ORG $+7
$SG161135 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+2
$SG161136 DB	'%llx', 00H
	ORG $+7
$SG161138 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG161139 DB	'bear_cmd', 00H
	ORG $+7
$SG161140 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161141 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2367', 00H
	ORG $+1
$SG161162 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2382', 00H
	ORG $+1
$SG161164 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2386', 00H
	ORG $+1
$SG161167 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+6
$SG161168 DB	'gpr_cmd', 00H
$SG161169 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161172 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2401', 00H
	ORG $+1
$SG161175 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161176 DB	'gpr_cmd', 00H
$SG161177 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161180 DB	'%d%c%llx%c', 00H
	ORG $+5
$SG161181 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2413', 00H
	ORG $+1
$SG161184 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161185 DB	'gpr_cmd', 00H
$SG161186 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161189 DB	'HHC02269I ', 00H
	ORG $+5
$SG161190 DB	'General purpose registers', 00H
	ORG $+6
$SG161192 DB	'HHC02269%s %s', 0aH, 00H
	ORG $+1
$SG161193 DB	'gpr_cmd', 00H
$SG161194 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161196 DB	'gpr_cmd', 00H
$SG161197 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161198 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2428', 00H
	ORG $+1
$SG161220 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2444', 00H
	ORG $+1
$SG161222 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2448', 00H
	ORG $+1
$SG161225 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+6
$SG161226 DB	'fpr_cmd', 00H
$SG161227 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161230 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2463', 00H
	ORG $+1
$SG161233 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161234 DB	'fpr_cmd', 00H
$SG161235 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161238 DB	'%d%c%llx%c', 00H
	ORG $+5
$SG161242 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2478', 00H
	ORG $+1
$SG161245 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161246 DB	'fpr_cmd', 00H
$SG161247 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161249 DB	'HHC02270I ', 00H
	ORG $+5
$SG161250 DB	'Floating point registers', 00H
	ORG $+7
$SG161252 DB	'HHC02270%s %s', 0aH, 00H
	ORG $+1
$SG161253 DB	'fpr_cmd', 00H
$SG161254 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161256 DB	'fpr_cmd', 00H
$SG161257 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161258 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2493', 00H
	ORG $+1
$SG161275 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2508', 00H
	ORG $+1
$SG161277 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2512', 00H
	ORG $+1
$SG161280 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+6
$SG161281 DB	'fpc_cmd', 00H
$SG161282 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161285 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2526', 00H
	ORG $+1
$SG161288 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161289 DB	'fpc_cmd', 00H
$SG161290 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161294 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2537', 00H
	ORG $+1
$SG161297 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161298 DB	'fpc_cmd', 00H
$SG161299 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161301 DB	'HHC02276%s Floating point control register: %08X', 0aH, 00H
	ORG $+6
$SG161302 DB	'fpc_cmd', 00H
$SG161303 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161304 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2549', 00H
	ORG $+1
$SG161325 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2568', 00H
	ORG $+1
$SG161327 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2572', 00H
	ORG $+1
$SG161330 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+6
$SG161332 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161336 DB	'%d%c%llx%c', 00H
	ORG $+5
$SG161337 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2584', 00H
	ORG $+1
$SG161340 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG161342 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161345 DB	'HHC02271I ', 00H
	ORG $+5
$SG161346 DB	'Control registers', 00H
	ORG $+6
$SG161348 DB	'HHC02271%s %s', 0aH, 00H
	ORG $+1
$SG161350 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161353 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161354 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:2598', 00H
	ORG $+1
$SG161379 DB	'HHC02230%s %1d:%04X attention request raised', 0aH, 00H
	ORG $+2
$SG161380 DB	'i_cmd', 00H
	ORG $+2
$SG161381 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161384 DB	'HHC02231%s %1d:%04X busy or interrupt pending', 0aH, 00H
	ORG $+1
$SG161385 DB	'i_cmd', 00H
	ORG $+2
$SG161386 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161389 DB	'HHC02232%s %1d:%04X attention request rejected', 0aH, 00H
$SG161390 DB	'i_cmd', 00H
	ORG $+2
$SG161391 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161394 DB	'HHC02233%s %1d:%04X subchannel not enabled', 0aH, 00H
$SG161395 DB	'i_cmd', 00H
	ORG $+6
$SG161396 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161399 DB	'HHC02234%s Are you sure you didn''t mean ''ipl %04X''', 0aH
	DB	00H
$SG161400 DB	'i_cmd', 00H
	ORG $+6
$SG161401 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c', 00H
	ORG $+6
$SG161495 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:3107', 00H
	ORG $+1
$SG161496 DB	'C:\papa\MyGit\hyperion-zvector\hscemode.c:3112', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cr_cmd
	DD	01fH
	DD	03b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fpr_cmd
	DD	01fH
	DD	04edH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:gpr_cmd
	DD	01fH
	DD	046aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:bear_cmd
	DD	020H
	DD	04e0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ipending_cmd
	DD	02bH
	DD	03e22H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:txf_cmd
	DD	020H
	DD	01886H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:trace_cmd
	DD	020H
	DD	014a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tf_cmd
	DD	020H
	DD	01381H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:psw_cmd
	DD	01fH
	DD	0f97H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ar_cmd
	DD	01fH
	DD	0259H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tlb_cmd
	DD	021H
	DD	0d4eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:traceopt_cmd
	DD	01fH
	DD	05cdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:report_aea
	DD	016H
	DD	072aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_archdep_pr_cmd
	DD	01fH
	DD	0214H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_archdep_pr_cmd
	DD	01fH
	DD	0211H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_archdep_pr_cmd
	DD	01fH
	DD	0211H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:aia_cmd
	DD	01fH
	DD	034bH
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$strcaseabbrev DD 011301H
	DD	08213H
$unwind$strupper DD 010e01H
	DD	0620eH
$unwind$aia_cmd DD 022719H
	DD	02f0115H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$createCpuId DD 011801H
	DD	02218H
$unwind$setAllCpuIds DD 011701H
	DD	0a217H
$unwind$setAllCpuIds_lock DD 011701H
	DD	08217H
$unwind$setCpuIdregs DD 011801H
	DD	0c218H
$unwind$setCpuId DD 011701H
	DD	08217H
$unwind$resetAllCpuIds DD 010401H
	DD	06204H
$unwind$setOperationMode DD 010401H
	DD	02204H
$unwind$enable_lparmode DD 010801H
	DD	04208H
$unwind$Interrupt_Lock_Obtained DD 010e01H
	DD	0420eH
$unwind$Obtain_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$Try_Obtain_Interrupt_Lock DD 010e01H
	DD	0620eH
$unwind$Release_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$s370_archdep_pr_cmd DD 022719H
	DD	0170115H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$s390_archdep_pr_cmd DD 022719H
	DD	0170115H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$z900_archdep_pr_cmd DD 022719H
	DD	0170115H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$devnotfound_msg DD 010e01H
	DD	0c20eH
$unwind$missing_devnum DD 010401H
	DD	08204H
$unwind$aea_mode_str DD 010801H
	DD	02208H
$unwind$report_aea DD 021e19H
	DD	02d010cH
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$aea_cmd DD 011201H
	DD	0c212H
$unwind$traceopt_cmd DD 022719H
	DD	0210115H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$tlb_cmd DD 042919H
	DD	0370117H
	DD	0300f7010H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
$unwind$ar_cmd DD 022719H
	DD	03f0115H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$pr_cmd DD 021501H
	DD	0110115H
$unwind$psw_cmd DD 022719H
	DD	06b0115H
	DD	imagerel __GSHandlerCheck
	DD	0340H
$unwind$abs_or_r_cmd DD 011201H
	DD	0c212H
$unwind$u_cmd DD 011201H
	DD	0c212H
$unwind$v_cmd DD 011201H
	DD	0c212H
$unwind$tf_cmd DD 032819H
	DD	06c0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0350H
$unwind$trace_cmd DD 032819H
	DD	0520116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0280H
$unwind$txf_cmd DD 032819H
	DD	0ee0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0760H
$unwind$auto_trace_cmd DD 011201H
	DD	0e212H
$unwind$ipending_cmd DD 0a3319H
	DD	0cb0121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	0300f5010H
	DD	imagerel __GSHandlerCheck
	DD	0640H
$unwind$bear_cmd DD 032819H
	DD	0160116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$gpr_cmd DD 022719H
	DD	0550115H
	DD	imagerel __GSHandlerCheck
	DD	0290H
$unwind$fpr_cmd DD 022719H
	DD	0550115H
	DD	imagerel __GSHandlerCheck
	DD	0290H
$unwind$fpc_cmd DD 021501H
	DD	0110115H
$unwind$cr_cmd DD 022719H
	DD	0530115H
	DD	imagerel __GSHandlerCheck
	DD	0280H
$unwind$i_cmd DD 021501H
	DD	0150115H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
devnum$ = 80
lcss$ = 84
rc$ = 88
tv82 = 92
tv83 = 96
tv85 = 100
tv128 = 104
tv130 = 108
tv141 = 112
tv143 = 116
tv154 = 120
tv156 = 124
tv187 = 128
dev$ = 136
regs$ = 144
argc$ = 176
argv$ = 184
cmdline$ = 192
i_cmd	PROC

; 2608 : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 2609 :     REGS*    regs;
; 2610 :     DEVBLK*  dev;
; 2611 :     int      rc = 0;

  00015	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@i_cmd:

; 2612 :     U16      lcss, devnum;
; 2613 : 
; 2614 :     UNREFERENCED( cmdline );

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@i_cmd

; 2615 : 
; 2616 :     if (argc < 2)

  00023	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0002b	7d 0f		 jge	 SHORT $LN7@i_cmd

; 2617 :     {
; 2618 :         missing_devnum();

  0002d	e8 00 00 00 00	 call	 missing_devnum

; 2619 :         return -1;

  00032	b8 ff ff ff ff	 mov	 eax, -1
  00037	e9 3a 03 00 00	 jmp	 $LN1@i_cmd
$LN7@i_cmd:

; 2620 :     }
; 2621 : 
; 2622 :     rc = parse_single_devnum( argv[1], &lcss, &devnum );

  0003c	b8 08 00 00 00	 mov	 eax, 8
  00041	48 6b c0 01	 imul	 rax, rax, 1
  00045	4c 8d 44 24 50	 lea	 r8, QWORD PTR devnum$[rsp]
  0004a	48 8d 54 24 54	 lea	 rdx, QWORD PTR lcss$[rsp]
  0004f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00057	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0005b	e8 00 00 00 00	 call	 parse_single_devnum
  00060	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 2623 : 
; 2624 :     if (rc < 0)

  00064	83 7c 24 58 00	 cmp	 DWORD PTR rc$[rsp], 0
  00069	7d 0a		 jge	 SHORT $LN8@i_cmd

; 2625 :         return -1;  // (error message already issued)

  0006b	b8 ff ff ff ff	 mov	 eax, -1
  00070	e9 01 03 00 00	 jmp	 $LN1@i_cmd
$LN8@i_cmd:

; 2626 : 
; 2627 :     if (!(dev = find_device_by_devnum( lcss, devnum )))

  00075	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$[rsp]
  0007a	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  0007f	e8 00 00 00 00	 call	 find_device_by_devnum
  00084	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dev$[rsp], rax
  0008c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00095	75 19		 jne	 SHORT $LN9@i_cmd

; 2628 :     {
; 2629 :         devnotfound_msg( lcss, devnum );

  00097	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$[rsp]
  0009c	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  000a1	e8 00 00 00 00	 call	 devnotfound_msg

; 2630 :         return -1;

  000a6	b8 ff ff ff ff	 mov	 eax, -1
  000ab	e9 c6 02 00 00	 jmp	 $LN1@i_cmd
$LN9@i_cmd:

; 2631 :     }
; 2632 : 
; 2633 :     rc = device_attention( dev, CSW_ATTN );

  000b0	b2 80		 mov	 dl, 128			; 00000080H
  000b2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000ba	e8 00 00 00 00	 call	 device_attention
  000bf	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 2634 : 
; 2635 :     switch (rc)

  000c3	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  000c7	89 44 24 5c	 mov	 DWORD PTR tv82[rsp], eax
  000cb	83 7c 24 5c 00	 cmp	 DWORD PTR tv82[rsp], 0
  000d0	74 26		 je	 SHORT $LN10@i_cmd
  000d2	83 7c 24 5c 01	 cmp	 DWORD PTR tv82[rsp], 1
  000d7	0f 84 89 00 00
	00		 je	 $LN11@i_cmd
  000dd	83 7c 24 5c 02	 cmp	 DWORD PTR tv82[rsp], 2
  000e2	0f 84 ec 00 00
	00		 je	 $LN12@i_cmd
  000e8	83 7c 24 5c 03	 cmp	 DWORD PTR tv82[rsp], 3
  000ed	0f 84 4c 01 00
	00		 je	 $LN13@i_cmd
  000f3	e9 b0 01 00 00	 jmp	 $LN5@i_cmd
$LN10@i_cmd:

; 2636 :     {
; 2637 :         // "%1d:%04X attention request raised"
; 2638 :         case 0: WRMSG( HHC02230, "I", lcss, devnum ); break;

  000f8	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  000fd	89 44 24 60	 mov	 DWORD PTR tv83[rsp], eax
  00101	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  00106	89 4c 24 64	 mov	 DWORD PTR tv85[rsp], ecx
  0010a	b9 01 00 00 00	 mov	 ecx, 1
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00115	8b 4c 24 60	 mov	 ecx, DWORD PTR tv83[rsp]
  00119	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0011d	8b 4c 24 64	 mov	 ecx, DWORD PTR tv85[rsp]
  00121	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161378
  0012c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161379
  00138	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00142	41 b9 03 00 00
	00		 mov	 r9d, 3
  00148	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161380
  0014f	ba 4e 0a 00 00	 mov	 edx, 2638		; 00000a4eH
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161381
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00161	e9 42 01 00 00	 jmp	 $LN5@i_cmd
$LN11@i_cmd:

; 2639 : 
; 2640 :         // "%1d:%04X busy or interrupt pending"
; 2641 :         case 1: WRMSG( HHC02231, "E", lcss, devnum ); break;

  00166	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  0016b	89 44 24 68	 mov	 DWORD PTR tv128[rsp], eax
  0016f	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  00174	89 4c 24 6c	 mov	 DWORD PTR tv130[rsp], ecx
  00178	b9 01 00 00 00	 mov	 ecx, 1
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00183	8b 4c 24 68	 mov	 ecx, DWORD PTR tv128[rsp]
  00187	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0018b	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv130[rsp]
  0018f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161383
  0019a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161384
  001a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161385
  001bd	ba 51 0a 00 00	 mov	 edx, 2641		; 00000a51H
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161386
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001cf	e9 d4 00 00 00	 jmp	 $LN5@i_cmd
$LN12@i_cmd:

; 2642 : 
; 2643 :         // "%1d:%04X attention request rejected"
; 2644 :         case 2: WRMSG( HHC02232, "E", lcss, devnum ); break;

  001d4	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  001d9	89 44 24 70	 mov	 DWORD PTR tv141[rsp], eax
  001dd	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  001e2	89 4c 24 74	 mov	 DWORD PTR tv143[rsp], ecx
  001e6	b9 01 00 00 00	 mov	 ecx, 1
  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f1	8b 4c 24 70	 mov	 ecx, DWORD PTR tv141[rsp]
  001f5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001f9	8b 4c 24 74	 mov	 ecx, DWORD PTR tv143[rsp]
  001fd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161388
  00208	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161389
  00214	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00219	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00224	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161390
  0022b	ba 54 0a 00 00	 mov	 edx, 2644		; 00000a54H
  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161391
  00237	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0023d	eb 69		 jmp	 SHORT $LN5@i_cmd
$LN13@i_cmd:

; 2645 : 
; 2646 :         // "%1d:%04X subchannel not enabled"
; 2647 :         case 3: WRMSG( HHC02233, "E", lcss, devnum ); break;

  0023f	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  00244	89 44 24 78	 mov	 DWORD PTR tv154[rsp], eax
  00248	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  0024d	89 4c 24 7c	 mov	 DWORD PTR tv156[rsp], ecx
  00251	b9 01 00 00 00	 mov	 ecx, 1
  00256	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0025c	8b 4c 24 78	 mov	 ecx, DWORD PTR tv154[rsp]
  00260	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00264	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv156[rsp]
  00268	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0026c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161393
  00273	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00278	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161394
  0027f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00284	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00289	41 b9 03 00 00
	00		 mov	 r9d, 3
  0028f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161395
  00296	ba 57 0a 00 00	 mov	 edx, 2647		; 00000a57H
  0029b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161396
  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@i_cmd:

; 2648 :     }
; 2649 : 
; 2650 :     regs = sysblk.regs[ sysblk.pcpu ];

  002a8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002af	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  002b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002bd	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  002c5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 2651 : 
; 2652 :     if (1
; 2653 :         && rc == 3 /* subchannel is not valid or not enabled */
; 2654 :         && IS_CPU_ONLINE( sysblk.pcpu )
; 2655 :         && CPUSTATE_STOPPED == regs->cpustate

  002cd	33 c0		 xor	 eax, eax
  002cf	83 f8 01	 cmp	 eax, 1
  002d2	0f 84 9a 00 00
	00		 je	 $LN14@i_cmd
  002d8	83 7c 24 58 03	 cmp	 DWORD PTR rc$[rsp], 3
  002dd	0f 85 8f 00 00
	00		 jne	 $LN14@i_cmd
  002e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002ea	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  002f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002f8	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00301	74 6f		 je	 SHORT $LN14@i_cmd
  00303	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0030b	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  0030f	83 f8 03	 cmp	 eax, 3
  00312	75 5e		 jne	 SHORT $LN14@i_cmd

; 2656 :     )
; 2657 :     {
; 2658 :         // "Are you sure you didn't mean 'ipl %04X'"
; 2659 :         WRMSG( HHC02234, "W", devnum );

  00314	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  00319	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv187[rsp], eax
  00320	b9 01 00 00 00	 mov	 ecx, 1
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0032b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv187[rsp]
  00332	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161398
  0033d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00342	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161399
  00349	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0034e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00353	41 b9 03 00 00
	00		 mov	 r9d, 3
  00359	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161400
  00360	ba 63 0a 00 00	 mov	 edx, 2659		; 00000a63H
  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161401
  0036c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@i_cmd:

; 2660 :     }
; 2661 : 
; 2662 :     return rc;

  00372	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@i_cmd:

; 2663 : }

  00376	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0037d	c3		 ret	 0
i_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
equal_sign$ = 80
cr_num$ = 84
c$ = 88
regs$ = 96
cr_value$ = 104
tv88 = 112
tv166 = 120
buf$ = 128
__$ArrayPad$ = 640
argc$ = 672
argv$ = 680
cmdline$ = 688
cr_cmd	PROC

; 2559 : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 02
	00 00		 sub	 rsp, 664		; 00000298H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@cr_cmd:

; 2560 : REGS *regs;
; 2561 : int   cr_num;
; 2562 : BYTE  equal_sign, c;
; 2563 : U64   cr_value;
; 2564 : char buf[512];
; 2565 : 
; 2566 :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@cr_cmd

; 2567 : 
; 2568 :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00034	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161325
  00051	48 8b c8	 mov	 rcx, rax
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2569 : 
; 2570 :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  0005a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00061	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0006f	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00078	0f 85 ca 00 00
	00		 jne	 $LN5@cr_cmd

; 2571 :     {
; 2572 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0007e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00085	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00093	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161327
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2573 :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  000ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b2	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000c0	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000ce	48 89 44 24 70	 mov	 QWORD PTR tv88[rsp], rax
  000d3	b9 01 00 00 00	 mov	 ecx, 1
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161328
  000e5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000f1	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000f7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000fb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv88[rsp]
  00100	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161329
  0010c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161330
  00118	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00122	41 b9 03 00 00
	00		 mov	 r9d, 3
  00128	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161331
  0012f	ba 0d 0a 00 00	 mov	 edx, 2573		; 00000a0dH
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161332
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2574 :         return 0;

  00141	33 c0		 xor	 eax, eax
  00143	e9 6e 02 00 00	 jmp	 $LN1@cr_cmd
$LN5@cr_cmd:

; 2575 :     }
; 2576 :     regs = sysblk.regs[sysblk.pcpu];

  00148	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0014f	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00156	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0015d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00165	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax

; 2577 : 
; 2578 :     if (argc > 1)

  0016a	83 bc 24 a0 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00172	0f 8e 55 01 00
	00		 jle	 $LN6@cr_cmd

; 2579 :     {
; 2580 :         if (argc > 2
; 2581 :             || sscanf( argv[1], "%d%c%"SCNx64"%c", &cr_num, &equal_sign, &cr_value, &c ) != 3
; 2582 :             || '=' != equal_sign || cr_num < 0 || cr_num > 15)

  00178	83 bc 24 a0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00180	7f 60		 jg	 SHORT $LN8@cr_cmd
  00182	b8 08 00 00 00	 mov	 eax, 8
  00187	48 6b c0 01	 imul	 rax, rax, 1
  0018b	48 8d 4c 24 58	 lea	 rcx, QWORD PTR c$[rsp]
  00190	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00195	48 8d 4c 24 68	 lea	 rcx, QWORD PTR cr_value$[rsp]
  0019a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0019f	4c 8d 4c 24 50	 lea	 r9, QWORD PTR equal_sign$[rsp]
  001a4	4c 8d 44 24 54	 lea	 r8, QWORD PTR cr_num$[rsp]
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161336
  001b0	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001b8	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001bc	e8 00 00 00 00	 call	 sscanf
  001c1	83 f8 03	 cmp	 eax, 3
  001c4	75 1c		 jne	 SHORT $LN8@cr_cmd
  001c6	0f b6 44 24 50	 movzx	 eax, BYTE PTR equal_sign$[rsp]
  001cb	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  001ce	75 12		 jne	 SHORT $LN8@cr_cmd
  001d0	83 7c 24 54 00	 cmp	 DWORD PTR cr_num$[rsp], 0
  001d5	7c 0b		 jl	 SHORT $LN8@cr_cmd
  001d7	83 7c 24 54 0f	 cmp	 DWORD PTR cr_num$[rsp], 15
  001dc	0f 8e ab 00 00
	00		 jle	 $LN7@cr_cmd
$LN8@cr_cmd:

; 2583 :         {
; 2584 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  001e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001e9	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  001f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f7	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  001ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161337
  00206	48 8b c8	 mov	 rcx, rax
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2585 :             WRMSG(HHC02205, "E", argv[1], "");

  0020f	b8 08 00 00 00	 mov	 eax, 8
  00214	48 6b c0 01	 imul	 rax, rax, 1
  00218	48 89 44 24 78	 mov	 QWORD PTR tv166[rsp], rax
  0021d	b9 01 00 00 00	 mov	 ecx, 1
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161338
  0022f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00234	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0023c	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv166[rsp]
  00241	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00245	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161339
  00251	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161340
  0025d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00262	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00267	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161341
  00274	ba 19 0a 00 00	 mov	 edx, 2585		; 00000a19H
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161342
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2586 :             return 0;

  00286	33 c0		 xor	 eax, eax
  00288	e9 29 01 00 00	 jmp	 $LN1@cr_cmd
$LN7@cr_cmd:

; 2587 :         }
; 2588 :         if ( ARCH_900_IDX == regs->arch_mode )

  0028d	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00292	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  00296	75 1c		 jne	 SHORT $LN9@cr_cmd

; 2589 :             regs->CR_G(cr_num) = (U64)cr_value;

  00298	8b 44 24 54	 mov	 eax, DWORD PTR cr_num$[rsp]
  0029c	ff c0		 inc	 eax
  0029e	48 98		 cdqe
  002a0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  002a5	48 8b 54 24 68	 mov	 rdx, QWORD PTR cr_value$[rsp]
  002aa	48 89 94 c1 00
	06 00 00	 mov	 QWORD PTR [rcx+rax*8+1536], rdx
  002b2	eb 19		 jmp	 SHORT $LN10@cr_cmd
$LN9@cr_cmd:

; 2590 :         else
; 2591 :             regs->CR_G(cr_num) = (U32)cr_value;

  002b4	8b 44 24 54	 mov	 eax, DWORD PTR cr_num$[rsp]
  002b8	ff c0		 inc	 eax
  002ba	48 98		 cdqe
  002bc	8b 4c 24 68	 mov	 ecx, DWORD PTR cr_value$[rsp]
  002c0	48 8b 54 24 60	 mov	 rdx, QWORD PTR regs$[rsp]
  002c5	48 89 8c c2 00
	06 00 00	 mov	 QWORD PTR [rdx+rax*8+1536], rcx
$LN10@cr_cmd:
$LN6@cr_cmd:

; 2592 :     }
; 2593 : 
; 2594 :     display_cregs( regs, buf, sizeof(buf), "HHC02271I " );

  002cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161345
  002d4	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  002da	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  002e2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  002e7	e8 00 00 00 00	 call	 display_cregs

; 2595 :     WRMSG(   HHC02271, "I", "Control registers" );

  002ec	b9 01 00 00 00	 mov	 ecx, 1
  002f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161346
  002fe	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161347
  0030a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161348
  00316	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00320	41 b9 03 00 00
	00		 mov	 r9d, 3
  00326	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161349
  0032d	ba 23 0a 00 00	 mov	 edx, 2595		; 00000a23H
  00332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161350
  00339	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2596 :     LOGMSG( "%s", buf );

  0033f	b9 01 00 00 00	 mov	 ecx, 1
  00344	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0034a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00352	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00357	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161351
  0035e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00363	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00368	41 b9 03 00 00
	00		 mov	 r9d, 3
  0036e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161352
  00375	ba 24 0a 00 00	 mov	 edx, 2596		; 00000a24H
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161353
  00381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2597 : 
; 2598 :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00387	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0038e	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00395	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0039c	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  003a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161354
  003ab	48 8b c8	 mov	 rcx, rax
  003ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2599 : 
; 2600 :     return 0;

  003b4	33 c0		 xor	 eax, eax
$LN1@cr_cmd:

; 2601 : }

  003b6	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003be	48 33 cc	 xor	 rcx, rsp
  003c1	e8 00 00 00 00	 call	 __security_check_cookie
  003c6	48 81 c4 98 02
	00 00		 add	 rsp, 664		; 00000298H
  003cd	c3		 ret	 0
cr_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
c$1 = 80
reg_value$2 = 88
regs$ = 96
tv88 = 104
tv152 = 112
tv182 = 120
argc$ = 144
argv$ = 152
cmdline$ = 160
fpc_cmd	PROC

; 2503 : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@fpc_cmd:

; 2504 : REGS *regs;
; 2505 : 
; 2506 :     UNREFERENCED(cmdline);

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@fpc_cmd

; 2507 : 
; 2508 :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00022	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00029	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00030	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161275
  0003f	48 8b c8	 mov	 rcx, rax
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2509 : 
; 2510 :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  00048	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0004f	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005d	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00066	0f 85 ca 00 00
	00		 jne	 $LN5@fpc_cmd

; 2511 :     {
; 2512 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00073	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00081	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161277
  00090	48 8b c8	 mov	 rcx, rax
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2513 :         // "Processor %s%02X: processor is not %s"
; 2514 :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  00099	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000a0	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000ae	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000bc	48 89 44 24 68	 mov	 QWORD PTR tv88[rsp], rax
  000c1	b9 01 00 00 00	 mov	 ecx, 1
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161278
  000d3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000df	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000e5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000e9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv88[rsp]
  000ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161279
  000fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161280
  00106	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00110	41 b9 03 00 00
	00		 mov	 r9d, 3
  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161281
  0011d	ba d2 09 00 00	 mov	 edx, 2514		; 000009d2H
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161282
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2515 :         return 0;

  0012f	33 c0		 xor	 eax, eax
  00131	e9 7a 02 00 00	 jmp	 $LN1@fpc_cmd
$LN5@fpc_cmd:

; 2516 :     }
; 2517 :     regs = sysblk.regs[sysblk.pcpu];

  00136	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0013d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00144	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0014b	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00153	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax

; 2518 : 
; 2519 :     if (argc > 1)

  00158	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00160	0f 8e c5 01 00
	00		 jle	 $LN6@fpc_cmd

; 2520 :     {
; 2521 :         BYTE  c;
; 2522 :         U64   reg_value;
; 2523 : 
; 2524 :         if (argc > 2)

  00166	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0016e	0f 8e ab 00 00
	00		 jle	 $LN7@fpc_cmd

; 2525 :         {
; 2526 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00174	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0017b	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00182	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00189	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161285
  00198	48 8b c8	 mov	 rcx, rax
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2527 :             // "Invalid argument '%s'%s"
; 2528 :             WRMSG(HHC02205, "E", argv[1], "");

  001a1	b8 08 00 00 00	 mov	 eax, 8
  001a6	48 6b c0 01	 imul	 rax, rax, 1
  001aa	48 89 44 24 70	 mov	 QWORD PTR tv152[rsp], rax
  001af	b9 01 00 00 00	 mov	 ecx, 1
  001b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161286
  001c1	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001c6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ce	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv152[rsp]
  001d3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001d7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161287
  001e3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161288
  001ef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f9	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161289
  00206	ba e0 09 00 00	 mov	 edx, 2528		; 000009e0H
  0020b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161290
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2529 :             return 0;

  00218	33 c0		 xor	 eax, eax
  0021a	e9 91 01 00 00	 jmp	 $LN1@fpc_cmd
$LN7@fpc_cmd:

; 2530 :         }
; 2531 : 
; 2532 :         if (0
; 2533 :             || sscanf( argv[1], "%"SCNx64"%c", &reg_value, &c ) != 1
; 2534 :             || reg_value > UINT_MAX

  0021f	33 c0		 xor	 eax, eax
  00221	85 c0		 test	 eax, eax
  00223	75 40		 jne	 SHORT $LN9@fpc_cmd
  00225	b8 08 00 00 00	 mov	 eax, 8
  0022a	48 6b c0 01	 imul	 rax, rax, 1
  0022e	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$1[rsp]
  00233	4c 8d 44 24 58	 lea	 r8, QWORD PTR reg_value$2[rsp]
  00238	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161293
  0023f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00247	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0024b	e8 00 00 00 00	 call	 sscanf
  00250	83 f8 01	 cmp	 eax, 1
  00253	75 10		 jne	 SHORT $LN9@fpc_cmd
  00255	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0025a	48 39 44 24 58	 cmp	 QWORD PTR reg_value$2[rsp], rax
  0025f	0f 86 ab 00 00
	00		 jbe	 $LN8@fpc_cmd
$LN9@fpc_cmd:

; 2535 :         )
; 2536 :         {
; 2537 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00265	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0026c	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00273	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0027a	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00282	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161294
  00289	48 8b c8	 mov	 rcx, rax
  0028c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2538 :             // "Invalid argument '%s'%s"
; 2539 :             WRMSG(HHC02205, "E", argv[1], "");

  00292	b8 08 00 00 00	 mov	 eax, 8
  00297	48 6b c0 01	 imul	 rax, rax, 1
  0029b	48 89 44 24 78	 mov	 QWORD PTR tv182[rsp], rax
  002a0	b9 01 00 00 00	 mov	 ecx, 1
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161295
  002b2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002b7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002bf	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv182[rsp]
  002c4	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002c8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161296
  002d4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161297
  002e0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ea	41 b9 03 00 00
	00		 mov	 r9d, 3
  002f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161298
  002f7	ba eb 09 00 00	 mov	 edx, 2539		; 000009ebH
  002fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161299
  00303	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2540 :             return 0;

  00309	33 c0		 xor	 eax, eax
  0030b	e9 a0 00 00 00	 jmp	 $LN1@fpc_cmd
$LN8@fpc_cmd:

; 2541 :         }
; 2542 : 
; 2543 :         regs->fpc = (U32) (reg_value & 0xFFFFFFFFULL);

  00310	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00315	48 8b 4c 24 58	 mov	 rcx, QWORD PTR reg_value$2[rsp]
  0031a	48 23 c8	 and	 rcx, rax
  0031d	48 8b c1	 mov	 rax, rcx
  00320	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00325	89 81 c0 03 00
	00		 mov	 DWORD PTR [rcx+960], eax
$LN6@fpc_cmd:

; 2544 :     }
; 2545 : 
; 2546 :     // "Floating point control register: %08"PRIX32
; 2547 :     WRMSG(HHC02276, "I", regs->fpc);

  0032b	b9 01 00 00 00	 mov	 ecx, 1
  00330	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00336	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0033b	8b 89 c0 03 00
	00		 mov	 ecx, DWORD PTR [rcx+960]
  00341	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00345	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161300
  0034c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161301
  00358	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0035d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00362	41 b9 03 00 00
	00		 mov	 r9d, 3
  00368	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161302
  0036f	ba f3 09 00 00	 mov	 edx, 2547		; 000009f3H
  00374	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161303
  0037b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2548 : 
; 2549 :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00381	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00388	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0038f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00396	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0039e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161304
  003a5	48 8b c8	 mov	 rcx, rax
  003a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2550 : 
; 2551 :     return 0;

  003ae	33 c0		 xor	 eax, eax
$LN1@fpc_cmd:

; 2552 : }

  003b0	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003b7	c3		 ret	 0
fpc_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
reg_num$1 = 80
equal_sign$2 = 84
afp$3 = 88
c$4 = 92
tv149 = 96
regs$ = 104
reg_value$5 = 112
tv88 = 120
tv159 = 128
tv200 = 136
buf$ = 144
__$ArrayPad$ = 656
argc$ = 688
argv$ = 696
cmdline$ = 704
fpr_cmd	PROC

; 2438 : {

$LN17:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@fpr_cmd:

; 2439 : REGS *regs;
; 2440 : char buf[512];
; 2441 : 
; 2442 :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@fpr_cmd

; 2443 : 
; 2444 :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00034	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161220
  00051	48 8b c8	 mov	 rcx, rax
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2445 : 
; 2446 :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  0005a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00061	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0006f	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00078	0f 85 ca 00 00
	00		 jne	 $LN5@fpr_cmd

; 2447 :     {
; 2448 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0007e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00085	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00093	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161222
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2449 :         // "Processor %s%02X: processor is not %s"
; 2450 :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  000ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b2	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000c0	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000ce	48 89 44 24 78	 mov	 QWORD PTR tv88[rsp], rax
  000d3	b9 01 00 00 00	 mov	 ecx, 1
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161223
  000e5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000f1	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000f7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000fb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv88[rsp]
  00100	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161224
  0010c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161225
  00118	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00122	41 b9 03 00 00
	00		 mov	 r9d, 3
  00128	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161226
  0012f	ba 92 09 00 00	 mov	 edx, 2450		; 00000992H
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161227
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2451 :         return 0;

  00141	33 c0		 xor	 eax, eax
  00143	e9 a5 03 00 00	 jmp	 $LN1@fpr_cmd
$LN5@fpr_cmd:

; 2452 :     }
; 2453 :     regs = sysblk.regs[sysblk.pcpu];

  00148	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0014f	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00156	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0015d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00165	48 89 44 24 68	 mov	 QWORD PTR regs$[rsp], rax

; 2454 : 
; 2455 :     if (argc > 1)

  0016a	83 bc 24 b0 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00172	0f 8e 8c 02 00
	00		 jle	 $LN6@fpr_cmd

; 2456 :     {
; 2457 :         U64   reg_value;
; 2458 :         int   reg_num, afp = (regs->CR(0) & CR0_AFP) ? TRUE : FALSE;

  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 01	 imul	 rax, rax, 1
  00181	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00186	48 8b 84 01 00
	06 00 00	 mov	 rax, QWORD PTR [rcx+rax+1536]
  0018e	48 25 00 00 04
	00		 and	 rax, 262144		; 00040000H
  00194	48 85 c0	 test	 rax, rax
  00197	74 0a		 je	 SHORT $LN15@fpr_cmd
  00199	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
  001a1	eb 08		 jmp	 SHORT $LN16@fpr_cmd
$LN15@fpr_cmd:
  001a3	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
$LN16@fpr_cmd:
  001ab	8b 44 24 60	 mov	 eax, DWORD PTR tv149[rsp]
  001af	89 44 24 58	 mov	 DWORD PTR afp$3[rsp], eax

; 2459 :         BYTE  equal_sign, c;
; 2460 : 
; 2461 :         if (argc > 2)

  001b3	83 bc 24 b0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  001bb	0f 8e b1 00 00
	00		 jle	 $LN7@fpr_cmd

; 2462 :         {
; 2463 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  001c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001c8	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  001cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001d6	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161230
  001e5	48 8b c8	 mov	 rcx, rax
  001e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2464 :             // "Invalid argument '%s'%s"
; 2465 :             WRMSG(HHC02205, "E", argv[1], "");

  001ee	b8 08 00 00 00	 mov	 eax, 8
  001f3	48 6b c0 01	 imul	 rax, rax, 1
  001f7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv159[rsp], rax
  001ff	b9 01 00 00 00	 mov	 ecx, 1
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161231
  00211	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00216	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0021e	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv159[rsp]
  00226	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161232
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161233
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161234
  00259	ba a1 09 00 00	 mov	 edx, 2465		; 000009a1H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161235
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2466 :             return 0;

  0026b	33 c0		 xor	 eax, eax
  0026d	e9 7b 02 00 00	 jmp	 $LN1@fpr_cmd
$LN7@fpr_cmd:

; 2467 :         }
; 2468 : 
; 2469 :         if (0
; 2470 :             || sscanf( argv[1], "%d%c%"SCNx64"%c", &reg_num, &equal_sign, &reg_value, &c ) != 3
; 2471 :             || reg_num < 0
; 2472 :             || (afp && reg_num > 15)
; 2473 :             || (!afp && reg_num > 6)
; 2474 :             || (!afp && (reg_num & 1))  /* (must be even numbered: 0,2,4,6) */
; 2475 :             || '=' != equal_sign

  00272	33 c0		 xor	 eax, eax
  00274	85 c0		 test	 eax, eax
  00276	0f 85 87 00 00
	00		 jne	 $LN9@fpr_cmd
  0027c	b8 08 00 00 00	 mov	 eax, 8
  00281	48 6b c0 01	 imul	 rax, rax, 1
  00285	48 8d 4c 24 5c	 lea	 rcx, QWORD PTR c$4[rsp]
  0028a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0028f	48 8d 4c 24 70	 lea	 rcx, QWORD PTR reg_value$5[rsp]
  00294	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00299	4c 8d 4c 24 54	 lea	 r9, QWORD PTR equal_sign$2[rsp]
  0029e	4c 8d 44 24 50	 lea	 r8, QWORD PTR reg_num$1[rsp]
  002a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161238
  002aa	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002b2	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  002b6	e8 00 00 00 00	 call	 sscanf
  002bb	83 f8 03	 cmp	 eax, 3
  002be	75 43		 jne	 SHORT $LN9@fpr_cmd
  002c0	83 7c 24 50 00	 cmp	 DWORD PTR reg_num$1[rsp], 0
  002c5	7c 3c		 jl	 SHORT $LN9@fpr_cmd
  002c7	83 7c 24 58 00	 cmp	 DWORD PTR afp$3[rsp], 0
  002cc	74 07		 je	 SHORT $LN10@fpr_cmd
  002ce	83 7c 24 50 0f	 cmp	 DWORD PTR reg_num$1[rsp], 15
  002d3	7f 2e		 jg	 SHORT $LN9@fpr_cmd
$LN10@fpr_cmd:
  002d5	83 7c 24 58 00	 cmp	 DWORD PTR afp$3[rsp], 0
  002da	75 07		 jne	 SHORT $LN11@fpr_cmd
  002dc	83 7c 24 50 06	 cmp	 DWORD PTR reg_num$1[rsp], 6
  002e1	7f 20		 jg	 SHORT $LN9@fpr_cmd
$LN11@fpr_cmd:
  002e3	83 7c 24 58 00	 cmp	 DWORD PTR afp$3[rsp], 0
  002e8	75 0b		 jne	 SHORT $LN12@fpr_cmd
  002ea	8b 44 24 50	 mov	 eax, DWORD PTR reg_num$1[rsp]
  002ee	83 e0 01	 and	 eax, 1
  002f1	85 c0		 test	 eax, eax
  002f3	75 0e		 jne	 SHORT $LN9@fpr_cmd
$LN12@fpr_cmd:
  002f5	0f b6 44 24 54	 movzx	 eax, BYTE PTR equal_sign$2[rsp]
  002fa	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  002fd	0f 84 b1 00 00
	00		 je	 $LN8@fpr_cmd
$LN9@fpr_cmd:

; 2476 :         )
; 2477 :         {
; 2478 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00303	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0030a	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00311	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00318	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161242
  00327	48 8b c8	 mov	 rcx, rax
  0032a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2479 :             // "Invalid argument '%s'%s"
; 2480 :             WRMSG(HHC02205, "E", argv[1], "");

  00330	b8 08 00 00 00	 mov	 eax, 8
  00335	48 6b c0 01	 imul	 rax, rax, 1
  00339	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv200[rsp], rax
  00341	b9 01 00 00 00	 mov	 ecx, 1
  00346	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0034c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161243
  00353	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00358	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00360	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv200[rsp]
  00368	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0036c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00371	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161244
  00378	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0037d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161245
  00384	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00389	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0038e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00394	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161246
  0039b	ba b0 09 00 00	 mov	 edx, 2480		; 000009b0H
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161247
  003a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2481 :             return 0;

  003ad	33 c0		 xor	 eax, eax
  003af	e9 39 01 00 00	 jmp	 $LN1@fpr_cmd
$LN8@fpr_cmd:

; 2482 :         }
; 2483 : 
; 2484 :         if (afp) reg_num <<= 1; /* (double) */

  003b4	83 7c 24 58 00	 cmp	 DWORD PTR afp$3[rsp], 0
  003b9	74 0a		 je	 SHORT $LN13@fpr_cmd
  003bb	8b 44 24 50	 mov	 eax, DWORD PTR reg_num$1[rsp]
  003bf	d1 e0		 shl	 eax, 1
  003c1	89 44 24 50	 mov	 DWORD PTR reg_num$1[rsp], eax
$LN13@fpr_cmd:

; 2485 :         regs->fpr[reg_num]   = (U32) (reg_value >> 32);

  003c5	48 8b 44 24 70	 mov	 rax, QWORD PTR reg_value$5[rsp]
  003ca	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  003ce	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR reg_num$1[rsp]
  003d3	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  003d8	89 84 8a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+832], eax

; 2486 :         regs->fpr[reg_num+1] = (U32) (reg_value & 0xFFFFFFFFULL);

  003df	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  003e4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR reg_value$5[rsp]
  003e9	48 23 c8	 and	 rcx, rax
  003ec	48 8b c1	 mov	 rax, rcx
  003ef	8b 4c 24 50	 mov	 ecx, DWORD PTR reg_num$1[rsp]
  003f3	ff c1		 inc	 ecx
  003f5	48 63 c9	 movsxd	 rcx, ecx
  003f8	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  003fd	89 84 8a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+832], eax
$LN6@fpr_cmd:

; 2487 :     }
; 2488 : 
; 2489 :     display_fregs( regs, buf, sizeof(buf), "HHC02270I " );

  00404	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161249
  0040b	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00411	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  00419	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0041e	e8 00 00 00 00	 call	 display_fregs

; 2490 :     WRMSG(   HHC02270, "I", "Floating point registers" );

  00423	b9 01 00 00 00	 mov	 ecx, 1
  00428	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0042e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161250
  00435	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0043a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161251
  00441	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00446	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161252
  0044d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00452	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00457	41 b9 03 00 00
	00		 mov	 r9d, 3
  0045d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161253
  00464	ba ba 09 00 00	 mov	 edx, 2490		; 000009baH
  00469	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161254
  00470	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2491 :     LOGMSG( "%s", buf );

  00476	b9 01 00 00 00	 mov	 ecx, 1
  0047b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00481	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00489	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161255
  00495	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049f	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161256
  004ac	ba bb 09 00 00	 mov	 edx, 2491		; 000009bbH
  004b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161257
  004b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2492 : 
; 2493 :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  004be	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004c5	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  004cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  004d3	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  004db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161258
  004e2	48 8b c8	 mov	 rcx, rax
  004e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2494 : 
; 2495 :     return 0;

  004eb	33 c0		 xor	 eax, eax
$LN1@fpr_cmd:

; 2496 : }

  004ed	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004f5	48 33 cc	 xor	 rcx, rsp
  004f8	e8 00 00 00 00	 call	 __security_check_cookie
  004fd	48 81 c4 a8 02
	00 00		 add	 rsp, 680		; 000002a8H
  00504	c3		 ret	 0
fpr_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
equal_sign$1 = 80
reg_num$2 = 84
c$3 = 88
regs$ = 96
reg_value$4 = 104
tv88 = 112
tv152 = 120
tv187 = 128
buf$ = 144
__$ArrayPad$ = 656
argc$ = 688
argv$ = 696
cmdline$ = 704
gpr_cmd	PROC

; 2376 : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@gpr_cmd:

; 2377 : REGS *regs;
; 2378 : char buf[512];
; 2379 : 
; 2380 :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@gpr_cmd

; 2381 : 
; 2382 :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00034	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161162
  00051	48 8b c8	 mov	 rcx, rax
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2383 : 
; 2384 :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  0005a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00061	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0006f	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00078	0f 85 ca 00 00
	00		 jne	 $LN5@gpr_cmd

; 2385 :     {
; 2386 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0007e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00085	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00093	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161164
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2387 :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  000ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b2	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000c0	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000ce	48 89 44 24 70	 mov	 QWORD PTR tv88[rsp], rax
  000d3	b9 01 00 00 00	 mov	 ecx, 1
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161165
  000e5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000f1	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000f7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000fb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv88[rsp]
  00100	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161166
  0010c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161167
  00118	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00122	41 b9 03 00 00
	00		 mov	 r9d, 3
  00128	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161168
  0012f	ba 53 09 00 00	 mov	 edx, 2387		; 00000953H
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161169
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2388 :         return 0;

  00141	33 c0		 xor	 eax, eax
  00143	e9 22 03 00 00	 jmp	 $LN1@gpr_cmd
$LN5@gpr_cmd:

; 2389 :     }
; 2390 : 
; 2391 :     regs = sysblk.regs[sysblk.pcpu];

  00148	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0014f	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00156	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0015d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00165	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax

; 2392 : 
; 2393 :     if (argc > 1)

  0016a	83 bc 24 b0 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00172	0f 8e 09 02 00
	00		 jle	 $LN6@gpr_cmd

; 2394 :     {
; 2395 :         int   reg_num;
; 2396 :         BYTE  equal_sign, c;
; 2397 :         U64   reg_value;
; 2398 : 
; 2399 :         if (argc > 2)

  00178	83 bc 24 b0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00180	0f 8e ab 00 00
	00		 jle	 $LN7@gpr_cmd

; 2400 :         {
; 2401 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00186	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0018d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00194	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0019b	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161172
  001aa	48 8b c8	 mov	 rcx, rax
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2402 :             WRMSG(HHC02205, "E", argv[1], "");

  001b3	b8 08 00 00 00	 mov	 eax, 8
  001b8	48 6b c0 01	 imul	 rax, rax, 1
  001bc	48 89 44 24 78	 mov	 QWORD PTR tv152[rsp], rax
  001c1	b9 01 00 00 00	 mov	 ecx, 1
  001c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161173
  001d3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001d8	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e0	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv152[rsp]
  001e5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001e9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161174
  001f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161175
  00201	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00206	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0020b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00211	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161176
  00218	ba 62 09 00 00	 mov	 edx, 2402		; 00000962H
  0021d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161177
  00224	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2403 :             return 0;

  0022a	33 c0		 xor	 eax, eax
  0022c	e9 39 02 00 00	 jmp	 $LN1@gpr_cmd
$LN7@gpr_cmd:

; 2404 :         }
; 2405 : 
; 2406 :         if (0
; 2407 :             || sscanf( argv[1], "%d%c%"SCNx64"%c", &reg_num, &equal_sign, &reg_value, &c ) != 3
; 2408 :             || 0  > reg_num
; 2409 :             || 15 < reg_num
; 2410 :             || '=' != equal_sign

  00231	33 c0		 xor	 eax, eax
  00233	85 c0		 test	 eax, eax
  00235	75 60		 jne	 SHORT $LN9@gpr_cmd
  00237	b8 08 00 00 00	 mov	 eax, 8
  0023c	48 6b c0 01	 imul	 rax, rax, 1
  00240	48 8d 4c 24 58	 lea	 rcx, QWORD PTR c$3[rsp]
  00245	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0024a	48 8d 4c 24 68	 lea	 rcx, QWORD PTR reg_value$4[rsp]
  0024f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00254	4c 8d 4c 24 50	 lea	 r9, QWORD PTR equal_sign$1[rsp]
  00259	4c 8d 44 24 54	 lea	 r8, QWORD PTR reg_num$2[rsp]
  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161180
  00265	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0026d	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00271	e8 00 00 00 00	 call	 sscanf
  00276	83 f8 03	 cmp	 eax, 3
  00279	75 1c		 jne	 SHORT $LN9@gpr_cmd
  0027b	83 7c 24 54 00	 cmp	 DWORD PTR reg_num$2[rsp], 0
  00280	7c 15		 jl	 SHORT $LN9@gpr_cmd
  00282	83 7c 24 54 0f	 cmp	 DWORD PTR reg_num$2[rsp], 15
  00287	7f 0e		 jg	 SHORT $LN9@gpr_cmd
  00289	0f b6 44 24 50	 movzx	 eax, BYTE PTR equal_sign$1[rsp]
  0028e	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00291	0f 84 b1 00 00
	00		 je	 $LN8@gpr_cmd
$LN9@gpr_cmd:

; 2411 :         )
; 2412 :         {
; 2413 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00297	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0029e	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  002a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002ac	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  002b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161181
  002bb	48 8b c8	 mov	 rcx, rax
  002be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2414 :             WRMSG(HHC02205, "E", argv[1], "");

  002c4	b8 08 00 00 00	 mov	 eax, 8
  002c9	48 6b c0 01	 imul	 rax, rax, 1
  002cd	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv187[rsp], rax
  002d5	b9 01 00 00 00	 mov	 ecx, 1
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161182
  002e7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002ec	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002f4	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv187[rsp]
  002fc	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00300	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161183
  0030c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161184
  00318	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00322	41 b9 03 00 00
	00		 mov	 r9d, 3
  00328	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161185
  0032f	ba 6e 09 00 00	 mov	 edx, 2414		; 0000096eH
  00334	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161186
  0033b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2415 :             return 0;

  00341	33 c0		 xor	 eax, eax
  00343	e9 22 01 00 00	 jmp	 $LN1@gpr_cmd
$LN8@gpr_cmd:

; 2416 :         }
; 2417 : 
; 2418 :         if ( ARCH_900_IDX == regs->arch_mode )

  00348	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  0034d	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  00351	75 19		 jne	 SHORT $LN10@gpr_cmd

; 2419 :             regs->GR_G(reg_num) = (U64) reg_value;

  00353	48 63 44 24 54	 movsxd	 rax, DWORD PTR reg_num$2[rsp]
  00358	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0035d	48 8b 54 24 68	 mov	 rdx, QWORD PTR reg_value$4[rsp]
  00362	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  0036a	eb 15		 jmp	 SHORT $LN11@gpr_cmd
$LN10@gpr_cmd:

; 2420 :         else
; 2421 :             regs->GR_L(reg_num) = (U32) reg_value;

  0036c	48 63 44 24 54	 movsxd	 rax, DWORD PTR reg_num$2[rsp]
  00371	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00376	8b 54 24 68	 mov	 edx, DWORD PTR reg_value$4[rsp]
  0037a	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN11@gpr_cmd:
$LN6@gpr_cmd:

; 2422 :     }
; 2423 : 
; 2424 :     display_gregs( regs, buf, sizeof(buf), "HHC02269I " );

  00381	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161189
  00388	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0038e	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  00396	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0039b	e8 00 00 00 00	 call	 display_gregs

; 2425 :     WRMSG(   HHC02269, "I", "General purpose registers" );

  003a0	b9 01 00 00 00	 mov	 ecx, 1
  003a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161190
  003b2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161191
  003be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161192
  003ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  003da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161193
  003e1	ba 79 09 00 00	 mov	 edx, 2425		; 00000979H
  003e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161194
  003ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2426 :     LOGMSG( "%s", buf );

  003f3	b9 01 00 00 00	 mov	 ecx, 1
  003f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003fe	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00406	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0040b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161195
  00412	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00417	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0041c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00422	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161196
  00429	ba 7a 09 00 00	 mov	 edx, 2426		; 0000097aH
  0042e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161197
  00435	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2427 : 
; 2428 :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0043b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00442	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00449	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00450	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00458	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161198
  0045f	48 8b c8	 mov	 rcx, rax
  00462	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2429 : 
; 2430 :     return 0;

  00468	33 c0		 xor	 eax, eax
$LN1@gpr_cmd:

; 2431 : }

  0046a	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00472	48 33 cc	 xor	 rcx, rsp
  00475	e8 00 00 00 00	 call	 __security_check_cookie
  0047a	48 81 c4 a8 02
	00 00		 add	 rsp, 680		; 000002a8H
  00481	c3		 ret	 0
gpr_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
c$1 = 80
regs$2 = 88
tv78 = 96
tv154 = 104
tv188 = 112
bear$3 = 120
tv207 = 128
tv225 = 136
cbear$4 = 144
__$ArrayPad$ = 168
argc$ = 192
argv$ = 200
cmdline$ = 208
bear_cmd PROC

; 2314 : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@bear_cmd:

; 2315 :     UNREFERENCED( cmdline );

  00028	33 c0		 xor	 eax, eax
  0002a	85 c0		 test	 eax, eax
  0002c	75 fa		 jne	 SHORT $LN4@bear_cmd
$LN7@bear_cmd:

; 2316 : 
; 2317 :     UPPER_ARGV_0( argv );

  0002e	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00037	74 47		 je	 SHORT $LN8@bear_cmd
  00039	b8 08 00 00 00	 mov	 eax, 8
  0003e	48 6b c0 00	 imul	 rax, rax, 0
  00042	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0004a	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004f	74 2f		 je	 SHORT $LN8@bear_cmd
  00051	b8 08 00 00 00	 mov	 eax, 8
  00056	48 6b c0 00	 imul	 rax, rax, 0
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006b	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00077	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007b	e8 00 00 00 00	 call	 strupper
$LN8@bear_cmd:
  00080	33 c0		 xor	 eax, eax
  00082	85 c0		 test	 eax, eax
  00084	75 a8		 jne	 SHORT $LN7@bear_cmd

; 2318 : 
; 2319 :     /* Correct number of arguments? */
; 2320 : 
; 2321 :     if (argc < 1 || argc > 2)

  00086	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008e	7c 0a		 jl	 SHORT $LN10@bear_cmd
  00090	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00098	7e 75		 jle	 SHORT $LN9@bear_cmd
$LN10@bear_cmd:

; 2322 :     {
; 2323 :         // "Invalid command usage. Type 'help %s' for assistance."
; 2324 :         WRMSG( HHC02299, "E", argv[0] );

  0009a	b8 08 00 00 00	 mov	 eax, 8
  0009f	48 6b c0 00	 imul	 rax, rax, 0
  000a3	48 89 44 24 60	 mov	 QWORD PTR tv78[rsp], rax
  000a8	b9 01 00 00 00	 mov	 ecx, 1
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000bb	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv78[rsp]
  000c0	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161109
  000d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161110
  000dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161111
  000f3	ba 14 09 00 00	 mov	 edx, 2324		; 00000914H
  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161112
  000ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2325 :         return -1;

  00105	b8 ff ff ff ff	 mov	 eax, -1
  0010a	e9 d1 03 00 00	 jmp	 $LN1@bear_cmd
$LN9@bear_cmd:

; 2326 :     }
; 2327 : 
; 2328 :     obtain_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  0010f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00116	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0011d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00124	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161113
  00133	48 8b c8	 mov	 rcx, rax
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2329 :     {
; 2330 :         REGS* regs = sysblk.regs[ sysblk.pcpu ];

  0013c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00143	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0014a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00151	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00159	48 89 44 24 58	 mov	 QWORD PTR regs$2[rsp], rax

; 2331 :         char cbear[17] = {0};

  0015e	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR cbear$4[rsp]
  00166	48 8b f8	 mov	 rdi, rax
  00169	33 c0		 xor	 eax, eax
  0016b	b9 11 00 00 00	 mov	 ecx, 17
  00170	f3 aa		 rep stosb

; 2332 : 
; 2333 :         if (!IS_CPU_ONLINE( sysblk.pcpu ))

  00172	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00179	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00180	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00187	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00190	0f 85 cd 00 00
	00		 jne	 $LN11@bear_cmd

; 2334 :         {
; 2335 :             release_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  00196	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0019d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  001a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001ab	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161115
  001ba	48 8b c8	 mov	 rcx, rax
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2336 :             // "Processor %s%02X: processor is not %s"
; 2337 :             WRMSG( HHC00816, "E", PTYPSTR( sysblk.pcpu ), sysblk.pcpu, "online");

  001c3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001ca	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  001d1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001d8	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  001e6	48 89 44 24 68	 mov	 QWORD PTR tv154[rsp], rax
  001eb	b9 01 00 00 00	 mov	 ecx, 1
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161116
  001fd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00202	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00209	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  0020f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00213	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv154[rsp]
  00218	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0021d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161117
  00224	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161118
  00230	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00235	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00240	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161119
  00247	ba 21 09 00 00	 mov	 edx, 2337		; 00000921H
  0024c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161120
  00253	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2338 :             return -1;

  00259	b8 ff ff ff ff	 mov	 eax, -1
  0025e	e9 7d 02 00 00	 jmp	 $LN1@bear_cmd
$LN11@bear_cmd:

; 2339 :         }
; 2340 : 
; 2341 :         if (argc > 1)       // (set new value)

  00263	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0026b	0f 8e 9c 01 00
	00		 jle	 $LN12@bear_cmd

; 2342 :         {
; 2343 :             U64 bear;
; 2344 :             BYTE c;
; 2345 : 
; 2346 :             if (sscanf( argv[1], "%"SCNx64"%c", &bear, &c) != 1)

  00271	b8 08 00 00 00	 mov	 eax, 8
  00276	48 6b c0 01	 imul	 rax, rax, 1
  0027a	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$1[rsp]
  0027f	4c 8d 44 24 78	 lea	 r8, QWORD PTR bear$3[rsp]
  00284	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161124
  0028b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00293	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00297	e8 00 00 00 00	 call	 sscanf
  0029c	83 f8 01	 cmp	 eax, 1
  0029f	0f 84 ae 00 00
	00		 je	 $LN14@bear_cmd

; 2347 :             {
; 2348 :                 release_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  002a5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002ac	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  002b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002ba	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  002c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161125
  002c9	48 8b c8	 mov	 rcx, rax
  002cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2349 :                 // "Invalid argument %s%s"
; 2350 :                 WRMSG( HHC02205, "E", argv[1], ": invalid address" );

  002d2	b8 08 00 00 00	 mov	 eax, 8
  002d7	48 6b c0 01	 imul	 rax, rax, 1
  002db	48 89 44 24 70	 mov	 QWORD PTR tv188[rsp], rax
  002e0	b9 01 00 00 00	 mov	 ecx, 1
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161126
  002f2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002f7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002ff	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv188[rsp]
  00304	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00308	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161127
  00314	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161128
  00320	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00325	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00330	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161129
  00337	ba 2e 09 00 00	 mov	 edx, 2350		; 0000092eH
  0033c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161130
  00343	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2351 :                 return -1;

  00349	b8 ff ff ff ff	 mov	 eax, -1
  0034e	e9 8d 01 00 00	 jmp	 $LN1@bear_cmd
$LN14@bear_cmd:

; 2352 :             }
; 2353 : 
; 2354 :             regs->bear = bear;

  00353	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$2[rsp]
  00358	48 8b 4c 24 78	 mov	 rcx, QWORD PTR bear$3[rsp]
  0035d	48 89 88 18 02
	00 00		 mov	 QWORD PTR [rax+536], rcx

; 2355 : 
; 2356 :             // "%-14s set to %s"
; 2357 :             MSGBUF( cbear, "%"PRIx64, regs->bear );

  00364	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$2[rsp]
  00369	4c 8b 88 18 02
	00 00		 mov	 r9, QWORD PTR [rax+536]
  00370	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161131
  00377	ba 11 00 00 00	 mov	 edx, 17
  0037c	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR cbear$4[rsp]
  00384	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2358 :             WRMSG( HHC02204, "I", argv[0], cbear );

  0038a	b8 08 00 00 00	 mov	 eax, 8
  0038f	48 6b c0 00	 imul	 rax, rax, 0
  00393	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv207[rsp], rax
  0039b	b9 01 00 00 00	 mov	 ecx, 1
  003a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003a6	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR cbear$4[rsp]
  003ae	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003b3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003bb	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv207[rsp]
  003c3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003c7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161132
  003d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161133
  003df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161134
  003f6	ba 36 09 00 00	 mov	 edx, 2358		; 00000936H
  003fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161135
  00402	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2359 :         }

  00408	e9 a4 00 00 00	 jmp	 $LN13@bear_cmd
$LN12@bear_cmd:

; 2360 :         else // (display current value)
; 2361 :         {
; 2362 :             // "%-14s: %s"
; 2363 :             MSGBUF( cbear, "%"PRIx64, regs->bear );

  0040d	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$2[rsp]
  00412	4c 8b 88 18 02
	00 00		 mov	 r9, QWORD PTR [rax+536]
  00419	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161136
  00420	ba 11 00 00 00	 mov	 edx, 17
  00425	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR cbear$4[rsp]
  0042d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2364 :             WRMSG( HHC02203, "I", argv[0], cbear );

  00433	b8 08 00 00 00	 mov	 eax, 8
  00438	48 6b c0 00	 imul	 rax, rax, 0
  0043c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv225[rsp], rax
  00444	b9 01 00 00 00	 mov	 ecx, 1
  00449	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0044f	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR cbear$4[rsp]
  00457	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0045c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00464	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv225[rsp]
  0046c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00470	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00475	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161137
  0047c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00481	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161138
  00488	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0048d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00492	41 b9 03 00 00
	00		 mov	 r9d, 3
  00498	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161139
  0049f	ba 3c 09 00 00	 mov	 edx, 2364		; 0000093cH
  004a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161140
  004ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@bear_cmd:

; 2365 :         }
; 2366 :     }
; 2367 :     release_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  004b1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004b8	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  004bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  004c6	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  004ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161141
  004d5	48 8b c8	 mov	 rcx, rax
  004d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2368 :     return 0;

  004de	33 c0		 xor	 eax, eax
$LN1@bear_cmd:

; 2369 : }

  004e0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004e8	48 33 cc	 xor	 rcx, rsp
  004eb	e8 00 00 00 00	 call	 __security_check_cookie
  004f0	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  004f7	5f		 pop	 rdi
  004f8	c3		 ret	 0
bear_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
i$ = 160
dev$ = 168
first$ = 176
last$ = 180
io$ = 184
crwcount$ = 192
crwarray$ = 200
crw$1 = 208
tv2139 = 212
tv2145 = 216
tv2168 = 220
tv2174 = 224
tv2193 = 228
tv2199 = 232
tv2222 = 236
tv2228 = 240
tv2251 = 244
tv2257 = 248
tv2312 = 252
tv2318 = 256
tv2341 = 260
tv2347 = 264
tv2405 = 268
tv252 = 272
tv289 = 276
tv358 = 280
tv395 = 284
tv432 = 288
tv469 = 292
tv506 = 296
tv543 = 300
tv608 = 304
tv647 = 308
tv686 = 312
tv727 = 316
tv764 = 320
tv847 = 324
tv884 = 328
tv927 = 332
tv961 = 336
tv1051 = 340
tv1100 = 344
tv1154 = 348
tv1220 = 352
tv1242 = 356
tv1269 = 360
tv1296 = 364
tv1323 = 368
tv1382 = 372
tv1409 = 376
tv175 = 380
tv1458 = 384
tv1516 = 388
tv1558 = 392
tv1585 = 396
tv1610 = 400
tv1634 = 404
tv1714 = 408
tv1436 = 412
tv1913 = 416
tv1963 = 420
tv2384 = 424
tv2388 = 428
tv2392 = 432
tv182 = 436
tv219 = 440
tv1795 = 444
tv212 = 448
tv245 = 456
tv282 = 464
tv319 = 472
tv388 = 480
tv425 = 488
tv462 = 496
tv499 = 504
tv536 = 512
tv601 = 520
tv640 = 528
tv679 = 536
tv720 = 544
tv757 = 552
tv1181 = 560
tv1235 = 568
tv1262 = 576
tv1289 = 584
tv1316 = 592
tv1343 = 600
tv1402 = 608
tv1429 = 616
tv1451 = 624
tv1509 = 632
tv1869 = 640
tv1886 = 648
tv1901 = 656
tv1919 = 664
tv1969 = 672
tv1984 = 680
tv2407 = 688
tv2413 = 696
tv2419 = 704
tv2424 = 712
tv80 = 720
tv129 = 728
tv137 = 736
tv2589 = 744
tv2588 = 752
tv184 = 760
tv221 = 768
tv254 = 776
tv291 = 784
tv360 = 792
tv397 = 800
tv434 = 808
tv471 = 816
tv508 = 824
tv577 = 832
tv610 = 840
tv649 = 848
tv688 = 856
tv2919 = 864
tv729 = 872
tv766 = 880
tv849 = 888
tv875 = 896
tv886 = 904
tv920 = 912
tv929 = 920
tv2530 = 928
tv963 = 936
tv1102 = 944
tv2523 = 952
tv2521 = 960
tv1576 = 968
tv1603 = 976
tv2449 = 984
tv1810 = 992
tv1827 = 1000
tv1835 = 1008
tv2087 = 1016
states$ = 1024
curpsw$ = 1056
sysid$ = 1072
buf$ = 1088
buf$2 = 1344
__$ArrayPad$ = 1600
argc$ = 1696
argv$ = 1704
cmdline$ = 1712
ipending_cmd PROC

; 1991 : {

$LN163:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	53		 push	 rbx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	41 54		 push	 r12
  00014	41 55		 push	 r13
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 81 ec 58 06
	00 00		 sub	 rsp, 1624		; 00000658H
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c4	 xor	 rax, rsp
  0002b	48 89 84 24 40
	06 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1992 :     DEVBLK *dev;                        /* -> Device block           */
; 1993 :     IOINT  *io;                         /* -> I/O interrupt entry    */
; 1994 :     U32    *crwarray;                   /* -> Channel Report queue   */
; 1995 :     unsigned crwcount;
; 1996 :     int     i;
; 1997 :     int first, last;
; 1998 :     char    sysid[12];
; 1999 :     BYTE    curpsw[16];
; 2000 :     char *states[] = { "?(0)", "STARTED", "STOPPING", "STOPPED" };

  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160689
  0003a	48 89 84 24 00
	04 00 00	 mov	 QWORD PTR states$[rsp], rax
  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160691
  00049	48 89 84 24 08
	04 00 00	 mov	 QWORD PTR states$[rsp+8], rax
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160693
  00058	48 89 84 24 10
	04 00 00	 mov	 QWORD PTR states$[rsp+16], rax
  00060	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160695
  00067	48 89 84 24 18
	04 00 00	 mov	 QWORD PTR states$[rsp+24], rax
$LN4@ipending_c:

; 2001 :     char buf[256];
; 2002 : 
; 2003 :     UNREFERENCED(argc);

  0006f	33 c0		 xor	 eax, eax
  00071	85 c0		 test	 eax, eax
  00073	75 fa		 jne	 SHORT $LN4@ipending_c
$LN7@ipending_c:

; 2004 :     UNREFERENCED(argv);

  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 fa		 jne	 SHORT $LN7@ipending_c
$LN10@ipending_c:

; 2005 :     UNREFERENCED(cmdline);

  0007b	33 c0		 xor	 eax, eax
  0007d	85 c0		 test	 eax, eax
  0007f	75 fa		 jne	 SHORT $LN10@ipending_c

; 2006 : 
; 2007 :     first = last = -1;

  00081	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR last$[rsp], -1
  0008c	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR last$[rsp]
  00093	89 84 24 b0 00
	00 00		 mov	 DWORD PTR first$[rsp], eax

; 2008 : 
; 2009 :     for (i = 0; i < sysblk.maxcpu; i++)

  0009a	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  000a5	eb 10		 jmp	 SHORT $LN13@ipending_c
$LN11@ipending_c:
  000a7	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  000ae	ff c0		 inc	 eax
  000b0	89 84 24 a0 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN13@ipending_c:
  000b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000be	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c4	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  000cb	0f 8d 61 2a 00
	00		 jge	 $LN12@ipending_c

; 2010 :     {
; 2011 :         if (!IS_CPU_ONLINE(i))

  000d1	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  000d9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e0	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  000e9	75 3a		 jne	 SHORT $LN23@ipending_c

; 2012 :         {
; 2013 :             if ( first == -1 )

  000eb	83 bc 24 b0 00
	00 00 ff	 cmp	 DWORD PTR first$[rsp], -1
  000f3	75 1e		 jne	 SHORT $LN24@ipending_c

; 2014 :                 first = last = i;

  000f5	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  000fc	89 84 24 b4 00
	00 00		 mov	 DWORD PTR last$[rsp], eax
  00103	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR last$[rsp]
  0010a	89 84 24 b0 00
	00 00		 mov	 DWORD PTR first$[rsp], eax
  00111	eb 10		 jmp	 SHORT $LN25@ipending_c
$LN24@ipending_c:

; 2015 :             else
; 2016 :                 last++;

  00113	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR last$[rsp]
  0011a	ff c0		 inc	 eax
  0011c	89 84 24 b4 00
	00 00		 mov	 DWORD PTR last$[rsp], eax
$LN25@ipending_c:

; 2017 :             continue;

  00123	eb 82		 jmp	 SHORT $LN11@ipending_c
$LN23@ipending_c:

; 2018 :         }
; 2019 : 
; 2020 :         /*---------------------*/
; 2021 :         /* CPU state and flags */
; 2022 :         /*---------------------*/
; 2023 : 
; 2024 :         if ( first > 0 )

  00125	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR first$[rsp], 0
  0012d	0f 8e 77 01 00
	00		 jle	 $LN26@ipending_c

; 2025 :         {
; 2026 :             if ( first == last )

  00133	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR last$[rsp]
  0013a	39 84 24 b0 00
	00 00		 cmp	 DWORD PTR first$[rsp], eax
  00141	0f 85 89 00 00
	00		 jne	 $LN27@ipending_c

; 2027 :                 WRMSG( HHC00820, "I", PTYPSTR(first), first );

  00147	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR first$[rsp]
  0014f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00156	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00164	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv80[rsp], rax
  0016c	b9 01 00 00 00	 mov	 ecx, 1
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00177	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR first$[rsp]
  0017e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00182	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR tv80[rsp]
  0018a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160702
  00196	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160703
  001a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160704
  001b9	ba eb 07 00 00	 mov	 edx, 2027		; 000007ebH
  001be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160705
  001c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001cb	e9 c1 00 00 00	 jmp	 $LN28@ipending_c
$LN27@ipending_c:

; 2028 :             else
; 2029 :                 WRMSG( HHC00815, "I", PTYPSTR(first), first, PTYPSTR(last), last );

  001d0	48 63 84 24 b4
	00 00 00	 movsxd	 rax, DWORD PTR last$[rsp]
  001d8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001df	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  001ed	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv129[rsp], rax
  001f5	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR first$[rsp]
  001fd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00204	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  0020c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00212	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv137[rsp], rax
  0021a	b9 01 00 00 00	 mov	 ecx, 1
  0021f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00225	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR last$[rsp]
  0022c	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00230	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR tv129[rsp]
  00238	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0023d	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR first$[rsp]
  00244	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00248	48 8b 8c 24 e0
	02 00 00	 mov	 rcx, QWORD PTR tv137[rsp]
  00250	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160706
  0025c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00261	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160707
  00268	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00272	41 b9 03 00 00
	00		 mov	 r9d, 3
  00278	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160708
  0027f	ba ed 07 00 00	 mov	 edx, 2029		; 000007edH
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160709
  0028b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@ipending_c:

; 2030 :             first = last = -1;

  00291	c7 84 24 b4 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR last$[rsp], -1
  0029c	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR last$[rsp]
  002a3	89 84 24 b0 00
	00 00		 mov	 DWORD PTR first$[rsp], eax
$LN26@ipending_c:

; 2031 :         }
; 2032 : 
; 2033 : // /*DEBUG*/logmsg( "hsccmd.c: %s%02X: Any cpu interrupt %spending\n",
; 2034 : // /*DEBUG*/    PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,
; 2035 : // /*DEBUG*/    sysblk.regs[i]->cpuint ? "" : "not " );
; 2036 : //
; 2037 :         WRMSG( HHC00850, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  002aa	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  002b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002b9	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  002c1	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv2589[rsp], rax
  002c9	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  002d1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  002d8	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  002e0	48 89 8c 24 f0
	02 00 00	 mov	 QWORD PTR tv2588[rsp], rcx
  002e8	48 63 94 24 a0
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  002f0	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  002f7	49 8b 94 d0 98
	0b 00 00	 mov	 rdx, QWORD PTR [r8+rdx*8+2968]
  002ff	4c 63 84 24 a0
	00 00 00	 movsxd	 r8, DWORD PTR i$[rsp]
  00307	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR __imp_sysblk
  0030e	4f 8b 84 c1 98
	0b 00 00	 mov	 r8, QWORD PTR [r9+r8*8+2968]
  00316	45 8b 40 4c	 mov	 r8d, DWORD PTR [r8+76]
  0031a	8b 52 48	 mov	 edx, DWORD PTR [rdx+72]
  0031d	41 23 d0	 and	 edx, r8d
  00320	89 94 24 7c 01
	00 00		 mov	 DWORD PTR tv175[rsp], edx
  00327	4c 63 84 24 a0
	00 00 00	 movsxd	 r8, DWORD PTR i$[rsp]
  0032f	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR __imp_sysblk
  00336	4f 8b 84 c1 98
	0b 00 00	 mov	 r8, QWORD PTR [r9+r8*8+2968]
  0033e	45 0f b7 80 3c
	08 00 00	 movzx	 r8d, WORD PTR [r8+2108]
  00346	44 89 84 24 b4
	01 00 00	 mov	 DWORD PTR tv182[rsp], r8d
  0034e	4c 63 8c 24 a0
	00 00 00	 movsxd	 r9, DWORD PTR i$[rsp]
  00356	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR __imp_sysblk
  0035d	4f 8b 8c ca 98
	0b 00 00	 mov	 r9, QWORD PTR [r10+r9*8+2968]
  00365	45 0f b7 89 3c
	08 00 00	 movzx	 r9d, WORD PTR [r9+2108]
  0036d	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR __imp_sysblk
  00374	43 0f b6 8c 0a
	48 0b 00 00	 movzx	 ecx, BYTE PTR [r10+r9+2888]
  0037d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00383	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv184[rsp], rax
  0038b	b9 01 00 00 00	 mov	 ecx, 1
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00396	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR tv2589[rsp]
  0039e	8b 49 4c	 mov	 ecx, DWORD PTR [rcx+76]
  003a1	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  003a5	48 8b 8c 24 f0
	02 00 00	 mov	 rcx, QWORD PTR tv2588[rsp]
  003ad	8b 49 48	 mov	 ecx, DWORD PTR [rcx+72]
  003b0	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  003b4	8b 8c 24 7c 01
	00 00		 mov	 ecx, DWORD PTR tv175[rsp]
  003bb	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  003bf	8b 8c 24 b4 01
	00 00		 mov	 ecx, DWORD PTR tv182[rsp]
  003c6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003ca	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR tv184[rsp]
  003d2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160710
  003de	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160711
  003ea	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f4	41 b9 03 00 00
	00		 mov	 r9d, 3
  003fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160712
  00401	ba f8 07 00 00	 mov	 edx, 2040		; 000007f8H
  00406	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160713
  0040d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2038 :                               IC_INTERRUPT_CPU(sysblk.regs[i]),
; 2039 :                               sysblk.regs[i]->ints_state,
; 2040 :                               sysblk.regs[i]->ints_mask);
; 2041 :         WRMSG( HHC00851, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00413	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0041b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00422	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0042a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0042d	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00432	85 c0		 test	 eax, eax
  00434	74 11		 je	 SHORT $LN65@ipending_c
  00436	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160714
  0043d	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv212[rsp], rax
  00445	eb 0f		 jmp	 SHORT $LN66@ipending_c
$LN65@ipending_c:
  00447	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160715
  0044e	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv212[rsp], rax
$LN66@ipending_c:
  00456	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0045e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00465	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0046d	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00474	89 84 24 b8 01
	00 00		 mov	 DWORD PTR tv219[rsp], eax
  0047b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00483	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  0048a	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00492	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  00499	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  004a0	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  004a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  004ae	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv221[rsp], rax
  004b6	b9 01 00 00 00	 mov	 ecx, 1
  004bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004c1	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv212[rsp]
  004c9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004ce	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR tv219[rsp]
  004d5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004d9	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR tv221[rsp]
  004e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160716
  004ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160717
  004f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00503	41 b9 03 00 00
	00		 mov	 r9d, 3
  00509	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160718
  00510	ba fa 07 00 00	 mov	 edx, 2042		; 000007faH
  00515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160719
  0051c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2042 :                               IS_IC_INTERRUPT(sysblk.regs[i]) ? "" : "not ");
; 2043 :         WRMSG( HHC00852, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00522	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00529	8b 80 a0 12 00
	00		 mov	 eax, DWORD PTR [rax+4768]
  0052f	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00534	85 c0		 test	 eax, eax
  00536	74 11		 je	 SHORT $LN67@ipending_c
  00538	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160720
  0053f	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv245[rsp], rax
  00547	eb 0f		 jmp	 SHORT $LN68@ipending_c
$LN67@ipending_c:
  00549	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160721
  00550	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv245[rsp], rax
$LN68@ipending_c:
  00558	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00560	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00567	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0056f	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00576	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv252[rsp], eax
  0057d	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00585	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  0058c	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00594	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  0059b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  005a2	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  005aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  005b0	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR tv254[rsp], rax
  005b8	b9 01 00 00 00	 mov	 ecx, 1
  005bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005c3	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv245[rsp]
  005cb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  005d0	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv252[rsp]
  005d7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005db	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR tv254[rsp]
  005e3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160722
  005ef	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160723
  005fb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00600	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00605	41 b9 03 00 00
	00		 mov	 r9d, 3
  0060b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160724
  00612	ba fc 07 00 00	 mov	 edx, 2044		; 000007fcH
  00617	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160725
  0061e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2044 :                               IS_IC_IOPENDING                 ? "" : "not ");
; 2045 :         WRMSG( HHC00853, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00624	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0062c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00633	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0063b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0063e	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00643	85 c0		 test	 eax, eax
  00645	74 11		 je	 SHORT $LN69@ipending_c
  00647	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160726
  0064e	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv282[rsp], rax
  00656	eb 0f		 jmp	 SHORT $LN70@ipending_c
$LN69@ipending_c:
  00658	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160727
  0065f	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv282[rsp], rax
$LN70@ipending_c:
  00667	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0066f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00676	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0067e	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00685	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv289[rsp], eax
  0068c	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00694	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  0069b	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  006a3	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  006aa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  006b1	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  006b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  006bf	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv291[rsp], rax
  006c7	b9 01 00 00 00	 mov	 ecx, 1
  006cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006d2	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv282[rsp]
  006da	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006df	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv289[rsp]
  006e6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006ea	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR tv291[rsp]
  006f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160728
  006fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00703	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160729
  0070a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0070f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00714	41 b9 03 00 00
	00		 mov	 r9d, 3
  0071a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160730
  00721	ba fe 07 00 00	 mov	 edx, 2046		; 000007feH
  00726	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160731
  0072d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2046 :                               IS_IC_CLKC(sysblk.regs[i])      ? "" : "not ");
; 2047 :         WRMSG( HHC00854, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00733	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0073b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00742	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0074a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0074d	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00752	85 c0		 test	 eax, eax
  00754	74 11		 je	 SHORT $LN71@ipending_c
  00756	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160732
  0075d	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv319[rsp], rax
  00765	eb 0f		 jmp	 SHORT $LN72@ipending_c
$LN71@ipending_c:
  00767	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160733
  0076e	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv319[rsp], rax
$LN72@ipending_c:
  00776	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0077e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00785	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0078d	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00794	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv358[rsp], eax
  0079b	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  007a3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  007aa	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  007b2	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  007b9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  007c0	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  007c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  007ce	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR tv360[rsp], rax
  007d6	b9 01 00 00 00	 mov	 ecx, 1
  007db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007e1	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv319[rsp]
  007e9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  007ee	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tv358[rsp]
  007f5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  007f9	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR tv360[rsp]
  00801	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00806	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160734
  0080d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00812	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160735
  00819	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0081e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00823	41 b9 03 00 00
	00		 mov	 r9d, 3
  00829	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160736
  00830	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00835	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160737
  0083c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2048 :                               IS_IC_PTIMER(sysblk.regs[i])    ? "" : "not ");
; 2049 : 
; 2050 : #if defined(_FEATURE_INTERVAL_TIMER)
; 2051 :         WRMSG( HHC00855, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00842	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0084a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00851	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00859	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0085c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00861	85 c0		 test	 eax, eax
  00863	74 11		 je	 SHORT $LN73@ipending_c
  00865	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160738
  0086c	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv388[rsp], rax
  00874	eb 0f		 jmp	 SHORT $LN74@ipending_c
$LN73@ipending_c:
  00876	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160739
  0087d	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv388[rsp], rax
$LN74@ipending_c:
  00885	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0088d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00894	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0089c	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  008a3	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv395[rsp], eax
  008aa	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  008b2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  008b9	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  008c1	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  008c8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  008cf	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  008d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  008dd	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR tv397[rsp], rax
  008e5	b9 01 00 00 00	 mov	 ecx, 1
  008ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008f0	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR tv388[rsp]
  008f8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  008fd	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR tv395[rsp]
  00904	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00908	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR tv397[rsp]
  00910	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00915	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160740
  0091c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00921	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160741
  00928	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0092d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00932	41 b9 03 00 00
	00		 mov	 r9d, 3
  00938	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160742
  0093f	ba 04 08 00 00	 mov	 edx, 2052		; 00000804H
  00944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160743
  0094b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2052 :                               IS_IC_ITIMER(sysblk.regs[i])    ? "" : "not ");
; 2053 : #if defined(_FEATURE_ECPSVM)
; 2054 :         WRMSG( HHC00856, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00951	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00959	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00960	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00968	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0096b	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00970	85 c0		 test	 eax, eax
  00972	74 11		 je	 SHORT $LN75@ipending_c
  00974	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160744
  0097b	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv425[rsp], rax
  00983	eb 0f		 jmp	 SHORT $LN76@ipending_c
$LN75@ipending_c:
  00985	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160745
  0098c	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv425[rsp], rax
$LN76@ipending_c:
  00994	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0099c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  009a3	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  009ab	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  009b2	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv432[rsp], eax
  009b9	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  009c1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  009c8	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  009d0	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  009d7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  009de	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  009e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  009ec	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR tv434[rsp], rax
  009f4	b9 01 00 00 00	 mov	 ecx, 1
  009f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009ff	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv425[rsp]
  00a07	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00a0c	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR tv432[rsp]
  00a13	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00a17	48 8b 8c 24 28
	03 00 00	 mov	 rcx, QWORD PTR tv434[rsp]
  00a1f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160746
  00a2b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160747
  00a37	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a3c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a41	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a47	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160748
  00a4e	ba 07 08 00 00	 mov	 edx, 2055		; 00000807H
  00a53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160749
  00a5a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2055 :                               IS_IC_ECPSVTIMER(sysblk.regs[i])? "" : "not ");
; 2056 : #endif /*defined(_FEATURE_ECPSVM)*/
; 2057 : #endif /*defined(_FEATURE_INTERVAL_TIMER)*/
; 2058 :         WRMSG( HHC00857, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00a60	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00a68	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a6f	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00a77	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00a7a	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00a7f	85 c0		 test	 eax, eax
  00a81	74 11		 je	 SHORT $LN77@ipending_c
  00a83	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160750
  00a8a	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv462[rsp], rax
  00a92	eb 0f		 jmp	 SHORT $LN78@ipending_c
$LN77@ipending_c:
  00a94	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160751
  00a9b	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv462[rsp], rax
$LN78@ipending_c:
  00aa3	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00aab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00ab2	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00aba	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00ac1	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv469[rsp], eax
  00ac8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00ad0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00ad7	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00adf	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  00ae6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00aed	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  00af5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00afb	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv471[rsp], rax
  00b03	b9 01 00 00 00	 mov	 ecx, 1
  00b08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b0e	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR tv462[rsp]
  00b16	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00b1b	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR tv469[rsp]
  00b22	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00b26	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR tv471[rsp]
  00b2e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160752
  00b3a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160753
  00b46	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b4b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b50	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b56	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160754
  00b5d	ba 0b 08 00 00	 mov	 edx, 2059		; 0000080bH
  00b62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160755
  00b69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2059 :                               IS_IC_EXTCALL(sysblk.regs[i]) ? "" : "not ");
; 2060 :         WRMSG( HHC00858, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00b6f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00b77	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00b7e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00b86	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00b89	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00b8e	85 c0		 test	 eax, eax
  00b90	74 11		 je	 SHORT $LN79@ipending_c
  00b92	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160756
  00b99	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv499[rsp], rax
  00ba1	eb 0f		 jmp	 SHORT $LN80@ipending_c
$LN79@ipending_c:
  00ba3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160757
  00baa	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv499[rsp], rax
$LN80@ipending_c:
  00bb2	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00bba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00bc1	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00bc9	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00bd0	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv506[rsp], eax
  00bd7	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00bdf	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00be6	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00bee	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  00bf5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00bfc	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  00c04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00c0a	48 89 84 24 38
	03 00 00	 mov	 QWORD PTR tv508[rsp], rax
  00c12	b9 01 00 00 00	 mov	 ecx, 1
  00c17	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c1d	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv499[rsp]
  00c25	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c2a	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR tv506[rsp]
  00c31	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c35	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR tv508[rsp]
  00c3d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c42	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160758
  00c49	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c4e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160759
  00c55	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c5a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c5f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c65	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160760
  00c6c	ba 0d 08 00 00	 mov	 edx, 2061		; 0000080dH
  00c71	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160761
  00c78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2061 :                               IS_IC_EMERSIG(sysblk.regs[i]) ? "" : "not ");
; 2062 :         WRMSG( HHC00859, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00c7e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00c86	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00c8d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00c95	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00c98	25 00 00 00 1f	 and	 eax, 520093696		; 1f000000H
  00c9d	85 c0		 test	 eax, eax
  00c9f	74 11		 je	 SHORT $LN81@ipending_c
  00ca1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160762
  00ca8	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv536[rsp], rax
  00cb0	eb 0f		 jmp	 SHORT $LN82@ipending_c
$LN81@ipending_c:
  00cb2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160763
  00cb9	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv536[rsp], rax
$LN82@ipending_c:
  00cc1	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00cc9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00cd0	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00cd8	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00cdf	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv543[rsp], eax
  00ce6	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00cee	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00cf5	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00cfd	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  00d04	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00d0b	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  00d13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00d19	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR tv577[rsp], rax
  00d21	b9 01 00 00 00	 mov	 ecx, 1
  00d26	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d2c	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR tv536[rsp]
  00d34	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00d39	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR tv543[rsp]
  00d40	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00d44	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR tv577[rsp]
  00d4c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160764
  00d58	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160765
  00d64	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d69	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d6e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d74	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160766
  00d7b	ba 0f 08 00 00	 mov	 edx, 2063		; 0000080fH
  00d80	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160767
  00d87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2063 :                               IS_IC_MCKPENDING(sysblk.regs[i]) ? "" : "not ");
; 2064 :         WRMSG( HHC00860, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00d8d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d94	8b 80 a0 12 00
	00		 mov	 eax, DWORD PTR [rax+4768]
  00d9a	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00d9f	85 c0		 test	 eax, eax
  00da1	74 11		 je	 SHORT $LN83@ipending_c
  00da3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160768
  00daa	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv601[rsp], rax
  00db2	eb 0f		 jmp	 SHORT $LN84@ipending_c
$LN83@ipending_c:
  00db4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160769
  00dbb	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv601[rsp], rax
$LN84@ipending_c:
  00dc3	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00dcb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00dd2	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00dda	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00de1	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv608[rsp], eax
  00de8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00df0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00df7	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00dff	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  00e06	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00e0d	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  00e15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00e1b	48 89 84 24 48
	03 00 00	 mov	 QWORD PTR tv610[rsp], rax
  00e23	b9 01 00 00 00	 mov	 ecx, 1
  00e28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e2e	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR tv601[rsp]
  00e36	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00e3b	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv608[rsp]
  00e42	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e46	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR tv610[rsp]
  00e4e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160770
  00e5a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160771
  00e66	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e6b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e70	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e76	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160772
  00e7d	ba 11 08 00 00	 mov	 edx, 2065		; 00000811H
  00e82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160773
  00e89	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2065 :                               IS_IC_SERVSIG ? "" : "not ");
; 2066 :         WRMSG( HHC00861, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00e8f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00e97	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00e9e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00ea6	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00ead	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00eb4	0f b7 89 60 10
	00 00		 movzx	 ecx, WORD PTR [rcx+4192]
  00ebb	3b c1		 cmp	 eax, ecx
  00ebd	75 11		 jne	 SHORT $LN85@ipending_c
  00ebf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160774
  00ec6	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv640[rsp], rax
  00ece	eb 0f		 jmp	 SHORT $LN86@ipending_c
$LN85@ipending_c:
  00ed0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160775
  00ed7	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv640[rsp], rax
$LN86@ipending_c:
  00edf	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00ee7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00eee	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00ef6	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00efd	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv647[rsp], eax
  00f04	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00f0c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00f13	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00f1b	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  00f22	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00f29	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  00f31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00f37	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR tv649[rsp], rax
  00f3f	b9 01 00 00 00	 mov	 ecx, 1
  00f44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f4a	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR tv640[rsp]
  00f52	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f57	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv647[rsp]
  00f5e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00f62	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR tv649[rsp]
  00f6a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f6f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160776
  00f76	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160777
  00f82	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f87	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f8c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f92	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160778
  00f99	ba 13 08 00 00	 mov	 edx, 2067		; 00000813H
  00f9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160779
  00fa5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2067 :                               sysblk.regs[i]->cpuad == sysblk.mainowner ? "yes" : "no");
; 2068 :         WRMSG( HHC00862, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  00fab	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00fb3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00fba	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00fc2	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00fc9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00fd0	0f b7 89 62 10
	00 00		 movzx	 ecx, WORD PTR [rcx+4194]
  00fd7	3b c1		 cmp	 eax, ecx
  00fd9	75 11		 jne	 SHORT $LN87@ipending_c
  00fdb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160780
  00fe2	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv679[rsp], rax
  00fea	eb 0f		 jmp	 SHORT $LN88@ipending_c
$LN87@ipending_c:
  00fec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160781
  00ff3	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv679[rsp], rax
$LN88@ipending_c:
  00ffb	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01003	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0100a	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01012	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01019	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv686[rsp], eax
  01020	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  01028	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  0102f	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  01037	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  0103e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01045	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  0104d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01053	48 89 84 24 58
	03 00 00	 mov	 QWORD PTR tv688[rsp], rax
  0105b	b9 01 00 00 00	 mov	 ecx, 1
  01060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01066	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR tv679[rsp]
  0106e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01073	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR tv686[rsp]
  0107a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0107e	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR tv688[rsp]
  01086	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0108b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160782
  01092	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160783
  0109e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010a8	41 b9 03 00 00
	00		 mov	 r9d, 3
  010ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160784
  010b5	ba 15 08 00 00	 mov	 edx, 2069		; 00000815H
  010ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160785
  010c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2069 :                               sysblk.regs[i]->cpuad == sysblk.intowner ? "yes" : "no");
; 2070 :         WRMSG( HHC00863, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  010c7	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  010cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  010d6	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  010de	0f b6 80 f0 08
	00 00		 movzx	 eax, BYTE PTR [rax+2288]
  010e5	85 c0		 test	 eax, eax
  010e7	74 4c		 je	 SHORT $LN89@ipending_c
  010e9	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  010f0	b9 01 00 00 00	 mov	 ecx, 1
  010f5	48 89 8c 24 60
	03 00 00	 mov	 QWORD PTR tv2919[rsp], rcx
  010fd	0f b6 c8	 movzx	 ecx, al
  01100	48 8b 84 24 60
	03 00 00	 mov	 rax, QWORD PTR tv2919[rsp]
  01108	48 d3 e0	 shl	 rax, cl
  0110b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01112	48 8b 89 b8 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4792]
  01119	48 23 c8	 and	 rcx, rax
  0111c	48 8b c1	 mov	 rax, rcx
  0111f	48 85 c0	 test	 rax, rax
  01122	75 11		 jne	 SHORT $LN89@ipending_c
  01124	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160786
  0112b	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv720[rsp], rax
  01133	eb 0f		 jmp	 SHORT $LN90@ipending_c
$LN89@ipending_c:
  01135	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160787
  0113c	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv720[rsp], rax
$LN90@ipending_c:
  01144	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0114c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01153	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0115b	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01162	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv727[rsp], eax
  01169	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  01171	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01178	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  01180	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  01187	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  0118e	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  01196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  0119c	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR tv729[rsp], rax
  011a4	b9 01 00 00 00	 mov	 ecx, 1
  011a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  011af	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR tv720[rsp]
  011b7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  011bc	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR tv727[rsp]
  011c3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  011c7	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR tv729[rsp]
  011cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  011d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160788
  011db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160789
  011e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  011f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160790
  011fe	ba 17 08 00 00	 mov	 edx, 2071		; 00000817H
  01203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160791
  0120a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2071 :                               sysblk.regs[i]->intwait && !(sysblk.waiting_mask & CPU_BIT(i)) ? "yes" : "no");
; 2072 :         WRMSG( HHC00864, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  01210	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01218	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0121f	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  01227	48 8b c8	 mov	 rcx, rax
  0122a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  01230	85 c0		 test	 eax, eax
  01232	74 11		 je	 SHORT $LN91@ipending_c
  01234	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160792
  0123b	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv757[rsp], rax
  01243	eb 0f		 jmp	 SHORT $LN92@ipending_c
$LN91@ipending_c:
  01245	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160793
  0124c	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv757[rsp], rax
$LN92@ipending_c:
  01254	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0125c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01263	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0126b	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01272	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv764[rsp], eax
  01279	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  01281	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01288	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  01290	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  01297	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  0129e	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  012a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  012ac	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR tv766[rsp], rax
  012b4	b9 01 00 00 00	 mov	 ecx, 1
  012b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012bf	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR tv757[rsp]
  012c7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  012cc	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR tv764[rsp]
  012d3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  012d7	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR tv766[rsp]
  012df	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  012e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160794
  012eb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160795
  012f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01301	41 b9 03 00 00
	00		 mov	 r9d, 3
  01307	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160796
  0130e	ba 19 08 00 00	 mov	 edx, 2073		; 00000819H
  01313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160797
  0131a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2073 :                               test_lock(&sysblk.cpulock[i]) ? "" : "not ");
; 2074 :         if (ARCH_370_IDX == sysblk.arch_mode)

  01320	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01327	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  0132e	0f 85 48 01 00
	00		 jne	 $LN29@ipending_c

; 2075 :         {
; 2076 :             if (0xFFFF == sysblk.regs[i]->chanset)

  01334	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0133c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01343	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0134b	0f b7 80 38 08
	00 00		 movzx	 eax, WORD PTR [rax+2104]
  01352	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  01357	75 1c		 jne	 SHORT $LN30@ipending_c

; 2077 :             {
; 2078 :                 MSGBUF( buf, "none");

  01359	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160801
  01360	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01365	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0136d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2079 :             }

  01373	eb 3b		 jmp	 SHORT $LN31@ipending_c
$LN30@ipending_c:

; 2080 :             else
; 2081 :             {
; 2082 :                 MSGBUF( buf, "%4.4X", sysblk.regs[i]->chanset);

  01375	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0137d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01384	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0138c	0f b7 80 38 08
	00 00		 movzx	 eax, WORD PTR [rax+2104]
  01393	44 8b c8	 mov	 r9d, eax
  01396	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160802
  0139d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  013a2	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  013aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ipending_c:

; 2083 :             }
; 2084 :             WRMSG( HHC00865, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad, buf );

  013b0	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  013b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  013bf	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  013c7	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  013ce	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv847[rsp], eax
  013d5	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  013dd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  013e4	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  013ec	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  013f3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  013fa	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  01402	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01408	48 89 84 24 78
	03 00 00	 mov	 QWORD PTR tv849[rsp], rax
  01410	b9 01 00 00 00	 mov	 ecx, 1
  01415	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0141b	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01423	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01428	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR tv847[rsp]
  0142f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01433	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR tv849[rsp]
  0143b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160803
  01447	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0144c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160804
  01453	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01458	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0145d	41 b9 03 00 00
	00		 mov	 r9d, 3
  01463	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160805
  0146a	ba 24 08 00 00	 mov	 edx, 2084		; 00000824H
  0146f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160806
  01476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ipending_c:

; 2085 :         }
; 2086 :         WRMSG( HHC00866, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad,

  0147c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01484	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0148b	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01493	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  01497	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR tv875[rsp], rax
  0149f	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  014a7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  014ae	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  014b6	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  014bd	89 8c 24 48 01
	00 00		 mov	 DWORD PTR tv884[rsp], ecx
  014c4	48 63 94 24 a0
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  014cc	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  014d3	49 8b 94 d0 98
	0b 00 00	 mov	 rdx, QWORD PTR [r8+rdx*8+2968]
  014db	0f b7 92 3c 08
	00 00		 movzx	 edx, WORD PTR [rdx+2108]
  014e2	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  014e9	41 0f b6 8c 10
	48 0b 00 00	 movzx	 ecx, BYTE PTR [r8+rdx+2888]
  014f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  014f8	48 89 84 24 88
	03 00 00	 mov	 QWORD PTR tv886[rsp], rax
  01500	b9 01 00 00 00	 mov	 ecx, 1
  01505	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0150b	48 8b 8c 24 80
	03 00 00	 mov	 rcx, QWORD PTR tv875[rsp]
  01513	48 8b 8c cc 00
	04 00 00	 mov	 rcx, QWORD PTR states$[rsp+rcx*8]
  0151b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01520	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv884[rsp]
  01527	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0152b	48 8b 8c 24 88
	03 00 00	 mov	 rcx, QWORD PTR tv886[rsp]
  01533	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01538	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160807
  0153f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01544	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160808
  0154b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01550	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01555	41 b9 03 00 00
	00		 mov	 r9d, 3
  0155b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160809
  01562	ba 27 08 00 00	 mov	 edx, 2087		; 00000827H
  01567	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160810
  0156e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2087 :                               states[sysblk.regs[i]->cpustate] );
; 2088 :         WRMSG( HHC00867, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad, INSTCOUNT(sysblk.regs[i]));

  01574	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0157c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01583	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0158b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  01592	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0159a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  015a1	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  015a9	48 8b 89 68 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2152]
  015b0	8b 89 98 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1944]
  015b6	48 03 88 90 07
	00 00		 add	 rcx, QWORD PTR [rax+1936]
  015bd	48 8b c1	 mov	 rax, rcx
  015c0	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR tv920[rsp], rax
  015c8	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  015d0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  015d7	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  015df	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  015e6	89 8c 24 4c 01
	00 00		 mov	 DWORD PTR tv927[rsp], ecx
  015ed	48 63 94 24 a0
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  015f5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  015fc	49 8b 94 d0 98
	0b 00 00	 mov	 rdx, QWORD PTR [r8+rdx*8+2968]
  01604	0f b7 92 3c 08
	00 00		 movzx	 edx, WORD PTR [rdx+2108]
  0160b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  01612	41 0f b6 8c 10
	48 0b 00 00	 movzx	 ecx, BYTE PTR [r8+rdx+2888]
  0161b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01621	48 89 84 24 98
	03 00 00	 mov	 QWORD PTR tv929[rsp], rax
  01629	b9 01 00 00 00	 mov	 ecx, 1
  0162e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01634	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR tv920[rsp]
  0163c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01641	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR tv927[rsp]
  01648	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0164c	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR tv929[rsp]
  01654	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01659	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160811
  01660	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01665	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160812
  0166c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01671	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01676	41 b9 03 00 00
	00		 mov	 r9d, 3
  0167c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160813
  01683	ba 28 08 00 00	 mov	 edx, 2088		; 00000828H
  01688	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160814
  0168f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2089 :         WRMSG( HHC00868, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad, sysblk.regs[i]->siototal);

  01695	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0169d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  016a4	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  016ac	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR tv2530[rsp], rax
  016b4	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  016bc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  016c3	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  016cb	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  016d2	89 8c 24 50 01
	00 00		 mov	 DWORD PTR tv961[rsp], ecx
  016d9	48 63 94 24 a0
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  016e1	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  016e8	49 8b 94 d0 98
	0b 00 00	 mov	 rdx, QWORD PTR [r8+rdx*8+2968]
  016f0	0f b7 92 3c 08
	00 00		 movzx	 edx, WORD PTR [rdx+2108]
  016f7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  016fe	41 0f b6 8c 10
	48 0b 00 00	 movzx	 ecx, BYTE PTR [r8+rdx+2888]
  01707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  0170d	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR tv963[rsp], rax
  01715	b9 01 00 00 00	 mov	 ecx, 1
  0171a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01720	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR tv2530[rsp]
  01728	48 8b 89 a8 07
	00 00		 mov	 rcx, QWORD PTR [rcx+1960]
  0172f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01734	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR tv961[rsp]
  0173b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0173f	48 8b 8c 24 a8
	03 00 00	 mov	 rcx, QWORD PTR tv963[rsp]
  01747	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0174c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160815
  01753	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01758	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160816
  0175f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01764	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01769	41 b9 03 00 00
	00		 mov	 r9d, 3
  0176f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160817
  01776	ba 29 08 00 00	 mov	 edx, 2089		; 00000829H
  0177b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160818
  01782	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2090 :         copy_psw(sysblk.regs[i], curpsw);

  01788	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01790	48 8d 94 24 20
	04 00 00	 lea	 rdx, QWORD PTR curpsw$[rsp]
  01798	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0179f	48 8b 8c c1 98
	0b 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+2968]
  017a7	e8 00 00 00 00	 call	 copy_psw

; 2091 :         if (ARCH_900_IDX == sysblk.arch_mode)

  017ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  017b3	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  017ba	0f 85 9f 01 00
	00		 jne	 $LN32@ipending_c

; 2092 :         {
; 2093 :             MSGBUF( buf, "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X",

  017c0	b8 01 00 00 00	 mov	 eax, 1
  017c5	48 6b c0 0f	 imul	 rax, rax, 15
  017c9	0f b6 84 04 20
	04 00 00	 movzx	 eax, BYTE PTR curpsw$[rsp+rax]
  017d1	b9 01 00 00 00	 mov	 ecx, 1
  017d6	48 6b c9 0e	 imul	 rcx, rcx, 14
  017da	0f b6 8c 0c 20
	04 00 00	 movzx	 ecx, BYTE PTR curpsw$[rsp+rcx]
  017e2	ba 01 00 00 00	 mov	 edx, 1
  017e7	48 6b d2 0d	 imul	 rdx, rdx, 13
  017eb	0f b6 94 14 20
	04 00 00	 movzx	 edx, BYTE PTR curpsw$[rsp+rdx]
  017f3	41 b8 01 00 00
	00		 mov	 r8d, 1
  017f9	4d 6b c0 0c	 imul	 r8, r8, 12
  017fd	46 0f b6 84 04
	20 04 00 00	 movzx	 r8d, BYTE PTR curpsw$[rsp+r8]
  01806	41 b9 01 00 00
	00		 mov	 r9d, 1
  0180c	4d 6b c9 0b	 imul	 r9, r9, 11
  01810	46 0f b6 8c 0c
	20 04 00 00	 movzx	 r9d, BYTE PTR curpsw$[rsp+r9]
  01819	41 ba 01 00 00
	00		 mov	 r10d, 1
  0181f	4d 6b d2 0a	 imul	 r10, r10, 10
  01823	46 0f b6 94 14
	20 04 00 00	 movzx	 r10d, BYTE PTR curpsw$[rsp+r10]
  0182c	41 bb 01 00 00
	00		 mov	 r11d, 1
  01832	4d 6b db 09	 imul	 r11, r11, 9
  01836	46 0f b6 9c 1c
	20 04 00 00	 movzx	 r11d, BYTE PTR curpsw$[rsp+r11]
  0183f	bb 01 00 00 00	 mov	 ebx, 1
  01844	48 6b db 08	 imul	 rbx, rbx, 8
  01848	0f b6 9c 1c 20
	04 00 00	 movzx	 ebx, BYTE PTR curpsw$[rsp+rbx]
  01850	bf 01 00 00 00	 mov	 edi, 1
  01855	48 6b ff 07	 imul	 rdi, rdi, 7
  01859	0f b6 bc 3c 20
	04 00 00	 movzx	 edi, BYTE PTR curpsw$[rsp+rdi]
  01861	be 01 00 00 00	 mov	 esi, 1
  01866	48 6b f6 06	 imul	 rsi, rsi, 6
  0186a	0f b6 b4 34 20
	04 00 00	 movzx	 esi, BYTE PTR curpsw$[rsp+rsi]
  01872	bd 01 00 00 00	 mov	 ebp, 1
  01877	48 6b ed 05	 imul	 rbp, rbp, 5
  0187b	0f b6 ac 2c 20
	04 00 00	 movzx	 ebp, BYTE PTR curpsw$[rsp+rbp]
  01883	41 be 01 00 00
	00		 mov	 r14d, 1
  01889	4d 6b f6 04	 imul	 r14, r14, 4
  0188d	46 0f b6 b4 34
	20 04 00 00	 movzx	 r14d, BYTE PTR curpsw$[rsp+r14]
  01896	41 bf 01 00 00
	00		 mov	 r15d, 1
  0189c	4d 6b ff 03	 imul	 r15, r15, 3
  018a0	46 0f b6 bc 3c
	20 04 00 00	 movzx	 r15d, BYTE PTR curpsw$[rsp+r15]
  018a9	41 bc 01 00 00
	00		 mov	 r12d, 1
  018af	4d 6b e4 02	 imul	 r12, r12, 2
  018b3	46 0f b6 a4 24
	20 04 00 00	 movzx	 r12d, BYTE PTR curpsw$[rsp+r12]
  018bc	41 bd 01 00 00
	00		 mov	 r13d, 1
  018c2	4d 6b ed 01	 imul	 r13, r13, 1
  018c6	46 0f b6 ac 2c
	20 04 00 00	 movzx	 r13d, BYTE PTR curpsw$[rsp+r13]
  018cf	44 89 ac 24 54
	01 00 00	 mov	 DWORD PTR tv1051[rsp], r13d
  018d7	41 bd 01 00 00
	00		 mov	 r13d, 1
  018dd	4d 6b ed 00	 imul	 r13, r13, 0
  018e1	46 0f b6 ac 2c
	20 04 00 00	 movzx	 r13d, BYTE PTR curpsw$[rsp+r13]
  018ea	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  018f1	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  018f8	89 94 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], edx
  018ff	44 89 44 24 78	 mov	 DWORD PTR [rsp+120], r8d
  01904	44 89 4c 24 70	 mov	 DWORD PTR [rsp+112], r9d
  01909	44 89 54 24 68	 mov	 DWORD PTR [rsp+104], r10d
  0190e	44 89 5c 24 60	 mov	 DWORD PTR [rsp+96], r11d
  01913	89 5c 24 58	 mov	 DWORD PTR [rsp+88], ebx
  01917	89 7c 24 50	 mov	 DWORD PTR [rsp+80], edi
  0191b	89 74 24 48	 mov	 DWORD PTR [rsp+72], esi
  0191f	89 6c 24 40	 mov	 DWORD PTR [rsp+64], ebp
  01923	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  01928	44 89 7c 24 30	 mov	 DWORD PTR [rsp+48], r15d
  0192d	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  01932	8b 84 24 54 01
	00 00		 mov	 eax, DWORD PTR tv1051[rsp]
  01939	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0193d	45 8b cd	 mov	 r9d, r13d
  01940	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160821
  01947	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0194c	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01954	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2094 :                 curpsw[0], curpsw[1], curpsw[2], curpsw[3],
; 2095 :                 curpsw[4], curpsw[5], curpsw[6], curpsw[7],
; 2096 :                 curpsw[8], curpsw[9], curpsw[10], curpsw[11],
; 2097 :                 curpsw[12], curpsw[13], curpsw[14], curpsw[15]);
; 2098 :         }

  0195a	e9 c3 00 00 00	 jmp	 $LN33@ipending_c
$LN32@ipending_c:

; 2099 :         else
; 2100 :         {
; 2101 :             MSGBUF( buf, "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X",

  0195f	b8 01 00 00 00	 mov	 eax, 1
  01964	48 6b c0 07	 imul	 rax, rax, 7
  01968	0f b6 84 04 20
	04 00 00	 movzx	 eax, BYTE PTR curpsw$[rsp+rax]
  01970	b9 01 00 00 00	 mov	 ecx, 1
  01975	48 6b c9 06	 imul	 rcx, rcx, 6
  01979	0f b6 8c 0c 20
	04 00 00	 movzx	 ecx, BYTE PTR curpsw$[rsp+rcx]
  01981	ba 01 00 00 00	 mov	 edx, 1
  01986	48 6b d2 05	 imul	 rdx, rdx, 5
  0198a	0f b6 94 14 20
	04 00 00	 movzx	 edx, BYTE PTR curpsw$[rsp+rdx]
  01992	bb 01 00 00 00	 mov	 ebx, 1
  01997	48 6b db 04	 imul	 rbx, rbx, 4
  0199b	0f b6 9c 1c 20
	04 00 00	 movzx	 ebx, BYTE PTR curpsw$[rsp+rbx]
  019a3	bf 01 00 00 00	 mov	 edi, 1
  019a8	48 6b ff 03	 imul	 rdi, rdi, 3
  019ac	0f b6 bc 3c 20
	04 00 00	 movzx	 edi, BYTE PTR curpsw$[rsp+rdi]
  019b4	be 01 00 00 00	 mov	 esi, 1
  019b9	48 6b f6 02	 imul	 rsi, rsi, 2
  019bd	0f b6 b4 34 20
	04 00 00	 movzx	 esi, BYTE PTR curpsw$[rsp+rsi]
  019c5	bd 01 00 00 00	 mov	 ebp, 1
  019ca	48 6b ed 01	 imul	 rbp, rbp, 1
  019ce	0f b6 ac 2c 20
	04 00 00	 movzx	 ebp, BYTE PTR curpsw$[rsp+rbp]
  019d6	41 b8 01 00 00
	00		 mov	 r8d, 1
  019dc	4d 6b c0 00	 imul	 r8, r8, 0
  019e0	46 0f b6 84 04
	20 04 00 00	 movzx	 r8d, BYTE PTR curpsw$[rsp+r8]
  019e9	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  019ed	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  019f1	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  019f5	89 5c 24 38	 mov	 DWORD PTR [rsp+56], ebx
  019f9	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  019fd	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  01a01	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  01a05	45 8b c8	 mov	 r9d, r8d
  01a08	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160822
  01a0f	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01a14	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01a1c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN33@ipending_c:

; 2102 :                 curpsw[0], curpsw[1], curpsw[2], curpsw[3],
; 2103 :                 curpsw[4], curpsw[5], curpsw[6], curpsw[7]);
; 2104 :         }
; 2105 :         WRMSG( HHC00869, "I", PTYPSTR(sysblk.regs[i]->cpuad), sysblk.regs[i]->cpuad, buf );

  01a22	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01a2a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01a31	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01a39	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01a40	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv1100[rsp], eax
  01a47	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  01a4f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01a56	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  01a5e	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  01a65	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01a6c	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  01a74	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01a7a	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR tv1102[rsp], rax
  01a82	b9 01 00 00 00	 mov	 ecx, 1
  01a87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01a8d	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01a95	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01a9a	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv1100[rsp]
  01aa1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01aa5	48 8b 8c 24 b0
	03 00 00	 mov	 rcx, QWORD PTR tv1102[rsp]
  01aad	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01ab2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160823
  01ab9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01abe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160824
  01ac5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01aca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01acf	41 b9 03 00 00
	00		 mov	 r9d, 3
  01ad5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160825
  01adc	ba 39 08 00 00	 mov	 edx, 2105		; 00000839H
  01ae1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160826
  01ae8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2106 : 
; 2107 :         /*--------------------------*/
; 2108 :         /* (same thing but for SIE) */
; 2109 :         /*--------------------------*/
; 2110 : 
; 2111 :         if (sysblk.regs[i]->sie_active)

  01aee	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01af6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01afd	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01b05	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  01b0b	83 e0 01	 and	 eax, 1
  01b0e	85 c0		 test	 eax, eax
  01b10	0f 84 17 10 00
	00		 je	 $LN34@ipending_c

; 2112 :         {
; 2113 :             WRMSG( HHC00850, "I", "IE", sysblk.regs[i]->cpuad,

  01b16	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01b1e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01b25	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01b2d	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  01b34	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv2523[rsp], rax
  01b3c	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  01b44	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01b4b	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  01b53	48 8b 89 70 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2160]
  01b5a	48 89 8c 24 c0
	03 00 00	 mov	 QWORD PTR tv2521[rsp], rcx
  01b62	48 63 94 24 a0
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  01b6a	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR __imp_sysblk
  01b71	48 8b 94 d3 98
	0b 00 00	 mov	 rdx, QWORD PTR [rbx+rdx*8+2968]
  01b79	48 63 9c 24 a0
	00 00 00	 movsxd	 rbx, DWORD PTR i$[rsp]
  01b81	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR __imp_sysblk
  01b88	48 8b 9c df 98
	0b 00 00	 mov	 rbx, QWORD PTR [rdi+rbx*8+2968]
  01b90	8b 5b 4c	 mov	 ebx, DWORD PTR [rbx+76]
  01b93	8b 52 48	 mov	 edx, DWORD PTR [rdx+72]
  01b96	23 d3		 and	 edx, ebx
  01b98	89 94 24 5c 01
	00 00		 mov	 DWORD PTR tv1154[rsp], edx
  01b9f	48 63 9c 24 a0
	00 00 00	 movsxd	 rbx, DWORD PTR i$[rsp]
  01ba7	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR __imp_sysblk
  01bae	48 8b 9c df 98
	0b 00 00	 mov	 rbx, QWORD PTR [rdi+rbx*8+2968]
  01bb6	0f b7 9b 3c 08
	00 00		 movzx	 ebx, WORD PTR [rbx+2108]
  01bbd	b9 01 00 00 00	 mov	 ecx, 1
  01bc2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01bc8	48 8b 8c 24 b8
	03 00 00	 mov	 rcx, QWORD PTR tv2523[rsp]
  01bd0	8b 49 4c	 mov	 ecx, DWORD PTR [rcx+76]
  01bd3	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  01bd7	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR tv2521[rsp]
  01bdf	8b 49 48	 mov	 ecx, DWORD PTR [rcx+72]
  01be2	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01be6	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR tv1154[rsp]
  01bed	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  01bf1	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  01bf5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160828
  01bfc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01c01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160829
  01c08	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01c0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160830
  01c14	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01c19	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01c1e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01c24	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160831
  01c2b	ba 44 08 00 00	 mov	 edx, 2116		; 00000844H
  01c30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160832
  01c37	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2114 :                             IC_INTERRUPT_CPU(sysblk.regs[i]),
; 2115 :                             GUEST( sysblk.regs[i] )->ints_state,
; 2116 :                             GUEST( sysblk.regs[i] )->ints_mask);
; 2117 :             WRMSG( HHC00851, "I", "IE", sysblk.regs[i]->cpuad,

  01c3d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01c45	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01c4c	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01c54	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  01c5b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01c5e	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  01c63	85 c0		 test	 eax, eax
  01c65	74 11		 je	 SHORT $LN93@ipending_c
  01c67	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160833
  01c6e	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv1181[rsp], rax
  01c76	eb 0f		 jmp	 SHORT $LN94@ipending_c
$LN93@ipending_c:
  01c78	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160834
  01c7f	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv1181[rsp], rax
$LN94@ipending_c:
  01c87	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01c8f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01c96	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01c9e	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01ca5	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1220[rsp], eax
  01cac	b9 01 00 00 00	 mov	 ecx, 1
  01cb1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01cb7	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR tv1181[rsp]
  01cbf	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01cc4	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR tv1220[rsp]
  01ccb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01ccf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160835
  01cd6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01cdb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160836
  01ce2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01ce7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160837
  01cee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01cf3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01cf8	41 b9 03 00 00
	00		 mov	 r9d, 3
  01cfe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160838
  01d05	ba 46 08 00 00	 mov	 edx, 2118		; 00000846H
  01d0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160839
  01d11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2118 :                             IS_IC_INTERRUPT( GUEST( sysblk.regs[i] )) ? "" : "not ");
; 2119 :             WRMSG( HHC00852, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_IOPENDING ? "" : "not ");

  01d17	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01d1e	8b 80 a0 12 00
	00		 mov	 eax, DWORD PTR [rax+4768]
  01d24	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  01d29	85 c0		 test	 eax, eax
  01d2b	74 11		 je	 SHORT $LN95@ipending_c
  01d2d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160840
  01d34	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv1235[rsp], rax
  01d3c	eb 0f		 jmp	 SHORT $LN96@ipending_c
$LN95@ipending_c:
  01d3e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160841
  01d45	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv1235[rsp], rax
$LN96@ipending_c:
  01d4d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01d55	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01d5c	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01d64	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01d6b	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv1242[rsp], eax
  01d72	b9 01 00 00 00	 mov	 ecx, 1
  01d77	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01d7d	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv1235[rsp]
  01d85	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01d8a	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR tv1242[rsp]
  01d91	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01d95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160842
  01d9c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01da1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160843
  01da8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01dad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160844
  01db4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01db9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01dbe	41 b9 03 00 00
	00		 mov	 r9d, 3
  01dc4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160845
  01dcb	ba 47 08 00 00	 mov	 edx, 2119		; 00000847H
  01dd0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160846
  01dd7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2120 :             WRMSG( HHC00853, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_CLKC(       GUEST( sysblk.regs[i] )) ? "" : "not ");

  01ddd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01de5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01dec	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01df4	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  01dfb	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01dfe	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01e03	85 c0		 test	 eax, eax
  01e05	74 11		 je	 SHORT $LN97@ipending_c
  01e07	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160847
  01e0e	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1262[rsp], rax
  01e16	eb 0f		 jmp	 SHORT $LN98@ipending_c
$LN97@ipending_c:
  01e18	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160848
  01e1f	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1262[rsp], rax
$LN98@ipending_c:
  01e27	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01e2f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01e36	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01e3e	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01e45	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv1269[rsp], eax
  01e4c	b9 01 00 00 00	 mov	 ecx, 1
  01e51	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01e57	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR tv1262[rsp]
  01e5f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01e64	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR tv1269[rsp]
  01e6b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01e6f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160849
  01e76	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01e7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160850
  01e82	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01e87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160851
  01e8e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01e93	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e98	41 b9 03 00 00
	00		 mov	 r9d, 3
  01e9e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160852
  01ea5	ba 48 08 00 00	 mov	 edx, 2120		; 00000848H
  01eaa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160853
  01eb1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2121 :             WRMSG( HHC00854, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_PTIMER(     GUEST( sysblk.regs[i] )) ? "" : "not ");

  01eb7	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01ebf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01ec6	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01ece	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  01ed5	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01ed8	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  01edd	85 c0		 test	 eax, eax
  01edf	74 11		 je	 SHORT $LN99@ipending_c
  01ee1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160854
  01ee8	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv1289[rsp], rax
  01ef0	eb 0f		 jmp	 SHORT $LN100@ipending_c
$LN99@ipending_c:
  01ef2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160855
  01ef9	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv1289[rsp], rax
$LN100@ipending_c:
  01f01	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01f09	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01f10	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01f18	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01f1f	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv1296[rsp], eax
  01f26	b9 01 00 00 00	 mov	 ecx, 1
  01f2b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01f31	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR tv1289[rsp]
  01f39	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01f3e	8b 8c 24 6c 01
	00 00		 mov	 ecx, DWORD PTR tv1296[rsp]
  01f45	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01f49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160856
  01f50	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01f55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160857
  01f5c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01f61	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160858
  01f68	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01f6d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01f72	41 b9 03 00 00
	00		 mov	 r9d, 3
  01f78	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160859
  01f7f	ba 49 08 00 00	 mov	 edx, 2121		; 00000849H
  01f84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160860
  01f8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2122 :             WRMSG( HHC00855, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_ITIMER(     GUEST( sysblk.regs[i] )) ? "" : "not ");

  01f91	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01f99	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01fa0	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01fa8	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  01faf	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01fb2	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01fb7	85 c0		 test	 eax, eax
  01fb9	74 11		 je	 SHORT $LN101@ipending_c
  01fbb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160861
  01fc2	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1316[rsp], rax
  01fca	eb 0f		 jmp	 SHORT $LN102@ipending_c
$LN101@ipending_c:
  01fcc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160862
  01fd3	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1316[rsp], rax
$LN102@ipending_c:
  01fdb	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  01fe3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01fea	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01ff2	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01ff9	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv1323[rsp], eax
  02000	b9 01 00 00 00	 mov	 ecx, 1
  02005	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0200b	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR tv1316[rsp]
  02013	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02018	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR tv1323[rsp]
  0201f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160863
  0202a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0202f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160864
  02036	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0203b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160865
  02042	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02047	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0204c	41 b9 03 00 00
	00		 mov	 r9d, 3
  02052	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160866
  02059	ba 4a 08 00 00	 mov	 edx, 2122		; 0000084aH
  0205e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160867
  02065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2123 :             WRMSG( HHC00857, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_EXTCALL(    GUEST( sysblk.regs[i] )) ? "" : "not ");

  0206b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02073	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0207a	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02082	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  02089	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0208c	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  02091	85 c0		 test	 eax, eax
  02093	74 11		 je	 SHORT $LN103@ipending_c
  02095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160868
  0209c	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1343[rsp], rax
  020a4	eb 0f		 jmp	 SHORT $LN104@ipending_c
$LN103@ipending_c:
  020a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160869
  020ad	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1343[rsp], rax
$LN104@ipending_c:
  020b5	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  020bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  020c4	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  020cc	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  020d3	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv1382[rsp], eax
  020da	b9 01 00 00 00	 mov	 ecx, 1
  020df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  020e5	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR tv1343[rsp]
  020ed	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  020f2	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR tv1382[rsp]
  020f9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  020fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160870
  02104	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160871
  02110	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160872
  0211c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02121	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02126	41 b9 03 00 00
	00		 mov	 r9d, 3
  0212c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160873
  02133	ba 4b 08 00 00	 mov	 edx, 2123		; 0000084bH
  02138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160874
  0213f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2124 :             WRMSG( HHC00858, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_EMERSIG(    GUEST( sysblk.regs[i] )) ? "" : "not ");

  02145	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0214d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02154	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0215c	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  02163	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  02166	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0216b	85 c0		 test	 eax, eax
  0216d	74 11		 je	 SHORT $LN105@ipending_c
  0216f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160875
  02176	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv1402[rsp], rax
  0217e	eb 0f		 jmp	 SHORT $LN106@ipending_c
$LN105@ipending_c:
  02180	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160876
  02187	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv1402[rsp], rax
$LN106@ipending_c:
  0218f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02197	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0219e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  021a6	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  021ad	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv1409[rsp], eax
  021b4	b9 01 00 00 00	 mov	 ecx, 1
  021b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  021bf	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR tv1402[rsp]
  021c7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  021cc	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tv1409[rsp]
  021d3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  021d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160877
  021de	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  021e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160878
  021ea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  021ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160879
  021f6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  021fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02200	41 b9 03 00 00
	00		 mov	 r9d, 3
  02206	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160880
  0220d	ba 4c 08 00 00	 mov	 edx, 2124		; 0000084cH
  02212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160881
  02219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2125 :             WRMSG( HHC00859, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_MCKPENDING( GUEST( sysblk.regs[i] )) ? "" : "not ");

  0221f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02227	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0222e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02236	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  0223d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  02240	25 00 00 00 1f	 and	 eax, 520093696		; 1f000000H
  02245	85 c0		 test	 eax, eax
  02247	74 11		 je	 SHORT $LN107@ipending_c
  02249	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160882
  02250	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1429[rsp], rax
  02258	eb 0f		 jmp	 SHORT $LN108@ipending_c
$LN107@ipending_c:
  0225a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160883
  02261	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1429[rsp], rax
$LN108@ipending_c:
  02269	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02271	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02278	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02280	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  02287	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv1436[rsp], eax
  0228e	b9 01 00 00 00	 mov	 ecx, 1
  02293	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02299	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR tv1429[rsp]
  022a1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  022a6	8b 8c 24 9c 01
	00 00		 mov	 ecx, DWORD PTR tv1436[rsp]
  022ad	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  022b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160884
  022b8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  022bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160885
  022c4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  022c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160886
  022d0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  022d5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  022da	41 b9 03 00 00
	00		 mov	 r9d, 3
  022e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160887
  022e7	ba 4d 08 00 00	 mov	 edx, 2125		; 0000084dH
  022ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160888
  022f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2126 :             WRMSG( HHC00860, "I", "IE", sysblk.regs[i]->cpuad, IS_IC_SERVSIG ? "" : "not ");

  022f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02300	8b 80 a0 12 00
	00		 mov	 eax, DWORD PTR [rax+4768]
  02306	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0230b	85 c0		 test	 eax, eax
  0230d	74 11		 je	 SHORT $LN109@ipending_c
  0230f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160889
  02316	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1451[rsp], rax
  0231e	eb 0f		 jmp	 SHORT $LN110@ipending_c
$LN109@ipending_c:
  02320	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160890
  02327	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1451[rsp], rax
$LN110@ipending_c:
  0232f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02337	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0233e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02346	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  0234d	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv1458[rsp], eax
  02354	b9 01 00 00 00	 mov	 ecx, 1
  02359	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0235f	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tv1451[rsp]
  02367	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0236c	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR tv1458[rsp]
  02373	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160891
  0237e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02383	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160892
  0238a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0238f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160893
  02396	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0239b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  023a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  023a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160894
  023ad	ba 4e 08 00 00	 mov	 edx, 2126		; 0000084eH
  023b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160895
  023b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2127 :             WRMSG( HHC00864, "I", "IE", sysblk.regs[i]->cpuad, test_lock(&sysblk.cpulock[i]) ? "" : "not ");

  023bf	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  023c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  023ce	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  023d6	48 8b c8	 mov	 rcx, rax
  023d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  023df	85 c0		 test	 eax, eax
  023e1	74 11		 je	 SHORT $LN111@ipending_c
  023e3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160896
  023ea	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1509[rsp], rax
  023f2	eb 0f		 jmp	 SHORT $LN112@ipending_c
$LN111@ipending_c:
  023f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160897
  023fb	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1509[rsp], rax
$LN112@ipending_c:
  02403	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0240b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02412	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0241a	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  02421	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv1516[rsp], eax
  02428	b9 01 00 00 00	 mov	 ecx, 1
  0242d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02433	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR tv1509[rsp]
  0243b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02440	8b 8c 24 84 01
	00 00		 mov	 ecx, DWORD PTR tv1516[rsp]
  02447	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0244b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160898
  02452	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02457	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160899
  0245e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02463	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160900
  0246a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0246f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02474	41 b9 03 00 00
	00		 mov	 r9d, 3
  0247a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160901
  02481	ba 4f 08 00 00	 mov	 edx, 2127		; 0000084fH
  02486	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160902
  0248d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2128 : 
; 2129 :             if (ARCH_370_IDX == sysblk.arch_mode)

  02493	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0249a	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  024a1	0f 85 1a 01 00
	00		 jne	 $LN35@ipending_c

; 2130 :             {
; 2131 :                 if (0xFFFF == GUEST( sysblk.regs[i] )->chanset)

  024a7	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  024af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  024b6	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  024be	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  024c5	0f b7 80 38 08
	00 00		 movzx	 eax, WORD PTR [rax+2104]
  024cc	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  024d1	75 1c		 jne	 SHORT $LN36@ipending_c

; 2132 :                 {
; 2133 :                     MSGBUF( buf, "none");

  024d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160906
  024da	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  024df	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  024e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2134 :                 }

  024ed	eb 42		 jmp	 SHORT $LN37@ipending_c
$LN36@ipending_c:

; 2135 :                 else
; 2136 :                 {
; 2137 :                     MSGBUF( buf, "%4.4X", GUEST( sysblk.regs[i] )->chanset);

  024ef	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  024f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  024fe	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02506	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  0250d	0f b7 80 38 08
	00 00		 movzx	 eax, WORD PTR [rax+2104]
  02514	44 8b c8	 mov	 r9d, eax
  02517	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160907
  0251e	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  02523	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0252b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN37@ipending_c:

; 2138 :                 }
; 2139 :                 WRMSG( HHC00865, "I", "IE", sysblk.regs[i]->cpuad, buf );

  02531	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02539	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02540	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02548	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  0254f	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv1558[rsp], eax
  02556	b9 01 00 00 00	 mov	 ecx, 1
  0255b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02561	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  02569	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0256e	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR tv1558[rsp]
  02575	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02579	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160908
  02580	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02585	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160909
  0258c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02591	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160910
  02598	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0259d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  025a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  025a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160911
  025af	ba 5b 08 00 00	 mov	 edx, 2139		; 0000085bH
  025b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160912
  025bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN35@ipending_c:

; 2140 :             }
; 2141 :             WRMSG( HHC00866, "I", "IE", sysblk.regs[i]->cpuad, states[ GUEST( sysblk.regs[i] )->cpustate ]);

  025c1	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  025c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  025d0	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  025d8	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  025df	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  025e3	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR tv1576[rsp], rax
  025eb	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  025f3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  025fa	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  02602	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  02609	89 8c 24 8c 01
	00 00		 mov	 DWORD PTR tv1585[rsp], ecx
  02610	b9 01 00 00 00	 mov	 ecx, 1
  02615	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0261b	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR tv1576[rsp]
  02623	48 8b 8c cc 00
	04 00 00	 mov	 rcx, QWORD PTR states$[rsp+rcx*8]
  0262b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02630	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR tv1585[rsp]
  02637	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0263b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160913
  02642	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02647	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160914
  0264e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02653	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160915
  0265a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0265f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02664	41 b9 03 00 00
	00		 mov	 r9d, 3
  0266a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160916
  02671	ba 5d 08 00 00	 mov	 edx, 2141		; 0000085dH
  02676	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160917
  0267d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2142 :             WRMSG( HHC00867, "I", "IE", sysblk.regs[i]->cpuad, (S64)GUEST( sysblk.regs[i] )->instcount);

  02683	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0268b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02692	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0269a	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  026a1	8b 80 98 07 00
	00		 mov	 eax, DWORD PTR [rax+1944]
  026a7	48 89 84 24 d0
	03 00 00	 mov	 QWORD PTR tv1603[rsp], rax
  026af	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  026b7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  026be	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  026c6	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  026cd	89 8c 24 90 01
	00 00		 mov	 DWORD PTR tv1610[rsp], ecx
  026d4	b9 01 00 00 00	 mov	 ecx, 1
  026d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  026df	48 8b 8c 24 d0
	03 00 00	 mov	 rcx, QWORD PTR tv1603[rsp]
  026e7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  026ec	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR tv1610[rsp]
  026f3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  026f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160918
  026fe	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02703	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160919
  0270a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0270f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160920
  02716	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0271b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02720	41 b9 03 00 00
	00		 mov	 r9d, 3
  02726	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160921
  0272d	ba 5e 08 00 00	 mov	 edx, 2142		; 0000085eH
  02732	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160922
  02739	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2143 :             WRMSG( HHC00868, "I", "IE", sysblk.regs[i]->cpuad, GUEST( sysblk.regs[i] )->siototal);

  0273f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02747	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0274e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02756	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  0275d	48 89 84 24 d8
	03 00 00	 mov	 QWORD PTR tv2449[rsp], rax
  02765	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0276d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  02774	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  0277c	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  02783	89 8c 24 94 01
	00 00		 mov	 DWORD PTR tv1634[rsp], ecx
  0278a	b9 01 00 00 00	 mov	 ecx, 1
  0278f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02795	48 8b 8c 24 d8
	03 00 00	 mov	 rcx, QWORD PTR tv2449[rsp]
  0279d	48 8b 89 a8 07
	00 00		 mov	 rcx, QWORD PTR [rcx+1960]
  027a4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  027a9	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR tv1634[rsp]
  027b0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  027b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160923
  027bb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  027c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160924
  027c7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  027cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160925
  027d3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  027d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  027dd	41 b9 03 00 00
	00		 mov	 r9d, 3
  027e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160926
  027ea	ba 5f 08 00 00	 mov	 edx, 2143		; 0000085fH
  027ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160927
  027f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2144 :             copy_psw( GUEST( sysblk.regs[i] ), curpsw );

  027fc	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02804	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0280b	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02813	48 8d 94 24 20
	04 00 00	 lea	 rdx, QWORD PTR curpsw$[rsp]
  0281b	48 8b 88 70 08
	00 00		 mov	 rcx, QWORD PTR [rax+2160]
  02822	e8 00 00 00 00	 call	 copy_psw

; 2145 :             if (ARCH_900_IDX == sysblk.arch_mode)

  02827	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0282e	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  02835	0f 85 9f 01 00
	00		 jne	 $LN38@ipending_c

; 2146 :             {
; 2147 :                MSGBUF( buf, "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X",

  0283b	b8 01 00 00 00	 mov	 eax, 1
  02840	48 6b c0 0f	 imul	 rax, rax, 15
  02844	0f b6 84 04 20
	04 00 00	 movzx	 eax, BYTE PTR curpsw$[rsp+rax]
  0284c	b9 01 00 00 00	 mov	 ecx, 1
  02851	48 6b c9 0e	 imul	 rcx, rcx, 14
  02855	0f b6 8c 0c 20
	04 00 00	 movzx	 ecx, BYTE PTR curpsw$[rsp+rcx]
  0285d	ba 01 00 00 00	 mov	 edx, 1
  02862	48 6b d2 0d	 imul	 rdx, rdx, 13
  02866	0f b6 94 14 20
	04 00 00	 movzx	 edx, BYTE PTR curpsw$[rsp+rdx]
  0286e	bb 01 00 00 00	 mov	 ebx, 1
  02873	48 6b db 0c	 imul	 rbx, rbx, 12
  02877	0f b6 9c 1c 20
	04 00 00	 movzx	 ebx, BYTE PTR curpsw$[rsp+rbx]
  0287f	bf 01 00 00 00	 mov	 edi, 1
  02884	48 6b ff 0b	 imul	 rdi, rdi, 11
  02888	0f b6 bc 3c 20
	04 00 00	 movzx	 edi, BYTE PTR curpsw$[rsp+rdi]
  02890	be 01 00 00 00	 mov	 esi, 1
  02895	48 6b f6 0a	 imul	 rsi, rsi, 10
  02899	0f b6 b4 34 20
	04 00 00	 movzx	 esi, BYTE PTR curpsw$[rsp+rsi]
  028a1	bd 01 00 00 00	 mov	 ebp, 1
  028a6	48 6b ed 09	 imul	 rbp, rbp, 9
  028aa	0f b6 ac 2c 20
	04 00 00	 movzx	 ebp, BYTE PTR curpsw$[rsp+rbp]
  028b2	41 b8 01 00 00
	00		 mov	 r8d, 1
  028b8	4d 6b c0 08	 imul	 r8, r8, 8
  028bc	46 0f b6 84 04
	20 04 00 00	 movzx	 r8d, BYTE PTR curpsw$[rsp+r8]
  028c5	41 b9 01 00 00
	00		 mov	 r9d, 1
  028cb	4d 6b c9 07	 imul	 r9, r9, 7
  028cf	46 0f b6 8c 0c
	20 04 00 00	 movzx	 r9d, BYTE PTR curpsw$[rsp+r9]
  028d8	41 ba 01 00 00
	00		 mov	 r10d, 1
  028de	4d 6b d2 06	 imul	 r10, r10, 6
  028e2	46 0f b6 94 14
	20 04 00 00	 movzx	 r10d, BYTE PTR curpsw$[rsp+r10]
  028eb	41 bb 01 00 00
	00		 mov	 r11d, 1
  028f1	4d 6b db 05	 imul	 r11, r11, 5
  028f5	46 0f b6 9c 1c
	20 04 00 00	 movzx	 r11d, BYTE PTR curpsw$[rsp+r11]
  028fe	41 be 01 00 00
	00		 mov	 r14d, 1
  02904	4d 6b f6 04	 imul	 r14, r14, 4
  02908	46 0f b6 b4 34
	20 04 00 00	 movzx	 r14d, BYTE PTR curpsw$[rsp+r14]
  02911	41 bf 01 00 00
	00		 mov	 r15d, 1
  02917	4d 6b ff 03	 imul	 r15, r15, 3
  0291b	46 0f b6 bc 3c
	20 04 00 00	 movzx	 r15d, BYTE PTR curpsw$[rsp+r15]
  02924	41 bc 01 00 00
	00		 mov	 r12d, 1
  0292a	4d 6b e4 02	 imul	 r12, r12, 2
  0292e	46 0f b6 a4 24
	20 04 00 00	 movzx	 r12d, BYTE PTR curpsw$[rsp+r12]
  02937	41 bd 01 00 00
	00		 mov	 r13d, 1
  0293d	4d 6b ed 01	 imul	 r13, r13, 1
  02941	46 0f b6 ac 2c
	20 04 00 00	 movzx	 r13d, BYTE PTR curpsw$[rsp+r13]
  0294a	44 89 ac 24 98
	01 00 00	 mov	 DWORD PTR tv1714[rsp], r13d
  02952	41 bd 01 00 00
	00		 mov	 r13d, 1
  02958	4d 6b ed 00	 imul	 r13, r13, 0
  0295c	46 0f b6 ac 2c
	20 04 00 00	 movzx	 r13d, BYTE PTR curpsw$[rsp+r13]
  02965	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  0296c	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  02973	89 94 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], edx
  0297a	89 5c 24 78	 mov	 DWORD PTR [rsp+120], ebx
  0297e	89 7c 24 70	 mov	 DWORD PTR [rsp+112], edi
  02982	89 74 24 68	 mov	 DWORD PTR [rsp+104], esi
  02986	89 6c 24 60	 mov	 DWORD PTR [rsp+96], ebp
  0298a	44 89 44 24 58	 mov	 DWORD PTR [rsp+88], r8d
  0298f	44 89 4c 24 50	 mov	 DWORD PTR [rsp+80], r9d
  02994	44 89 54 24 48	 mov	 DWORD PTR [rsp+72], r10d
  02999	44 89 5c 24 40	 mov	 DWORD PTR [rsp+64], r11d
  0299e	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  029a3	44 89 7c 24 30	 mov	 DWORD PTR [rsp+48], r15d
  029a8	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  029ad	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv1714[rsp]
  029b4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  029b8	45 8b cd	 mov	 r9d, r13d
  029bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160930
  029c2	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  029c7	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  029cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2148 :                    curpsw[0], curpsw[1], curpsw[2], curpsw[3],
; 2149 :                    curpsw[4], curpsw[5], curpsw[6], curpsw[7],
; 2150 :                    curpsw[8], curpsw[9], curpsw[10], curpsw[11],
; 2151 :                    curpsw[12], curpsw[13], curpsw[14], curpsw[15]);
; 2152 :             }

  029d5	e9 c3 00 00 00	 jmp	 $LN39@ipending_c
$LN38@ipending_c:

; 2153 :             else
; 2154 :             {
; 2155 :                MSGBUF( buf, "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X",

  029da	b8 01 00 00 00	 mov	 eax, 1
  029df	48 6b c0 07	 imul	 rax, rax, 7
  029e3	0f b6 84 04 20
	04 00 00	 movzx	 eax, BYTE PTR curpsw$[rsp+rax]
  029eb	b9 01 00 00 00	 mov	 ecx, 1
  029f0	48 6b c9 06	 imul	 rcx, rcx, 6
  029f4	0f b6 8c 0c 20
	04 00 00	 movzx	 ecx, BYTE PTR curpsw$[rsp+rcx]
  029fc	ba 01 00 00 00	 mov	 edx, 1
  02a01	48 6b d2 05	 imul	 rdx, rdx, 5
  02a05	0f b6 94 14 20
	04 00 00	 movzx	 edx, BYTE PTR curpsw$[rsp+rdx]
  02a0d	bb 01 00 00 00	 mov	 ebx, 1
  02a12	48 6b db 04	 imul	 rbx, rbx, 4
  02a16	0f b6 9c 1c 20
	04 00 00	 movzx	 ebx, BYTE PTR curpsw$[rsp+rbx]
  02a1e	bf 01 00 00 00	 mov	 edi, 1
  02a23	48 6b ff 03	 imul	 rdi, rdi, 3
  02a27	0f b6 bc 3c 20
	04 00 00	 movzx	 edi, BYTE PTR curpsw$[rsp+rdi]
  02a2f	be 01 00 00 00	 mov	 esi, 1
  02a34	48 6b f6 02	 imul	 rsi, rsi, 2
  02a38	0f b6 b4 34 20
	04 00 00	 movzx	 esi, BYTE PTR curpsw$[rsp+rsi]
  02a40	bd 01 00 00 00	 mov	 ebp, 1
  02a45	48 6b ed 01	 imul	 rbp, rbp, 1
  02a49	0f b6 ac 2c 20
	04 00 00	 movzx	 ebp, BYTE PTR curpsw$[rsp+rbp]
  02a51	41 b8 01 00 00
	00		 mov	 r8d, 1
  02a57	4d 6b c0 00	 imul	 r8, r8, 0
  02a5b	46 0f b6 84 04
	20 04 00 00	 movzx	 r8d, BYTE PTR curpsw$[rsp+r8]
  02a64	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  02a68	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  02a6c	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  02a70	89 5c 24 38	 mov	 DWORD PTR [rsp+56], ebx
  02a74	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  02a78	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  02a7c	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  02a80	45 8b c8	 mov	 r9d, r8d
  02a83	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160931
  02a8a	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  02a8f	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  02a97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN39@ipending_c:

; 2156 :                    curpsw[0], curpsw[1], curpsw[2], curpsw[3],
; 2157 :                    curpsw[4], curpsw[5], curpsw[6], curpsw[7]);
; 2158 :             }
; 2159 :             WRMSG(HHC00869, "I", "IE", sysblk.regs[i]->cpuad, buf);

  02a9d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02aa5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02aac	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  02ab4	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  02abb	89 84 24 bc 01
	00 00		 mov	 DWORD PTR tv1795[rsp], eax
  02ac2	b9 01 00 00 00	 mov	 ecx, 1
  02ac7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02acd	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  02ad5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02ada	8b 8c 24 bc 01
	00 00		 mov	 ecx, DWORD PTR tv1795[rsp]
  02ae1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02ae5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160932
  02aec	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02af1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160933
  02af8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02afd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160934
  02b04	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02b09	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02b0e	41 b9 03 00 00
	00		 mov	 r9d, 3
  02b14	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160935
  02b1b	ba 6f 08 00 00	 mov	 edx, 2159		; 0000086fH
  02b20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160936
  02b27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ipending_c:

; 2160 :         }
; 2161 :     }

  02b2d	e9 75 d5 ff ff	 jmp	 $LN11@ipending_c
$LN12@ipending_c:

; 2162 : 
; 2163 :     /*------------------------*/
; 2164 :     /* System masks and locks */
; 2165 :     /*------------------------*/
; 2166 : 
; 2167 :     if ( first > 0 )

  02b32	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR first$[rsp], 0
  02b3a	0f 8e 5e 01 00
	00		 jle	 $LN40@ipending_c

; 2168 :     {
; 2169 :         if ( first == last )

  02b40	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR last$[rsp]
  02b47	39 84 24 b0 00
	00 00		 cmp	 DWORD PTR first$[rsp], eax
  02b4e	0f 85 89 00 00
	00		 jne	 $LN41@ipending_c

; 2170 :             WRMSG( HHC00820, "I", PTYPSTR(first), first );

  02b54	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR first$[rsp]
  02b5c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02b63	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  02b6b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  02b71	48 89 84 24 e0
	03 00 00	 mov	 QWORD PTR tv1810[rsp], rax
  02b79	b9 01 00 00 00	 mov	 ecx, 1
  02b7e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02b84	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR first$[rsp]
  02b8b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02b8f	48 8b 8c 24 e0
	03 00 00	 mov	 rcx, QWORD PTR tv1810[rsp]
  02b97	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02b9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160940
  02ba3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02ba8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160941
  02baf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02bb4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02bb9	41 b9 03 00 00
	00		 mov	 r9d, 3
  02bbf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160942
  02bc6	ba 7a 08 00 00	 mov	 edx, 2170		; 0000087aH
  02bcb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160943
  02bd2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02bd8	e9 c1 00 00 00	 jmp	 $LN42@ipending_c
$LN41@ipending_c:

; 2171 :         else
; 2172 :             WRMSG( HHC00815, "I", PTYPSTR(first), first, PTYPSTR(last), last );

  02bdd	48 63 84 24 b4
	00 00 00	 movsxd	 rax, DWORD PTR last$[rsp]
  02be5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02bec	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  02bf4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  02bfa	48 89 84 24 e8
	03 00 00	 mov	 QWORD PTR tv1827[rsp], rax
  02c02	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR first$[rsp]
  02c0a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  02c11	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  02c19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  02c1f	48 89 84 24 f0
	03 00 00	 mov	 QWORD PTR tv1835[rsp], rax
  02c27	b9 01 00 00 00	 mov	 ecx, 1
  02c2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02c32	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR last$[rsp]
  02c39	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  02c3d	48 8b 8c 24 e8
	03 00 00	 mov	 rcx, QWORD PTR tv1827[rsp]
  02c45	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02c4a	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR first$[rsp]
  02c51	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02c55	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR tv1835[rsp]
  02c5d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02c62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160944
  02c69	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02c6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160945
  02c75	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02c7a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02c7f	41 b9 03 00 00
	00		 mov	 r9d, 3
  02c85	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160946
  02c8c	ba 7c 08 00 00	 mov	 edx, 2172		; 0000087cH
  02c91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160947
  02c98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN42@ipending_c:
$LN40@ipending_c:

; 2173 :     }
; 2174 : 
; 2175 :     // "config mask "F_CPU_BITMAP" started mask "F_CPU_BITMAP" waiting mask "F_CPU_BITMAP
; 2176 :     WRMSG( HHC00870, "I", sysblk.config_mask, sysblk.started_mask, sysblk.waiting_mask );

  02c9e	b9 01 00 00 00	 mov	 ecx, 1
  02ca3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02ca9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02cb0	48 8b 89 b8 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4792]
  02cb7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02cbc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02cc3	48 8b 89 b0 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4784]
  02cca	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02ccf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02cd6	48 8b 89 a8 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4776]
  02cdd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02ce2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160948
  02ce9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02cee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160949
  02cf5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02cfa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02cff	41 b9 03 00 00
	00		 mov	 r9d, 3
  02d05	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160950
  02d0c	ba 80 08 00 00	 mov	 edx, 2176		; 00000880H
  02d11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160951
  02d18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2177 : 
; 2178 :     // "syncbc mask "F_CPU_BITMAP" %s"
; 2179 :     WRMSG( HHC00871, "I", sysblk.sync_mask, sysblk.syncing ? "sync in progress" : "" );

  02d1e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02d25	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  02d2c	85 c0		 test	 eax, eax
  02d2e	74 11		 je	 SHORT $LN113@ipending_c
  02d30	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160952
  02d37	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv1869[rsp], rax
  02d3f	eb 0f		 jmp	 SHORT $LN114@ipending_c
$LN113@ipending_c:
  02d41	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160953
  02d48	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv1869[rsp], rax
$LN114@ipending_c:
  02d50	b9 01 00 00 00	 mov	 ecx, 1
  02d55	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02d5b	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR tv1869[rsp]
  02d63	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02d68	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  02d6f	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  02d76	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02d7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160954
  02d82	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02d87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160955
  02d8e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02d93	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02d98	41 b9 03 00 00
	00		 mov	 r9d, 3
  02d9e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160956
  02da5	ba 83 08 00 00	 mov	 edx, 2179		; 00000883H
  02daa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160957
  02db1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2180 : 
; 2181 :     WRMSG( HHC00872, "I", test_lock(&sysblk.sigplock) ? "" : "not ");

  02db7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02dbe	48 05 80 10 00
	00		 add	 rax, 4224		; 00001080H
  02dc4	48 8b c8	 mov	 rcx, rax
  02dc7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  02dcd	85 c0		 test	 eax, eax
  02dcf	74 11		 je	 SHORT $LN115@ipending_c
  02dd1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160958
  02dd8	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv1886[rsp], rax
  02de0	eb 0f		 jmp	 SHORT $LN116@ipending_c
$LN115@ipending_c:
  02de2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160959
  02de9	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv1886[rsp], rax
$LN116@ipending_c:
  02df1	b9 01 00 00 00	 mov	 ecx, 1
  02df6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02dfc	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR tv1886[rsp]
  02e04	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02e09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160960
  02e10	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02e15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160961
  02e1c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02e21	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02e26	41 b9 03 00 00
	00		 mov	 r9d, 3
  02e2c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160962
  02e33	ba 85 08 00 00	 mov	 edx, 2181		; 00000885H
  02e38	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160963
  02e3f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2182 :     WRMSG( HHC00873, "I", test_lock(&sysblk.todlock) ? "" : "not ");

  02e45	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02e4c	48 05 88 0b 00
	00		 add	 rax, 2952		; 00000b88H
  02e52	48 8b c8	 mov	 rcx, rax
  02e55	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  02e5b	85 c0		 test	 eax, eax
  02e5d	74 11		 je	 SHORT $LN117@ipending_c
  02e5f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160964
  02e66	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv1901[rsp], rax
  02e6e	eb 0f		 jmp	 SHORT $LN118@ipending_c
$LN117@ipending_c:
  02e70	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160965
  02e77	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv1901[rsp], rax
$LN118@ipending_c:
  02e7f	b9 01 00 00 00	 mov	 ecx, 1
  02e84	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02e8a	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR tv1901[rsp]
  02e92	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02e97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160966
  02e9e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02ea3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160967
  02eaa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02eaf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02eb4	41 b9 03 00 00
	00		 mov	 r9d, 3
  02eba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160968
  02ec1	ba 86 08 00 00	 mov	 edx, 2182		; 00000886H
  02ec6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160969
  02ecd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2183 :     WRMSG( HHC00874, "I", test_lock(&sysblk.mainlock) ? "" : "not ", sysblk.mainowner);

  02ed3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02eda	48 05 68 10 00
	00		 add	 rax, 4200		; 00001068H
  02ee0	48 8b c8	 mov	 rcx, rax
  02ee3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  02ee9	85 c0		 test	 eax, eax
  02eeb	74 11		 je	 SHORT $LN119@ipending_c
  02eed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160970
  02ef4	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv1919[rsp], rax
  02efc	eb 0f		 jmp	 SHORT $LN120@ipending_c
$LN119@ipending_c:
  02efe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160971
  02f05	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv1919[rsp], rax
$LN120@ipending_c:
  02f0d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02f14	0f b7 80 60 10
	00 00		 movzx	 eax, WORD PTR [rax+4192]
  02f1b	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv1913[rsp], eax
  02f22	b9 01 00 00 00	 mov	 ecx, 1
  02f27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02f2d	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR tv1913[rsp]
  02f34	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02f38	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR tv1919[rsp]
  02f40	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02f45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160972
  02f4c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02f51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160973
  02f58	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02f5d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02f62	41 b9 03 00 00
	00		 mov	 r9d, 3
  02f68	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160974
  02f6f	ba 87 08 00 00	 mov	 edx, 2183		; 00000887H
  02f74	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160975
  02f7b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2184 :     WRMSG( HHC00875, "I", test_lock(&sysblk.intlock) ? "" : "not ", sysblk.intowner);

  02f81	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02f88	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  02f8e	48 8b c8	 mov	 rcx, rax
  02f91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  02f97	85 c0		 test	 eax, eax
  02f99	74 11		 je	 SHORT $LN121@ipending_c
  02f9b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160976
  02fa2	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv1969[rsp], rax
  02faa	eb 0f		 jmp	 SHORT $LN122@ipending_c
$LN121@ipending_c:
  02fac	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160977
  02fb3	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv1969[rsp], rax
$LN122@ipending_c:
  02fbb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02fc2	0f b7 80 62 10
	00 00		 movzx	 eax, WORD PTR [rax+4194]
  02fc9	89 84 24 a4 01
	00 00		 mov	 DWORD PTR tv1963[rsp], eax
  02fd0	b9 01 00 00 00	 mov	 ecx, 1
  02fd5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02fdb	8b 8c 24 a4 01
	00 00		 mov	 ecx, DWORD PTR tv1963[rsp]
  02fe2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02fe6	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR tv1969[rsp]
  02fee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02ff3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160978
  02ffa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02fff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160979
  03006	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0300b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03010	41 b9 03 00 00
	00		 mov	 r9d, 3
  03016	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160980
  0301d	ba 88 08 00 00	 mov	 edx, 2184		; 00000888H
  03022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160981
  03029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2185 :     WRMSG( HHC00876, "I", test_lock(&sysblk.ioqlock) ? "" : "not ");

  0302f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03036	48 05 38 12 00
	00		 add	 rax, 4664		; 00001238H
  0303c	48 8b c8	 mov	 rcx, rax
  0303f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  03045	85 c0		 test	 eax, eax
  03047	74 11		 je	 SHORT $LN123@ipending_c
  03049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160982
  03050	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv1984[rsp], rax
  03058	eb 0f		 jmp	 SHORT $LN124@ipending_c
$LN123@ipending_c:
  0305a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160983
  03061	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv1984[rsp], rax
$LN124@ipending_c:
  03069	b9 01 00 00 00	 mov	 ecx, 1
  0306e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03074	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR tv1984[rsp]
  0307c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  03081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160984
  03088	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0308d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160985
  03094	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03099	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0309e	41 b9 03 00 00
	00		 mov	 r9d, 3
  030a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160986
  030ab	ba 89 08 00 00	 mov	 edx, 2185		; 00000889H
  030b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160987
  030b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2186 : 
; 2187 :     /*----------------------*/
; 2188 :     /* Channel Report queue */
; 2189 :     /*----------------------*/
; 2190 : 
; 2191 :     OBTAIN_CRWLOCK();

  030bd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  030c4	48 05 08 12 00
	00		 add	 rax, 4616		; 00001208H
  030ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160988
  030d1	48 8b c8	 mov	 rcx, rax
  030d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2192 : 
; 2193 :     if ((crwarray = sysblk.crwarray) != NULL)

  030da	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  030e1	48 8b 80 10 12
	00 00		 mov	 rax, QWORD PTR [rax+4624]
  030e8	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR crwarray$[rsp], rax
  030f0	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR crwarray$[rsp], 0
  030f9	74 6b		 je	 SHORT $LN43@ipending_c

; 2194 :         if ((crwcount = sysblk.crwcount) != 0)

  030fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03102	8b 80 1c 12 00
	00		 mov	 eax, DWORD PTR [rax+4636]
  03108	89 84 24 c0 00
	00 00		 mov	 DWORD PTR crwcount$[rsp], eax
  0310f	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR crwcount$[rsp], 0
  03117	74 4d		 je	 SHORT $LN44@ipending_c

; 2195 :             if ((crwarray = malloc( crwcount * sizeof(U32) )) != NULL)

  03119	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR crwcount$[rsp]
  03120	48 c1 e0 02	 shl	 rax, 2
  03124	48 8b c8	 mov	 rcx, rax
  03127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0312d	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR crwarray$[rsp], rax
  03135	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR crwarray$[rsp], 0
  0313e	74 26		 je	 SHORT $LN45@ipending_c

; 2196 :                 memcpy( crwarray, sysblk.crwarray, crwcount * sizeof(U32));

  03140	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR crwcount$[rsp]
  03147	48 c1 e0 02	 shl	 rax, 2
  0314b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  03152	48 8b bc 24 c8
	00 00 00	 mov	 rdi, QWORD PTR crwarray$[rsp]
  0315a	48 8b b1 10 12
	00 00		 mov	 rsi, QWORD PTR [rcx+4624]
  03161	48 8b c8	 mov	 rcx, rax
  03164	f3 a4		 rep movsb
$LN45@ipending_c:
$LN44@ipending_c:
$LN43@ipending_c:

; 2197 : 
; 2198 :     RELEASE_CRWLOCK();

  03166	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0316d	48 05 08 12 00
	00		 add	 rax, 4616		; 00001208H
  03173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160992
  0317a	48 8b c8	 mov	 rcx, rax
  0317d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2199 : 
; 2200 :     if (!crwarray)

  03183	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR crwarray$[rsp], 0
  0318c	75 4c		 jne	 SHORT $LN46@ipending_c

; 2201 :         //     HHC00883 "Channel Report queue: (NULL)"
; 2202 :         WRMSG( HHC00883, "I");

  0318e	b9 01 00 00 00	 mov	 ecx, 1
  03193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03199	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160995
  031a0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  031a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160996
  031ac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  031b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  031b6	41 b9 03 00 00
	00		 mov	 r9d, 3
  031bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160997
  031c3	ba 9a 08 00 00	 mov	 edx, 2202		; 0000089aH
  031c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160998
  031cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  031d5	e9 7c 01 00 00	 jmp	 $LN47@ipending_c
$LN46@ipending_c:

; 2203 :     else if (!crwcount)

  031da	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR crwcount$[rsp], 0
  031e2	75 4c		 jne	 SHORT $LN48@ipending_c

; 2204 :         //     HHC00884 "Channel Report queue: (empty)"
; 2205 :         WRMSG( HHC00884, "I");

  031e4	b9 01 00 00 00	 mov	 ecx, 1
  031e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  031ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161001
  031f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  031fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161002
  03202	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03207	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0320c	41 b9 03 00 00
	00		 mov	 r9d, 3
  03212	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161003
  03219	ba 9d 08 00 00	 mov	 edx, 2205		; 0000089dH
  0321e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161004
  03225	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0322b	e9 26 01 00 00	 jmp	 $LN49@ipending_c
$LN48@ipending_c:

; 2206 :     else
; 2207 :     {
; 2208 :         U32 crw;
; 2209 :         char buf[256];
; 2210 : 
; 2211 :         //     HHC00885 "Channel Report queue:"
; 2212 :         WRMSG( HHC00885, "I");

  03230	b9 01 00 00 00	 mov	 ecx, 1
  03235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0323b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161005
  03242	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161006
  0324e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03253	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03258	41 b9 03 00 00
	00		 mov	 r9d, 3
  0325e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161007
  03265	ba a4 08 00 00	 mov	 edx, 2212		; 000008a4H
  0326a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161008
  03271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2213 : 
; 2214 :         for (i=0; i < (int) crwcount; i++)

  03277	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  03282	eb 10		 jmp	 SHORT $LN16@ipending_c
$LN14@ipending_c:
  03284	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0328b	ff c0		 inc	 eax
  0328d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN16@ipending_c:
  03294	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR crwcount$[rsp]
  0329b	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  032a2	0f 8d a0 00 00
	00		 jge	 $LN15@ipending_c

; 2215 :         {
; 2216 :             crw = *(crwarray + i);

  032a8	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  032b0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR crwarray$[rsp]
  032b8	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  032bb	89 84 24 d0 00
	00 00		 mov	 DWORD PTR crw$1[rsp], eax

; 2217 :             //     HHC00886 "CRW 0x%8.8X: %s"
; 2218 :             WRMSG( HHC00886, "I", crw, FormatCRW( crw, buf, sizeof(buf) ));

  032c2	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  032c8	48 8d 94 24 40
	05 00 00	 lea	 rdx, QWORD PTR buf$2[rsp]
  032d0	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR crw$1[rsp]
  032d7	e8 00 00 00 00	 call	 FormatCRW
  032dc	48 89 84 24 f8
	03 00 00	 mov	 QWORD PTR tv2087[rsp], rax
  032e4	b9 01 00 00 00	 mov	 ecx, 1
  032e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  032ef	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR tv2087[rsp]
  032f7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  032fc	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR crw$1[rsp]
  03303	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03307	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161009
  0330e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161010
  0331a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0331f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03324	41 b9 03 00 00
	00		 mov	 r9d, 3
  0332a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161011
  03331	ba aa 08 00 00	 mov	 edx, 2218		; 000008aaH
  03336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161012
  0333d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2219 :         }

  03343	e9 3c ff ff ff	 jmp	 $LN14@ipending_c
$LN15@ipending_c:

; 2220 :         free( crwarray );

  03348	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR crwarray$[rsp]
  03350	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN49@ipending_c:
$LN47@ipending_c:

; 2221 :     }
; 2222 : 
; 2223 :     /*-------------------------*/
; 2224 :     /* Device interrupt status */
; 2225 :     /*-------------------------*/
; 2226 : 
; 2227 :     for (dev = sysblk.firstdev; dev != NULL; dev = dev->nextdev)

  03356	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0335d	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  03364	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dev$[rsp], rax
  0336c	eb 14		 jmp	 SHORT $LN19@ipending_c
$LN17@ipending_c:
  0336e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03376	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0337a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dev$[rsp], rax
$LN19@ipending_c:
  03382	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0338b	0f 84 6c 07 00
	00		 je	 $LN18@ipending_c

; 2228 :     {
; 2229 : #if defined( OPTION_SHARED_DEVICES )
; 2230 :         if (dev->shioactive == DEV_SYS_NONE)

  03391	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03399	83 b8 e4 05 00
	00 00		 cmp	 DWORD PTR [rax+1508], 0
  033a0	75 1d		 jne	 SHORT $LN50@ipending_c

; 2231 :             STRLCPY( sysid, "(none)" );

  033a2	41 b8 0c 00 00
	00		 mov	 r8d, 12
  033a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161015
  033af	48 8d 8c 24 30
	04 00 00	 lea	 rcx, QWORD PTR sysid$[rsp]
  033b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  033bd	eb 5a		 jmp	 SHORT $LN51@ipending_c
$LN50@ipending_c:

; 2232 :         else if (dev->shioactive == DEV_SYS_LOCAL)

  033bf	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  033c7	81 b8 e4 05 00
	00 ff ff 00 00	 cmp	 DWORD PTR [rax+1508], 65535 ; 0000ffffH
  033d1	75 1d		 jne	 SHORT $LN52@ipending_c

; 2233 :             STRLCPY( sysid, "local" );

  033d3	41 b8 0c 00 00
	00		 mov	 r8d, 12
  033d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161018
  033e0	48 8d 8c 24 30
	04 00 00	 lea	 rcx, QWORD PTR sysid$[rsp]
  033e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  033ee	eb 29		 jmp	 SHORT $LN53@ipending_c
$LN52@ipending_c:

; 2234 :         else
; 2235 :             MSGBUF( sysid, "id=%d", dev->shioactive);

  033f0	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  033f8	44 8b 88 e4 05
	00 00		 mov	 r9d, DWORD PTR [rax+1508]
  033ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161019
  03406	ba 0c 00 00 00	 mov	 edx, 12
  0340b	48 8d 8c 24 30
	04 00 00	 lea	 rcx, QWORD PTR sysid$[rsp]
  03413	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN53@ipending_c:
$LN51@ipending_c:

; 2236 : #else // !defined( OPTION_SHARED_DEVICES )
; 2237 :         if (dev->busy && !(dev->suspended))
; 2238 :             STRLCPY( sysid, "local" );
; 2239 :         else
; 2240 :             STRLCPY( sysid, "(none)" );
; 2241 : #endif // defined( OPTION_SHARED_DEVICES )
; 2242 :         if (dev->busy && !(dev->suspended

  03419	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03421	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03427	c1 e8 13	 shr	 eax, 19
  0342a	83 e0 01	 and	 eax, 1
  0342d	85 c0		 test	 eax, eax
  0342f	0f 84 11 01 00
	00		 je	 $LN54@ipending_c
  03435	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0343d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03443	c1 e8 15	 shr	 eax, 21
  03446	83 e0 01	 and	 eax, 1
  03449	85 c0		 test	 eax, eax
  0344b	74 15		 je	 SHORT $LN55@ipending_c
  0344d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03455	83 b8 e4 05 00
	00 00		 cmp	 DWORD PTR [rax+1508], 0
  0345c	0f 84 e4 00 00
	00		 je	 $LN54@ipending_c
$LN55@ipending_c:

; 2243 : #if defined( OPTION_SHARED_DEVICES )
; 2244 :             && dev->shioactive == DEV_SYS_NONE
; 2245 : #endif // defined( OPTION_SHARED_DEVICES )
; 2246 :         ))
; 2247 :         {
; 2248 :             // "device %1d:%04X: status %s"
; 2249 :             MSGBUF(buf, "busy %s", sysid);

  03462	4c 8d 8c 24 30
	04 00 00	 lea	 r9, QWORD PTR sysid$[rsp]
  0346a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161022
  03471	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  03476	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0347e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2250 :             WRMSG(HHC00880, "I", LCSS_DEVNUM, buf);

  03484	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0348d	74 15		 je	 SHORT $LN125@ipending_c
  0348f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03497	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0349b	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv2139[rsp], eax
  034a2	eb 0b		 jmp	 SHORT $LN126@ipending_c
$LN125@ipending_c:
  034a4	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2139[rsp], 0
$LN126@ipending_c:
  034af	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  034b8	74 17		 je	 SHORT $LN127@ipending_c
  034ba	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  034c2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  034c6	d1 f8		 sar	 eax, 1
  034c8	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv2145[rsp], eax
  034cf	eb 0b		 jmp	 SHORT $LN128@ipending_c
$LN127@ipending_c:
  034d1	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2145[rsp], 0
$LN128@ipending_c:
  034dc	b9 01 00 00 00	 mov	 ecx, 1
  034e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  034e7	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  034ef	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  034f4	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv2139[rsp]
  034fb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  034ff	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv2145[rsp]
  03506	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0350a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161023
  03511	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03516	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161024
  0351d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03522	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03527	41 b9 03 00 00
	00		 mov	 r9d, 3
  0352d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161025
  03534	ba ca 08 00 00	 mov	 edx, 2250		; 000008caH
  03539	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161026
  03540	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN54@ipending_c:

; 2251 :         }
; 2252 :         if (dev->reserved)

  03546	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0354e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03554	c1 e8 14	 shr	 eax, 20
  03557	83 e0 01	 and	 eax, 1
  0355a	85 c0		 test	 eax, eax
  0355c	0f 84 e4 00 00
	00		 je	 $LN56@ipending_c

; 2253 :         {
; 2254 :             MSGBUF(buf, "reserved %s", sysid);

  03562	4c 8d 8c 24 30
	04 00 00	 lea	 r9, QWORD PTR sysid$[rsp]
  0356a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161028
  03571	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  03576	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0357e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2255 :             WRMSG(HHC00880, "I", LCSS_DEVNUM, buf);

  03584	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0358d	74 15		 je	 SHORT $LN129@ipending_c
  0358f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03597	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0359b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv2168[rsp], eax
  035a2	eb 0b		 jmp	 SHORT $LN130@ipending_c
$LN129@ipending_c:
  035a4	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2168[rsp], 0
$LN130@ipending_c:
  035af	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  035b8	74 17		 je	 SHORT $LN131@ipending_c
  035ba	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  035c2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  035c6	d1 f8		 sar	 eax, 1
  035c8	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv2174[rsp], eax
  035cf	eb 0b		 jmp	 SHORT $LN132@ipending_c
$LN131@ipending_c:
  035d1	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2174[rsp], 0
$LN132@ipending_c:
  035dc	b9 01 00 00 00	 mov	 ecx, 1
  035e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  035e7	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  035ef	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  035f4	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv2168[rsp]
  035fb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  035ff	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv2174[rsp]
  03606	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0360a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161029
  03611	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03616	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161030
  0361d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03622	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03627	41 b9 03 00 00
	00		 mov	 r9d, 3
  0362d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161031
  03634	ba cf 08 00 00	 mov	 edx, 2255		; 000008cfH
  03639	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161032
  03640	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN56@ipending_c:

; 2256 :         }
; 2257 :         if (dev->scsw.flag3 & SCSW3_AC_SUSP)

  03646	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0364e	0f b6 80 0b 03
	00 00		 movzx	 eax, BYTE PTR [rax+779]
  03655	83 e0 20	 and	 eax, 32			; 00000020H
  03658	85 c0		 test	 eax, eax
  0365a	0f 84 c1 00 00
	00		 je	 $LN57@ipending_c

; 2258 :         {
; 2259 :             WRMSG(HHC00880, "I", LCSS_DEVNUM, "suspended" );

  03660	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03669	74 15		 je	 SHORT $LN133@ipending_c
  0366b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03673	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03677	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv2193[rsp], eax
  0367e	eb 0b		 jmp	 SHORT $LN134@ipending_c
$LN133@ipending_c:
  03680	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2193[rsp], 0
$LN134@ipending_c:
  0368b	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03694	74 17		 je	 SHORT $LN135@ipending_c
  03696	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0369e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  036a2	d1 f8		 sar	 eax, 1
  036a4	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv2199[rsp], eax
  036ab	eb 0b		 jmp	 SHORT $LN136@ipending_c
$LN135@ipending_c:
  036ad	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2199[rsp], 0
$LN136@ipending_c:
  036b8	b9 01 00 00 00	 mov	 ecx, 1
  036bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  036c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161034
  036ca	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  036cf	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv2193[rsp]
  036d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  036da	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv2199[rsp]
  036e1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  036e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161035
  036ec	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  036f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161036
  036f8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  036fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03702	41 b9 03 00 00
	00		 mov	 r9d, 3
  03708	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161037
  0370f	ba d3 08 00 00	 mov	 edx, 2259		; 000008d3H
  03714	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161038
  0371b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN57@ipending_c:

; 2260 :         }
; 2261 :         if ((dev->scsw.flag3 & SCSW3_SC_PEND) && (dev->pmcw.flag5 & PMCW5_V))

  03721	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03729	0f b6 80 0b 03
	00 00		 movzx	 eax, BYTE PTR [rax+779]
  03730	83 e0 01	 and	 eax, 1
  03733	85 c0		 test	 eax, eax
  03735	0f 84 db 00 00
	00		 je	 $LN58@ipending_c
  0373b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03743	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  0374a	83 e0 01	 and	 eax, 1
  0374d	85 c0		 test	 eax, eax
  0374f	0f 84 c1 00 00
	00		 je	 $LN58@ipending_c

; 2262 :         {
; 2263 :             WRMSG(HHC00880, "I", LCSS_DEVNUM, "I/O pending" );

  03755	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0375e	74 15		 je	 SHORT $LN137@ipending_c
  03760	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03768	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0376c	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv2222[rsp], eax
  03773	eb 0b		 jmp	 SHORT $LN138@ipending_c
$LN137@ipending_c:
  03775	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2222[rsp], 0
$LN138@ipending_c:
  03780	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03789	74 17		 je	 SHORT $LN139@ipending_c
  0378b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03793	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03797	d1 f8		 sar	 eax, 1
  03799	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv2228[rsp], eax
  037a0	eb 0b		 jmp	 SHORT $LN140@ipending_c
$LN139@ipending_c:
  037a2	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2228[rsp], 0
$LN140@ipending_c:
  037ad	b9 01 00 00 00	 mov	 ecx, 1
  037b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  037b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161040
  037bf	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  037c4	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv2222[rsp]
  037cb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  037cf	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv2228[rsp]
  037d6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  037da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161041
  037e1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  037e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161042
  037ed	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  037f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  037f7	41 b9 03 00 00
	00		 mov	 r9d, 3
  037fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161043
  03804	ba d7 08 00 00	 mov	 edx, 2263		; 000008d7H
  03809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161044
  03810	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN58@ipending_c:

; 2264 :         }
; 2265 :         if ((dev->pciscsw.flag3 & SCSW3_SC_PEND) && (dev->pmcw.flag5 & PMCW5_V))

  03816	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0381e	0f b6 80 17 03
	00 00		 movzx	 eax, BYTE PTR [rax+791]
  03825	83 e0 01	 and	 eax, 1
  03828	85 c0		 test	 eax, eax
  0382a	0f 84 db 00 00
	00		 je	 $LN59@ipending_c
  03830	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03838	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  0383f	83 e0 01	 and	 eax, 1
  03842	85 c0		 test	 eax, eax
  03844	0f 84 c1 00 00
	00		 je	 $LN59@ipending_c

; 2266 :         {
; 2267 :             WRMSG(HHC00880, "I", LCSS_DEVNUM, "PCI pending" );

  0384a	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03853	74 15		 je	 SHORT $LN141@ipending_c
  03855	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0385d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03861	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv2251[rsp], eax
  03868	eb 0b		 jmp	 SHORT $LN142@ipending_c
$LN141@ipending_c:
  0386a	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2251[rsp], 0
$LN142@ipending_c:
  03875	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0387e	74 17		 je	 SHORT $LN143@ipending_c
  03880	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03888	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0388c	d1 f8		 sar	 eax, 1
  0388e	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv2257[rsp], eax
  03895	eb 0b		 jmp	 SHORT $LN144@ipending_c
$LN143@ipending_c:
  03897	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2257[rsp], 0
$LN144@ipending_c:
  038a2	b9 01 00 00 00	 mov	 ecx, 1
  038a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  038ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161046
  038b4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  038b9	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv2251[rsp]
  038c0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  038c4	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv2257[rsp]
  038cb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  038cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161047
  038d6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  038db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161048
  038e2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  038e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  038ec	41 b9 03 00 00
	00		 mov	 r9d, 3
  038f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161049
  038f9	ba db 08 00 00	 mov	 edx, 2267		; 000008dbH
  038fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161050
  03905	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN59@ipending_c:

; 2268 :         }
; 2269 :         if ((dev->attnscsw.flag3 & SCSW3_SC_PEND) && (dev->pmcw.flag5 & PMCW5_V))

  0390b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03913	0f b6 80 23 03
	00 00		 movzx	 eax, BYTE PTR [rax+803]
  0391a	83 e0 01	 and	 eax, 1
  0391d	85 c0		 test	 eax, eax
  0391f	0f 84 db 00 00
	00		 je	 $LN60@ipending_c
  03925	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0392d	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  03934	83 e0 01	 and	 eax, 1
  03937	85 c0		 test	 eax, eax
  03939	0f 84 c1 00 00
	00		 je	 $LN60@ipending_c

; 2270 :         {
; 2271 :             WRMSG(HHC00880, "I", LCSS_DEVNUM, "Attn pending" );

  0393f	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03948	74 15		 je	 SHORT $LN145@ipending_c
  0394a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03952	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03956	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv2312[rsp], eax
  0395d	eb 0b		 jmp	 SHORT $LN146@ipending_c
$LN145@ipending_c:
  0395f	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2312[rsp], 0
$LN146@ipending_c:
  0396a	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03973	74 17		 je	 SHORT $LN147@ipending_c
  03975	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0397d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03981	d1 f8		 sar	 eax, 1
  03983	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv2318[rsp], eax
  0398a	eb 0b		 jmp	 SHORT $LN148@ipending_c
$LN147@ipending_c:
  0398c	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2318[rsp], 0
$LN148@ipending_c:
  03997	b9 01 00 00 00	 mov	 ecx, 1
  0399c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  039a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161052
  039a9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  039ae	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv2312[rsp]
  039b5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  039b9	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv2318[rsp]
  039c0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  039c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161053
  039cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  039d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161054
  039d7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  039dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  039e1	41 b9 03 00 00
	00		 mov	 r9d, 3
  039e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161055
  039ee	ba df 08 00 00	 mov	 edx, 2271		; 000008dfH
  039f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161056
  039fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN60@ipending_c:

; 2272 :         }
; 2273 :         if (test_lock(&dev->lock) && (dev->pmcw.flag5 & PMCW5_V))

  03a00	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a08	48 83 c0 38	 add	 rax, 56			; 00000038H
  03a0c	48 8b c8	 mov	 rcx, rax
  03a0f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_test_lock
  03a15	85 c0		 test	 eax, eax
  03a17	0f 84 db 00 00
	00		 je	 $LN61@ipending_c
  03a1d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a25	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  03a2c	83 e0 01	 and	 eax, 1
  03a2f	85 c0		 test	 eax, eax
  03a31	0f 84 c1 00 00
	00		 je	 $LN61@ipending_c

; 2274 :         {
; 2275 :             WRMSG(HHC00880, "I", LCSS_DEVNUM, "lock held" );

  03a37	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03a40	74 15		 je	 SHORT $LN149@ipending_c
  03a42	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a4a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03a4e	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv2341[rsp], eax
  03a55	eb 0b		 jmp	 SHORT $LN150@ipending_c
$LN149@ipending_c:
  03a57	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2341[rsp], 0
$LN150@ipending_c:
  03a62	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03a6b	74 17		 je	 SHORT $LN151@ipending_c
  03a6d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a75	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03a79	d1 f8		 sar	 eax, 1
  03a7b	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv2347[rsp], eax
  03a82	eb 0b		 jmp	 SHORT $LN152@ipending_c
$LN151@ipending_c:
  03a84	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2347[rsp], 0
$LN152@ipending_c:
  03a8f	b9 01 00 00 00	 mov	 ecx, 1
  03a94	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03a9a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161058
  03aa1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03aa6	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv2341[rsp]
  03aad	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03ab1	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv2347[rsp]
  03ab8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03abc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161059
  03ac3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03ac8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161060
  03acf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03ad4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03ad9	41 b9 03 00 00
	00		 mov	 r9d, 3
  03adf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161061
  03ae6	ba e3 08 00 00	 mov	 edx, 2275		; 000008e3H
  03aeb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161062
  03af2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN61@ipending_c:

; 2276 :         }
; 2277 :     }

  03af8	e9 71 f8 ff ff	 jmp	 $LN17@ipending_c
$LN18@ipending_c:

; 2278 : 
; 2279 :     /*---------------------*/
; 2280 :     /* I/O Interrupt Queue */
; 2281 :     /*---------------------*/
; 2282 : 
; 2283 :     if (!sysblk.iointq)

  03afd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03b04	48 83 b8 28 12
	00 00 00	 cmp	 QWORD PTR [rax+4648], 0
  03b0c	75 55		 jne	 SHORT $LN62@ipending_c

; 2284 :         WRMSG( HHC00881, "I", " (NULL)");

  03b0e	b9 01 00 00 00	 mov	 ecx, 1
  03b13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03b19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161065
  03b20	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  03b25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161066
  03b2c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03b31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161067
  03b38	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03b3d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03b42	41 b9 03 00 00
	00		 mov	 r9d, 3
  03b48	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161068
  03b4f	ba ec 08 00 00	 mov	 edx, 2284		; 000008ecH
  03b54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161069
  03b5b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03b61	eb 53		 jmp	 SHORT $LN63@ipending_c
$LN62@ipending_c:

; 2285 :     else
; 2286 :         WRMSG( HHC00881, "I", "");

  03b63	b9 01 00 00 00	 mov	 ecx, 1
  03b68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03b6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161070
  03b75	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  03b7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161071
  03b81	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03b86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161072
  03b8d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03b92	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03b97	41 b9 03 00 00
	00		 mov	 r9d, 3
  03b9d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161073
  03ba4	ba ee 08 00 00	 mov	 edx, 2286		; 000008eeH
  03ba9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161074
  03bb0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN63@ipending_c:

; 2287 : 
; 2288 :     for (io = sysblk.iointq; io; io = io->next)

  03bb6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03bbd	48 8b 80 28 12
	00 00		 mov	 rax, QWORD PTR [rax+4648]
  03bc4	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR io$[rsp], rax
  03bcc	eb 13		 jmp	 SHORT $LN22@ipending_c
$LN20@ipending_c:
  03bce	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03bd6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  03bd9	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR io$[rsp], rax
$LN22@ipending_c:
  03be1	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR io$[rsp], 0
  03bea	0f 84 30 02 00
	00		 je	 $LN21@ipending_c

; 2289 :     {
; 2290 :         WRMSG( HHC00882, "I", SSID_TO_LCSS(io->dev->ssid), io->dev->devnum

  03bf0	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03bf8	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  03bfb	83 e0 01	 and	 eax, 1
  03bfe	85 c0		 test	 eax, eax
  03c00	75 36		 jne	 SHORT $LN153@ipending_c
  03c02	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03c0a	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  03c0d	d1 e8		 shr	 eax, 1
  03c0f	83 e0 01	 and	 eax, 1
  03c12	85 c0		 test	 eax, eax
  03c14	75 22		 jne	 SHORT $LN153@ipending_c
  03c16	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03c1e	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  03c21	c1 e8 02	 shr	 eax, 2
  03c24	83 e0 01	 and	 eax, 1
  03c27	85 c0		 test	 eax, eax
  03c29	75 0d		 jne	 SHORT $LN153@ipending_c
  03c2b	c7 84 24 0c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv2405[rsp], 1
  03c36	eb 0b		 jmp	 SHORT $LN154@ipending_c
$LN153@ipending_c:
  03c38	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2405[rsp], 0
$LN154@ipending_c:
  03c43	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR tv2405[rsp], 0
  03c4b	74 11		 je	 SHORT $LN155@ipending_c
  03c4d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161075
  03c54	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv2407[rsp], rax
  03c5c	eb 0f		 jmp	 SHORT $LN156@ipending_c
$LN155@ipending_c:
  03c5e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161076
  03c65	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv2407[rsp], rax
$LN156@ipending_c:
  03c6d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03c75	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  03c78	c1 e8 02	 shr	 eax, 2
  03c7b	83 e0 01	 and	 eax, 1
  03c7e	85 c0		 test	 eax, eax
  03c80	74 11		 je	 SHORT $LN157@ipending_c
  03c82	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161077
  03c89	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv2413[rsp], rax
  03c91	eb 0f		 jmp	 SHORT $LN158@ipending_c
$LN157@ipending_c:
  03c93	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161078
  03c9a	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv2413[rsp], rax
$LN158@ipending_c:
  03ca2	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03caa	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  03cad	d1 e8		 shr	 eax, 1
  03caf	83 e0 01	 and	 eax, 1
  03cb2	85 c0		 test	 eax, eax
  03cb4	74 11		 je	 SHORT $LN159@ipending_c
  03cb6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161079
  03cbd	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv2419[rsp], rax
  03cc5	eb 0f		 jmp	 SHORT $LN160@ipending_c
$LN159@ipending_c:
  03cc7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161080
  03cce	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv2419[rsp], rax
$LN160@ipending_c:
  03cd6	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03cde	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  03ce1	83 e0 01	 and	 eax, 1
  03ce4	85 c0		 test	 eax, eax
  03ce6	74 11		 je	 SHORT $LN161@ipending_c
  03ce8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161081
  03cef	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv2424[rsp], rax
  03cf7	eb 0f		 jmp	 SHORT $LN162@ipending_c
$LN161@ipending_c:
  03cf9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG161082
  03d00	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv2424[rsp], rax
$LN162@ipending_c:
  03d08	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR io$[rsp]
  03d10	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  03d13	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  03d18	89 84 24 a8 01
	00 00		 mov	 DWORD PTR tv2384[rsp], eax
  03d1f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR io$[rsp]
  03d27	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  03d2a	c1 f9 08	 sar	 ecx, 8
  03d2d	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  03d33	89 8c 24 ac 01
	00 00		 mov	 DWORD PTR tv2388[rsp], ecx
  03d3a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR io$[rsp]
  03d42	8b 52 10	 mov	 edx, DWORD PTR [rdx+16]
  03d45	c1 fa 10	 sar	 edx, 16
  03d48	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  03d4e	89 94 24 b0 01
	00 00		 mov	 DWORD PTR tv2392[rsp], edx
  03d55	48 8b 9c 24 b8
	00 00 00	 mov	 rbx, QWORD PTR io$[rsp]
  03d5d	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  03d61	0f b7 5b 48	 movzx	 ebx, WORD PTR [rbx+72]
  03d65	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR io$[rsp]
  03d6d	48 8b 7f 08	 mov	 rdi, QWORD PTR [rdi+8]
  03d71	0f b7 7f 44	 movzx	 edi, WORD PTR [rdi+68]
  03d75	d1 ff		 sar	 edi, 1
  03d77	b9 01 00 00 00	 mov	 ecx, 1
  03d7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03d82	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR tv2384[rsp]
  03d89	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  03d8d	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR tv2388[rsp]
  03d94	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  03d98	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR tv2392[rsp]
  03d9f	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  03da3	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR tv2407[rsp]
  03dab	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03db0	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR tv2413[rsp]
  03db8	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03dbd	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR tv2419[rsp]
  03dc5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03dca	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR tv2424[rsp]
  03dd2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03dd7	89 5c 24 40	 mov	 DWORD PTR [rsp+64], ebx
  03ddb	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  03ddf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161083
  03de6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03deb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161084
  03df2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03df7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03dfc	41 b9 03 00 00
	00		 mov	 r9d, 3
  03e02	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161085
  03e09	ba fb 08 00 00	 mov	 edx, 2299		; 000008fbH
  03e0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161086
  03e15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2291 :                 ,io->pending      ? " normal, " : ""
; 2292 :                 ,io->pcipending   ? " PCI,    " : ""
; 2293 :                 ,io->attnpending  ? " ATTN,   " : ""
; 2294 :                 ,!(io->pending || io->pcipending || io->attnpending) ?
; 2295 :                                     " unknown," : ""
; 2296 :                 ,(io->priority >> 16) & 0xFF
; 2297 :                 ,(io->priority >>  8) & 0xFF
; 2298 :                 , io->priority        & 0xFF
; 2299 :                  );
; 2300 :     }

  03e1b	e9 ae fd ff ff	 jmp	 $LN20@ipending_c
$LN21@ipending_c:

; 2301 : 
; 2302 :     return 0;

  03e20	33 c0		 xor	 eax, eax

; 2303 : }

  03e22	48 8b 8c 24 40
	06 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  03e2a	48 33 cc	 xor	 rcx, rsp
  03e2d	e8 00 00 00 00	 call	 __security_check_cookie
  03e32	48 81 c4 58 06
	00 00		 add	 rsp, 1624		; 00000658H
  03e39	41 5f		 pop	 r15
  03e3b	41 5e		 pop	 r14
  03e3d	41 5d		 pop	 r13
  03e3f	41 5c		 pop	 r12
  03e41	5f		 pop	 rdi
  03e42	5e		 pop	 rsi
  03e43	5d		 pop	 rbp
  03e44	5b		 pop	 rbx
  03e45	c3		 ret	 0
ipending_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
c$1 = 80
auto_trace_beg$ = 88
auto_trace_amt$ = 96
tv132 = 104
argc$ = 128
argv$ = 136
cmdline$ = 144
auto_trace_cmd PROC

; 1912 : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@auto_trace:

; 1913 :     U64  auto_trace_beg;        // (instrcount to begin tracing)
; 1914 :     U64  auto_trace_amt;        // (amt of instruction to trace)
; 1915 : 
; 1916 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@auto_trace

; 1917 : 
; 1918 :     if (argc > 1)

  00018	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00020	0f 8e ee 01 00
	00		 jle	 $LN5@auto_trace

; 1919 :     {
; 1920 :         char c;
; 1921 : 
; 1922 :         /* Parse/validate arguments */
; 1923 :         if (0
; 1924 :             || (argc != 3)
; 1925 : 
; 1926 :             || (strncasecmp( "BEG=", argv[1], 4 ) != 0)
; 1927 :             || (strncasecmp( "AMT=", argv[2], 4 ) != 0)
; 1928 : 
; 1929 :             || (sscanf( argv[1] + 4, "%"SCNu64"%c", &auto_trace_beg, &c ) != 1)
; 1930 :             || (sscanf( argv[2] + 4, "%"SCNu64"%c", &auto_trace_amt, &c ) != 1)

  00026	33 c0		 xor	 eax, eax
  00028	85 c0		 test	 eax, eax
  0002a	0f 85 d8 00 00
	00		 jne	 $LN8@auto_trace
  00030	83 bc 24 80 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00038	0f 85 ca 00 00
	00		 jne	 $LN8@auto_trace
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 01	 imul	 rax, rax, 1
  00047	41 b8 04 00 00
	00		 mov	 r8d, 4
  0004d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00055	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160576
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00066	85 c0		 test	 eax, eax
  00068	0f 85 9a 00 00
	00		 jne	 $LN8@auto_trace
  0006e	b8 08 00 00 00	 mov	 eax, 8
  00073	48 6b c0 02	 imul	 rax, rax, 2
  00077	41 b8 04 00 00
	00		 mov	 r8d, 4
  0007d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00085	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160577
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00096	85 c0		 test	 eax, eax
  00098	75 6e		 jne	 SHORT $LN8@auto_trace
  0009a	b8 08 00 00 00	 mov	 eax, 8
  0009f	48 6b c0 01	 imul	 rax, rax, 1
  000a3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ab	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000af	48 83 c0 04	 add	 rax, 4
  000b3	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$1[rsp]
  000b8	4c 8d 44 24 58	 lea	 r8, QWORD PTR auto_trace_beg$[rsp]
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160578
  000c4	48 8b c8	 mov	 rcx, rax
  000c7	e8 00 00 00 00	 call	 sscanf
  000cc	83 f8 01	 cmp	 eax, 1
  000cf	75 37		 jne	 SHORT $LN8@auto_trace
  000d1	b8 08 00 00 00	 mov	 eax, 8
  000d6	48 6b c0 02	 imul	 rax, rax, 2
  000da	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e6	48 83 c0 04	 add	 rax, 4
  000ea	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$1[rsp]
  000ef	4c 8d 44 24 60	 lea	 r8, QWORD PTR auto_trace_amt$[rsp]
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160579
  000fb	48 8b c8	 mov	 rcx, rax
  000fe	e8 00 00 00 00	 call	 sscanf
  00103	83 f8 01	 cmp	 eax, 1
  00106	74 75		 je	 SHORT $LN7@auto_trace
$LN8@auto_trace:

; 1931 :         )
; 1932 :         {
; 1933 :             // "Invalid command usage. Type 'help %s' for assistance."
; 1934 :             WRMSG( HHC02299, "E", argv[0] );

  00108	b8 08 00 00 00	 mov	 eax, 8
  0010d	48 6b c0 00	 imul	 rax, rax, 0
  00111	48 89 44 24 68	 mov	 QWORD PTR tv132[rsp], rax
  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00121	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00129	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv132[rsp]
  0012e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00132	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160580
  0013e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160581
  0014a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00154	41 b9 03 00 00
	00		 mov	 r9d, 3
  0015a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160582
  00161	ba 8e 07 00 00	 mov	 edx, 1934		; 0000078eH
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160583
  0016d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1935 :             return -1;

  00173	b8 ff ff ff ff	 mov	 eax, -1
  00178	e9 e3 01 00 00	 jmp	 $LN1@auto_trace
$LN7@auto_trace:

; 1936 :         }
; 1937 : 
; 1938 :         if (!auto_trace_beg || !auto_trace_amt)

  0017d	48 83 7c 24 58
	00		 cmp	 QWORD PTR auto_trace_beg$[rsp], 0
  00183	74 08		 je	 SHORT $LN10@auto_trace
  00185	48 83 7c 24 60
	00		 cmp	 QWORD PTR auto_trace_amt$[rsp], 0
  0018b	75 51		 jne	 SHORT $LN9@auto_trace
$LN10@auto_trace:

; 1939 :         {
; 1940 :             // "Automatic tracing value(s) must be greater than zero"
; 1941 :             WRMSG( HHC02376, "E" );

  0018d	b9 01 00 00 00	 mov	 ecx, 1
  00192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160586
  0019f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160587
  001ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  001bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160588
  001c2	ba 95 07 00 00	 mov	 edx, 1941		; 00000795H
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160589
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1942 :             return -1;

  001d4	b8 ff ff ff ff	 mov	 eax, -1
  001d9	e9 82 01 00 00	 jmp	 $LN1@auto_trace
$LN9@auto_trace:

; 1943 :         }
; 1944 : 
; 1945 :         /* Enable automatic tracing */
; 1946 :         OBTAIN_INTLOCK( NULL );

  001de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160590
  001e5	33 c9		 xor	 ecx, ecx
  001e7	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 1947 : 
; 1948 :         sysblk.auto_trace_beg = auto_trace_beg;

  001ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001f3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR auto_trace_beg$[rsp]
  001f8	48 89 88 e8 12
	00 00		 mov	 QWORD PTR [rax+4840], rcx

; 1949 :         sysblk.auto_trace_amt = auto_trace_amt;

  001ff	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00206	48 8b 4c 24 60	 mov	 rcx, QWORD PTR auto_trace_amt$[rsp]
  0020b	48 89 88 f0 12
	00 00		 mov	 QWORD PTR [rax+4848], rcx

; 1950 :     }

  00212	eb 34		 jmp	 SHORT $LN6@auto_trace
$LN5@auto_trace:

; 1951 :     else // (argc <= 1)
; 1952 :     {
; 1953 :         /* Retrieve current settings */
; 1954 :         OBTAIN_INTLOCK( NULL );

  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160591
  0021b	33 c9		 xor	 ecx, ecx
  0021d	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 1955 : 
; 1956 :         auto_trace_beg = sysblk.auto_trace_beg;

  00222	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00229	48 8b 80 e8 12
	00 00		 mov	 rax, QWORD PTR [rax+4840]
  00230	48 89 44 24 58	 mov	 QWORD PTR auto_trace_beg$[rsp], rax

; 1957 :         auto_trace_amt = sysblk.auto_trace_amt;

  00235	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0023c	48 8b 80 f0 12
	00 00		 mov	 rax, QWORD PTR [rax+4848]
  00243	48 89 44 24 60	 mov	 QWORD PTR auto_trace_amt$[rsp], rax
$LN6@auto_trace:

; 1958 :     }
; 1959 : 
; 1960 :     RELEASE_INTLOCK( NULL );

  00248	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160592
  0024f	33 c9		 xor	 ecx, ecx
  00251	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1961 : 
; 1962 :     /* Display current settings */
; 1963 :     if (!auto_trace_beg && !auto_trace_amt)

  00256	48 83 7c 24 58
	00		 cmp	 QWORD PTR auto_trace_beg$[rsp], 0
  0025c	75 54		 jne	 SHORT $LN11@auto_trace
  0025e	48 83 7c 24 60
	00		 cmp	 QWORD PTR auto_trace_amt$[rsp], 0
  00264	75 4c		 jne	 SHORT $LN11@auto_trace

; 1964 :     {
; 1965 :         // "Automatic tracing not enabled"
; 1966 :         WRMSG( HHC02372, "I" );

  00266	b9 01 00 00 00	 mov	 ecx, 1
  0026b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160595
  00278	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160596
  00284	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00289	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00294	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160597
  0029b	ba ae 07 00 00	 mov	 edx, 1966		; 000007aeH
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160598
  002a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1967 :     }

  002ad	e9 ac 00 00 00	 jmp	 $LN12@auto_trace
$LN11@auto_trace:

; 1968 :     else if (!auto_trace_beg)

  002b2	48 83 7c 24 58
	00		 cmp	 QWORD PTR auto_trace_beg$[rsp], 0
  002b8	75 49		 jne	 SHORT $LN13@auto_trace

; 1969 :     {
; 1970 :         // "Automatic tracing is active"
; 1971 :         WRMSG( HHC02375, "I" );

  002ba	b9 01 00 00 00	 mov	 ecx, 1
  002bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160601
  002cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160602
  002d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  002e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160603
  002ef	ba b3 07 00 00	 mov	 edx, 1971		; 000007b3H
  002f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160604
  002fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1972 :     }

  00301	eb 5b		 jmp	 SHORT $LN14@auto_trace
$LN13@auto_trace:

; 1973 :     else // (auto_trace_beg && auto_trace_amt)
; 1974 :     {
; 1975 :         // "Automatic tracing enabled: BEG=%"PRIu64" AMT=%"PRIu64
; 1976 :         WRMSG( HHC02374, "I", auto_trace_beg, auto_trace_amt );

  00303	b9 01 00 00 00	 mov	 ecx, 1
  00308	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0030e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR auto_trace_amt$[rsp]
  00313	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00318	48 8b 4c 24 58	 mov	 rcx, QWORD PTR auto_trace_beg$[rsp]
  0031d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160605
  00329	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160606
  00335	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00345	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160607
  0034c	ba b8 07 00 00	 mov	 edx, 1976		; 000007b8H
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160608
  00358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@auto_trace:
$LN12@auto_trace:

; 1977 :     }
; 1978 : 
; 1979 :     return 0;

  0035e	33 c0		 xor	 eax, eax
$LN1@auto_trace:

; 1980 : }

  00360	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00364	c3		 ret	 0
auto_trace_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
txf_tracing$ = 128
i$1 = 132
i$2 = 136
contran$3 = 140
stats$ = 144
txf_fails$ = 148
txf_tac$ = 152
rc$ = 156
txf_why_mask$ = 160
txf_tnd$ = 164
txf_cpuad$ = 168
count$4 = 176
c$ = 184
total$5 = 192
tv437 = 200
tv441 = 208
tv445 = 216
tv481 = 224
tv485 = 232
tv489 = 240
tv493 = 248
tv497 = 256
tv556 = 264
tv365 = 272
tv516 = 280
tv529 = 288
tv551 = 296
tv595 = 304
tv602 = 312
tv600 = 320
tv660 = 328
tv667 = 336
tv665 = 344
tv684 = 352
tv732 = 360
tv739 = 368
tv746 = 376
tv744 = 384
tv765 = 392
tv771 = 400
tv775 = 408
tv798 = 416
tv805 = 424
tv803 = 432
cfl$6 = 440
cpu$7 = 472
tnd$8 = 504
tac$9 = 544
why$10 = 608
buf$11 = 864
__$ArrayPad$ = 1888
argc$ = 1920
argv$ = 1928
cmdline$ = 1936
txf_cmd	PROC

; 1563 : {

$LN128:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 70 07
	00 00		 sub	 rsp, 1904		; 00000770H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 60
	07 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1564 :     U32  txf_tracing  = sysblk.txf_tracing;

  00028	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002f	8b 80 4c 05 00
	00		 mov	 eax, DWORD PTR [rax+1356]
  00035	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1565 :     U32  txf_why_mask = sysblk.txf_why_mask;

  0003c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00043	8b 80 50 05 00
	00		 mov	 eax, DWORD PTR [rax+1360]
  00049	89 84 24 a0 00
	00 00		 mov	 DWORD PTR txf_why_mask$[rsp], eax

; 1566 :     int  txf_tac      = sysblk.txf_tac;

  00050	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00057	8b 80 54 05 00
	00		 mov	 eax, DWORD PTR [rax+1364]
  0005d	89 84 24 98 00
	00 00		 mov	 DWORD PTR txf_tac$[rsp], eax

; 1567 :     int  txf_tnd      = sysblk.txf_tnd;

  00064	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006b	8b 80 58 05 00
	00		 mov	 eax, DWORD PTR [rax+1368]
  00071	89 84 24 a4 00
	00 00		 mov	 DWORD PTR txf_tnd$[rsp], eax

; 1568 :     int  txf_cpuad    = sysblk.txf_cpuad;

  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007f	8b 80 60 05 00
	00		 mov	 eax, DWORD PTR [rax+1376]
  00085	89 84 24 a8 00
	00 00		 mov	 DWORD PTR txf_cpuad$[rsp], eax

; 1569 :     int  txf_fails    = sysblk.txf_fails;

  0008c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00093	8b 80 5c 05 00
	00		 mov	 eax, DWORD PTR [rax+1372]
  00099	89 84 24 94 00
	00 00		 mov	 DWORD PTR txf_fails$[rsp], eax

; 1570 :     int  rc           = 0;

  000a0	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$[rsp], 0

; 1571 :     char c;
; 1572 :     bool stats = false;

  000ab	c6 84 24 90 00
	00 00 00	 mov	 BYTE PTR stats$[rsp], 0
$LN4@txf_cmd:

; 1573 : 
; 1574 :     UNREFERENCED( cmdline );

  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	75 fa		 jne	 SHORT $LN4@txf_cmd

; 1575 : 
; 1576 :     // txf  [0 | STATS | [INSTR] [U] [C] [GOOD] [BAD] [TDB] [PAGES|LINES]
; 1577 :     //      [WHY hhhhhhhh] [TAC nnn] [TND nn] [CPU nnn] [FAILS nn] ]
; 1578 : 
; 1579 :     if (argc > 1)  // (define new settings?)

  000b9	83 bc 24 80 07
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000c1	0f 8e e7 08 00
	00		 jle	 $LN26@txf_cmd

; 1580 :     {
; 1581 :         // Display statistics?
; 1582 :         if (str_caseless_eq( argv[1], "STATS" ))

  000c7	b8 08 00 00 00	 mov	 eax, 8
  000cc	48 6b c0 01	 imul	 rax, rax, 1
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160393
  000d7	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000df	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000e9	85 c0		 test	 eax, eax
  000eb	75 24		 jne	 SHORT $LN27@txf_cmd

; 1583 :         {
; 1584 :             if (argc > 2)

  000ed	83 bc 24 80 07
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000f5	7e 0d		 jle	 SHORT $LN29@txf_cmd

; 1585 :                 rc = -1;

  000f7	c7 84 24 9c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1
  00102	eb 08		 jmp	 SHORT $LN30@txf_cmd
$LN29@txf_cmd:

; 1586 :             else
; 1587 :                 stats = true;

  00104	c6 84 24 90 00
	00 00 01	 mov	 BYTE PTR stats$[rsp], 1
$LN30@txf_cmd:

; 1588 :         }

  0010c	e9 1b 08 00 00	 jmp	 $LN28@txf_cmd
$LN27@txf_cmd:

; 1589 :         // Disable all TXF tracing?
; 1590 :         else if (str_caseless_eq( argv[1], "0"))

  00111	b8 08 00 00 00	 mov	 eax, 8
  00116	48 6b c0 01	 imul	 rax, rax, 1
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160398
  00121	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00129	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00133	85 c0		 test	 eax, eax
  00135	75 27		 jne	 SHORT $LN31@txf_cmd

; 1591 :         {
; 1592 :             if (argc > 2)

  00137	83 bc 24 80 07
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0013f	7e 0d		 jle	 SHORT $LN33@txf_cmd

; 1593 :                 rc = -1;

  00141	c7 84 24 9c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1
  0014c	eb 0b		 jmp	 SHORT $LN34@txf_cmd
$LN33@txf_cmd:

; 1594 :             else
; 1595 :                 txf_tracing = 0;

  0014e	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_tracing$[rsp], 0
$LN34@txf_cmd:

; 1596 :         }

  00159	e9 ce 07 00 00	 jmp	 $LN32@txf_cmd
$LN31@txf_cmd:

; 1597 :         else // Define new options...
; 1598 :         {
; 1599 :             int i;
; 1600 : 
; 1601 :             txf_tracing  = 0;

  0015e	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_tracing$[rsp], 0

; 1602 :             txf_why_mask = 0;

  00169	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_why_mask$[rsp], 0

; 1603 :             txf_tac      = 0;

  00174	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_tac$[rsp], 0

; 1604 :             txf_tnd      = 0;

  0017f	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_tnd$[rsp], 0

; 1605 :             txf_cpuad    = -1;

  0018a	c7 84 24 a8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR txf_cpuad$[rsp], -1

; 1606 :             txf_fails    = 0;

  00195	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_fails$[rsp], 0

; 1607 : 
; 1608 :             for (i=1; i < argc; ++i)

  001a0	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR i$1[rsp], 1
  001ab	eb 10		 jmp	 SHORT $LN7@txf_cmd
$LN5@txf_cmd:
  001ad	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  001b4	ff c0		 inc	 eax
  001b6	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$1[rsp], eax
$LN7@txf_cmd:
  001bd	8b 84 24 80 07
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  001c4	39 84 24 84 00
	00 00		 cmp	 DWORD PTR i$1[rsp], eax
  001cb	0f 8d cc 05 00
	00		 jge	 $LN6@txf_cmd

; 1609 :             {
; 1610 :                      if (str_caseless_eq( argv[i], "INSTR"   )) txf_tracing |= TXF_TR_INSTR;

  001d1	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160403
  001e0	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e8	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  001ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001f2	85 c0		 test	 eax, eax
  001f4	75 17		 jne	 SHORT $LN35@txf_cmd
  001f6	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  001fd	0f ba e8 1f	 bts	 eax, 31
  00201	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  00208	e9 8b 05 00 00	 jmp	 $LN36@txf_cmd
$LN35@txf_cmd:

; 1611 :                 else if (str_caseless_eq( argv[i], "U"       )) txf_tracing |= TXF_TR_U;

  0020d	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160406
  0021c	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00224	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00228	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0022e	85 c0		 test	 eax, eax
  00230	75 17		 jne	 SHORT $LN37@txf_cmd
  00232	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00239	0f ba e8 1a	 bts	 eax, 26
  0023d	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  00244	e9 4f 05 00 00	 jmp	 $LN38@txf_cmd
$LN37@txf_cmd:

; 1612 :                 else if (str_caseless_eq( argv[i], "C"       )) txf_tracing |= TXF_TR_C;

  00249	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  00251	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160409
  00258	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00260	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0026a	85 c0		 test	 eax, eax
  0026c	75 17		 jne	 SHORT $LN39@txf_cmd
  0026e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00275	0f ba e8 1b	 bts	 eax, 27
  00279	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  00280	e9 13 05 00 00	 jmp	 $LN40@txf_cmd
$LN39@txf_cmd:

; 1613 :                 else if (str_caseless_eq( argv[i], "GOOD"    )) txf_tracing |= TXF_TR_SUCCESS;

  00285	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  0028d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160412
  00294	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0029c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002a6	85 c0		 test	 eax, eax
  002a8	75 17		 jne	 SHORT $LN41@txf_cmd
  002aa	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  002b1	0f ba e8 17	 bts	 eax, 23
  002b5	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  002bc	e9 d7 04 00 00	 jmp	 $LN42@txf_cmd
$LN41@txf_cmd:

; 1614 :                 else if (str_caseless_eq( argv[i], "SUCCESS" )) txf_tracing |= TXF_TR_SUCCESS;

  002c1	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  002c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160415
  002d0	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002d8	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002e2	85 c0		 test	 eax, eax
  002e4	75 17		 jne	 SHORT $LN43@txf_cmd
  002e6	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  002ed	0f ba e8 17	 bts	 eax, 23
  002f1	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  002f8	e9 9b 04 00 00	 jmp	 $LN44@txf_cmd
$LN43@txf_cmd:

; 1615 :                 else if (str_caseless_eq( argv[i], "BAD"     )) txf_tracing |= TXF_TR_FAILURE;

  002fd	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  00305	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160418
  0030c	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00314	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0031e	85 c0		 test	 eax, eax
  00320	75 17		 jne	 SHORT $LN45@txf_cmd
  00322	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00329	0f ba e8 16	 bts	 eax, 22
  0032d	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  00334	e9 5f 04 00 00	 jmp	 $LN46@txf_cmd
$LN45@txf_cmd:

; 1616 :                 else if (str_caseless_eq( argv[i], "FAILURE" )) txf_tracing |= TXF_TR_FAILURE;

  00339	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  00341	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160421
  00348	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00350	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00354	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0035a	85 c0		 test	 eax, eax
  0035c	75 17		 jne	 SHORT $LN47@txf_cmd
  0035e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00365	0f ba e8 16	 bts	 eax, 22
  00369	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  00370	e9 23 04 00 00	 jmp	 $LN48@txf_cmd
$LN47@txf_cmd:

; 1617 :                 else if (str_caseless_eq( argv[i], "FAIL"    )) txf_tracing |= TXF_TR_FAILURE;

  00375	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  0037d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160424
  00384	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0038c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00396	85 c0		 test	 eax, eax
  00398	75 17		 jne	 SHORT $LN49@txf_cmd
  0039a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  003a1	0f ba e8 16	 bts	 eax, 22
  003a5	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  003ac	e9 e7 03 00 00	 jmp	 $LN50@txf_cmd
$LN49@txf_cmd:

; 1618 :                 else if (str_caseless_eq( argv[i], "TDB"     )) txf_tracing |= TXF_TR_TDB;

  003b1	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  003b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160427
  003c0	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c8	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  003d2	85 c0		 test	 eax, eax
  003d4	75 17		 jne	 SHORT $LN51@txf_cmd
  003d6	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  003dd	0f ba e8 0b	 bts	 eax, 11
  003e1	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  003e8	e9 ab 03 00 00	 jmp	 $LN52@txf_cmd
$LN51@txf_cmd:

; 1619 :                 else if (str_caseless_eq( argv[i], "PAGES"   )) txf_tracing |= TXF_TR_PAGES;

  003ed	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  003f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160430
  003fc	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00404	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0040e	85 c0		 test	 eax, eax
  00410	75 17		 jne	 SHORT $LN53@txf_cmd
  00412	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00419	0f ba e8 07	 bts	 eax, 7
  0041d	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  00424	e9 6f 03 00 00	 jmp	 $LN54@txf_cmd
$LN53@txf_cmd:

; 1620 :                 else if (str_caseless_eq( argv[i], "LINES"   )) txf_tracing |= TXF_TR_LINES;

  00429	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  00431	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160433
  00438	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00440	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00444	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0044a	85 c0		 test	 eax, eax
  0044c	75 16		 jne	 SHORT $LN55@txf_cmd
  0044e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00455	83 c8 40	 or	 eax, 64			; 00000040H
  00458	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
  0045f	e9 34 03 00 00	 jmp	 $LN56@txf_cmd
$LN55@txf_cmd:

; 1621 :                 else if (1
; 1622 :                     && str_caseless_eq(   argv[i+0], "WHY" )
; 1623 :                     &&                    argv[i+1]
; 1624 :                     && sscanf(            argv[i+1], "%"SCNx32"%c", &txf_why_mask, &c ) == 1

  00464	33 c0		 xor	 eax, eax
  00466	83 f8 01	 cmp	 eax, 1
  00469	0f 84 9f 00 00
	00		 je	 $LN57@txf_cmd
  0046f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00476	48 98		 cdqe
  00478	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160436
  0047f	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00487	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0048b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00491	85 c0		 test	 eax, eax
  00493	75 79		 jne	 SHORT $LN57@txf_cmd
  00495	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  0049c	ff c0		 inc	 eax
  0049e	48 98		 cdqe
  004a0	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004a8	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  004ad	74 5f		 je	 SHORT $LN57@txf_cmd
  004af	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  004b6	ff c0		 inc	 eax
  004b8	48 98		 cdqe
  004ba	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  004c2	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR txf_why_mask$[rsp]
  004ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160437
  004d1	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004d9	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  004dd	e8 00 00 00 00	 call	 sscanf
  004e2	83 f8 01	 cmp	 eax, 1
  004e5	75 27		 jne	 SHORT $LN57@txf_cmd

; 1625 :                 )
; 1626 :                 {
; 1627 :                     txf_tracing |= TXF_TR_WHY;

  004e7	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  004ee	0f ba e8 15	 bts	 eax, 21
  004f2	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1628 :                     ++i;

  004f9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00500	ff c0		 inc	 eax
  00502	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$1[rsp], eax

; 1629 :                 }

  00509	e9 8a 02 00 00	 jmp	 $LN58@txf_cmd
$LN57@txf_cmd:

; 1630 :                 else if (1
; 1631 :                     && str_caseless_eq( argv[i+0], "TAC" )
; 1632 :                     &&                  argv[i+1]
; 1633 :                     && (txf_tac = atoi( argv[i+1] )) > 0

  0050e	33 c0		 xor	 eax, eax
  00510	83 f8 01	 cmp	 eax, 1
  00513	0f 84 95 00 00
	00		 je	 $LN59@txf_cmd
  00519	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00520	48 98		 cdqe
  00522	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160440
  00529	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00531	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00535	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0053b	85 c0		 test	 eax, eax
  0053d	75 6f		 jne	 SHORT $LN59@txf_cmd
  0053f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00546	ff c0		 inc	 eax
  00548	48 98		 cdqe
  0054a	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00552	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00557	74 55		 je	 SHORT $LN59@txf_cmd
  00559	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00560	ff c0		 inc	 eax
  00562	48 98		 cdqe
  00564	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0056c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00570	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00576	89 84 24 98 00
	00 00		 mov	 DWORD PTR txf_tac$[rsp], eax
  0057d	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR txf_tac$[rsp], 0
  00585	7e 27		 jle	 SHORT $LN59@txf_cmd

; 1634 :                 )
; 1635 :                 {
; 1636 :                     txf_tracing |= TXF_TR_TAC;

  00587	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0058e	0f ba e8 14	 bts	 eax, 20
  00592	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1637 :                     ++i;

  00599	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  005a0	ff c0		 inc	 eax
  005a2	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$1[rsp], eax

; 1638 :                 }

  005a9	e9 ea 01 00 00	 jmp	 $LN60@txf_cmd
$LN59@txf_cmd:

; 1639 :                 else if (1
; 1640 :                     && str_caseless_eq( argv[i+0], "TND" )
; 1641 :                     &&                  argv[i+1]
; 1642 :                     && (txf_tnd = atoi( argv[i+1] )) > 0

  005ae	33 c0		 xor	 eax, eax
  005b0	83 f8 01	 cmp	 eax, 1
  005b3	0f 84 95 00 00
	00		 je	 $LN61@txf_cmd
  005b9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  005c0	48 98		 cdqe
  005c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160443
  005c9	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005d1	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  005db	85 c0		 test	 eax, eax
  005dd	75 6f		 jne	 SHORT $LN61@txf_cmd
  005df	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  005e6	ff c0		 inc	 eax
  005e8	48 98		 cdqe
  005ea	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005f2	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  005f7	74 55		 je	 SHORT $LN61@txf_cmd
  005f9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00600	ff c0		 inc	 eax
  00602	48 98		 cdqe
  00604	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0060c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00610	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00616	89 84 24 a4 00
	00 00		 mov	 DWORD PTR txf_tnd$[rsp], eax
  0061d	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR txf_tnd$[rsp], 0
  00625	7e 27		 jle	 SHORT $LN61@txf_cmd

; 1643 :                 )
; 1644 :                 {
; 1645 :                     txf_tracing |= TXF_TR_TND;

  00627	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0062e	0f ba e8 13	 bts	 eax, 19
  00632	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1646 :                     ++i;

  00639	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00640	ff c0		 inc	 eax
  00642	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$1[rsp], eax

; 1647 :                 }

  00649	e9 4a 01 00 00	 jmp	 $LN62@txf_cmd
$LN61@txf_cmd:

; 1648 :                 else if (1
; 1649 :                     && str_caseless_eq(   argv[i+0], "CPU" )
; 1650 :                     &&                    argv[i+1]
; 1651 :                     && (txf_cpuad = atoi( argv[i+1] )) >= 0

  0064e	33 c0		 xor	 eax, eax
  00650	83 f8 01	 cmp	 eax, 1
  00653	0f 84 95 00 00
	00		 je	 $LN63@txf_cmd
  00659	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00660	48 98		 cdqe
  00662	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160446
  00669	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00671	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00675	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0067b	85 c0		 test	 eax, eax
  0067d	75 6f		 jne	 SHORT $LN63@txf_cmd
  0067f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00686	ff c0		 inc	 eax
  00688	48 98		 cdqe
  0068a	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00692	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00697	74 55		 je	 SHORT $LN63@txf_cmd
  00699	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  006a0	ff c0		 inc	 eax
  006a2	48 98		 cdqe
  006a4	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006ac	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  006b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  006b6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR txf_cpuad$[rsp], eax
  006bd	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR txf_cpuad$[rsp], 0
  006c5	7c 27		 jl	 SHORT $LN63@txf_cmd

; 1652 :                 )
; 1653 :                 {
; 1654 :                     txf_tracing |= TXF_TR_CPU;

  006c7	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  006ce	0f ba e8 12	 bts	 eax, 18
  006d2	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1655 :                     ++i;

  006d9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  006e0	ff c0		 inc	 eax
  006e2	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$1[rsp], eax

; 1656 :                 }

  006e9	e9 aa 00 00 00	 jmp	 $LN64@txf_cmd
$LN63@txf_cmd:

; 1657 :                 else if (1
; 1658 :                     && str_caseless_eq(   argv[i+0], "FAILS" )
; 1659 :                     &&                    argv[i+1]
; 1660 :                     && (txf_fails = atoi( argv[i+1] )) > 0

  006ee	33 c0		 xor	 eax, eax
  006f0	83 f8 01	 cmp	 eax, 1
  006f3	0f 84 92 00 00
	00		 je	 $LN65@txf_cmd
  006f9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00700	48 98		 cdqe
  00702	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160449
  00709	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00711	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00715	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0071b	85 c0		 test	 eax, eax
  0071d	75 6c		 jne	 SHORT $LN65@txf_cmd
  0071f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00726	ff c0		 inc	 eax
  00728	48 98		 cdqe
  0072a	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00732	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00737	74 52		 je	 SHORT $LN65@txf_cmd
  00739	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00740	ff c0		 inc	 eax
  00742	48 98		 cdqe
  00744	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0074c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00750	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00756	89 84 24 94 00
	00 00		 mov	 DWORD PTR txf_fails$[rsp], eax
  0075d	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR txf_fails$[rsp], 0
  00765	7e 24		 jle	 SHORT $LN65@txf_cmd

; 1661 :                 )
; 1662 :                 {
; 1663 :                     txf_tracing |= TXF_TR_FAILS;

  00767	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0076e	0f ba e8 11	 bts	 eax, 17
  00772	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1664 :                     ++i;

  00779	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  00780	ff c0		 inc	 eax
  00782	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$1[rsp], eax

; 1665 :                 }

  00789	eb 0d		 jmp	 SHORT $LN66@txf_cmd
$LN65@txf_cmd:

; 1666 :                 else
; 1667 :                 {
; 1668 :                     rc = -1;

  0078b	c7 84 24 9c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1

; 1669 :                     break;

  00796	eb 05		 jmp	 SHORT $LN6@txf_cmd
$LN66@txf_cmd:
$LN64@txf_cmd:
$LN62@txf_cmd:
$LN60@txf_cmd:
$LN58@txf_cmd:
$LN56@txf_cmd:
$LN54@txf_cmd:
$LN52@txf_cmd:
$LN50@txf_cmd:
$LN48@txf_cmd:
$LN46@txf_cmd:
$LN44@txf_cmd:
$LN42@txf_cmd:
$LN40@txf_cmd:
$LN38@txf_cmd:
$LN36@txf_cmd:

; 1670 :                 }
; 1671 :             }

  00798	e9 10 fa ff ff	 jmp	 $LN5@txf_cmd
$LN6@txf_cmd:

; 1672 : 
; 1673 :             if (rc == 0)

  0079d	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  007a5	0f 85 81 01 00
	00		 jne	 $LN67@txf_cmd

; 1674 :             {
; 1675 :                 //------------------------------------------------
; 1676 :                 //   If neither U nor C specified, set both.
; 1677 :                 //------------------------------------------------
; 1678 :                 if (!(txf_tracing & (TXF_TR_U | TXF_TR_C)))

  007ab	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  007b2	25 00 00 00 0c	 and	 eax, 201326592		; 0c000000H
  007b7	85 c0		 test	 eax, eax
  007b9	75 13		 jne	 SHORT $LN68@txf_cmd

; 1679 :                 {
; 1680 :                     txf_tracing |= (TXF_TR_U | TXF_TR_C);

  007bb	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  007c2	0d 00 00 00 0c	 or	 eax, 201326592		; 0c000000H
  007c7	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
$LN68@txf_cmd:

; 1681 :                 }
; 1682 : 
; 1683 :                 //------------------------------------------------
; 1684 :                 //  If neither GOOD nor BAD specified, set both.
; 1685 :                 //------------------------------------------------
; 1686 :                 if (!(txf_tracing & (TXF_TR_SUCCESS | TXF_TR_FAILURE)))

  007ce	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  007d5	25 00 00 c0 00	 and	 eax, 12582912		; 00c00000H
  007da	85 c0		 test	 eax, eax
  007dc	75 13		 jne	 SHORT $LN69@txf_cmd

; 1687 :                 {
; 1688 :                     txf_tracing |= (TXF_TR_SUCCESS | TXF_TR_FAILURE);

  007de	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  007e5	0d 00 00 c0 00	 or	 eax, 12582912		; 00c00000H
  007ea	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
$LN69@txf_cmd:

; 1689 :                 }
; 1690 : 
; 1691 :                 //------------------------------------------------
; 1692 :                 //   If WHY, TAC or FAILS specified, set BAD.
; 1693 :                 //------------------------------------------------
; 1694 :                 if (txf_tracing & (TXF_TR_WHY | TXF_TR_TAC | TXF_TR_FAILS))

  007f1	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  007f8	25 00 00 32 00	 and	 eax, 3276800		; 00320000H
  007fd	85 c0		 test	 eax, eax
  007ff	74 12		 je	 SHORT $LN70@txf_cmd

; 1695 :                 {
; 1696 :                     txf_tracing |= TXF_TR_FAILURE;

  00801	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00808	0f ba e8 16	 bts	 eax, 22
  0080c	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
$LN70@txf_cmd:

; 1697 :                 }
; 1698 : 
; 1699 :                 //------------------------------------------------
; 1700 :                 //   If FAILS specified, set C BAD.
; 1701 :                 //------------------------------------------------
; 1702 :                 if (txf_tracing & TXF_TR_FAILS)

  00813	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0081a	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  0081f	85 c0		 test	 eax, eax
  00821	74 13		 je	 SHORT $LN71@txf_cmd

; 1703 :                 {
; 1704 :                     txf_tracing |= (TXF_TR_C | TXF_TR_FAILURE);

  00823	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0082a	0d 00 00 40 08	 or	 eax, 138412032		; 08400000H
  0082f	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
$LN71@txf_cmd:

; 1705 :                 }
; 1706 : 
; 1707 :                 //------------------------------------------------
; 1708 :                 //      If LINES specified, set PAGES too.
; 1709 :                 //------------------------------------------------
; 1710 :                 if (txf_tracing & TXF_TR_LINES)

  00836	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0083d	83 e0 40	 and	 eax, 64			; 00000040H
  00840	85 c0		 test	 eax, eax
  00842	74 12		 je	 SHORT $LN72@txf_cmd

; 1711 :                 {
; 1712 :                     txf_tracing |= TXF_TR_PAGES;

  00844	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0084b	0f ba e8 07	 bts	 eax, 7
  0084f	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
$LN72@txf_cmd:

; 1713 :                 }
; 1714 : 
; 1715 :                 //------------------------------------------------
; 1716 :                 //     Ignore TDB unless BAD also specified.
; 1717 :                 //------------------------------------------------
; 1718 :                 if (!(txf_tracing & TXF_TR_FAILURE))

  00856	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0085d	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00862	85 c0		 test	 eax, eax
  00864	75 12		 jne	 SHORT $LN73@txf_cmd

; 1719 :                 {
; 1720 :                     txf_tracing &= ~TXF_TR_TDB;

  00866	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0086d	0f ba f0 0b	 btr	 eax, 11
  00871	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax
$LN73@txf_cmd:

; 1721 :                 }
; 1722 : 
; 1723 :                 //------------------------------------------------
; 1724 :                 //     Ignore WHY unless BAD also specified.
; 1725 :                 //------------------------------------------------
; 1726 :                 if (!(txf_tracing & TXF_TR_FAILURE))

  00878	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0087f	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00884	85 c0		 test	 eax, eax
  00886	75 1d		 jne	 SHORT $LN74@txf_cmd

; 1727 :                 {
; 1728 :                     txf_tracing &= ~TXF_TR_WHY;

  00888	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  0088f	0f ba f0 15	 btr	 eax, 21
  00893	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1729 :                     txf_why_mask = 0;

  0089a	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_why_mask$[rsp], 0
$LN74@txf_cmd:

; 1730 :                 }
; 1731 : 
; 1732 :                 //------------------------------------------------
; 1733 :                 //     Ignore TAC unless BAD also specified.
; 1734 :                 //------------------------------------------------
; 1735 :                 if (!(txf_tracing & TXF_TR_FAILURE))

  008a5	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  008ac	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  008b1	85 c0		 test	 eax, eax
  008b3	75 1d		 jne	 SHORT $LN75@txf_cmd

; 1736 :                 {
; 1737 :                     txf_tracing &= ~TXF_TR_TAC;

  008b5	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  008bc	0f ba f0 14	 btr	 eax, 20
  008c0	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1738 :                     txf_tac = 0;

  008c7	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_tac$[rsp], 0
$LN75@txf_cmd:

; 1739 :                 }
; 1740 : 
; 1741 :                 //------------------------------------------------
; 1742 :                 //     Ignore FAILS unless BAD also specified.
; 1743 :                 //------------------------------------------------
; 1744 :                 if (!(txf_tracing & TXF_TR_FAILURE))

  008d2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  008d9	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  008de	85 c0		 test	 eax, eax
  008e0	75 1d		 jne	 SHORT $LN76@txf_cmd

; 1745 :                 {
; 1746 :                     txf_tracing &= ~TXF_TR_FAILS;

  008e2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  008e9	0f ba f0 11	 btr	 eax, 17
  008ed	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1747 :                     txf_fails = 0;

  008f4	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_fails$[rsp], 0
$LN76@txf_cmd:

; 1748 :                 }
; 1749 : 
; 1750 :                 //------------------------------------------------
; 1751 :                 //     Ignore FAILS unless C also specified.
; 1752 :                 //------------------------------------------------
; 1753 :                 if (!(txf_tracing & TXF_TR_C))

  008ff	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00906	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0090b	85 c0		 test	 eax, eax
  0090d	75 1d		 jne	 SHORT $LN77@txf_cmd

; 1754 :                 {
; 1755 :                     txf_tracing &= ~TXF_TR_FAILS;

  0090f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00916	0f ba f0 11	 btr	 eax, 17
  0091a	89 84 24 80 00
	00 00		 mov	 DWORD PTR txf_tracing$[rsp], eax

; 1756 :                     txf_fails = 0;

  00921	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR txf_fails$[rsp], 0
$LN77@txf_cmd:
$LN67@txf_cmd:
$LN32@txf_cmd:
$LN28@txf_cmd:

; 1757 :                 }
; 1758 :             }
; 1759 :         }
; 1760 : 
; 1761 :         if (rc == 0)

  0092c	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  00934	75 78		 jne	 SHORT $LN78@txf_cmd

; 1762 :         {
; 1763 :             sysblk.txf_tracing  = txf_tracing;

  00936	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0093d	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR txf_tracing$[rsp]
  00944	89 88 4c 05 00
	00		 mov	 DWORD PTR [rax+1356], ecx

; 1764 :             sysblk.txf_why_mask = txf_why_mask;

  0094a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00951	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR txf_why_mask$[rsp]
  00958	89 88 50 05 00
	00		 mov	 DWORD PTR [rax+1360], ecx

; 1765 :             sysblk.txf_tac      = txf_tac;

  0095e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00965	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR txf_tac$[rsp]
  0096c	89 88 54 05 00
	00		 mov	 DWORD PTR [rax+1364], ecx

; 1766 :             sysblk.txf_tnd      = txf_tnd;

  00972	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00979	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR txf_tnd$[rsp]
  00980	89 88 58 05 00
	00		 mov	 DWORD PTR [rax+1368], ecx

; 1767 :             sysblk.txf_cpuad    = txf_cpuad;

  00986	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0098d	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR txf_cpuad$[rsp]
  00994	89 88 60 05 00
	00		 mov	 DWORD PTR [rax+1376], ecx

; 1768 :             sysblk.txf_fails    = txf_fails;

  0099a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009a1	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR txf_fails$[rsp]
  009a8	89 88 5c 05 00
	00		 mov	 DWORD PTR [rax+1372], ecx
$LN78@txf_cmd:
$LN26@txf_cmd:

; 1769 :         }
; 1770 :     }
; 1771 : 
; 1772 :     if (rc != 0)

  009ae	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  009b6	74 76		 je	 SHORT $LN79@txf_cmd

; 1773 :     {
; 1774 :         // "Invalid command usage. Type 'help %s' for assistance."
; 1775 :         WRMSG( HHC02299, "E", argv[0] );

  009b8	b8 08 00 00 00	 mov	 eax, 8
  009bd	48 6b c0 00	 imul	 rax, rax, 0
  009c1	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv365[rsp], rax
  009c9	b9 01 00 00 00	 mov	 ecx, 1
  009ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009d4	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  009dc	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv365[rsp]
  009e4	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  009e8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160464
  009f4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160465
  00a00	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a05	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a0a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a10	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160466
  00a17	ba ef 06 00 00	 mov	 edx, 1775		; 000006efH
  00a1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160467
  00a23	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1776 :     }

  00a29	e9 51 0e 00 00	 jmp	 $LN80@txf_cmd
$LN79@txf_cmd:

; 1777 :     else if (!stats) // Display new/current settings

  00a2e	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR stats$[rsp]
  00a36	85 c0		 test	 eax, eax
  00a38	0f 85 1c 05 00
	00		 jne	 $LN81@txf_cmd

; 1778 :     {
; 1779 :         char buf[1024] = {0};

  00a3e	48 8d 84 24 60
	03 00 00	 lea	 rax, QWORD PTR buf$11[rsp]
  00a46	48 8b f8	 mov	 rdi, rax
  00a49	33 c0		 xor	 eax, eax
  00a4b	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00a50	f3 aa		 rep stosb

; 1780 : 
; 1781 :         // txf  [0 | STATS | [INSTR] [U] [C] [GOOD] [BAD] [TDB] [PAGES|LINES]
; 1782 :         //      [WHY hhhhhhhh] [TAC nnn] [TND nn] [CPU nnn] [FAILS nn] ]
; 1783 : 
; 1784 :         if (txf_tracing)

  00a52	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR txf_tracing$[rsp], 0
  00a5a	0f 84 91 03 00
	00		 je	 $LN83@txf_cmd

; 1785 :         {
; 1786 :             char why[256] = {0}; // WHY hhhhhhhh (xxx xxx xxx ... )

  00a60	48 8d 84 24 60
	02 00 00	 lea	 rax, QWORD PTR why$10[rsp]
  00a68	48 8b f8	 mov	 rdi, rax
  00a6b	33 c0		 xor	 eax, eax
  00a6d	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00a72	f3 aa		 rep stosb

; 1787 :             char tac[64]  = {0};

  00a74	48 8d 84 24 20
	02 00 00	 lea	 rax, QWORD PTR tac$9[rsp]
  00a7c	48 8b f8	 mov	 rdi, rax
  00a7f	33 c0		 xor	 eax, eax
  00a81	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00a86	f3 aa		 rep stosb

; 1788 :             char tnd[32]  = {0};

  00a88	48 8d 84 24 f8
	01 00 00	 lea	 rax, QWORD PTR tnd$8[rsp]
  00a90	48 8b f8	 mov	 rdi, rax
  00a93	33 c0		 xor	 eax, eax
  00a95	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00a9a	f3 aa		 rep stosb

; 1789 :             char cpu[32]  = {0};

  00a9c	48 8d 84 24 d8
	01 00 00	 lea	 rax, QWORD PTR cpu$7[rsp]
  00aa4	48 8b f8	 mov	 rdi, rax
  00aa7	33 c0		 xor	 eax, eax
  00aa9	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00aae	f3 aa		 rep stosb

; 1790 :             char cfl[32]  = {0};

  00ab0	48 8d 84 24 b8
	01 00 00	 lea	 rax, QWORD PTR cfl$6[rsp]
  00ab8	48 8b f8	 mov	 rdi, rax
  00abb	33 c0		 xor	 eax, eax
  00abd	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00ac2	f3 aa		 rep stosb

; 1791 : 
; 1792 :             if (txf_why_mask)    MSGBUF( why, "WHY 0x%8.8"PRIX32" ",  txf_why_mask );

  00ac4	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR txf_why_mask$[rsp], 0
  00acc	74 22		 je	 SHORT $LN84@txf_cmd
  00ace	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR txf_why_mask$[rsp]
  00ad6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160472
  00add	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00ae2	48 8d 8c 24 60
	02 00 00	 lea	 rcx, QWORD PTR why$10[rsp]
  00aea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN84@txf_cmd:

; 1793 :             if (txf_tac    >  0) MSGBUF( tac, "TAC %d ",              txf_tac      );

  00af0	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR txf_tac$[rsp], 0
  00af8	7e 22		 jle	 SHORT $LN85@txf_cmd
  00afa	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR txf_tac$[rsp]
  00b02	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160474
  00b09	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00b0e	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR tac$9[rsp]
  00b16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN85@txf_cmd:

; 1794 :             if (txf_tnd    >  0) MSGBUF( tnd, "TND %d ",              txf_tnd      );

  00b1c	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR txf_tnd$[rsp], 0
  00b24	7e 22		 jle	 SHORT $LN86@txf_cmd
  00b26	44 8b 8c 24 a4
	00 00 00	 mov	 r9d, DWORD PTR txf_tnd$[rsp]
  00b2e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160476
  00b35	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00b3a	48 8d 8c 24 f8
	01 00 00	 lea	 rcx, QWORD PTR tnd$8[rsp]
  00b42	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN86@txf_cmd:

; 1795 :             if (txf_cpuad  >= 0) MSGBUF( cpu, "CPU %d ",              txf_cpuad    );

  00b48	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR txf_cpuad$[rsp], 0
  00b50	7c 22		 jl	 SHORT $LN87@txf_cmd
  00b52	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR txf_cpuad$[rsp]
  00b5a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160478
  00b61	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00b66	48 8d 8c 24 d8
	01 00 00	 lea	 rcx, QWORD PTR cpu$7[rsp]
  00b6e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN87@txf_cmd:

; 1796 :             if (txf_fails  >  0) MSGBUF( cfl, "FAILS %d ",            txf_fails    );

  00b74	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR txf_fails$[rsp], 0
  00b7c	7e 22		 jle	 SHORT $LN88@txf_cmd
  00b7e	44 8b 8c 24 94
	00 00 00	 mov	 r9d, DWORD PTR txf_fails$[rsp]
  00b86	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160480
  00b8d	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00b92	48 8d 8c 24 b8
	01 00 00	 lea	 rcx, QWORD PTR cfl$6[rsp]
  00b9a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN88@txf_cmd:

; 1797 : 
; 1798 :             MSGBUF( buf, "%s%s%s%s%s%s%s%s" "%s%s%s%s%s"

  00ba0	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00ba7	83 e0 40	 and	 eax, 64			; 00000040H
  00baa	85 c0		 test	 eax, eax
  00bac	74 11		 je	 SHORT $LN98@txf_cmd
  00bae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160481
  00bb5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv437[rsp], rax
  00bbd	eb 0f		 jmp	 SHORT $LN99@txf_cmd
$LN98@txf_cmd:
  00bbf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160482
  00bc6	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv437[rsp], rax
$LN99@txf_cmd:
  00bce	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00bd5	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00bda	85 c0		 test	 eax, eax
  00bdc	74 11		 je	 SHORT $LN100@txf_cmd
  00bde	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160483
  00be5	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv441[rsp], rax
  00bed	eb 0f		 jmp	 SHORT $LN101@txf_cmd
$LN100@txf_cmd:
  00bef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160484
  00bf6	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv441[rsp], rax
$LN101@txf_cmd:
  00bfe	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00c05	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00c0a	85 c0		 test	 eax, eax
  00c0c	74 11		 je	 SHORT $LN102@txf_cmd
  00c0e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160485
  00c15	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv445[rsp], rax
  00c1d	eb 0f		 jmp	 SHORT $LN103@txf_cmd
$LN102@txf_cmd:
  00c1f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160486
  00c26	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv445[rsp], rax
$LN103@txf_cmd:
  00c2e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00c35	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00c3a	85 c0		 test	 eax, eax
  00c3c	74 11		 je	 SHORT $LN104@txf_cmd
  00c3e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160487
  00c45	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv481[rsp], rax
  00c4d	eb 0f		 jmp	 SHORT $LN105@txf_cmd
$LN104@txf_cmd:
  00c4f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160488
  00c56	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv481[rsp], rax
$LN105@txf_cmd:
  00c5e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00c65	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  00c6a	85 c0		 test	 eax, eax
  00c6c	74 11		 je	 SHORT $LN106@txf_cmd
  00c6e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160489
  00c75	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv485[rsp], rax
  00c7d	eb 0f		 jmp	 SHORT $LN107@txf_cmd
$LN106@txf_cmd:
  00c7f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160490
  00c86	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv485[rsp], rax
$LN107@txf_cmd:
  00c8e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00c95	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00c9a	85 c0		 test	 eax, eax
  00c9c	74 11		 je	 SHORT $LN108@txf_cmd
  00c9e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160491
  00ca5	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv489[rsp], rax
  00cad	eb 0f		 jmp	 SHORT $LN109@txf_cmd
$LN108@txf_cmd:
  00caf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160492
  00cb6	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv489[rsp], rax
$LN109@txf_cmd:
  00cbe	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00cc5	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00cca	85 c0		 test	 eax, eax
  00ccc	74 11		 je	 SHORT $LN110@txf_cmd
  00cce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160493
  00cd5	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv493[rsp], rax
  00cdd	eb 0f		 jmp	 SHORT $LN111@txf_cmd
$LN110@txf_cmd:
  00cdf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160494
  00ce6	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv493[rsp], rax
$LN111@txf_cmd:
  00cee	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR txf_tracing$[rsp]
  00cf5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00cfa	85 c0		 test	 eax, eax
  00cfc	74 11		 je	 SHORT $LN112@txf_cmd
  00cfe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160495
  00d05	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv497[rsp], rax
  00d0d	eb 0f		 jmp	 SHORT $LN113@txf_cmd
$LN112@txf_cmd:
  00d0f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160496
  00d16	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv497[rsp], rax
$LN113@txf_cmd:
  00d1e	48 8d 84 24 b8
	01 00 00	 lea	 rax, QWORD PTR cfl$6[rsp]
  00d26	48 89 44 24 78	 mov	 QWORD PTR [rsp+120], rax
  00d2b	48 8d 84 24 d8
	01 00 00	 lea	 rax, QWORD PTR cpu$7[rsp]
  00d33	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  00d38	48 8d 84 24 f8
	01 00 00	 lea	 rax, QWORD PTR tnd$8[rsp]
  00d40	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  00d45	48 8d 84 24 20
	02 00 00	 lea	 rax, QWORD PTR tac$9[rsp]
  00d4d	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00d52	48 8d 84 24 60
	02 00 00	 lea	 rax, QWORD PTR why$10[rsp]
  00d5a	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00d5f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv437[rsp]
  00d67	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00d6c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv441[rsp]
  00d74	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00d79	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv445[rsp]
  00d81	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00d86	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv481[rsp]
  00d8e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00d93	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv485[rsp]
  00d9b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00da0	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv489[rsp]
  00da8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00dad	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv493[rsp]
  00db5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00dba	4c 8b 8c 24 00
	01 00 00	 mov	 r9, QWORD PTR tv497[rsp]
  00dc2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160497
  00dc9	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00dce	48 8d 8c 24 60
	03 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  00dd6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1799 : 
; 1800 :                 , txf_tracing & TXF_TR_INSTR   ? "INSTR " : ""
; 1801 :                 , txf_tracing & TXF_TR_U       ? "U "     : ""
; 1802 :                 , txf_tracing & TXF_TR_C       ? "C "     : ""
; 1803 :                 , txf_tracing & TXF_TR_SUCCESS ? "GOOD "  : ""
; 1804 :                 , txf_tracing & TXF_TR_FAILURE ? "BAD "   : ""
; 1805 :                 , txf_tracing & TXF_TR_TDB     ? "TDB "   : ""
; 1806 :                 , txf_tracing & TXF_TR_PAGES   ? "PAGES " : ""
; 1807 :                 , txf_tracing & TXF_TR_LINES   ? "LINES " : ""
; 1808 : 
; 1809 :                 , why
; 1810 :                 , tac
; 1811 :                 , tnd
; 1812 :                 , cpu
; 1813 :                 , cfl
; 1814 :             );
; 1815 :             RTRIM( buf );

  00ddc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160498
  00de3	48 8d 8c 24 60
	03 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  00deb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
$LN83@txf_cmd:
$LN10@txf_cmd:

; 1816 :         }
; 1817 : 
; 1818 :         UPPER_ARGV_0( argv );

  00df1	48 83 bc 24 88
	07 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00dfa	74 47		 je	 SHORT $LN89@txf_cmd
  00dfc	b8 08 00 00 00	 mov	 eax, 8
  00e01	48 6b c0 00	 imul	 rax, rax, 0
  00e05	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e0d	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00e12	74 2f		 je	 SHORT $LN89@txf_cmd
  00e14	b8 08 00 00 00	 mov	 eax, 8
  00e19	48 6b c0 00	 imul	 rax, rax, 0
  00e1d	b9 08 00 00 00	 mov	 ecx, 8
  00e22	48 6b c9 00	 imul	 rcx, rcx, 0
  00e26	48 8b 94 24 88
	07 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00e2e	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00e32	48 8b 84 24 88
	07 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00e3a	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00e3e	e8 00 00 00 00	 call	 strupper
$LN89@txf_cmd:
  00e43	33 c0		 xor	 eax, eax
  00e45	85 c0		 test	 eax, eax
  00e47	75 a8		 jne	 SHORT $LN10@txf_cmd

; 1819 : 
; 1820 :         if (argc > 1)  // Defined new options...

  00e49	83 bc 24 80 07
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00e51	0f 8e 80 00 00
	00		 jle	 $LN90@txf_cmd

; 1821 :         {
; 1822 :             // "%-14s set to %s"
; 1823 :             WRMSG( HHC02204, "I", argv[0], buf );

  00e57	b8 08 00 00 00	 mov	 eax, 8
  00e5c	48 6b c0 00	 imul	 rax, rax, 0
  00e60	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv516[rsp], rax
  00e68	b9 01 00 00 00	 mov	 ecx, 1
  00e6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e73	48 8d 8c 24 60
	03 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  00e7b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00e80	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e88	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv516[rsp]
  00e90	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00e94	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160502
  00ea0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ea5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160503
  00eac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00eb1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00eb6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ebc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160504
  00ec3	ba 1f 07 00 00	 mov	 edx, 1823		; 0000071fH
  00ec8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160505
  00ecf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1824 :         }

  00ed5	eb 7e		 jmp	 SHORT $LN91@txf_cmd
$LN90@txf_cmd:

; 1825 :         else // Display current settings...
; 1826 :         {
; 1827 :             // "%-14s: %s"
; 1828 :             WRMSG( HHC02203, "I", argv[0], buf );

  00ed7	b8 08 00 00 00	 mov	 eax, 8
  00edc	48 6b c0 00	 imul	 rax, rax, 0
  00ee0	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv529[rsp], rax
  00ee8	b9 01 00 00 00	 mov	 ecx, 1
  00eed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ef3	48 8d 8c 24 60
	03 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  00efb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00f00	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00f08	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR tv529[rsp]
  00f10	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00f14	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160506
  00f20	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160507
  00f2c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f31	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f36	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f3c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160508
  00f43	ba 24 07 00 00	 mov	 edx, 1828		; 00000724H
  00f48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160509
  00f4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN91@txf_cmd:

; 1829 :         }
; 1830 :     }

  00f55	e9 25 09 00 00	 jmp	 $LN82@txf_cmd
$LN81@txf_cmd:

; 1831 :     else // (stats)
; 1832 :     {
; 1833 :         int  contran;
; 1834 :         for (contran=0; contran <= 1; contran++)

  00f5a	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR contran$3[rsp], 0
  00f65	eb 10		 jmp	 SHORT $LN13@txf_cmd
$LN11@txf_cmd:
  00f67	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR contran$3[rsp]
  00f6e	ff c0		 inc	 eax
  00f70	89 84 24 8c 00
	00 00		 mov	 DWORD PTR contran$3[rsp], eax
$LN13@txf_cmd:
  00f77	83 bc 24 8c 00
	00 00 01	 cmp	 DWORD PTR contran$3[rsp], 1
  00f7f	0f 8f fa 08 00
	00		 jg	 $LN12@txf_cmd

; 1835 :         {
; 1836 :             if (sysblk.txf_stats[ contran ].txf_trans)

  00f85	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  00f8d	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  00f94	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00f9b	48 83 bc 01 78
	05 00 00 00	 cmp	 QWORD PTR [rcx+rax+1400], 0
  00fa4	0f 84 d0 08 00
	00		 je	 $LN92@txf_cmd

; 1837 :             {
; 1838 :                 double total, count;
; 1839 :                 int i;
; 1840 : 
; 1841 :                 // "Total %s Transactions =%12"PRIu64
; 1842 :                 WRMSG( HHC17730, "I", TXF_CONSTRAINED( contran ),

  00faa	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR contran$3[rsp], 0
  00fb2	74 11		 je	 SHORT $LN114@txf_cmd
  00fb4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160511
  00fbb	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv556[rsp], rax
  00fc3	eb 0f		 jmp	 SHORT $LN115@txf_cmd
$LN114@txf_cmd:
  00fc5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160512
  00fcc	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv556[rsp], rax
$LN115@txf_cmd:
  00fd4	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  00fdc	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  00fe3	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv551[rsp], rax
  00feb	b9 01 00 00 00	 mov	 ecx, 1
  00ff0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ff6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00ffd	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR tv551[rsp]
  01005	48 8b 8c 11 78
	05 00 00	 mov	 rcx, QWORD PTR [rcx+rdx+1400]
  0100d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01012	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv556[rsp]
  0101a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0101f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160513
  01026	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0102b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160514
  01032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01037	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0103c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01042	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160515
  01049	ba 33 07 00 00	 mov	 edx, 1843		; 00000733H
  0104e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160516
  01055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1843 :                         sysblk.txf_stats[ contran ].txf_trans );
; 1844 :                 total = sysblk.txf_stats[ contran ].txf_trans;

  0105b	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  01063	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  0106a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01071	48 8b 84 01 78
	05 00 00	 mov	 rax, QWORD PTR [rcx+rax+1400]
  01079	48 85 c0	 test	 rax, rax
  0107c	7c 07		 jl	 SHORT $LN126@txf_cmd
  0107e	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  01083	eb 19		 jmp	 SHORT $LN127@txf_cmd
$LN126@txf_cmd:
  01085	48 8b c8	 mov	 rcx, rax
  01088	48 d1 e9	 shr	 rcx, 1
  0108b	48 83 e0 01	 and	 rax, 1
  0108f	48 0b c8	 or	 rcx, rax
  01092	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  01097	f2 0f 58 c9	 addsd	 xmm1, xmm1
  0109b	0f 28 c1	 movaps	 xmm0, xmm1
$LN127@txf_cmd:
  0109e	f2 0f 11 84 24
	c0 00 00 00	 movsd	 QWORD PTR total$5[rsp], xmm0

; 1845 : 
; 1846 :                 // "  Retries for ANY/ALL reason(s):"
; 1847 :                 WRMSG( HHC17731, "I" );

  010a7	b9 01 00 00 00	 mov	 ecx, 1
  010ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160517
  010b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160518
  010c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  010d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160519
  010dc	ba 37 07 00 00	 mov	 edx, 1847		; 00000737H
  010e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160520
  010e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1848 : 
; 1849 :                 /* Print buckets up until just BEFORE the last bucket */
; 1850 :                 for (i=0; i < (TXF_STATS_RETRY_SLOTS-1); i++)

  010ee	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$2[rsp], 0
  010f9	eb 10		 jmp	 SHORT $LN16@txf_cmd
$LN14@txf_cmd:
  010fb	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR i$2[rsp]
  01102	ff c0		 inc	 eax
  01104	89 84 24 88 00
	00 00		 mov	 DWORD PTR i$2[rsp], eax
$LN16@txf_cmd:
  0110b	83 bc 24 88 00
	00 00 08	 cmp	 DWORD PTR i$2[rsp], 8
  01113	0f 8d 40 01 00
	00		 jge	 $LN15@txf_cmd

; 1851 :                 {
; 1852 :                     count = sysblk.txf_stats[ contran ].txf_retries[ i ];

  01119	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  01121	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  01128	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0112f	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  01137	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR i$2[rsp]
  0113f	48 8b 84 c8 98
	00 00 00	 mov	 rax, QWORD PTR [rax+rcx*8+152]
  01147	48 85 c0	 test	 rax, rax
  0114a	7c 07		 jl	 SHORT $LN124@txf_cmd
  0114c	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  01151	eb 19		 jmp	 SHORT $LN125@txf_cmd
$LN124@txf_cmd:
  01153	48 8b c8	 mov	 rcx, rax
  01156	48 d1 e9	 shr	 rcx, 1
  01159	48 83 e0 01	 and	 rax, 1
  0115d	48 0b c8	 or	 rcx, rax
  01160	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  01165	f2 0f 58 c9	 addsd	 xmm1, xmm1
  01169	0f 28 c1	 movaps	 xmm0, xmm1
$LN125@txf_cmd:
  0116c	f2 0f 11 84 24
	b0 00 00 00	 movsd	 QWORD PTR count$4[rsp], xmm0

; 1853 : 
; 1854 :                     // "    %1d%cretries =%12"PRIu64"  (%4.1f%%)"
; 1855 :                     WRMSG( HHC17732, "I",

  01175	f2 0f 10 84 24
	b0 00 00 00	 movsd	 xmm0, QWORD PTR count$4[rsp]
  0117e	f2 0f 5e 84 24
	c0 00 00 00	 divsd	 xmm0, QWORD PTR total$5[rsp]
  01187	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  0118f	f2 0f 11 84 24
	30 01 00 00	 movsd	 QWORD PTR tv595[rsp], xmm0
  01198	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  011a0	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  011a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  011ae	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  011b6	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv600[rsp], rax
  011be	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR i$2[rsp]
  011c6	48 89 8c 24 38
	01 00 00	 mov	 QWORD PTR tv602[rsp], rcx
  011ce	b9 01 00 00 00	 mov	 ecx, 1
  011d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  011d9	f2 0f 10 84 24
	30 01 00 00	 movsd	 xmm0, QWORD PTR tv595[rsp]
  011e2	f2 0f 11 44 24
	50		 movsd	 QWORD PTR [rsp+80], xmm0
  011e8	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR tv602[rsp]
  011f0	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv600[rsp]
  011f8	48 8b 8c d1 98
	00 00 00	 mov	 rcx, QWORD PTR [rcx+rdx*8+152]
  01200	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01205	c7 44 24 40 20
	00 00 00	 mov	 DWORD PTR [rsp+64], 32	; 00000020H
  0120d	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR i$2[rsp]
  01214	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160521
  0121f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160522
  0122b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01230	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01235	41 b9 03 00 00
	00		 mov	 r9d, 3
  0123b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160523
  01242	ba 42 07 00 00	 mov	 edx, 1858		; 00000742H
  01247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160524
  0124e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1856 :                         i, ' ',
; 1857 :                         sysblk.txf_stats[ contran ].txf_retries[ i ],
; 1858 :                         (count/total) * 100.0 );
; 1859 :                 }

  01254	e9 a2 fe ff ff	 jmp	 $LN14@txf_cmd
$LN15@txf_cmd:

; 1860 : 
; 1861 :                 /* Now print the LAST bucket */
; 1862 :                 count = sysblk.txf_stats[ contran ].txf_retries[ i ];

  01259	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  01261	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  01268	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0126f	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  01277	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR i$2[rsp]
  0127f	48 8b 84 c8 98
	00 00 00	 mov	 rax, QWORD PTR [rax+rcx*8+152]
  01287	48 85 c0	 test	 rax, rax
  0128a	7c 07		 jl	 SHORT $LN122@txf_cmd
  0128c	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  01291	eb 19		 jmp	 SHORT $LN123@txf_cmd
$LN122@txf_cmd:
  01293	48 8b c8	 mov	 rcx, rax
  01296	48 d1 e9	 shr	 rcx, 1
  01299	48 83 e0 01	 and	 rax, 1
  0129d	48 0b c8	 or	 rcx, rax
  012a0	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  012a5	f2 0f 58 c9	 addsd	 xmm1, xmm1
  012a9	0f 28 c1	 movaps	 xmm0, xmm1
$LN123@txf_cmd:
  012ac	f2 0f 11 84 24
	b0 00 00 00	 movsd	 QWORD PTR count$4[rsp], xmm0

; 1863 : 
; 1864 :                 // "    %1d%cretries =%12"PRIu64"  (%4.1f%%)"
; 1865 :                 WRMSG( HHC17732, "I",

  012b5	f2 0f 10 84 24
	b0 00 00 00	 movsd	 xmm0, QWORD PTR count$4[rsp]
  012be	f2 0f 5e 84 24
	c0 00 00 00	 divsd	 xmm0, QWORD PTR total$5[rsp]
  012c7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  012cf	f2 0f 11 84 24
	48 01 00 00	 movsd	 QWORD PTR tv660[rsp], xmm0
  012d8	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  012e0	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  012e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  012ee	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  012f6	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv665[rsp], rax
  012fe	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR i$2[rsp]
  01306	48 89 8c 24 50
	01 00 00	 mov	 QWORD PTR tv667[rsp], rcx
  0130e	b9 01 00 00 00	 mov	 ecx, 1
  01313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01319	f2 0f 10 84 24
	48 01 00 00	 movsd	 xmm0, QWORD PTR tv660[rsp]
  01322	f2 0f 11 44 24
	50		 movsd	 QWORD PTR [rsp+80], xmm0
  01328	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR tv667[rsp]
  01330	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv665[rsp]
  01338	48 8b 8c d1 98
	00 00 00	 mov	 rcx, QWORD PTR [rcx+rdx*8+152]
  01340	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01345	c7 44 24 40 2b
	00 00 00	 mov	 DWORD PTR [rsp+64], 43	; 0000002bH
  0134d	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR i$2[rsp]
  01354	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01358	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160525
  0135f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01364	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160526
  0136b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01370	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01375	41 b9 03 00 00
	00		 mov	 r9d, 3
  0137b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160527
  01382	ba 4c 07 00 00	 mov	 edx, 1868		; 0000074cH
  01387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160528
  0138e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1866 :                     i, '+',
; 1867 :                     sysblk.txf_stats[ contran ].txf_retries[ i ],
; 1868 :                     (count/total) * 100.0 );
; 1869 : 
; 1870 :                 // "    MAXIMUM   =%12"PRIu64
; 1871 :                 WRMSG( HHC17733, "I", sysblk.txf_stats[ contran ].txf_retries_hwm );

  01394	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  0139c	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  013a3	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv684[rsp], rax
  013ab	b9 01 00 00 00	 mov	 ecx, 1
  013b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  013b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  013bd	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR tv684[rsp]
  013c5	48 8b 8c 11 58
	06 00 00	 mov	 rcx, QWORD PTR [rcx+rdx+1624]
  013cd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  013d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160529
  013d9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  013de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160530
  013e5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013ef	41 b9 03 00 00
	00		 mov	 r9d, 3
  013f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160531
  013fc	ba 4f 07 00 00	 mov	 edx, 1871		; 0000074fH
  01401	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160532
  01408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1872 : 
; 1873 :                 /* Report how often a transaction was aborted by TAC */
; 1874 :                 for (i = 2; i < TXF_STATS_TAC_SLOTS; i++)

  0140e	c7 84 24 88 00
	00 00 02 00 00
	00		 mov	 DWORD PTR i$2[rsp], 2
  01419	eb 10		 jmp	 SHORT $LN19@txf_cmd
$LN17@txf_cmd:
  0141b	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR i$2[rsp]
  01422	ff c0		 inc	 eax
  01424	89 84 24 88 00
	00 00		 mov	 DWORD PTR i$2[rsp], eax
$LN19@txf_cmd:
  0142b	83 bc 24 88 00
	00 00 11	 cmp	 DWORD PTR i$2[rsp], 17
  01433	0f 8d fe 01 00
	00		 jge	 $LN18@txf_cmd

; 1875 :                 {
; 1876 :                     /* (TAC 3 == undefined/unassigned; skip) */
; 1877 :                     if (i == 3)

  01439	83 bc 24 88 00
	00 00 03	 cmp	 DWORD PTR i$2[rsp], 3
  01441	0f 85 99 00 00
	00		 jne	 $LN93@txf_cmd
$LN22@txf_cmd:

; 1878 :                     {
; 1879 :                         // (sanity check: total for this slot should be zero)
; 1880 :                         ASSERT( 0 == sysblk.txf_stats[ contran ].txf_aborts_by_tac[ i ] );

  01447	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  0144f	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  01456	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0145d	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  01465	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR i$2[rsp]
  0146d	48 83 7c c8 08
	00		 cmp	 QWORD PTR [rax+rcx*8+8], 0
  01473	74 5c		 je	 SHORT $LN94@txf_cmd
$LN25@txf_cmd:
  01475	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160535
  0147c	41 b8 58 07 00
	00		 mov	 r8d, 1880		; 00000758H
  01482	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160536
  01489	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160537
  01490	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  01496	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0149c	85 c0		 test	 eax, eax
  0149e	74 20		 je	 SHORT $LN95@txf_cmd
  014a0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160539
  014a7	41 b8 58 07 00
	00		 mov	 r8d, 1880		; 00000758H
  014ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160540
  014b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160541
  014bb	e8 00 00 00 00	 call	 DebuggerTrace
$LN95@txf_cmd:
  014c0	33 c0		 xor	 eax, eax
  014c2	85 c0		 test	 eax, eax
  014c4	75 af		 jne	 SHORT $LN25@txf_cmd
  014c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  014cc	85 c0		 test	 eax, eax
  014ce	74 01		 je	 SHORT $LN96@txf_cmd
  014d0	cc		 int	 3
$LN96@txf_cmd:
$LN94@txf_cmd:
  014d1	33 c0		 xor	 eax, eax
  014d3	85 c0		 test	 eax, eax
  014d5	0f 85 6c ff ff
	ff		 jne	 $LN22@txf_cmd

; 1881 :                         continue; // (skip TAC slot 3 == unassigned)

  014db	e9 3b ff ff ff	 jmp	 $LN17@txf_cmd
$LN93@txf_cmd:

; 1882 :                     }
; 1883 : 
; 1884 :                     // "  %12"PRIu64"  (%4.1f%%)  Retries due to TAC %3d %s"
; 1885 :                     count =               sysblk.txf_stats[ contran ].txf_aborts_by_tac[ i ];

  014e0	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  014e8	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  014ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  014f6	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  014fe	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR i$2[rsp]
  01506	48 8b 44 c8 08	 mov	 rax, QWORD PTR [rax+rcx*8+8]
  0150b	48 85 c0	 test	 rax, rax
  0150e	7c 07		 jl	 SHORT $LN120@txf_cmd
  01510	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  01515	eb 19		 jmp	 SHORT $LN121@txf_cmd
$LN120@txf_cmd:
  01517	48 8b c8	 mov	 rcx, rax
  0151a	48 d1 e9	 shr	 rcx, 1
  0151d	48 83 e0 01	 and	 rax, 1
  01521	48 0b c8	 or	 rcx, rax
  01524	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  01529	f2 0f 58 c9	 addsd	 xmm1, xmm1
  0152d	0f 28 c1	 movaps	 xmm0, xmm1
$LN121@txf_cmd:
  01530	f2 0f 11 84 24
	b0 00 00 00	 movsd	 QWORD PTR count$4[rsp], xmm0

; 1886 :                     WRMSG( HHC17734, "I", sysblk.txf_stats[ contran ].txf_aborts_by_tac[ i ],

  01539	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR i$2[rsp]
  01541	48 8b c8	 mov	 rcx, rax
  01544	e8 00 00 00 00	 call	 tac2long
  01549	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv732[rsp], rax
  01551	f2 0f 10 84 24
	b0 00 00 00	 movsd	 xmm0, QWORD PTR count$4[rsp]
  0155a	f2 0f 5e 84 24
	c0 00 00 00	 divsd	 xmm0, QWORD PTR total$5[rsp]
  01563	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  0156b	f2 0f 11 84 24
	70 01 00 00	 movsd	 QWORD PTR tv739[rsp], xmm0
  01574	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR contran$3[rsp]
  0157c	48 69 c9 e8 00
	00 00		 imul	 rcx, rcx, 232		; 000000e8H
  01583	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  0158a	48 8d 8c 0a 78
	05 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+1400]
  01592	48 89 8c 24 80
	01 00 00	 mov	 QWORD PTR tv744[rsp], rcx
  0159a	48 63 94 24 88
	00 00 00	 movsxd	 rdx, DWORD PTR i$2[rsp]
  015a2	48 89 94 24 78
	01 00 00	 mov	 QWORD PTR tv746[rsp], rdx
  015aa	b9 01 00 00 00	 mov	 ecx, 1
  015af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015b5	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv732[rsp]
  015bd	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  015c2	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR i$2[rsp]
  015c9	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  015cd	f2 0f 10 84 24
	70 01 00 00	 movsd	 xmm0, QWORD PTR tv739[rsp]
  015d6	f2 0f 11 44 24
	40		 movsd	 QWORD PTR [rsp+64], xmm0
  015dc	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv746[rsp]
  015e4	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR tv744[rsp]
  015ec	48 8b 4c ca 08	 mov	 rcx, QWORD PTR [rdx+rcx*8+8]
  015f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  015f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160543
  015fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01602	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160544
  01609	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0160e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01613	41 b9 03 00 00
	00		 mov	 r9d, 3
  01619	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160545
  01620	ba 5f 07 00 00	 mov	 edx, 1887		; 0000075fH
  01625	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160546
  0162c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1887 :                         (count/total) * 100.0, i, tac2long( i ) );
; 1888 :                 }

  01632	e9 e4 fd ff ff	 jmp	 $LN17@txf_cmd
$LN18@txf_cmd:

; 1889 : 
; 1890 :                 // "  %12"PRIu64"  (%4.1f%%)  Retries due to TAC %3d %s"
; 1891 :                 count =               sysblk.txf_stats[ contran ].txf_aborts_by_tac_misc;

  01637	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  0163f	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  01646	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0164d	48 8b 84 01 08
	06 00 00	 mov	 rax, QWORD PTR [rcx+rax+1544]
  01655	48 85 c0	 test	 rax, rax
  01658	7c 07		 jl	 SHORT $LN118@txf_cmd
  0165a	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0165f	eb 19		 jmp	 SHORT $LN119@txf_cmd
$LN118@txf_cmd:
  01661	48 8b c8	 mov	 rcx, rax
  01664	48 d1 e9	 shr	 rcx, 1
  01667	48 83 e0 01	 and	 rax, 1
  0166b	48 0b c8	 or	 rcx, rax
  0166e	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  01673	f2 0f 58 c9	 addsd	 xmm1, xmm1
  01677	0f 28 c1	 movaps	 xmm0, xmm1
$LN119@txf_cmd:
  0167a	f2 0f 11 84 24
	b0 00 00 00	 movsd	 QWORD PTR count$4[rsp], xmm0

; 1892 :                 WRMSG( HHC17734, "I", sysblk.txf_stats[ contran ].txf_aborts_by_tac_misc,

  01683	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  01688	e8 00 00 00 00	 call	 tac2long
  0168d	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv765[rsp], rax
  01695	f2 0f 10 84 24
	b0 00 00 00	 movsd	 xmm0, QWORD PTR count$4[rsp]
  0169e	f2 0f 5e 84 24
	c0 00 00 00	 divsd	 xmm0, QWORD PTR total$5[rsp]
  016a7	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  016af	f2 0f 11 84 24
	90 01 00 00	 movsd	 QWORD PTR tv771[rsp], xmm0
  016b8	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR contran$3[rsp]
  016c0	48 69 c9 e8 00
	00 00		 imul	 rcx, rcx, 232		; 000000e8H
  016c7	48 89 8c 24 98
	01 00 00	 mov	 QWORD PTR tv775[rsp], rcx
  016cf	b9 01 00 00 00	 mov	 ecx, 1
  016d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  016da	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv765[rsp]
  016e2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  016e7	c7 44 24 48 ff
	00 00 00	 mov	 DWORD PTR [rsp+72], 255	; 000000ffH
  016ef	f2 0f 10 84 24
	90 01 00 00	 movsd	 xmm0, QWORD PTR tv771[rsp]
  016f8	f2 0f 11 44 24
	40		 movsd	 QWORD PTR [rsp+64], xmm0
  016fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01705	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR tv775[rsp]
  0170d	48 8b 8c 11 08
	06 00 00	 mov	 rcx, QWORD PTR [rcx+rdx+1544]
  01715	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0171a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160547
  01721	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01726	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160548
  0172d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01732	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01737	41 b9 03 00 00
	00		 mov	 r9d, 3
  0173d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160549
  01744	ba 65 07 00 00	 mov	 edx, 1893		; 00000765H
  01749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160550
  01750	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1893 :                     (count/total) * 100.0, TAC_MISC, tac2long( TAC_MISC ) );
; 1894 : 
; 1895 :                 // "  %12"PRIu64"  (%4.1f%%)  Retries due to other TAC"
; 1896 :                 count =               sysblk.txf_stats[ contran ].txf_aborts_by_tac[ 0 ];

  01756	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  0175e	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  01765	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0176c	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  01774	b9 08 00 00 00	 mov	 ecx, 8
  01779	48 6b c9 00	 imul	 rcx, rcx, 0
  0177d	48 8b 44 08 08	 mov	 rax, QWORD PTR [rax+rcx+8]
  01782	48 85 c0	 test	 rax, rax
  01785	7c 07		 jl	 SHORT $LN116@txf_cmd
  01787	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0178c	eb 19		 jmp	 SHORT $LN117@txf_cmd
$LN116@txf_cmd:
  0178e	48 8b c8	 mov	 rcx, rax
  01791	48 d1 e9	 shr	 rcx, 1
  01794	48 83 e0 01	 and	 rax, 1
  01798	48 0b c8	 or	 rcx, rax
  0179b	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  017a0	f2 0f 58 c9	 addsd	 xmm1, xmm1
  017a4	0f 28 c1	 movaps	 xmm0, xmm1
$LN117@txf_cmd:
  017a7	f2 0f 11 84 24
	b0 00 00 00	 movsd	 QWORD PTR count$4[rsp], xmm0

; 1897 :                 WRMSG( HHC17735, "I", sysblk.txf_stats[ contran ].txf_aborts_by_tac[ 0 ],

  017b0	f2 0f 10 84 24
	b0 00 00 00	 movsd	 xmm0, QWORD PTR count$4[rsp]
  017b9	f2 0f 5e 84 24
	c0 00 00 00	 divsd	 xmm0, QWORD PTR total$5[rsp]
  017c2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  017ca	f2 0f 11 84 24
	a0 01 00 00	 movsd	 QWORD PTR tv798[rsp], xmm0
  017d3	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR contran$3[rsp]
  017db	48 69 c0 e8 00
	00 00		 imul	 rax, rax, 232		; 000000e8H
  017e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  017e9	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  017f1	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv803[rsp], rax
  017f9	b9 08 00 00 00	 mov	 ecx, 8
  017fe	48 6b c9 00	 imul	 rcx, rcx, 0
  01802	48 89 8c 24 a8
	01 00 00	 mov	 QWORD PTR tv805[rsp], rcx
  0180a	b9 01 00 00 00	 mov	 ecx, 1
  0180f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01815	f2 0f 10 84 24
	a0 01 00 00	 movsd	 xmm0, QWORD PTR tv798[rsp]
  0181e	f2 0f 11 44 24
	40		 movsd	 QWORD PTR [rsp+64], xmm0
  01824	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR tv805[rsp]
  0182c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv803[rsp]
  01834	48 8b 4c 11 08	 mov	 rcx, QWORD PTR [rcx+rdx+8]
  01839	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0183e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160551
  01845	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0184a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160552
  01851	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01856	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0185b	41 b9 03 00 00
	00		 mov	 r9d, 3
  01861	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160553
  01868	ba 6a 07 00 00	 mov	 edx, 1898		; 0000076aH
  0186d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160554
  01874	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN92@txf_cmd:

; 1898 :                     (count/total) * 100.0 );
; 1899 :             }
; 1900 :         }

  0187a	e9 e8 f6 ff ff	 jmp	 $LN11@txf_cmd
$LN12@txf_cmd:
$LN82@txf_cmd:
$LN80@txf_cmd:

; 1901 :     }
; 1902 : 
; 1903 :     return rc;

  0187f	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]

; 1904 : }

  01886	48 8b 8c 24 60
	07 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0188e	48 33 cc	 xor	 rcx, rsp
  01891	e8 00 00 00 00	 call	 __security_check_cookie
  01896	48 81 c4 70 07
	00 00		 add	 rsp, 1904		; 00000770H
  0189d	5f		 pop	 rdi
  0189e	c3		 ret	 0
txf_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
on$ = 96
off$ = 97
update$ = 98
query$ = 99
trace$ = 100
c$ = 104
breakp$ = 108
unlock$ = 109
step$ = 110
breakasid$ = 112
cpu$1 = 116
auto_disabled$2 = 120
cpu$3 = 124
addr$ = 128
i$4 = 144
dev$5 = 152
asid$6 = 160
on$7 = 164
off$8 = 168
tv132 = 172
tv134 = 176
tv140 = 180
tv142 = 184
tv148 = 188
tv150 = 192
tv156 = 196
tv158 = 200
tv164 = 204
tv166 = 208
tv169 = 212
tv171 = 216
rc$9 = 220
tv367 = 224
tv369 = 228
tv629 = 232
tv631 = 236
tv92 = 240
tv94 = 244
mask$10 = 248
tv539 = 256
tv567 = 264
tv569 = 272
tv561 = 280
tv571 = 288
$T11 = 296
tv208 = 304
tv275 = 312
tv299 = 320
endptr$12 = 328
tv347 = 336
typ$13 = 344
who$14 = 360
asidmsg$ = 384
rangemsg$ = 512
__$ArrayPad$ = 640
argc$ = 672
argv$ = 680
cmdline$ = 688
trace_cmd PROC

; 1223 : {

$LN146:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 90 02
	00 00		 sub	 rsp, 656		; 00000290H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1224 :     U64   addr[2]         =  {0};       /* Parsed address range      */

  00028	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR addr$[rsp]
  00030	48 8b f8	 mov	 rdi, rax
  00033	33 c0		 xor	 eax, eax
  00035	b9 10 00 00 00	 mov	 ecx, 16
  0003a	f3 aa		 rep stosb

; 1225 :     BYTE  c[2]            =  {0};       /* [0]=range sep, [1]=sscanf */

  0003c	48 8d 44 24 68	 lea	 rax, QWORD PTR c$[rsp]
  00041	48 8b f8	 mov	 rdi, rax
  00044	33 c0		 xor	 eax, eax
  00046	b9 02 00 00 00	 mov	 ecx, 2
  0004b	f3 aa		 rep stosb

; 1226 :     U16   breakasid       =   0;        /* Optional asid argument    */

  0004d	33 c0		 xor	 eax, eax
  0004f	66 89 44 24 70	 mov	 WORD PTR breakasid$[rsp], ax

; 1227 : 
; 1228 :     char  rangemsg [128]  =  {0};       /* MSGBUF work buffer        */

  00054	48 8d 84 24 00
	02 00 00	 lea	 rax, QWORD PTR rangemsg$[rsp]
  0005c	48 8b f8	 mov	 rdi, rax
  0005f	33 c0		 xor	 eax, eax
  00061	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00066	f3 aa		 rep stosb

; 1229 :     char  asidmsg  [128]  =  {0};       /* MSGBUF work buffer        */

  00068	48 8d 84 24 80
	01 00 00	 lea	 rax, QWORD PTR asidmsg$[rsp]
  00070	48 8b f8	 mov	 rdi, rax
  00073	33 c0		 xor	 eax, eax
  00075	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0007a	f3 aa		 rep stosb

; 1230 : 
; 1231 :     bool  trace   =  false;             /* Whether command was 't'   */

  0007c	c6 44 24 64 00	 mov	 BYTE PTR trace$[rsp], 0

; 1232 :     bool  step    =  false;             /* Whether command was 's'   */

  00081	c6 44 24 6e 00	 mov	 BYTE PTR step$[rsp], 0

; 1233 :     bool  breakp  =  false;             /* Whether command was 'b'   */

  00086	c6 44 24 6c 00	 mov	 BYTE PTR breakp$[rsp], 0

; 1234 :     bool  on      =  false;             /* Whether + was specified   */

  0008b	c6 44 24 60 00	 mov	 BYTE PTR on$[rsp], 0

; 1235 :     bool  off     =  false;             /* Whether - was specified   */

  00090	c6 44 24 61 00	 mov	 BYTE PTR off$[rsp], 0

; 1236 :     bool  query   =  false;             /* Whether ? was specified   */

  00095	c6 44 24 63 00	 mov	 BYTE PTR query$[rsp], 0

; 1237 :     bool  update  =  false;             /* Whether parms were given  */

  0009a	c6 44 24 62 00	 mov	 BYTE PTR update$[rsp], 0

; 1238 :     bool  unlock  =  false;             /* Should do RELEASE_INTLOCK */

  0009f	c6 44 24 6d 00	 mov	 BYTE PTR unlock$[rsp], 0

; 1239 : 
; 1240 :     cmdline[0] = tolower( cmdline[0] );

  000a4	b8 01 00 00 00	 mov	 eax, 1
  000a9	48 6b c0 00	 imul	 rax, rax, 0
  000ad	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  000b5	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000b9	8b c8		 mov	 ecx, eax
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  000c1	b9 01 00 00 00	 mov	 ecx, 1
  000c6	48 6b c9 00	 imul	 rcx, rcx, 0
  000ca	48 8b 94 24 b0
	02 00 00	 mov	 rdx, QWORD PTR cmdline$[rsp]
  000d2	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1241 : 
; 1242 :     trace  = (cmdline[0] == 't');       // trace command

  000d5	b8 01 00 00 00	 mov	 eax, 1
  000da	48 6b c0 00	 imul	 rax, rax, 0
  000de	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  000e6	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000ea	83 f8 74	 cmp	 eax, 116		; 00000074H
  000ed	75 0d		 jne	 SHORT $LN98@trace_cmd
  000ef	c7 84 24 f0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv92[rsp], 1
  000fa	eb 0b		 jmp	 SHORT $LN99@trace_cmd
$LN98@trace_cmd:
  000fc	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv92[rsp], 0
$LN99@trace_cmd:
  00107	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR tv92[rsp], 0
  0010f	75 0d		 jne	 SHORT $LN100@trace_cmd
  00111	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv94[rsp], 0
  0011c	eb 0b		 jmp	 SHORT $LN101@trace_cmd
$LN100@trace_cmd:
  0011e	c7 84 24 f4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv94[rsp], 1
$LN101@trace_cmd:
  00129	0f b6 84 24 f4
	00 00 00	 movzx	 eax, BYTE PTR tv94[rsp]
  00131	88 44 24 64	 mov	 BYTE PTR trace$[rsp], al

; 1243 :     step   = (cmdline[0] == 's');       // stepping command

  00135	b8 01 00 00 00	 mov	 eax, 1
  0013a	48 6b c0 00	 imul	 rax, rax, 0
  0013e	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00146	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0014a	83 f8 73	 cmp	 eax, 115		; 00000073H
  0014d	75 0d		 jne	 SHORT $LN102@trace_cmd
  0014f	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv132[rsp], 1
  0015a	eb 0b		 jmp	 SHORT $LN103@trace_cmd
$LN102@trace_cmd:
  0015c	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv132[rsp], 0
$LN103@trace_cmd:
  00167	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR tv132[rsp], 0
  0016f	75 0d		 jne	 SHORT $LN104@trace_cmd
  00171	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv134[rsp], 0
  0017c	eb 0b		 jmp	 SHORT $LN105@trace_cmd
$LN104@trace_cmd:
  0017e	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv134[rsp], 1
$LN105@trace_cmd:
  00189	0f b6 84 24 b0
	00 00 00	 movzx	 eax, BYTE PTR tv134[rsp]
  00191	88 44 24 6e	 mov	 BYTE PTR step$[rsp], al

; 1244 :     breakp = (cmdline[0] == 'b');       // breakpoint command

  00195	b8 01 00 00 00	 mov	 eax, 1
  0019a	48 6b c0 00	 imul	 rax, rax, 0
  0019e	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  001a6	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001aa	83 f8 62	 cmp	 eax, 98			; 00000062H
  001ad	75 0d		 jne	 SHORT $LN106@trace_cmd
  001af	c7 84 24 b4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv140[rsp], 1
  001ba	eb 0b		 jmp	 SHORT $LN107@trace_cmd
$LN106@trace_cmd:
  001bc	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv140[rsp], 0
$LN107@trace_cmd:
  001c7	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR tv140[rsp], 0
  001cf	75 0d		 jne	 SHORT $LN108@trace_cmd
  001d1	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv142[rsp], 0
  001dc	eb 0b		 jmp	 SHORT $LN109@trace_cmd
$LN108@trace_cmd:
  001de	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv142[rsp], 1
$LN109@trace_cmd:
  001e9	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR tv142[rsp]
  001f1	88 44 24 6c	 mov	 BYTE PTR breakp$[rsp], al

; 1245 : 
; 1246 :     on     = (cmdline[1] == '+');       // explicit set

  001f5	b8 01 00 00 00	 mov	 eax, 1
  001fa	48 6b c0 01	 imul	 rax, rax, 1
  001fe	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00206	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0020a	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0020d	75 0d		 jne	 SHORT $LN110@trace_cmd
  0020f	c7 84 24 bc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv148[rsp], 1
  0021a	eb 0b		 jmp	 SHORT $LN111@trace_cmd
$LN110@trace_cmd:
  0021c	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv148[rsp], 0
$LN111@trace_cmd:
  00227	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR tv148[rsp], 0
  0022f	75 0d		 jne	 SHORT $LN112@trace_cmd
  00231	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv150[rsp], 0
  0023c	eb 0b		 jmp	 SHORT $LN113@trace_cmd
$LN112@trace_cmd:
  0023e	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv150[rsp], 1
$LN113@trace_cmd:
  00249	0f b6 84 24 c0
	00 00 00	 movzx	 eax, BYTE PTR tv150[rsp]
  00251	88 44 24 60	 mov	 BYTE PTR on$[rsp], al

; 1247 :     off    = (cmdline[1] == '-');       // explicit unset

  00255	b8 01 00 00 00	 mov	 eax, 1
  0025a	48 6b c0 01	 imul	 rax, rax, 1
  0025e	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00266	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0026a	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0026d	75 0d		 jne	 SHORT $LN114@trace_cmd
  0026f	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv156[rsp], 1
  0027a	eb 0b		 jmp	 SHORT $LN115@trace_cmd
$LN114@trace_cmd:
  0027c	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv156[rsp], 0
$LN115@trace_cmd:
  00287	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR tv156[rsp], 0
  0028f	75 0d		 jne	 SHORT $LN116@trace_cmd
  00291	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv158[rsp], 0
  0029c	eb 0b		 jmp	 SHORT $LN117@trace_cmd
$LN116@trace_cmd:
  0029e	c7 84 24 c8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv158[rsp], 1
$LN117@trace_cmd:
  002a9	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR tv158[rsp]
  002b1	88 44 24 61	 mov	 BYTE PTR off$[rsp], al

; 1248 :     query  = (cmdline[1] == '?');       // explicit query

  002b5	b8 01 00 00 00	 mov	 eax, 1
  002ba	48 6b c0 01	 imul	 rax, rax, 1
  002be	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  002c6	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002ca	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  002cd	75 0d		 jne	 SHORT $LN118@trace_cmd
  002cf	c7 84 24 cc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv164[rsp], 1
  002da	eb 0b		 jmp	 SHORT $LN119@trace_cmd
$LN118@trace_cmd:
  002dc	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv164[rsp], 0
$LN119@trace_cmd:
  002e7	83 bc 24 cc 00
	00 00 00	 cmp	 DWORD PTR tv164[rsp], 0
  002ef	75 0d		 jne	 SHORT $LN120@trace_cmd
  002f1	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv166[rsp], 0
  002fc	eb 0b		 jmp	 SHORT $LN121@trace_cmd
$LN120@trace_cmd:
  002fe	c7 84 24 d0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv166[rsp], 1
$LN121@trace_cmd:
  00309	0f b6 84 24 d0
	00 00 00	 movzx	 eax, BYTE PTR tv166[rsp]
  00311	88 44 24 63	 mov	 BYTE PTR query$[rsp], al

; 1249 :     update = (argc > 1);                // parameters specified

  00315	83 bc 24 a0 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0031d	7e 0d		 jle	 SHORT $LN122@trace_cmd
  0031f	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv169[rsp], 1
  0032a	eb 0b		 jmp	 SHORT $LN123@trace_cmd
$LN122@trace_cmd:
  0032c	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv169[rsp], 0
$LN123@trace_cmd:
  00337	83 bc 24 d4 00
	00 00 00	 cmp	 DWORD PTR tv169[rsp], 0
  0033f	75 0d		 jne	 SHORT $LN124@trace_cmd
  00341	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv171[rsp], 0
  0034c	eb 0b		 jmp	 SHORT $LN125@trace_cmd
$LN124@trace_cmd:
  0034e	c7 84 24 d8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv171[rsp], 1
$LN125@trace_cmd:
  00359	0f b6 84 24 d8
	00 00 00	 movzx	 eax, BYTE PTR tv171[rsp]
  00361	88 44 24 62	 mov	 BYTE PTR update$[rsp], al

; 1250 : 
; 1251 :     /* NOTE: normally, a "trace" type of command by itself (without
; 1252 :        an explicit +, -, or ?) means you only want to query/update
; 1253 :        the current parameters, but you don't want to enable tracing
; 1254 :        or stepping or set a breakpoint. Specifying the 't' or 's'
; 1255 :        command by itself without any parameters is identical to the
; 1256 :        't?' and 's?' query commands.
; 1257 : 
; 1258 :        The 'b' (breakpoint) command is different however. It's an
; 1259 :        exception to the rule. The b command means that you DO want
; 1260 :        to enable a breakpoint using the parameters specified. Thus
; 1261 :        the b and b+ commands ALWAYS require at least one parameter.
; 1262 : 
; 1263 :        It also goes without saying that the '-' syntax to disable
; 1264 :        tracing or stepping or to remove a breakpoint (as well as
; 1265 :        the explicit '?' syntax to query the current settings) is
; 1266 :        NOT allowed to have any parameters. Note too that the '-'
; 1267 :        syntax only disables tracing or stepping or breakpoints
; 1268 :        but does NOT clear/reset the current settings (range, etc).
; 1269 : 
; 1270 :        The '+' syntax to enable tracing or stepping or define (set)
; 1271 :        a breakpoint however, is allowed to also specify parameters.
; 1272 :        If specified, they will be used to update the current values
; 1273 :        before actually activating tracing/stepping or breakpoints.
; 1274 :        If no parameters are specified on the '+' command, then the
; 1275 :        tracing/stepping/breakpoint is activated without modifying
; 1276 :        the current settings (i.e. the current values as previously
; 1277 :        established are used instead).
; 1278 :     */
; 1279 : 
; 1280 :     /* Plain 'b' command is an implied 'set' */
; 1281 :     if (breakp && !(on || off || query))

  00365	0f b6 44 24 6c	 movzx	 eax, BYTE PTR breakp$[rsp]
  0036a	85 c0		 test	 eax, eax
  0036c	74 20		 je	 SHORT $LN32@trace_cmd
  0036e	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  00373	85 c0		 test	 eax, eax
  00375	75 17		 jne	 SHORT $LN32@trace_cmd
  00377	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  0037c	85 c0		 test	 eax, eax
  0037e	75 0e		 jne	 SHORT $LN32@trace_cmd
  00380	0f b6 44 24 63	 movzx	 eax, BYTE PTR query$[rsp]
  00385	85 c0		 test	 eax, eax
  00387	75 05		 jne	 SHORT $LN32@trace_cmd

; 1282 :         on = true;

  00389	c6 44 24 60 01	 mov	 BYTE PTR on$[rsp], 1
$LN32@trace_cmd:

; 1283 : 
; 1284 :     /* Plain 't' or 's' command is an implied 'query' */
; 1285 :     if ((trace || step) && !(on || off || update))

  0038e	0f b6 44 24 64	 movzx	 eax, BYTE PTR trace$[rsp]
  00393	85 c0		 test	 eax, eax
  00395	75 09		 jne	 SHORT $LN34@trace_cmd
  00397	0f b6 44 24 6e	 movzx	 eax, BYTE PTR step$[rsp]
  0039c	85 c0		 test	 eax, eax
  0039e	74 20		 je	 SHORT $LN33@trace_cmd
$LN34@trace_cmd:
  003a0	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  003a5	85 c0		 test	 eax, eax
  003a7	75 17		 jne	 SHORT $LN33@trace_cmd
  003a9	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  003ae	85 c0		 test	 eax, eax
  003b0	75 0e		 jne	 SHORT $LN33@trace_cmd
  003b2	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  003b7	85 c0		 test	 eax, eax
  003b9	75 05		 jne	 SHORT $LN33@trace_cmd

; 1286 :         query = true;

  003bb	c6 44 24 63 01	 mov	 BYTE PTR query$[rsp], 1
$LN33@trace_cmd:

; 1287 : 
; 1288 :     /* Check for invalid number of arguments */
; 1289 :     if (0
; 1290 :         // No more than 3 arguments allowed (cmd, range, asid)
; 1291 :         || (argc > 3)
; 1292 : 
; 1293 :         // If explicit - or ? then can't change settings
; 1294 :         || ((off || query) && update)
; 1295 : 
; 1296 :         // If setting breakpoint, parameters are required
; 1297 :         || (breakp && on && !update)
; 1298 : 
; 1299 :         // Optional asid parameter not allowed for trace
; 1300 :         || (trace && argc > 2)

  003c0	33 c0		 xor	 eax, eax
  003c2	85 c0		 test	 eax, eax
  003c4	75 57		 jne	 SHORT $LN36@trace_cmd
  003c6	83 bc 24 a0 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  003ce	7f 4d		 jg	 SHORT $LN36@trace_cmd
  003d0	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  003d5	85 c0		 test	 eax, eax
  003d7	75 09		 jne	 SHORT $LN38@trace_cmd
  003d9	0f b6 44 24 63	 movzx	 eax, BYTE PTR query$[rsp]
  003de	85 c0		 test	 eax, eax
  003e0	74 09		 je	 SHORT $LN37@trace_cmd
$LN38@trace_cmd:
  003e2	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  003e7	85 c0		 test	 eax, eax
  003e9	75 32		 jne	 SHORT $LN36@trace_cmd
$LN37@trace_cmd:
  003eb	0f b6 44 24 6c	 movzx	 eax, BYTE PTR breakp$[rsp]
  003f0	85 c0		 test	 eax, eax
  003f2	74 12		 je	 SHORT $LN39@trace_cmd
  003f4	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  003f9	85 c0		 test	 eax, eax
  003fb	74 09		 je	 SHORT $LN39@trace_cmd
  003fd	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  00402	85 c0		 test	 eax, eax
  00404	74 17		 je	 SHORT $LN36@trace_cmd
$LN39@trace_cmd:
  00406	0f b6 44 24 64	 movzx	 eax, BYTE PTR trace$[rsp]
  0040b	85 c0		 test	 eax, eax
  0040d	0f 84 85 00 00
	00		 je	 $LN35@trace_cmd
  00413	83 bc 24 a0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0041b	7e 7b		 jle	 SHORT $LN35@trace_cmd
$LN36@trace_cmd:

; 1301 :     )
; 1302 :     {
; 1303 :         // "Invalid argument(s). Type 'help %s' for assistance."
; 1304 :         WRMSG( HHC02211, "E", argv[0] );

  0041d	b8 08 00 00 00	 mov	 eax, 8
  00422	48 6b c0 00	 imul	 rax, rax, 0
  00426	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv208[rsp], rax
  0042e	b9 01 00 00 00	 mov	 ecx, 1
  00433	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00439	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00441	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR tv208[rsp]
  00449	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0044d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00452	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160218
  00459	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0045e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160219
  00465	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0046a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0046f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00475	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160220
  0047c	ba 18 05 00 00	 mov	 edx, 1304		; 00000518H
  00481	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160221
  00488	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1305 :         return -1;

  0048e	b8 ff ff ff ff	 mov	 eax, -1
  00493	e9 08 10 00 00	 jmp	 $LN1@trace_cmd
$LN35@trace_cmd:
$LN4@trace_cmd:

; 1306 :     }
; 1307 : 
; 1308 :     /* (quick sanity check) */
; 1309 :     ASSERT

  00498	33 c0		 xor	 eax, eax
  0049a	83 f8 01	 cmp	 eax, 1
  0049d	74 6c		 je	 SHORT $LN41@trace_cmd
  0049f	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  004a4	85 c0		 test	 eax, eax
  004a6	75 1b		 jne	 SHORT $LN42@trace_cmd
  004a8	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  004ad	85 c0		 test	 eax, eax
  004af	75 12		 jne	 SHORT $LN42@trace_cmd
  004b1	0f b6 44 24 63	 movzx	 eax, BYTE PTR query$[rsp]
  004b6	85 c0		 test	 eax, eax
  004b8	75 09		 jne	 SHORT $LN42@trace_cmd
  004ba	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  004bf	85 c0		 test	 eax, eax
  004c1	74 48		 je	 SHORT $LN41@trace_cmd
$LN42@trace_cmd:
  004c3	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  004c8	85 c0		 test	 eax, eax
  004ca	74 09		 je	 SHORT $LN43@trace_cmd
  004cc	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  004d1	85 c0		 test	 eax, eax
  004d3	75 36		 jne	 SHORT $LN41@trace_cmd
$LN43@trace_cmd:
  004d5	0f b6 44 24 63	 movzx	 eax, BYTE PTR query$[rsp]
  004da	85 c0		 test	 eax, eax
  004dc	74 12		 je	 SHORT $LN44@trace_cmd
  004de	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  004e3	85 c0		 test	 eax, eax
  004e5	75 24		 jne	 SHORT $LN41@trace_cmd
  004e7	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  004ec	85 c0		 test	 eax, eax
  004ee	75 1b		 jne	 SHORT $LN41@trace_cmd
$LN44@trace_cmd:
  004f0	0f b6 44 24 63	 movzx	 eax, BYTE PTR query$[rsp]
  004f5	85 c0		 test	 eax, eax
  004f7	75 09		 jne	 SHORT $LN45@trace_cmd
  004f9	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  004fe	85 c0		 test	 eax, eax
  00500	74 65		 je	 SHORT $LN40@trace_cmd
$LN45@trace_cmd:
  00502	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  00507	85 c0		 test	 eax, eax
  00509	74 5c		 je	 SHORT $LN40@trace_cmd
$LN41@trace_cmd:
$LN7@trace_cmd:
  0050b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160228
  00512	41 b8 23 05 00
	00		 mov	 r8d, 1315		; 00000523H
  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160229
  0051f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160230
  00526	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0052c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00532	85 c0		 test	 eax, eax
  00534	74 20		 je	 SHORT $LN46@trace_cmd
  00536	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160232
  0053d	41 b8 23 05 00
	00		 mov	 r8d, 1315		; 00000523H
  00543	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160233
  0054a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160234
  00551	e8 00 00 00 00	 call	 DebuggerTrace
$LN46@trace_cmd:
  00556	33 c0		 xor	 eax, eax
  00558	85 c0		 test	 eax, eax
  0055a	75 af		 jne	 SHORT $LN7@trace_cmd
  0055c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00562	85 c0		 test	 eax, eax
  00564	74 01		 je	 SHORT $LN47@trace_cmd
  00566	cc		 int	 3
$LN47@trace_cmd:
$LN40@trace_cmd:
  00567	33 c0		 xor	 eax, eax
  00569	85 c0		 test	 eax, eax
  0056b	0f 85 27 ff ff
	ff		 jne	 $LN4@trace_cmd

; 1310 :     (1
; 1311 :         && (on || off || query || update)
; 1312 :         && !(on && off)
; 1313 :         && !(query && (on || off))
; 1314 :         && !((query || off) && update)
; 1315 :     );
; 1316 : 
; 1317 :     /* Parse arguments, if specified */
; 1318 :     if (update)

  00571	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  00576	85 c0		 test	 eax, eax
  00578	0f 84 35 03 00
	00		 je	 $LN48@trace_cmd

; 1319 :     {
; 1320 :         int rc;
; 1321 : 
; 1322 :         /* Parse the address range */
; 1323 :         rc = sscanf( argv[1], "%"SCNx64"%c%"SCNx64"%c",

  0057e	b8 01 00 00 00	 mov	 eax, 1
  00583	48 6b c0 01	 imul	 rax, rax, 1
  00587	48 8d 44 04 68	 lea	 rax, QWORD PTR c$[rsp+rax]
  0058c	b9 08 00 00 00	 mov	 ecx, 8
  00591	48 6b c9 01	 imul	 rcx, rcx, 1
  00595	48 8d 8c 0c 80
	00 00 00	 lea	 rcx, QWORD PTR addr$[rsp+rcx]
  0059d	ba 01 00 00 00	 mov	 edx, 1
  005a2	48 6b d2 00	 imul	 rdx, rdx, 0
  005a6	48 8d 54 14 68	 lea	 rdx, QWORD PTR c$[rsp+rdx]
  005ab	bf 08 00 00 00	 mov	 edi, 8
  005b0	48 6b ff 00	 imul	 rdi, rdi, 0
  005b4	48 8d bc 3c 80
	00 00 00	 lea	 rdi, QWORD PTR addr$[rsp+rdi]
  005bc	41 b8 08 00 00
	00		 mov	 r8d, 8
  005c2	4d 6b c0 01	 imul	 r8, r8, 1
  005c6	4c 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv275[rsp], r8
  005ce	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  005d3	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005d8	4c 8b ca	 mov	 r9, rdx
  005db	4c 8b c7	 mov	 r8, rdi
  005de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160238
  005e5	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  005ed	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv275[rsp]
  005f5	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  005f9	e8 00 00 00 00	 call	 sscanf
  005fe	89 84 24 dc 00
	00 00		 mov	 DWORD PTR rc$9[rsp], eax

; 1324 :                     &addr[0], &c[0], &addr[1], &c[1] );
; 1325 :         if (rc == 1)

  00605	83 bc 24 dc 00
	00 00 01	 cmp	 DWORD PTR rc$9[rsp], 1
  0060d	75 35		 jne	 SHORT $LN50@trace_cmd

; 1326 :         {
; 1327 :             // (only a single address was specified)
; 1328 :             c[0] = '-';

  0060f	b8 01 00 00 00	 mov	 eax, 1
  00614	48 6b c0 00	 imul	 rax, rax, 0
  00618	c6 44 04 68 2d	 mov	 BYTE PTR c$[rsp+rax], 45 ; 0000002dH

; 1329 :             addr[1] = addr[0]; // (end-of-range = begin-of-range)

  0061d	b8 08 00 00 00	 mov	 eax, 8
  00622	48 6b c0 00	 imul	 rax, rax, 0
  00626	b9 08 00 00 00	 mov	 ecx, 8
  0062b	48 6b c9 01	 imul	 rcx, rcx, 1
  0062f	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  00637	48 89 84 0c 80
	00 00 00	 mov	 QWORD PTR addr$[rsp+rcx], rax

; 1330 :         }

  0063f	e9 d6 00 00 00	 jmp	 $LN51@trace_cmd
$LN50@trace_cmd:

; 1331 :         else if (rc != 3 || (c[0] != '-' && c[0] != ':' && c[0] != '.'))

  00644	83 bc 24 dc 00
	00 00 03	 cmp	 DWORD PTR rc$9[rsp], 3
  0064c	75 45		 jne	 SHORT $LN53@trace_cmd
  0064e	b8 01 00 00 00	 mov	 eax, 1
  00653	48 6b c0 00	 imul	 rax, rax, 0
  00657	0f b6 44 04 68	 movzx	 eax, BYTE PTR c$[rsp+rax]
  0065c	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0065f	0f 84 b5 00 00
	00		 je	 $LN52@trace_cmd
  00665	b8 01 00 00 00	 mov	 eax, 1
  0066a	48 6b c0 00	 imul	 rax, rax, 0
  0066e	0f b6 44 04 68	 movzx	 eax, BYTE PTR c$[rsp+rax]
  00673	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  00676	0f 84 9e 00 00
	00		 je	 $LN52@trace_cmd
  0067c	b8 01 00 00 00	 mov	 eax, 1
  00681	48 6b c0 00	 imul	 rax, rax, 0
  00685	0f b6 44 04 68	 movzx	 eax, BYTE PTR c$[rsp+rax]
  0068a	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0068d	0f 84 87 00 00
	00		 je	 $LN52@trace_cmd
$LN53@trace_cmd:

; 1332 :         {
; 1333 :             // "Invalid argument %s%s"
; 1334 :             WRMSG( HHC02205, "E", argv[1], "" );

  00693	b8 08 00 00 00	 mov	 eax, 8
  00698	48 6b c0 01	 imul	 rax, rax, 1
  0069c	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv299[rsp], rax
  006a4	b9 01 00 00 00	 mov	 ecx, 1
  006a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160243
  006b6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006bb	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006c3	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR tv299[rsp]
  006cb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  006cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160244
  006db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160245
  006e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  006f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160246
  006fe	ba 36 05 00 00	 mov	 edx, 1334		; 00000536H
  00703	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160247
  0070a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1335 :             return -1;

  00710	b8 ff ff ff ff	 mov	 eax, -1
  00715	e9 86 0d 00 00	 jmp	 $LN1@trace_cmd
$LN52@trace_cmd:
$LN51@trace_cmd:

; 1336 :         }
; 1337 : 
; 1338 :         /* Adjust ending address if ".len" format was used */
; 1339 :         if (c[0] == '.')

  0071a	b8 01 00 00 00	 mov	 eax, 1
  0071f	48 6b c0 00	 imul	 rax, rax, 0
  00723	0f b6 44 04 68	 movzx	 eax, BYTE PTR c$[rsp+rax]
  00728	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0072b	75 38		 jne	 SHORT $LN54@trace_cmd

; 1340 :             addr[1] += addr[0] - 1;

  0072d	b8 08 00 00 00	 mov	 eax, 8
  00732	48 6b c0 01	 imul	 rax, rax, 1
  00736	b9 08 00 00 00	 mov	 ecx, 8
  0073b	48 6b c9 00	 imul	 rcx, rcx, 0
  0073f	48 8b 8c 0c 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp+rcx]
  00747	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  0074f	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  00754	b9 08 00 00 00	 mov	 ecx, 8
  00759	48 6b c9 01	 imul	 rcx, rcx, 1
  0075d	48 89 84 0c 80
	00 00 00	 mov	 QWORD PTR addr$[rsp+rcx], rax
$LN54@trace_cmd:

; 1341 : 
; 1342 :         /* Parse optional ASID, if specified */
; 1343 :         if (argc >= 3)

  00765	83 bc 24 a0 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0076d	0f 8c 3e 01 00
	00		 jl	 $LN55@trace_cmd

; 1344 :         {
; 1345 :             char* endptr;   // (strtoul work)
; 1346 :             U32 asid;       // (strtoul result)
; 1347 :             errno = 0;      // (reset to detect if error)

  00773	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00779	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1348 : 
; 1349 :             asid = strtoul( argv[2], &endptr, 16 );

  0077f	b8 08 00 00 00	 mov	 eax, 8
  00784	48 6b c0 02	 imul	 rax, rax, 2
  00788	41 b8 10 00 00
	00		 mov	 r8d, 16
  0078e	48 8d 94 24 48
	01 00 00	 lea	 rdx, QWORD PTR endptr$12[rsp]
  00796	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0079e	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  007a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtoul
  007a8	89 84 24 a0 00
	00 00		 mov	 DWORD PTR asid$6[rsp], eax

; 1350 : 
; 1351 :             if (0
; 1352 :                 || trace              // (not supported for t command)
; 1353 :                 || argv[2][0] == 0    // (no value specified at all)
; 1354 :                 || *endptr != 0       // (invalid characters found)
; 1355 :                 || ERANGE == errno    // (value too big or too small
; 1356 :                 || asid == 0          // (can't be zero)
; 1357 :                 || asid > USHRT_MAX   // (16 bit maximum)

  007af	33 c0		 xor	 eax, eax
  007b1	85 c0		 test	 eax, eax
  007b3	75 64		 jne	 SHORT $LN57@trace_cmd
  007b5	0f b6 44 24 64	 movzx	 eax, BYTE PTR trace$[rsp]
  007ba	85 c0		 test	 eax, eax
  007bc	75 5b		 jne	 SHORT $LN57@trace_cmd
  007be	b8 08 00 00 00	 mov	 eax, 8
  007c3	48 6b c0 02	 imul	 rax, rax, 2
  007c7	b9 01 00 00 00	 mov	 ecx, 1
  007cc	48 6b c9 00	 imul	 rcx, rcx, 0
  007d0	48 8b 94 24 a8
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  007d8	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  007dc	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  007e0	85 c0		 test	 eax, eax
  007e2	74 35		 je	 SHORT $LN57@trace_cmd
  007e4	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR endptr$12[rsp]
  007ec	0f be 00	 movsx	 eax, BYTE PTR [rax]
  007ef	85 c0		 test	 eax, eax
  007f1	75 26		 jne	 SHORT $LN57@trace_cmd
  007f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  007f9	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  007fc	74 1b		 je	 SHORT $LN57@trace_cmd
  007fe	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR asid$6[rsp], 0
  00806	74 11		 je	 SHORT $LN57@trace_cmd
  00808	81 bc 24 a0 00
	00 00 ff ff 00
	00		 cmp	 DWORD PTR asid$6[rsp], 65535 ; 0000ffffH
  00813	0f 86 87 00 00
	00		 jbe	 $LN56@trace_cmd
$LN57@trace_cmd:

; 1358 :             )
; 1359 :             {
; 1360 :                 // Invalid argument %s%s"
; 1361 :                 WRMSG( HHC02205, "E", argv[2], "" );

  00819	b8 08 00 00 00	 mov	 eax, 8
  0081e	48 6b c0 02	 imul	 rax, rax, 2
  00822	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv347[rsp], rax
  0082a	b9 01 00 00 00	 mov	 ecx, 1
  0082f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00835	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160252
  0083c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00841	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00849	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR tv347[rsp]
  00851	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00855	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0085a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160253
  00861	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00866	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160254
  0086d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00872	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00877	41 b9 03 00 00
	00		 mov	 r9d, 3
  0087d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160255
  00884	ba 51 05 00 00	 mov	 edx, 1361		; 00000551H
  00889	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160256
  00890	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1362 :                 return -1;

  00896	b8 ff ff ff ff	 mov	 eax, -1
  0089b	e9 00 0c 00 00	 jmp	 $LN1@trace_cmd
$LN56@trace_cmd:

; 1363 :             }
; 1364 : 
; 1365 :             breakasid = (U16) (asid & 0xFFFF);

  008a0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR asid$6[rsp]
  008a7	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  008ac	66 89 44 24 70	 mov	 WORD PTR breakasid$[rsp], ax
$LN55@trace_cmd:

; 1366 :         }
; 1367 :     }

  008b1	eb 0e		 jmp	 SHORT $LN49@trace_cmd
$LN48@trace_cmd:

; 1368 :     else
; 1369 :         c[0] = '-';

  008b3	b8 01 00 00 00	 mov	 eax, 1
  008b8	48 6b c0 00	 imul	 rax, rax, 0
  008bc	c6 44 04 68 2d	 mov	 BYTE PTR c$[rsp+rax], 45 ; 0000002dH
$LN49@trace_cmd:

; 1370 : 
; 1371 :     /* Process their request */
; 1372 :     unlock = (TRY_OBTAIN_INTLOCK( NULL ) == 0);

  008c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160257
  008c8	33 c9		 xor	 ecx, ecx
  008ca	e8 00 00 00 00	 call	 Try_Obtain_Interrupt_Lock
  008cf	85 c0		 test	 eax, eax
  008d1	75 0d		 jne	 SHORT $LN126@trace_cmd
  008d3	c7 84 24 e0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv367[rsp], 1
  008de	eb 0b		 jmp	 SHORT $LN127@trace_cmd
$LN126@trace_cmd:
  008e0	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv367[rsp], 0
$LN127@trace_cmd:
  008eb	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR tv367[rsp], 0
  008f3	75 0d		 jne	 SHORT $LN128@trace_cmd
  008f5	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv369[rsp], 0
  00900	eb 0b		 jmp	 SHORT $LN129@trace_cmd
$LN128@trace_cmd:
  00902	c7 84 24 e4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv369[rsp], 1
$LN129@trace_cmd:
  0090d	0f b6 84 24 e4
	00 00 00	 movzx	 eax, BYTE PTR tv369[rsp]
  00915	88 44 24 6d	 mov	 BYTE PTR unlock$[rsp], al

; 1373 :     {
; 1374 :         /* Update and/or enable/disable tracing/stepping */
; 1375 :         if (on || off || update)

  00919	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  0091e	85 c0		 test	 eax, eax
  00920	75 16		 jne	 SHORT $LN59@trace_cmd
  00922	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  00927	85 c0		 test	 eax, eax
  00929	75 0d		 jne	 SHORT $LN59@trace_cmd
  0092b	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  00930	85 c0		 test	 eax, eax
  00932	0f 84 38 03 00
	00		 je	 $LN58@trace_cmd
$LN59@trace_cmd:

; 1376 :         {
; 1377 :             int cpu;
; 1378 :             bool auto_disabled = false;

  00938	c6 44 24 78 00	 mov	 BYTE PTR auto_disabled$2[rsp], 0

; 1379 : 
; 1380 :             /* Explicit tracing overrides automatic tracing */
; 1381 :             if (sysblk.auto_trace_beg || sysblk.auto_trace_amt)

  0093d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00944	48 83 b8 e8 12
	00 00 00	 cmp	 QWORD PTR [rax+4840], 0
  0094c	75 11		 jne	 SHORT $LN61@trace_cmd
  0094e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00955	48 83 b8 f0 12
	00 00 00	 cmp	 QWORD PTR [rax+4848], 0
  0095d	74 29		 je	 SHORT $LN60@trace_cmd
$LN61@trace_cmd:

; 1382 :             {
; 1383 :                 auto_disabled = true;

  0095f	c6 44 24 78 01	 mov	 BYTE PTR auto_disabled$2[rsp], 1

; 1384 :                 sysblk.auto_trace_beg = 0;

  00964	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0096b	48 c7 80 e8 12
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4840], 0

; 1385 :                 sysblk.auto_trace_amt = 0;

  00976	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0097d	48 c7 80 f0 12
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4848], 0
$LN60@trace_cmd:

; 1386 :             }
; 1387 : 
; 1388 :             if (trace)

  00988	0f b6 44 24 64	 movzx	 eax, BYTE PTR trace$[rsp]
  0098d	85 c0		 test	 eax, eax
  0098f	0f 84 38 01 00
	00		 je	 $LN62@trace_cmd

; 1389 :             {
; 1390 :                 if (update)

  00995	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  0099a	85 c0		 test	 eax, eax
  0099c	74 62		 je	 SHORT $LN64@trace_cmd

; 1391 :                 {
; 1392 :                     sysblk.traceaddr[0] = addr[0];

  0099e	b8 08 00 00 00	 mov	 eax, 8
  009a3	48 6b c0 00	 imul	 rax, rax, 0
  009a7	b9 08 00 00 00	 mov	 ecx, 8
  009ac	48 6b c9 00	 imul	 rcx, rcx, 0
  009b0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  009b7	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  009bf	48 89 84 0a d8
	12 00 00	 mov	 QWORD PTR [rdx+rcx+4824], rax

; 1393 :                     sysblk.traceaddr[1] = addr[1];

  009c7	b8 08 00 00 00	 mov	 eax, 8
  009cc	48 6b c0 01	 imul	 rax, rax, 1
  009d0	b9 08 00 00 00	 mov	 ecx, 8
  009d5	48 6b c9 01	 imul	 rcx, rcx, 1
  009d9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  009e0	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  009e8	48 89 84 0a d8
	12 00 00	 mov	 QWORD PTR [rdx+rcx+4824], rax

; 1394 :                     sysblk.breakasid    = 0;

  009f0	33 c0		 xor	 eax, eax
  009f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  009f9	66 89 81 c0 12
	00 00		 mov	 WORD PTR [rcx+4800], ax
$LN64@trace_cmd:

; 1395 :                 }
; 1396 : 
; 1397 :                 if (on || off)

  00a00	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  00a05	85 c0		 test	 eax, eax
  00a07	75 0d		 jne	 SHORT $LN66@trace_cmd
  00a09	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  00a0e	85 c0		 test	 eax, eax
  00a10	0f 84 b2 00 00
	00		 je	 $LN65@trace_cmd
$LN66@trace_cmd:

; 1398 :                 {
; 1399 :                     sysblk.insttrace = on;

  00a16	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  00a1b	83 e0 01	 and	 eax, 1
  00a1e	c1 e0 08	 shl	 eax, 8
  00a21	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a28	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00a2e	0f ba f1 08	 btr	 ecx, 8
  00a32	0b c8		 or	 ecx, eax
  00a34	8b c1		 mov	 eax, ecx
  00a36	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a3d	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 1400 : 
; 1401 :                     for (cpu=0; cpu < sysblk.maxcpu; cpu++)

  00a43	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR cpu$3[rsp], 0
  00a4b	eb 0a		 jmp	 SHORT $LN10@trace_cmd
$LN8@trace_cmd:
  00a4d	8b 44 24 7c	 mov	 eax, DWORD PTR cpu$3[rsp]
  00a51	ff c0		 inc	 eax
  00a53	89 44 24 7c	 mov	 DWORD PTR cpu$3[rsp], eax
$LN10@trace_cmd:
  00a57	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a5e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a64	39 44 24 7c	 cmp	 DWORD PTR cpu$3[rsp], eax
  00a68	7d 5e		 jge	 SHORT $LN9@trace_cmd

; 1402 :                     {
; 1403 :                         if (IS_CPU_ONLINE( cpu ))

  00a6a	48 63 44 24 7c	 movsxd	 rax, DWORD PTR cpu$3[rsp]
  00a6f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a76	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00a7f	74 45		 je	 SHORT $LN67@trace_cmd

; 1404 :                             sysblk.regs[ cpu ]->insttrace = on;

  00a81	48 63 44 24 7c	 movsxd	 rax, DWORD PTR cpu$3[rsp]
  00a86	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a8d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00a95	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR on$[rsp]
  00a9a	83 e1 01	 and	 ecx, 1
  00a9d	c1 e1 0f	 shl	 ecx, 15
  00aa0	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00aa6	0f ba f0 0f	 btr	 eax, 15
  00aaa	0b c1		 or	 eax, ecx
  00aac	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR cpu$3[rsp]
  00ab1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00ab8	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00ac0	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax
$LN67@trace_cmd:

; 1405 :                     }

  00ac6	eb 85		 jmp	 SHORT $LN8@trace_cmd
$LN9@trace_cmd:
$LN65@trace_cmd:

; 1406 :                 }
; 1407 :             }

  00ac8	e9 ad 00 00 00	 jmp	 $LN63@trace_cmd
$LN62@trace_cmd:

; 1408 :             else // (step || breakp)
; 1409 :             {
; 1410 :                 if (update)

  00acd	0f b6 44 24 62	 movzx	 eax, BYTE PTR update$[rsp]
  00ad2	85 c0		 test	 eax, eax
  00ad4	74 65		 je	 SHORT $LN68@trace_cmd

; 1411 :                 {
; 1412 :                     sysblk.breakaddr[0] = addr[0];

  00ad6	b8 08 00 00 00	 mov	 eax, 8
  00adb	48 6b c0 00	 imul	 rax, rax, 0
  00adf	b9 08 00 00 00	 mov	 ecx, 8
  00ae4	48 6b c9 00	 imul	 rcx, rcx, 0
  00ae8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00aef	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  00af7	48 89 84 0a c8
	12 00 00	 mov	 QWORD PTR [rdx+rcx+4808], rax

; 1413 :                     sysblk.breakaddr[1] = addr[1];

  00aff	b8 08 00 00 00	 mov	 eax, 8
  00b04	48 6b c0 01	 imul	 rax, rax, 1
  00b08	b9 08 00 00 00	 mov	 ecx, 8
  00b0d	48 6b c9 01	 imul	 rcx, rcx, 1
  00b11	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00b18	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  00b20	48 89 84 0a c8
	12 00 00	 mov	 QWORD PTR [rdx+rcx+4808], rax

; 1414 :                     sysblk.breakasid    = breakasid;

  00b28	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b2f	0f b7 4c 24 70	 movzx	 ecx, WORD PTR breakasid$[rsp]
  00b34	66 89 88 c0 12
	00 00		 mov	 WORD PTR [rax+4800], cx
$LN68@trace_cmd:

; 1415 :                 }
; 1416 : 
; 1417 :                 if (on || off)

  00b3b	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  00b40	85 c0		 test	 eax, eax
  00b42	75 09		 jne	 SHORT $LN70@trace_cmd
  00b44	0f b6 44 24 61	 movzx	 eax, BYTE PTR off$[rsp]
  00b49	85 c0		 test	 eax, eax
  00b4b	74 2d		 je	 SHORT $LN69@trace_cmd
$LN70@trace_cmd:

; 1418 :                     sysblk.instbreak = on;

  00b4d	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  00b52	83 e0 01	 and	 eax, 1
  00b55	c1 e0 0a	 shl	 eax, 10
  00b58	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00b5f	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00b65	0f ba f1 0a	 btr	 ecx, 10
  00b69	0b c8		 or	 ecx, eax
  00b6b	8b c1		 mov	 eax, ecx
  00b6d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00b74	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
$LN69@trace_cmd:
$LN63@trace_cmd:
$LN13@trace_cmd:

; 1419 :             }
; 1420 : 
; 1421 :             SET_IC_TRACE;

  00b7a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b81	48 8b 80 b0 12
	00 00		 mov	 rax, QWORD PTR [rax+4784]
  00b88	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR mask$10[rsp], rax
  00b90	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$4[rsp], 0
  00b9b	eb 10		 jmp	 SHORT $LN16@trace_cmd
$LN14@trace_cmd:
  00b9d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$4[rsp]
  00ba4	ff c0		 inc	 eax
  00ba6	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$4[rsp], eax
$LN16@trace_cmd:
  00bad	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR mask$10[rsp], 0
  00bb6	74 5e		 je	 SHORT $LN15@trace_cmd
  00bb8	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR mask$10[rsp]
  00bc0	48 83 e0 01	 and	 rax, 1
  00bc4	48 85 c0	 test	 rax, rax
  00bc7	74 38		 je	 SHORT $LN71@trace_cmd
  00bc9	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$4[rsp]
  00bd1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00bd8	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00be0	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00be3	0f ba e8 1f	 bts	 eax, 31
  00be7	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$4[rsp]
  00bef	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00bf6	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00bfe	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN71@trace_cmd:
  00c01	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR mask$10[rsp]
  00c09	48 d1 e8	 shr	 rax, 1
  00c0c	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR mask$10[rsp], rax
  00c14	eb 87		 jmp	 SHORT $LN14@trace_cmd
$LN15@trace_cmd:
  00c16	33 c0		 xor	 eax, eax
  00c18	85 c0		 test	 eax, eax
  00c1a	0f 85 5a ff ff
	ff		 jne	 $LN13@trace_cmd

; 1422 : 
; 1423 :             if (auto_disabled)

  00c20	0f b6 44 24 78	 movzx	 eax, BYTE PTR auto_disabled$2[rsp]
  00c25	85 c0		 test	 eax, eax
  00c27	74 47		 je	 SHORT $LN72@trace_cmd

; 1424 :             {
; 1425 :                 // "Automatic tracing disabled"
; 1426 :                 WRMSG( HHC02373, "I" );

  00c29	b9 01 00 00 00	 mov	 ecx, 1
  00c2e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160273
  00c3b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160274
  00c47	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c4c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c51	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c57	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160275
  00c5e	ba 92 05 00 00	 mov	 edx, 1426		; 00000592H
  00c63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160276
  00c6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN72@trace_cmd:
$LN58@trace_cmd:

; 1427 :             }
; 1428 :         }
; 1429 : 
; 1430 :         /* Save (possibly updated) settings for user feedback */
; 1431 :         if (trace)

  00c70	0f b6 44 24 64	 movzx	 eax, BYTE PTR trace$[rsp]
  00c75	85 c0		 test	 eax, eax
  00c77	74 72		 je	 SHORT $LN73@trace_cmd

; 1432 :         {
; 1433 :             addr[0]   = sysblk.traceaddr[0];

  00c79	b8 08 00 00 00	 mov	 eax, 8
  00c7e	48 6b c0 00	 imul	 rax, rax, 0
  00c82	b9 08 00 00 00	 mov	 ecx, 8
  00c87	48 6b c9 00	 imul	 rcx, rcx, 0
  00c8b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00c92	48 8b 84 02 d8
	12 00 00	 mov	 rax, QWORD PTR [rdx+rax+4824]
  00c9a	48 89 84 0c 80
	00 00 00	 mov	 QWORD PTR addr$[rsp+rcx], rax

; 1434 :             addr[1]   = sysblk.traceaddr[1];

  00ca2	b8 08 00 00 00	 mov	 eax, 8
  00ca7	48 6b c0 01	 imul	 rax, rax, 1
  00cab	b9 08 00 00 00	 mov	 ecx, 8
  00cb0	48 6b c9 01	 imul	 rcx, rcx, 1
  00cb4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00cbb	48 8b 84 02 d8
	12 00 00	 mov	 rax, QWORD PTR [rdx+rax+4824]
  00cc3	48 89 84 0c 80
	00 00 00	 mov	 QWORD PTR addr$[rsp+rcx], rax

; 1435 :             breakasid = 0;

  00ccb	33 c0		 xor	 eax, eax
  00ccd	66 89 44 24 70	 mov	 WORD PTR breakasid$[rsp], ax

; 1436 :             on        = sysblk.insttrace;

  00cd2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00cd9	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00cdf	c1 e8 08	 shr	 eax, 8
  00ce2	83 e0 01	 and	 eax, 1
  00ce5	88 44 24 60	 mov	 BYTE PTR on$[rsp], al

; 1437 :         }

  00ce9	eb 7c		 jmp	 SHORT $LN74@trace_cmd
$LN73@trace_cmd:

; 1438 :         else // (step || breakp)
; 1439 :         {
; 1440 :             addr[0]   = sysblk.breakaddr[0];

  00ceb	b8 08 00 00 00	 mov	 eax, 8
  00cf0	48 6b c0 00	 imul	 rax, rax, 0
  00cf4	b9 08 00 00 00	 mov	 ecx, 8
  00cf9	48 6b c9 00	 imul	 rcx, rcx, 0
  00cfd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00d04	48 8b 84 02 c8
	12 00 00	 mov	 rax, QWORD PTR [rdx+rax+4808]
  00d0c	48 89 84 0c 80
	00 00 00	 mov	 QWORD PTR addr$[rsp+rcx], rax

; 1441 :             addr[1]   = sysblk.breakaddr[1];

  00d14	b8 08 00 00 00	 mov	 eax, 8
  00d19	48 6b c0 01	 imul	 rax, rax, 1
  00d1d	b9 08 00 00 00	 mov	 ecx, 8
  00d22	48 6b c9 01	 imul	 rcx, rcx, 1
  00d26	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00d2d	48 8b 84 02 c8
	12 00 00	 mov	 rax, QWORD PTR [rdx+rax+4808]
  00d35	48 89 84 0c 80
	00 00 00	 mov	 QWORD PTR addr$[rsp+rcx], rax

; 1442 :             breakasid = sysblk.breakasid;

  00d3d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d44	0f b7 80 c0 12
	00 00		 movzx	 eax, WORD PTR [rax+4800]
  00d4b	66 89 44 24 70	 mov	 WORD PTR breakasid$[rsp], ax

; 1443 :             on        = sysblk.instbreak;

  00d50	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d57	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00d5d	c1 e8 0a	 shr	 eax, 10
  00d60	83 e0 01	 and	 eax, 1
  00d63	88 44 24 60	 mov	 BYTE PTR on$[rsp], al
$LN74@trace_cmd:

; 1444 :         }
; 1445 :     }
; 1446 :     if (unlock) RELEASE_INTLOCK( NULL );

  00d67	0f b6 44 24 6d	 movzx	 eax, BYTE PTR unlock$[rsp]
  00d6c	85 c0		 test	 eax, eax
  00d6e	74 0e		 je	 SHORT $LN75@trace_cmd
  00d70	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160280
  00d77	33 c9		 xor	 ecx, ecx
  00d79	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN75@trace_cmd:

; 1447 : 
; 1448 :     /* Build range and asid message fragments, if appropriate */
; 1449 :     if (addr[0] || addr[1])

  00d7e	b8 08 00 00 00	 mov	 eax, 8
  00d83	48 6b c0 00	 imul	 rax, rax, 0
  00d87	48 83 bc 04 80
	00 00 00 00	 cmp	 QWORD PTR addr$[rsp+rax], 0
  00d90	75 18		 jne	 SHORT $LN77@trace_cmd
  00d92	b8 08 00 00 00	 mov	 eax, 8
  00d97	48 6b c0 01	 imul	 rax, rax, 1
  00d9b	48 83 bc 04 80
	00 00 00 00	 cmp	 QWORD PTR addr$[rsp+rax], 0
  00da4	0f 84 a8 00 00
	00		 je	 $LN76@trace_cmd
$LN77@trace_cmd:

; 1450 :     {
; 1451 :         MSGBUF( rangemsg, " range %"PRIx64"%c%"PRIx64,

  00daa	b8 01 00 00 00	 mov	 eax, 1
  00daf	48 6b c0 00	 imul	 rax, rax, 0
  00db3	0f b6 44 04 68	 movzx	 eax, BYTE PTR c$[rsp+rax]
  00db8	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00dbb	75 32		 jne	 SHORT $LN130@trace_cmd
  00dbd	b8 08 00 00 00	 mov	 eax, 8
  00dc2	48 6b c0 01	 imul	 rax, rax, 1
  00dc6	b9 08 00 00 00	 mov	 ecx, 8
  00dcb	48 6b c9 00	 imul	 rcx, rcx, 0
  00dcf	48 8b 8c 0c 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp+rcx]
  00dd7	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  00ddf	48 2b c1	 sub	 rax, rcx
  00de2	48 ff c0	 inc	 rax
  00de5	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv539[rsp], rax
  00ded	eb 19		 jmp	 SHORT $LN131@trace_cmd
$LN130@trace_cmd:
  00def	b8 08 00 00 00	 mov	 eax, 8
  00df4	48 6b c0 01	 imul	 rax, rax, 1
  00df8	48 8b 84 04 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp+rax]
  00e00	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv539[rsp], rax
$LN131@trace_cmd:
  00e08	b8 01 00 00 00	 mov	 eax, 1
  00e0d	48 6b c0 00	 imul	 rax, rax, 0
  00e11	0f b6 44 04 68	 movzx	 eax, BYTE PTR c$[rsp+rax]
  00e16	b9 08 00 00 00	 mov	 ecx, 8
  00e1b	48 6b c9 00	 imul	 rcx, rcx, 0
  00e1f	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv539[rsp]
  00e27	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00e2c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00e30	4c 8b 8c 0c 80
	00 00 00	 mov	 r9, QWORD PTR addr$[rsp+rcx]
  00e38	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160283
  00e3f	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00e44	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR rangemsg$[rsp]
  00e4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN76@trace_cmd:

; 1452 : 
; 1453 :             addr[0], c[0], ('.' == c[0]) ?
; 1454 :                            (addr[1] - addr[0]) + 1
; 1455 :                          :  addr[1]
; 1456 :         );
; 1457 :     }
; 1458 : 
; 1459 :     if (breakasid)

  00e52	0f b7 44 24 70	 movzx	 eax, WORD PTR breakasid$[rsp]
  00e57	85 c0		 test	 eax, eax
  00e59	74 22		 je	 SHORT $LN78@trace_cmd

; 1460 :         MSGBUF( asidmsg, " asid x'%4.4"PRIx16"'", breakasid );

  00e5b	0f b7 44 24 70	 movzx	 eax, WORD PTR breakasid$[rsp]
  00e60	44 8b c8	 mov	 r9d, eax
  00e63	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160285
  00e6a	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00e6f	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR asidmsg$[rsp]
  00e77	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN78@trace_cmd:

; 1461 : 
; 1462 :     /* Display (current or new) settings */
; 1463 : 
; 1464 :     WRMSG( HHC02229, "I",

  00e7d	0f b6 44 24 60	 movzx	 eax, BYTE PTR on$[rsp]
  00e82	85 c0		 test	 eax, eax
  00e84	74 11		 je	 SHORT $LN132@trace_cmd
  00e86	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160286
  00e8d	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv561[rsp], rax
  00e95	eb 0f		 jmp	 SHORT $LN133@trace_cmd
$LN132@trace_cmd:
  00e97	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160287
  00e9e	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv561[rsp], rax
$LN133@trace_cmd:
  00ea6	0f b6 44 24 64	 movzx	 eax, BYTE PTR trace$[rsp]
  00eab	85 c0		 test	 eax, eax
  00ead	74 11		 je	 SHORT $LN138@trace_cmd
  00eaf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160288
  00eb6	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv571[rsp], rax
  00ebe	eb 63		 jmp	 SHORT $LN139@trace_cmd
$LN138@trace_cmd:
  00ec0	0f b6 44 24 6e	 movzx	 eax, BYTE PTR step$[rsp]
  00ec5	85 c0		 test	 eax, eax
  00ec7	74 11		 je	 SHORT $LN136@trace_cmd
  00ec9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160289
  00ed0	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv569[rsp], rax
  00ed8	eb 39		 jmp	 SHORT $LN137@trace_cmd
$LN136@trace_cmd:
  00eda	0f b6 44 24 6c	 movzx	 eax, BYTE PTR breakp$[rsp]
  00edf	85 c0		 test	 eax, eax
  00ee1	74 11		 je	 SHORT $LN134@trace_cmd
  00ee3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160290
  00eea	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv567[rsp], rax
  00ef2	eb 0f		 jmp	 SHORT $LN135@trace_cmd
$LN134@trace_cmd:
  00ef4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160291
  00efb	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv567[rsp], rax
$LN135@trace_cmd:
  00f03	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv567[rsp]
  00f0b	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv569[rsp], rax
$LN137@trace_cmd:
  00f13	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv569[rsp]
  00f1b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv571[rsp], rax
$LN139@trace_cmd:
  00f23	b9 01 00 00 00	 mov	 ecx, 1
  00f28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f2e	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR asidmsg$[rsp]
  00f36	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00f3b	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR rangemsg$[rsp]
  00f43	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f48	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv561[rsp]
  00f50	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00f55	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv571[rsp]
  00f5d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160292
  00f69	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160293
  00f75	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f7a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f7f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f85	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160294
  00f8c	ba c0 05 00 00	 mov	 edx, 1472		; 000005c0H
  00f91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160295
  00f98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1465 : 
; 1466 :         // "Instruction %s %s%s%s"
; 1467 : 
; 1468 :         trace ? "tracing" : step  ? "stepping" : breakp ? "break" : "(ERR)",
; 1469 :         on ? "on" : "off",
; 1470 :         rangemsg,
; 1471 :         asidmsg
; 1472 :     );
; 1473 : 
; 1474 :     /* Also show automatic tracing settings if enabled */
; 1475 :     if (sysblk.auto_trace_beg || sysblk.auto_trace_amt)

  00f9e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00fa5	48 83 b8 e8 12
	00 00 00	 cmp	 QWORD PTR [rax+4840], 0
  00fad	75 11		 jne	 SHORT $LN80@trace_cmd
  00faf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00fb6	48 83 b8 f0 12
	00 00 00	 cmp	 QWORD PTR [rax+4848], 0
  00fbe	74 10		 je	 SHORT $LN79@trace_cmd
$LN80@trace_cmd:

; 1476 :         panel_command( "-t+-" );

  00fc0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160298
  00fc7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_panel_command
  00fce	ff 10		 call	 QWORD PTR [rax]
$LN79@trace_cmd:

; 1477 : 
; 1478 : #if defined( _FEATURE_073_TRANSACT_EXEC_FACILITY )
; 1479 :     /* Also show txf tracing settings if enabled */
; 1480 :     if (sysblk.txf_tracing & TXF_TR_INSTR)

  00fd0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00fd7	8b 80 4c 05 00
	00		 mov	 eax, DWORD PTR [rax+1356]
  00fdd	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00fe2	85 c0		 test	 eax, eax
  00fe4	74 10		 je	 SHORT $LN81@trace_cmd

; 1481 :         panel_command( "-txf" );

  00fe6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160300
  00fed	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_panel_command
  00ff4	ff 10		 call	 QWORD PTR [rax]
$LN81@trace_cmd:

; 1482 : #endif
; 1483 : 
; 1484 :     if (query)

  00ff6	0f b6 44 24 63	 movzx	 eax, BYTE PTR query$[rsp]
  00ffb	85 c0		 test	 eax, eax
  00ffd	0f 84 9b 04 00
	00		 je	 $LN82@trace_cmd

; 1485 :     {
; 1486 :         unlock = (TRY_OBTAIN_INTLOCK( NULL ) == 0);

  01003	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160302
  0100a	33 c9		 xor	 ecx, ecx
  0100c	e8 00 00 00 00	 call	 Try_Obtain_Interrupt_Lock
  01011	85 c0		 test	 eax, eax
  01013	75 0d		 jne	 SHORT $LN140@trace_cmd
  01015	c7 84 24 e8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv629[rsp], 1
  01020	eb 0b		 jmp	 SHORT $LN141@trace_cmd
$LN140@trace_cmd:
  01022	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv629[rsp], 0
$LN141@trace_cmd:
  0102d	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR tv629[rsp], 0
  01035	75 0d		 jne	 SHORT $LN142@trace_cmd
  01037	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv631[rsp], 0
  01042	eb 0b		 jmp	 SHORT $LN143@trace_cmd
$LN142@trace_cmd:
  01044	c7 84 24 ec 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv631[rsp], 1
$LN143@trace_cmd:
  0104f	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR tv631[rsp]
  01057	88 44 24 6d	 mov	 BYTE PTR unlock$[rsp], al

; 1487 :         {
; 1488 :             DEVBLK* dev;
; 1489 :             char typ[16] = {0};

  0105b	48 8d 84 24 58
	01 00 00	 lea	 rax, QWORD PTR typ$13[rsp]
  01063	48 8b f8	 mov	 rdi, rax
  01066	33 c0		 xor	 eax, eax
  01068	b9 10 00 00 00	 mov	 ecx, 16
  0106d	f3 aa		 rep stosb

; 1490 :             char who[16] = {0};

  0106f	48 8d 84 24 68
	01 00 00	 lea	 rax, QWORD PTR who$14[rsp]
  01077	48 8b f8	 mov	 rdi, rax
  0107a	33 c0		 xor	 eax, eax
  0107c	b9 10 00 00 00	 mov	 ecx, 16
  01081	f3 aa		 rep stosb

; 1491 :             int cpu, on = 0, off = 0;

  01083	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR on$7[rsp], 0
  0108e	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR off$8[rsp], 0

; 1492 : 
; 1493 :             /* Also show instruction tracing for each individual CPU,
; 1494 :                but only if not all CPUs are being traced or not (i.e.
; 1495 :                only if some are being traced but not others, or vice-
; 1496 :                versa).
; 1497 :             */
; 1498 :             for (cpu=0; cpu < sysblk.maxcpu; cpu++)

  01099	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR cpu$1[rsp], 0
  010a1	eb 0a		 jmp	 SHORT $LN19@trace_cmd
$LN17@trace_cmd:
  010a3	8b 44 24 74	 mov	 eax, DWORD PTR cpu$1[rsp]
  010a7	ff c0		 inc	 eax
  010a9	89 44 24 74	 mov	 DWORD PTR cpu$1[rsp], eax
$LN19@trace_cmd:
  010ad	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  010b4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  010ba	39 44 24 74	 cmp	 DWORD PTR cpu$1[rsp], eax
  010be	7d 5f		 jge	 SHORT $LN18@trace_cmd

; 1499 :             {
; 1500 :                 if (IS_CPU_ONLINE( cpu ))

  010c0	48 63 44 24 74	 movsxd	 rax, DWORD PTR cpu$1[rsp]
  010c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  010cc	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  010d5	74 46		 je	 SHORT $LN83@trace_cmd

; 1501 :                 {
; 1502 :                     if (sysblk.regs[ cpu ]->insttrace)

  010d7	48 63 44 24 74	 movsxd	 rax, DWORD PTR cpu$1[rsp]
  010dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  010e3	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  010eb	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  010f1	c1 e8 0f	 shr	 eax, 15
  010f4	83 e0 01	 and	 eax, 1
  010f7	85 c0		 test	 eax, eax
  010f9	74 12		 je	 SHORT $LN84@trace_cmd

; 1503 :                         ++on;

  010fb	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR on$7[rsp]
  01102	ff c0		 inc	 eax
  01104	89 84 24 a4 00
	00 00		 mov	 DWORD PTR on$7[rsp], eax
  0110b	eb 10		 jmp	 SHORT $LN85@trace_cmd
$LN84@trace_cmd:

; 1504 :                     else
; 1505 :                         ++off;

  0110d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR off$8[rsp]
  01114	ff c0		 inc	 eax
  01116	89 84 24 a8 00
	00 00		 mov	 DWORD PTR off$8[rsp], eax
$LN85@trace_cmd:
$LN83@trace_cmd:

; 1506 :                 }
; 1507 :             }

  0111d	eb 84		 jmp	 SHORT $LN17@trace_cmd
$LN18@trace_cmd:

; 1508 : 
; 1509 :             /* If only some (but not all) have instruction tracing enabled
; 1510 :                (or vice versa), then show them which ones have it enabled.
; 1511 :             */
; 1512 :             if (on && off)  // Some on, some off? (i.e. neither is zero?)

  0111f	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR on$7[rsp], 0
  01127	0f 84 99 01 00
	00		 je	 $LN86@trace_cmd
  0112d	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR off$8[rsp], 0
  01135	0f 84 8b 01 00
	00		 je	 $LN86@trace_cmd
$LN22@trace_cmd:

; 1513 :             {
; 1514 :                 ASSERT( sysblk.insttrace ); // sanity check

  0113b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01142	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  01148	c1 e8 08	 shr	 eax, 8
  0114b	83 e0 01	 and	 eax, 1
  0114e	85 c0		 test	 eax, eax
  01150	75 5c		 jne	 SHORT $LN87@trace_cmd
$LN25@trace_cmd:
  01152	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160308
  01159	41 b8 ea 05 00
	00		 mov	 r8d, 1514		; 000005eaH
  0115f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160309
  01166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160310
  0116d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  01173	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  01179	85 c0		 test	 eax, eax
  0117b	74 20		 je	 SHORT $LN88@trace_cmd
  0117d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160312
  01184	41 b8 ea 05 00
	00		 mov	 r8d, 1514		; 000005eaH
  0118a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160313
  01191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160314
  01198	e8 00 00 00 00	 call	 DebuggerTrace
$LN88@trace_cmd:
  0119d	33 c0		 xor	 eax, eax
  0119f	85 c0		 test	 eax, eax
  011a1	75 af		 jne	 SHORT $LN25@trace_cmd
  011a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  011a9	85 c0		 test	 eax, eax
  011ab	74 01		 je	 SHORT $LN89@trace_cmd
  011ad	cc		 int	 3
$LN89@trace_cmd:
$LN87@trace_cmd:
  011ae	33 c0		 xor	 eax, eax
  011b0	85 c0		 test	 eax, eax
  011b2	75 87		 jne	 SHORT $LN22@trace_cmd

; 1515 : 
; 1516 :                 for (cpu=0; cpu < sysblk.maxcpu; cpu++)

  011b4	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR cpu$1[rsp], 0
  011bc	eb 0a		 jmp	 SHORT $LN28@trace_cmd
$LN26@trace_cmd:
  011be	8b 44 24 74	 mov	 eax, DWORD PTR cpu$1[rsp]
  011c2	ff c0		 inc	 eax
  011c4	89 44 24 74	 mov	 DWORD PTR cpu$1[rsp], eax
$LN28@trace_cmd:
  011c8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  011cf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  011d5	39 44 24 74	 cmp	 DWORD PTR cpu$1[rsp], eax
  011d9	0f 8d e7 00 00
	00		 jge	 $LN27@trace_cmd

; 1517 :                 {
; 1518 :                     if (IS_CPU_ONLINE( cpu ))

  011df	48 63 44 24 74	 movsxd	 rax, DWORD PTR cpu$1[rsp]
  011e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  011eb	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  011f4	0f 84 c7 00 00
	00		 je	 $LN90@trace_cmd

; 1519 :                     {
; 1520 :                         if (sysblk.regs[ cpu ]->insttrace)

  011fa	48 63 44 24 74	 movsxd	 rax, DWORD PTR cpu$1[rsp]
  011ff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01206	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0120e	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  01214	c1 e8 0f	 shr	 eax, 15
  01217	83 e0 01	 and	 eax, 1
  0121a	85 c0		 test	 eax, eax
  0121c	0f 84 9f 00 00
	00		 je	 $LN91@trace_cmd

; 1521 :                         {
; 1522 :                             MSGBUF( who, "CPU %s%02X",

  01222	48 63 44 24 74	 movsxd	 rax, DWORD PTR cpu$1[rsp]
  01227	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0122e	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  01236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  0123c	8b 4c 24 74	 mov	 ecx, DWORD PTR cpu$1[rsp]
  01240	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  01244	4c 8b c8	 mov	 r9, rax
  01247	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160318
  0124e	ba 10 00 00 00	 mov	 edx, 16
  01253	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR who$14[rsp]
  0125b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1523 :                                 ptyp2short( sysblk.ptyp[ cpu ] ), cpu );
; 1524 : 
; 1525 :                             // "%stracing active for %s"
; 1526 :                             WRMSG( HHC02382, "I", "instruction ", who );

  01261	b9 01 00 00 00	 mov	 ecx, 1
  01266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0126c	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR who$14[rsp]
  01274	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160319
  01280	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01285	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160320
  0128c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160321
  01298	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0129d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  012a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160322
  012af	ba f6 05 00 00	 mov	 edx, 1526		; 000005f6H
  012b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160323
  012bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN91@trace_cmd:
$LN90@trace_cmd:

; 1527 :                         }
; 1528 :                     }
; 1529 :                 }

  012c1	e9 f8 fe ff ff	 jmp	 $LN26@trace_cmd
$LN27@trace_cmd:
$LN86@trace_cmd:

; 1530 :             }
; 1531 : 
; 1532 :             /* Also show CCW/ORB tracing if enabled */
; 1533 :             for (dev = sysblk.firstdev; dev != NULL; dev = dev->nextdev)

  012c6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  012cd	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  012d4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR dev$5[rsp], rax
  012dc	eb 14		 jmp	 SHORT $LN31@trace_cmd
$LN29@trace_cmd:
  012de	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dev$5[rsp]
  012e6	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  012ea	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR dev$5[rsp], rax
$LN31@trace_cmd:
  012f2	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR dev$5[rsp], 0
  012fb	0f 84 86 01 00
	00		 je	 $LN30@trace_cmd

; 1534 :             {
; 1535 :                 typ[0] = 0;

  01301	b8 01 00 00 00	 mov	 eax, 1
  01306	48 6b c0 00	 imul	 rax, rax, 0
  0130a	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR $T11[rsp], rax
  01312	48 83 bc 24 28
	01 00 00 10	 cmp	 QWORD PTR $T11[rsp], 16
  0131b	73 02		 jae	 SHORT $LN144@trace_cmd
  0131d	eb 05		 jmp	 SHORT $LN145@trace_cmd
$LN144@trace_cmd:
  0131f	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN145@trace_cmd:
  01324	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR $T11[rsp]
  0132c	c6 84 04 58 01
	00 00 00	 mov	 BYTE PTR typ$13[rsp+rax], 0

; 1536 : 
; 1537 :                 if (dev->orbtrace   ) STRLCAT( typ, "ORB " );

  01334	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dev$5[rsp]
  0133c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01342	c1 e8 0e	 shr	 eax, 14
  01345	83 e0 01	 and	 eax, 1
  01348	85 c0		 test	 eax, eax
  0134a	74 1b		 je	 SHORT $LN92@trace_cmd
  0134c	41 b8 10 00 00
	00		 mov	 r8d, 16
  01352	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160325
  01359	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR typ$13[rsp]
  01361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN92@trace_cmd:

; 1538 :                 if (dev->ccwtrace   ) STRLCAT( typ, "CCW " );

  01367	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dev$5[rsp]
  0136f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01375	c1 e8 0f	 shr	 eax, 15
  01378	83 e0 01	 and	 eax, 1
  0137b	85 c0		 test	 eax, eax
  0137d	74 1b		 je	 SHORT $LN93@trace_cmd
  0137f	41 b8 10 00 00
	00		 mov	 r8d, 16
  01385	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160327
  0138c	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR typ$13[rsp]
  01394	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN93@trace_cmd:

; 1539 :                 if (dev->ckdkeytrace) STRLCAT( typ, "CKD " );

  0139a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dev$5[rsp]
  013a2	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  013a8	c1 e8 02	 shr	 eax, 2
  013ab	83 e0 01	 and	 eax, 1
  013ae	85 c0		 test	 eax, eax
  013b0	74 1b		 je	 SHORT $LN94@trace_cmd
  013b2	41 b8 10 00 00
	00		 mov	 r8d, 16
  013b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160329
  013bf	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR typ$13[rsp]
  013c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN94@trace_cmd:

; 1540 : 
; 1541 :                 if (typ[0])

  013cd	b8 01 00 00 00	 mov	 eax, 1
  013d2	48 6b c0 00	 imul	 rax, rax, 0
  013d6	0f be 84 04 58
	01 00 00	 movsx	 eax, BYTE PTR typ$13[rsp+rax]
  013de	85 c0		 test	 eax, eax
  013e0	0f 84 9c 00 00
	00		 je	 $LN95@trace_cmd

; 1542 :                 {
; 1543 :                     MSGBUF( who, "device %1d:%04X",

  013e6	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dev$5[rsp]
  013ee	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  013f2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dev$5[rsp]
  013fa	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  013fe	d1 f9		 sar	 ecx, 1
  01400	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01404	44 8b c9	 mov	 r9d, ecx
  01407	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160331
  0140e	ba 10 00 00 00	 mov	 edx, 16
  01413	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR who$14[rsp]
  0141b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1544 :                         SSID_TO_LCSS( dev->ssid ), dev->devnum );
; 1545 : 
; 1546 :                     // "%stracing active for %s"
; 1547 :                     WRMSG( HHC02382, "I", typ, who );

  01421	b9 01 00 00 00	 mov	 ecx, 1
  01426	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0142c	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR who$14[rsp]
  01434	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01439	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR typ$13[rsp]
  01441	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01446	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160332
  0144d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01452	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160333
  01459	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0145e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01463	41 b9 03 00 00
	00		 mov	 r9d, 3
  01469	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160334
  01470	ba 0b 06 00 00	 mov	 edx, 1547		; 0000060bH
  01475	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160335
  0147c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN95@trace_cmd:

; 1548 :                 }
; 1549 :             }

  01482	e9 57 fe ff ff	 jmp	 $LN29@trace_cmd
$LN30@trace_cmd:

; 1550 :         }
; 1551 :         if (unlock) RELEASE_INTLOCK( NULL );

  01487	0f b6 44 24 6d	 movzx	 eax, BYTE PTR unlock$[rsp]
  0148c	85 c0		 test	 eax, eax
  0148e	74 0e		 je	 SHORT $LN96@trace_cmd
  01490	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160337
  01497	33 c9		 xor	 ecx, ecx
  01499	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN96@trace_cmd:
$LN82@trace_cmd:

; 1552 :     }
; 1553 : 
; 1554 :     return 0;

  0149e	33 c0		 xor	 eax, eax
$LN1@trace_cmd:
$LN97@trace_cmd:

; 1555 : }

  014a0	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  014a8	48 33 cc	 xor	 rcx, rsp
  014ab	e8 00 00 00 00	 call	 __security_check_cookie
  014b0	48 81 c4 90 02
	00 00		 add	 rsp, 656		; 00000290H
  014b7	5f		 pop	 rdi
  014b8	c3		 ret	 0
trace_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
enable$ = 80
nostop$ = 81
i$1 = 84
mg$ = 88
maxsize$ = 96
traceFILE$ = 104
mgs$ = 112
endptr$2 = 120
tv132 = 128
tv134 = 132
tv140 = 136
tv142 = 140
quote$ = 144
factor$3 = 152
tracebuff$4 = 160
tv582 = 168
tv687 = 176
tv694 = 184
tv715 = 192
tv722 = 200
tv85 = 208
tv278 = 216
tv370 = 224
tv408 = 232
tv589 = 240
tv728 = 248
tv741 = 256
filename$ = 272
buf$ = 544
__$ArrayPad$ = 848
argc$ = 880
argv$ = 888
cmdline$ = 896
tf_cmd	PROC

; 917  : {

$LN150:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 60 03
	00 00		 sub	 rsp, 864		; 00000360H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 918  :     U64          maxsize    = 0;

  00028	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR maxsize$[rsp], 0

; 919  :     FILE*        traceFILE  = NULL;

  00031	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR traceFILE$[rsp], 0

; 920  : 
; 921  :     char         filename[MAX_PATH+1] = {0};

  0003a	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR filename$[rsp]
  00042	48 8b f8	 mov	 rdi, rax
  00045	33 c0		 xor	 eax, eax
  00047	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  0004c	f3 aa		 rep stosb

; 922  :     char         buf[sizeof(filename)+32] = {0};

  0004e	48 8d 84 24 20
	02 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  00056	48 8b f8	 mov	 rdi, rax
  00059	33 c0		 xor	 eax, eax
  0005b	b9 25 01 00 00	 mov	 ecx, 293		; 00000125H
  00060	f3 aa		 rep stosb

; 923  : 
; 924  :     int          mgs = 0;

  00062	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR mgs$[rsp], 0

; 925  :     char         mg = 'M';

  0006a	c6 44 24 58 4d	 mov	 BYTE PTR mg$[rsp], 77	; 0000004dH

; 926  :     const char*  quote = "\"";

  0006f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159933
  00076	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR quote$[rsp], rax

; 927  :     bool         enable = false;

  0007e	c6 44 24 50 00	 mov	 BYTE PTR enable$[rsp], 0

; 928  :     bool         nostop = false;

  00083	c6 44 24 51 00	 mov	 BYTE PTR nostop$[rsp], 0
$LN4@tf_cmd:

; 929  : 
; 930  :     UNREFERENCED( cmdline );

  00088	33 c0		 xor	 eax, eax
  0008a	85 c0		 test	 eax, eax
  0008c	75 fa		 jne	 SHORT $LN4@tf_cmd
$LN7@tf_cmd:

; 931  :     UPPER_ARGV_0( argv );

  0008e	48 83 bc 24 78
	03 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00097	74 47		 je	 SHORT $LN53@tf_cmd
  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000aa	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  000af	74 2f		 je	 SHORT $LN53@tf_cmd
  000b1	b8 08 00 00 00	 mov	 eax, 8
  000b6	48 6b c0 00	 imul	 rax, rax, 0
  000ba	b9 08 00 00 00	 mov	 ecx, 8
  000bf	48 6b c9 00	 imul	 rcx, rcx, 0
  000c3	48 8b 94 24 78
	03 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000cb	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  000cf	48 8b 84 24 78
	03 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000d7	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000db	e8 00 00 00 00	 call	 strupper
$LN53@tf_cmd:
  000e0	33 c0		 xor	 eax, eax
  000e2	85 c0		 test	 eax, eax
  000e4	75 a8		 jne	 SHORT $LN7@tf_cmd

; 932  : 
; 933  :     // Too many arguments?
; 934  : 
; 935  :     if (argc > 5)

  000e6	83 bc 24 70 03
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  000ee	7e 7b		 jle	 SHORT $LN54@tf_cmd

; 936  :     {
; 937  :         // "Invalid command usage. Type 'help %s' for assistance."
; 938  :         WRMSG( HHC02299, "E", argv[0] );

  000f0	b8 08 00 00 00	 mov	 eax, 8
  000f5	48 6b c0 00	 imul	 rax, rax, 0
  000f9	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv85[rsp], rax
  00101	b9 01 00 00 00	 mov	 ecx, 1
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0010c	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00114	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv85[rsp]
  0011c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00120	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159936
  0012c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159937
  00138	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00142	41 b9 03 00 00
	00		 mov	 r9d, 3
  00148	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159938
  0014f	ba aa 03 00 00	 mov	 edx, 938		; 000003aaH
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159939
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 939  :         return -1;

  00161	b8 ff ff ff ff	 mov	 eax, -1
  00166	e9 16 12 00 00	 jmp	 $LN1@tf_cmd
$LN54@tf_cmd:

; 940  :     }
; 941  : 
; 942  :     // Parse new values...
; 943  : 
; 944  :     maxsize = sysblk.maxtracesize;

  0016b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00172	48 8b 80 30 14
	00 00		 mov	 rax, QWORD PTR [rax+5168]
  00179	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax

; 945  :     enable = sysblk.traceFILE ? true : false;

  0017e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00185	48 83 b8 20 14
	00 00 00	 cmp	 QWORD PTR [rax+5152], 0
  0018d	74 0d		 je	 SHORT $LN134@tf_cmd
  0018f	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv132[rsp], 1
  0019a	eb 0b		 jmp	 SHORT $LN135@tf_cmd
$LN134@tf_cmd:
  0019c	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv132[rsp], 0
$LN135@tf_cmd:
  001a7	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv132[rsp], 0
  001af	75 0d		 jne	 SHORT $LN136@tf_cmd
  001b1	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv134[rsp], 0
  001bc	eb 0b		 jmp	 SHORT $LN137@tf_cmd
$LN136@tf_cmd:
  001be	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv134[rsp], 1
$LN137@tf_cmd:
  001c9	0f b6 84 24 84
	00 00 00	 movzx	 eax, BYTE PTR tv134[rsp]
  001d1	88 44 24 50	 mov	 BYTE PTR enable$[rsp], al

; 946  : #ifdef FISH_TFNOSTOP2
; 947  :     nostop = sysblk.tfnostop2 ? true : false;
; 948  : #else
; 949  :     nostop = sysblk.tfnostop ? true : false;

  001d5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001dc	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  001e2	c1 e8 09	 shr	 eax, 9
  001e5	83 e0 01	 and	 eax, 1
  001e8	85 c0		 test	 eax, eax
  001ea	74 0d		 je	 SHORT $LN138@tf_cmd
  001ec	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv140[rsp], 1
  001f7	eb 0b		 jmp	 SHORT $LN139@tf_cmd
$LN138@tf_cmd:
  001f9	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv140[rsp], 0
$LN139@tf_cmd:
  00204	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv140[rsp], 0
  0020c	75 0d		 jne	 SHORT $LN140@tf_cmd
  0020e	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv142[rsp], 0
  00219	eb 0b		 jmp	 SHORT $LN141@tf_cmd
$LN140@tf_cmd:
  0021b	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv142[rsp], 1
$LN141@tf_cmd:
  00226	0f b6 84 24 8c
	00 00 00	 movzx	 eax, BYTE PTR tv142[rsp]
  0022e	88 44 24 51	 mov	 BYTE PTR nostop$[rsp], al

; 950  : #endif
; 951  : 
; 952  :     if (argc > 1)

  00232	83 bc 24 70 03
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0023a	0f 8e aa 0d 00
	00		 jle	 $LN55@tf_cmd

; 953  :     {
; 954  :         int  i;
; 955  :         for (i=1; i < argc; i++)

  00240	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR i$1[rsp], 1
  00248	eb 0a		 jmp	 SHORT $LN10@tf_cmd
$LN8@tf_cmd:
  0024a	8b 44 24 54	 mov	 eax, DWORD PTR i$1[rsp]
  0024e	ff c0		 inc	 eax
  00250	89 44 24 54	 mov	 DWORD PTR i$1[rsp], eax
$LN10@tf_cmd:
  00254	8b 84 24 70 03
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0025b	39 44 24 54	 cmp	 DWORD PTR i$1[rsp], eax
  0025f	0f 8d 3b 07 00
	00		 jge	 $LN9@tf_cmd

; 956  :         {
; 957  :             if (0
; 958  :                 || strcasecmp( argv[i], "ON"   ) == 0
; 959  :                 || strcasecmp( argv[i], "OPEN" ) == 0

  00265	33 c0		 xor	 eax, eax
  00267	85 c0		 test	 eax, eax
  00269	75 44		 jne	 SHORT $LN58@tf_cmd
  0026b	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  00270	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159944
  00277	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0027f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00289	85 c0		 test	 eax, eax
  0028b	74 22		 je	 SHORT $LN58@tf_cmd
  0028d	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  00292	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159945
  00299	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002a1	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002ab	85 c0		 test	 eax, eax
  002ad	75 0a		 jne	 SHORT $LN56@tf_cmd
$LN58@tf_cmd:

; 960  :             )
; 961  :             {
; 962  :                 enable = true;

  002af	c6 44 24 50 01	 mov	 BYTE PTR enable$[rsp], 1

; 963  :             }

  002b4	e9 e2 06 00 00	 jmp	 $LN57@tf_cmd
$LN56@tf_cmd:

; 964  :             else if (0
; 965  :                 || strcasecmp( argv[i], "OFF"   ) == 0
; 966  :                 || strcasecmp( argv[i], "CLOSE" ) == 0

  002b9	33 c0		 xor	 eax, eax
  002bb	85 c0		 test	 eax, eax
  002bd	75 44		 jne	 SHORT $LN61@tf_cmd
  002bf	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  002c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159949
  002cb	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002d3	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002dd	85 c0		 test	 eax, eax
  002df	74 22		 je	 SHORT $LN61@tf_cmd
  002e1	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  002e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159950
  002ed	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002f5	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002ff	85 c0		 test	 eax, eax
  00301	75 0a		 jne	 SHORT $LN59@tf_cmd
$LN61@tf_cmd:

; 967  :             )
; 968  :             {
; 969  :                 enable = false;

  00303	c6 44 24 50 00	 mov	 BYTE PTR enable$[rsp], 0

; 970  :             }

  00308	e9 8e 06 00 00	 jmp	 $LN60@tf_cmd
$LN59@tf_cmd:

; 971  :             else if (0
; 972  :                 || strcasecmp( argv[i], "NOSTOP" ) == 0
; 973  :                 || strcasecmp( argv[i], "CONT"   ) == 0

  0030d	33 c0		 xor	 eax, eax
  0030f	85 c0		 test	 eax, eax
  00311	75 44		 jne	 SHORT $LN64@tf_cmd
  00313	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  00318	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159954
  0031f	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00327	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0032b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00331	85 c0		 test	 eax, eax
  00333	74 22		 je	 SHORT $LN64@tf_cmd
  00335	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  0033a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159955
  00341	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00349	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0034d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00353	85 c0		 test	 eax, eax
  00355	75 0a		 jne	 SHORT $LN62@tf_cmd
$LN64@tf_cmd:

; 974  :             )
; 975  :             {
; 976  :                 nostop = true;

  00357	c6 44 24 51 01	 mov	 BYTE PTR nostop$[rsp], 1

; 977  :             }

  0035c	e9 3a 06 00 00	 jmp	 $LN63@tf_cmd
$LN62@tf_cmd:

; 978  :             else if (0
; 979  :                 || strcasecmp( argv[i], "STOP"   ) == 0
; 980  :                 || strcasecmp( argv[i], "NOCONT" ) == 0

  00361	33 c0		 xor	 eax, eax
  00363	85 c0		 test	 eax, eax
  00365	75 44		 jne	 SHORT $LN67@tf_cmd
  00367	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  0036c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159959
  00373	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0037b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0037f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00385	85 c0		 test	 eax, eax
  00387	74 22		 je	 SHORT $LN67@tf_cmd
  00389	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  0038e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159960
  00395	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0039d	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  003a7	85 c0		 test	 eax, eax
  003a9	75 0a		 jne	 SHORT $LN65@tf_cmd
$LN67@tf_cmd:

; 981  :             )
; 982  :             {
; 983  :                 nostop = false;

  003ab	c6 44 24 51 00	 mov	 BYTE PTR nostop$[rsp], 0

; 984  :             }

  003b0	e9 e6 05 00 00	 jmp	 $LN66@tf_cmd
$LN65@tf_cmd:

; 985  :             else if (strncasecmp( argv[i], "FILE=", 5 ) == 0)

  003b5	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  003ba	41 b8 05 00 00
	00		 mov	 r8d, 5
  003c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159963
  003c7	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003cf	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  003d9	85 c0		 test	 eax, eax
  003db	0f 85 55 02 00
	00		 jne	 $LN68@tf_cmd

; 986  :             {
; 987  :                 if (traceFILE)

  003e1	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  003e7	74 71		 je	 SHORT $LN70@tf_cmd
$LN13@tf_cmd:

; 988  :                     VERIFY( 0 == fclose( traceFILE ));

  003e9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  003ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
  003f4	85 c0		 test	 eax, eax
  003f6	74 5c		 je	 SHORT $LN71@tf_cmd
$LN16@tf_cmd:
  003f8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159966
  003ff	41 b8 dc 03 00
	00		 mov	 r8d, 988		; 000003dcH
  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159967
  0040c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159968
  00413	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00419	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0041f	85 c0		 test	 eax, eax
  00421	74 20		 je	 SHORT $LN72@tf_cmd
  00423	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159970
  0042a	41 b8 dc 03 00
	00		 mov	 r8d, 988		; 000003dcH
  00430	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159971
  00437	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159972
  0043e	e8 00 00 00 00	 call	 DebuggerTrace
$LN72@tf_cmd:
  00443	33 c0		 xor	 eax, eax
  00445	85 c0		 test	 eax, eax
  00447	75 af		 jne	 SHORT $LN16@tf_cmd
  00449	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0044f	85 c0		 test	 eax, eax
  00451	74 01		 je	 SHORT $LN73@tf_cmd
  00453	cc		 int	 3
$LN73@tf_cmd:
$LN71@tf_cmd:
  00454	33 c0		 xor	 eax, eax
  00456	85 c0		 test	 eax, eax
  00458	75 8f		 jne	 SHORT $LN13@tf_cmd
$LN70@tf_cmd:

; 989  : 
; 990  :                 STRLCPY( filename, argv[i]+5 );

  0045a	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  0045f	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00467	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0046b	48 83 c0 05	 add	 rax, 5
  0046f	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00475	48 8b d0	 mov	 rdx, rax
  00478	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00480	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 991  :                 traceFILE = NULL;

  00486	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR traceFILE$[rsp], 0

; 992  : 
; 993  :                 if (!filename[0])

  0048f	b8 01 00 00 00	 mov	 eax, 1
  00494	48 6b c0 00	 imul	 rax, rax, 0
  00498	0f be 84 04 10
	01 00 00	 movsx	 eax, BYTE PTR filename$[rsp+rax]
  004a0	85 c0		 test	 eax, eax
  004a2	0f 85 e2 00 00
	00		 jne	 $LN74@tf_cmd

; 994  :                 {
; 995  :                     // "Invalid %s= value: %s"
; 996  :                     WRMSG( HHC02380, "E", "FILE", "(null)" );

  004a8	b9 01 00 00 00	 mov	 ecx, 1
  004ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159975
  004ba	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159976
  004c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159977
  004d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159978
  004de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  004ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159979
  004f5	ba e4 03 00 00	 mov	 edx, 996		; 000003e4H
  004fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159980
  00501	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 997  :                     if (traceFILE)

  00507	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  0050d	74 71		 je	 SHORT $LN75@tf_cmd
$LN19@tf_cmd:

; 998  :                         VERIFY( 0 == fclose( traceFILE ));

  0050f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  00514	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
  0051a	85 c0		 test	 eax, eax
  0051c	74 5c		 je	 SHORT $LN76@tf_cmd
$LN22@tf_cmd:
  0051e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159983
  00525	41 b8 e6 03 00
	00		 mov	 r8d, 998		; 000003e6H
  0052b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159984
  00532	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159985
  00539	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0053f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00545	85 c0		 test	 eax, eax
  00547	74 20		 je	 SHORT $LN77@tf_cmd
  00549	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159987
  00550	41 b8 e6 03 00
	00		 mov	 r8d, 998		; 000003e6H
  00556	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159988
  0055d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159989
  00564	e8 00 00 00 00	 call	 DebuggerTrace
$LN77@tf_cmd:
  00569	33 c0		 xor	 eax, eax
  0056b	85 c0		 test	 eax, eax
  0056d	75 af		 jne	 SHORT $LN22@tf_cmd
  0056f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00575	85 c0		 test	 eax, eax
  00577	74 01		 je	 SHORT $LN78@tf_cmd
  00579	cc		 int	 3
$LN78@tf_cmd:
$LN76@tf_cmd:
  0057a	33 c0		 xor	 eax, eax
  0057c	85 c0		 test	 eax, eax
  0057e	75 8f		 jne	 SHORT $LN19@tf_cmd
$LN75@tf_cmd:

; 999  :                     return -1;

  00580	b8 ff ff ff ff	 mov	 eax, -1
  00585	e9 f7 0d 00 00	 jmp	 $LN1@tf_cmd
$LN74@tf_cmd:

; 1000 :                 }
; 1001 : 
; 1002 :                 if (!(traceFILE = fopen( filename, "wb" )))

  0058a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159992
  00591	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00599	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0059f	48 89 44 24 68	 mov	 QWORD PTR traceFILE$[rsp], rax
  005a4	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  005aa	0f 85 81 00 00
	00		 jne	 $LN79@tf_cmd

; 1003 :                 {
; 1004 :                     // "Trace file open error %s: \"%s\""
; 1005 :                     WRMSG( HHC02377, "E", strerror( errno ), filename );

  005b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  005b6	8b 08		 mov	 ecx, DWORD PTR [rax]
  005b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  005be	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv278[rsp], rax
  005c6	b9 01 00 00 00	 mov	 ecx, 1
  005cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005d1	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  005d9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005de	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv278[rsp]
  005e6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159993
  005f2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159994
  005fe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00603	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00608	41 b9 03 00 00
	00		 mov	 r9d, 3
  0060e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159995
  00615	ba ed 03 00 00	 mov	 edx, 1005		; 000003edH
  0061a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159996
  00621	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1006 :                     return -1;

  00627	b8 ff ff ff ff	 mov	 eax, -1
  0062c	e9 50 0d 00 00	 jmp	 $LN1@tf_cmd
$LN79@tf_cmd:

; 1007 :                 }
; 1008 :             }

  00631	e9 65 03 00 00	 jmp	 $LN69@tf_cmd
$LN68@tf_cmd:

; 1009 :             else if (strncasecmp( argv[i], "MAX=", 4 ) == 0)

  00636	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  0063b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00641	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159999
  00648	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00650	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00654	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0065a	85 c0		 test	 eax, eax
  0065c	0f 85 45 02 00
	00		 jne	 $LN80@tf_cmd

; 1010 :             {
; 1011 :                 char* endptr;
; 1012 :                 U64 factor = ONE_GIGABYTE;

  00662	48 c7 84 24 98
	00 00 00 00 00
	00 40		 mov	 QWORD PTR factor$3[rsp], 1073741824 ; 40000000H

; 1013 :                 errno = 0;

  0066e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00674	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1014 :                 maxsize = strtoul( argv[i]+4, &endptr, 10 );

  0067a	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  0067f	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00687	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0068b	48 83 c0 04	 add	 rax, 4
  0068f	41 b8 0a 00 00
	00		 mov	 r8d, 10
  00695	48 8d 54 24 78	 lea	 rdx, QWORD PTR endptr$2[rsp]
  0069a	48 8b c8	 mov	 rcx, rax
  0069d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtoul
  006a3	8b c0		 mov	 eax, eax
  006a5	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax

; 1015 : 
; 1016 :                 if (0
; 1017 :                     || errno
; 1018 :                     || (1
; 1019 :                         && endptr[0] != 'M'
; 1020 :                         && endptr[0] != 'm'
; 1021 :                         && endptr[0] != 'G'
; 1022 :                         && endptr[0] != 'g'
; 1023 :                        )
; 1024 :                     || endptr[1] // (not NULL terminator)
; 1025 :                     || maxsize < 1
; 1026 :                     || maxsize > 999

  006aa	33 c0		 xor	 eax, eax
  006ac	85 c0		 test	 eax, eax
  006ae	0f 85 9f 00 00
	00		 jne	 $LN83@tf_cmd
  006b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  006ba	83 38 00	 cmp	 DWORD PTR [rax], 0
  006bd	0f 85 90 00 00
	00		 jne	 $LN83@tf_cmd
  006c3	33 c0		 xor	 eax, eax
  006c5	83 f8 01	 cmp	 eax, 1
  006c8	74 5c		 je	 SHORT $LN84@tf_cmd
  006ca	b8 01 00 00 00	 mov	 eax, 1
  006cf	48 6b c0 00	 imul	 rax, rax, 0
  006d3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR endptr$2[rsp]
  006d8	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  006dc	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  006df	74 45		 je	 SHORT $LN84@tf_cmd
  006e1	b8 01 00 00 00	 mov	 eax, 1
  006e6	48 6b c0 00	 imul	 rax, rax, 0
  006ea	48 8b 4c 24 78	 mov	 rcx, QWORD PTR endptr$2[rsp]
  006ef	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  006f3	83 f8 6d	 cmp	 eax, 109		; 0000006dH
  006f6	74 2e		 je	 SHORT $LN84@tf_cmd
  006f8	b8 01 00 00 00	 mov	 eax, 1
  006fd	48 6b c0 00	 imul	 rax, rax, 0
  00701	48 8b 4c 24 78	 mov	 rcx, QWORD PTR endptr$2[rsp]
  00706	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0070a	83 f8 47	 cmp	 eax, 71			; 00000047H
  0070d	74 17		 je	 SHORT $LN84@tf_cmd
  0070f	b8 01 00 00 00	 mov	 eax, 1
  00714	48 6b c0 00	 imul	 rax, rax, 0
  00718	48 8b 4c 24 78	 mov	 rcx, QWORD PTR endptr$2[rsp]
  0071d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00721	83 f8 67	 cmp	 eax, 103		; 00000067H
  00724	75 2d		 jne	 SHORT $LN83@tf_cmd
$LN84@tf_cmd:
  00726	b8 01 00 00 00	 mov	 eax, 1
  0072b	48 6b c0 01	 imul	 rax, rax, 1
  0072f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR endptr$2[rsp]
  00734	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00738	85 c0		 test	 eax, eax
  0073a	75 17		 jne	 SHORT $LN83@tf_cmd
  0073c	48 83 7c 24 60
	01		 cmp	 QWORD PTR maxsize$[rsp], 1
  00742	72 0f		 jb	 SHORT $LN83@tf_cmd
  00744	48 81 7c 24 60
	e7 03 00 00	 cmp	 QWORD PTR maxsize$[rsp], 999 ; 000003e7H
  0074d	0f 86 f4 00 00
	00		 jbe	 $LN82@tf_cmd
$LN83@tf_cmd:

; 1027 :                 )
; 1028 :                 {
; 1029 :                     // "Invalid MAX= value: %s"
; 1030 :                     WRMSG( HHC02378, "E", argv[i]+4 );

  00753	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$1[rsp]
  00758	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00760	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00764	48 83 c0 04	 add	 rax, 4
  00768	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv370[rsp], rax
  00770	b9 01 00 00 00	 mov	 ecx, 1
  00775	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0077b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv370[rsp]
  00783	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00788	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160003
  0078f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00794	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160004
  0079b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007a5	41 b9 03 00 00
	00		 mov	 r9d, 3
  007ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160005
  007b2	ba 06 04 00 00	 mov	 edx, 1030		; 00000406H
  007b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160006
  007be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1031 :                     if (traceFILE)

  007c4	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  007ca	74 71		 je	 SHORT $LN85@tf_cmd
$LN25@tf_cmd:

; 1032 :                         VERIFY( 0 == fclose( traceFILE ));

  007cc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  007d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
  007d7	85 c0		 test	 eax, eax
  007d9	74 5c		 je	 SHORT $LN86@tf_cmd
$LN28@tf_cmd:
  007db	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160009
  007e2	41 b8 08 04 00
	00		 mov	 r8d, 1032		; 00000408H
  007e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160010
  007ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160011
  007f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  007fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00802	85 c0		 test	 eax, eax
  00804	74 20		 je	 SHORT $LN87@tf_cmd
  00806	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160013
  0080d	41 b8 08 04 00
	00		 mov	 r8d, 1032		; 00000408H
  00813	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160014
  0081a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160015
  00821	e8 00 00 00 00	 call	 DebuggerTrace
$LN87@tf_cmd:
  00826	33 c0		 xor	 eax, eax
  00828	85 c0		 test	 eax, eax
  0082a	75 af		 jne	 SHORT $LN28@tf_cmd
  0082c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00832	85 c0		 test	 eax, eax
  00834	74 01		 je	 SHORT $LN88@tf_cmd
  00836	cc		 int	 3
$LN88@tf_cmd:
$LN86@tf_cmd:
  00837	33 c0		 xor	 eax, eax
  00839	85 c0		 test	 eax, eax
  0083b	75 8f		 jne	 SHORT $LN25@tf_cmd
$LN85@tf_cmd:

; 1033 :                     return -1;

  0083d	b8 ff ff ff ff	 mov	 eax, -1
  00842	e9 3a 0b 00 00	 jmp	 $LN1@tf_cmd
$LN82@tf_cmd:

; 1034 :                 }
; 1035 : 
; 1036 :                 if (endptr[0] == 'M' ||

  00847	b8 01 00 00 00	 mov	 eax, 1
  0084c	48 6b c0 00	 imul	 rax, rax, 0
  00850	48 8b 4c 24 78	 mov	 rcx, QWORD PTR endptr$2[rsp]
  00855	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00859	83 f8 4d	 cmp	 eax, 77			; 0000004dH
  0085c	74 17		 je	 SHORT $LN91@tf_cmd
  0085e	b8 01 00 00 00	 mov	 eax, 1
  00863	48 6b c0 00	 imul	 rax, rax, 0
  00867	48 8b 4c 24 78	 mov	 rcx, QWORD PTR endptr$2[rsp]
  0086c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00870	83 f8 6d	 cmp	 eax, 109		; 0000006dH
  00873	75 0e		 jne	 SHORT $LN89@tf_cmd
$LN91@tf_cmd:

; 1037 :                     endptr[0] == 'm') factor = ONE_MEGABYTE;

  00875	48 c7 84 24 98
	00 00 00 00 00
	10 00		 mov	 QWORD PTR factor$3[rsp], 1048576 ; 00100000H
  00881	eb 0c		 jmp	 SHORT $LN90@tf_cmd
$LN89@tf_cmd:

; 1038 :                 else                  factor = ONE_GIGABYTE;

  00883	48 c7 84 24 98
	00 00 00 00 00
	00 40		 mov	 QWORD PTR factor$3[rsp], 1073741824 ; 40000000H
$LN90@tf_cmd:

; 1039 : 
; 1040 :                 maxsize *= factor;

  0088f	48 8b 44 24 60	 mov	 rax, QWORD PTR maxsize$[rsp]
  00894	48 0f af 84 24
	98 00 00 00	 imul	 rax, QWORD PTR factor$3[rsp]
  0089d	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax

; 1041 :             }

  008a2	e9 f4 00 00 00	 jmp	 $LN81@tf_cmd
$LN80@tf_cmd:

; 1042 :             else
; 1043 :             {
; 1044 :                 // "Invalid command usage. Type 'help %s' for assistance."
; 1045 :                 WRMSG( HHC02299, "E", argv[0] );

  008a7	b8 08 00 00 00	 mov	 eax, 8
  008ac	48 6b c0 00	 imul	 rax, rax, 0
  008b0	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv408[rsp], rax
  008b8	b9 01 00 00 00	 mov	 ecx, 1
  008bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008c3	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008cb	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv408[rsp]
  008d3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  008d7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160020
  008e3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160021
  008ef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008f9	41 b9 03 00 00
	00		 mov	 r9d, 3
  008ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160022
  00906	ba 15 04 00 00	 mov	 edx, 1045		; 00000415H
  0090b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160023
  00912	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1046 :                 if (traceFILE)

  00918	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  0091e	74 71		 je	 SHORT $LN92@tf_cmd
$LN31@tf_cmd:

; 1047 :                     VERIFY( 0 == fclose( traceFILE ));

  00920	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  00925	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
  0092b	85 c0		 test	 eax, eax
  0092d	74 5c		 je	 SHORT $LN93@tf_cmd
$LN34@tf_cmd:
  0092f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160026
  00936	41 b8 17 04 00
	00		 mov	 r8d, 1047		; 00000417H
  0093c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160027
  00943	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160028
  0094a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00950	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00956	85 c0		 test	 eax, eax
  00958	74 20		 je	 SHORT $LN94@tf_cmd
  0095a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160030
  00961	41 b8 17 04 00
	00		 mov	 r8d, 1047		; 00000417H
  00967	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160031
  0096e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160032
  00975	e8 00 00 00 00	 call	 DebuggerTrace
$LN94@tf_cmd:
  0097a	33 c0		 xor	 eax, eax
  0097c	85 c0		 test	 eax, eax
  0097e	75 af		 jne	 SHORT $LN34@tf_cmd
  00980	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00986	85 c0		 test	 eax, eax
  00988	74 01		 je	 SHORT $LN95@tf_cmd
  0098a	cc		 int	 3
$LN95@tf_cmd:
$LN93@tf_cmd:
  0098b	33 c0		 xor	 eax, eax
  0098d	85 c0		 test	 eax, eax
  0098f	75 8f		 jne	 SHORT $LN31@tf_cmd
$LN92@tf_cmd:

; 1048 :                 return -1;

  00991	b8 ff ff ff ff	 mov	 eax, -1
  00996	e9 e6 09 00 00	 jmp	 $LN1@tf_cmd
$LN81@tf_cmd:
$LN69@tf_cmd:
$LN66@tf_cmd:
$LN63@tf_cmd:
$LN60@tf_cmd:
$LN57@tf_cmd:

; 1049 :             }
; 1050 :         }

  0099b	e9 aa f8 ff ff	 jmp	 $LN8@tf_cmd
$LN9@tf_cmd:

; 1051 :         // end for()
; 1052 : 
; 1053 :         if (enable)

  009a0	0f b6 44 24 50	 movzx	 eax, BYTE PTR enable$[rsp]
  009a5	85 c0		 test	 eax, eax
  009a7	0f 84 9c 01 00
	00		 je	 $LN96@tf_cmd

; 1054 :         {
; 1055 :             // File is required if they want to enable it
; 1056 :             if (!sysblk.traceFILE && !sysblk.tracefilename && !traceFILE)

  009ad	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009b4	48 83 b8 20 14
	00 00 00	 cmp	 QWORD PTR [rax+5152], 0
  009bc	0f 85 82 00 00
	00		 jne	 $LN98@tf_cmd
  009c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009c9	48 83 b8 18 14
	00 00 00	 cmp	 QWORD PTR [rax+5144], 0
  009d1	75 71		 jne	 SHORT $LN98@tf_cmd
  009d3	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  009d9	75 69		 jne	 SHORT $LN98@tf_cmd

; 1057 :             {
; 1058 :                 // "Invalid %s= value: %s"
; 1059 :                 WRMSG( HHC02380, "E", "FILE", "(null)" );

  009db	b9 01 00 00 00	 mov	 ecx, 1
  009e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160037
  009ed	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160038
  009f9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160039
  00a05	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160040
  00a11	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a16	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a1b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a21	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160041
  00a28	ba 23 04 00 00	 mov	 edx, 1059		; 00000423H
  00a2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160042
  00a34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1060 :                 return -1;

  00a3a	b8 ff ff ff ff	 mov	 eax, -1
  00a3f	e9 3d 09 00 00	 jmp	 $LN1@tf_cmd
$LN98@tf_cmd:

; 1061 :             }
; 1062 : 
; 1063 :             // A non-zero maximum filesize is also required to enable
; 1064 :             if (!sysblk.maxtracesize && !maxsize)

  00a44	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a4b	48 83 b8 30 14
	00 00 00	 cmp	 QWORD PTR [rax+5168], 0
  00a53	0f 85 ee 00 00
	00		 jne	 $LN99@tf_cmd
  00a59	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxsize$[rsp], 0
  00a5f	0f 85 e2 00 00
	00		 jne	 $LN99@tf_cmd

; 1065 :             {
; 1066 :                 // "Invalid %s= value: %s"
; 1067 :                 WRMSG( HHC02380, "E", "MAX", "0" );

  00a65	b9 01 00 00 00	 mov	 ecx, 1
  00a6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160044
  00a77	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160045
  00a83	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160046
  00a8f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160047
  00a9b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aa0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa5	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160048
  00ab2	ba 2b 04 00 00	 mov	 edx, 1067		; 0000042bH
  00ab7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160049
  00abe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1068 :                 if (traceFILE)

  00ac4	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  00aca	74 71		 je	 SHORT $LN100@tf_cmd
$LN37@tf_cmd:

; 1069 :                     VERIFY( 0 == fclose( traceFILE ));

  00acc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  00ad1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
  00ad7	85 c0		 test	 eax, eax
  00ad9	74 5c		 je	 SHORT $LN101@tf_cmd
$LN40@tf_cmd:
  00adb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160052
  00ae2	41 b8 2d 04 00
	00		 mov	 r8d, 1069		; 0000042dH
  00ae8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160053
  00aef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160054
  00af6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00afc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00b02	85 c0		 test	 eax, eax
  00b04	74 20		 je	 SHORT $LN102@tf_cmd
  00b06	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160056
  00b0d	41 b8 2d 04 00
	00		 mov	 r8d, 1069		; 0000042dH
  00b13	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160057
  00b1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160058
  00b21	e8 00 00 00 00	 call	 DebuggerTrace
$LN102@tf_cmd:
  00b26	33 c0		 xor	 eax, eax
  00b28	85 c0		 test	 eax, eax
  00b2a	75 af		 jne	 SHORT $LN40@tf_cmd
  00b2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00b32	85 c0		 test	 eax, eax
  00b34	74 01		 je	 SHORT $LN103@tf_cmd
  00b36	cc		 int	 3
$LN103@tf_cmd:
$LN101@tf_cmd:
  00b37	33 c0		 xor	 eax, eax
  00b39	85 c0		 test	 eax, eax
  00b3b	75 8f		 jne	 SHORT $LN37@tf_cmd
$LN100@tf_cmd:

; 1070 :                 return -1;

  00b3d	b8 ff ff ff ff	 mov	 eax, -1
  00b42	e9 3a 08 00 00	 jmp	 $LN1@tf_cmd
$LN99@tf_cmd:

; 1071 :             }
; 1072 :         }

  00b47	eb 2c		 jmp	 SHORT $LN97@tf_cmd
$LN96@tf_cmd:

; 1073 :         else
; 1074 :         {
; 1075 :             // They don't want to enable it (yet),
; 1076 :             // or they want to disable it.
; 1077 : 
; 1078 :             if (!maxsize)

  00b49	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxsize$[rsp], 0
  00b4f	75 13		 jne	 SHORT $LN104@tf_cmd

; 1079 :                 maxsize = sysblk.maxtracesize;

  00b51	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b58	48 8b 80 30 14
	00 00		 mov	 rax, QWORD PTR [rax+5168]
  00b5f	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax
$LN104@tf_cmd:

; 1080 :             if (!maxsize)

  00b64	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxsize$[rsp], 0
  00b6a	75 09		 jne	 SHORT $LN105@tf_cmd

; 1081 :                 maxsize = ONE_MEGABYTE;

  00b6c	48 c7 44 24 60
	00 00 10 00	 mov	 QWORD PTR maxsize$[rsp], 1048576 ; 00100000H
$LN105@tf_cmd:
$LN97@tf_cmd:

; 1082 :         }
; 1083 : 
; 1084 :         // Activate/Deactivate (enable/disable) tracefile tracing...
; 1085 :         OBTAIN_TRACEFILE_LOCK();

  00b75	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b7c	48 05 10 14 00
	00		 add	 rax, 5136		; 00001410H
  00b82	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160062
  00b89	48 8b c8	 mov	 rcx, rax
  00b8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1086 :         {
; 1087 :             if (enable)

  00b92	0f b6 44 24 50	 movzx	 eax, BYTE PTR enable$[rsp]
  00b97	85 c0		 test	 eax, eax
  00b99	0f 84 c3 02 00
	00		 je	 $LN106@tf_cmd

; 1088 :             {
; 1089 :                 void* tracebuff;
; 1090 : 
; 1091 :                 // Allocate a fresh buffer
; 1092 : 
; 1093 :                 if (!(tracebuff = calloc( 1, tf_MAX_RECSIZE() )))

  00b9f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_MAX_RECSIZE
  00ba5	48 8b d0	 mov	 rdx, rax
  00ba8	b9 01 00 00 00	 mov	 ecx, 1
  00bad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00bb3	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tracebuff$4[rsp], rax
  00bbb	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR tracebuff$4[rsp], 0
  00bc4	0f 85 04 01 00
	00		 jne	 $LN108@tf_cmd

; 1094 :                 {
; 1095 :                     RELEASE_TRACEFILE_LOCK();

  00bca	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00bd1	48 05 10 14 00
	00		 add	 rax, 5136		; 00001410H
  00bd7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160066
  00bde	48 8b c8	 mov	 rcx, rax
  00be1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1096 : 
; 1097 :                     // "Out of memory"
; 1098 :                     WRMSG( HHC00152, "E" );

  00be7	b9 01 00 00 00	 mov	 ecx, 1
  00bec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160067
  00bf9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bfe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160068
  00c05	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c0a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c0f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c15	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160069
  00c1c	ba 4a 04 00 00	 mov	 edx, 1098		; 0000044aH
  00c21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160070
  00c28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1099 :                     RELEASE_TRACEFILE_LOCK();

  00c2e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00c35	48 05 10 14 00
	00		 add	 rax, 5136		; 00001410H
  00c3b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160071
  00c42	48 8b c8	 mov	 rcx, rax
  00c45	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1100 : 
; 1101 :                     if (traceFILE)

  00c4b	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  00c51	74 71		 je	 SHORT $LN109@tf_cmd
$LN43@tf_cmd:

; 1102 :                         VERIFY( 0 == fclose( traceFILE ));

  00c53	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  00c58	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
  00c5e	85 c0		 test	 eax, eax
  00c60	74 5c		 je	 SHORT $LN110@tf_cmd
$LN46@tf_cmd:
  00c62	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160074
  00c69	41 b8 4e 04 00
	00		 mov	 r8d, 1102		; 0000044eH
  00c6f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160075
  00c76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160076
  00c7d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00c83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00c89	85 c0		 test	 eax, eax
  00c8b	74 20		 je	 SHORT $LN111@tf_cmd
  00c8d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160078
  00c94	41 b8 4e 04 00
	00		 mov	 r8d, 1102		; 0000044eH
  00c9a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160079
  00ca1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160080
  00ca8	e8 00 00 00 00	 call	 DebuggerTrace
$LN111@tf_cmd:
  00cad	33 c0		 xor	 eax, eax
  00caf	85 c0		 test	 eax, eax
  00cb1	75 af		 jne	 SHORT $LN46@tf_cmd
  00cb3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00cb9	85 c0		 test	 eax, eax
  00cbb	74 01		 je	 SHORT $LN112@tf_cmd
  00cbd	cc		 int	 3
$LN112@tf_cmd:
$LN110@tf_cmd:
  00cbe	33 c0		 xor	 eax, eax
  00cc0	85 c0		 test	 eax, eax
  00cc2	75 8f		 jne	 SHORT $LN43@tf_cmd
$LN109@tf_cmd:

; 1103 : 
; 1104 :                     return -1;

  00cc4	b8 ff ff ff ff	 mov	 eax, -1
  00cc9	e9 b3 06 00 00	 jmp	 $LN1@tf_cmd
$LN108@tf_cmd:

; 1105 :                 }
; 1106 : 
; 1107 :                 free( sysblk.tracefilebuff );

  00cce	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00cd5	48 8b 88 38 14
	00 00		 mov	 rcx, QWORD PTR [rax+5176]
  00cdc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1108 :                 sysblk.tracefilebuff = tracebuff;

  00ce2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00ce9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tracebuff$4[rsp]
  00cf1	48 89 88 38 14
	00 00		 mov	 QWORD PTR [rax+5176], rcx

; 1109 : 
; 1110 :                 // Switch over to using the new file if specified
; 1111 :                 // (or reuse existing one if new one wasn't given)
; 1112 : 
; 1113 :                 if (sysblk.traceFILE)

  00cf8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00cff	48 83 b8 20 14
	00 00 00	 cmp	 QWORD PTR [rax+5152], 0
  00d07	74 06		 je	 SHORT $LN113@tf_cmd

; 1114 :                     tf_close_locked();

  00d09	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_close_locked
$LN113@tf_cmd:

; 1115 : 
; 1116 :                 if (traceFILE)

  00d0f	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  00d15	74 48		 je	 SHORT $LN114@tf_cmd

; 1117 :                 {
; 1118 :                     // switch over to using their new tracefile
; 1119 :                     sysblk.traceFILE = traceFILE;

  00d17	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d1e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  00d23	48 89 88 20 14
	00 00		 mov	 QWORD PTR [rax+5152], rcx

; 1120 :                     free( sysblk.tracefilename );

  00d2a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d31	48 8b 88 18 14
	00 00		 mov	 rcx, QWORD PTR [rax+5144]
  00d38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1121 :                     sysblk.tracefilename = strdup( filename );

  00d3e	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00d46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00d4c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00d53	48 89 81 18 14
	00 00		 mov	 QWORD PTR [rcx+5144], rax

; 1122 :                 }

  00d5a	e9 ec 00 00 00	 jmp	 $LN115@tf_cmd
$LN114@tf_cmd:

; 1123 :                 else // (continue use existing tracefile)
; 1124 :                 {
; 1125 :                     if (!(sysblk.traceFILE = fopen( sysblk.tracefilename, "wb" )))

  00d5f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160086
  00d66	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d6d	48 8b 88 18 14
	00 00		 mov	 rcx, QWORD PTR [rax+5144]
  00d74	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00d7a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv582[rsp], rax
  00d82	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d89	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv582[rsp]
  00d91	48 89 88 20 14
	00 00		 mov	 QWORD PTR [rax+5152], rcx
  00d98	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR tv582[rsp], 0
  00da1	0f 85 a4 00 00
	00		 jne	 $LN116@tf_cmd

; 1126 :                     {
; 1127 :                         // "Trace file open error %s: \"%s\""
; 1128 :                         WRMSG( HHC02377, "E", strerror( errno ), sysblk.tracefilename );

  00da7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00dad	8b 08		 mov	 ecx, DWORD PTR [rax]
  00daf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00db5	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv589[rsp], rax
  00dbd	b9 01 00 00 00	 mov	 ecx, 1
  00dc2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00dc8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00dcf	48 8b 89 18 14
	00 00		 mov	 rcx, QWORD PTR [rcx+5144]
  00dd6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00ddb	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv589[rsp]
  00de3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00de8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160087
  00def	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00df4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160088
  00dfb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e00	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e05	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e0b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160089
  00e12	ba 68 04 00 00	 mov	 edx, 1128		; 00000468H
  00e17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160090
  00e1e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1129 :                         RELEASE_TRACEFILE_LOCK();

  00e24	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e2b	48 05 10 14 00
	00		 add	 rax, 5136		; 00001410H
  00e31	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160091
  00e38	48 8b c8	 mov	 rcx, rax
  00e3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1130 :                         return -1;

  00e41	b8 ff ff ff ff	 mov	 eax, -1
  00e46	e9 36 05 00 00	 jmp	 $LN1@tf_cmd
$LN116@tf_cmd:
$LN115@tf_cmd:

; 1131 :                     }
; 1132 :                 }
; 1133 : 
; 1134 :                 sysblk.curtracesize = 0;

  00e4b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e52	48 c7 80 28 14
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+5160], 0

; 1135 :             }

  00e5d	e9 0e 01 00 00	 jmp	 $LN107@tf_cmd
$LN106@tf_cmd:

; 1136 :             else // (Deactivate/disable)
; 1137 :             {
; 1138 :                 // Close trace file and free buffer,
; 1139 :                 // but keep existing filename unless
; 1140 :                 // they specified a new one.
; 1141 : 
; 1142 :                 if (traceFILE)

  00e62	48 83 7c 24 68
	00		 cmp	 QWORD PTR traceFILE$[rsp], 0
  00e68	0f 84 a1 00 00
	00		 je	 $LN117@tf_cmd
$LN49@tf_cmd:

; 1143 :                 {
; 1144 :                     // (switch to new file)
; 1145 :                     VERIFY( 0 == fclose( traceFILE ));

  00e6e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR traceFILE$[rsp]
  00e73	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
  00e79	85 c0		 test	 eax, eax
  00e7b	74 5c		 je	 SHORT $LN118@tf_cmd
$LN52@tf_cmd:
  00e7d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160094
  00e84	41 b8 79 04 00
	00		 mov	 r8d, 1145		; 00000479H
  00e8a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160095
  00e91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160096
  00e98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00e9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00ea4	85 c0		 test	 eax, eax
  00ea6	74 20		 je	 SHORT $LN119@tf_cmd
  00ea8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160098
  00eaf	41 b8 79 04 00
	00		 mov	 r8d, 1145		; 00000479H
  00eb5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160099
  00ebc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160100
  00ec3	e8 00 00 00 00	 call	 DebuggerTrace
$LN119@tf_cmd:
  00ec8	33 c0		 xor	 eax, eax
  00eca	85 c0		 test	 eax, eax
  00ecc	75 af		 jne	 SHORT $LN52@tf_cmd
  00ece	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00ed4	85 c0		 test	 eax, eax
  00ed6	74 01		 je	 SHORT $LN120@tf_cmd
  00ed8	cc		 int	 3
$LN120@tf_cmd:
$LN118@tf_cmd:
  00ed9	33 c0		 xor	 eax, eax
  00edb	85 c0		 test	 eax, eax
  00edd	75 8f		 jne	 SHORT $LN49@tf_cmd

; 1146 :                     free( sysblk.tracefilename );

  00edf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00ee6	48 8b 88 18 14
	00 00		 mov	 rcx, QWORD PTR [rax+5144]
  00eed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1147 :                     sysblk.tracefilename = strdup( filename );

  00ef3	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00efb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00f01	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00f08	48 89 81 18 14
	00 00		 mov	 QWORD PTR [rcx+5144], rax
$LN117@tf_cmd:

; 1148 :                 }
; 1149 : 
; 1150 :                 // (close existing file)
; 1151 :                 if (sysblk.traceFILE)

  00f0f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f16	48 83 b8 20 14
	00 00 00	 cmp	 QWORD PTR [rax+5152], 0
  00f1e	74 06		 je	 SHORT $LN121@tf_cmd

; 1152 :                     tf_close_locked();

  00f20	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_close_locked
$LN121@tf_cmd:

; 1153 : 
; 1154 :                 free( sysblk.tracefilebuff );

  00f26	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f2d	48 8b 88 38 14
	00 00		 mov	 rcx, QWORD PTR [rax+5176]
  00f34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1155 :                 sysblk.tracefilebuff = NULL;

  00f3a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f41	48 c7 80 38 14
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+5176], 0

; 1156 :                 sysblk.traceFILE     = NULL;

  00f4c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f53	48 c7 80 20 14
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+5152], 0

; 1157 :                 sysblk.curtracesize  = 0;

  00f5e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f65	48 c7 80 28 14
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+5160], 0
$LN107@tf_cmd:

; 1158 :             }
; 1159 : 
; 1160 :             sysblk.tfnostop = nostop;

  00f70	0f b6 44 24 51	 movzx	 eax, BYTE PTR nostop$[rsp]
  00f75	83 e0 01	 and	 eax, 1
  00f78	c1 e0 09	 shl	 eax, 9
  00f7b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00f82	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00f88	0f ba f1 09	 btr	 ecx, 9
  00f8c	0b c8		 or	 ecx, eax
  00f8e	8b c1		 mov	 eax, ecx
  00f90	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00f97	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 1161 : 
; 1162 :             if (maxsize)

  00f9d	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxsize$[rsp], 0
  00fa3	74 15		 je	 SHORT $LN122@tf_cmd

; 1163 :                 sysblk.maxtracesize = maxsize;

  00fa5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00fac	48 8b 4c 24 60	 mov	 rcx, QWORD PTR maxsize$[rsp]
  00fb1	48 89 88 30 14
	00 00		 mov	 QWORD PTR [rax+5168], rcx
  00fb8	eb 13		 jmp	 SHORT $LN123@tf_cmd
$LN122@tf_cmd:

; 1164 :             else
; 1165 :                 maxsize = sysblk.maxtracesize;

  00fba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00fc1	48 8b 80 30 14
	00 00		 mov	 rax, QWORD PTR [rax+5168]
  00fc8	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax
$LN123@tf_cmd:

; 1166 :         }
; 1167 :         RELEASE_TRACEFILE_LOCK();

  00fcd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00fd4	48 05 10 14 00
	00		 add	 rax, 5136		; 00001410H
  00fda	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160105
  00fe1	48 8b c8	 mov	 rcx, rax
  00fe4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN55@tf_cmd:

; 1168 :     }
; 1169 :     // end if (argc > 1)
; 1170 : 
; 1171 :     // Display current values...
; 1172 : 
; 1173 :     if ((maxsize = sysblk.maxtracesize) >= ONE_GIGABYTE)

  00fea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00ff1	48 8b 80 30 14
	00 00		 mov	 rax, QWORD PTR [rax+5168]
  00ff8	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax
  00ffd	48 81 7c 24 60
	00 00 00 40	 cmp	 QWORD PTR maxsize$[rsp], 1073741824 ; 40000000H
  01006	72 61		 jb	 SHORT $LN124@tf_cmd

; 1174 :     {
; 1175 :         mg = 'G';

  01008	c6 44 24 58 47	 mov	 BYTE PTR mg$[rsp], 71	; 00000047H

; 1176 :         maxsize = ROUND_UP( maxsize, ONE_GIGABYTE );

  0100d	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxsize$[rsp], 0
  01013	74 26		 je	 SHORT $LN142@tf_cmd
  01015	48 8b 44 24 60	 mov	 rax, QWORD PTR maxsize$[rsp]
  0101a	48 05 ff ff ff
	3f		 add	 rax, 1073741823		; 3fffffffH
  01020	33 d2		 xor	 edx, edx
  01022	b9 00 00 00 40	 mov	 ecx, 1073741824		; 40000000H
  01027	48 f7 f1	 div	 rcx
  0102a	48 69 c0 00 00
	00 40		 imul	 rax, rax, 1073741824	; 40000000H
  01031	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv687[rsp], rax
  01039	eb 0c		 jmp	 SHORT $LN143@tf_cmd
$LN142@tf_cmd:
  0103b	48 c7 84 24 b0
	00 00 00 00 00
	00 40		 mov	 QWORD PTR tv687[rsp], 1073741824 ; 40000000H
$LN143@tf_cmd:
  01047	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv687[rsp]
  0104f	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax

; 1177 :         mgs = (int) (maxsize / ONE_GIGABYTE);

  01054	33 d2		 xor	 edx, edx
  01056	48 8b 44 24 60	 mov	 rax, QWORD PTR maxsize$[rsp]
  0105b	b9 00 00 00 40	 mov	 ecx, 1073741824		; 40000000H
  01060	48 f7 f1	 div	 rcx
  01063	89 44 24 70	 mov	 DWORD PTR mgs$[rsp], eax

; 1178 :     }

  01067	eb 5f		 jmp	 SHORT $LN125@tf_cmd
$LN124@tf_cmd:

; 1179 :     else
; 1180 :     {
; 1181 :         mg = 'M';

  01069	c6 44 24 58 4d	 mov	 BYTE PTR mg$[rsp], 77	; 0000004dH

; 1182 :         maxsize = ROUND_UP( maxsize, ONE_MEGABYTE );

  0106e	48 83 7c 24 60
	00		 cmp	 QWORD PTR maxsize$[rsp], 0
  01074	74 26		 je	 SHORT $LN144@tf_cmd
  01076	48 8b 44 24 60	 mov	 rax, QWORD PTR maxsize$[rsp]
  0107b	48 05 ff ff 0f
	00		 add	 rax, 1048575		; 000fffffH
  01081	33 d2		 xor	 edx, edx
  01083	b9 00 00 10 00	 mov	 ecx, 1048576		; 00100000H
  01088	48 f7 f1	 div	 rcx
  0108b	48 69 c0 00 00
	10 00		 imul	 rax, rax, 1048576	; 00100000H
  01092	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv694[rsp], rax
  0109a	eb 0c		 jmp	 SHORT $LN145@tf_cmd
$LN144@tf_cmd:
  0109c	48 c7 84 24 b8
	00 00 00 00 00
	10 00		 mov	 QWORD PTR tv694[rsp], 1048576 ; 00100000H
$LN145@tf_cmd:
  010a8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv694[rsp]
  010b0	48 89 44 24 60	 mov	 QWORD PTR maxsize$[rsp], rax

; 1183 :         mgs = (int) (maxsize / ONE_MEGABYTE);

  010b5	33 d2		 xor	 edx, edx
  010b7	48 8b 44 24 60	 mov	 rax, QWORD PTR maxsize$[rsp]
  010bc	b9 00 00 10 00	 mov	 ecx, 1048576		; 00100000H
  010c1	48 f7 f1	 div	 rcx
  010c4	89 44 24 70	 mov	 DWORD PTR mgs$[rsp], eax
$LN125@tf_cmd:

; 1184 :     }
; 1185 : 
; 1186 :     if (sysblk.tracefilename)

  010c8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  010cf	48 83 b8 18 14
	00 00 00	 cmp	 QWORD PTR [rax+5144], 0
  010d7	74 59		 je	 SHORT $LN126@tf_cmd

; 1187 :     {
; 1188 :         STRLCPY( filename, sysblk.tracefilename );

  010d9	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  010df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  010e6	48 8b 90 18 14
	00 00		 mov	 rdx, QWORD PTR [rax+5144]
  010ed	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  010f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1189 :         if (strchr( filename, ' ' )) quote = "\"";

  010fb	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  01100	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  01108	e8 00 00 00 00	 call	 strchr
  0110d	48 85 c0	 test	 rax, rax
  01110	74 11		 je	 SHORT $LN127@tf_cmd
  01112	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160111
  01119	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR quote$[rsp], rax
  01121	eb 0f		 jmp	 SHORT $LN128@tf_cmd
$LN127@tf_cmd:

; 1190 :         else                         quote = "";

  01123	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160112
  0112a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR quote$[rsp], rax
$LN128@tf_cmd:
$LN126@tf_cmd:

; 1191 :     }
; 1192 : 
; 1193 :     MSGBUF( buf, "%s MAX=%d%c %sSTOP %sFILE=%s%s",

  01132	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01139	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0113f	c1 e8 09	 shr	 eax, 9
  01142	83 e0 01	 and	 eax, 1
  01145	85 c0		 test	 eax, eax
  01147	74 11		 je	 SHORT $LN146@tf_cmd
  01149	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160113
  01150	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv715[rsp], rax
  01158	eb 0f		 jmp	 SHORT $LN147@tf_cmd
$LN146@tf_cmd:
  0115a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160114
  01161	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv715[rsp], rax
$LN147@tf_cmd:
  01169	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01170	48 83 b8 20 14
	00 00 00	 cmp	 QWORD PTR [rax+5152], 0
  01178	74 11		 je	 SHORT $LN148@tf_cmd
  0117a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160115
  01181	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv722[rsp], rax
  01189	eb 0f		 jmp	 SHORT $LN149@tf_cmd
$LN148@tf_cmd:
  0118b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160116
  01192	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv722[rsp], rax
$LN149@tf_cmd:
  0119a	0f be 44 24 58	 movsx	 eax, BYTE PTR mg$[rsp]
  0119f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR quote$[rsp]
  011a7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  011ac	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  011b4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  011b9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR quote$[rsp]
  011c1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  011c6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv715[rsp]
  011ce	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011d3	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  011d7	8b 44 24 70	 mov	 eax, DWORD PTR mgs$[rsp]
  011db	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  011df	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR tv722[rsp]
  011e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160117
  011ee	ba 25 01 00 00	 mov	 edx, 293		; 00000125H
  011f3	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  011fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1194 :         sysblk.traceFILE ? "ON" : "OFF",
; 1195 :         mgs, mg,
; 1196 :         sysblk.tfnostop ? "NO" : "",
; 1197 :         quote, filename, quote
; 1198 :     );
; 1199 : 
; 1200 :     if (argc > 1)

  01201	83 bc 24 70 03
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  01209	0f 8e 80 00 00
	00		 jle	 $LN129@tf_cmd

; 1201 :         // "%-14s set to %s"
; 1202 :         WRMSG( HHC02204, "I", argv[0], buf );

  0120f	b8 08 00 00 00	 mov	 eax, 8
  01214	48 6b c0 00	 imul	 rax, rax, 0
  01218	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv728[rsp], rax
  01220	b9 01 00 00 00	 mov	 ecx, 1
  01225	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0122b	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01233	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01238	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01240	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv728[rsp]
  01248	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0124c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160120
  01258	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0125d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160121
  01264	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01269	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0126e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01274	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160122
  0127b	ba b2 04 00 00	 mov	 edx, 1202		; 000004b2H
  01280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160123
  01287	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0128d	eb 7e		 jmp	 SHORT $LN130@tf_cmd
$LN129@tf_cmd:

; 1203 :     else
; 1204 :         // "%-14s: %s"
; 1205 :         WRMSG( HHC02203, "I", argv[0], buf );

  0128f	b8 08 00 00 00	 mov	 eax, 8
  01294	48 6b c0 00	 imul	 rax, rax, 0
  01298	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv741[rsp], rax
  012a0	b9 01 00 00 00	 mov	 ecx, 1
  012a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012ab	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  012b3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  012b8	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  012c0	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv741[rsp]
  012c8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  012cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  012d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160124
  012d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160125
  012e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  012f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160126
  012fb	ba b5 04 00 00	 mov	 edx, 1205		; 000004b5H
  01300	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160127
  01307	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN130@tf_cmd:

; 1206 : 
; 1207 :     /* Auto-stop tracing unless asked not to */
; 1208 :     if (!enable && !nostop)

  0130d	0f b6 44 24 50	 movzx	 eax, BYTE PTR enable$[rsp]
  01312	85 c0		 test	 eax, eax
  01314	75 69		 jne	 SHORT $LN131@tf_cmd
  01316	0f b6 44 24 51	 movzx	 eax, BYTE PTR nostop$[rsp]
  0131b	85 c0		 test	 eax, eax
  0131d	75 60		 jne	 SHORT $LN131@tf_cmd

; 1209 :     {
; 1210 :         if (tf_autostop())

  0131f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_autostop
  01325	0f b6 c0	 movzx	 eax, al
  01328	85 c0		 test	 eax, eax
  0132a	74 53		 je	 SHORT $LN132@tf_cmd

; 1211 :             // "File closed, tracing %s"
; 1212 :             WRMSG( HHC02381, "I", "auto-stopped" );

  0132c	b9 01 00 00 00	 mov	 ecx, 1
  01331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01337	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160130
  0133e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160131
  0134a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0134f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160132
  01356	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0135b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01360	41 b9 03 00 00
	00		 mov	 r9d, 3
  01366	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160133
  0136d	ba bc 04 00 00	 mov	 edx, 1212		; 000004bcH
  01372	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160134
  01379	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN132@tf_cmd:
$LN131@tf_cmd:

; 1213 :     }
; 1214 : 
; 1215 :     return 0;

  0137f	33 c0		 xor	 eax, eax
$LN1@tf_cmd:

; 1216 : }

  01381	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01389	48 33 cc	 xor	 rcx, rsp
  0138c	e8 00 00 00 00	 call	 __security_check_cookie
  01391	48 81 c4 60 03
	00 00		 add	 rsp, 864		; 00000360H
  01398	5f		 pop	 rdi
  01399	c3		 ret	 0
tf_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
tv89 = 80
regs$ = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
v_cmd	PROC

; 889  : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@v_cmd:

; 890  : REGS *regs;
; 891  : 
; 892  :     UNREFERENCED(argc);

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@v_cmd
$LN7@v_cmd:

; 893  :     UNREFERENCED(argv);

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@v_cmd

; 894  : 
; 895  :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00025	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00033	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159811
  00042	48 8b c8	 mov	 rcx, rax
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 896  : 
; 897  :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  0004b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00052	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00059	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00060	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00069	0f 85 c7 00 00
	00		 jne	 $LN8@v_cmd

; 898  :     {
; 899  :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00076	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00084	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159813
  00093	48 8b c8	 mov	 rcx, rax
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 900  :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  0009c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000a3	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000b1	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000bf	48 89 44 24 50	 mov	 QWORD PTR tv89[rsp], rax
  000c4	b9 01 00 00 00	 mov	 ecx, 1
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159814
  000d6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e2	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000e8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv89[rsp]
  000f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159815
  000fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159816
  00109	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	41 b9 03 00 00
	00		 mov	 r9d, 3
  00119	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159817
  00120	ba 84 03 00 00	 mov	 edx, 900		; 00000384H
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159818
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 901  :         return 0;

  00132	33 c0		 xor	 eax, eax
  00134	eb 77		 jmp	 SHORT $LN1@v_cmd
$LN8@v_cmd:

; 902  :     }
; 903  :     regs = sysblk.regs[sysblk.pcpu];

  00136	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0013d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00144	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0014b	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00153	48 89 44 24 58	 mov	 QWORD PTR regs$[rsp], rax

; 904  : 
; 905  :     alter_display_virt (regs, argc-1, argv+1, cmdline);

  00158	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  0015d	48 83 c0 08	 add	 rax, 8
  00161	8b 4c 24 70	 mov	 ecx, DWORD PTR argc$[rsp]
  00165	ff c9		 dec	 ecx
  00167	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR cmdline$[rsp]
  0016f	4c 8b c0	 mov	 r8, rax
  00172	8b d1		 mov	 edx, ecx
  00174	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00179	e8 00 00 00 00	 call	 alter_display_virt

; 906  : 
; 907  :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0017e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00185	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0018c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00193	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159819
  001a2	48 8b c8	 mov	 rcx, rax
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 908  : 
; 909  :     return 0;

  001ab	33 c0		 xor	 eax, eax
$LN1@v_cmd:

; 910  : }

  001ad	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b1	c3		 ret	 0
v_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
tv89 = 80
regs$ = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
u_cmd	PROC

; 861  : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@u_cmd:

; 862  : REGS *regs;
; 863  : 
; 864  :     UNREFERENCED(argc);

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@u_cmd
$LN7@u_cmd:

; 865  :     UNREFERENCED(argv);

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@u_cmd

; 866  : 
; 867  :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00025	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00033	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159786
  00042	48 8b c8	 mov	 rcx, rax
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 868  : 
; 869  :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  0004b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00052	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00059	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00060	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00069	0f 85 c7 00 00
	00		 jne	 $LN8@u_cmd

; 870  :     {
; 871  :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00076	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00084	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159788
  00093	48 8b c8	 mov	 rcx, rax
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 872  :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  0009c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000a3	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000b1	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000bf	48 89 44 24 50	 mov	 QWORD PTR tv89[rsp], rax
  000c4	b9 01 00 00 00	 mov	 ecx, 1
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159789
  000d6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e2	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000e8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv89[rsp]
  000f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159790
  000fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159791
  00109	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	41 b9 03 00 00
	00		 mov	 r9d, 3
  00119	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159792
  00120	ba 68 03 00 00	 mov	 edx, 872		; 00000368H
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159793
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 873  :         return 0;

  00132	33 c0		 xor	 eax, eax
  00134	eb 77		 jmp	 SHORT $LN1@u_cmd
$LN8@u_cmd:

; 874  :     }
; 875  :     regs = sysblk.regs[sysblk.pcpu];

  00136	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0013d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00144	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0014b	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00153	48 89 44 24 58	 mov	 QWORD PTR regs$[rsp], rax

; 876  : 
; 877  :     disasm_stor (regs, argc-1, argv+1, cmdline);

  00158	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  0015d	48 83 c0 08	 add	 rax, 8
  00161	8b 4c 24 70	 mov	 ecx, DWORD PTR argc$[rsp]
  00165	ff c9		 dec	 ecx
  00167	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR cmdline$[rsp]
  0016f	4c 8b c0	 mov	 r8, rax
  00172	8b d1		 mov	 edx, ecx
  00174	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00179	e8 00 00 00 00	 call	 disasm_stor

; 878  : 
; 879  :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0017e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00185	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0018c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00193	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159794
  001a2	48 8b c8	 mov	 rcx, rax
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 880  : 
; 881  :     return 0;

  001ab	33 c0		 xor	 eax, eax
$LN1@u_cmd:

; 882  : }

  001ad	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b1	c3		 ret	 0
u_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
tv89 = 80
regs$ = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
abs_or_r_cmd PROC

; 833  : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@abs_or_r_c:

; 834  : REGS *regs;
; 835  : 
; 836  :     UNREFERENCED(argc);

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@abs_or_r_c
$LN7@abs_or_r_c:

; 837  :     UNREFERENCED(argv);

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@abs_or_r_c

; 838  : 
; 839  :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00025	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00033	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159761
  00042	48 8b c8	 mov	 rcx, rax
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 840  : 
; 841  :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  0004b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00052	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00059	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00060	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00069	0f 85 c7 00 00
	00		 jne	 $LN8@abs_or_r_c

; 842  :     {
; 843  :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00076	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00084	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159763
  00093	48 8b c8	 mov	 rcx, rax
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 844  :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  0009c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000a3	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000b1	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000bf	48 89 44 24 50	 mov	 QWORD PTR tv89[rsp], rax
  000c4	b9 01 00 00 00	 mov	 ecx, 1
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159764
  000d6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000db	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e2	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000e8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv89[rsp]
  000f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159765
  000fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159766
  00109	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	41 b9 03 00 00
	00		 mov	 r9d, 3
  00119	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159767
  00120	ba 4c 03 00 00	 mov	 edx, 844		; 0000034cH
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159768
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 845  :         return 0;

  00132	33 c0		 xor	 eax, eax
  00134	eb 6c		 jmp	 SHORT $LN1@abs_or_r_c
$LN8@abs_or_r_c:

; 846  :     }
; 847  :     regs = sysblk.regs[sysblk.pcpu];

  00136	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0013d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00144	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0014b	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00153	48 89 44 24 58	 mov	 QWORD PTR regs$[rsp], rax

; 848  : 
; 849  :     alter_display_real_or_abs (regs, argc, argv, cmdline);

  00158	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR cmdline$[rsp]
  00160	4c 8b 44 24 78	 mov	 r8, QWORD PTR argv$[rsp]
  00165	8b 54 24 70	 mov	 edx, DWORD PTR argc$[rsp]
  00169	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0016e	e8 00 00 00 00	 call	 alter_display_real_or_abs

; 850  : 
; 851  :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00173	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0017a	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00181	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00188	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159769
  00197	48 8b c8	 mov	 rcx, rax
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 852  : 
; 853  :     return 0;

  001a0	33 c0		 xor	 eax, eax
$LN1@abs_or_r_c:

; 854  : }

  001a2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001a6	c3		 ret	 0
abs_or_r_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
n$ = 128
c$ = 132
regs$ = 136
errflag$ = 144
rc$ = 148
newas$ = 152
newsm$ = 156
newpk$ = 160
newcmwp$ = 164
newcc$ = 168
newpm$ = 172
newam$ = 176
tv417 = 180
updpk$ = 184
updcmwp$ = 188
updas$ = 192
updcc$ = 196
updpm$ = 200
updia$ = 204
modflag$ = 208
updsm$ = 212
tv494 = 216
tv514 = 220
tv518 = 224
tv521 = 228
tv491 = 232
newia$ = 240
tv486 = 248
tv487 = 256
tv508 = 264
tv509 = 272
tv510 = 280
tv488 = 288
tv511 = 296
tv88 = 304
tv343 = 312
buf$ = 320
__$ArrayPad$ = 832
argc$ = 864
argv$ = 872
cmdline$ = 880
psw_cmd	PROC

; 602  : {

$LN91:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 58 03
	00 00		 sub	 rsp, 856		; 00000358H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 603  : REGS *regs;
; 604  : BYTE  c;
; 605  : U64   newia=0;

  00027	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newia$[rsp], 0

; 606  : int   newam=0, newas=0, newcc=0, newcmwp=0, newpk=0, newpm=0, newsm=0;

  00033	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newam$[rsp], 0
  0003e	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newas$[rsp], 0
  00049	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newcc$[rsp], 0
  00054	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newcmwp$[rsp], 0
  0005f	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newpk$[rsp], 0
  0006a	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newpm$[rsp], 0
  00075	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newsm$[rsp], 0

; 607  : int   updia=0, updas=0, updcc=0, updcmwp=0, updpk=0, updpm=0, updsm=0;

  00080	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR updia$[rsp], 0
  0008b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR updas$[rsp], 0
  00096	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR updcc$[rsp], 0
  000a1	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR updcmwp$[rsp], 0
  000ac	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR updpk$[rsp], 0
  000b7	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR updpm$[rsp], 0
  000c2	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR updsm$[rsp], 0

; 608  : int   n, errflag, modflag=0;

  000cd	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR modflag$[rsp], 0
$LN4@psw_cmd:

; 609  : int   rc;
; 610  : char  buf[512];
; 611  : 
; 612  :     UNREFERENCED(cmdline);

  000d8	33 c0		 xor	 eax, eax
  000da	85 c0		 test	 eax, eax
  000dc	75 fa		 jne	 SHORT $LN4@psw_cmd

; 613  : 
; 614  :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  000de	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000e5	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000f3	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159627
  00102	48 8b c8	 mov	 rcx, rax
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 615  : 
; 616  :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  0010b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00112	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00119	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00120	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00129	0f 85 e0 00 00
	00		 jne	 $LN10@psw_cmd

; 617  :     {
; 618  :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0012f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00136	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0013d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00144	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159629
  00153	48 8b c8	 mov	 rcx, rax
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 619  :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  0015c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00163	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0016a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00171	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  0017f	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv88[rsp], rax
  00187	b9 01 00 00 00	 mov	 ecx, 1
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159630
  00199	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0019e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001a5	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  001ab	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001af	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv88[rsp]
  001b7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159631
  001c3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159632
  001cf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d9	41 b9 03 00 00
	00		 mov	 r9d, 3
  001df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159633
  001e6	ba 6b 02 00 00	 mov	 edx, 619		; 0000026bH
  001eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159634
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 620  :         rc = 5;

  001f8	c7 84 24 94 00
	00 00 05 00 00
	00		 mov	 DWORD PTR rc$[rsp], 5

; 621  :         return rc;

  00203	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
  0020a	e9 88 0d 00 00	 jmp	 $LN1@psw_cmd
$LN10@psw_cmd:

; 622  :     }
; 623  : 
; 624  :     regs = sysblk.regs[sysblk.pcpu];

  0020f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00216	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0021d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00224	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0022c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 625  : 
; 626  :     /* Process optional operands */
; 627  :     for (n = 1; n < argc; n++)

  00234	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR n$[rsp], 1
  0023f	eb 10		 jmp	 SHORT $LN7@psw_cmd
$LN5@psw_cmd:
  00241	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  00248	ff c0		 inc	 eax
  0024a	89 84 24 80 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN7@psw_cmd:
  00251	8b 84 24 60 03
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00258	39 84 24 80 00
	00 00		 cmp	 DWORD PTR n$[rsp], eax
  0025f	0f 8d b5 06 00
	00		 jge	 $LN6@psw_cmd

; 628  :     {
; 629  :         modflag = 1;

  00265	c7 84 24 d0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR modflag$[rsp], 1

; 630  :         errflag = 0;

  00270	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 0

; 631  :         if (strncasecmp(argv[n],"sm=",3) == 0)

  0027b	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00283	41 b8 03 00 00
	00		 mov	 r8d, 3
  00289	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159637
  00290	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00298	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  002a2	85 c0		 test	 eax, eax
  002a4	75 70		 jne	 SHORT $LN11@psw_cmd

; 632  :         {
; 633  :             /* PSW system mask operand */
; 634  :             if (sscanf(argv[n]+3, "%x%c", &newsm, &c) == 1
; 635  :                 && newsm >= 0 && newsm <= 255)

  002a6	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  002ae	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002b6	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  002ba	48 83 c0 03	 add	 rax, 3
  002be	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  002c6	4c 8d 84 24 9c
	00 00 00	 lea	 r8, QWORD PTR newsm$[rsp]
  002ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159640
  002d5	48 8b c8	 mov	 rcx, rax
  002d8	e8 00 00 00 00	 call	 sscanf
  002dd	83 f8 01	 cmp	 eax, 1
  002e0	75 24		 jne	 SHORT $LN13@psw_cmd
  002e2	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR newsm$[rsp], 0
  002ea	7c 1a		 jl	 SHORT $LN13@psw_cmd
  002ec	81 bc 24 9c 00
	00 00 ff 00 00
	00		 cmp	 DWORD PTR newsm$[rsp], 255 ; 000000ffH
  002f7	7f 0d		 jg	 SHORT $LN13@psw_cmd

; 636  :                 updsm = 1;

  002f9	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR updsm$[rsp], 1
  00304	eb 0b		 jmp	 SHORT $LN14@psw_cmd
$LN13@psw_cmd:

; 637  :             else
; 638  :                 errflag = 1;

  00306	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN14@psw_cmd:

; 639  :         }

  00311	e9 3e 05 00 00	 jmp	 $LN12@psw_cmd
$LN11@psw_cmd:

; 640  :         else if (strncasecmp(argv[n],"pk=",3) == 0)

  00316	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0031e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00324	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159643
  0032b	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00333	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00337	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0033d	85 c0		 test	 eax, eax
  0033f	75 6d		 jne	 SHORT $LN15@psw_cmd

; 641  :         {
; 642  :             /* PSW protection key operand */
; 643  :             if (sscanf(argv[n]+3, "%d%c", &newpk, &c) == 1
; 644  :                 && newpk >= 0 && newpk <= 15)

  00341	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00349	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00351	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00355	48 83 c0 03	 add	 rax, 3
  00359	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  00361	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR newpk$[rsp]
  00369	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159646
  00370	48 8b c8	 mov	 rcx, rax
  00373	e8 00 00 00 00	 call	 sscanf
  00378	83 f8 01	 cmp	 eax, 1
  0037b	75 21		 jne	 SHORT $LN17@psw_cmd
  0037d	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR newpk$[rsp], 0
  00385	7c 17		 jl	 SHORT $LN17@psw_cmd
  00387	83 bc 24 a0 00
	00 00 0f	 cmp	 DWORD PTR newpk$[rsp], 15
  0038f	7f 0d		 jg	 SHORT $LN17@psw_cmd

; 645  :                 updpk = 1;

  00391	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR updpk$[rsp], 1
  0039c	eb 0b		 jmp	 SHORT $LN18@psw_cmd
$LN17@psw_cmd:

; 646  :             else
; 647  :                 errflag = 1;

  0039e	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN18@psw_cmd:

; 648  :         }

  003a9	e9 a6 04 00 00	 jmp	 $LN16@psw_cmd
$LN15@psw_cmd:

; 649  :         else if (strncasecmp(argv[n],"cmwp=",5) == 0)

  003ae	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  003b6	41 b8 05 00 00
	00		 mov	 r8d, 5
  003bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159649
  003c3	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003cb	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  003d5	85 c0		 test	 eax, eax
  003d7	75 6d		 jne	 SHORT $LN19@psw_cmd

; 650  :         {
; 651  :             /* PSW CMWP bits operand */
; 652  :             if (sscanf(argv[n]+5, "%x%c", &newcmwp, &c) == 1
; 653  :                 && newcmwp >= 0 && newcmwp <= 15)

  003d9	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  003e1	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003e9	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  003ed	48 83 c0 05	 add	 rax, 5
  003f1	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  003f9	4c 8d 84 24 a4
	00 00 00	 lea	 r8, QWORD PTR newcmwp$[rsp]
  00401	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159652
  00408	48 8b c8	 mov	 rcx, rax
  0040b	e8 00 00 00 00	 call	 sscanf
  00410	83 f8 01	 cmp	 eax, 1
  00413	75 21		 jne	 SHORT $LN21@psw_cmd
  00415	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR newcmwp$[rsp], 0
  0041d	7c 17		 jl	 SHORT $LN21@psw_cmd
  0041f	83 bc 24 a4 00
	00 00 0f	 cmp	 DWORD PTR newcmwp$[rsp], 15
  00427	7f 0d		 jg	 SHORT $LN21@psw_cmd

; 654  :                 updcmwp = 1;

  00429	c7 84 24 bc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR updcmwp$[rsp], 1
  00434	eb 0b		 jmp	 SHORT $LN22@psw_cmd
$LN21@psw_cmd:

; 655  :             else
; 656  :                 errflag = 1;

  00436	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN22@psw_cmd:

; 657  :         }

  00441	e9 0e 04 00 00	 jmp	 $LN20@psw_cmd
$LN19@psw_cmd:

; 658  :         else if (strncasecmp(argv[n],"as=",3) == 0)

  00446	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0044e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00454	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159655
  0045b	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00463	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00467	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0046d	85 c0		 test	 eax, eax
  0046f	0f 85 09 01 00
	00		 jne	 $LN23@psw_cmd

; 659  :         {
; 660  :             /* PSW address-space control operand */
; 661  :             if (strcasecmp(argv[n]+3,"pri") == 0)

  00475	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0047d	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00485	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00489	48 83 c0 03	 add	 rax, 3
  0048d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159658
  00494	48 8b c8	 mov	 rcx, rax
  00497	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0049d	85 c0		 test	 eax, eax
  0049f	75 10		 jne	 SHORT $LN25@psw_cmd

; 662  :                 newas = PSW_PRIMARY_SPACE_MODE;

  004a1	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR newas$[rsp], 0
  004ac	e9 b3 00 00 00	 jmp	 $LN26@psw_cmd
$LN25@psw_cmd:

; 663  :             else if (strcmp(argv[n]+3,"ar") == 0)

  004b1	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  004b9	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004c1	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  004c5	48 83 c0 03	 add	 rax, 3
  004c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159661
  004d0	48 8b c8	 mov	 rcx, rax
  004d3	e8 00 00 00 00	 call	 strcmp
  004d8	85 c0		 test	 eax, eax
  004da	75 0d		 jne	 SHORT $LN27@psw_cmd

; 664  :                 newas = PSW_ACCESS_REGISTER_MODE;

  004dc	c7 84 24 98 00
	00 00 40 00 00
	00		 mov	 DWORD PTR newas$[rsp], 64 ; 00000040H
  004e7	eb 7b		 jmp	 SHORT $LN28@psw_cmd
$LN27@psw_cmd:

; 665  :             else if (strcmp(argv[n]+3,"sec") == 0)

  004e9	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  004f1	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004f9	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  004fd	48 83 c0 03	 add	 rax, 3
  00501	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159664
  00508	48 8b c8	 mov	 rcx, rax
  0050b	e8 00 00 00 00	 call	 strcmp
  00510	85 c0		 test	 eax, eax
  00512	75 0d		 jne	 SHORT $LN29@psw_cmd

; 666  :                 newas = PSW_SECONDARY_SPACE_MODE;

  00514	c7 84 24 98 00
	00 00 80 00 00
	00		 mov	 DWORD PTR newas$[rsp], 128 ; 00000080H
  0051f	eb 43		 jmp	 SHORT $LN30@psw_cmd
$LN29@psw_cmd:

; 667  :             else if (strcmp(argv[n]+3,"home") == 0)

  00521	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00529	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00531	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00535	48 83 c0 03	 add	 rax, 3
  00539	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159667
  00540	48 8b c8	 mov	 rcx, rax
  00543	e8 00 00 00 00	 call	 strcmp
  00548	85 c0		 test	 eax, eax
  0054a	75 0d		 jne	 SHORT $LN31@psw_cmd

; 668  :                 newas = PSW_HOME_SPACE_MODE;

  0054c	c7 84 24 98 00
	00 00 c0 00 00
	00		 mov	 DWORD PTR newas$[rsp], 192 ; 000000c0H
  00557	eb 0b		 jmp	 SHORT $LN32@psw_cmd
$LN31@psw_cmd:

; 669  :             else
; 670  :                 errflag = 1;

  00559	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN32@psw_cmd:
$LN30@psw_cmd:
$LN28@psw_cmd:
$LN26@psw_cmd:

; 671  :             if (errflag == 0) updas = 1;

  00564	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR errflag$[rsp], 0
  0056c	75 0b		 jne	 SHORT $LN33@psw_cmd
  0056e	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR updas$[rsp], 1
$LN33@psw_cmd:

; 672  :         }

  00579	e9 d6 02 00 00	 jmp	 $LN24@psw_cmd
$LN23@psw_cmd:

; 673  :         else if (strncasecmp(argv[n],"cc=",3) == 0)

  0057e	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00586	41 b8 03 00 00
	00		 mov	 r8d, 3
  0058c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159671
  00593	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0059b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0059f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  005a5	85 c0		 test	 eax, eax
  005a7	75 6d		 jne	 SHORT $LN34@psw_cmd

; 674  :         {
; 675  :             /* PSW condition code operand */
; 676  :             if (sscanf(argv[n]+3, "%d%c", &newcc, &c) == 1
; 677  :                 && newcc >= 0 && newcc <= 3)

  005a9	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  005b1	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005b9	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  005bd	48 83 c0 03	 add	 rax, 3
  005c1	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  005c9	4c 8d 84 24 a8
	00 00 00	 lea	 r8, QWORD PTR newcc$[rsp]
  005d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159674
  005d8	48 8b c8	 mov	 rcx, rax
  005db	e8 00 00 00 00	 call	 sscanf
  005e0	83 f8 01	 cmp	 eax, 1
  005e3	75 21		 jne	 SHORT $LN36@psw_cmd
  005e5	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR newcc$[rsp], 0
  005ed	7c 17		 jl	 SHORT $LN36@psw_cmd
  005ef	83 bc 24 a8 00
	00 00 03	 cmp	 DWORD PTR newcc$[rsp], 3
  005f7	7f 0d		 jg	 SHORT $LN36@psw_cmd

; 678  :                 updcc = 1;

  005f9	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR updcc$[rsp], 1
  00604	eb 0b		 jmp	 SHORT $LN37@psw_cmd
$LN36@psw_cmd:

; 679  :             else
; 680  :                 errflag = 1;

  00606	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN37@psw_cmd:

; 681  :         }

  00611	e9 3e 02 00 00	 jmp	 $LN35@psw_cmd
$LN34@psw_cmd:

; 682  :         else if (strncasecmp(argv[n],"pm=",3) == 0)

  00616	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0061e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159677
  0062b	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00633	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00637	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0063d	85 c0		 test	 eax, eax
  0063f	75 6d		 jne	 SHORT $LN38@psw_cmd

; 683  :         {
; 684  :             /* PSW program mask operand */
; 685  :             if (sscanf(argv[n]+3, "%x%c", &newpm, &c) == 1
; 686  :                 && newpm >= 0 && newpm <= 15)

  00641	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00649	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00651	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00655	48 83 c0 03	 add	 rax, 3
  00659	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  00661	4c 8d 84 24 ac
	00 00 00	 lea	 r8, QWORD PTR newpm$[rsp]
  00669	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159680
  00670	48 8b c8	 mov	 rcx, rax
  00673	e8 00 00 00 00	 call	 sscanf
  00678	83 f8 01	 cmp	 eax, 1
  0067b	75 21		 jne	 SHORT $LN40@psw_cmd
  0067d	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR newpm$[rsp], 0
  00685	7c 17		 jl	 SHORT $LN40@psw_cmd
  00687	83 bc 24 ac 00
	00 00 0f	 cmp	 DWORD PTR newpm$[rsp], 15
  0068f	7f 0d		 jg	 SHORT $LN40@psw_cmd

; 687  :                 updpm = 1;

  00691	c7 84 24 c8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR updpm$[rsp], 1
  0069c	eb 0b		 jmp	 SHORT $LN41@psw_cmd
$LN40@psw_cmd:

; 688  :             else
; 689  :                 errflag = 1;

  0069e	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN41@psw_cmd:

; 690  :         }

  006a9	e9 a6 01 00 00	 jmp	 $LN39@psw_cmd
$LN38@psw_cmd:

; 691  :         else if (strncasecmp(argv[n],"am=",3) == 0)

  006ae	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  006b6	41 b8 03 00 00
	00		 mov	 r8d, 3
  006bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159683
  006c3	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006cb	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  006cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  006d5	85 c0		 test	 eax, eax
  006d7	0f 85 eb 00 00
	00		 jne	 $LN42@psw_cmd

; 692  :         {
; 693  :             /* PSW addressing mode operand */
; 694  :             if (strcmp(argv[n]+3,"24") == 0)

  006dd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  006e5	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006ed	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  006f1	48 83 c0 03	 add	 rax, 3
  006f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159686
  006fc	48 8b c8	 mov	 rcx, rax
  006ff	e8 00 00 00 00	 call	 strcmp
  00704	85 c0		 test	 eax, eax
  00706	75 10		 jne	 SHORT $LN44@psw_cmd

; 695  :                 newam = 24;

  00708	c7 84 24 b0 00
	00 00 18 00 00
	00		 mov	 DWORD PTR newam$[rsp], 24
  00713	e9 ab 00 00 00	 jmp	 $LN45@psw_cmd
$LN44@psw_cmd:

; 696  :             else if (strcmp(argv[n]+3,"31") == 0
; 697  :                     && (sysblk.arch_mode == ARCH_390_IDX

  00718	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00720	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00728	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0072c	48 83 c0 03	 add	 rax, 3
  00730	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159689
  00737	48 8b c8	 mov	 rcx, rax
  0073a	e8 00 00 00 00	 call	 strcmp
  0073f	85 c0		 test	 eax, eax
  00741	75 2d		 jne	 SHORT $LN46@psw_cmd
  00743	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0074a	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  00751	74 10		 je	 SHORT $LN48@psw_cmd
  00753	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0075a	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  00761	75 0d		 jne	 SHORT $LN46@psw_cmd
$LN48@psw_cmd:

; 698  :                         || sysblk.arch_mode == ARCH_900_IDX))
; 699  :                 newam = 31;

  00763	c7 84 24 b0 00
	00 00 1f 00 00
	00		 mov	 DWORD PTR newam$[rsp], 31
  0076e	eb 53		 jmp	 SHORT $LN47@psw_cmd
$LN46@psw_cmd:

; 700  :             else if (strcmp(argv[n]+3,"64") == 0
; 701  :                     && sysblk.arch_mode == ARCH_900_IDX)

  00770	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00778	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00780	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00784	48 83 c0 03	 add	 rax, 3
  00788	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159693
  0078f	48 8b c8	 mov	 rcx, rax
  00792	e8 00 00 00 00	 call	 strcmp
  00797	85 c0		 test	 eax, eax
  00799	75 1d		 jne	 SHORT $LN49@psw_cmd
  0079b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007a2	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  007a9	75 0d		 jne	 SHORT $LN49@psw_cmd

; 702  :                 newam = 64;

  007ab	c7 84 24 b0 00
	00 00 40 00 00
	00		 mov	 DWORD PTR newam$[rsp], 64 ; 00000040H
  007b6	eb 0b		 jmp	 SHORT $LN50@psw_cmd
$LN49@psw_cmd:

; 703  :             else
; 704  :                 errflag = 1;

  007b8	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN50@psw_cmd:
$LN47@psw_cmd:
$LN45@psw_cmd:

; 705  :         }

  007c3	e9 8c 00 00 00	 jmp	 $LN43@psw_cmd
$LN42@psw_cmd:

; 706  :         else if (strncasecmp(argv[n],"ia=",3) == 0)

  007c8	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  007d0	41 b8 03 00 00
	00		 mov	 r8d, 3
  007d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159696
  007dd	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007e5	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  007e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  007ef	85 c0		 test	 eax, eax
  007f1	75 56		 jne	 SHORT $LN51@psw_cmd

; 707  :         {
; 708  :             /* PSW instruction address operand */
; 709  :             if (sscanf(argv[n]+3, "%"SCNx64"%c", &newia, &c) == 1)

  007f3	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  007fb	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00803	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00807	48 83 c0 03	 add	 rax, 3
  0080b	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  00813	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR newia$[rsp]
  0081b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159699
  00822	48 8b c8	 mov	 rcx, rax
  00825	e8 00 00 00 00	 call	 sscanf
  0082a	83 f8 01	 cmp	 eax, 1
  0082d	75 0d		 jne	 SHORT $LN53@psw_cmd

; 710  :                 updia = 1;

  0082f	c7 84 24 cc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR updia$[rsp], 1
  0083a	eb 0b		 jmp	 SHORT $LN54@psw_cmd
$LN53@psw_cmd:

; 711  :             else
; 712  :                 errflag = 1;

  0083c	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN54@psw_cmd:

; 713  :         }

  00847	eb 0b		 jmp	 SHORT $LN52@psw_cmd
$LN51@psw_cmd:

; 714  :         else /* unknown operand keyword */
; 715  :             errflag = 1;

  00849	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR errflag$[rsp], 1
$LN52@psw_cmd:
$LN43@psw_cmd:
$LN39@psw_cmd:
$LN35@psw_cmd:
$LN24@psw_cmd:
$LN20@psw_cmd:
$LN16@psw_cmd:
$LN12@psw_cmd:

; 716  : 
; 717  :         /* Error message if this operand was invalid */
; 718  :         if (errflag)

  00854	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR errflag$[rsp], 0
  0085c	0f 84 b3 00 00
	00		 je	 $LN55@psw_cmd

; 719  :         {
; 720  :             WRMSG(HHC02205, "E", argv[n], "");

  00862	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0086a	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv343[rsp], rax
  00872	b9 01 00 00 00	 mov	 ecx, 1
  00877	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0087d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159701
  00884	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00889	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00891	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR tv343[rsp]
  00899	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0089d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159702
  008a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159703
  008b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  008c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159704
  008cc	ba d0 02 00 00	 mov	 edx, 720		; 000002d0H
  008d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159705
  008d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 721  :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  008de	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008e5	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  008ec	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  008f3	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  008fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159706
  00902	48 8b c8	 mov	 rcx, rax
  00905	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 722  :             return -1;

  0090b	b8 ff ff ff ff	 mov	 eax, -1
  00910	e9 82 06 00 00	 jmp	 $LN1@psw_cmd
$LN55@psw_cmd:

; 723  :         }
; 724  :     } /* end for (n) */

  00915	e9 27 f9 ff ff	 jmp	 $LN5@psw_cmd
$LN6@psw_cmd:

; 725  : 
; 726  :     /* Update the PSW system mask, if specified */
; 727  :     if (updsm)

  0091a	83 bc 24 d4 00
	00 00 00	 cmp	 DWORD PTR updsm$[rsp], 0
  00922	74 13		 je	 SHORT $LN56@psw_cmd

; 728  :     {
; 729  :         regs->psw.sysmask = newsm;

  00924	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0092c	0f b6 8c 24 9c
	00 00 00	 movzx	 ecx, BYTE PTR newsm$[rsp]
  00934	88 48 78	 mov	 BYTE PTR [rax+120], cl
$LN56@psw_cmd:

; 730  :     }
; 731  : 
; 732  :     /* Update the PSW protection key, if specified */
; 733  :     if (updpk)

  00937	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR updpk$[rsp], 0
  0093f	74 15		 je	 SHORT $LN57@psw_cmd

; 734  :     {
; 735  :         regs->psw.pkey = newpk << 4;

  00941	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR newpk$[rsp]
  00948	c1 e0 04	 shl	 eax, 4
  0094b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00953	88 41 79	 mov	 BYTE PTR [rcx+121], al
$LN57@psw_cmd:

; 736  :     }
; 737  : 
; 738  :     /* Update the PSW CMWP bits, if specified */
; 739  :     if (updcmwp)

  00956	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR updcmwp$[rsp], 0
  0095e	74 13		 je	 SHORT $LN58@psw_cmd

; 740  :     {
; 741  :         regs->psw.states = newcmwp;

  00960	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00968	0f b6 8c 24 a4
	00 00 00	 movzx	 ecx, BYTE PTR newcmwp$[rsp]
  00970	88 48 7a	 mov	 BYTE PTR [rax+122], cl
$LN58@psw_cmd:

; 742  :     }
; 743  : 
; 744  :     /* Update the PSW address-space control mode, if specified */
; 745  :     if (updas
; 746  :         && (ECMODE(&regs->psw)

  00973	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR updas$[rsp], 0
  0097b	74 46		 je	 SHORT $LN59@psw_cmd
  0097d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00985	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00989	83 e0 08	 and	 eax, 8
  0098c	85 c0		 test	 eax, eax
  0098e	75 20		 jne	 SHORT $LN60@psw_cmd
  00990	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00997	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  0099e	74 10		 je	 SHORT $LN60@psw_cmd
  009a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009a7	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  009ae	75 13		 jne	 SHORT $LN59@psw_cmd
$LN60@psw_cmd:

; 747  :             || sysblk.arch_mode == ARCH_390_IDX
; 748  :             || sysblk.arch_mode == ARCH_900_IDX))
; 749  :     {
; 750  :         regs->psw.asc = newas;

  009b0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009b8	0f b6 8c 24 98
	00 00 00	 movzx	 ecx, BYTE PTR newas$[rsp]
  009c0	88 48 7b	 mov	 BYTE PTR [rax+123], cl
$LN59@psw_cmd:

; 751  :     }
; 752  : 
; 753  :     /* Update the PSW condition code, if specified */
; 754  :     if (updcc)

  009c3	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR updcc$[rsp], 0
  009cb	74 13		 je	 SHORT $LN61@psw_cmd

; 755  :     {
; 756  :         regs->psw.cc = newcc;

  009cd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009d5	0f b6 8c 24 a8
	00 00 00	 movzx	 ecx, BYTE PTR newcc$[rsp]
  009dd	88 48 7c	 mov	 BYTE PTR [rax+124], cl
$LN61@psw_cmd:

; 757  :     }
; 758  : 
; 759  :     /* Update the PSW program mask, if specified */
; 760  :     if (updpm)

  009e0	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR updpm$[rsp], 0
  009e8	74 13		 je	 SHORT $LN62@psw_cmd

; 761  :     {
; 762  :         regs->psw.progmask = newpm;

  009ea	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009f2	0f b6 8c 24 ac
	00 00 00	 movzx	 ecx, BYTE PTR newpm$[rsp]
  009fa	88 48 7d	 mov	 BYTE PTR [rax+125], cl
$LN62@psw_cmd:

; 763  :     }
; 764  : 
; 765  :     /* Update the PSW addressing mode, if specified */
; 766  :     switch(newam) {

  009fd	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR newam$[rsp]
  00a04	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv417[rsp], eax
  00a0b	83 bc 24 b4 00
	00 00 18	 cmp	 DWORD PTR tv417[rsp], 24
  00a13	0f 84 c2 00 00
	00		 je	 $LN65@psw_cmd
  00a19	83 bc 24 b4 00
	00 00 1f	 cmp	 DWORD PTR tv417[rsp], 31
  00a21	74 65		 je	 SHORT $LN64@psw_cmd
  00a23	83 bc 24 b4 00
	00 00 40	 cmp	 DWORD PTR tv417[rsp], 64 ; 00000040H
  00a2b	74 05		 je	 SHORT $LN63@psw_cmd
  00a2d	e9 fa 00 00 00	 jmp	 $LN8@psw_cmd
$LN63@psw_cmd:

; 767  :     case 64:
; 768  :         regs->psw.amode = regs->psw.amode64 = 1;

  00a32	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a3a	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00a40	83 c8 01	 or	 eax, 1
  00a43	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a4b	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax
  00a51	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a59	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00a5f	83 c8 02	 or	 eax, 2
  00a62	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a6a	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax

; 769  :         regs->psw.AMASK_G = AMASK64;

  00a70	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a78	48 c7 80 90 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+144], -1

; 770  :         break;

  00a83	e9 a4 00 00 00	 jmp	 $LN8@psw_cmd
$LN64@psw_cmd:

; 771  :     case 31:
; 772  :         regs->psw.amode = 1;

  00a88	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a90	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00a96	83 c8 02	 or	 eax, 2
  00a99	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00aa1	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax

; 773  :         regs->psw.amode64 = 0;

  00aa7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00aaf	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00ab5	83 e0 fe	 and	 eax, -2			; fffffffeH
  00ab8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ac0	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax

; 774  :         regs->psw.AMASK_G = AMASK31;

  00ac6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ace	48 c7 80 90 00
	00 00 ff ff ff
	7f		 mov	 QWORD PTR [rax+144], 2147483647 ; 7fffffffH

; 775  :         break;

  00ad9	eb 51		 jmp	 SHORT $LN8@psw_cmd
$LN65@psw_cmd:

; 776  :     case 24:
; 777  :         regs->psw.amode = regs->psw.amode64 = 0;

  00adb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ae3	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00ae9	83 e0 fe	 and	 eax, -2			; fffffffeH
  00aec	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00af4	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax
  00afa	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b02	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00b08	83 e0 fd	 and	 eax, -3			; fffffffdH
  00b0b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b13	89 81 80 00 00
	00		 mov	 DWORD PTR [rcx+128], eax

; 778  :         regs->psw.AMASK_G = AMASK24;

  00b19	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b21	48 c7 80 90 00
	00 00 ff ff ff
	00		 mov	 QWORD PTR [rax+144], 16777215 ; 00ffffffH
$LN8@psw_cmd:

; 779  :         break;
; 780  :     } /* end switch(newam) */
; 781  : 
; 782  :     /* Update the PSW instruction address, if specified */
; 783  :     if (updia)

  00b2c	83 bc 24 cc 00
	00 00 00	 cmp	 DWORD PTR updia$[rsp], 0
  00b34	74 17		 je	 SHORT $LN66@psw_cmd

; 784  :     {
; 785  :         regs->psw.IA_G = newia;

  00b36	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b3e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR newia$[rsp]
  00b46	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx
$LN66@psw_cmd:

; 786  :     }
; 787  : 
; 788  :     /* If any modifications were made, reapply the addressing mode mask
; 789  :        to the instruction address and invalidate the instruction pointer */
; 790  :     if (modflag)

  00b4d	83 bc 24 d0 00
	00 00 00	 cmp	 DWORD PTR modflag$[rsp], 0
  00b55	74 43		 je	 SHORT $LN67@psw_cmd

; 791  :     {
; 792  :         regs->psw.IA_G &= regs->psw.AMASK_G;

  00b57	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b5f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b67	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00b6e	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00b75	48 23 c1	 and	 rax, rcx
  00b78	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b80	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 793  :         regs->aie = INVALID_AIE;

  00b87	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b8f	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN67@psw_cmd:

; 794  :     }
; 795  : 
; 796  :     /* Display the PSW and PSW field by field */
; 797  :     DISPLAY_PSW( regs, buf );

  00b9a	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00ba0	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  00ba8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00bb0	e8 00 00 00 00	 call	 display_psw

; 798  :     WRMSG( HHC02278, "I", buf );

  00bb5	b9 01 00 00 00	 mov	 ecx, 1
  00bba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bc0	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00bc8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00bcd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159719
  00bd4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159720
  00be0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00be5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bea	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bf0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159721
  00bf7	ba 1e 03 00 00	 mov	 edx, 798		; 0000031eH
  00bfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159722
  00c03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 799  :     WRMSG( HHC02300, "I",

  00c09	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c11	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00c17	d1 e8		 shr	 eax, 1
  00c19	83 e0 01	 and	 eax, 1
  00c1c	85 c0		 test	 eax, eax
  00c1e	75 29		 jne	 SHORT $LN77@psw_cmd
  00c20	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c28	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00c2e	83 e0 01	 and	 eax, 1
  00c31	85 c0		 test	 eax, eax
  00c33	75 14		 jne	 SHORT $LN77@psw_cmd
  00c35	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159723
  00c3c	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv488[rsp], rax
  00c44	e9 ac 00 00 00	 jmp	 $LN82@psw_cmd
$LN77@psw_cmd:
  00c49	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c51	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00c57	d1 e8		 shr	 eax, 1
  00c59	83 e0 01	 and	 eax, 1
  00c5c	83 f8 01	 cmp	 eax, 1
  00c5f	75 26		 jne	 SHORT $LN78@psw_cmd
  00c61	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c69	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00c6f	83 e0 01	 and	 eax, 1
  00c72	85 c0		 test	 eax, eax
  00c74	75 11		 jne	 SHORT $LN78@psw_cmd
  00c76	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159724
  00c7d	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv487[rsp], rax
  00c85	eb 5e		 jmp	 SHORT $LN81@psw_cmd
$LN78@psw_cmd:
  00c87	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c8f	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00c95	d1 e8		 shr	 eax, 1
  00c97	83 e0 01	 and	 eax, 1
  00c9a	83 f8 01	 cmp	 eax, 1
  00c9d	75 27		 jne	 SHORT $LN79@psw_cmd
  00c9f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ca7	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00cad	83 e0 01	 and	 eax, 1
  00cb0	83 f8 01	 cmp	 eax, 1
  00cb3	75 11		 jne	 SHORT $LN79@psw_cmd
  00cb5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159725
  00cbc	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv486[rsp], rax
  00cc4	eb 0f		 jmp	 SHORT $LN80@psw_cmd
$LN79@psw_cmd:
  00cc6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159726
  00ccd	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv486[rsp], rax
$LN80@psw_cmd:
  00cd5	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv486[rsp]
  00cdd	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv487[rsp], rax
$LN81@psw_cmd:
  00ce5	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv487[rsp]
  00ced	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv488[rsp], rax
$LN82@psw_cmd:
  00cf5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00cfd	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  00d01	85 c0		 test	 eax, eax
  00d03	75 14		 jne	 SHORT $LN89@psw_cmd
  00d05	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159727
  00d0c	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv511[rsp], rax
  00d14	e9 a9 00 00 00	 jmp	 $LN90@psw_cmd
$LN89@psw_cmd:
  00d19	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d21	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  00d25	83 f8 40	 cmp	 eax, 64			; 00000040H
  00d28	75 11		 jne	 SHORT $LN87@psw_cmd
  00d2a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159728
  00d31	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv510[rsp], rax
  00d39	eb 77		 jmp	 SHORT $LN88@psw_cmd
$LN87@psw_cmd:
  00d3b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d43	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  00d47	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00d4c	75 11		 jne	 SHORT $LN85@psw_cmd
  00d4e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159729
  00d55	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv509[rsp], rax
  00d5d	eb 43		 jmp	 SHORT $LN86@psw_cmd
$LN85@psw_cmd:
  00d5f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d67	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  00d6b	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00d70	75 11		 jne	 SHORT $LN83@psw_cmd
  00d72	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159730
  00d79	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv508[rsp], rax
  00d81	eb 0f		 jmp	 SHORT $LN84@psw_cmd
$LN83@psw_cmd:
  00d83	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159731
  00d8a	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv508[rsp], rax
$LN84@psw_cmd:
  00d92	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv508[rsp]
  00d9a	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv509[rsp], rax
$LN86@psw_cmd:
  00da2	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv509[rsp]
  00daa	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv510[rsp], rax
$LN88@psw_cmd:
  00db2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv510[rsp]
  00dba	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv511[rsp], rax
$LN90@psw_cmd:
  00dc2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00dca	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00dce	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv491[rsp], eax
  00dd5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ddd	0f b6 49 7c	 movzx	 ecx, BYTE PTR [rcx+124]
  00de1	89 8c 24 d8 00
	00 00		 mov	 DWORD PTR tv494[rsp], ecx
  00de8	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00df0	0f b6 52 7a	 movzx	 edx, BYTE PTR [rdx+122]
  00df4	89 94 24 dc 00
	00 00		 mov	 DWORD PTR tv514[rsp], edx
  00dfb	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00e03	45 0f b6 40 79	 movzx	 r8d, BYTE PTR [r8+121]
  00e08	41 c1 f8 04	 sar	 r8d, 4
  00e0c	44 89 84 24 e0
	00 00 00	 mov	 DWORD PTR tv518[rsp], r8d
  00e14	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00e1c	45 0f b6 49 78	 movzx	 r9d, BYTE PTR [r9+120]
  00e21	44 89 8c 24 e4
	00 00 00	 mov	 DWORD PTR tv521[rsp], r9d
  00e29	b9 01 00 00 00	 mov	 ecx, 1
  00e2e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e34	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00e3c	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00e43	48 89 4c 24 70	 mov	 QWORD PTR [rsp+112], rcx
  00e48	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv488[rsp]
  00e50	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00e55	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv491[rsp]
  00e5c	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  00e60	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv494[rsp]
  00e67	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00e6b	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv511[rsp]
  00e73	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00e78	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv514[rsp]
  00e7f	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00e83	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv518[rsp]
  00e8a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e8e	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv521[rsp]
  00e95	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159732
  00ea0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ea5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159733
  00eac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00eb1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00eb6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ebc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159734
  00ec3	ba 2c 03 00 00	 mov	 edx, 812		; 0000032cH
  00ec8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159735
  00ecf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 800  :         regs->psw.sysmask,
; 801  :         regs->psw.pkey >> 4,
; 802  :         regs->psw.states,
; 803  :         (regs->psw.asc == PSW_PRIMARY_SPACE_MODE ? "pri" :
; 804  :             regs->psw.asc == PSW_ACCESS_REGISTER_MODE ? "ar" :
; 805  :             regs->psw.asc == PSW_SECONDARY_SPACE_MODE ? "sec" :
; 806  :             regs->psw.asc == PSW_HOME_SPACE_MODE ? "home" : "???"),
; 807  :         regs->psw.cc,
; 808  :         regs->psw.progmask,
; 809  :         (regs->psw.amode == 0 && regs->psw.amode64 == 0 ? "24" :
; 810  :             regs->psw.amode == 1 && regs->psw.amode64 == 0 ? "31" :
; 811  :             regs->psw.amode == 1 && regs->psw.amode64 == 1 ? "64" : "???"),
; 812  :         regs->psw.IA_G);
; 813  : 
; 814  :     if ( WAITSTATE( &regs->psw ) )

  00ed5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00edd	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00ee1	83 e0 02	 and	 eax, 2
  00ee4	85 c0		 test	 eax, eax
  00ee6	74 2e		 je	 SHORT $LN68@psw_cmd

; 815  :     {
; 816  :         if ( !IS_IC_DISABLED_WAIT_PSW( regs ) )     rc = 1; /* Enabled Wait */

  00ee8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ef0	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00ef3	25 f0 ff 00 5f	 and	 eax, 1593901040		; 5f00fff0H
  00ef8	85 c0		 test	 eax, eax
  00efa	74 0d		 je	 SHORT $LN70@psw_cmd
  00efc	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR rc$[rsp], 1
  00f07	eb 0b		 jmp	 SHORT $LN71@psw_cmd
$LN70@psw_cmd:

; 817  :         else                                        rc = 2; /* Disabled Wait */

  00f09	c7 84 24 94 00
	00 00 02 00 00
	00		 mov	 DWORD PTR rc$[rsp], 2
$LN71@psw_cmd:

; 818  :     }

  00f14	eb 4d		 jmp	 SHORT $LN69@psw_cmd
$LN68@psw_cmd:

; 819  :     else if ( sysblk.instbreak )                    rc = 3; /* Instruction Step */

  00f16	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f1d	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00f23	c1 e8 0a	 shr	 eax, 10
  00f26	83 e0 01	 and	 eax, 1
  00f29	85 c0		 test	 eax, eax
  00f2b	74 0d		 je	 SHORT $LN72@psw_cmd
  00f2d	c7 84 24 94 00
	00 00 03 00 00
	00		 mov	 DWORD PTR rc$[rsp], 3
  00f38	eb 29		 jmp	 SHORT $LN73@psw_cmd
$LN72@psw_cmd:

; 820  :     else if ( regs->cpustate == CPUSTATE_STOPPED )  rc = 4; /* Manual Mode */

  00f3a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00f42	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  00f46	83 f8 03	 cmp	 eax, 3
  00f49	75 0d		 jne	 SHORT $LN74@psw_cmd
  00f4b	c7 84 24 94 00
	00 00 04 00 00
	00		 mov	 DWORD PTR rc$[rsp], 4
  00f56	eb 0b		 jmp	 SHORT $LN75@psw_cmd
$LN74@psw_cmd:

; 821  :     else                                            rc = 0; /* Running Normal */

  00f58	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$[rsp], 0
$LN75@psw_cmd:
$LN73@psw_cmd:
$LN69@psw_cmd:

; 822  : 
; 823  :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00f63	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f6a	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00f71	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00f78	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00f80	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159744
  00f87	48 8b c8	 mov	 rcx, rax
  00f8a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 824  : 
; 825  :     return rc;

  00f90	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
$LN1@psw_cmd:

; 826  : }

  00f97	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00f9f	48 33 cc	 xor	 rcx, rsp
  00fa2	e8 00 00 00 00	 call	 __security_check_cookie
  00fa7	48 81 c4 58 03
	00 00		 add	 rsp, 856		; 00000358H
  00fae	c3		 ret	 0
psw_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
cpu$ = 80
rc$ = 84
tv132 = 88
regs$ = 96
tv73 = 104
p$1 = 112
argc$ = 144
argv$ = 152
cmdline$ = 160
pr_cmd	PROC

; 548  : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 549  :     REGS  *regs;
; 550  :     int    cpu, rc = 0;

  00015	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@pr_cmd:

; 551  : 
; 552  :     UNREFERENCED( cmdline );

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@pr_cmd

; 553  : 
; 554  :     /* Command affects whatever the panel's current "target" cpu is. */
; 555  :     cpu = sysblk.pcpu;

  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002a	8b 80 54 13 00
	00		 mov	 eax, DWORD PTR [rax+4948]
  00030	89 44 24 50	 mov	 DWORD PTR cpu$[rsp], eax

; 556  : 
; 557  :     if (!IS_CPU_ONLINE( cpu ))

  00034	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00040	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00049	0f 85 8e 00 00
	00		 jne	 $LN10@pr_cmd

; 558  :     {
; 559  :         // "Processor %s%02X: processor is not %s"
; 560  :         WRMSG( HHC00816, "W", PTYPSTR( cpu ), cpu, "online" );

  0004f	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  00054	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005b	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00069	48 89 44 24 68	 mov	 QWORD PTR tv73[rsp], rax
  0006e	b9 01 00 00 00	 mov	 ecx, 1
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159555
  00080	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00085	8b 4c 24 50	 mov	 ecx, DWORD PTR cpu$[rsp]
  00089	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0008d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv73[rsp]
  00092	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159556
  0009e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159557
  000aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159558
  000c1	ba 30 02 00 00	 mov	 edx, 560		; 00000230H
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159559
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 561  :         return -1;

  000d3	b8 ff ff ff ff	 mov	 eax, -1
  000d8	e9 fc 00 00 00	 jmp	 $LN1@pr_cmd
$LN10@pr_cmd:

; 562  :     }
; 563  : 
; 564  :     regs = sysblk.regs[ cpu ];

  000dd	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  000e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e9	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  000f1	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax

; 565  :     obtain_lock( &sysblk.cpulock[ cpu ]);

  000f6	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00102	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159560
  00111	48 8b c8	 mov	 rcx, rax
  00114	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 566  : 
; 567  :     switch( regs->arch_mode )

  0011a	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  0011f	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  00122	89 44 24 58	 mov	 DWORD PTR tv132[rsp], eax
  00126	83 7c 24 58 00	 cmp	 DWORD PTR tv132[rsp], 0
  0012b	74 10		 je	 SHORT $LN11@pr_cmd
  0012d	83 7c 24 58 01	 cmp	 DWORD PTR tv132[rsp], 1
  00132	74 28		 je	 SHORT $LN12@pr_cmd
  00134	83 7c 24 58 02	 cmp	 DWORD PTR tv132[rsp], 2
  00139	74 40		 je	 SHORT $LN13@pr_cmd
  0013b	eb 5d		 jmp	 SHORT $LN14@pr_cmd
$LN11@pr_cmd:

; 568  :     {
; 569  : #if defined( _370 )
; 570  :     case ARCH_370_IDX:
; 571  :         rc = s370_archdep_pr_cmd( regs, argc, argv ); break;

  0013d	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  00145	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  0014c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00151	e8 00 00 00 00	 call	 s370_archdep_pr_cmd
  00156	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax
  0015a	eb 55		 jmp	 SHORT $LN5@pr_cmd
$LN12@pr_cmd:

; 572  : #endif
; 573  : #if defined( _390 )
; 574  :     case ARCH_390_IDX:
; 575  :         rc = s390_archdep_pr_cmd( regs, argc, argv ); break;

  0015c	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  00164	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  0016b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00170	e8 00 00 00 00	 call	 s390_archdep_pr_cmd
  00175	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax
  00179	eb 36		 jmp	 SHORT $LN5@pr_cmd
$LN13@pr_cmd:

; 576  : #endif
; 577  : #if defined( _900 )
; 578  :     case ARCH_900_IDX:
; 579  :         rc = z900_archdep_pr_cmd( regs, argc, argv ); break;

  0017b	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  00183	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  0018a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0018f	e8 00 00 00 00	 call	 z900_archdep_pr_cmd
  00194	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax
  00198	eb 17		 jmp	 SHORT $LN5@pr_cmd
$LN14@pr_cmd:
$LN9@pr_cmd:

; 580  : #endif
; 581  :     default: CRASH();

  0019a	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  001a3	48 8b 44 24 70	 mov	 rax, QWORD PTR p$1[rsp]
  001a8	c6 00 00	 mov	 BYTE PTR [rax], 0
  001ab	33 c0		 xor	 eax, eax
  001ad	85 c0		 test	 eax, eax
  001af	75 e9		 jne	 SHORT $LN9@pr_cmd
$LN5@pr_cmd:

; 582  :     }
; 583  : 
; 584  :     release_lock( &sysblk.cpulock[ cpu ]);

  001b1	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  001b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001bd	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  001c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159565
  001cc	48 8b c8	 mov	 rcx, rax
  001cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 585  :     return rc;

  001d5	8b 44 24 54	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@pr_cmd:

; 586  : }

  001d9	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001e0	c3		 ret	 0
pr_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
tv90 = 80
regs$ = 88
buf$ = 96
__$ArrayPad$ = 480
argc$ = 512
argv$ = 520
cmdline$ = 528
ar_cmd	PROC

; 516  : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@ar_cmd:

; 517  : REGS *regs;
; 518  : char buf[384];
; 519  : 
; 520  :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@ar_cmd
$LN7@ar_cmd:

; 521  :     UNREFERENCED(argc);

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN7@ar_cmd
$LN10@ar_cmd:

; 522  :     UNREFERENCED(argv);

  00033	33 c0		 xor	 eax, eax
  00035	85 c0		 test	 eax, eax
  00037	75 fa		 jne	 SHORT $LN10@ar_cmd

; 523  : 
; 524  :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00040	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004e	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159514
  0005d	48 8b c8	 mov	 rcx, rax
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 525  : 
; 526  :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  00066	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0007b	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00084	0f 85 ca 00 00
	00		 jne	 $LN11@ar_cmd

; 527  :     {
; 528  :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0008a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00091	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0009f	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159516
  000ae	48 8b c8	 mov	 rcx, rax
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 529  :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  000b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000be	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000cc	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000da	48 89 44 24 50	 mov	 QWORD PTR tv90[rsp], rax
  000df	b9 01 00 00 00	 mov	 ecx, 1
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159517
  000f1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000fd	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  00103	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00107	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv90[rsp]
  0010c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159518
  00118	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159519
  00124	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00129	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159520
  0013b	ba 11 02 00 00	 mov	 edx, 529		; 00000211H
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159521
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 530  :         return 0;

  0014d	33 c0		 xor	 eax, eax
  0014f	e9 05 01 00 00	 jmp	 $LN1@ar_cmd
$LN11@ar_cmd:

; 531  :     }
; 532  :     regs = sysblk.regs[sysblk.pcpu];

  00154	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0015b	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00162	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00169	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00171	48 89 44 24 58	 mov	 QWORD PTR regs$[rsp], rax

; 533  : 
; 534  :     display_aregs( regs, buf, sizeof(buf), "HHC02272I " );

  00176	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159522
  0017d	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  00183	48 8d 54 24 60	 lea	 rdx, QWORD PTR buf$[rsp]
  00188	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0018d	e8 00 00 00 00	 call	 display_aregs

; 535  :     WRMSG(   HHC02272, "I", "Access registers" );

  00192	b9 01 00 00 00	 mov	 ecx, 1
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159523
  001a4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159524
  001b0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159525
  001bc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159526
  001d3	ba 17 02 00 00	 mov	 edx, 535		; 00000217H
  001d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159527
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 536  :     LOGMSG( "%s", buf );

  001e5	b9 01 00 00 00	 mov	 ecx, 1
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f0	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159528
  00201	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00206	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0020b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00211	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159529
  00218	ba 18 02 00 00	 mov	 edx, 536		; 00000218H
  0021d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159530
  00224	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 537  : 
; 538  :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0022a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00231	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00238	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0023f	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00247	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159531
  0024e	48 8b c8	 mov	 rcx, rax
  00251	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 539  : 
; 540  :     return 0;

  00257	33 c0		 xor	 eax, eax
$LN1@ar_cmd:

; 541  : }

  00259	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00261	48 33 cc	 xor	 rcx, rsp
  00264	e8 00 00 00 00	 call	 __security_check_cookie
  00269	48 81 c4 f8 01
	00 00		 add	 rsp, 504		; 000001f8H
  00270	c3		 ret	 0
ar_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
i$ = 128
regs$ = 136
matches$ = 144
bytemask$ = 148
shift$ = 152
tv146 = 156
tv149 = 160
tv217 = 164
tv226 = 168
tv296 = 172
tv329 = 176
tv332 = 180
tv432 = 184
tv441 = 188
tv511 = 192
pagemask$ = 200
tv208 = 208
tv423 = 212
tv154 = 216
tv155 = 224
tv282 = 232
tv337 = 240
tv338 = 248
tv497 = 256
tv90 = 264
tv195 = 272
tv410 = 280
buf$ = 288
__$ArrayPad$ = 416
argc$ = 464
argv$ = 472
cmdline$ = 480
tlb_cmd	PROC

; 406  : {

$LN52:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	53		 push	 rbx
  0000f	57		 push	 rdi
  00010	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 407  :     int     i;                          /* Index                     */
; 408  :     int     shift;                      /* Number of bits to shift   */
; 409  :     int     bytemask;                   /* Byte mask                 */
; 410  :     U64     pagemask;                   /* Page mask                 */
; 411  :     int     matches = 0;                /* Number aeID matches       */

  00029	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR matches$[rsp], 0
$LN4@tlb_cmd:

; 412  :     REGS   *regs;
; 413  :     char    buf[128];
; 414  : 
; 415  : 
; 416  :     UNREFERENCED(argc);

  00034	33 c0		 xor	 eax, eax
  00036	85 c0		 test	 eax, eax
  00038	75 fa		 jne	 SHORT $LN4@tlb_cmd
$LN7@tlb_cmd:

; 417  :     UNREFERENCED(argv);

  0003a	33 c0		 xor	 eax, eax
  0003c	85 c0		 test	 eax, eax
  0003e	75 fa		 jne	 SHORT $LN7@tlb_cmd
$LN10@tlb_cmd:

; 418  :     UNREFERENCED(cmdline);

  00040	33 c0		 xor	 eax, eax
  00042	85 c0		 test	 eax, eax
  00044	75 fa		 jne	 SHORT $LN10@tlb_cmd

; 419  : 
; 420  :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  00046	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0004d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00054	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005b	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159440
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 421  : 
; 422  :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007a	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00081	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00088	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00091	0f 85 d0 00 00
	00		 jne	 $LN17@tlb_cmd

; 423  :     {
; 424  :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00097	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0009e	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000ac	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159442
  000bb	48 8b c8	 mov	 rcx, rax
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 425  :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  000c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000cb	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000d9	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000e7	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv90[rsp], rax
  000ef	b9 01 00 00 00	 mov	 ecx, 1
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159443
  00101	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00106	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0010d	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  00113	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00117	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv90[rsp]
  0011f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159444
  0012b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159445
  00137	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00141	41 b9 03 00 00
	00		 mov	 r9d, 3
  00147	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159446
  0014e	ba a9 01 00 00	 mov	 edx, 425		; 000001a9H
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159447
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 426  :         return 0;

  00160	33 c0		 xor	 eax, eax
  00162	e9 e7 0b 00 00	 jmp	 $LN1@tlb_cmd
$LN17@tlb_cmd:

; 427  :     }
; 428  :     regs = sysblk.regs[sysblk.pcpu];

  00167	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0016e	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00175	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0017c	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00184	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 429  :     shift = regs->arch_mode == ARCH_370_IDX ? 11 : 12;

  0018c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00194	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00198	75 0d		 jne	 SHORT $LN20@tlb_cmd
  0019a	c7 84 24 9c 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR tv146[rsp], 11
  001a5	eb 0b		 jmp	 SHORT $LN21@tlb_cmd
$LN20@tlb_cmd:
  001a7	c7 84 24 9c 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR tv146[rsp], 12
$LN21@tlb_cmd:
  001b2	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv146[rsp]
  001b9	89 84 24 98 00
	00 00		 mov	 DWORD PTR shift$[rsp], eax

; 430  :     bytemask = regs->arch_mode == ARCH_370_IDX ? 0x1FFFFF : 0x3FFFFF;

  001c0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001c8	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  001cc	75 0d		 jne	 SHORT $LN22@tlb_cmd
  001ce	c7 84 24 a0 00
	00 00 ff ff 1f
	00		 mov	 DWORD PTR tv149[rsp], 2097151 ; 001fffffH
  001d9	eb 0b		 jmp	 SHORT $LN23@tlb_cmd
$LN22@tlb_cmd:
  001db	c7 84 24 a0 00
	00 00 ff ff 3f
	00		 mov	 DWORD PTR tv149[rsp], 4194303 ; 003fffffH
$LN23@tlb_cmd:
  001e6	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv149[rsp]
  001ed	89 84 24 94 00
	00 00		 mov	 DWORD PTR bytemask$[rsp], eax

; 431  :     pagemask = regs->arch_mode == ARCH_370_IDX ? 0x00E00000 :

  001f4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001fc	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00200	75 0e		 jne	 SHORT $LN26@tlb_cmd
  00202	48 c7 84 24 e0
	00 00 00 00 00
	e0 00		 mov	 QWORD PTR tv155[rsp], 14680064 ; 00e00000H
  0020e	eb 38		 jmp	 SHORT $LN27@tlb_cmd
$LN26@tlb_cmd:
  00210	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00218	83 78 64 01	 cmp	 DWORD PTR [rax+100], 1
  0021c	75 0e		 jne	 SHORT $LN24@tlb_cmd
  0021e	48 c7 84 24 d8
	00 00 00 00 00
	c0 7f		 mov	 QWORD PTR tv154[rsp], 2143289344 ; 7fc00000H
  0022a	eb 0c		 jmp	 SHORT $LN25@tlb_cmd
$LN24@tlb_cmd:
  0022c	48 c7 84 24 d8
	00 00 00 00 00
	c0 ff		 mov	 QWORD PTR tv154[rsp], -4194304 ; ffffffffffc00000H
$LN25@tlb_cmd:
  00238	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv154[rsp]
  00240	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv155[rsp], rax
$LN27@tlb_cmd:
  00248	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv155[rsp]
  00250	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pagemask$[rsp], rax

; 432  :                regs->arch_mode == ARCH_390_IDX ? 0x7FC00000 :
; 433  :                                      0xFFFFFFFFFFC00000ULL;
; 434  : 
; 435  :     MSGBUF( buf, "tlbID 0x%6.6X mainstor %p",regs->tlbID,regs->mainstor);

  00258	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00260	48 8b 80 48 08
	00 00		 mov	 rax, QWORD PTR [rax+2120]
  00267	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00274	44 8b 88 58 b0
	00 00		 mov	 r9d, DWORD PTR [rax+45144]
  0027b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159448
  00282	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00287	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0028f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 436  :     WRMSG(HHC02284, "I", buf);

  00295	b9 01 00 00 00	 mov	 ecx, 1
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159449
  002b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159450
  002c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  002d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159451
  002d7	ba b4 01 00 00	 mov	 edx, 436		; 000001b4H
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159452
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 437  :     WRMSG(HHC02284, "I", "  ix              asd            vaddr              pte   id c p r w ky     main");

  002e9	b9 01 00 00 00	 mov	 ecx, 1
  002ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159453
  002fb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00300	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159454
  00307	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159455
  00313	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00318	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0031d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00323	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159456
  0032a	ba b5 01 00 00	 mov	 edx, 437		; 000001b5H
  0032f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159457
  00336	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 438  :     for (i = 0; i < TLBN; i++)

  0033c	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00347	eb 10		 jmp	 SHORT $LN13@tlb_cmd
$LN11@tlb_cmd:
  00349	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00350	ff c0		 inc	 eax
  00352	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN13@tlb_cmd:
  00359	81 bc 24 80 00
	00 00 00 04 00
	00		 cmp	 DWORD PTR i$[rsp], 1024	; 00000400H
  00364	0f 8d 53 03 00
	00		 jge	 $LN12@tlb_cmd

; 439  :     {
; 440  :         MSGBUF( buf, "%s%3.3X %16.16"PRIX64" %16.16"PRIX64" %16.16"PRIX64" %4.4X %1d %1d %1d %1d %2.2X %8.8X",

  0036a	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00372	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0037a	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  00382	83 e0 02	 and	 eax, 2
  00385	85 c0		 test	 eax, eax
  00387	74 0d		 je	 SHORT $LN28@tlb_cmd
  00389	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv217[rsp], 1
  00394	eb 0b		 jmp	 SHORT $LN29@tlb_cmd
$LN28@tlb_cmd:
  00396	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv217[rsp], 0
$LN29@tlb_cmd:
  003a1	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  003a9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003b1	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  003b9	83 e0 04	 and	 eax, 4
  003bc	85 c0		 test	 eax, eax
  003be	74 0d		 je	 SHORT $LN30@tlb_cmd
  003c0	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv226[rsp], 1
  003cb	eb 0b		 jmp	 SHORT $LN31@tlb_cmd
$LN30@tlb_cmd:
  003cd	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv226[rsp], 0
$LN31@tlb_cmd:
  003d8	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  003e0	48 63 8c 24 94
	00 00 00	 movsxd	 rcx, DWORD PTR bytemask$[rsp]
  003e8	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  003f0	48 8b 84 c2 60
	d0 00 00	 mov	 rax, QWORD PTR [rdx+rax*8+53344]
  003f8	48 23 c1	 and	 rax, rcx
  003fb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00403	8b 89 58 b0 00
	00		 mov	 ecx, DWORD PTR [rcx+45144]
  00409	48 3b c1	 cmp	 rax, rcx
  0040c	75 11		 jne	 SHORT $LN32@tlb_cmd
  0040e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159458
  00415	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv282[rsp], rax
  0041d	eb 0f		 jmp	 SHORT $LN33@tlb_cmd
$LN32@tlb_cmd:
  0041f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159459
  00426	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv282[rsp], rax
$LN33@tlb_cmd:
  0042e	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00436	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0043e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00446	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR pagemask$[rsp]
  0044e	48 8b 8c ca 60
	d0 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+53344]
  00456	49 23 c8	 and	 rcx, r8
  00459	48 89 8c 24 10
	01 00 00	 mov	 QWORD PTR tv195[rsp], rcx
  00461	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR shift$[rsp]
  00468	0f b6 ca	 movzx	 ecx, dl
  0046b	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  00472	d3 e2		 shl	 edx, cl
  00474	8b ca		 mov	 ecx, edx
  00476	8b c9		 mov	 ecx, ecx
  00478	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv195[rsp]
  00480	48 0b d1	 or	 rdx, rcx
  00483	48 8b ca	 mov	 rcx, rdx
  00486	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0048e	48 8b 84 c2 60
	10 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+69728]
  00496	48 33 c1	 xor	 rax, rcx
  00499	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004a1	48 2b 81 48 08
	00 00		 sub	 rax, QWORD PTR [rcx+2120]
  004a8	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  004b0	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004b8	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  004c0	89 8c 24 d0 00
	00 00		 mov	 DWORD PTR tv208[rsp], ecx
  004c7	48 63 94 24 80
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  004cf	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004d7	41 0f b6 94 10
	60 58 01 00	 movzx	 edx, BYTE PTR [r8+rdx+88160]
  004e0	4c 63 84 24 80
	00 00 00	 movsxd	 r8, DWORD PTR i$[rsp]
  004e8	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004f0	47 0f b6 84 01
	60 54 01 00	 movzx	 r8d, BYTE PTR [r9+r8+87136]
  004f9	4c 63 8c 24 80
	00 00 00	 movsxd	 r9, DWORD PTR i$[rsp]
  00501	4c 63 94 24 94
	00 00 00	 movsxd	 r10, DWORD PTR bytemask$[rsp]
  00509	4c 8b 9c 24 88
	00 00 00	 mov	 r11, QWORD PTR regs$[rsp]
  00511	4f 8b 8c cb 60
	d0 00 00	 mov	 r9, QWORD PTR [r11+r9*8+53344]
  00519	4d 23 ca	 and	 r9, r10
  0051c	4c 63 94 24 80
	00 00 00	 movsxd	 r10, DWORD PTR i$[rsp]
  00524	4c 63 9c 24 80
	00 00 00	 movsxd	 r11, DWORD PTR i$[rsp]
  0052c	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR regs$[rsp]
  00534	48 8b bc 24 c8
	00 00 00	 mov	 rdi, QWORD PTR pagemask$[rsp]
  0053c	4a 8b 9c db 60
	d0 00 00	 mov	 rbx, QWORD PTR [rbx+r11*8+53344]
  00544	48 23 df	 and	 rbx, rdi
  00547	8b bc 24 98 00
	00 00		 mov	 edi, DWORD PTR shift$[rsp]
  0054e	40 0f b6 cf	 movzx	 ecx, dil
  00552	8b bc 24 80 00
	00 00		 mov	 edi, DWORD PTR i$[rsp]
  00559	d3 e7		 shl	 edi, cl
  0055b	8b cf		 mov	 ecx, edi
  0055d	48 63 c9	 movsxd	 rcx, ecx
  00560	48 0b d9	 or	 rbx, rcx
  00563	48 8b cb	 mov	 rcx, rbx
  00566	48 63 9c 24 80
	00 00 00	 movsxd	 rbx, DWORD PTR i$[rsp]
  0056e	89 44 24 70	 mov	 DWORD PTR [rsp+112], eax
  00572	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv208[rsp]
  00579	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  0057d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv217[rsp]
  00584	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  00588	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv226[rsp]
  0058f	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00593	89 54 24 50	 mov	 DWORD PTR [rsp+80], edx
  00597	44 89 44 24 48	 mov	 DWORD PTR [rsp+72], r8d
  0059c	44 89 4c 24 40	 mov	 DWORD PTR [rsp+64], r9d
  005a1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005a9	4a 8b 84 d0 60
	f0 00 00	 mov	 rax, QWORD PTR [rax+r10*8+61536]
  005b1	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  005b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005bb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005c3	48 8b 84 d8 60
	b0 00 00	 mov	 rax, QWORD PTR [rax+rbx*8+45152]
  005cb	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  005d0	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  005d7	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  005db	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR tv282[rsp]
  005e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159460
  005ea	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  005ef	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  005f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 441  :          ((regs->tlb.TLB_VADDR_G(i) & bytemask) == regs->tlbID ? "*" : " "),
; 442  :          i,regs->tlb.TLB_ASD_G(i),
; 443  :          ((regs->tlb.TLB_VADDR_G(i) & pagemask) | (i << shift)),
; 444  :          regs->tlb.TLB_PTE_G(i),(int)(regs->tlb.TLB_VADDR_G(i) & bytemask),
; 445  :          regs->tlb.common[i],regs->tlb.protect[i],
; 446  :          (regs->tlb.acc[i] & ACC_READ) != 0,(regs->tlb.acc[i] & ACC_WRITE) != 0,
; 447  :          regs->tlb.skey[i],
; 448  :          (unsigned int)(MAINADDR(regs->tlb.main[i],
; 449  :                   ((regs->tlb.TLB_VADDR_G(i) & pagemask) | (unsigned int)(i << shift)))
; 450  :                   - regs->mainstor));
; 451  :         matches += ((regs->tlb.TLB_VADDR(i) & bytemask) == regs->tlbID);

  005fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00605	48 63 8c 24 94
	00 00 00	 movsxd	 rcx, DWORD PTR bytemask$[rsp]
  0060d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00615	48 8b 84 c2 60
	d0 00 00	 mov	 rax, QWORD PTR [rdx+rax*8+53344]
  0061d	48 23 c1	 and	 rax, rcx
  00620	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00628	8b 89 58 b0 00
	00		 mov	 ecx, DWORD PTR [rcx+45144]
  0062e	48 3b c1	 cmp	 rax, rcx
  00631	75 0d		 jne	 SHORT $LN34@tlb_cmd
  00633	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv296[rsp], 1
  0063e	eb 0b		 jmp	 SHORT $LN35@tlb_cmd
$LN34@tlb_cmd:
  00640	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv296[rsp], 0
$LN35@tlb_cmd:
  0064b	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv296[rsp]
  00652	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR matches$[rsp]
  00659	03 c8		 add	 ecx, eax
  0065b	8b c1		 mov	 eax, ecx
  0065d	89 84 24 90 00
	00 00		 mov	 DWORD PTR matches$[rsp], eax

; 452  :        WRMSG(HHC02284, "I", buf);

  00664	b9 01 00 00 00	 mov	 ecx, 1
  00669	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0066f	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00677	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0067c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159461
  00683	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00688	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159462
  0068f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00694	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00699	41 b9 03 00 00
	00		 mov	 r9d, 3
  0069f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159463
  006a6	ba c4 01 00 00	 mov	 edx, 452		; 000001c4H
  006ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159464
  006b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 453  :     }

  006b8	e9 8c fc ff ff	 jmp	 $LN11@tlb_cmd
$LN12@tlb_cmd:

; 454  :     MSGBUF( buf, "%d tlbID matches", matches);

  006bd	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR matches$[rsp]
  006c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159465
  006cc	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  006d1	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 455  :     WRMSG(HHC02284, "I", buf);

  006df	b9 01 00 00 00	 mov	 ecx, 1
  006e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006ea	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159466
  006fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00703	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159467
  0070a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0070f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00714	41 b9 03 00 00
	00		 mov	 r9d, 3
  0071a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159468
  00721	ba c7 01 00 00	 mov	 edx, 455		; 000001c7H
  00726	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159469
  0072d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 456  : 
; 457  :     if (regs->sie_active)

  00733	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0073b	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00741	83 e0 01	 and	 eax, 1
  00744	85 c0		 test	 eax, eax
  00746	0f 84 d3 05 00
	00		 je	 $LN18@tlb_cmd

; 458  :     {
; 459  :         regs = GUESTREGS;

  0074c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00754	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  0075b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 460  :         shift = GUESTREGS->arch_mode == ARCH_370_IDX ? 11 : 12;

  00763	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0076b	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  00772	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00776	75 0d		 jne	 SHORT $LN36@tlb_cmd
  00778	c7 84 24 b0 00
	00 00 0b 00 00
	00		 mov	 DWORD PTR tv329[rsp], 11
  00783	eb 0b		 jmp	 SHORT $LN37@tlb_cmd
$LN36@tlb_cmd:
  00785	c7 84 24 b0 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR tv329[rsp], 12
$LN37@tlb_cmd:
  00790	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv329[rsp]
  00797	89 84 24 98 00
	00 00		 mov	 DWORD PTR shift$[rsp], eax

; 461  :         bytemask = regs->arch_mode == ARCH_370_IDX ? 0x1FFFFF : 0x3FFFFF;

  0079e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007a6	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  007aa	75 0d		 jne	 SHORT $LN38@tlb_cmd
  007ac	c7 84 24 b4 00
	00 00 ff ff 1f
	00		 mov	 DWORD PTR tv332[rsp], 2097151 ; 001fffffH
  007b7	eb 0b		 jmp	 SHORT $LN39@tlb_cmd
$LN38@tlb_cmd:
  007b9	c7 84 24 b4 00
	00 00 ff ff 3f
	00		 mov	 DWORD PTR tv332[rsp], 4194303 ; 003fffffH
$LN39@tlb_cmd:
  007c4	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR tv332[rsp]
  007cb	89 84 24 94 00
	00 00		 mov	 DWORD PTR bytemask$[rsp], eax

; 462  :         pagemask = regs->arch_mode == ARCH_370_IDX ? 0x00E00000 :

  007d2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007da	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  007de	75 0e		 jne	 SHORT $LN42@tlb_cmd
  007e0	48 c7 84 24 f8
	00 00 00 00 00
	e0 00		 mov	 QWORD PTR tv338[rsp], 14680064 ; 00e00000H
  007ec	eb 38		 jmp	 SHORT $LN43@tlb_cmd
$LN42@tlb_cmd:
  007ee	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007f6	83 78 64 01	 cmp	 DWORD PTR [rax+100], 1
  007fa	75 0e		 jne	 SHORT $LN40@tlb_cmd
  007fc	48 c7 84 24 f0
	00 00 00 00 00
	c0 7f		 mov	 QWORD PTR tv337[rsp], 2143289344 ; 7fc00000H
  00808	eb 0c		 jmp	 SHORT $LN41@tlb_cmd
$LN40@tlb_cmd:
  0080a	48 c7 84 24 f0
	00 00 00 00 00
	c0 ff		 mov	 QWORD PTR tv337[rsp], -4194304 ; ffffffffffc00000H
$LN41@tlb_cmd:
  00816	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv337[rsp]
  0081e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv338[rsp], rax
$LN43@tlb_cmd:
  00826	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv338[rsp]
  0082e	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pagemask$[rsp], rax

; 463  :                    regs->arch_mode == ARCH_390_IDX ? 0x7FC00000 :
; 464  :                                          0xFFFFFFFFFFC00000ULL;
; 465  : 
; 466  :         MSGBUF( buf, "SIE: tlbID 0x%4.4x mainstor %p",regs->tlbID,regs->mainstor);

  00836	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0083e	48 8b 80 48 08
	00 00		 mov	 rax, QWORD PTR [rax+2120]
  00845	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0084a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00852	44 8b 88 58 b0
	00 00		 mov	 r9d, DWORD PTR [rax+45144]
  00859	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159471
  00860	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00865	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0086d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 467  :         WRMSG(HHC02284, "I", buf);

  00873	b9 01 00 00 00	 mov	 ecx, 1
  00878	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0087e	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00886	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0088b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159472
  00892	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00897	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159473
  0089e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008a8	41 b9 03 00 00
	00		 mov	 r9d, 3
  008ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159474
  008b5	ba d3 01 00 00	 mov	 edx, 467		; 000001d3H
  008ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159475
  008c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 468  :         WRMSG(HHC02284, "I", "  ix              asd            vaddr              pte   id c p r w ky       main");

  008c7	b9 01 00 00 00	 mov	 ecx, 1
  008cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159476
  008d9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159477
  008e5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159478
  008f1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008fb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00901	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159479
  00908	ba d4 01 00 00	 mov	 edx, 468		; 000001d4H
  0090d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159480
  00914	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 469  :         for (i = matches = 0; i < TLBN; i++)

  0091a	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR matches$[rsp], 0
  00925	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR matches$[rsp]
  0092c	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
  00933	eb 10		 jmp	 SHORT $LN16@tlb_cmd
$LN14@tlb_cmd:
  00935	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0093c	ff c0		 inc	 eax
  0093e	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN16@tlb_cmd:
  00945	81 bc 24 80 00
	00 00 00 04 00
	00		 cmp	 DWORD PTR i$[rsp], 1024	; 00000400H
  00950	0f 8d 53 03 00
	00		 jge	 $LN15@tlb_cmd

; 470  :         {
; 471  :             MSGBUF( buf, "%s%3.3X %16.16"PRIX64" %16.16"PRIX64" %16.16"PRIX64" %4.4X %1d %1d %1d %1d %2.2X %8.8X",

  00956	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0095e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00966	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  0096e	83 e0 02	 and	 eax, 2
  00971	85 c0		 test	 eax, eax
  00973	74 0d		 je	 SHORT $LN44@tlb_cmd
  00975	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv432[rsp], 1
  00980	eb 0b		 jmp	 SHORT $LN45@tlb_cmd
$LN44@tlb_cmd:
  00982	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv432[rsp], 0
$LN45@tlb_cmd:
  0098d	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00995	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0099d	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  009a5	83 e0 04	 and	 eax, 4
  009a8	85 c0		 test	 eax, eax
  009aa	74 0d		 je	 SHORT $LN46@tlb_cmd
  009ac	c7 84 24 bc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv441[rsp], 1
  009b7	eb 0b		 jmp	 SHORT $LN47@tlb_cmd
$LN46@tlb_cmd:
  009b9	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv441[rsp], 0
$LN47@tlb_cmd:
  009c4	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  009cc	48 63 8c 24 94
	00 00 00	 movsxd	 rcx, DWORD PTR bytemask$[rsp]
  009d4	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  009dc	48 8b 84 c2 60
	d0 00 00	 mov	 rax, QWORD PTR [rdx+rax*8+53344]
  009e4	48 23 c1	 and	 rax, rcx
  009e7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  009ef	8b 89 58 b0 00
	00		 mov	 ecx, DWORD PTR [rcx+45144]
  009f5	48 3b c1	 cmp	 rax, rcx
  009f8	75 11		 jne	 SHORT $LN48@tlb_cmd
  009fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159481
  00a01	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv497[rsp], rax
  00a09	eb 0f		 jmp	 SHORT $LN49@tlb_cmd
$LN48@tlb_cmd:
  00a0b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159482
  00a12	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv497[rsp], rax
$LN49@tlb_cmd:
  00a1a	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00a22	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00a2a	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00a32	48 8b 9c 24 c8
	00 00 00	 mov	 rbx, QWORD PTR pagemask$[rsp]
  00a3a	48 8b 8c ca 60
	d0 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+53344]
  00a42	48 23 cb	 and	 rcx, rbx
  00a45	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv410[rsp], rcx
  00a4d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR shift$[rsp]
  00a54	0f b6 ca	 movzx	 ecx, dl
  00a57	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  00a5e	d3 e2		 shl	 edx, cl
  00a60	8b ca		 mov	 ecx, edx
  00a62	8b c9		 mov	 ecx, ecx
  00a64	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv410[rsp]
  00a6c	48 0b d1	 or	 rdx, rcx
  00a6f	48 8b ca	 mov	 rcx, rdx
  00a72	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00a7a	48 8b 84 c2 60
	10 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+69728]
  00a82	48 33 c1	 xor	 rax, rcx
  00a85	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a8d	48 2b 81 48 08
	00 00		 sub	 rax, QWORD PTR [rcx+2120]
  00a94	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00a9c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00aa4	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  00aac	89 8c 24 d4 00
	00 00		 mov	 DWORD PTR tv423[rsp], ecx
  00ab3	48 63 94 24 80
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  00abb	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR regs$[rsp]
  00ac3	0f b6 94 13 60
	58 01 00	 movzx	 edx, BYTE PTR [rbx+rdx+88160]
  00acb	48 63 9c 24 80
	00 00 00	 movsxd	 rbx, DWORD PTR i$[rsp]
  00ad3	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR regs$[rsp]
  00adb	0f b6 9c 1f 60
	54 01 00	 movzx	 ebx, BYTE PTR [rdi+rbx+87136]
  00ae3	48 63 bc 24 80
	00 00 00	 movsxd	 rdi, DWORD PTR i$[rsp]
  00aeb	4c 63 84 24 94
	00 00 00	 movsxd	 r8, DWORD PTR bytemask$[rsp]
  00af3	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00afb	49 8b bc f9 60
	d0 00 00	 mov	 rdi, QWORD PTR [r9+rdi*8+53344]
  00b03	49 23 f8	 and	 rdi, r8
  00b06	4c 63 84 24 80
	00 00 00	 movsxd	 r8, DWORD PTR i$[rsp]
  00b0e	4c 63 8c 24 80
	00 00 00	 movsxd	 r9, DWORD PTR i$[rsp]
  00b16	4c 8b 94 24 88
	00 00 00	 mov	 r10, QWORD PTR regs$[rsp]
  00b1e	4c 8b 9c 24 c8
	00 00 00	 mov	 r11, QWORD PTR pagemask$[rsp]
  00b26	4f 8b 8c ca 60
	d0 00 00	 mov	 r9, QWORD PTR [r10+r9*8+53344]
  00b2e	4d 23 cb	 and	 r9, r11
  00b31	44 8b 94 24 98
	00 00 00	 mov	 r10d, DWORD PTR shift$[rsp]
  00b39	41 0f b6 ca	 movzx	 ecx, r10b
  00b3d	44 8b 94 24 80
	00 00 00	 mov	 r10d, DWORD PTR i$[rsp]
  00b45	41 d3 e2	 shl	 r10d, cl
  00b48	41 8b ca	 mov	 ecx, r10d
  00b4b	48 63 c9	 movsxd	 rcx, ecx
  00b4e	4c 0b c9	 or	 r9, rcx
  00b51	49 8b c9	 mov	 rcx, r9
  00b54	4c 63 8c 24 80
	00 00 00	 movsxd	 r9, DWORD PTR i$[rsp]
  00b5c	89 44 24 70	 mov	 DWORD PTR [rsp+112], eax
  00b60	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv423[rsp]
  00b67	89 44 24 68	 mov	 DWORD PTR [rsp+104], eax
  00b6b	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv432[rsp]
  00b72	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  00b76	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv441[rsp]
  00b7d	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00b81	89 54 24 50	 mov	 DWORD PTR [rsp+80], edx
  00b85	89 5c 24 48	 mov	 DWORD PTR [rsp+72], ebx
  00b89	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  00b8d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b95	4a 8b 84 c0 60
	f0 00 00	 mov	 rax, QWORD PTR [rax+r8*8+61536]
  00b9d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00ba2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ba7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00baf	4a 8b 84 c8 60
	b0 00 00	 mov	 rax, QWORD PTR [rax+r9*8+45152]
  00bb7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00bbc	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00bc3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00bc7	4c 8b 8c 24 00
	01 00 00	 mov	 r9, QWORD PTR tv497[rsp]
  00bcf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159483
  00bd6	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00bdb	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00be3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 472  :              ((regs->tlb.TLB_VADDR_G(i) & bytemask) == regs->tlbID ? "*" : " "),
; 473  :              i,regs->tlb.TLB_ASD_G(i),
; 474  :              ((regs->tlb.TLB_VADDR_G(i) & pagemask) | (i << shift)),
; 475  :              regs->tlb.TLB_PTE_G(i),(int)(regs->tlb.TLB_VADDR_G(i) & bytemask),
; 476  :              regs->tlb.common[i],regs->tlb.protect[i],
; 477  :              (regs->tlb.acc[i] & ACC_READ) != 0,(regs->tlb.acc[i] & ACC_WRITE) != 0,
; 478  :              regs->tlb.skey[i],
; 479  :              (unsigned int) (MAINADDR(regs->tlb.main[i],
; 480  :                      ((regs->tlb.TLB_VADDR_G(i) & pagemask) | (unsigned int)(i << shift)))
; 481  :                     - regs->mainstor));
; 482  :             matches += ((regs->tlb.TLB_VADDR(i) & bytemask) == regs->tlbID);

  00be9	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00bf1	48 63 8c 24 94
	00 00 00	 movsxd	 rcx, DWORD PTR bytemask$[rsp]
  00bf9	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00c01	48 8b 84 c2 60
	d0 00 00	 mov	 rax, QWORD PTR [rdx+rax*8+53344]
  00c09	48 23 c1	 and	 rax, rcx
  00c0c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c14	8b 89 58 b0 00
	00		 mov	 ecx, DWORD PTR [rcx+45144]
  00c1a	48 3b c1	 cmp	 rax, rcx
  00c1d	75 0d		 jne	 SHORT $LN50@tlb_cmd
  00c1f	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv511[rsp], 1
  00c2a	eb 0b		 jmp	 SHORT $LN51@tlb_cmd
$LN50@tlb_cmd:
  00c2c	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv511[rsp], 0
$LN51@tlb_cmd:
  00c37	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv511[rsp]
  00c3e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR matches$[rsp]
  00c45	03 c8		 add	 ecx, eax
  00c47	8b c1		 mov	 eax, ecx
  00c49	89 84 24 90 00
	00 00		 mov	 DWORD PTR matches$[rsp], eax

; 483  :            WRMSG(HHC02284, "I", buf);

  00c50	b9 01 00 00 00	 mov	 ecx, 1
  00c55	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c5b	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00c63	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159484
  00c6f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c74	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159485
  00c7b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c80	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c85	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c8b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159486
  00c92	ba e3 01 00 00	 mov	 edx, 483		; 000001e3H
  00c97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159487
  00c9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 484  :         }

  00ca4	e9 8c fc ff ff	 jmp	 $LN14@tlb_cmd
$LN15@tlb_cmd:

; 485  :         MSGBUF( buf, "SIE: %d tlbID matches", matches);

  00ca9	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR matches$[rsp]
  00cb1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159488
  00cb8	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00cbd	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00cc5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 486  :         WRMSG(HHC02284, "I", buf);

  00ccb	b9 01 00 00 00	 mov	 ecx, 1
  00cd0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cd6	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00cde	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ce3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159489
  00cea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00cef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159490
  00cf6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cfb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d00	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d06	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159491
  00d0d	ba e6 01 00 00	 mov	 edx, 486		; 000001e6H
  00d12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159492
  00d19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@tlb_cmd:

; 487  :     }
; 488  : 
; 489  :     release_lock (&sysblk.cpulock[sysblk.pcpu]);

  00d1f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d26	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00d2d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00d34	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00d3c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159493
  00d43	48 8b c8	 mov	 rcx, rax
  00d46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 490  : 
; 491  :     return 0;

  00d4c	33 c0		 xor	 eax, eax
$LN1@tlb_cmd:

; 492  : }

  00d4e	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d56	48 33 cc	 xor	 rcx, rsp
  00d59	e8 00 00 00 00	 call	 __security_check_cookie
  00d5e	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  00d65	5f		 pop	 rdi
  00d66	5b		 pop	 rbx
  00d67	c3		 ret	 0
tlb_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
showregsnone$ = 80
showregsfirst$ = 81
noch9oflow$ = 82
i$ = 84
tv142 = 88
tv137 = 96
tv144 = 104
tv243 = 112
tv238 = 120
tv245 = 128
tv89 = 136
tv149 = 144
tv195 = 152
tv198 = 160
tv250 = 168
msgbuf$ = 176
__$ArrayPad$ = 240
argc$ = 272
argv$ = 280
cmdline$ = 288
traceopt_cmd PROC

; 248  : {

$LN37:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 249  :     int   i;
; 250  :     char  msgbuf[ 64 ];
; 251  :     BYTE  showregsfirst  = sysblk.showregsfirst;

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00034	c1 e8 10	 shr	 eax, 16
  00037	83 e0 01	 and	 eax, 1
  0003a	88 44 24 51	 mov	 BYTE PTR showregsfirst$[rsp], al

; 252  :     BYTE  showregsnone   = sysblk.showregsnone;

  0003e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00045	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0004b	c1 e8 11	 shr	 eax, 17
  0004e	83 e0 01	 and	 eax, 1
  00051	88 44 24 50	 mov	 BYTE PTR showregsnone$[rsp], al

; 253  :     BYTE  noch9oflow     = sysblk.noch9oflow;

  00055	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0005c	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00062	c1 e8 19	 shr	 eax, 25
  00065	83 e0 01	 and	 eax, 1
  00068	88 44 24 52	 mov	 BYTE PTR noch9oflow$[rsp], al
$LN4@traceopt_c:

; 254  : 
; 255  :     UNREFERENCED( cmdline );

  0006c	33 c0		 xor	 eax, eax
  0006e	85 c0		 test	 eax, eax
  00070	75 fa		 jne	 SHORT $LN4@traceopt_c
$LN7@traceopt_c:

; 256  : 
; 257  :     UPPER_ARGV_0( argv );

  00072	48 83 bc 24 18
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0007b	74 47		 je	 SHORT $LN11@traceopt_c
  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0008e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00093	74 2f		 je	 SHORT $LN11@traceopt_c
  00095	b8 08 00 00 00	 mov	 eax, 8
  0009a	48 6b c0 00	 imul	 rax, rax, 0
  0009e	b9 08 00 00 00	 mov	 ecx, 8
  000a3	48 6b c9 00	 imul	 rcx, rcx, 0
  000a7	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000af	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  000b3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000bb	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000bf	e8 00 00 00 00	 call	 strupper
$LN11@traceopt_c:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 a8		 jne	 SHORT $LN7@traceopt_c

; 258  : 
; 259  :     if (argc > 3)

  000ca	83 bc 24 10 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  000d2	7e 7b		 jle	 SHORT $LN12@traceopt_c

; 260  :     {
; 261  :         // "Invalid command usage. Type 'help %s' for assistance."
; 262  :         WRMSG( HHC02299, "E", argv[0] );

  000d4	b8 08 00 00 00	 mov	 eax, 8
  000d9	48 6b c0 00	 imul	 rax, rax, 0
  000dd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv89[rsp], rax
  000e5	b9 01 00 00 00	 mov	 ecx, 1
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f0	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f8	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv89[rsp]
  00100	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00104	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159313
  00110	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159314
  0011c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00121	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00126	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159315
  00133	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159316
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 263  :         return -1;

  00145	b8 ff ff ff ff	 mov	 eax, -1
  0014a	e9 7e 04 00 00	 jmp	 $LN1@traceopt_c
$LN12@traceopt_c:

; 264  :     }
; 265  : 
; 266  :     if (argc <= 1)

  0014f	83 bc 24 10 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00157	0f 8f 13 01 00
	00		 jg	 $LN13@traceopt_c

; 267  :     {
; 268  :         MSGBUF( msgbuf, "%s%s"

  0015d	0f b6 44 24 52	 movzx	 eax, BYTE PTR noch9oflow$[rsp]
  00162	85 c0		 test	 eax, eax
  00164	74 0e		 je	 SHORT $LN25@traceopt_c
  00166	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159319
  0016d	48 89 44 24 60	 mov	 QWORD PTR tv137[rsp], rax
  00172	eb 0c		 jmp	 SHORT $LN26@traceopt_c
$LN25@traceopt_c:
  00174	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159320
  0017b	48 89 44 24 60	 mov	 QWORD PTR tv137[rsp], rax
$LN26@traceopt_c:
  00180	0f b6 44 24 50	 movzx	 eax, BYTE PTR showregsnone$[rsp]
  00185	85 c0		 test	 eax, eax
  00187	74 0e		 je	 SHORT $LN29@traceopt_c
  00189	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159321
  00190	48 89 44 24 68	 mov	 QWORD PTR tv144[rsp], rax
  00195	eb 2d		 jmp	 SHORT $LN30@traceopt_c
$LN29@traceopt_c:
  00197	0f b6 44 24 51	 movzx	 eax, BYTE PTR showregsfirst$[rsp]
  0019c	85 c0		 test	 eax, eax
  0019e	74 0e		 je	 SHORT $LN27@traceopt_c
  001a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159322
  001a7	48 89 44 24 58	 mov	 QWORD PTR tv142[rsp], rax
  001ac	eb 0c		 jmp	 SHORT $LN28@traceopt_c
$LN27@traceopt_c:
  001ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159323
  001b5	48 89 44 24 58	 mov	 QWORD PTR tv142[rsp], rax
$LN28@traceopt_c:
  001ba	48 8b 44 24 58	 mov	 rax, QWORD PTR tv142[rsp]
  001bf	48 89 44 24 68	 mov	 QWORD PTR tv144[rsp], rax
$LN30@traceopt_c:
  001c4	48 8b 44 24 60	 mov	 rax, QWORD PTR tv137[rsp]
  001c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ce	4c 8b 4c 24 68	 mov	 r9, QWORD PTR tv144[rsp]
  001d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159324
  001da	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001df	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 269  :             , showregsnone  ? "NOREGS" : showregsfirst ? "REGSFIRST" : "TRADITIONAL"
; 270  :             , noch9oflow ? " NOCH9OFLOW" : ""
; 271  :         );
; 272  : 
; 273  :         // "%-14s: %s"
; 274  :         WRMSG( HHC02203, "I", argv[0], msgbuf );

  001ed	b8 08 00 00 00	 mov	 eax, 8
  001f2	48 6b c0 00	 imul	 rax, rax, 0
  001f6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv149[rsp], rax
  001fe	b9 01 00 00 00	 mov	 ecx, 1
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00209	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00211	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00216	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0021e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv149[rsp]
  00226	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159325
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159326
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159327
  00259	ba 12 01 00 00	 mov	 edx, 274		; 00000112H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159328
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 275  :     }

  0026b	e9 5b 03 00 00	 jmp	 $LN14@traceopt_c
$LN13@traceopt_c:

; 276  :     else // (argc >= 2)
; 277  :     {
; 278  :         noch9oflow = FALSE;     // (reset to default)

  00270	c6 44 24 52 00	 mov	 BYTE PTR noch9oflow$[rsp], 0

; 279  : 
; 280  :         for (i=1; i < argc; i++)

  00275	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  0027d	eb 0a		 jmp	 SHORT $LN10@traceopt_c
$LN8@traceopt_c:
  0027f	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  00283	ff c0		 inc	 eax
  00285	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN10@traceopt_c:
  00289	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00290	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  00294	0f 8d 79 01 00
	00		 jge	 $LN9@traceopt_c

; 281  :         {
; 282  :             if (CMD( argv[i], TRADITIONAL, 4 ))

  0029a	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0029f	41 b8 04 00 00
	00		 mov	 r8d, 4
  002a5	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002ad	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159331
  002b8	e8 00 00 00 00	 call	 strcaseabbrev
  002bd	85 c0		 test	 eax, eax
  002bf	74 0f		 je	 SHORT $LN15@traceopt_c

; 283  :             {
; 284  :                 showregsfirst = FALSE;

  002c1	c6 44 24 51 00	 mov	 BYTE PTR showregsfirst$[rsp], 0

; 285  :                 showregsnone  = FALSE;

  002c6	c6 44 24 50 00	 mov	 BYTE PTR showregsnone$[rsp], 0

; 286  :             }

  002cb	e9 3e 01 00 00	 jmp	 $LN16@traceopt_c
$LN15@traceopt_c:

; 287  :             else if (CMD( argv[i], REGSFIRST, 4 ))

  002d0	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  002d5	41 b8 04 00 00
	00		 mov	 r8d, 4
  002db	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002e3	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159334
  002ee	e8 00 00 00 00	 call	 strcaseabbrev
  002f3	85 c0		 test	 eax, eax
  002f5	74 0f		 je	 SHORT $LN17@traceopt_c

; 288  :             {
; 289  :                 showregsfirst = TRUE;

  002f7	c6 44 24 51 01	 mov	 BYTE PTR showregsfirst$[rsp], 1

; 290  :                 showregsnone  = FALSE;

  002fc	c6 44 24 50 00	 mov	 BYTE PTR showregsnone$[rsp], 0

; 291  :             }

  00301	e9 08 01 00 00	 jmp	 $LN18@traceopt_c
$LN17@traceopt_c:

; 292  :             else if (CMD( argv[i], NOREGS, 4 ))

  00306	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0030b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00311	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00319	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159337
  00324	e8 00 00 00 00	 call	 strcaseabbrev
  00329	85 c0		 test	 eax, eax
  0032b	74 0f		 je	 SHORT $LN19@traceopt_c

; 293  :             {
; 294  :                 showregsfirst = FALSE;

  0032d	c6 44 24 51 00	 mov	 BYTE PTR showregsfirst$[rsp], 0

; 295  :                 showregsnone  = TRUE;

  00332	c6 44 24 50 01	 mov	 BYTE PTR showregsnone$[rsp], 1

; 296  :             }

  00337	e9 d2 00 00 00	 jmp	 $LN20@traceopt_c
$LN19@traceopt_c:

; 297  :             else if (CMD( argv[i], NOCH9OFLOW, 5 ))

  0033c	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  00341	41 b8 05 00 00
	00		 mov	 r8d, 5
  00347	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0034f	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00353	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159340
  0035a	e8 00 00 00 00	 call	 strcaseabbrev
  0035f	85 c0		 test	 eax, eax
  00361	74 0a		 je	 SHORT $LN21@traceopt_c

; 298  :             {
; 299  :                 noch9oflow = TRUE;

  00363	c6 44 24 52 01	 mov	 BYTE PTR noch9oflow$[rsp], 1

; 300  :             }

  00368	e9 a1 00 00 00	 jmp	 $LN22@traceopt_c
$LN21@traceopt_c:

; 301  :             else
; 302  :             {
; 303  :                 // "Invalid value %s specified for %s"
; 304  :                 WRMSG( HHC01451, "E", argv[i], argv[0] );

  0036d	b8 08 00 00 00	 mov	 eax, 8
  00372	48 6b c0 00	 imul	 rax, rax, 0
  00376	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv195[rsp], rax
  0037e	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR i$[rsp]
  00383	48 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR tv198[rsp], rcx
  0038b	b9 01 00 00 00	 mov	 ecx, 1
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00396	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0039e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv195[rsp]
  003a6	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003aa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003af	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003b7	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv198[rsp]
  003bf	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  003c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159341
  003cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159342
  003db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  003eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159343
  003f2	ba 30 01 00 00	 mov	 edx, 304		; 00000130H
  003f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159344
  003fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 305  :                 return -1;

  00404	b8 ff ff ff ff	 mov	 eax, -1
  00409	e9 bf 01 00 00	 jmp	 $LN1@traceopt_c
$LN22@traceopt_c:
$LN20@traceopt_c:
$LN18@traceopt_c:
$LN16@traceopt_c:

; 306  :             }
; 307  :         }

  0040e	e9 6c fe ff ff	 jmp	 $LN8@traceopt_c
$LN9@traceopt_c:

; 308  : 
; 309  :         sysblk.showregsfirst = showregsfirst;

  00413	0f b6 44 24 51	 movzx	 eax, BYTE PTR showregsfirst$[rsp]
  00418	83 e0 01	 and	 eax, 1
  0041b	c1 e0 10	 shl	 eax, 16
  0041e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00425	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  0042b	0f ba f1 10	 btr	 ecx, 16
  0042f	0b c8		 or	 ecx, eax
  00431	8b c1		 mov	 eax, ecx
  00433	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0043a	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 310  :         sysblk.showregsnone  = showregsnone;

  00440	0f b6 44 24 50	 movzx	 eax, BYTE PTR showregsnone$[rsp]
  00445	83 e0 01	 and	 eax, 1
  00448	c1 e0 11	 shl	 eax, 17
  0044b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00452	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00458	0f ba f1 11	 btr	 ecx, 17
  0045c	0b c8		 or	 ecx, eax
  0045e	8b c1		 mov	 eax, ecx
  00460	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00467	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 311  :         sysblk.noch9oflow    = noch9oflow;

  0046d	0f b6 44 24 52	 movzx	 eax, BYTE PTR noch9oflow$[rsp]
  00472	83 e0 01	 and	 eax, 1
  00475	c1 e0 19	 shl	 eax, 25
  00478	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0047f	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00485	0f ba f1 19	 btr	 ecx, 25
  00489	0b c8		 or	 ecx, eax
  0048b	8b c1		 mov	 eax, ecx
  0048d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00494	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 312  : 
; 313  :         if (MLVL( VERBOSE ))

  0049a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004a1	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  004a7	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  004ac	85 c0		 test	 eax, eax
  004ae	0f 84 17 01 00
	00		 je	 $LN23@traceopt_c

; 314  :         {
; 315  :             MSGBUF( msgbuf, "%s%s"

  004b4	0f b6 44 24 52	 movzx	 eax, BYTE PTR noch9oflow$[rsp]
  004b9	85 c0		 test	 eax, eax
  004bb	74 0e		 je	 SHORT $LN31@traceopt_c
  004bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159346
  004c4	48 89 44 24 78	 mov	 QWORD PTR tv238[rsp], rax
  004c9	eb 0c		 jmp	 SHORT $LN32@traceopt_c
$LN31@traceopt_c:
  004cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159347
  004d2	48 89 44 24 78	 mov	 QWORD PTR tv238[rsp], rax
$LN32@traceopt_c:
  004d7	0f b6 44 24 50	 movzx	 eax, BYTE PTR showregsnone$[rsp]
  004dc	85 c0		 test	 eax, eax
  004de	74 11		 je	 SHORT $LN35@traceopt_c
  004e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159348
  004e7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv245[rsp], rax
  004ef	eb 30		 jmp	 SHORT $LN36@traceopt_c
$LN35@traceopt_c:
  004f1	0f b6 44 24 51	 movzx	 eax, BYTE PTR showregsfirst$[rsp]
  004f6	85 c0		 test	 eax, eax
  004f8	74 0e		 je	 SHORT $LN33@traceopt_c
  004fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159349
  00501	48 89 44 24 70	 mov	 QWORD PTR tv243[rsp], rax
  00506	eb 0c		 jmp	 SHORT $LN34@traceopt_c
$LN33@traceopt_c:
  00508	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159350
  0050f	48 89 44 24 70	 mov	 QWORD PTR tv243[rsp], rax
$LN34@traceopt_c:
  00514	48 8b 44 24 70	 mov	 rax, QWORD PTR tv243[rsp]
  00519	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv245[rsp], rax
$LN36@traceopt_c:
  00521	48 8b 44 24 78	 mov	 rax, QWORD PTR tv238[rsp]
  00526	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052b	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR tv245[rsp]
  00533	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159351
  0053a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0053f	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00547	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 316  :                 , showregsnone  ? "NOREGS" : showregsfirst ? "REGSFIRST" : "TRADITIONAL"
; 317  :                 , noch9oflow ? " NOCH9OFLOW" : ""
; 318  :             );
; 319  : 
; 320  :             // "%-14s set to %s"
; 321  :             WRMSG( HHC02204, "I", argv[0], msgbuf );

  0054d	b8 08 00 00 00	 mov	 eax, 8
  00552	48 6b c0 00	 imul	 rax, rax, 0
  00556	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv250[rsp], rax
  0055e	b9 01 00 00 00	 mov	 ecx, 1
  00563	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00569	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00571	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00576	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0057e	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv250[rsp]
  00586	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0058a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159352
  00596	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0059b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159353
  005a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  005b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159354
  005b9	ba 41 01 00 00	 mov	 edx, 321		; 00000141H
  005be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159355
  005c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@traceopt_c:
$LN14@traceopt_c:

; 322  :         }
; 323  :     }
; 324  : 
; 325  :     return 0;

  005cb	33 c0		 xor	 eax, eax
$LN1@traceopt_c:

; 326  : }

  005cd	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005d5	48 33 cc	 xor	 rcx, rsp
  005d8	e8 00 00 00 00	 call	 __security_check_cookie
  005dd	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  005e4	c3		 ret	 0
traceopt_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
regs$ = 80
tv90 = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
aea_cmd	PROC

; 210  : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@aea_cmd:

; 211  :     REGS*  regs;
; 212  : 
; 213  :     UNREFERENCED( argc );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@aea_cmd
$LN7@aea_cmd:

; 214  :     UNREFERENCED( argv );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@aea_cmd
$LN10@aea_cmd:

; 215  :     UNREFERENCED( cmdline );

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN10@aea_cmd

; 216  : 
; 217  :     obtain_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002b	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159274
  00048	48 8b c8	 mov	 rcx, rax
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 218  :     {
; 219  :         if (!IS_CPU_ONLINE( sysblk.pcpu ))

  00051	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00058	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00066	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0006f	0f 85 cd 00 00
	00		 jne	 $LN11@aea_cmd

; 220  :         {
; 221  :             release_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  00075	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007c	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00083	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0008a	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159276
  00099	48 8b c8	 mov	 rcx, rax
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 222  :             // "Processor %s%02X: processor is not %s"
; 223  :             WRMSG( HHC00816, "E", PTYPSTR( sysblk.pcpu ), sysblk.pcpu, "online" );

  000a2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000a9	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000b7	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000c5	48 89 44 24 58	 mov	 QWORD PTR tv90[rsp], rax
  000ca	b9 01 00 00 00	 mov	 ecx, 1
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159277
  000dc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e8	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  000ee	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000f2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv90[rsp]
  000f7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159278
  00103	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159279
  0010f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00114	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00119	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159280
  00126	ba df 00 00 00	 mov	 edx, 223		; 000000dfH
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159281
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 224  :             return -1;

  00138	b8 ff ff ff ff	 mov	 eax, -1
  0013d	e9 db 00 00 00	 jmp	 $LN1@aea_cmd
$LN11@aea_cmd:

; 225  :         }
; 226  : 
; 227  :         regs = sysblk.regs[ sysblk.pcpu ];

  00142	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00149	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00150	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00157	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0015f	48 89 44 24 50	 mov	 QWORD PTR regs$[rsp], rax

; 228  :         report_aea( regs );

  00164	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00169	e8 00 00 00 00	 call	 report_aea

; 229  : 
; 230  :         if (regs->sie_active)

  0016e	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$[rsp]
  00173	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00179	83 e0 01	 and	 eax, 1
  0017c	85 c0		 test	 eax, eax
  0017e	74 6e		 je	 SHORT $LN12@aea_cmd

; 231  :         {
; 232  :             // HHC02282 == "%s"  // (aea_cmd)
; 233  :             WRMSG( HHC02282, "I", "aea SIE" );

  00180	b9 01 00 00 00	 mov	 ecx, 1
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159283
  00192	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159284
  0019e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159285
  001aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159286
  001c1	ba e9 00 00 00	 mov	 edx, 233		; 000000e9H
  001c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159287
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 234  : 
; 235  :             regs = GUESTREGS;

  001d3	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$[rsp]
  001d8	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  001df	48 89 44 24 50	 mov	 QWORD PTR regs$[rsp], rax

; 236  :             report_aea( regs );

  001e4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  001e9	e8 00 00 00 00	 call	 report_aea
$LN12@aea_cmd:

; 237  :         }
; 238  :     }
; 239  :     release_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  001ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001f5	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  001fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00203	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0020b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159288
  00212	48 8b c8	 mov	 rcx, rax
  00215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 240  :     return 0;

  0021b	33 c0		 xor	 eax, eax
$LN1@aea_cmd:

; 241  : }

  0021d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00221	c3		 ret	 0
aea_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
i$ = 64
buf$ = 80
wrk$ = 208
__$ArrayPad$ = 336
regs$ = 368
report_aea PROC

; 131  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 132  :     int    i;
; 133  :     char   buf[128];
; 134  :     char   wrk[128];
; 135  : 
; 136  :     // HHC02282 == "%s"  // (aea_cmd)
; 137  : 
; 138  :     MSGBUF( buf, "aea mode   %s", aea_mode_str( regs->aea_mode ));

  0001e	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00026	0f b6 88 90 0c
	00 00		 movzx	 ecx, BYTE PTR [rax+3216]
  0002d	e8 00 00 00 00	 call	 aea_mode_str
  00032	4c 8b c8	 mov	 r9, rax
  00035	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159198
  0003c	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00041	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 139  :     WRMSG( HHC02282, "I", buf );

  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00057	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0005c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159199
  00068	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159200
  00074	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00079	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00084	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159201
  0008b	ba 8b 00 00 00	 mov	 edx, 139		; 0000008bH
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159202
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 140  : 
; 141  :     //------------------------------------------------------------
; 142  : 
; 143  :     STRLCPY( buf, "aea ar    " );

  0009d	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159203
  000aa	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 144  : 
; 145  :     for (i = USE_HOME_SPACE; i < 0; i++)

  000b5	c7 44 24 40 fb
	ff ff ff	 mov	 DWORD PTR i$[rsp], -5
  000bd	eb 0a		 jmp	 SHORT $LN4@report_aea
$LN2@report_aea:
  000bf	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  000c3	ff c0		 inc	 eax
  000c5	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN4@report_aea:
  000c9	83 7c 24 40 00	 cmp	 DWORD PTR i$[rsp], 0
  000ce	0f 8d a1 00 00
	00		 jge	 $LN3@report_aea

; 146  :     {
; 147  :         if (regs->AEA_AR(i) > 0)

  000d4	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  000d8	83 c0 05	 add	 eax, 5
  000db	48 98		 cdqe
  000dd	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e5	83 bc 81 94 0c
	00 00 00	 cmp	 DWORD PTR [rcx+rax*4+3220], 0
  000ed	7e 35		 jle	 SHORT $LN14@report_aea

; 148  :               MSGBUF( wrk, " %2.2X", regs->AEA_AR(i));

  000ef	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  000f3	83 c0 05	 add	 eax, 5
  000f6	48 98		 cdqe
  000f8	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00100	44 8b 8c 81 94
	0c 00 00	 mov	 r9d, DWORD PTR [rcx+rax*4+3220]
  00108	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159206
  0010f	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00114	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00122	eb 33		 jmp	 SHORT $LN15@report_aea
$LN14@report_aea:

; 149  :         else  MSGBUF( wrk, " %2d",   regs->AEA_AR(i));

  00124	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00128	83 c0 05	 add	 eax, 5
  0012b	48 98		 cdqe
  0012d	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00135	44 8b 8c 81 94
	0c 00 00	 mov	 r9d, DWORD PTR [rcx+rax*4+3220]
  0013d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159207
  00144	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00149	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  00151	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN15@report_aea:

; 150  : 
; 151  :         STRLCAT( buf, wrk);

  00157	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0015d	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR wrk$[rsp]
  00165	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 152  :     }

  00170	e9 4a ff ff ff	 jmp	 $LN2@report_aea
$LN3@report_aea:

; 153  : 
; 154  :     for (i=0; i < 16; i++)

  00175	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0017d	eb 0a		 jmp	 SHORT $LN7@report_aea
$LN5@report_aea:
  0017f	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00183	ff c0		 inc	 eax
  00185	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN7@report_aea:
  00189	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  0018e	0f 8d a1 00 00
	00		 jge	 $LN6@report_aea

; 155  :     {
; 156  :         if (regs->AEA_AR(i) > 0)

  00194	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00198	83 c0 05	 add	 eax, 5
  0019b	48 98		 cdqe
  0019d	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001a5	83 bc 81 94 0c
	00 00 00	 cmp	 DWORD PTR [rcx+rax*4+3220], 0
  001ad	7e 35		 jle	 SHORT $LN16@report_aea

; 157  :               MSGBUF( wrk, " %2.2X", regs->AEA_AR(i));

  001af	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  001b3	83 c0 05	 add	 eax, 5
  001b6	48 98		 cdqe
  001b8	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001c0	44 8b 8c 81 94
	0c 00 00	 mov	 r9d, DWORD PTR [rcx+rax*4+3220]
  001c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159210
  001cf	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  001d4	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  001dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  001e2	eb 33		 jmp	 SHORT $LN17@report_aea
$LN16@report_aea:

; 158  :         else  MSGBUF( wrk, " %2d",   regs->AEA_AR(i));

  001e4	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  001e8	83 c0 05	 add	 eax, 5
  001eb	48 98		 cdqe
  001ed	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f5	44 8b 8c 81 94
	0c 00 00	 mov	 r9d, DWORD PTR [rcx+rax*4+3220]
  001fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159211
  00204	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00209	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN17@report_aea:

; 159  : 
; 160  :         STRLCAT( buf, wrk);

  00217	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0021d	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR wrk$[rsp]
  00225	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0022a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 161  :     }

  00230	e9 4a ff ff ff	 jmp	 $LN5@report_aea
$LN6@report_aea:

; 162  : 
; 163  :     WRMSG( HHC02282, "I", buf );

  00235	b9 01 00 00 00	 mov	 ecx, 1
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00240	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00245	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159212
  00251	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159213
  0025d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00262	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00267	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159214
  00274	ba a3 00 00 00	 mov	 edx, 163		; 000000a3H
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159215
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 164  : 
; 165  :     //------------------------------------------------------------
; 166  : 
; 167  :     STRLCPY( buf, "aea common            " );

  00286	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159216
  00293	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 168  : 
; 169  :     if (regs->AEA_COMMON( CR_ASD_REAL ) > 0)

  0029e	b8 01 00 00 00	 mov	 eax, 1
  002a3	48 6b c0 00	 imul	 rax, rax, 0
  002a7	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002af	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  002b7	85 c0		 test	 eax, eax
  002b9	7e 38		 jle	 SHORT $LN18@report_aea

; 170  :           MSGBUF( wrk, " %2.2X", regs->AEA_COMMON( CR_ASD_REAL ));

  002bb	b8 01 00 00 00	 mov	 eax, 1
  002c0	48 6b c0 00	 imul	 rax, rax, 0
  002c4	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002cc	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  002d4	44 8b c8	 mov	 r9d, eax
  002d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159219
  002de	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  002e3	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  002eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  002f1	eb 36		 jmp	 SHORT $LN19@report_aea
$LN18@report_aea:

; 171  :     else  MSGBUF( wrk, " %2d",   regs->AEA_COMMON( CR_ASD_REAL ));

  002f3	b8 01 00 00 00	 mov	 eax, 1
  002f8	48 6b c0 00	 imul	 rax, rax, 0
  002fc	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00304	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  0030c	44 8b c8	 mov	 r9d, eax
  0030f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159220
  00316	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0031b	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  00323	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN19@report_aea:

; 172  : 
; 173  :     STRLCAT( buf, wrk);

  00329	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0032f	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR wrk$[rsp]
  00337	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 174  : 
; 175  :     for (i=0; i < 16; i++)

  00342	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0034a	eb 0a		 jmp	 SHORT $LN10@report_aea
$LN8@report_aea:
  0034c	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00350	ff c0		 inc	 eax
  00352	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN10@report_aea:
  00356	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  0035b	0f 8d a6 00 00
	00		 jge	 $LN9@report_aea

; 176  :     {
; 177  :         if (regs->AEA_COMMON(i) > 0)

  00361	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00365	ff c0		 inc	 eax
  00367	48 98		 cdqe
  00369	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00371	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  00379	85 c0		 test	 eax, eax
  0037b	7e 37		 jle	 SHORT $LN20@report_aea

; 178  :               MSGBUF( wrk, " %2.2X", regs->AEA_COMMON(i));

  0037d	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00381	ff c0		 inc	 eax
  00383	48 98		 cdqe
  00385	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0038d	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  00395	44 8b c8	 mov	 r9d, eax
  00398	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159223
  0039f	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  003a4	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  003ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  003b2	eb 35		 jmp	 SHORT $LN21@report_aea
$LN20@report_aea:

; 179  :         else  MSGBUF( wrk, " %2d",   regs->AEA_COMMON(i));

  003b4	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  003b8	ff c0		 inc	 eax
  003ba	48 98		 cdqe
  003bc	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003c4	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  003cc	44 8b c8	 mov	 r9d, eax
  003cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159224
  003d6	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  003db	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  003e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN21@report_aea:

; 180  : 
; 181  :         STRLCAT( buf, wrk);

  003e9	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  003ef	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR wrk$[rsp]
  003f7	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  003fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 182  :     }

  00402	e9 45 ff ff ff	 jmp	 $LN8@report_aea
$LN9@report_aea:

; 183  : 
; 184  :     WRMSG( HHC02282, "I", buf );

  00407	b9 01 00 00 00	 mov	 ecx, 1
  0040c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00412	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00417	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0041c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159225
  00423	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159226
  0042f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00434	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00439	41 b9 03 00 00
	00		 mov	 r9d, 3
  0043f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159227
  00446	ba b8 00 00 00	 mov	 edx, 184		; 000000b8H
  0044b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159228
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 185  : 
; 186  :     //------------------------------------------------------------
; 187  : 
; 188  :     MSGBUF( buf, "aea cr[1]  %16.16"PRIX64, regs->CR_G(      1      )); WRMSG( HHC02282, "I", buf );

  00458	b8 08 00 00 00	 mov	 eax, 8
  0045d	48 6b c0 02	 imul	 rax, rax, 2
  00461	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00469	4c 8b 8c 01 00
	06 00 00	 mov	 r9, QWORD PTR [rcx+rax+1536]
  00471	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159229
  00478	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0047d	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00482	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00488	b9 01 00 00 00	 mov	 ecx, 1
  0048d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00493	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00498	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0049d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159230
  004a4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159231
  004b0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004b5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ba	41 b9 03 00 00
	00		 mov	 r9d, 3
  004c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159232
  004c7	ba bc 00 00 00	 mov	 edx, 188		; 000000bcH
  004cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159233
  004d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 189  :     MSGBUF( buf, "    cr[7]  %16.16"PRIX64, regs->CR_G(      7      )); WRMSG( HHC02282, "I", buf );

  004d9	b8 08 00 00 00	 mov	 eax, 8
  004de	48 6b c0 08	 imul	 rax, rax, 8
  004e2	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004ea	4c 8b 8c 01 00
	06 00 00	 mov	 r9, QWORD PTR [rcx+rax+1536]
  004f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159234
  004f9	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  004fe	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00503	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00509	b9 01 00 00 00	 mov	 ecx, 1
  0050e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00514	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00519	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0051e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159235
  00525	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0052a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159236
  00531	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00536	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0053b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00541	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159237
  00548	ba bd 00 00 00	 mov	 edx, 189		; 000000bdH
  0054d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159238
  00554	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 190  :     MSGBUF( buf, "    cr[13] %16.16"PRIX64, regs->CR_G(     13      )); WRMSG( HHC02282, "I", buf );

  0055a	b8 08 00 00 00	 mov	 eax, 8
  0055f	48 6b c0 0e	 imul	 rax, rax, 14
  00563	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0056b	4c 8b 8c 01 00
	06 00 00	 mov	 r9, QWORD PTR [rcx+rax+1536]
  00573	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159239
  0057a	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0057f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00584	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0058a	b9 01 00 00 00	 mov	 ecx, 1
  0058f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00595	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0059a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159240
  005a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159241
  005b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159242
  005c9	ba be 00 00 00	 mov	 edx, 190		; 000000beH
  005ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159243
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 191  :     MSGBUF( buf, "    cr[r]  %16.16"PRIX64, regs->CR_G( CR_ASD_REAL )); WRMSG( HHC02282, "I", buf );

  005db	b8 08 00 00 00	 mov	 eax, 8
  005e0	48 6b c0 00	 imul	 rax, rax, 0
  005e4	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005ec	4c 8b 8c 01 00
	06 00 00	 mov	 r9, QWORD PTR [rcx+rax+1536]
  005f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159244
  005fb	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00600	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00605	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0060b	b9 01 00 00 00	 mov	 ecx, 1
  00610	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00616	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0061b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00620	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159245
  00627	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0062c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159246
  00633	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00638	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0063d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00643	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159247
  0064a	ba bf 00 00 00	 mov	 edx, 191		; 000000bfH
  0064f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159248
  00656	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 192  : 
; 193  :     //------------------------------------------------------------
; 194  : 
; 195  :     for (i=0; i < 16; i++)

  0065c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00664	eb 0a		 jmp	 SHORT $LN13@report_aea
$LN11@report_aea:
  00666	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0066a	ff c0		 inc	 eax
  0066c	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN13@report_aea:
  00670	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  00675	0f 8d af 00 00
	00		 jge	 $LN12@report_aea

; 196  :     {
; 197  :         if (regs->AEA_AR(i) > 15)

  0067b	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0067f	83 c0 05	 add	 eax, 5
  00682	48 98		 cdqe
  00684	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0068c	83 bc 81 94 0c
	00 00 0f	 cmp	 DWORD PTR [rcx+rax*4+3220], 15
  00694	0f 8e 8b 00 00
	00		 jle	 $LN22@report_aea

; 198  :         {
; 199  :             MSGBUF( buf, "    alb[%d] %16.16"PRIX64, i, regs->CR_G( CR_ALB_OFFSET + i ));

  0069a	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0069e	83 c0 11	 add	 eax, 17
  006a1	48 98		 cdqe
  006a3	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006ab	48 8b 84 c1 00
	06 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+1536]
  006b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006b8	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  006bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159250
  006c4	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  006c9	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  006ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 200  :             WRMSG( HHC02282, "I", buf );

  006d4	b9 01 00 00 00	 mov	 ecx, 1
  006d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006df	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  006e4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159251
  006f0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159252
  006fc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00701	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00706	41 b9 03 00 00
	00		 mov	 r9d, 3
  0070c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159253
  00713	ba c8 00 00 00	 mov	 edx, 200		; 000000c8H
  00718	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159254
  0071f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@report_aea:

; 201  :         }
; 202  :     }

  00725	e9 3c ff ff ff	 jmp	 $LN11@report_aea
$LN12@report_aea:

; 203  : }

  0072a	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00732	48 33 cc	 xor	 rcx, rsp
  00735	e8 00 00 00 00	 call	 __security_check_cookie
  0073a	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  00741	c3		 ret	 0
report_aea ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
tv69 = 0
mode$ = 32
aea_mode_str PROC

; 105  : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 18	 sub	 rsp, 24

; 106  :     static const char* name[] =
; 107  :     {
; 108  :         "DAT-Off",
; 109  :         "Primary",
; 110  :         "AR",
; 111  :         "Secondary",
; 112  :         "Home",
; 113  :         0,
; 114  :         0,
; 115  :         0,
; 116  :         "PER/DAT-Off",
; 117  :         "PER/Primary",
; 118  :         "PER/AR",
; 119  :         "PER/Secondary",
; 120  :         "PER/Home"
; 121  :     };
; 122  : 
; 123  :     return name[ (mode & 0x0f) | ((mode & 0xf0) ? 8 : 0) ];

  00008	0f b6 44 24 20	 movzx	 eax, BYTE PTR mode$[rsp]
  0000d	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  00012	85 c0		 test	 eax, eax
  00014	74 09		 je	 SHORT $LN3@aea_mode_s
  00016	c7 04 24 08 00
	00 00		 mov	 DWORD PTR tv69[rsp], 8
  0001d	eb 07		 jmp	 SHORT $LN4@aea_mode_s
$LN3@aea_mode_s:
  0001f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
$LN4@aea_mode_s:
  00026	0f b6 44 24 20	 movzx	 eax, BYTE PTR mode$[rsp]
  0002b	83 e0 0f	 and	 eax, 15
  0002e	0b 04 24	 or	 eax, DWORD PTR tv69[rsp]
  00031	48 98		 cdqe
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?name@?1??aea_mode_str@@9@9
  0003a	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]

; 124  : }

  0003e	48 83 c4 18	 add	 rsp, 24
  00042	c3		 ret	 0
aea_mode_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
missing_devnum PROC

; 95   : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 96   :     // "Device number missing"
; 97   :     WRMSG( HHC02201, "E" );

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159159
  00016	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159160
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159161
  00039	ba 61 00 00 00	 mov	 edx, 97			; 00000061H
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159162
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 98   : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	c3		 ret	 0
missing_devnum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
tv64 = 80
tv66 = 84
lcss$ = 112
devnum$ = 120
devnotfound_msg PROC

; 88   : {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 89   :     // "%1d:%04X device not found"
; 90   :     WRMSG( HHC02200, "E", lcss, devnum );

  0000e	0f b7 44 24 78	 movzx	 eax, WORD PTR devnum$[rsp]
  00013	89 44 24 50	 mov	 DWORD PTR tv64[rsp], eax
  00017	0f b7 4c 24 70	 movzx	 ecx, WORD PTR lcss$[rsp]
  0001c	89 4c 24 54	 mov	 DWORD PTR tv66[rsp], ecx
  00020	b9 01 00 00 00	 mov	 ecx, 1
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002b	8b 4c 24 50	 mov	 ecx, DWORD PTR tv64[rsp]
  0002f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00033	8b 4c 24 54	 mov	 ecx, DWORD PTR tv66[rsp]
  00037	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159153
  00042	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159154
  0004e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00053	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00058	41 b9 03 00 00
	00		 mov	 r9d, 3
  0005e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159155
  00065	ba 5a 00 00 00	 mov	 edx, 90			; 0000005aH
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159156
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 91   :     return -1;

  00077	b8 ff ff ff ff	 mov	 eax, -1

; 92   : }

  0007c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00080	c3		 ret	 0
devnotfound_msg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
px$ = 80
tv73 = 88
buf$ = 96
__$ArrayPad$ = 160
regs$ = 192
argc$ = 200
argv$ = 208
z900_archdep_pr_cmd PROC

; 25   : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 26   :     U64   px;
; 27   :     char  buf[64];
; 28   : 
; 29   :     if (argc > 1)

  00027	83 bc 24 c8 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0002f	0f 8e 5f 01 00
	00		 jle	 $LN2@z900_archd

; 30   :     {
; 31   :         /* Parse requested new prefix register value */
; 32   :         if (!sscanf( argv[1], "%"SCNx64, &px ))

  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 01	 imul	 rax, rax, 1
  0003e	4c 8d 44 24 50	 lea	 r8, QWORD PTR px$[rsp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159130
  0004a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00052	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00056	e8 00 00 00 00	 call	 sscanf
  0005b	85 c0		 test	 eax, eax
  0005d	0f 85 81 00 00
	00		 jne	 $LN4@z900_archd

; 33   :         {
; 34   :             // "Invalid argument %s%s"
; 35   :             WRMSG( HHC02205, "E", argv[1], "" );

  00063	b8 08 00 00 00	 mov	 eax, 8
  00068	48 6b c0 01	 imul	 rax, rax, 1
  0006c	48 89 44 24 58	 mov	 QWORD PTR tv73[rsp], rax
  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159131
  00083	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00088	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00090	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv73[rsp]
  00095	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00099	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159132
  000a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159133
  000b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159134
  000c8	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159135
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 36   :             return -1;

  000da	b8 ff ff ff ff	 mov	 eax, -1
  000df	e9 30 01 00 00	 jmp	 $LN1@z900_archd
$LN4@z900_archd:

; 37   :         }
; 38   : 
; 39   :         /* Set ignored bits to zero and zero those bits that must be */
; 40   :         px &= PX_MASK;

  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR px$[rsp]
  000e9	48 25 00 e0 ff
	7f		 and	 rax, 2147475456		; 7fffe000H
  000ef	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax

; 41   : 
; 42   :         if (px > regs->mainlim)

  000f4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fc	48 8b 80 58 08
	00 00		 mov	 rax, QWORD PTR [rax+2136]
  00103	48 39 44 24 50	 cmp	 QWORD PTR px$[rsp], rax
  00108	76 77		 jbe	 SHORT $LN5@z900_archd

; 43   :         {
; 44   :             // PROGRAMMING NOTE: 'F_RADR' and 'RADR' are very likely
; 45   :             // 64-bit due to FEATURE_SIE normally being #defined,
; 46   :             // causing _FEATURE_ZSIE to be #defined.
; 47   : 
; 48   :             MSGBUF( buf, "A:"F_RADR"  Addressing exception", (RADR) px );

  0010a	4c 8b 4c 24 50	 mov	 r9, QWORD PTR px$[rsp]
  0010f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159137
  00116	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0011b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 49   :             WRMSG( HHC02290, "E", buf );

  00126	b9 01 00 00 00	 mov	 ecx, 1
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00131	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00136	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159138
  00142	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159139
  0014e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00153	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00158	41 b9 03 00 00
	00		 mov	 r9d, 3
  0015e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159140
  00165	ba 31 00 00 00	 mov	 edx, 49			; 00000031H
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159141
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 50   :             return -1;

  00177	b8 ff ff ff ff	 mov	 eax, -1
  0017c	e9 93 00 00 00	 jmp	 $LN1@z900_archd
$LN5@z900_archd:

; 51   :         }
; 52   : 
; 53   :         regs->PX = px;              /* set NEW prefix register value */

  00181	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR px$[rsp]
  0018e	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 54   :     }

  00192	eb 11		 jmp	 SHORT $LN3@z900_archd
$LN2@z900_archd:

; 55   :     else
; 56   :         px = regs->PX;              /* retrieve CURRENT prefix value */

  00194	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001a0	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax
$LN3@z900_archd:

; 57   : 
; 58   :     // "Prefix register: %s"
; 59   :     MSGBUF( buf, F_RADR, (RADR) px );   /* Format the prefix address */

  001a5	4c 8b 4c 24 50	 mov	 r9, QWORD PTR px$[rsp]
  001aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159142
  001b1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001b6	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 60   :     WRMSG( HHC02277, "I", buf );        /* and then show it to them  */

  001c1	b9 01 00 00 00	 mov	 ecx, 1
  001c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cc	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001d1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159143
  001dd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159144
  001e9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ee	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f3	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159145
  00200	ba 3c 00 00 00	 mov	 edx, 60			; 0000003cH
  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159146
  0020c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 61   :     return 0;

  00212	33 c0		 xor	 eax, eax
$LN1@z900_archd:

; 62   : }

  00214	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0021c	48 33 cc	 xor	 rcx, rsp
  0021f	e8 00 00 00 00	 call	 __security_check_cookie
  00224	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0022b	c3		 ret	 0
z900_archdep_pr_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
px$ = 80
tv73 = 88
buf$ = 96
__$ArrayPad$ = 160
regs$ = 192
argc$ = 200
argv$ = 208
s390_archdep_pr_cmd PROC

; 25   : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 26   :     U64   px;
; 27   :     char  buf[64];
; 28   : 
; 29   :     if (argc > 1)

  00027	83 bc 24 c8 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0002f	0f 8e 5d 01 00
	00		 jle	 $LN2@s390_archd

; 30   :     {
; 31   :         /* Parse requested new prefix register value */
; 32   :         if (!sscanf( argv[1], "%"SCNx64, &px ))

  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 01	 imul	 rax, rax, 1
  0003e	4c 8d 44 24 50	 lea	 r8, QWORD PTR px$[rsp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159098
  0004a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00052	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00056	e8 00 00 00 00	 call	 sscanf
  0005b	85 c0		 test	 eax, eax
  0005d	0f 85 81 00 00
	00		 jne	 $LN4@s390_archd

; 33   :         {
; 34   :             // "Invalid argument %s%s"
; 35   :             WRMSG( HHC02205, "E", argv[1], "" );

  00063	b8 08 00 00 00	 mov	 eax, 8
  00068	48 6b c0 01	 imul	 rax, rax, 1
  0006c	48 89 44 24 58	 mov	 QWORD PTR tv73[rsp], rax
  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159099
  00083	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00088	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00090	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv73[rsp]
  00095	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00099	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159100
  000a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159101
  000b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159102
  000c8	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159103
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 36   :             return -1;

  000da	b8 ff ff ff ff	 mov	 eax, -1
  000df	e9 2d 01 00 00	 jmp	 $LN1@s390_archd
$LN4@s390_archd:

; 37   :         }
; 38   : 
; 39   :         /* Set ignored bits to zero and zero those bits that must be */
; 40   :         px &= PX_MASK;

  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR px$[rsp]
  000e9	48 25 00 f0 ff
	7f		 and	 rax, 2147479552		; 7ffff000H
  000ef	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax

; 41   : 
; 42   :         if (px > regs->mainlim)

  000f4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fc	48 8b 80 58 08
	00 00		 mov	 rax, QWORD PTR [rax+2136]
  00103	48 39 44 24 50	 cmp	 QWORD PTR px$[rsp], rax
  00108	76 77		 jbe	 SHORT $LN5@s390_archd

; 43   :         {
; 44   :             // PROGRAMMING NOTE: 'F_RADR' and 'RADR' are very likely
; 45   :             // 64-bit due to FEATURE_SIE normally being #defined,
; 46   :             // causing _FEATURE_ZSIE to be #defined.
; 47   : 
; 48   :             MSGBUF( buf, "A:"F_RADR"  Addressing exception", (RADR) px );

  0010a	4c 8b 4c 24 50	 mov	 r9, QWORD PTR px$[rsp]
  0010f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159105
  00116	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0011b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 49   :             WRMSG( HHC02290, "E", buf );

  00126	b9 01 00 00 00	 mov	 ecx, 1
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00131	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00136	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159106
  00142	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159107
  0014e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00153	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00158	41 b9 03 00 00
	00		 mov	 r9d, 3
  0015e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159108
  00165	ba 31 00 00 00	 mov	 edx, 49			; 00000031H
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159109
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 50   :             return -1;

  00177	b8 ff ff ff ff	 mov	 eax, -1
  0017c	e9 90 00 00 00	 jmp	 $LN1@s390_archd
$LN5@s390_archd:

; 51   :         }
; 52   : 
; 53   :         regs->PX = px;              /* set NEW prefix register value */

  00181	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00189	8b 4c 24 50	 mov	 ecx, DWORD PTR px$[rsp]
  0018d	89 48 70	 mov	 DWORD PTR [rax+112], ecx

; 54   :     }

  00190	eb 10		 jmp	 SHORT $LN3@s390_archd
$LN2@s390_archd:

; 55   :     else
; 56   :         px = regs->PX;              /* retrieve CURRENT prefix value */

  00192	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0019d	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax
$LN3@s390_archd:

; 57   : 
; 58   :     // "Prefix register: %s"
; 59   :     MSGBUF( buf, F_RADR, (RADR) px );   /* Format the prefix address */

  001a2	4c 8b 4c 24 50	 mov	 r9, QWORD PTR px$[rsp]
  001a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159110
  001ae	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001b3	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 60   :     WRMSG( HHC02277, "I", buf );        /* and then show it to them  */

  001be	b9 01 00 00 00	 mov	 ecx, 1
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c9	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159111
  001da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159112
  001e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159113
  001fd	ba 3c 00 00 00	 mov	 edx, 60			; 0000003cH
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159114
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 61   :     return 0;

  0020f	33 c0		 xor	 eax, eax
$LN1@s390_archd:

; 62   : }

  00211	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00219	48 33 cc	 xor	 rcx, rsp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00228	c3		 ret	 0
s390_archdep_pr_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
px$ = 80
tv73 = 88
buf$ = 96
__$ArrayPad$ = 160
regs$ = 192
argc$ = 200
argv$ = 208
s370_archdep_pr_cmd PROC

; 25   : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 26   :     U64   px;
; 27   :     char  buf[64];
; 28   : 
; 29   :     if (argc > 1)

  00027	83 bc 24 c8 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0002f	0f 8e 5d 01 00
	00		 jle	 $LN2@s370_archd

; 30   :     {
; 31   :         /* Parse requested new prefix register value */
; 32   :         if (!sscanf( argv[1], "%"SCNx64, &px ))

  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 01	 imul	 rax, rax, 1
  0003e	4c 8d 44 24 50	 lea	 r8, QWORD PTR px$[rsp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159066
  0004a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00052	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00056	e8 00 00 00 00	 call	 sscanf
  0005b	85 c0		 test	 eax, eax
  0005d	0f 85 81 00 00
	00		 jne	 $LN4@s370_archd

; 33   :         {
; 34   :             // "Invalid argument %s%s"
; 35   :             WRMSG( HHC02205, "E", argv[1], "" );

  00063	b8 08 00 00 00	 mov	 eax, 8
  00068	48 6b c0 01	 imul	 rax, rax, 1
  0006c	48 89 44 24 58	 mov	 QWORD PTR tv73[rsp], rax
  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159067
  00083	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00088	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00090	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv73[rsp]
  00095	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00099	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159068
  000a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159069
  000b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159070
  000c8	ba 23 00 00 00	 mov	 edx, 35			; 00000023H
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159071
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 36   :             return -1;

  000da	b8 ff ff ff ff	 mov	 eax, -1
  000df	e9 2d 01 00 00	 jmp	 $LN1@s370_archd
$LN4@s370_archd:

; 37   :         }
; 38   : 
; 39   :         /* Set ignored bits to zero and zero those bits that must be */
; 40   :         px &= PX_MASK;

  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR px$[rsp]
  000e9	48 25 00 f0 ff
	7f		 and	 rax, 2147479552		; 7ffff000H
  000ef	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax

; 41   : 
; 42   :         if (px > regs->mainlim)

  000f4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fc	48 8b 80 58 08
	00 00		 mov	 rax, QWORD PTR [rax+2136]
  00103	48 39 44 24 50	 cmp	 QWORD PTR px$[rsp], rax
  00108	76 77		 jbe	 SHORT $LN5@s370_archd

; 43   :         {
; 44   :             // PROGRAMMING NOTE: 'F_RADR' and 'RADR' are very likely
; 45   :             // 64-bit due to FEATURE_SIE normally being #defined,
; 46   :             // causing _FEATURE_ZSIE to be #defined.
; 47   : 
; 48   :             MSGBUF( buf, "A:"F_RADR"  Addressing exception", (RADR) px );

  0010a	4c 8b 4c 24 50	 mov	 r9, QWORD PTR px$[rsp]
  0010f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159073
  00116	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0011b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 49   :             WRMSG( HHC02290, "E", buf );

  00126	b9 01 00 00 00	 mov	 ecx, 1
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00131	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00136	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159074
  00142	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159075
  0014e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00153	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00158	41 b9 03 00 00
	00		 mov	 r9d, 3
  0015e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159076
  00165	ba 31 00 00 00	 mov	 edx, 49			; 00000031H
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159077
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 50   :             return -1;

  00177	b8 ff ff ff ff	 mov	 eax, -1
  0017c	e9 90 00 00 00	 jmp	 $LN1@s370_archd
$LN5@s370_archd:

; 51   :         }
; 52   : 
; 53   :         regs->PX = px;              /* set NEW prefix register value */

  00181	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00189	8b 4c 24 50	 mov	 ecx, DWORD PTR px$[rsp]
  0018d	89 48 70	 mov	 DWORD PTR [rax+112], ecx

; 54   :     }

  00190	eb 10		 jmp	 SHORT $LN3@s370_archd
$LN2@s370_archd:

; 55   :     else
; 56   :         px = regs->PX;              /* retrieve CURRENT prefix value */

  00192	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0019d	48 89 44 24 50	 mov	 QWORD PTR px$[rsp], rax
$LN3@s370_archd:

; 57   : 
; 58   :     // "Prefix register: %s"
; 59   :     MSGBUF( buf, F_RADR, (RADR) px );   /* Format the prefix address */

  001a2	4c 8b 4c 24 50	 mov	 r9, QWORD PTR px$[rsp]
  001a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159078
  001ae	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  001b3	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 60   :     WRMSG( HHC02277, "I", buf );        /* and then show it to them  */

  001be	b9 01 00 00 00	 mov	 ecx, 1
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c9	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159079
  001da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159080
  001e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159081
  001fd	ba 3c 00 00 00	 mov	 edx, 60			; 0000003cH
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159082
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 61   :     return 0;

  0020f	33 c0		 xor	 eax, eax
$LN1@s370_archd:

; 62   : }

  00211	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00219	48 33 cc	 xor	 rcx, rsp
  0021c	e8 00 00 00 00	 call	 __security_check_cookie
  00221	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00228	c3		 ret	 0
s370_archdep_pr_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Release_Interrupt_Lock PROC

; 403  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Release_In:

; 404  :     UNREFERENCED( regs );

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@Release_In

; 405  :     sysblk.intowner = LOCK_OWNER_NONE;

  00014	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00020	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 406  :     hthread_release_lock( &sysblk.intlock, location );

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00034	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 407  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
Release_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
rc$ = 32
regs$ = 64
location$ = 72
Try_Obtain_Interrupt_Lock PROC

; 389  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 390  :     int rc;
; 391  :     if (regs)

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Try_Obtain

; 392  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Try_Obtain:

; 393  :     if ((rc = hthread_try_obtain_lock( &sysblk.intlock, location )) == 0)

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 48	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_try_obtain_lock
  00044	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00048	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  0004d	75 11		 jne	 SHORT $LN3@Try_Obtain

; 394  :         Interrupt_Lock_Obtained( regs, location );

  0004f	48 8b 54 24 48	 mov	 rdx, QWORD PTR location$[rsp]
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00059	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained
  0005e	eb 1b		 jmp	 SHORT $LN4@Try_Obtain
$LN3@Try_Obtain:

; 395  :     else if (regs)

  00060	48 83 7c 24 40
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00066	74 13		 je	 SHORT $LN5@Try_Obtain

; 396  :         HOSTREGS->intwait = false;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR regs$[rsp]
  0006d	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00074	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0
$LN5@Try_Obtain:
$LN4@Try_Obtain:

; 397  :     return rc;

  0007b	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]

; 398  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
Try_Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Obtain_Interrupt_Lock PROC

; 379  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Obtain_Int

; 381  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Obtain_Int:

; 382  :     hthread_obtain_lock( &sysblk.intlock, location );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 383  :     Interrupt_Lock_Obtained( regs, location );

  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained

; 384  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Interrupt_Lock_Obtained PROC

; 347  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 348  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	0f 84 db 00 00
	00		 je	 $LN4@Interrupt_
$LN2@Interrupt_:

; 349  :     {
; 350  :         /* Wait for any SYNCHRONIZE_CPUS to finish before proceeding */
; 351  :         while (sysblk.syncing)

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8f 00 00
	00		 je	 $LN3@Interrupt_

; 352  :         {
; 353  :             /* Indicate we have reached the sync point */
; 354  :             sysblk.sync_mask &= ~HOSTREGS->cpubit;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00035	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0003c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00040	48 f7 d0	 not	 rax
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004a	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  00051	48 23 c8	 and	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005e	48 89 81 80 13
	00 00		 mov	 QWORD PTR [rcx+4992], rax

; 355  : 
; 356  :             /* If we're the last CPU to reach this sync point,
; 357  :                signal the CPU that requested the sync that it
; 358  :                may now safely proceed with its exclusive logic.
; 359  :             */
; 360  :             if (!sysblk.sync_mask)

  00065	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006c	48 83 b8 80 13
	00 00 00	 cmp	 QWORD PTR [rax+4992], 0
  00074	75 1b		 jne	 SHORT $LN6@Interrupt_

; 361  :                 hthread_signal_condition( &sysblk.all_synced_cond, location );

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007d	48 05 88 13 00
	00		 add	 rax, 5000		; 00001388H
  00083	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@Interrupt_:

; 362  : 
; 363  :             /* Wait for CPU that requested the sync to indicate
; 364  :                it's done and thus is now safe for us to proceed.
; 365  :             */
; 366  :             hthread_wait_condition( &sysblk.sync_done_cond, &sysblk.intlock, location );

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a5	48 81 c1 90 13
	00 00		 add	 rcx, 5008		; 00001390H
  000ac	4c 8b 44 24 38	 mov	 r8, QWORD PTR location$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 367  :         }

  000ba	e9 5b ff ff ff	 jmp	 $LN2@Interrupt_
$LN3@Interrupt_:

; 368  : 
; 369  :         HOSTREGS->intwait = false;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000c4	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000cb	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0

; 370  :         sysblk.intowner = HOSTREGS->cpuad;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e5	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  000ec	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 371  :     }

  000f3	eb 13		 jmp	 SHORT $LN5@Interrupt_
$LN4@Interrupt_:

; 372  :     else
; 373  :         sysblk.intowner = LOCK_OWNER_OTHER;

  000f5	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00101	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax
$LN5@Interrupt_:

; 374  : }

  00108	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010c	c3		 ret	 0
Interrupt_Lock_Obtained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
enable$ = 48
enable_lparmode PROC

; 3130 : {

$LN5:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3131 :     static const int  fbyte  =          (STFL_HERC_LOGICAL_PARTITION / 8);
; 3132 :     static const int  fbit   =  0x80 >> (STFL_HERC_LOGICAL_PARTITION % 8);
; 3133 : 
; 3134 :     if (enable)

  00008	0f b6 44 24 30	 movzx	 eax, BYTE PTR enable$[rsp]
  0000d	85 c0		 test	 eax, eax
  0000f	0f 84 e6 00 00
	00		 je	 $LN2@enable_lpa

; 3135 :     {
; 3136 : #if defined( _370 )
; 3137 :         sysblk.facility_list[ ARCH_370_IDX ][fbyte] |= fbit;

  00015	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  0001a	48 6b c0 00	 imul	 rax, rax, 0
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00025	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0002d	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  00034	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00038	0b 05 00 00 00
	00		 or	 eax, DWORD PTR ?fbit@?1??enable_lparmode@@9@9
  0003e	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  00045	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  0004a	48 6b d2 00	 imul	 rdx, rdx, 0
  0004e	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  00055	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  0005d	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 3138 : #endif
; 3139 : #if defined( _390 )
; 3140 :         sysblk.facility_list[ ARCH_390_IDX ][fbyte] |= fbit;

  00060	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00065	48 6b c0 01	 imul	 rax, rax, 1
  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00070	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00078	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  0007f	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00083	0b 05 00 00 00
	00		 or	 eax, DWORD PTR ?fbit@?1??enable_lparmode@@9@9
  00089	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  00090	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00095	48 6b d2 01	 imul	 rdx, rdx, 1
  00099	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  000a0	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  000a8	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 3141 : #endif
; 3142 : #if defined( _900 )
; 3143 :         sysblk.facility_list[ ARCH_900_IDX ][fbyte] |= fbit;

  000ab	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  000b0	48 6b c0 02	 imul	 rax, rax, 2
  000b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000bb	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  000c3	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  000ca	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  000ce	0b 05 00 00 00
	00		 or	 eax, DWORD PTR ?fbit@?1??enable_lparmode@@9@9
  000d4	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  000db	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  000e0	48 6b d2 02	 imul	 rdx, rdx, 2
  000e4	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  000eb	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  000f3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 3144 : #endif
; 3145 :     } else { // disable

  000f6	e9 ed 00 00 00	 jmp	 $LN3@enable_lpa
$LN2@enable_lpa:

; 3146 : #if defined( _370 )
; 3147 :         sysblk.facility_list[ ARCH_370_IDX ][fbyte] &= ~fbit;

  000fb	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00100	48 6b c0 00	 imul	 rax, rax, 0
  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0010b	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00113	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  0011a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fbit@?1??enable_lparmode@@9@9
  00120	f7 d2		 not	 edx
  00122	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00126	23 c2		 and	 eax, edx
  00128	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  0012f	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00134	48 6b d2 00	 imul	 rdx, rdx, 0
  00138	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  0013f	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  00147	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 3148 : #endif
; 3149 : #if defined( _390 )
; 3150 :         sysblk.facility_list[ ARCH_390_IDX ][fbyte] &= ~fbit;

  0014a	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  0014f	48 6b c0 01	 imul	 rax, rax, 1
  00153	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0015a	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00162	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  00169	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fbit@?1??enable_lparmode@@9@9
  0016f	f7 d2		 not	 edx
  00171	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00175	23 c2		 and	 eax, edx
  00177	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  0017e	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00183	48 6b d2 01	 imul	 rdx, rdx, 1
  00187	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  0018e	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  00196	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 3151 : #endif
; 3152 : #if defined( _900 )
; 3153 :         sysblk.facility_list[ ARCH_900_IDX ][fbyte] &= ~fbit;

  00199	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  0019e	48 6b c0 02	 imul	 rax, rax, 2
  001a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001a9	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  001b1	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  001b8	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?fbit@?1??enable_lparmode@@9@9
  001be	f7 d2		 not	 edx
  001c0	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  001c4	23 c2		 and	 eax, edx
  001c6	48 63 0d 00 00
	00 00		 movsxd	 rcx, DWORD PTR ?fbyte@?1??enable_lparmode@@9@9
  001cd	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  001d2	48 6b d2 02	 imul	 rdx, rdx, 2
  001d6	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  001dd	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  001e5	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN3@enable_lpa:

; 3154 : #endif
; 3155 :     }
; 3156 : 
; 3157 :     /* Set system lparmode and operation mode indicators accordingly */
; 3158 :     sysblk.lparmode = enable;

  001e8	0f b6 44 24 30	 movzx	 eax, BYTE PTR enable$[rsp]
  001ed	83 e0 01	 and	 eax, 1
  001f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f7	8b 89 ec 00 00
	00		 mov	 ecx, DWORD PTR [rcx+236]
  001fd	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00200	0b c8		 or	 ecx, eax
  00202	8b c1		 mov	 eax, ecx
  00204	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0020b	89 81 ec 00 00
	00		 mov	 DWORD PTR [rcx+236], eax

; 3159 :     setOperationMode();

  00211	e8 00 00 00 00	 call	 setOperationMode

; 3160 : }

  00216	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0021a	c3		 ret	 0
enable_lparmode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
tv76 = 0
tv78 = 4
setOperationMode PROC

; 3056 : {

$LN7:
  00000	48 83 ec 18	 sub	 rsp, 24

; 3057 :     sysblk.operation_mode =

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0000b	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00011	83 e0 01	 and	 eax, 1
  00014	85 c0		 test	 eax, eax
  00016	74 51		 je	 SHORT $LN5@setOperati
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0001f	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  00026	85 c0		 test	 eax, eax
  00028	75 2f		 jne	 SHORT $LN3@setOperati
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00031	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	7c 1c		 jl	 SHORT $LN3@setOperati
  0003d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00044	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  0004b	83 f8 10	 cmp	 eax, 16
  0004e	7f 09		 jg	 SHORT $LN3@setOperati
  00050	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv76[rsp], 1
  00057	eb 07		 jmp	 SHORT $LN4@setOperati
$LN3@setOperati:
  00059	c7 04 24 02 00
	00 00		 mov	 DWORD PTR tv76[rsp], 2
$LN4@setOperati:
  00060	8b 04 24	 mov	 eax, DWORD PTR tv76[rsp]
  00063	89 44 24 04	 mov	 DWORD PTR tv78[rsp], eax
  00067	eb 08		 jmp	 SHORT $LN6@setOperati
$LN5@setOperati:
  00069	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN6@setOperati:
  00071	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00078	8b 4c 24 04	 mov	 ecx, DWORD PTR tv78[rsp]
  0007c	89 88 e8 00 00
	00		 mov	 DWORD PTR [rax+232], ecx

; 3058 :       sysblk.lparmode ?
; 3059 :       ((sysblk.cpuidfmt || sysblk.lparnum < 1 || sysblk.lparnum > 16) ?
; 3060 :        om_emif : om_mif) : om_basic;
; 3061 : }

  00082	48 83 c4 18	 add	 rsp, 24
  00086	c3		 ret	 0
setOperationMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
resetAllCpuIds PROC

; 3121 : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3122 :     return setAllCpuIds( -1, -1, -1, -1, true );

  00004	c6 44 24 20 01	 mov	 BYTE PTR [rsp+32], 1
  00009	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0000f	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00015	66 ba ff ff	 mov	 dx, -1
  00019	b9 ff ff ff ff	 mov	 ecx, -1
  0001e	e8 00 00 00 00	 call	 setAllCpuIds

; 3123 : }

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
resetAllCpuIds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
regs$ = 48
cpu$ = 80
arg_model$ = 88
arg_version$ = 96
arg_serial$ = 104
arg_MCEL$ = 112
force$ = 120
setCpuId PROC

; 3026 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3027 :     REGS*  regs;
; 3028 : 
; 3029 :     /* Return if CPU out-of-range */
; 3030 :     if (cpu >= MAX_CPU_ENGS)

  00017	83 7c 24 50 40	 cmp	 DWORD PTR cpu$[rsp], 64	; 00000040H
  0001c	72 02		 jb	 SHORT $LN2@setCpuId

; 3031 :         return;

  0001e	eb 5a		 jmp	 SHORT $LN1@setCpuId
$LN2@setCpuId:

; 3032 : 
; 3033 :     /* Return if CPU undefined */
; 3034 :     if (!IS_CPU_ONLINE( cpu ))

  00020	8b 44 24 50	 mov	 eax, DWORD PTR cpu$[rsp]
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0002b	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00034	75 02		 jne	 SHORT $LN3@setCpuId

; 3035 :         return;

  00036	eb 42		 jmp	 SHORT $LN1@setCpuId
$LN3@setCpuId:

; 3036 : 
; 3037 :     regs = sysblk.regs[ cpu ];

  00038	8b 44 24 50	 mov	 eax, DWORD PTR cpu$[rsp]
  0003c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00043	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0004b	48 89 44 24 30	 mov	 QWORD PTR regs$[rsp], rax

; 3038 : 
; 3039 :     /* Set new CPU ID */
; 3040 :     setCpuIdregs( regs, arg_model, arg_version, arg_serial, arg_MCEL, force );

  00050	0f b6 44 24 78	 movzx	 eax, BYTE PTR force$[rsp]
  00055	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00059	8b 44 24 70	 mov	 eax, DWORD PTR arg_MCEL$[rsp]
  0005d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00061	44 8b 4c 24 68	 mov	 r9d, DWORD PTR arg_serial$[rsp]
  00066	44 0f b7 44 24
	60		 movzx	 r8d, WORD PTR arg_version$[rsp]
  0006c	8b 54 24 58	 mov	 edx, DWORD PTR arg_model$[rsp]
  00070	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  00075	e8 00 00 00 00	 call	 setCpuIdregs
$LN1@setCpuId:

; 3041 : }

  0007a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007e	c3		 ret	 0
setCpuId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
version$ = 32
serial$ = 36
MCEL$ = 40
model$ = 44
tv71 = 48
tv79 = 52
tv83 = 56
tv142 = 60
tv155 = 64
tv167 = 68
tv87 = 72
tv178 = 80
regs$ = 112
arg_model$ = 120
arg_version$ = 128
arg_serial$ = 136
arg_MCEL$ = 144
force$ = 152
setCpuIdregs PROC

; 2941 : {

$LN24:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2942 :     U16  model;
; 2943 :     U8   version;
; 2944 :     U32  serial;
; 2945 :     U16  MCEL;
; 2946 : 
; 2947 :     /* Return if CPU out-of-range */
; 2948 :     if (regs->cpuad >= MAX_CPU_ENGS)

  00018	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  0001d	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00024	83 f8 40	 cmp	 eax, 64			; 00000040H
  00027	7c 05		 jl	 SHORT $LN2@setCpuIdre

; 2949 :         return;

  00029	e9 a5 02 00 00	 jmp	 $LN1@setCpuIdre
$LN2@setCpuIdre:

; 2950 : 
; 2951 :     /* Gather needed values */
; 2952 :     model   = arg_model   >= 0 ?       arg_model   & 0x000FFFF : sysblk.cpumodel;

  0002e	83 7c 24 78 00	 cmp	 DWORD PTR arg_model$[rsp], 0
  00033	7c 0f		 jl	 SHORT $LN10@setCpuIdre
  00035	8b 44 24 78	 mov	 eax, DWORD PTR arg_model$[rsp]
  00039	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0003e	89 44 24 30	 mov	 DWORD PTR tv71[rsp], eax
  00042	eb 12		 jmp	 SHORT $LN11@setCpuIdre
$LN10@setCpuIdre:
  00044	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0004b	0f b7 80 d4 00
	00 00		 movzx	 eax, WORD PTR [rax+212]
  00052	89 44 24 30	 mov	 DWORD PTR tv71[rsp], eax
$LN11@setCpuIdre:
  00056	0f b7 44 24 30	 movzx	 eax, WORD PTR tv71[rsp]
  0005b	66 89 44 24 2c	 mov	 WORD PTR model$[rsp], ax

; 2953 :     version = arg_version >= 0 ?       arg_version & 0xFF      : sysblk.cpuversion;

  00060	0f bf 84 24 80
	00 00 00	 movsx	 eax, WORD PTR arg_version$[rsp]
  00068	85 c0		 test	 eax, eax
  0006a	7c 13		 jl	 SHORT $LN12@setCpuIdre
  0006c	0f bf 84 24 80
	00 00 00	 movsx	 eax, WORD PTR arg_version$[rsp]
  00074	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00079	89 44 24 34	 mov	 DWORD PTR tv79[rsp], eax
  0007d	eb 12		 jmp	 SHORT $LN13@setCpuIdre
$LN12@setCpuIdre:
  0007f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00086	0f b6 80 d6 00
	00 00		 movzx	 eax, BYTE PTR [rax+214]
  0008d	89 44 24 34	 mov	 DWORD PTR tv79[rsp], eax
$LN13@setCpuIdre:
  00091	0f b6 44 24 34	 movzx	 eax, BYTE PTR tv79[rsp]
  00096	88 44 24 20	 mov	 BYTE PTR version$[rsp], al

; 2954 :     serial  = arg_serial  >= 0 ? (U32) arg_serial              : sysblk.cpuserial;

  0009a	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR arg_serial$[rsp], 0
  000a2	7c 0d		 jl	 SHORT $LN14@setCpuIdre
  000a4	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR arg_serial$[rsp]
  000ab	89 44 24 38	 mov	 DWORD PTR tv83[rsp], eax
  000af	eb 11		 jmp	 SHORT $LN15@setCpuIdre
$LN14@setCpuIdre:
  000b1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b8	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  000be	89 44 24 38	 mov	 DWORD PTR tv83[rsp], eax
$LN15@setCpuIdre:
  000c2	8b 44 24 38	 mov	 eax, DWORD PTR tv83[rsp]
  000c6	89 44 24 24	 mov	 DWORD PTR serial$[rsp], eax

; 2955 :     MCEL    = arg_MCEL    >= 0 ? (U32) arg_MCEL                : sysblk.cpuid;

  000ca	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR arg_MCEL$[rsp], 0
  000d2	7c 0e		 jl	 SHORT $LN16@setCpuIdre
  000d4	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR arg_MCEL$[rsp]
  000db	48 89 44 24 48	 mov	 QWORD PTR tv87[rsp], rax
  000e0	eb 13		 jmp	 SHORT $LN17@setCpuIdre
$LN16@setCpuIdre:
  000e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000e9	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000f0	48 89 44 24 48	 mov	 QWORD PTR tv87[rsp], rax
$LN17@setCpuIdre:
  000f5	0f b7 44 24 48	 movzx	 eax, WORD PTR tv87[rsp]
  000fa	66 89 44 24 28	 mov	 WORD PTR MCEL$[rsp], ax

; 2956 : 
; 2957 :     /* Version is always zero in z/Architecture mode */
; 2958 :     if (!force && regs->arch_mode == ARCH_900_IDX)

  000ff	0f b6 84 24 98
	00 00 00	 movzx	 eax, BYTE PTR force$[rsp]
  00107	85 c0		 test	 eax, eax
  00109	75 10		 jne	 SHORT $LN3@setCpuIdre
  0010b	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  00110	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  00114	75 05		 jne	 SHORT $LN3@setCpuIdre

; 2959 :         version = 0;

  00116	c6 44 24 20 00	 mov	 BYTE PTR version$[rsp], 0
$LN3@setCpuIdre:

; 2960 : 
; 2961 :     /* Register new CPU ID settings */
; 2962 :     regs->cpumodel   = model;

  0011b	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  00120	0f b7 4c 24 2c	 movzx	 ecx, WORD PTR model$[rsp]
  00125	66 89 48 3c	 mov	 WORD PTR [rax+60], cx

; 2963 :     regs->cpuversion = version;

  00129	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  0012e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR version$[rsp]
  00133	88 48 3e	 mov	 BYTE PTR [rax+62], cl

; 2964 :     regs->cpuserial  = serial;

  00136	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  0013b	8b 4c 24 24	 mov	 ecx, DWORD PTR serial$[rsp]
  0013f	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 2965 : 
; 2966 :     if (ARCH_370_IDX != sysblk.arch_mode)

  00142	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00149	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  00150	0f 84 48 01 00
	00		 je	 $LN4@setCpuIdre

; 2967 :     {
; 2968 :         /* Handle LPAR formatting */
; 2969 :         if (sysblk.lparmode)

  00156	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0015d	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00163	83 e0 01	 and	 eax, 1
  00166	85 c0		 test	 eax, eax
  00168	0f 84 d6 00 00
	00		 je	 $LN5@setCpuIdre

; 2970 :         {
; 2971 :             /* Overlay CPUID serial nibbles 0 and 1 with LPAR or LPAR/CPU.
; 2972 :              * The full serial number is maintained in STSI information.
; 2973 :              */
; 2974 :             serial &= 0x0000FFFF;

  0016e	8b 44 24 24	 mov	 eax, DWORD PTR serial$[rsp]
  00172	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00177	89 44 24 24	 mov	 DWORD PTR serial$[rsp], eax

; 2975 : 
; 2976 :             if (sysblk.cpuidfmt)  /* Format 1 CPU ID? */

  0017b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00182	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  00189	85 c0		 test	 eax, eax
  0018b	74 50		 je	 SHORT $LN7@setCpuIdre

; 2977 :             {
; 2978 :                 /* Set Format 1 bit (bit 48 or MCEL bit 0) */
; 2979 :                 MCEL = 0x8000;

  0018d	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  00192	66 89 44 24 28	 mov	 WORD PTR MCEL$[rsp], ax

; 2980 : 
; 2981 :                 /* Use LPAR number to a maximum of 255 */
; 2982 :                 serial |= min( sysblk.lparnum, 255 ) << 16;

  00197	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0019e	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  001a5	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  001aa	7d 14		 jge	 SHORT $LN18@setCpuIdre
  001ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001b3	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  001ba	89 44 24 3c	 mov	 DWORD PTR tv142[rsp], eax
  001be	eb 08		 jmp	 SHORT $LN19@setCpuIdre
$LN18@setCpuIdre:
  001c0	c7 44 24 3c ff
	00 00 00	 mov	 DWORD PTR tv142[rsp], 255 ; 000000ffH
$LN19@setCpuIdre:
  001c8	8b 44 24 3c	 mov	 eax, DWORD PTR tv142[rsp]
  001cc	c1 e0 10	 shl	 eax, 16
  001cf	8b 4c 24 24	 mov	 ecx, DWORD PTR serial$[rsp]
  001d3	0b c8		 or	 ecx, eax
  001d5	8b c1		 mov	 eax, ecx
  001d7	89 44 24 24	 mov	 DWORD PTR serial$[rsp], eax

; 2983 :             }

  001db	eb 65		 jmp	 SHORT $LN8@setCpuIdre
$LN7@setCpuIdre:

; 2984 :             else /* Format 0 CPU ID */
; 2985 :             {
; 2986 :                 /* Clear MCEL and leave Format 1 bit as zero */
; 2987 :                 MCEL = 0;

  001dd	33 c0		 xor	 eax, eax
  001df	66 89 44 24 28	 mov	 WORD PTR MCEL$[rsp], ax

; 2988 : 
; 2989 :                 /* Use low-order nibble of LPAR id;
; 2990 :                  * LPARNUM 10 is indicated as a value of 0.
; 2991 :                  */
; 2992 :                 serial |= (sysblk.lparnum & 0x0F) << 16;

  001e4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001eb	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  001f2	83 e0 0f	 and	 eax, 15
  001f5	c1 e0 10	 shl	 eax, 16
  001f8	8b 4c 24 24	 mov	 ecx, DWORD PTR serial$[rsp]
  001fc	0b c8		 or	 ecx, eax
  001fe	8b c1		 mov	 eax, ecx
  00200	89 44 24 24	 mov	 DWORD PTR serial$[rsp], eax

; 2993 : 
; 2994 :                 /* and a single digit CPU ID to a maximum of 15 */
; 2995 :                 serial |= min( regs->cpuad, 15 ) << 20;

  00204	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  00209	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00210	83 f8 0f	 cmp	 eax, 15
  00213	7d 12		 jge	 SHORT $LN20@setCpuIdre
  00215	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  0021a	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  00221	89 44 24 40	 mov	 DWORD PTR tv155[rsp], eax
  00225	eb 08		 jmp	 SHORT $LN21@setCpuIdre
$LN20@setCpuIdre:
  00227	c7 44 24 40 0f
	00 00 00	 mov	 DWORD PTR tv155[rsp], 15
$LN21@setCpuIdre:
  0022f	8b 44 24 40	 mov	 eax, DWORD PTR tv155[rsp]
  00233	c1 e0 14	 shl	 eax, 20
  00236	8b 4c 24 24	 mov	 ecx, DWORD PTR serial$[rsp]
  0023a	0b c8		 or	 ecx, eax
  0023c	8b c1		 mov	 eax, ecx
  0023e	89 44 24 24	 mov	 DWORD PTR serial$[rsp], eax
$LN8@setCpuIdre:

; 2996 :             }
; 2997 :         }

  00242	eb 5a		 jmp	 SHORT $LN6@setCpuIdre
$LN5@setCpuIdre:

; 2998 :         else /* BASIC mode CPU ID */
; 2999 :         {
; 3000 :             /* Format is always stored as zero in BASIC mode */
; 3001 :             MCEL &= 0x7FFF;

  00244	0f b7 44 24 28	 movzx	 eax, WORD PTR MCEL$[rsp]
  00249	25 ff 7f 00 00	 and	 eax, 32767		; 00007fffH
  0024e	66 89 44 24 28	 mov	 WORD PTR MCEL$[rsp], ax

; 3002 : 
; 3003 :             /* Use a single digit CPU ID to a maximum of 15 */
; 3004 :             serial &= 0x000FFFFF;

  00253	8b 44 24 24	 mov	 eax, DWORD PTR serial$[rsp]
  00257	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  0025c	89 44 24 24	 mov	 DWORD PTR serial$[rsp], eax

; 3005 :             serial |= min( regs->cpuad, 15 ) << 20;

  00260	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  00265	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  0026c	83 f8 0f	 cmp	 eax, 15
  0026f	7d 12		 jge	 SHORT $LN22@setCpuIdre
  00271	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  00276	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  0027d	89 44 24 44	 mov	 DWORD PTR tv167[rsp], eax
  00281	eb 08		 jmp	 SHORT $LN23@setCpuIdre
$LN22@setCpuIdre:
  00283	c7 44 24 44 0f
	00 00 00	 mov	 DWORD PTR tv167[rsp], 15
$LN23@setCpuIdre:
  0028b	8b 44 24 44	 mov	 eax, DWORD PTR tv167[rsp]
  0028f	c1 e0 14	 shl	 eax, 20
  00292	8b 4c 24 24	 mov	 ecx, DWORD PTR serial$[rsp]
  00296	0b c8		 or	 ecx, eax
  00298	8b c1		 mov	 eax, ecx
  0029a	89 44 24 24	 mov	 DWORD PTR serial$[rsp], eax
$LN6@setCpuIdre:
$LN4@setCpuIdre:

; 3006 :         }
; 3007 :     }
; 3008 : 
; 3009 :     /* Construct new CPU ID */
; 3010 :     regs->cpuid = createCpuId( model, version, serial, MCEL );

  0029e	0f b7 44 24 28	 movzx	 eax, WORD PTR MCEL$[rsp]
  002a3	8b 4c 24 24	 mov	 ecx, DWORD PTR serial$[rsp]
  002a7	0f b6 54 24 20	 movzx	 edx, BYTE PTR version$[rsp]
  002ac	44 0f b7 44 24
	2c		 movzx	 r8d, WORD PTR model$[rsp]
  002b2	4c 89 44 24 50	 mov	 QWORD PTR tv178[rsp], r8
  002b7	44 8b c8	 mov	 r9d, eax
  002ba	44 8b c1	 mov	 r8d, ecx
  002bd	48 8b 44 24 50	 mov	 rax, QWORD PTR tv178[rsp]
  002c2	48 8b c8	 mov	 rcx, rax
  002c5	e8 00 00 00 00	 call	 createCpuId
  002ca	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  002cf	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
$LN1@setCpuIdre:

; 3011 : }

  002d3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002d7	c3		 ret	 0
setCpuIdregs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
success$ = 48
model$ = 80
version$ = 88
serial$ = 96
MCEL$ = 104
force$ = 112
setAllCpuIds_lock PROC

; 3105 : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3106 :     BYTE success;
; 3107 :     OBTAIN_INTLOCK( NULL );

  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161495
  0001e	33 c9		 xor	 ecx, ecx
  00020	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 3108 :     {
; 3109 :         /* Call unlocked version of setAllCpuIds */
; 3110 :         success = setAllCpuIds( model, version, serial, MCEL, force );

  00025	0f b6 44 24 70	 movzx	 eax, BYTE PTR force$[rsp]
  0002a	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0002e	44 8b 4c 24 68	 mov	 r9d, DWORD PTR MCEL$[rsp]
  00033	44 8b 44 24 60	 mov	 r8d, DWORD PTR serial$[rsp]
  00038	0f b7 54 24 58	 movzx	 edx, WORD PTR version$[rsp]
  0003d	8b 4c 24 50	 mov	 ecx, DWORD PTR model$[rsp]
  00041	e8 00 00 00 00	 call	 setAllCpuIds
  00046	88 44 24 30	 mov	 BYTE PTR success$[rsp], al

; 3111 :     }
; 3112 :     RELEASE_INTLOCK( NULL );

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161496
  00051	33 c9		 xor	 ecx, ecx
  00053	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 3113 :     return success;

  00058	0f b6 44 24 30	 movzx	 eax, BYTE PTR success$[rsp]

; 3114 : }

  0005d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00061	c3		 ret	 0
setAllCpuIds_lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
cpu$ = 48
tv83 = 52
mcel$ = 56
tv135 = 64
model$ = 96
version$ = 104
serial$ = 112
MCEL$ = 120
force$ = 128
setAllCpuIds PROC

; 3068 : {

$LN17:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3069 :     U64  mcel;
; 3070 :     int  cpu;
; 3071 : 
; 3072 :     /* Determine and update system CPU model */
; 3073 :     if (model >= 0)

  00017	83 7c 24 60 00	 cmp	 DWORD PTR model$[rsp], 0
  0001c	7c 17		 jl	 SHORT $LN5@setAllCpuI

; 3074 :         sysblk.cpumodel = model & 0x0000FFFF;

  0001e	8b 44 24 60	 mov	 eax, DWORD PTR model$[rsp]
  00022	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00027	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0002e	66 89 81 d4 00
	00 00		 mov	 WORD PTR [rcx+212], ax
$LN5@setAllCpuI:

; 3075 : 
; 3076 :     /* Determine and update CPU version */
; 3077 :     if (version >= 0)

  00035	0f bf 44 24 68	 movsx	 eax, WORD PTR version$[rsp]
  0003a	85 c0		 test	 eax, eax
  0003c	7c 17		 jl	 SHORT $LN6@setAllCpuI

; 3078 :         sysblk.cpuversion = version & 0xFF;

  0003e	0f bf 44 24 68	 movsx	 eax, WORD PTR version$[rsp]
  00043	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00048	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004f	88 81 d6 00 00
	00		 mov	 BYTE PTR [rcx+214], al
$LN6@setAllCpuI:

; 3079 : 
; 3080 :     /* Determine and update CPU serial number */
; 3081 :     if (serial >= 0)

  00055	83 7c 24 70 00	 cmp	 DWORD PTR serial$[rsp], 0
  0005a	7c 16		 jl	 SHORT $LN7@setAllCpuI

; 3082 :         sysblk.cpuserial = serial & 0x00FFFFFF;

  0005c	8b 44 24 70	 mov	 eax, DWORD PTR serial$[rsp]
  00060	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00065	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0006c	89 81 d0 00 00
	00		 mov	 DWORD PTR [rcx+208], eax
$LN7@setAllCpuI:

; 3083 : 
; 3084 :     /* Determine and update MCEL */
; 3085 :          if (sysblk.lparmode)                   mcel = sysblk.cpuidfmt ? 0x8000 : 0;

  00072	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00079	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  0007f	83 e0 01	 and	 eax, 1
  00082	85 c0		 test	 eax, eax
  00084	74 30		 je	 SHORT $LN8@setAllCpuI
  00086	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0008d	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  00094	85 c0		 test	 eax, eax
  00096	74 0a		 je	 SHORT $LN15@setAllCpuI
  00098	c7 44 24 34 00
	80 00 00	 mov	 DWORD PTR tv83[rsp], 32768 ; 00008000H
  000a0	eb 08		 jmp	 SHORT $LN16@setAllCpuI
$LN15@setAllCpuI:
  000a2	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN16@setAllCpuI:
  000aa	48 63 44 24 34	 movsxd	 rax, DWORD PTR tv83[rsp]
  000af	48 89 44 24 38	 mov	 QWORD PTR mcel$[rsp], rax
  000b4	eb 59		 jmp	 SHORT $LN9@setAllCpuI
$LN8@setAllCpuI:

; 3086 :     else if (MCEL >= 0)                         mcel = MCEL & 0xFFFF;

  000b6	83 7c 24 78 00	 cmp	 DWORD PTR MCEL$[rsp], 0
  000bb	7c 12		 jl	 SHORT $LN10@setAllCpuI
  000bd	8b 44 24 78	 mov	 eax, DWORD PTR MCEL$[rsp]
  000c1	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  000c6	48 98		 cdqe
  000c8	48 89 44 24 38	 mov	 QWORD PTR mcel$[rsp], rax
  000cd	eb 40		 jmp	 SHORT $LN11@setAllCpuI
$LN10@setAllCpuI:

; 3087 :     else if ((sysblk.cpuid & 0xFFFF) == 0x8000) mcel = 0;

  000cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000d6	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000dd	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  000e3	48 3d 00 80 00
	00		 cmp	 rax, 32768		; 00008000H
  000e9	75 0b		 jne	 SHORT $LN12@setAllCpuI
  000eb	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR mcel$[rsp], 0
  000f4	eb 19		 jmp	 SHORT $LN13@setAllCpuI
$LN12@setAllCpuI:

; 3088 :     else                                        mcel = sysblk.cpuid & 0xFFFF;

  000f6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000fd	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00104	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0010a	48 89 44 24 38	 mov	 QWORD PTR mcel$[rsp], rax
$LN13@setAllCpuI:
$LN11@setAllCpuI:
$LN9@setAllCpuI:

; 3089 : 
; 3090 :     /* Set the system global CPU ID */
; 3091 :     sysblk.cpuid = createCpuId( sysblk.cpumodel, sysblk.cpuversion, sysblk.cpuserial, mcel );

  0010f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00116	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  0011c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00123	0f b6 89 d6 00
	00 00		 movzx	 ecx, BYTE PTR [rcx+214]
  0012a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00131	0f b7 92 d4 00
	00 00		 movzx	 edx, WORD PTR [rdx+212]
  00138	48 89 54 24 40	 mov	 QWORD PTR tv135[rsp], rdx
  0013d	4c 8b 4c 24 38	 mov	 r9, QWORD PTR mcel$[rsp]
  00142	44 8b c0	 mov	 r8d, eax
  00145	8b d1		 mov	 edx, ecx
  00147	48 8b 44 24 40	 mov	 rax, QWORD PTR tv135[rsp]
  0014c	48 8b c8	 mov	 rcx, rax
  0014f	e8 00 00 00 00	 call	 createCpuId
  00154	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0015b	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 3092 : 
; 3093 :     /* Set a tailored CPU ID for each and every defined CPU */
; 3094 :     for (cpu=0; cpu < MAX_CPU_ENGS; ++cpu )

  00162	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR cpu$[rsp], 0
  0016a	eb 0a		 jmp	 SHORT $LN4@setAllCpuI
$LN2@setAllCpuI:
  0016c	8b 44 24 30	 mov	 eax, DWORD PTR cpu$[rsp]
  00170	ff c0		 inc	 eax
  00172	89 44 24 30	 mov	 DWORD PTR cpu$[rsp], eax
$LN4@setAllCpuI:
  00176	83 7c 24 30 40	 cmp	 DWORD PTR cpu$[rsp], 64	; 00000040H
  0017b	7d 2e		 jge	 SHORT $LN3@setAllCpuI

; 3095 :         setCpuId( cpu, model, version, serial, MCEL, force );

  0017d	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR force$[rsp]
  00185	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00189	8b 44 24 78	 mov	 eax, DWORD PTR MCEL$[rsp]
  0018d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00191	44 8b 4c 24 70	 mov	 r9d, DWORD PTR serial$[rsp]
  00196	44 0f b7 44 24
	68		 movzx	 r8d, WORD PTR version$[rsp]
  0019c	8b 54 24 60	 mov	 edx, DWORD PTR model$[rsp]
  001a0	8b 4c 24 30	 mov	 ecx, DWORD PTR cpu$[rsp]
  001a4	e8 00 00 00 00	 call	 setCpuId
  001a9	eb c1		 jmp	 SHORT $LN2@setAllCpuI
$LN3@setAllCpuI:

; 3096 : 
; 3097 :    return TRUE;

  001ab	b0 01		 mov	 al, 1

; 3098 : }

  001ad	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001b1	c3		 ret	 0
setAllCpuIds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
result$ = 0
model$ = 32
version$ = 40
serial$ = 48
MCEL$ = 56
createCpuId PROC

; 2911 : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 2912 :     U64 result;
; 2913 : 
; 2914 :     result    =  version;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR version$[rsp]
  0001d	48 89 04 24	 mov	 QWORD PTR result$[rsp], rax

; 2915 : 
; 2916 :     result  <<=  24;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]
  00025	48 c1 e0 18	 shl	 rax, 24
  00029	48 89 04 24	 mov	 QWORD PTR result$[rsp], rax

; 2917 :     result   |=  serial;

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR serial$[rsp]
  00032	48 8b 0c 24	 mov	 rcx, QWORD PTR result$[rsp]
  00036	48 0b c8	 or	 rcx, rax
  00039	48 8b c1	 mov	 rax, rcx
  0003c	48 89 04 24	 mov	 QWORD PTR result$[rsp], rax

; 2918 : 
; 2919 :     result  <<=  16;

  00040	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]
  00044	48 c1 e0 10	 shl	 rax, 16
  00048	48 89 04 24	 mov	 QWORD PTR result$[rsp], rax

; 2920 :     result   |=  model;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR model$[rsp]
  00051	48 8b 0c 24	 mov	 rcx, QWORD PTR result$[rsp]
  00055	48 0b c8	 or	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 89 04 24	 mov	 QWORD PTR result$[rsp], rax

; 2921 : 
; 2922 :     result  <<=  16;

  0005f	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]
  00063	48 c1 e0 10	 shl	 rax, 16
  00067	48 89 04 24	 mov	 QWORD PTR result$[rsp], rax

; 2923 :     result   |=  MCEL;

  0006b	48 8b 44 24 38	 mov	 rax, QWORD PTR MCEL$[rsp]
  00070	48 8b 0c 24	 mov	 rcx, QWORD PTR result$[rsp]
  00074	48 0b c8	 or	 rcx, rax
  00077	48 8b c1	 mov	 rax, rcx
  0007a	48 89 04 24	 mov	 QWORD PTR result$[rsp], rax

; 2924 : 
; 2925 :     return result;

  0007e	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]

; 2926 : }

  00082	48 83 c4 18	 add	 rsp, 24
  00086	c3		 ret	 0
createCpuId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscemode.c
_TEXT	SEGMENT
regs$1 = 80
tv90 = 88
buf$2 = 96
wrk$3 = 224
__$ArrayPad$ = 352
argc$ = 384
argv$ = 392
cmdline$ = 400
aia_cmd	PROC

; 333  : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@aia_cmd:

; 334  :     UNREFERENCED( argc );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@aia_cmd
$LN7@aia_cmd:

; 335  :     UNREFERENCED( argv );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN7@aia_cmd
$LN10@aia_cmd:

; 336  :     UNREFERENCED( cmdline );

  00033	33 c0		 xor	 eax, eax
  00035	85 c0		 test	 eax, eax
  00037	75 fa		 jne	 SHORT $LN10@aia_cmd

; 337  : 
; 338  :     obtain_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00040	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004e	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159376
  0005d	48 8b c8	 mov	 rcx, rax
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 339  :     {
; 340  :         REGS*  regs;
; 341  :         char   buf[128];
; 342  : 
; 343  :         if (!IS_CPU_ONLINE( sysblk.pcpu ))

  00066	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006d	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0007b	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00084	0f 85 cd 00 00
	00		 jne	 $LN11@aia_cmd

; 344  :         {
; 345  :             release_lock( &sysblk.cpulock[ sysblk.pcpu ]);

  0008a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00091	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0009f	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159378
  000ae	48 8b c8	 mov	 rcx, rax
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 346  : 
; 347  :             // "Processor %s%02X: processor is not %s"
; 348  :             WRMSG( HHC00816, "E", PTYPSTR( sysblk.pcpu ),

  000b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000be	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000cc	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000da	48 89 44 24 58	 mov	 QWORD PTR tv90[rsp], rax
  000df	b9 01 00 00 00	 mov	 ecx, 1
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159379
  000f1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000fd	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  00103	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00107	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv90[rsp]
  0010c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159380
  00118	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159381
  00124	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00129	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159382
  0013b	ba 5d 01 00 00	 mov	 edx, 349		; 0000015dH
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159383
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 349  :                 sysblk.pcpu, "online" );
; 350  :             return -1;

  0014d	b8 ff ff ff ff	 mov	 eax, -1
  00152	e9 f4 01 00 00	 jmp	 $LN1@aia_cmd
$LN11@aia_cmd:

; 351  :         }
; 352  : 
; 353  :         regs = sysblk.regs[ sysblk.pcpu ];

  00157	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0015e	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00165	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0016c	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00174	48 89 44 24 50	 mov	 QWORD PTR regs$1[rsp], rax

; 354  : 
; 355  :         MSGBUF( buf, "AIV %16.16"PRIx64" aip %p ip %p aie %p",

  00179	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  0017e	48 8b 80 08 02
	00 00		 mov	 rax, QWORD PTR [rax+520]
  00185	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0018a	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  0018f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00193	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00198	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  0019d	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  001a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a9	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  001ae	4c 8b 88 10 02
	00 00		 mov	 r9, QWORD PTR [rax+528]
  001b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159384
  001bc	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  001c1	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$2[rsp]
  001c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 356  : 
; 357  :                 regs->AIV_G,
; 358  :                 regs->aip,
; 359  :                 regs->ip,
; 360  :                 regs->aie
; 361  :         );
; 362  : 
; 363  :         // "%s" (aia_cmd)
; 364  :         WRMSG( HHC02283, "I", buf );

  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d7	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$2[rsp]
  001dc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159385
  001e8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159386
  001f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00204	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159387
  0020b	ba 6c 01 00 00	 mov	 edx, 364		; 0000016cH
  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159388
  00217	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 365  : 
; 366  :         if (regs->sie_active)

  0021d	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  00222	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00228	83 e0 01	 and	 eax, 1
  0022b	85 c0		 test	 eax, eax
  0022d	0f 84 e9 00 00
	00		 je	 $LN12@aia_cmd

; 367  :         {
; 368  :             char wrk[128];
; 369  : 
; 370  :             regs = GUESTREGS;

  00233	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  00238	48 8b 80 70 08
	00 00		 mov	 rax, QWORD PTR [rax+2160]
  0023f	48 89 44 24 50	 mov	 QWORD PTR regs$1[rsp], rax

; 371  : 
; 372  :             MSGBUF( wrk, "AIV %16.16"PRIx64" aip %p ip %p aie %p"

  00244	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  00249	48 8b 80 08 02
	00 00		 mov	 rax, QWORD PTR [rax+520]
  00250	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00255	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  0025a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0025e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00263	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  00268	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  0026f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00274	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$1[rsp]
  00279	4c 8b 88 10 02
	00 00		 mov	 r9, QWORD PTR [rax+528]
  00280	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159390
  00287	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0028c	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR wrk$3[rsp]
  00294	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 373  : 
; 374  :                 , regs->AIV_G
; 375  :                 , regs->aip
; 376  :                 , regs->ip
; 377  :                 , regs->aie
; 378  :             );
; 379  : 
; 380  :             STRLCPY( buf, "SIE: " );

  0029a	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  002a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159391
  002a7	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$2[rsp]
  002ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 381  :             STRLCAT( buf, wrk );

  002b2	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  002b8	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR wrk$3[rsp]
  002c0	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$2[rsp]
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 382  : 
; 383  :             // "%s" (aia_cmd)
; 384  :             WRMSG( HHC02283, "I", buf );

  002cb	b9 01 00 00 00	 mov	 ecx, 1
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002d6	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$2[rsp]
  002db	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159392
  002e7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159393
  002f3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002f8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002fd	41 b9 03 00 00
	00		 mov	 r9d, 3
  00303	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159394
  0030a	ba 80 01 00 00	 mov	 edx, 384		; 00000180H
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159395
  00316	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@aia_cmd:

; 385  :         }
; 386  :     }
; 387  :     release_lock ( &sysblk.cpulock[ sysblk.pcpu ]);

  0031c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00323	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0032a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00331	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159396
  00340	48 8b c8	 mov	 rcx, rax
  00343	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 388  : 
; 389  :     return 0;

  00349	33 c0		 xor	 eax, eax
$LN1@aia_cmd:

; 390  : }

  0034b	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00353	48 33 cc	 xor	 rcx, rsp
  00356	e8 00 00 00 00	 call	 __security_check_cookie
  0035b	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00362	c3		 ret	 0
aia_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
s$ = 32
r$ = 40
result$ = 64
string$ = 72
strupper PROC

; 157  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 158  :     register char *r = result;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 159  :     register char *s = string;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR string$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 160  :     for (; *s; r++, s++)

  00022	eb 1a		 jmp	 SHORT $LN4@strupper
$LN2@strupper:
  00024	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00029	48 ff c0	 inc	 rax
  0002c	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 ff c0	 inc	 rax
  00039	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN4@strupper:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00043	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00046	85 c0		 test	 eax, eax
  00048	74 16		 je	 SHORT $LN3@strupper

; 161  :     {
; 162  :         *r = asciitoupper(*s);

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00052	e8 00 00 00 00	 call	 asciitoupper
  00057	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$[rsp]
  0005c	88 01		 mov	 BYTE PTR [rcx], al

; 163  :     }

  0005e	eb c4		 jmp	 SHORT $LN2@strupper
$LN3@strupper:

; 164  :     *r = 0;

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00065	c6 00 00	 mov	 BYTE PTR [rax], 0

; 165  :     return result;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]

; 166  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
strupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
tv84 = 32
tv73 = 36
tv93 = 40
a$ = 48
s$ = 56
string$ = 80
abbrev$ = 88
n$ = 96
strcaseabbrev PROC

; 91   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     register const char *s = string;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR string$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 93   :     register const char *a = abbrev;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 94   :     if (*a &&
; 95   :         *s &&

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0002c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 02 01 00
	00		 je	 $LN5@strcaseabb
  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f2 00 00
	00		 je	 $LN5@strcaseabb
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0004c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00054	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00057	3b c1		 cmp	 eax, ecx
  00059	74 30		 je	 SHORT $LN6@strcaseabb
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00060	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00063	e8 00 00 00 00	 call	 asciitoupper
  00068	0f be c0	 movsx	 eax, al
  0006b	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00074	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00077	e8 00 00 00 00	 call	 asciitoupper
  0007c	0f be c0	 movsx	 eax, al
  0007f	8b 4c 24 24	 mov	 ecx, DWORD PTR tv73[rsp]
  00083	3b c8		 cmp	 ecx, eax
  00085	0f 85 ae 00 00
	00		 jne	 $LN5@strcaseabb
$LN6@strcaseabb:
$LN2@strcaseabb:

; 96   :         (*a == *s ||
; 97   :         asciitoupper(*a) == asciitoupper(*s)))
; 98   :     {
; 99   :         for (;;)
; 100  :         {
; 101  :             a++;

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00090	48 ff c0	 inc	 rax
  00093	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 102  :             if (!*a)

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0009d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a0	85 c0		 test	 eax, eax
  000a2	75 31		 jne	 SHORT $LN7@strcaseabb

; 103  :                 return (((uintptr_t)a - (uintptr_t)abbrev) >= n);

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a$[rsp]
  000ae	48 2b c8	 sub	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	8b 4c 24 60	 mov	 ecx, DWORD PTR n$[rsp]
  000b8	48 3b c1	 cmp	 rax, rcx
  000bb	72 0a		 jb	 SHORT $LN12@strcaseabb
  000bd	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000c5	eb 08		 jmp	 SHORT $LN13@strcaseabb
$LN12@strcaseabb:
  000c7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN13@strcaseabb:
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR tv84[rsp]
  000d3	eb 66		 jmp	 SHORT $LN1@strcaseabb
$LN7@strcaseabb:

; 104  :             s++;

  000d5	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 ff c0	 inc	 rax
  000dd	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 105  :             if (!*s)

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000e7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ea	85 c0		 test	 eax, eax
  000ec	75 02		 jne	 SHORT $LN8@strcaseabb

; 106  :                 break;

  000ee	eb 49		 jmp	 SHORT $LN3@strcaseabb
$LN8@strcaseabb:

; 107  :             if (*a == *s)

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  000f5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00100	3b c1		 cmp	 eax, ecx
  00102	75 02		 jne	 SHORT $LN9@strcaseabb

; 108  :                 continue;

  00104	eb 85		 jmp	 SHORT $LN2@strcaseabb
$LN9@strcaseabb:

; 109  :             if (asciitoupper(*a) != asciitoupper(*s))

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0010b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0010e	e8 00 00 00 00	 call	 asciitoupper
  00113	0f be c0	 movsx	 eax, al
  00116	89 44 24 28	 mov	 DWORD PTR tv93[rsp], eax
  0011a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00122	e8 00 00 00 00	 call	 asciitoupper
  00127	0f be c0	 movsx	 eax, al
  0012a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv93[rsp]
  0012e	3b c8		 cmp	 ecx, eax
  00130	74 02		 je	 SHORT $LN10@strcaseabb

; 110  :                 break;

  00132	eb 05		 jmp	 SHORT $LN3@strcaseabb
$LN10@strcaseabb:

; 111  :         }

  00134	e9 52 ff ff ff	 jmp	 $LN2@strcaseabb
$LN3@strcaseabb:
$LN5@strcaseabb:

; 112  :     }
; 113  :     return 0;

  00139	33 c0		 xor	 eax, eax
$LN1@strcaseabb:

; 114  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
strcaseabbrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
c$ = 8
asciitoupper PROC

; 29   : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 30   :   if (c < 'a' || c > 'z')

  00004	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00009	83 f8 61	 cmp	 eax, 97			; 00000061H
  0000c	7c 0a		 jl	 SHORT $LN3@asciitoupp
  0000e	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00013	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00016	7e 07		 jle	 SHORT $LN2@asciitoupp
$LN3@asciitoupp:

; 31   :       return c;

  00018	0f b6 44 24 08	 movzx	 eax, BYTE PTR c$[rsp]
  0001d	eb 08		 jmp	 SHORT $LN1@asciitoupp
$LN2@asciitoupp:

; 32   :   return (c - 32);

  0001f	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00024	83 e8 20	 sub	 eax, 32			; 00000020H
$LN1@asciitoupp:

; 33   : }

  00027	c3		 ret	 0
asciitoupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
