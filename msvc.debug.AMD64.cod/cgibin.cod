; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	cgibin_blinkenlights_cpu
PUBLIC	cgibin_reg_control
PUBLIC	cgibin_reg_general
PUBLIC	cgibin_psw
PUBLIC	cgibin_syslog
PUBLIC	cgibin_debug_registers
PUBLIC	cgibin_debug_storage
PUBLIC	cgibin_ipl
PUBLIC	cgibin_debug_device_list
PUBLIC	cgibin_debug_device_detail
PUBLIC	cgibin_debug_misc
PUBLIC	cgibin_configure_cpu
PUBLIC	cgibin_debug_version_info
PUBLIC	cgibin_xml_rates_info
PUBLIC	cgibin_cmd
PUBLIC	cgidir
_DATA	SEGMENT
cgidir	DQ	FLAT:$SG168804
	DQ	FLAT:cgibin_blinkenlights_cpu
	DQ	FLAT:$SG168805
	DQ	FLAT:cgibin_configure_cpu
	DQ	FLAT:$SG168806
	DQ	FLAT:cgibin_debug_registers
	DQ	FLAT:$SG168807
	DQ	FLAT:cgibin_debug_storage
	DQ	FLAT:$SG168808
	DQ	FLAT:cgibin_debug_misc
	DQ	FLAT:$SG168809
	DQ	FLAT:cgibin_debug_version_info
	DQ	FLAT:$SG168810
	DQ	FLAT:cgibin_debug_device_list
	DQ	FLAT:$SG168811
	DQ	FLAT:cgibin_debug_device_detail
	DQ	FLAT:$SG168812
	DQ	FLAT:cgibin_cmd
	DQ	FLAT:$SG168813
	DQ	FLAT:cgibin_syslog
	DQ	FLAT:$SG168814
	DQ	FLAT:cgibin_ipl
	DQ	FLAT:$SG168815
	DQ	FLAT:cgibin_reg_general
	DQ	FLAT:$SG168816
	DQ	FLAT:cgibin_reg_control
	DQ	FLAT:$SG168817
	DQ	FLAT:cgibin_psw
	DQ	FLAT:$SG168818
	DQ	FLAT:cgibin_xml_rates_info
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG168804 DB	'blinkenlights/cpu', 00H
	ORG $+6
$SG168805 DB	'configure/cpu', 00H
	ORG $+2
$SG168806 DB	'debug/registers', 00H
$SG168807 DB	'debug/storage', 00H
	ORG $+2
$SG168808 DB	'debug/misc', 00H
	ORG $+5
$SG168809 DB	'debug/version_info', 00H
	ORG $+5
$SG168810 DB	'debug/device/list', 00H
	ORG $+6
$SG168811 DB	'debug/device/detail', 00H
	ORG $+4
$SG168812 DB	'tasks/cmd', 00H
	ORG $+6
$SG168813 DB	'tasks/syslog', 00H
	ORG $+3
$SG168814 DB	'tasks/ipl', 00H
	ORG $+6
$SG168815 DB	'registers/general', 00H
	ORG $+6
$SG168816 DB	'registers/control', 00H
	ORG $+6
$SG168817 DB	'registers/psw', 00H
	ORG $+2
$SG168818 DB	'xml/rates', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	fetch_fw_noswap
PUBLIC	cgibin_hwrite
PUBLIC	cgibin_cmd_cmd
EXTRN	__imp_isspace:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_display_version:PROC
EXTRN	__imp_hprintf:PROC
EXTRN	__imp_hwrite:PROC
EXTRN	__imp_usleep:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_log_read:PROC
EXTRN	__imp_log_line:PROC
EXTRN	copy_psw:PROC
EXTRN	load_ipl:PROC
EXTRN	configure_cpu:PROC
EXTRN	deconfigure_cpu:PROC
EXTRN	set_loadparm:PROC
EXTRN	str_loadparm:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__imp_panel_command_capture:PROC
EXTRN	get_arch_name:PROC
EXTRN	html_header:PROC
EXTRN	html_footer:PROC
EXTRN	http_variable:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__imp_panel_command:QWORD
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG168454 DB	01H DUP (?)
$SG168467 DB	01H DUP (?)
$SG168469 DB	01H DUP (?)
$SG168472 DB	01H DUP (?)
$SG168474 DB	01H DUP (?)
$SG168485 DB	01H DUP (?)
$SG168487 DB	01H DUP (?)
$SG168490 DB	01H DUP (?)
$SG168492 DB	01H DUP (?)
$SG168502 DB	01H DUP (?)
$SG168504 DB	01H DUP (?)
$SG168574 DB	01H DUP (?)
$SG168579 DB	01H DUP (?)
$SG168603 DB	01H DUP (?)
$SG168605 DB	01H DUP (?)
$SG168607 DB	01H DUP (?)
$SG168632 DB	01H DUP (?)
$SG168722 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$Interrupt_Lock_Obtained DD imagerel Interrupt_Lock_Obtained
	DD	imagerel Interrupt_Lock_Obtained+269
	DD	imagerel $unwind$Interrupt_Lock_Obtained
$pdata$Obtain_Interrupt_Lock DD imagerel Obtain_Interrupt_Lock
	DD	imagerel Obtain_Interrupt_Lock+88
	DD	imagerel $unwind$Obtain_Interrupt_Lock
$pdata$Release_Interrupt_Lock DD imagerel Release_Interrupt_Lock
	DD	imagerel Release_Interrupt_Lock+71
	DD	imagerel $unwind$Release_Interrupt_Lock
$pdata$cgibin_blinkenlights_cpu DD imagerel $LN17
	DD	imagerel $LN17+1138
	DD	imagerel $unwind$cgibin_blinkenlights_cpu
$pdata$cgibin_reg_control DD imagerel $LN16
	DD	imagerel $LN16+413
	DD	imagerel $unwind$cgibin_reg_control
$pdata$cgibin_reg_general DD imagerel $LN16
	DD	imagerel $LN16+407
	DD	imagerel $unwind$cgibin_reg_general
$pdata$cgibin_psw DD imagerel $LN15
	DD	imagerel $LN15+1439
	DD	imagerel $unwind$cgibin_psw
$pdata$cgibin_syslog DD imagerel $LN34
	DD	imagerel $LN34+1691
	DD	imagerel $unwind$cgibin_syslog
$pdata$cgibin_debug_registers DD imagerel $LN126
	DD	imagerel $LN126+3705
	DD	imagerel $unwind$cgibin_debug_registers
$pdata$cgibin_debug_storage DD imagerel $LN14
	DD	imagerel $LN14+484
	DD	imagerel $unwind$cgibin_debug_storage
$pdata$cgibin_ipl DD imagerel $LN27
	DD	imagerel $LN27+869
	DD	imagerel $unwind$cgibin_ipl
$pdata$cgibin_debug_device_list DD imagerel $LN13
	DD	imagerel $LN13+506
	DD	imagerel $unwind$cgibin_debug_device_list
$pdata$cgibin_debug_device_detail DD imagerel $LN16
	DD	imagerel $LN16+1893
	DD	imagerel $unwind$cgibin_debug_device_detail
$pdata$cgibin_debug_misc DD imagerel $LN6
	DD	imagerel $LN6+556
	DD	imagerel $unwind$cgibin_debug_misc
$pdata$cgibin_configure_cpu DD imagerel $LN29
	DD	imagerel $LN29+701
	DD	imagerel $unwind$cgibin_configure_cpu
$pdata$cgibin_debug_version_info DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$cgibin_debug_version_info
$pdata$cgibin_xml_rates_info DD imagerel $LN3
	DD	imagerel $LN3+271
	DD	imagerel $unwind$cgibin_xml_rates_info
$pdata$cgibin_hwrite DD imagerel $LN18
	DD	imagerel $LN18+433
	DD	imagerel $unwind$cgibin_hwrite
$pdata$cgibin_cmd_cmd DD imagerel $LN7
	DD	imagerel $LN7+217
	DD	imagerel $unwind$cgibin_cmd_cmd
$pdata$cgibin_cmd DD imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$cgibin_cmd
pdata	ENDS
_DATA	SEGMENT
	ORG $+6
$SG168183 DB	'Expires: 0', 0aH, 00H
$SG168212 DB	0aH, 00H
	ORG $+2
$SG168184 DB	'Content-type: text/csv;', 0aH, 0aH, 00H
	ORG $+6
$SG168188 DB	'CPU%4.4d,PSW,%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.'
	DB	'2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+1
$SG168189 DB	'CPU%4.4d,PSW,%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X', 0aH
	DB	00H
	ORG $+1
$SG168192 DB	'CPU%4.4d,GR%1.1X=%16.16llX', 0aH, 00H
$SG168213 DB	09H, 00H
	ORG $+2
$SG168193 DB	'CPU%4.4d,GR%2.2d,%8.8X', 0aH, 00H
$SG168208 DB	'<H2>Control Registers</H2>', 0aH, 00H
$SG168209 DB	'<PRE>', 0aH, 00H
	ORG $+1
$SG168215 DB	0aH, 00H
	ORG $+2
$SG168214 DB	'CR%2.2d=%8.8X%s', 00H
$SG168216 DB	' ', 00H
	ORG $+2
$SG168234 DB	'<PRE>', 0aH, 00H
	ORG $+1
$SG168237 DB	0aH, 00H
	ORG $+2
$SG168217 DB	'CR%1.1X=%16.16llX%s', 00H
$SG168238 DB	09H, 00H
	ORG $+2
$SG168218 DB	'</PRE>', 0aH, 00H
$SG168233 DB	'<H2>General Registers</H2>', 0aH, 00H
$SG168240 DB	0aH, 00H
	ORG $+2
$SG168239 DB	'GR%2.2d=%8.8X%s', 00H
$SG168241 DB	' ', 00H
	ORG $+2
$SG168323 DB	'<PRE>', 0aH, 00H
	ORG $+1
$SG168340 DB	'no', 00H
	ORG $+1
$SG168242 DB	'GR%1.1X=%16.16llX%s', 00H
$SG168362 DB	'no', 00H
	ORG $+1
$SG168243 DB	'</PRE>', 0aH, 00H
$SG168256 DB	'autorefresh', 00H
$SG168414 DB	'cpu', 00H
$SG168259 DB	'norefresh', 00H
	ORG $+2
$SG168436 DB	'%x', 00H
	ORG $+1
$SG168261 DB	'refresh', 00H
$SG168263 DB	'refresh_interval', 00H
	ORG $+3
$SG168332 DB	'&amp;', 00H
	ORG $+2
$SG168444 DB	'%x', 00H
	ORG $+1
$SG168264 DB	'<H2>Program Status Word</H2>', 0aH, 00H
	ORG $+2
$SG168265 DB	'<FORM method=post>', 0aH, 00H
$SG168450 DB	'%x', 00H
	ORG $+1
$SG168268 DB	'<INPUT type=submit value="Auto Refresh" name=autorefresh'
	DB	'>', 0aH, 00H
	ORG $+1
$SG168524 DB	'%x', 00H
	ORG $+1
$SG168269 DB	'Refresh Interval: ', 00H
	ORG $+1
$SG168561 DB	'%hx', 00H
$SG168270 DB	'<INPUT type=text size=2 name="refresh_interval" value=%d'
	DB	'>', 0aH, 00H
	ORG $+1
$SG168564 DB	'cpu', 00H
$SG168271 DB	'<INPUT type=submit value="Stop Refreshing" name=norefres'
	DB	'h>', 0aH, 00H
$SG168565 DB	'%x', 00H
	ORG $+1
$SG168272 DB	'Refresh Interval: %d', 0aH, 00H
	ORG $+2
$SG168273 DB	'<INPUT type=hidden name="refresh_interval" value=%d>', 0aH
	DB	00H
	ORG $+2
$SG168274 DB	'</FORM>', 0aH, 00H
	ORG $+3
$SG168275 DB	'<P>', 0aH, 00H
	ORG $+3
$SG168466 DB	'</tr>', 0aH, 00H
	ORG $+1
$SG168627 DB	'%x', 00H
	ORG $+1
$SG168278 DB	'PSW=%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+1
$SG168279 DB	'PSW=%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X'
	DB	'%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X', 0aH, 00H
$SG168281 DB	'<script language="JavaScript">', 0aH, 00H
$SG168283 DB	'//-->', 0aH, '</script>', 0aH, 00H
	ORG $+7
$SG168282 DB	'<!--', 0aH, 'setTimeout(''window.location.replace("%s?re'
	DB	'fresh_interval=%d&refresh=1")'', %d)', 0aH, 00H
$SG168711 DB	'%d', 00H
	ORG $+1
$SG168305 DB	'command', 00H
$SG168308 DB	'msgcount', 00H
	ORG $+3
$SG168468 DB	'<tr>', 0aH, 00H
	ORG $+2
$SG168471 DB	'</tr>', 0aH, 00H
	ORG $+1
$SG168719 DB	'On', 00H
	ORG $+1
$SG168310 DB	'msgcount', 00H
	ORG $+3
$SG168473 DB	'<tr>', 0aH, 00H
	ORG $+2
$SG168484 DB	'</tr>', 0aH, 00H
	ORG $+1
$SG168720 DB	'Off', 00H
$SG168312 DB	'refresh_interval', 00H
	ORG $+3
$SG168486 DB	'<tr>', 0aH, 00H
	ORG $+2
$SG168489 DB	'</tr>', 0aH, 00H
	ORG $+1
$SG168793 DB	'%s', 00H
	ORG $+1
$SG168315 DB	'autorefresh', 00H
$SG168800 DB	'cmd', 00H
$SG168318 DB	'norefresh', 00H
	ORG $+2
$SG168501 DB	'</tr>', 0aH, 00H
	ORG $+5
$SG168320 DB	'refresh', 00H
$SG168328 DB	'&lt;', 00H
	ORG $+3
$SG168321 DB	'<script language="JavaScript">', 0aH, '<!--', 0aH, 'docu'
	DB	'ment.cookie = "msgcount=%d";', 0aH, '//-->', 0aH, '</script>', 0aH
	DB	00H
	ORG $+2
$SG168322 DB	'<H2>Hercules System Log</H2>', 0aH, 00H
	ORG $+2
$SG168330 DB	'&gt;', 00H
	ORG $+3
$SG168335 DB	'</PRE>', 0aH, 00H
$SG168336 DB	'<FORM method=post>Command:', 0aH, 00H
	ORG $+4
$SG168337 DB	'<INPUT type=text name=command size=80 autofocus>', 0aH, 00H
	ORG $+6
$SG168338 DB	'<INPUT type=submit name=send value="Send">', 0aH, 00H
$SG168339 DB	'auto', 00H
	ORG $+7
$SG168341 DB	'<INPUT type=hidden name=%srefresh value=1>', 0aH, 00H
	ORG $+4
$SG168342 DB	'<INPUT type=hidden name=refresh_interval value=%d>', 0aH
	DB	00H
	ORG $+4
$SG168343 DB	'<INPUT type=hidden name=msgcount value=%d>', 0aH, 00H
	ORG $+4
$SG168344 DB	'</FORM>', 0aH, '<BR>', 0aH, 00H
	ORG $+2
$SG168345 DB	'<A name=bottom>', 0aH, 00H
	ORG $+7
$SG168346 DB	'<FORM method=post>', 0aH, 00H
	ORG $+4
$SG168349 DB	'<INPUT type=submit value="Auto Refresh" name=autorefresh'
	DB	'>', 0aH, 00H
	ORG $+5
$SG168350 DB	'Refresh Interval: ', 00H
	ORG $+5
$SG168351 DB	'<INPUT type=text name="refresh_interval" size=2 value=%d'
	DB	'>', 0aH, 00H
	ORG $+5
$SG168352 DB	'<INPUT type=submit name=norefresh value="Stop Refreshing'
	DB	'">', 0aH, 00H
	ORG $+4
$SG168353 DB	'<INPUT type=hidden name=refresh_interval value=%d>', 0aH
	DB	00H
	ORG $+4
$SG168354 DB	' Refresh Interval: %2d ', 0aH, 00H
	ORG $+7
$SG168355 DB	'<INPUT type=hidden name=msgcount value=%d>', 0aH, 00H
	ORG $+4
$SG168356 DB	'</FORM>', 0aH, 00H
	ORG $+7
$SG168357 DB	'<FORM method=post>', 0aH, 00H
	ORG $+4
$SG168358 DB	'Only show last ', 00H
$SG168359 DB	'<INPUT type=text name=msgcount size=3 value=%d>', 00H
$SG168360 DB	' lines (zero for all loglines)', 0aH, 00H
$SG168361 DB	'auto', 00H
	ORG $+3
$SG168363 DB	'<INPUT type=hidden name=%srefresh value=1>', 0aH, 00H
	ORG $+4
$SG168364 DB	'<INPUT type=hidden name=refresh_interval value=%d>', 0aH
	DB	00H
	ORG $+4
$SG168365 DB	'</FORM>', 0aH, 00H
	ORG $+7
$SG168367 DB	'<script language="JavaScript">', 0aH, 00H
$SG168369 DB	'//-->', 0aH, '</script>', 0aH, 00H
	ORG $+7
$SG168368 DB	'<!--', 0aH, 'setTimeout(''window.location.replace("%s?re'
	DB	'fresh_interval=%d&refresh=1&msgcount=%d")'', %d)', 0aH, 00H
$SG168417 DB	'select_gr', 00H
	ORG $+6
$SG168420 DB	'select_cr', 00H
	ORG $+6
$SG168423 DB	'select_ar', 00H
	ORG $+6
$SG168431 DB	'alter_gr', 00H
	ORG $+7
$SG168432 DB	'alter_gr%d', 00H
	ORG $+1
$SG168437 DB	'%llx', 00H
	ORG $+7
$SG168439 DB	'alter_cr', 00H
	ORG $+7
$SG168440 DB	'alter_cr%d', 00H
	ORG $+1
$SG168445 DB	'%llx', 00H
	ORG $+7
$SG168447 DB	'alter_ar', 00H
	ORG $+7
$SG168448 DB	'alter_ar%d', 00H
	ORG $+5
$SG168451 DB	'<form method=post>', 0aH, '<select type=submit name=cpu>'
	DB	0aH, 00H
	ORG $+6
$SG168453 DB	' selected', 00H
	ORG $+6
$SG168455 DB	'<option value=%d%s>CPU%4.4X</option>', 0aH, 00H
	ORG $+2
$SG168456 DB	'</select>', 0aH, '<input type=submit name=selcpu value="'
	DB	'Select">', 0aH, '<input type=hidden name=cpu value=%d>', 0aH, '<'
	DB	'input type=hidden name=select_gr value=%c>', 0aH, '<input typ'
	DB	'e=hidden name=select_cr value=%c>', 0aH, '<input type=hidden '
	DB	'name=select_ar value=%c>', 0aH, 00H
	ORG $+4
$SG168457 DB	'Mode: %s', 0aH, 00H
	ORG $+6
$SG168458 DB	'</form>', 0aH, 00H
	ORG $+7
$SG168463 DB	'<form method=post>', 0aH, '<table>', 0aH, 00H
$SG168491 DB	'<tr>', 0aH, 00H
	ORG $+6
$SG168461 DB	'<form method=post>', 0aH, '<input type=submit name=selec'
	DB	't_gr value="Select General Registers">', 0aH, '<input type=hi'
	DB	'dden name=cpu value=%d>', 0aH, '<input type=hidden name=selec'
	DB	't_cr value=%c>', 0aH, '<input type=hidden name=select_ar valu'
	DB	'e=%c>', 0aH, '</form>', 0aH, 00H
	ORG $+2
$SG168462 DB	'<form method=post>', 0aH, '<input type=submit name=selec'
	DB	't_gr value="Hide General Registers">', 0aH, '<input type=hidd'
	DB	'en name=cpu value=%d>', 0aH, '<input type=hidden name=select_'
	DB	'cr value=%c>', 0aH, '<input type=hidden name=select_ar value='
	DB	'%c>', 0aH, '</form>', 0aH, 00H
	ORG $+4
$SG168470 DB	'%s<td>GR%d</td><td><input type=text name=alter_gr%d size'
	DB	'=8 value=%8.8X></td>', 0aH, '%s', 00H
$SG168475 DB	'%s<td>GR%d</td><td><input type=text name=alter_gr%d size'
	DB	'=16 value=%16.16llX></td>', 0aH, '%s', 00H
	ORG $+3
$SG168503 DB	'<tr>', 0aH, 00H
	ORG $+2
$SG168476 DB	'</table>', 0aH, '<input type=submit name=refresh value="'
	DB	'Refresh">', 0aH, '<input type=submit name=alter_gr value="Alt'
	DB	'er">', 0aH, '<input type=hidden name=cpu value=%d>', 0aH, '<i'
	DB	'nput type=hidden name=select_gr value=S>', 0aH, '<input type='
	DB	'hidden name=select_cr value=%c>', 0aH, '<input type=hidden na'
	DB	'me=select_ar value=%c>', 0aH, '</form>', 0aH, 00H
	ORG $+4
$SG168479 DB	'<form method=post>', 0aH, '<input type=submit name=selec'
	DB	't_cr value="Select Control Registers">', 0aH, '<input type=hi'
	DB	'dden name=cpu value=%d>', 0aH, '<input type=hidden name=selec'
	DB	't_gr value=%c>', 0aH, '<input type=hidden name=select_ar valu'
	DB	'e=%c>', 0aH, '</form>', 0aH, 00H
	ORG $+2
$SG168480 DB	'<form method=post>', 0aH, '<input type=submit name=selec'
	DB	't_cr value="Hide Control Registers">', 0aH, '<input type=hidd'
	DB	'en name=cpu value=%d>', 0aH, '<input type=hidden name=select_'
	DB	'gr value=%c>', 0aH, '<input type=hidden name=select_ar value='
	DB	'%c>', 0aH, '</form>', 0aH, 00H
	ORG $+4
$SG168481 DB	'<form method=post>', 0aH, '<table>', 0aH, 00H
	ORG $+4
$SG168488 DB	'%s<td>CR%d</td><td><input type=text name=alter_cr%d size'
	DB	'=8 value=%8.8X></td>', 0aH, '%s', 00H
$SG168493 DB	'%s<td>CR%d</td><td><input type=text name=alter_cr%d size'
	DB	'=16 value=%16.16llX></td>', 0aH, '%s', 00H
	ORG $+3
$SG168532 DB	'<td><input type=text name=alter_m%d size=8 value=%8.8X><'
	DB	'/td>', 0aH, 00H
	ORG $+2
$SG168533 DB	'</tr>', 0aH, 00H
	ORG $+1
$SG168494 DB	'</table>', 0aH, '<input type=submit name=refresh value="'
	DB	'Refresh">', 0aH, '<input type=submit name=alter_cr value="Alt'
	DB	'er">', 0aH, '<input type=hidden name=cpu value=%d>', 0aH, '<i'
	DB	'nput type=hidden name=select_cr value=S>', 0aH, '<input type='
	DB	'hidden name=select_gr value=%c>', 0aH, '<input type=hidden na'
	DB	'me=select_ar value=%c>', 0aH, '</form>', 0aH, 00H
	ORG $+4
$SG168498 DB	'<form method=post>', 0aH, '<input type=submit name=selec'
	DB	't_ar value="Select Access Registers">', 0aH, '<input type=hid'
	DB	'den name=cpu value=%d>', 0aH, '<input type=hidden name=select'
	DB	'_gr value=%c>', 0aH, '<input type=hidden name=select_cr value'
	DB	'=%c>', 0aH, '</form>', 0aH, 00H
	ORG $+3
$SG168499 DB	'<form method=post>', 0aH, '<input type=submit name=selec'
	DB	't_ar value="Hide Access Registers">', 0aH, '<input type=hidde'
	DB	'n name=cpu value=%d>', 0aH, '<input type=hidden name=select_g'
	DB	'r value=%c>', 0aH, '<input type=hidden name=select_cr value=%'
	DB	'c>', 0aH, '</form>', 0aH, 00H
	ORG $+5
$SG168500 DB	'<form method=post>', 0aH, '<table>', 0aH, 00H
	ORG $+4
$SG168505 DB	'%s<td>AR%d</td><td><input type=text name=alter_ar%d size'
	DB	'=8 value=%8.8X></td>', 0aH, '%s', 00H
$SG168506 DB	'</table>', 0aH, '<input type=submit name=refresh value="'
	DB	'Refresh">', 0aH, '<input type=submit name=alter_ar value="Alt'
	DB	'er">', 0aH, '<input type=hidden name=cpu value=%d>', 0aH, '<i'
	DB	'nput type=hidden name=select_gr value=%c>', 0aH, '<input type'
	DB	'=hidden name=select_cr value=%c>', 0aH, '<input type=hidden n'
	DB	'ame=select_ar value=S>', 0aH, '</form>', 0aH, 00H
	ORG $+4
$SG168523 DB	'alter_a0', 00H
	ORG $+7
$SG168525 DB	'<form method=post>', 0aH, '<table>', 0aH, 00H
	ORG $+4
$SG168530 DB	'<tr>', 0aH, '<td><input type=text name=alter_a0 size=8 v'
	DB	'alue=%8.8X><input type=hidden name=alter_a1 value=%8.8X></td>'
	DB	0aH, '<td><input type=submit name=refresh value="Refresh"></td'
	DB	'>', 0aH, 00H
	ORG $+7
$SG168531 DB	'<tr>', 0aH, '<td align=center>%8.8X</td>', 0aH, '<td></t'
	DB	'd>', 0aH, 00H
	ORG $+4
$SG168534 DB	'</table>', 0aH, '</form>', 0aH, 00H
	ORG $+6
$SG168554 DB	'<h1>Perform Initial Program Load</h1>', 0aH, 00H
	ORG $+1
$SG168557 DB	'doipl', 00H
	ORG $+2
$SG168560 DB	'device', 00H
	ORG $+1
$SG168567 DB	'loadparm', 00H
	ORG $+7
$SG168571 DB	'<form method=post>', 0aH, '<select type=submit name=cpu>'
	DB	0aH, 00H
	ORG $+6
$SG168573 DB	' selected', 00H
	ORG $+6
$SG168575 DB	'<option value=%4.4X%s>CPU%4.4X</option>', 0aH, 00H
	ORG $+7
$SG168576 DB	'</select>', 0aH, '<select type=submit name=device>', 0aH
	DB	00H
	ORG $+4
$SG168578 DB	' selected', 00H
	ORG $+6
$SG168580 DB	'<option value=%4.4X%s>DEV%4.4X</option>', 0aH, 00H
	ORG $+7
$SG168581 DB	'</select>', 0aH, 00H
	ORG $+5
$SG168582 DB	'Loadparm:<input type=text name=loadparm size=8 value="%s'
	DB	'">', 0aH, 00H
	ORG $+4
$SG168583 DB	'<input type=submit name=doipl value="IPL">', 0aH, '</for'
	DB	'm>', 0aH, 00H
	ORG $+4
$SG168584 DB	'cgibin.c:794', 00H
	ORG $+3
$SG168587 DB	'<h3>IPL failed, see the <a href="syslog#bottom">system l'
	DB	'og</a> for details</h3>', 0aH, 00H
	ORG $+7
$SG168588 DB	'<h3>IPL completed</h3>', 0aH, 00H
$SG168589 DB	'cgibin.c:806', 00H
	ORG $+3
$SG168600 DB	'<h2>Attached Device List</h2>', 0aH, '<table>', 0aH, '<t'
	DB	'r><th>Number</th><th>Subchannel</th><th>Class</th><th>Type</t'
	DB	'h><th>Status</th></tr>', 0aH, 00H
	ORG $+3
$SG168602 DB	'pending ', 00H
	ORG $+3
$SG168604 DB	'busy ', 00H
	ORG $+2
$SG168606 DB	'open ', 00H
	ORG $+6
$SG168608 DB	'<tr><td>%4.4X</td><td><a href="detail?subchan=%4.4X">%4.'
	DB	'4X</a></td><td>%s</td><td>%4.4X</td><td>%s%s%s</td></tr>', 0aH
	DB	00H
	ORG $+6
$SG168609 DB	'</table>', 0aH, 00H
	ORG $+6
$SG168626 DB	'subchan', 00H
$SG168629 DB	'<h3>Subchannel Details</h3>', 0aH, 00H
	ORG $+3
$SG168630 DB	'<form method=post>', 0aH, '<select type=submit name=subc'
	DB	'han>', 0aH, 00H
	ORG $+2
$SG168631 DB	' selected', 00H
	ORG $+6
$SG168633 DB	'<option value=%4.4X%s>Subchannel %4.4X', 00H
	ORG $+1
$SG168636 DB	' Device %4.4X</option>', 0aH, 00H
$SG168637 DB	'</option>', 0aH, 00H
	ORG $+5
$SG168641 DB	'<tr><th colspan=32>Interruption Parameter</th></tr>', 0aH
	DB	00H
	ORG $+3
$SG168638 DB	'</select>', 0aH, '<input type=submit value="Select / Ref'
	DB	'resh">', 0aH, '</form>', 0aH, 00H
$SG168640 DB	'<table border>', 0aH, '<caption align=left><h3>Path Mana'
	DB	'gement Control Word</h3></caption>', 0aH, 00H
	ORG $+4
$SG168642 DB	'<tr><td colspan=32>%2.2X%2.2X%2.2X%2.2X</td></tr>', 0aH, 00H
	ORG $+5
$SG168643 DB	'<tr><th>Q</th><th>0</th><th colspan=3>ISC</th><th colspa'
	DB	'n=2>00</th><th>A</th><th>E</th><th colspan=2>LM</th><th colsp'
	DB	'an=2>MM</th><th>D</th><th>T</th><th>V</th><th colspan=16>DEVN'
	DB	'UM</th></tr>', 0aH, 00H
$SG168644 DB	'<tr><td>%d</td><td></td><td colspan=3>%d</td><td colspan'
	DB	'=2></td><td>%d</td><td>%d</td><td colspan=2>%d%d</td><td cols'
	DB	'pan=2>%d%d</td><td>%d</td><td>%d</td><td>%d</td><td colspan=1'
	DB	'6>%2.2X%2.2X</td></tr>', 0aH, 00H
	ORG $+6
$SG168645 DB	'<tr><th colspan=8>LPM</th><th colspan=8>PNOM</th><th col'
	DB	'span=8>LPUM</th><th colspan=8>PIM</th></tr>', 0aH, 00H
	ORG $+3
$SG168671 DB	'<h2>Miscellaneous Registers<h2>', 0aH, 00H
	ORG $+7
$SG168646 DB	'<tr><td colspan=8>%2.2X</td><td colspan=8>%2.2X</td><td '
	DB	'colspan=8>%2.2X</td><td colspan=8>%2.2X</td></tr>', 0aH, 00H
	ORG $+5
$SG168647 DB	'<tr><th colspan=16>MBI</th><th colspan=8>POM</th><th col'
	DB	'span=8>PAM</th></tr>', 0aH, 00H
	ORG $+2
$SG168648 DB	'<tr><td colspan=16>%2.2X%2.2X</td><td colspan=8>%2.2X</t'
	DB	'd><td colspan=8>%2.2X</td></tr>', 0aH, 00H
	ORG $+7
$SG168649 DB	'<tr><th colspan=8>CHPID=0</th><th colspan=8>CHPID=1</th>'
	DB	'<th colspan=8>CHPID=2</th><th colspan=8>CHPID=3</th></tr>', 0aH
	DB	00H
	ORG $+5
$SG168677 DB	'<tr><th>Measurement Block</th><th>Key</th></tr>', 0aH, 00H
	ORG $+7
$SG168650 DB	'<tr><td colspan=8>%2.2X</td><td colspan=8>%2.2X</td><td '
	DB	'colspan=8>%2.2X</td><td colspan=8>%2.2X</td></tr>', 0aH, 00H
	ORG $+5
$SG168651 DB	'<tr><th colspan=8>CHPID=4</th><th colspan=8>CHPID=5</th>'
	DB	'<th colspan=8>CHPID=6</th><th colspan=8>CHPID=7</th></tr>', 0aH
	DB	00H
	ORG $+5
$SG168678 DB	'<tr><td>%8.8X</td><td>%2.2X</td></tr>', 0aH, 00H
	ORG $+1
$SG168652 DB	'<tr><td colspan=8>%2.2X</td><td colspan=8>%2.2X</td><td '
	DB	'colspan=8>%2.2X</td><td colspan=8>%2.2X</td></tr>', 0aH, 00H
	ORG $+5
$SG168653 DB	'<tr><th colspan=8>ZONE</th><th colspan=5>00000</th><th c'
	DB	'olspan=3>VISC</th><th colspan=8>00000000</th><th>I</th><th co'
	DB	'lspan=6>000000</th><th>S</th></tr>', 0aH, 00H
	ORG $+7
$SG168654 DB	'<tr><td colspan=8>%2.2X</td><td colspan=5></td><td colsp'
	DB	'an=3>%d</td><td colspan=8></td><td>%d</td><td colspan=6></td>'
	DB	'<td>%d</td></tr>', 0aH, 00H
	ORG $+1
$SG168655 DB	'</table>', 0aH, 00H
	ORG $+6
$SG168708 DB	'<h1>Configure CPU</h1>', 0aH, 00H
$SG168672 DB	'<table border>', 0aH, '<caption align=left><h3>Zone rela'
	DB	'ted Registers</h3></caption>', 0aH, 00H
	ORG $+2
$SG168673 DB	'<tr><th>Zone</th><th>CS Origin</th><th>CS Limit</th><th>'
	DB	'ES Origin</th><th>ES Limit</th><th>Measurement Block</th><th>'
	DB	'Key</th></tr>', 0aH, 00H
$SG168709 DB	'cpu%d', 00H
	ORG $+6
$SG168674 DB	'<tr><td>%2.2X</td><td>%8.8X</td><td>%8.8X</td><td>%8.8X<'
	DB	'/td><td>%8.8X</td><td>%8.8X</td><td>%2.2X</td></tr>', 0aH, 00H
	ORG $+3
$SG168675 DB	'</table>', 0aH, 00H
	ORG $+6
$SG168676 DB	'<table border>', 0aH, '<caption align=left><h3>Alternate'
	DB	' Measurement</h3></caption>', 0aH, 00H
	ORG $+3
$SG168679 DB	'</table>', 0aH, 00H
	ORG $+6
$SG168680 DB	'<table border>', 0aH, '<caption align=left><h3>Address L'
	DB	'imit Register</h3></caption>', 0aH, 00H
	ORG $+2
$SG168681 DB	'<tr><td>%8.8X</td></tr>', 0aH, 00H
	ORG $+7
$SG168682 DB	'</table>', 0aH, 00H
	ORG $+6
$SG168712 DB	'cgibin.c:1130', 00H
	ORG $+2
$SG168717 DB	'cgibin.c:1145', 00H
	ORG $+2
$SG168718 DB	'<p>CPU%4.4X', 0aH, '<form method=post>', 0aH, '<select t'
	DB	'ype=submit name=cpu%d>', 0aH, 00H
$SG168721 DB	' selected', 00H
	ORG $+6
$SG168723 DB	'<option value=%d%s>%sline</option>', 0aH, 00H
	ORG $+4
$SG168724 DB	'</select>', 0aH, '<input type=submit value=Update>', 0aH
	DB	'</form>', 0aH, 00H
	ORG $+4
$SG168730 DB	'<h1>Hercules Version Information</h1>', 0aH, '<pre>', 0aH
	DB	00H
	ORG $+3
$SG168731 DB	'Hercules HTTP Server', 00H
	ORG $+3
$SG168732 DB	'</pre>', 0aH, 00H
$SG168737 DB	'Expires: 0', 0aH, 00H
	ORG $+4
$SG168738 DB	'Content-type: text/xml;', 0aH, 0aH, 00H
	ORG $+6
$SG168739 DB	'<?xml version="1.0" encoding="UTF-8"?>', 0aH, 00H
$SG168740 DB	'<hercules>', 0aH, 00H
	ORG $+4
$SG168741 DB	09H, '<arch>%d</arch>', 0aH, 00H
	ORG $+6
$SG168742 DB	09H, '<mips>%.1d.%.2d</mips>', 0aH, 00H
	ORG $+7
$SG168743 DB	09H, '<siosrate>%d</siosrate>', 0aH, 00H
	ORG $+6
$SG168744 DB	'</hercules>', 0aH, 00H
	ORG $+3
$SG168769 DB	'&lt;', 00H
	ORG $+3
$SG168771 DB	'&gt;', 00H
	ORG $+3
$SG168773 DB	'&amp;', 00H
	ORG $+2
$SG168791 DB	'<PRE>', 0aH, 00H
	ORG $+1
$SG168792 DB	'</PRE>', 0aH, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cgibin_hwrite
	DD	020H
	DD	0199H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cgibin_configure_cpu
	DD	016H
	DD	02a8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cgibin_debug_registers
	DD	016H
	DD	0e61H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cgibin_psw
	DD	022H
	DD	057bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cgibin_blinkenlights_cpu
	DD	022H
	DD	044eH
voltbl	ENDS
xdata	SEGMENT
$unwind$Interrupt_Lock_Obtained DD 010e01H
	DD	0420eH
$unwind$Obtain_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$Release_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$cgibin_blinkenlights_cpu DD 0a2a19H
	DD	01b0118H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	030065007H
	DD	imagerel __GSHandlerCheck
	DD	0c8H
$unwind$cgibin_reg_control DD 010901H
	DD	0a209H
$unwind$cgibin_reg_general DD 010901H
	DD	0a209H
$unwind$cgibin_psw DD 0a2a19H
	DD	01b0118H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	030065007H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$cgibin_syslog DD 020c01H
	DD	013010cH
$unwind$cgibin_debug_registers DD 021e19H
	DD	02b010cH
	DD	imagerel __GSHandlerCheck
	DD	0148H
$unwind$cgibin_debug_storage DD 010901H
	DD	08209H
$unwind$cgibin_ipl DD 010901H
	DD	0c209H
$unwind$cgibin_debug_device_list DD 020c01H
	DD	011010cH
$unwind$cgibin_debug_device_detail DD 081401H
	DD	0170114H
	DD	0e00bf00dH
	DD	060087009H
	DD	030065007H
$unwind$cgibin_debug_misc DD 010901H
	DD	0c209H
$unwind$cgibin_configure_cpu DD 021b19H
	DD	011010cH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$cgibin_debug_version_info DD 010901H
	DD	04209H
$unwind$cgibin_xml_rates_info DD 010901H
	DD	06209H
$unwind$cgibin_hwrite DD 022819H
	DD	08b0116H
	DD	imagerel __GSHandlerCheck
	DD	0440H
$unwind$cgibin_cmd_cmd DD 010e01H
	DD	0620eH
$unwind$cgibin_cmd DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
command$ = 32
webblk$ = 64
cgibin_cmd PROC

; 1309 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1310 : char   *command;
; 1311 : 
; 1312 :     if ((command = cgi_variable(webblk,"cmd")))

  00009	41 b8 03 00 00
	00		 mov	 r8d, 3
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168800
  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR webblk$[rsp]
  0001b	e8 00 00 00 00	 call	 http_variable
  00020	48 89 44 24 20	 mov	 QWORD PTR command$[rsp], rax
  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR command$[rsp], 0
  0002b	74 0f		 je	 SHORT $LN2@cgibin_cmd

; 1313 :     {
; 1314 :         /* "cmd" issues a single command */
; 1315 :         cgibin_cmd_cmd (webblk, command);

  0002d	48 8b 54 24 20	 mov	 rdx, QWORD PTR command$[rsp]
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR webblk$[rsp]
  00037	e8 00 00 00 00	 call	 cgibin_cmd_cmd
$LN2@cgibin_cmd:

; 1316 :         return;
; 1317 :     }
; 1318 : }

  0003c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00040	c3		 ret	 0
cgibin_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
response$ = 32
webblk$ = 64
command$ = 72
cgibin_cmd_cmd PROC

; 1271 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@cgibin_cmd:

; 1272 :     char * response;
; 1273 : 
; 1274 :     while (isspace(*command))

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR command$[rsp]
  00013	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00016	8b c8		 mov	 ecx, eax
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN3@cgibin_cmd

; 1275 :         command++;

  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR command$[rsp]
  00027	48 ff c0	 inc	 rax
  0002a	48 89 44 24 48	 mov	 QWORD PTR command$[rsp], rax
  0002f	eb dd		 jmp	 SHORT $LN2@cgibin_cmd
$LN3@cgibin_cmd:

; 1276 : 
; 1277 :     if (*command == 0)

  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR command$[rsp]
  00036	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00039	85 c0		 test	 eax, eax
  0003b	75 05		 jne	 SHORT $LN4@cgibin_cmd

; 1278 :     {
; 1279 :         return;             /* command is all blank, ignore */

  0003d	e9 92 00 00 00	 jmp	 $LN1@cgibin_cmd
$LN4@cgibin_cmd:

; 1280 :     }
; 1281 : 
; 1282 :     panel_command_capture( command, &response, false );

  00042	45 33 c0	 xor	 r8d, r8d
  00045	48 8d 54 24 20	 lea	 rdx, QWORD PTR response$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR command$[rsp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_panel_command_capture

; 1283 : 
; 1284 :     if (response == NULL)

  00055	48 83 7c 24 20
	00		 cmp	 QWORD PTR response$[rsp], 0
  0005b	75 02		 jne	 SHORT $LN5@cgibin_cmd

; 1285 :     {
; 1286 :         return;             /* command failed to execute */

  0005d	eb 75		 jmp	 SHORT $LN1@cgibin_cmd
$LN5@cgibin_cmd:

; 1287 :     }
; 1288 : 
; 1289 :     html_header(webblk);

  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR webblk$[rsp]
  00064	e8 00 00 00 00	 call	 html_header

; 1290 :     hprintf(webblk->sock, "<PRE>\n");

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168791
  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  00075	8b 08		 mov	 ecx, DWORD PTR [rax]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1291 : 
; 1292 :     cgibin_hwrite(webblk, response, (int)strlen (response));

  0007d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR response$[rsp]
  00082	e8 00 00 00 00	 call	 strlen
  00087	44 8b c0	 mov	 r8d, eax
  0008a	48 8b 54 24 20	 mov	 rdx, QWORD PTR response$[rsp]
  0008f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR webblk$[rsp]
  00094	e8 00 00 00 00	 call	 cgibin_hwrite

; 1293 : 
; 1294 :     hprintf(webblk->sock, "</PRE>\n");

  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168792
  000a0	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  000a5	8b 08		 mov	 ecx, DWORD PTR [rax]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1295 :     html_footer(webblk);

  000ad	48 8b 4c 24 40	 mov	 rcx, QWORD PTR webblk$[rsp]
  000b2	e8 00 00 00 00	 call	 html_footer

; 1296 : 
; 1297 :     // Ensure command and response is visible on Hercules console panel
; 1298 : 
; 1299 :     logmsg( "%s", response );

  000b7	48 8b 54 24 20	 mov	 rdx, QWORD PTR response$[rsp]
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168793
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 1300 : 
; 1301 :     free (response);

  000c9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR response$[rsp]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@cgibin_cmd:

; 1302 : }

  000d4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d8	c3		 ret	 0
cgibin_cmd_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
buf_used$ = 32
new_len$ = 36
i$ = 40
tv72 = 44
new_str$ = 48
buffer$ = 64
__$ArrayPad$ = 1088
webblk$ = 1120
msg$ = 1128
msg_len$ = 1136
cgibin_hwrite PROC

; 1202 : {

$LN18:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 58 04
	00 00		 sub	 rsp, 1112		; 00000458H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 40
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1203 :     char buffer[1024];
; 1204 :     char *new_str;
; 1205 : 
; 1206 :     unsigned buf_used = 0;

  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR buf_used$[rsp], 0

; 1207 :     unsigned new_len;
; 1208 :     int i;
; 1209 : 
; 1210 : 
; 1211 :     if ((msg == NULL) || (msg_len < 1))

  00030	48 83 bc 24 68
	04 00 00 00	 cmp	 QWORD PTR msg$[rsp], 0
  00039	74 0a		 je	 SHORT $LN10@cgibin_hwr
  0003b	83 bc 24 70 04
	00 00 01	 cmp	 DWORD PTR msg_len$[rsp], 1
  00043	7d 05		 jge	 SHORT $LN9@cgibin_hwr
$LN10@cgibin_hwr:

; 1212 :         return;

  00045	e9 4f 01 00 00	 jmp	 $LN1@cgibin_hwr
$LN9@cgibin_hwr:

; 1213 : 
; 1214 :     // Output message, accounting for http special characters.
; 1215 : 
; 1216 :     // Method: rather than doing an hwrite for every character,
; 1217 :     // buffer the message, expanding special characters.
; 1218 :     // Output the buffer when full, then reuse it.
; 1219 : 
; 1220 :     // Note that sizeof(X) where X is a #define string literal is 1 greater
; 1221 :     // than strlen(X).
; 1222 : 
; 1223 :     for (i = 0; i < msg_len; i++)

  0004a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00052	eb 0a		 jmp	 SHORT $LN4@cgibin_hwr
$LN2@cgibin_hwr:
  00054	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00058	ff c0		 inc	 eax
  0005a	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN4@cgibin_hwr:
  0005e	8b 84 24 70 04
	00 00		 mov	 eax, DWORD PTR msg_len$[rsp]
  00065	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  00069	0f 8d 07 01 00
	00		 jge	 $LN3@cgibin_hwr

; 1224 :     {
; 1225 :         switch (msg[i])

  0006f	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  00074	48 8b 8c 24 68
	04 00 00	 mov	 rcx, QWORD PTR msg$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	88 44 24 2c	 mov	 BYTE PTR tv72[rsp], al
  00084	80 7c 24 2c 26	 cmp	 BYTE PTR tv72[rsp], 38	; 00000026H
  00089	74 3c		 je	 SHORT $LN13@cgibin_hwr
  0008b	80 7c 24 2c 3c	 cmp	 BYTE PTR tv72[rsp], 60	; 0000003cH
  00090	74 09		 je	 SHORT $LN11@cgibin_hwr
  00092	80 7c 24 2c 3e	 cmp	 BYTE PTR tv72[rsp], 62	; 0000003eH
  00097	74 18		 je	 SHORT $LN12@cgibin_hwr
  00099	eb 42		 jmp	 SHORT $LN14@cgibin_hwr
$LN11@cgibin_hwr:

; 1226 :         {
; 1227 :         case '<':
; 1228 :             new_len = sizeof(AMP_LT) - 1;

  0009b	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR new_len$[rsp], 4

; 1229 :             new_str = AMP_LT;

  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168769
  000aa	48 89 44 24 30	 mov	 QWORD PTR new_str$[rsp], rax

; 1230 :             break;

  000af	eb 4c		 jmp	 SHORT $LN5@cgibin_hwr
$LN12@cgibin_hwr:

; 1231 :         case '>':
; 1232 :             new_len = sizeof(AMP_GT) - 1;

  000b1	c7 44 24 24 04
	00 00 00	 mov	 DWORD PTR new_len$[rsp], 4

; 1233 :             new_str = AMP_GT;

  000b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168771
  000c0	48 89 44 24 30	 mov	 QWORD PTR new_str$[rsp], rax

; 1234 :             break;

  000c5	eb 36		 jmp	 SHORT $LN5@cgibin_hwr
$LN13@cgibin_hwr:

; 1235 :         case '&':
; 1236 :             new_len = sizeof(AMP_AMP) - 1;

  000c7	c7 44 24 24 05
	00 00 00	 mov	 DWORD PTR new_len$[rsp], 5

; 1237 :             new_str = AMP_AMP;

  000cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168773
  000d6	48 89 44 24 30	 mov	 QWORD PTR new_str$[rsp], rax

; 1238 :             break;

  000db	eb 20		 jmp	 SHORT $LN5@cgibin_hwr
$LN14@cgibin_hwr:

; 1239 :         default:
; 1240 :             new_len = 1;

  000dd	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR new_len$[rsp], 1

; 1241 :             new_str = &(msg[i]);

  000e5	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  000ea	48 8b 8c 24 68
	04 00 00	 mov	 rcx, QWORD PTR msg$[rsp]
  000f2	48 03 c8	 add	 rcx, rax
  000f5	48 8b c1	 mov	 rax, rcx
  000f8	48 89 44 24 30	 mov	 QWORD PTR new_str$[rsp], rax
$LN5@cgibin_hwr:

; 1242 :             break;
; 1243 :         }
; 1244 : 
; 1245 :         if ((buf_used + new_len) > sizeof(buffer))

  000fd	8b 44 24 24	 mov	 eax, DWORD PTR new_len$[rsp]
  00101	8b 4c 24 20	 mov	 ecx, DWORD PTR buf_used$[rsp]
  00105	03 c8		 add	 ecx, eax
  00107	8b c1		 mov	 eax, ecx
  00109	8b c0		 mov	 eax, eax
  0010b	48 3d 00 04 00
	00		 cmp	 rax, 1024		; 00000400H
  00111	76 24		 jbe	 SHORT $LN15@cgibin_hwr

; 1246 :         {
; 1247 :             // new piece won't fit, write forced
; 1248 :             hwrite(webblk->sock, buffer,  buf_used);

  00113	8b 44 24 20	 mov	 eax, DWORD PTR buf_used$[rsp]
  00117	44 8b c0	 mov	 r8d, eax
  0011a	48 8d 54 24 40	 lea	 rdx, QWORD PTR buffer$[rsp]
  0011f	48 8b 84 24 60
	04 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00127	8b 08		 mov	 ecx, DWORD PTR [rax]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite

; 1249 :             buf_used = 0;

  0012f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR buf_used$[rsp], 0
$LN15@cgibin_hwr:
$LN7@cgibin_hwr:

; 1250 :         }
; 1251 : 
; 1252 :         while (new_len > 0)

  00137	83 7c 24 24 00	 cmp	 DWORD PTR new_len$[rsp], 0
  0013c	76 33		 jbe	 SHORT $LN8@cgibin_hwr

; 1253 :         {
; 1254 :             buffer[buf_used++] = *new_str++;

  0013e	8b 44 24 20	 mov	 eax, DWORD PTR buf_used$[rsp]
  00142	48 8b 4c 24 30	 mov	 rcx, QWORD PTR new_str$[rsp]
  00147	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0014a	88 4c 04 40	 mov	 BYTE PTR buffer$[rsp+rax], cl
  0014e	8b 44 24 20	 mov	 eax, DWORD PTR buf_used$[rsp]
  00152	ff c0		 inc	 eax
  00154	89 44 24 20	 mov	 DWORD PTR buf_used$[rsp], eax
  00158	48 8b 44 24 30	 mov	 rax, QWORD PTR new_str$[rsp]
  0015d	48 ff c0	 inc	 rax
  00160	48 89 44 24 30	 mov	 QWORD PTR new_str$[rsp], rax

; 1255 :             new_len--;

  00165	8b 44 24 24	 mov	 eax, DWORD PTR new_len$[rsp]
  00169	ff c8		 dec	 eax
  0016b	89 44 24 24	 mov	 DWORD PTR new_len$[rsp], eax

; 1256 :         }

  0016f	eb c6		 jmp	 SHORT $LN7@cgibin_hwr
$LN8@cgibin_hwr:

; 1257 :     }

  00171	e9 de fe ff ff	 jmp	 $LN2@cgibin_hwr
$LN3@cgibin_hwr:

; 1258 : 
; 1259 :     if (buf_used > 0)

  00176	83 7c 24 20 00	 cmp	 DWORD PTR buf_used$[rsp], 0
  0017b	76 1c		 jbe	 SHORT $LN16@cgibin_hwr

; 1260 :     {
; 1261 :         // write out final/partial buffer
; 1262 :         hwrite(webblk->sock, buffer,  buf_used);

  0017d	8b 44 24 20	 mov	 eax, DWORD PTR buf_used$[rsp]
  00181	44 8b c0	 mov	 r8d, eax
  00184	48 8d 54 24 40	 lea	 rdx, QWORD PTR buffer$[rsp]
  00189	48 8b 84 24 60
	04 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00191	8b 08		 mov	 ecx, DWORD PTR [rax]
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite
$LN16@cgibin_hwr:
$LN1@cgibin_hwr:

; 1263 :     }
; 1264 : }

  00199	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a1	48 33 cc	 xor	 rcx, rsp
  001a4	e8 00 00 00 00	 call	 __security_check_cookie
  001a9	48 81 c4 58 04
	00 00		 add	 rsp, 1112		; 00000458H
  001b0	c3		 ret	 0
cgibin_hwrite ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
tv84 = 32
webblk$ = 64
cgibin_xml_rates_info PROC

; 1185 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1186 :     hprintf(webblk->sock,"Expires: 0\n");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168737
  00010	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  00015	8b 08		 mov	 ecx, DWORD PTR [rax]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1187 :     hprintf(webblk->sock,"Content-type: text/xml;\n\n");   /* XML document */

  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168738
  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  00029	8b 08		 mov	 ecx, DWORD PTR [rax]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1188 : 
; 1189 :     hprintf(webblk->sock,"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");

  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168739
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1190 :     hprintf(webblk->sock,"<hercules>\n");

  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168740
  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  00051	8b 08		 mov	 ecx, DWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1191 :     hprintf(webblk->sock,"\t<arch>%d</arch>\n", sysblk.arch_mode);

  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00060	44 8b 80 88 00
	00 00		 mov	 r8d, DWORD PTR [rax+136]
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168741
  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  00073	8b 08		 mov	 ecx, DWORD PTR [rax]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1192 :     hprintf(webblk->sock,"\t<mips>%.1d.%.2d</mips>\n",

  0007b	33 d2		 xor	 edx, edx
  0007d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00084	8b 80 88 14 00
	00		 mov	 eax, DWORD PTR [rax+5256]
  0008a	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0008f	f7 f1		 div	 ecx
  00091	8b c2		 mov	 eax, edx
  00093	33 d2		 xor	 edx, edx
  00095	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0009a	f7 f1		 div	 ecx
  0009c	89 44 24 20	 mov	 DWORD PTR tv84[rsp], eax
  000a0	33 d2		 xor	 edx, edx
  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a9	8b 81 88 14 00
	00		 mov	 eax, DWORD PTR [rcx+5256]
  000af	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000b4	f7 f1		 div	 ecx
  000b6	8b 4c 24 20	 mov	 ecx, DWORD PTR tv84[rsp]
  000ba	44 8b c9	 mov	 r9d, ecx
  000bd	44 8b c0	 mov	 r8d, eax
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168742
  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  000cc	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1193 :         sysblk.mipsrate / 1000000, (sysblk.mipsrate % 1000000) / 10000);
; 1194 :     hprintf(webblk->sock,"\t<siosrate>%d</siosrate>\n", sysblk.siosrate);

  000d4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000db	44 8b 80 8c 14
	00 00		 mov	 r8d, DWORD PTR [rax+5260]
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168743
  000e9	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  000ee	8b 08		 mov	 ecx, DWORD PTR [rax]
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1195 :     hprintf(webblk->sock,"</hercules>\n");

  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168744
  000fd	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  00102	8b 08		 mov	 ecx, DWORD PTR [rax]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1196 : }

  0010a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010e	c3		 ret	 0
cgibin_xml_rates_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
webblk$ = 48
cgibin_debug_version_info PROC

; 1171 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1172 :     html_header( webblk );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR webblk$[rsp]
  0000e	e8 00 00 00 00	 call	 html_header

; 1173 :     hprintf( webblk->sock, "<h1>Hercules Version Information</h1>\n<pre>\n" );

  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168730
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1174 :     display_version( NULL, webblk->sock, "Hercules HTTP Server" );

  00027	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168731
  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  00033	8b 10		 mov	 edx, DWORD PTR [rax]
  00035	33 c9		 xor	 ecx, ecx
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_display_version

; 1175 :     hprintf( webblk->sock, "</pre>\n" );

  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168732
  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  00049	8b 08		 mov	 ecx, DWORD PTR [rax]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1176 :     html_footer( webblk );

  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR webblk$[rsp]
  00056	e8 00 00 00 00	 call	 html_footer

; 1177 : }

  0005b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005f	c3		 ret	 0
cgibin_debug_version_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
i$ = 48
j$ = 52
cpuonline$1 = 56
tv85 = 60
tv154 = 64
tv156 = 68
tv157 = 72
cpustate$2 = 80
tv146 = 88
tv159 = 96
cpuname$3 = 104
__$ArrayPad$ = 112
webblk$ = 144
cgibin_configure_cpu PROC

; 1114 : {

$LN29:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1115 : int i,j;
; 1116 : 
; 1117 :     html_header(webblk);

  0001b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00023	e8 00 00 00 00	 call	 html_header

; 1118 : 
; 1119 :     hprintf(webblk->sock,"<h1>Configure CPU</h1>\n");

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168708
  0002f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00037	8b 08		 mov	 ecx, DWORD PTR [rax]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1120 : 
; 1121 :     for(i = 0; i < sysblk.maxcpu; i++)

  0003f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00047	eb 0a		 jmp	 SHORT $LN4@cgibin_con
$LN2@cgibin_con:
  00049	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0004d	ff c0		 inc	 eax
  0004f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@cgibin_con:
  00053	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0005a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00060	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00064	0f 8d da 00 00
	00		 jge	 $LN3@cgibin_con

; 1122 :     {
; 1123 :     char cpuname[8], *cpustate;
; 1124 :     int  cpuonline = -1;

  0006a	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR cpuonline$1[rsp], -1

; 1125 : 
; 1126 :         MSGBUF(cpuname,"cpu%d",i);

  00072	44 8b 4c 24 30	 mov	 r9d, DWORD PTR i$[rsp]
  00077	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168709
  0007e	ba 08 00 00 00	 mov	 edx, 8
  00083	48 8d 4c 24 68	 lea	 rcx, QWORD PTR cpuname$3[rsp]
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1127 :         if((cpustate = cgi_variable(webblk,cpuname)))

  0008e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00094	48 8d 54 24 68	 lea	 rdx, QWORD PTR cpuname$3[rsp]
  00099	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000a1	e8 00 00 00 00	 call	 http_variable
  000a6	48 89 44 24 50	 mov	 QWORD PTR cpustate$2[rsp], rax
  000ab	48 83 7c 24 50
	00		 cmp	 QWORD PTR cpustate$2[rsp], 0
  000b1	74 16		 je	 SHORT $LN13@cgibin_con

; 1128 :             sscanf(cpustate,"%d",&cpuonline);

  000b3	4c 8d 44 24 38	 lea	 r8, QWORD PTR cpuonline$1[rsp]
  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168711
  000bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cpustate$2[rsp]
  000c4	e8 00 00 00 00	 call	 sscanf
$LN13@cgibin_con:

; 1129 : 
; 1130 :         OBTAIN_INTLOCK(NULL);

  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168712
  000d0	33 c9		 xor	 ecx, ecx
  000d2	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 1131 : 
; 1132 :         switch(cpuonline) {

  000d7	8b 44 24 38	 mov	 eax, DWORD PTR cpuonline$1[rsp]
  000db	89 44 24 3c	 mov	 DWORD PTR tv85[rsp], eax
  000df	83 7c 24 3c 00	 cmp	 DWORD PTR tv85[rsp], 0
  000e4	74 09		 je	 SHORT $LN14@cgibin_con
  000e6	83 7c 24 3c 01	 cmp	 DWORD PTR tv85[rsp], 1
  000eb	74 24		 je	 SHORT $LN16@cgibin_con
  000ed	eb 42		 jmp	 SHORT $LN5@cgibin_con
$LN14@cgibin_con:

; 1133 : 
; 1134 :         case 0:
; 1135 :             if(IS_CPU_ONLINE(i))

  000ef	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000fb	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00104	74 09		 je	 SHORT $LN15@cgibin_con

; 1136 :                 deconfigure_cpu(i);

  00106	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  0010a	e8 00 00 00 00	 call	 deconfigure_cpu
$LN15@cgibin_con:

; 1137 :             break;

  0010f	eb 20		 jmp	 SHORT $LN5@cgibin_con
$LN16@cgibin_con:

; 1138 : 
; 1139 :         case 1:
; 1140 :             if(!IS_CPU_ONLINE(i))

  00111	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0011d	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00126	75 09		 jne	 SHORT $LN17@cgibin_con

; 1141 :                 configure_cpu(i);

  00128	8b 4c 24 30	 mov	 ecx, DWORD PTR i$[rsp]
  0012c	e8 00 00 00 00	 call	 configure_cpu
$LN17@cgibin_con:
$LN5@cgibin_con:

; 1142 :             break;
; 1143 :         }
; 1144 : 
; 1145 :         RELEASE_INTLOCK(NULL);

  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168717
  00138	33 c9		 xor	 ecx, ecx
  0013a	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1146 :     }

  0013f	e9 05 ff ff ff	 jmp	 $LN2@cgibin_con
$LN3@cgibin_con:

; 1147 : 
; 1148 :     for(i = 0; i < sysblk.maxcpu; i++)

  00144	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0014c	eb 0a		 jmp	 SHORT $LN9@cgibin_con
$LN7@cgibin_con:
  0014e	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00152	ff c0		 inc	 eax
  00154	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN9@cgibin_con:
  00158	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0015f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00165	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00169	0f 8d 2c 01 00
	00		 jge	 $LN8@cgibin_con

; 1149 :     {
; 1150 :         hprintf(webblk->sock,"<p>CPU%4.4X\n"

  0016f	44 8b 4c 24 30	 mov	 r9d, DWORD PTR i$[rsp]
  00174	44 8b 44 24 30	 mov	 r8d, DWORD PTR i$[rsp]
  00179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168718
  00180	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00188	8b 08		 mov	 ecx, DWORD PTR [rax]
  0018a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1151 :                               "<form method=post>\n"
; 1152 :                               "<select type=submit name=cpu%d>\n",i,i);
; 1153 : 
; 1154 :         for(j = 0; j < 2; j++)

  00190	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00198	eb 0a		 jmp	 SHORT $LN12@cgibin_con
$LN10@cgibin_con:
  0019a	8b 44 24 34	 mov	 eax, DWORD PTR j$[rsp]
  0019e	ff c0		 inc	 eax
  001a0	89 44 24 34	 mov	 DWORD PTR j$[rsp], eax
$LN12@cgibin_con:
  001a4	83 7c 24 34 02	 cmp	 DWORD PTR j$[rsp], 2
  001a9	0f 8d d0 00 00
	00		 jge	 $LN11@cgibin_con

; 1155 :             hprintf(webblk->sock,"<option value=%d%s>%sline</option>\n",

  001af	83 7c 24 34 00	 cmp	 DWORD PTR j$[rsp], 0
  001b4	74 0e		 je	 SHORT $LN19@cgibin_con
  001b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168719
  001bd	48 89 44 24 58	 mov	 QWORD PTR tv146[rsp], rax
  001c2	eb 0c		 jmp	 SHORT $LN20@cgibin_con
$LN19@cgibin_con:
  001c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168720
  001cb	48 89 44 24 58	 mov	 QWORD PTR tv146[rsp], rax
$LN20@cgibin_con:
  001d0	83 7c 24 34 00	 cmp	 DWORD PTR j$[rsp], 0
  001d5	74 0a		 je	 SHORT $LN25@cgibin_con
  001d7	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  001df	eb 08		 jmp	 SHORT $LN26@cgibin_con
$LN25@cgibin_con:
  001e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN26@cgibin_con:
  001e9	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  001ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f5	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  001fe	74 0a		 je	 SHORT $LN21@cgibin_con
  00200	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  00208	eb 08		 jmp	 SHORT $LN22@cgibin_con
$LN21@cgibin_con:
  0020a	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN22@cgibin_con:
  00212	83 7c 24 40 00	 cmp	 DWORD PTR tv154[rsp], 0
  00217	74 0a		 je	 SHORT $LN23@cgibin_con
  00219	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00221	eb 08		 jmp	 SHORT $LN24@cgibin_con
$LN23@cgibin_con:
  00223	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN24@cgibin_con:
  0022b	8b 44 24 44	 mov	 eax, DWORD PTR tv156[rsp]
  0022f	39 44 24 48	 cmp	 DWORD PTR tv157[rsp], eax
  00233	75 0e		 jne	 SHORT $LN27@cgibin_con
  00235	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168721
  0023c	48 89 44 24 60	 mov	 QWORD PTR tv159[rsp], rax
  00241	eb 0c		 jmp	 SHORT $LN28@cgibin_con
$LN27@cgibin_con:
  00243	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168722
  0024a	48 89 44 24 60	 mov	 QWORD PTR tv159[rsp], rax
$LN28@cgibin_con:
  0024f	48 8b 44 24 58	 mov	 rax, QWORD PTR tv146[rsp]
  00254	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00259	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tv159[rsp]
  0025e	44 8b 44 24 34	 mov	 r8d, DWORD PTR j$[rsp]
  00263	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168723
  0026a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00272	8b 08		 mov	 ecx, DWORD PTR [rax]
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  0027a	e9 1b ff ff ff	 jmp	 $LN10@cgibin_con
$LN11@cgibin_con:

; 1156 :               j, ((j!=0) == (IS_CPU_ONLINE(i)!=0)) ? " selected" : "", (j) ? "On" : "Off");
; 1157 : 
; 1158 :         hprintf(webblk->sock,"</select>\n"

  0027f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168724
  00286	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0028e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00290	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1159 :                               "<input type=submit value=Update>\n"
; 1160 :                               "</form>\n");
; 1161 :     }

  00296	e9 b3 fe ff ff	 jmp	 $LN7@cgibin_con
$LN8@cgibin_con:

; 1162 : 
; 1163 :     html_footer(webblk);

  0029b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  002a3	e8 00 00 00 00	 call	 html_footer

; 1164 : 
; 1165 : }

  002a8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002ad	48 33 cc	 xor	 rcx, rsp
  002b0	e8 00 00 00 00	 call	 __security_check_cookie
  002b5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002bc	c3		 ret	 0
cgibin_configure_cpu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
zone$ = 80
webblk$ = 112
cgibin_debug_misc PROC

; 1033 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1034 : int zone;
; 1035 : 
; 1036 :     html_header(webblk);

  00009	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  0000e	e8 00 00 00 00	 call	 html_header

; 1037 : 
; 1038 :     hprintf(webblk->sock,"<h2>Miscellaneous Registers<h2>\n");

  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168671
  0001a	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1039 : 
; 1040 : 
; 1041 :     hprintf(webblk->sock,"<table border>\n"

  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168672
  0002e	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00033	8b 08		 mov	 ecx, DWORD PTR [rax]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1042 :                           "<caption align=left>"
; 1043 :                           "<h3>Zone related Registers</h3>"
; 1044 :                           "</caption>\n");
; 1045 : 
; 1046 :     hprintf(webblk->sock,"<tr><th>Zone</th>"

  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168673
  00042	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00047	8b 08		 mov	 ecx, DWORD PTR [rax]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1047 :                           "<th>CS Origin</th>"
; 1048 :                           "<th>CS Limit</th>"
; 1049 :                           "<th>ES Origin</th>"
; 1050 :                           "<th>ES Limit</th>"
; 1051 :                           "<th>Measurement Block</th>"
; 1052 :                           "<th>Key</th></tr>\n");
; 1053 : 
; 1054 :     for(zone = 0; zone < FEATURE_SIE_MAXZONES; zone++)

  0004f	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR zone$[rsp], 0
  00057	eb 0a		 jmp	 SHORT $LN4@cgibin_deb
$LN2@cgibin_deb:
  00059	8b 44 24 50	 mov	 eax, DWORD PTR zone$[rsp]
  0005d	ff c0		 inc	 eax
  0005f	89 44 24 50	 mov	 DWORD PTR zone$[rsp], eax
$LN4@cgibin_deb:
  00063	83 7c 24 50 08	 cmp	 DWORD PTR zone$[rsp], 8
  00068	0f 8d e2 00 00
	00		 jge	 $LN3@cgibin_deb

; 1055 :     {
; 1056 :         hprintf(webblk->sock,"<tr><td>%2.2X</td>"

  0006e	48 63 44 24 50	 movsxd	 rax, DWORD PTR zone$[rsp]
  00073	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  00077	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0007e	0f b6 84 01 c8
	0e 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3784]
  00086	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR zone$[rsp]
  0008b	48 6b c9 38	 imul	 rcx, rcx, 56		; 00000038H
  0008f	48 63 54 24 50	 movsxd	 rdx, DWORD PTR zone$[rsp]
  00094	48 6b d2 38	 imul	 rdx, rdx, 56		; 00000038H
  00098	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  0009f	41 8b 94 10 b8
	0e 00 00	 mov	 edx, DWORD PTR [r8+rdx+3768]
  000a7	c1 e2 14	 shl	 edx, 20
  000aa	81 ca ff ff 0f
	00		 or	 edx, 1048575		; 000fffffH
  000b0	4c 63 44 24 50	 movsxd	 r8, DWORD PTR zone$[rsp]
  000b5	4d 6b c0 38	 imul	 r8, r8, 56		; 00000038H
  000b9	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR __imp_sysblk
  000c0	47 8b 84 01 b0
	0e 00 00	 mov	 r8d, DWORD PTR [r9+r8+3760]
  000c8	41 c1 e0 14	 shl	 r8d, 20
  000cc	4c 63 4c 24 50	 movsxd	 r9, DWORD PTR zone$[rsp]
  000d1	4d 6b c9 38	 imul	 r9, r9, 56		; 00000038H
  000d5	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR __imp_sysblk
  000dc	47 8b 8c 0a a8
	0e 00 00	 mov	 r9d, DWORD PTR [r10+r9+3752]
  000e4	41 c1 e1 14	 shl	 r9d, 20
  000e8	41 81 c9 ff ff
	0f 00		 or	 r9d, 1048575		; 000fffffH
  000ef	4c 63 54 24 50	 movsxd	 r10, DWORD PTR zone$[rsp]
  000f4	4d 6b d2 38	 imul	 r10, r10, 56		; 00000038H
  000f8	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR __imp_sysblk
  000ff	47 8b 94 13 a0
	0e 00 00	 mov	 r10d, DWORD PTR [r11+r10+3744]
  00107	41 c1 e2 14	 shl	 r10d, 20
  0010b	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  0010f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00116	8b 84 08 c0 0e
	00 00		 mov	 eax, DWORD PTR [rax+rcx+3776]
  0011d	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00121	89 54 24 30	 mov	 DWORD PTR [rsp+48], edx
  00125	44 89 44 24 28	 mov	 DWORD PTR [rsp+40], r8d
  0012a	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  0012f	45 8b ca	 mov	 r9d, r10d
  00132	44 8b 44 24 50	 mov	 r8d, DWORD PTR zone$[rsp]
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168674
  0013e	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00143	8b 08		 mov	 ecx, DWORD PTR [rax]
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1057 :                               "<td>%8.8X</td>"
; 1058 :                               "<td>%8.8X</td>"
; 1059 :                               "<td>%8.8X</td>"
; 1060 :                               "<td>%8.8X</td>"
; 1061 :                               "<td>%8.8X</td>"
; 1062 :                               "<td>%2.2X</td></tr>\n",
; 1063 :                               zone,
; 1064 : #if defined(_FEATURE_SIE)
; 1065 :                               (U32)sysblk.zpb[zone].mso << 20,
; 1066 :                               ((U32)sysblk.zpb[zone].msl << 20) | 0xFFFFF,
; 1067 :                               (U32)sysblk.zpb[zone].eso << 20,
; 1068 :                               ((U32)sysblk.zpb[zone].esl << 20) | 0xFFFFF,
; 1069 :                               (U32)sysblk.zpb[zone].mbo,
; 1070 :                               sysblk.zpb[zone].mbk
; 1071 : #else
; 1072 :                               0, 0, 0, 0, 0, 0
; 1073 : #endif
; 1074 :                );
; 1075 :     }

  0014b	e9 09 ff ff ff	 jmp	 $LN2@cgibin_deb
$LN3@cgibin_deb:

; 1076 : 
; 1077 :     hprintf(webblk->sock,"</table>\n");

  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168675
  00157	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  0015c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1078 : 
; 1079 : 
; 1080 :     hprintf(webblk->sock,"<table border>\n"

  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168676
  0016b	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00170	8b 08		 mov	 ecx, DWORD PTR [rax]
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1081 :                           "<caption align=left>"
; 1082 :                           "<h3>Alternate Measurement</h3>"
; 1083 :                           "</caption>\n");
; 1084 : 
; 1085 :     hprintf(webblk->sock,"<tr><th>Measurement Block</th>"

  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168677
  0017f	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00184	8b 08		 mov	 ecx, DWORD PTR [rax]
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1086 :                           "<th>Key</th></tr>\n");
; 1087 : 
; 1088 :     hprintf(webblk->sock,"<tr><td>%8.8X</td>"

  0018c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00193	0f b6 80 f8 10
	00 00		 movzx	 eax, BYTE PTR [rax+4344]
  0019a	44 8b c8	 mov	 r9d, eax
  0019d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001a4	44 8b 80 f0 10
	00 00		 mov	 r8d, DWORD PTR [rax+4336]
  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168678
  001b2	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  001b7	8b 08		 mov	 ecx, DWORD PTR [rax]
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1089 :                           "<td>%2.2X</td></tr>\n",
; 1090 :                           (U32)sysblk.mbo,
; 1091 :                           sysblk.mbk);
; 1092 : 
; 1093 :     hprintf(webblk->sock,"</table>\n");

  001bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168679
  001c6	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  001cb	8b 08		 mov	 ecx, DWORD PTR [rax]
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1094 : 
; 1095 : 
; 1096 :     hprintf(webblk->sock,"<table border>\n"

  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168680
  001da	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  001df	8b 08		 mov	 ecx, DWORD PTR [rax]
  001e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1097 :                           "<caption align=left>"
; 1098 :                           "<h3>Address Limit Register</h3>"
; 1099 :                           "</caption>\n");
; 1100 : 
; 1101 :     hprintf(webblk->sock,"<tr><td>%8.8X</td></tr>\n",

  001e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001ee	44 8b 80 60 12
	00 00		 mov	 r8d, DWORD PTR [rax+4704]
  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168681
  001fc	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00201	8b 08		 mov	 ecx, DWORD PTR [rax]
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1102 :                               (U32)sysblk.addrlimval);
; 1103 : 
; 1104 :     hprintf(webblk->sock,"</table>\n");

  00209	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168682
  00210	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00215	8b 08		 mov	 ecx, DWORD PTR [rax]
  00217	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1105 : 
; 1106 :     html_footer(webblk);

  0021d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  00222	e8 00 00 00 00	 call	 html_footer

; 1107 : 
; 1108 : }

  00227	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0022b	c3		 ret	 0
cgibin_debug_misc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
subchan$ = 128
dev$ = 136
sel$ = 144
value$ = 152
tv95 = 160
webblk$ = 240
cgibin_debug_device_detail PROC

; 862  : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 56		 push	 r14
  0000b	41 57		 push	 r15
  0000d	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 863  : DEVBLK *sel, *dev = NULL;

  00014	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR dev$[rsp], 0

; 864  : char *value;
; 865  : int subchan;
; 866  : 
; 867  :     html_header(webblk);

  00020	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00028	e8 00 00 00 00	 call	 html_header

; 868  : 
; 869  :     if((value = cgi_variable(webblk,"subchan"))
; 870  :       && sscanf(value,"%x",&subchan) == 1)

  0002d	41 b8 03 00 00
	00		 mov	 r8d, 3
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168626
  0003a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00042	e8 00 00 00 00	 call	 http_variable
  00047	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR value$[rsp], rax
  0004f	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR value$[rsp], 0
  00058	74 71		 je	 SHORT $LN8@cgibin_deb
  0005a	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR subchan$[rsp]
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168627
  00069	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00071	e8 00 00 00 00	 call	 sscanf
  00076	83 f8 01	 cmp	 eax, 1
  00079	75 50		 jne	 SHORT $LN8@cgibin_deb

; 871  :         for(dev = sysblk.firstdev; dev; dev = dev->nextdev)

  0007b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00082	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00089	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dev$[rsp], rax
  00091	eb 14		 jmp	 SHORT $LN4@cgibin_deb
$LN2@cgibin_deb:
  00093	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009b	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0009f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dev$[rsp], rax
$LN4@cgibin_deb:
  000a7	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000b0	74 19		 je	 SHORT $LN3@cgibin_deb

; 872  :             if(dev->subchan == subchan)

  000b2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ba	0f b7 40 46	 movzx	 eax, WORD PTR [rax+70]
  000be	3b 84 24 80 00
	00 00		 cmp	 eax, DWORD PTR subchan$[rsp]
  000c5	75 02		 jne	 SHORT $LN9@cgibin_deb

; 873  :                 break;

  000c7	eb 02		 jmp	 SHORT $LN3@cgibin_deb
$LN9@cgibin_deb:
  000c9	eb c8		 jmp	 SHORT $LN2@cgibin_deb
$LN3@cgibin_deb:
$LN8@cgibin_deb:

; 874  : 
; 875  :     hprintf(webblk->sock,"<h3>Subchannel Details</h3>\n");

  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168629
  000d2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  000da	8b 08		 mov	 ecx, DWORD PTR [rax]
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 876  : 
; 877  :     hprintf(webblk->sock,"<form method=post>\n"

  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168630
  000e9	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  000f1	8b 08		 mov	 ecx, DWORD PTR [rax]
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 878  :                           "<select type=submit name=subchan>\n");
; 879  : 
; 880  :     for(sel = sysblk.firstdev; sel; sel = sel->nextdev)

  000f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00100	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00107	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR sel$[rsp], rax
  0010f	eb 14		 jmp	 SHORT $LN7@cgibin_deb
$LN5@cgibin_deb:
  00111	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sel$[rsp]
  00119	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0011d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR sel$[rsp], rax
$LN7@cgibin_deb:
  00125	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR sel$[rsp], 0
  0012e	0f 84 ca 00 00
	00		 je	 $LN6@cgibin_deb

; 881  :     {
; 882  :         hprintf(webblk->sock,"<option value=%4.4X%s>Subchannel %4.4X",

  00134	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0013c	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR sel$[rsp], rax
  00144	75 11		 jne	 SHORT $LN14@cgibin_deb
  00146	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168631
  0014d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv95[rsp], rax
  00155	eb 0f		 jmp	 SHORT $LN15@cgibin_deb
$LN14@cgibin_deb:
  00157	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168632
  0015e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv95[rsp], rax
$LN15@cgibin_deb:
  00166	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sel$[rsp]
  0016e	0f b7 40 46	 movzx	 eax, WORD PTR [rax+70]
  00172	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR sel$[rsp]
  0017a	0f b7 49 46	 movzx	 ecx, WORD PTR [rcx+70]
  0017e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00182	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR tv95[rsp]
  0018a	44 8b c1	 mov	 r8d, ecx
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168633
  00194	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0019c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 883  :           sel->subchan, ((sel == dev) ? " selected" : ""), sel->subchan);
; 884  :         if(sel->pmcw.flag5 & PMCW5_V)

  001a4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sel$[rsp]
  001ac	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  001b3	83 e0 01	 and	 eax, 1
  001b6	85 c0		 test	 eax, eax
  001b8	74 28		 je	 SHORT $LN10@cgibin_deb

; 885  :             hprintf(webblk->sock," Device %4.4X</option>\n",sel->devnum);

  001ba	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sel$[rsp]
  001c2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001c6	44 8b c0	 mov	 r8d, eax
  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168636
  001d0	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001d8	8b 08		 mov	 ecx, DWORD PTR [rax]
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  001e0	eb 17		 jmp	 SHORT $LN11@cgibin_deb
$LN10@cgibin_deb:

; 886  :         else
; 887  :             hprintf(webblk->sock,"</option>\n");

  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168637
  001e9	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001f1	8b 08		 mov	 ecx, DWORD PTR [rax]
  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN11@cgibin_deb:

; 888  :     }

  001f9	e9 13 ff ff ff	 jmp	 $LN5@cgibin_deb
$LN6@cgibin_deb:

; 889  : 
; 890  :     hprintf(webblk->sock,"</select>\n"

  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168638
  00205	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0020d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 891  :                           "<input type=submit value=\"Select / Refresh\">\n"
; 892  :                           "</form>\n");
; 893  : 
; 894  :     if(dev)

  00215	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0021e	0f 84 24 05 00
	00		 je	 $LN12@cgibin_deb

; 895  :     {
; 896  : 
; 897  :         hprintf(webblk->sock,"<table border>\n"

  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168640
  0022b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00233	8b 08		 mov	 ecx, DWORD PTR [rax]
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 898  :                               "<caption align=left>"
; 899  :                               "<h3>Path Management Control Word</h3>"
; 900  :                               "</caption>\n");
; 901  : 
; 902  :         hprintf(webblk->sock,"<tr><th colspan=32>Interruption Parameter</th></tr>\n");

  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168641
  00242	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0024a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0024c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 903  : 
; 904  :         hprintf(webblk->sock,"<tr><td colspan=32>%2.2X%2.2X%2.2X%2.2X</td></tr>\n",

  00252	b8 01 00 00 00	 mov	 eax, 1
  00257	48 6b c0 03	 imul	 rax, rax, 3
  0025b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00263	0f b6 84 01 ec
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+748]
  0026b	b9 01 00 00 00	 mov	 ecx, 1
  00270	48 6b c9 02	 imul	 rcx, rcx, 2
  00274	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0027c	0f b6 8c 0a ec
	02 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+748]
  00284	ba 01 00 00 00	 mov	 edx, 1
  00289	48 6b d2 01	 imul	 rdx, rdx, 1
  0028d	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR dev$[rsp]
  00295	41 0f b6 94 10
	ec 02 00 00	 movzx	 edx, BYTE PTR [r8+rdx+748]
  0029e	41 b8 01 00 00
	00		 mov	 r8d, 1
  002a4	4d 6b c0 00	 imul	 r8, r8, 0
  002a8	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR dev$[rsp]
  002b0	47 0f b6 84 01
	ec 02 00 00	 movzx	 r8d, BYTE PTR [r9+r8+748]
  002b9	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  002bd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  002c1	44 8b ca	 mov	 r9d, edx
  002c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168642
  002cb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  002d3	8b 08		 mov	 ecx, DWORD PTR [rax]
  002d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 905  :                               dev->pmcw.intparm[0], dev->pmcw.intparm[1],
; 906  :                               dev->pmcw.intparm[2], dev->pmcw.intparm[3]);
; 907  : 
; 908  :         hprintf(webblk->sock,"<tr><th>Q</th>"

  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168643
  002e2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  002ea	8b 08		 mov	 ecx, DWORD PTR [rax]
  002ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 909  :                               "<th>0</th>"
; 910  :                               "<th colspan=3>ISC</th>"
; 911  :                               "<th colspan=2>00</th>"
; 912  :                               "<th>A</th>"
; 913  :                               "<th>E</th>"
; 914  :                               "<th colspan=2>LM</th>"
; 915  :                               "<th colspan=2>MM</th>"
; 916  :                               "<th>D</th>"
; 917  :                               "<th>T</th>"
; 918  :                               "<th>V</th>"
; 919  :                               "<th colspan=16>DEVNUM</th></tr>\n");
; 920  : 
; 921  :         hprintf(webblk->sock,"<tr><td>%d</td>"

  002f2	b8 01 00 00 00	 mov	 eax, 1
  002f7	48 6b c0 01	 imul	 rax, rax, 1
  002fb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00303	0f b6 84 01 f2
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+754]
  0030b	b9 01 00 00 00	 mov	 ecx, 1
  00310	48 6b c9 00	 imul	 rcx, rcx, 0
  00314	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0031c	0f b6 8c 0a f2
	02 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+754]
  00324	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0032c	0f b6 92 f1 02
	00 00		 movzx	 edx, BYTE PTR [rdx+753]
  00333	83 e2 01	 and	 edx, 1
  00336	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR dev$[rsp]
  0033e	45 0f b6 80 f1
	02 00 00	 movzx	 r8d, BYTE PTR [r8+753]
  00346	41 d1 f8	 sar	 r8d, 1
  00349	41 83 e0 01	 and	 r8d, 1
  0034d	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR dev$[rsp]
  00355	45 0f b6 89 f1
	02 00 00	 movzx	 r9d, BYTE PTR [r9+753]
  0035d	41 c1 f9 02	 sar	 r9d, 2
  00361	41 83 e1 01	 and	 r9d, 1
  00365	4c 8b 94 24 88
	00 00 00	 mov	 r10, QWORD PTR dev$[rsp]
  0036d	45 0f b6 92 f1
	02 00 00	 movzx	 r10d, BYTE PTR [r10+753]
  00375	41 c1 fa 03	 sar	 r10d, 3
  00379	41 83 e2 01	 and	 r10d, 1
  0037d	4c 8b 9c 24 88
	00 00 00	 mov	 r11, QWORD PTR dev$[rsp]
  00385	45 0f b6 9b f1
	02 00 00	 movzx	 r11d, BYTE PTR [r11+753]
  0038d	41 c1 fb 04	 sar	 r11d, 4
  00391	41 83 e3 01	 and	 r11d, 1
  00395	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR dev$[rsp]
  0039d	0f b6 9b f1 02
	00 00		 movzx	 ebx, BYTE PTR [rbx+753]
  003a4	c1 fb 05	 sar	 ebx, 5
  003a7	83 e3 01	 and	 ebx, 1
  003aa	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  003b2	0f b6 bf f1 02
	00 00		 movzx	 edi, BYTE PTR [rdi+753]
  003b9	c1 ff 06	 sar	 edi, 6
  003bc	83 e7 01	 and	 edi, 1
  003bf	48 8b b4 24 88
	00 00 00	 mov	 rsi, QWORD PTR dev$[rsp]
  003c7	0f b6 b6 f1 02
	00 00		 movzx	 esi, BYTE PTR [rsi+753]
  003ce	c1 fe 07	 sar	 esi, 7
  003d1	83 e6 01	 and	 esi, 1
  003d4	48 8b ac 24 88
	00 00 00	 mov	 rbp, QWORD PTR dev$[rsp]
  003dc	0f b6 ad f0 02
	00 00		 movzx	 ebp, BYTE PTR [rbp+752]
  003e3	83 e5 01	 and	 ebp, 1
  003e6	4c 8b b4 24 88
	00 00 00	 mov	 r14, QWORD PTR dev$[rsp]
  003ee	45 0f b6 b6 f0
	02 00 00	 movzx	 r14d, BYTE PTR [r14+752]
  003f6	41 83 e6 38	 and	 r14d, 56		; 00000038H
  003fa	41 c1 fe 03	 sar	 r14d, 3
  003fe	4c 8b bc 24 88
	00 00 00	 mov	 r15, QWORD PTR dev$[rsp]
  00406	45 0f b6 bf f0
	02 00 00	 movzx	 r15d, BYTE PTR [r15+752]
  0040e	41 81 e7 80 00
	00 00		 and	 r15d, 128		; 00000080H
  00415	41 c1 ff 07	 sar	 r15d, 7
  00419	89 44 24 70	 mov	 DWORD PTR [rsp+112], eax
  0041d	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  00421	89 54 24 60	 mov	 DWORD PTR [rsp+96], edx
  00425	44 89 44 24 58	 mov	 DWORD PTR [rsp+88], r8d
  0042a	44 89 4c 24 50	 mov	 DWORD PTR [rsp+80], r9d
  0042f	44 89 54 24 48	 mov	 DWORD PTR [rsp+72], r10d
  00434	44 89 5c 24 40	 mov	 DWORD PTR [rsp+64], r11d
  00439	89 5c 24 38	 mov	 DWORD PTR [rsp+56], ebx
  0043d	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  00441	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  00445	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  00449	45 8b ce	 mov	 r9d, r14d
  0044c	45 8b c7	 mov	 r8d, r15d
  0044f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168644
  00456	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0045e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00460	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 922  :                               "<td></td>"
; 923  :                               "<td colspan=3>%d</td>"
; 924  :                               "<td colspan=2></td>"
; 925  :                               "<td>%d</td>"
; 926  :                               "<td>%d</td>"
; 927  :                               "<td colspan=2>%d%d</td>"
; 928  :                               "<td colspan=2>%d%d</td>"
; 929  :                               "<td>%d</td>"
; 930  :                               "<td>%d</td>"
; 931  :                               "<td>%d</td>"
; 932  :                               "<td colspan=16>%2.2X%2.2X</td></tr>\n",
; 933  :                               ((dev->pmcw.flag4 & PMCW4_Q) >> 7),
; 934  :                               ((dev->pmcw.flag4 & PMCW4_ISC) >> 3),
; 935  :                               (dev->pmcw.flag4 & 1),
; 936  :                               ((dev->pmcw.flag5 >> 7) & 1),
; 937  :                               ((dev->pmcw.flag5 >> 6) & 1),
; 938  :                               ((dev->pmcw.flag5 >> 5) & 1),
; 939  :                               ((dev->pmcw.flag5 >> 4) & 1),
; 940  :                               ((dev->pmcw.flag5 >> 3) & 1),
; 941  :                               ((dev->pmcw.flag5 >> 2) & 1),
; 942  :                               ((dev->pmcw.flag5 >> 1) & 1),
; 943  :                               (dev->pmcw.flag5 & 1),
; 944  :                               dev->pmcw.devnum[0],
; 945  :                               dev->pmcw.devnum[1]);
; 946  : 
; 947  :         hprintf(webblk->sock,"<tr><th colspan=8>LPM</th>"

  00466	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168645
  0046d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00475	8b 08		 mov	 ecx, DWORD PTR [rax]
  00477	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 948  :                               "<th colspan=8>PNOM</th>"
; 949  :                               "<th colspan=8>LPUM</th>"
; 950  :                               "<th colspan=8>PIM</th></tr>\n");
; 951  : 
; 952  :         hprintf(webblk->sock,"<tr><td colspan=8>%2.2X</td>"

  0047d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00485	0f b6 80 f7 02
	00 00		 movzx	 eax, BYTE PTR [rax+759]
  0048c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00494	0f b6 89 f6 02
	00 00		 movzx	 ecx, BYTE PTR [rcx+758]
  0049b	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  004a3	0f b6 92 f5 02
	00 00		 movzx	 edx, BYTE PTR [rdx+757]
  004aa	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR dev$[rsp]
  004b2	0f b6 9b f4 02
	00 00		 movzx	 ebx, BYTE PTR [rbx+756]
  004b9	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  004bd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  004c1	44 8b ca	 mov	 r9d, edx
  004c4	44 8b c3	 mov	 r8d, ebx
  004c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168646
  004ce	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  004d6	8b 08		 mov	 ecx, DWORD PTR [rax]
  004d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 953  :                               "<td colspan=8>%2.2X</td>"
; 954  :                               "<td colspan=8>%2.2X</td>"
; 955  :                               "<td colspan=8>%2.2X</td></tr>\n",
; 956  :                               dev->pmcw.lpm,
; 957  :                               dev->pmcw.pnom,
; 958  :                               dev->pmcw.lpum,
; 959  :                               dev->pmcw.pim);
; 960  : 
; 961  :         hprintf(webblk->sock,"<tr><th colspan=16>MBI</th>"

  004de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168647
  004e5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  004ed	8b 08		 mov	 ecx, DWORD PTR [rax]
  004ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 962  :                               "<th colspan=8>POM</th>"
; 963  :                               "<th colspan=8>PAM</th></tr>\n");
; 964  : 
; 965  :         hprintf(webblk->sock,"<tr><td colspan=16>%2.2X%2.2X</td>"

  004f5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004fd	0f b6 80 fb 02
	00 00		 movzx	 eax, BYTE PTR [rax+763]
  00504	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0050c	0f b6 89 fa 02
	00 00		 movzx	 ecx, BYTE PTR [rcx+762]
  00513	ba 01 00 00 00	 mov	 edx, 1
  00518	48 6b d2 01	 imul	 rdx, rdx, 1
  0051c	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR dev$[rsp]
  00524	0f b6 94 13 f8
	02 00 00	 movzx	 edx, BYTE PTR [rbx+rdx+760]
  0052c	bb 01 00 00 00	 mov	 ebx, 1
  00531	48 6b db 00	 imul	 rbx, rbx, 0
  00535	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  0053d	0f b6 9c 1f f8
	02 00 00	 movzx	 ebx, BYTE PTR [rdi+rbx+760]
  00545	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00549	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0054d	44 8b ca	 mov	 r9d, edx
  00550	44 8b c3	 mov	 r8d, ebx
  00553	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168648
  0055a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00562	8b 08		 mov	 ecx, DWORD PTR [rax]
  00564	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 966  :                               "<td colspan=8>%2.2X</td>"
; 967  :                               "<td colspan=8>%2.2X</td></tr>\n",
; 968  :                               dev->pmcw.mbi[0],
; 969  :                               dev->pmcw.mbi[1],
; 970  :                               dev->pmcw.pom,
; 971  :                               dev->pmcw.pam);
; 972  : 
; 973  :         hprintf(webblk->sock,"<tr><th colspan=8>CHPID=0</th>"

  0056a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168649
  00571	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00579	8b 08		 mov	 ecx, DWORD PTR [rax]
  0057b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 974  :                               "<th colspan=8>CHPID=1</th>"
; 975  :                               "<th colspan=8>CHPID=2</th>"
; 976  :                               "<th colspan=8>CHPID=3</th></tr>\n");
; 977  : 
; 978  :         hprintf(webblk->sock,"<tr><td colspan=8>%2.2X</td>"

  00581	b8 01 00 00 00	 mov	 eax, 1
  00586	48 6b c0 03	 imul	 rax, rax, 3
  0058a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00592	0f b6 84 01 fc
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+764]
  0059a	b9 01 00 00 00	 mov	 ecx, 1
  0059f	48 6b c9 02	 imul	 rcx, rcx, 2
  005a3	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  005ab	0f b6 8c 0a fc
	02 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+764]
  005b3	ba 01 00 00 00	 mov	 edx, 1
  005b8	48 6b d2 01	 imul	 rdx, rdx, 1
  005bc	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR dev$[rsp]
  005c4	0f b6 94 13 fc
	02 00 00	 movzx	 edx, BYTE PTR [rbx+rdx+764]
  005cc	bb 01 00 00 00	 mov	 ebx, 1
  005d1	48 6b db 00	 imul	 rbx, rbx, 0
  005d5	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  005dd	0f b6 9c 1f fc
	02 00 00	 movzx	 ebx, BYTE PTR [rdi+rbx+764]
  005e5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  005e9	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  005ed	44 8b ca	 mov	 r9d, edx
  005f0	44 8b c3	 mov	 r8d, ebx
  005f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168650
  005fa	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00602	8b 08		 mov	 ecx, DWORD PTR [rax]
  00604	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 979  :                               "<td colspan=8>%2.2X</td>"
; 980  :                               "<td colspan=8>%2.2X</td>"
; 981  :                               "<td colspan=8>%2.2X</td></tr>\n",
; 982  :                               dev->pmcw.chpid[0],
; 983  :                               dev->pmcw.chpid[1],
; 984  :                               dev->pmcw.chpid[2],
; 985  :                               dev->pmcw.chpid[3]);
; 986  : 
; 987  :         hprintf(webblk->sock,"<tr><th colspan=8>CHPID=4</th>"

  0060a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168651
  00611	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00619	8b 08		 mov	 ecx, DWORD PTR [rax]
  0061b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 988  :                               "<th colspan=8>CHPID=5</th>"
; 989  :                               "<th colspan=8>CHPID=6</th>"
; 990  :                               "<th colspan=8>CHPID=7</th></tr>\n");
; 991  : 
; 992  :         hprintf(webblk->sock,"<tr><td colspan=8>%2.2X</td>"

  00621	b8 01 00 00 00	 mov	 eax, 1
  00626	48 6b c0 07	 imul	 rax, rax, 7
  0062a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00632	0f b6 84 01 fc
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+764]
  0063a	b9 01 00 00 00	 mov	 ecx, 1
  0063f	48 6b c9 06	 imul	 rcx, rcx, 6
  00643	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0064b	0f b6 8c 0a fc
	02 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+764]
  00653	ba 01 00 00 00	 mov	 edx, 1
  00658	48 6b d2 05	 imul	 rdx, rdx, 5
  0065c	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR dev$[rsp]
  00664	0f b6 94 13 fc
	02 00 00	 movzx	 edx, BYTE PTR [rbx+rdx+764]
  0066c	bb 01 00 00 00	 mov	 ebx, 1
  00671	48 6b db 04	 imul	 rbx, rbx, 4
  00675	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  0067d	0f b6 9c 1f fc
	02 00 00	 movzx	 ebx, BYTE PTR [rdi+rbx+764]
  00685	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00689	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0068d	44 8b ca	 mov	 r9d, edx
  00690	44 8b c3	 mov	 r8d, ebx
  00693	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168652
  0069a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  006a2	8b 08		 mov	 ecx, DWORD PTR [rax]
  006a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 993  :                               "<td colspan=8>%2.2X</td>"
; 994  :                               "<td colspan=8>%2.2X</td>"
; 995  :                               "<td colspan=8>%2.2X</td></tr>\n",
; 996  :                               dev->pmcw.chpid[4],
; 997  :                               dev->pmcw.chpid[5],
; 998  :                               dev->pmcw.chpid[6],
; 999  :                               dev->pmcw.chpid[7]);
; 1000 : 
; 1001 :         hprintf(webblk->sock,"<tr><th colspan=8>ZONE</th>"

  006aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168653
  006b1	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  006b9	8b 08		 mov	 ecx, DWORD PTR [rax]
  006bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1002 :                               "<th colspan=5>00000</th>"
; 1003 :                               "<th colspan=3>VISC</th>"
; 1004 :                               "<th colspan=8>00000000</th>"
; 1005 :                               "<th>I</th>"
; 1006 :                               "<th colspan=6>000000</th>"
; 1007 :                               "<th>S</th></tr>\n");
; 1008 : 
; 1009 :         hprintf(webblk->sock,"<tr><td colspan=8>%2.2X</td>"

  006c1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006c9	0f b6 80 07 03
	00 00		 movzx	 eax, BYTE PTR [rax+775]
  006d0	83 e0 01	 and	 eax, 1
  006d3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  006db	0f b6 89 07 03
	00 00		 movzx	 ecx, BYTE PTR [rcx+775]
  006e2	81 e1 80 00 00
	00		 and	 ecx, 128		; 00000080H
  006e8	c1 f9 07	 sar	 ecx, 7
  006eb	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  006f3	0f b6 92 05 03
	00 00		 movzx	 edx, BYTE PTR [rdx+773]
  006fa	83 e2 07	 and	 edx, 7
  006fd	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR dev$[rsp]
  00705	0f b6 9b 04 03
	00 00		 movzx	 ebx, BYTE PTR [rbx+772]
  0070c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00710	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00714	44 8b ca	 mov	 r9d, edx
  00717	44 8b c3	 mov	 r8d, ebx
  0071a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168654
  00721	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00729	8b 08		 mov	 ecx, DWORD PTR [rax]
  0072b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 1010 :                               "<td colspan=5></td>"
; 1011 :                               "<td colspan=3>%d</td>"
; 1012 :                               "<td colspan=8></td>"
; 1013 :                               "<td>%d</td>"
; 1014 :                               "<td colspan=6></td>"
; 1015 :                               "<td>%d</td></tr>\n",
; 1016 :                               dev->pmcw.zone,
; 1017 :                               (dev->pmcw.flag25 & PMCW25_VISC),
; 1018 :                               (dev->pmcw.flag27 & PMCW27_I) >> 7,
; 1019 :                               (dev->pmcw.flag27 & PMCW27_S));
; 1020 : 
; 1021 :         hprintf(webblk->sock,"</table>\n");

  00731	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168655
  00738	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00740	8b 08		 mov	 ecx, DWORD PTR [rax]
  00742	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN12@cgibin_deb:

; 1022 : 
; 1023 :     }
; 1024 : 
; 1025 :     html_footer(webblk);

  00748	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00750	e8 00 00 00 00	 call	 html_footer

; 1026 : 
; 1027 : }

  00755	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0075c	41 5f		 pop	 r15
  0075e	41 5e		 pop	 r14
  00760	5f		 pop	 rdi
  00761	5e		 pop	 rsi
  00762	5d		 pop	 rbp
  00763	5b		 pop	 rbx
  00764	c3		 ret	 0
cgibin_debug_device_detail ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
dev$ = 80
tv130 = 88
tv136 = 96
tv140 = 104
devclass$ = 112
webblk$ = 144
cgibin_debug_device_list PROC

; 817  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 818  : DEVBLK *dev;
; 819  : char   *devclass;
; 820  : 
; 821  :     html_header(webblk);

  0000c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00014	e8 00 00 00 00	 call	 html_header

; 822  : 
; 823  :     hprintf(webblk->sock,"<h2>Attached Device List</h2>\n"

  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168600
  00020	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00028	8b 08		 mov	 ecx, DWORD PTR [rax]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 824  :                           "<table>\n"
; 825  :                           "<tr><th>Number</th>"
; 826  :                           "<th>Subchannel</th>"
; 827  :                           "<th>Class</th>"
; 828  :                           "<th>Type</th>"
; 829  :                           "<th>Status</th></tr>\n");
; 830  : 
; 831  :     for(dev = sysblk.firstdev; dev; dev = dev->nextdev)

  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00037	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  0003e	48 89 44 24 50	 mov	 QWORD PTR dev$[rsp], rax
  00043	eb 0e		 jmp	 SHORT $LN4@cgibin_deb
$LN2@cgibin_deb:
  00045	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0004a	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0004e	48 89 44 24 50	 mov	 QWORD PTR dev$[rsp], rax
$LN4@cgibin_deb:
  00053	48 83 7c 24 50
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00059	0f 84 6f 01 00
	00		 je	 $LN3@cgibin_deb

; 832  :         if(dev->pmcw.flag5 & PMCW5_V)

  0005f	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00064	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  0006b	83 e0 01	 and	 eax, 1
  0006e	85 c0		 test	 eax, eax
  00070	0f 84 53 01 00
	00		 je	 $LN5@cgibin_deb

; 833  :         {
; 834  :              (dev->hnd->query)(dev, &devclass, 0, NULL);

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0007b	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  00082	45 33 c9	 xor	 r9d, r9d
  00085	45 33 c0	 xor	 r8d, r8d
  00088	48 8d 54 24 70	 lea	 rdx, QWORD PTR devclass$[rsp]
  0008d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00092	ff 50 18	 call	 QWORD PTR [rax+24]

; 835  : 
; 836  :              hprintf(webblk->sock,"<tr>"

  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0009a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000a0	c1 e8 16	 shr	 eax, 22
  000a3	83 e0 01	 and	 eax, 1
  000a6	85 c0		 test	 eax, eax
  000a8	75 4d		 jne	 SHORT $LN7@cgibin_deb
  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  000af	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000b5	c1 e8 17	 shr	 eax, 23
  000b8	83 e0 01	 and	 eax, 1
  000bb	85 c0		 test	 eax, eax
  000bd	75 38		 jne	 SHORT $LN7@cgibin_deb
  000bf	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  000c4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000ca	c1 e8 18	 shr	 eax, 24
  000cd	83 e0 01	 and	 eax, 1
  000d0	85 c0		 test	 eax, eax
  000d2	75 23		 jne	 SHORT $LN7@cgibin_deb
  000d4	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  000d9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000df	c1 e8 1b	 shr	 eax, 27
  000e2	83 e0 01	 and	 eax, 1
  000e5	85 c0		 test	 eax, eax
  000e7	75 0e		 jne	 SHORT $LN7@cgibin_deb
  000e9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168603
  000f0	48 89 44 24 58	 mov	 QWORD PTR tv130[rsp], rax
  000f5	eb 0c		 jmp	 SHORT $LN8@cgibin_deb
$LN7@cgibin_deb:
  000f7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168602
  000fe	48 89 44 24 58	 mov	 QWORD PTR tv130[rsp], rax
$LN8@cgibin_deb:
  00103	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00108	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0010e	c1 e8 13	 shr	 eax, 19
  00111	83 e0 01	 and	 eax, 1
  00114	85 c0		 test	 eax, eax
  00116	74 0e		 je	 SHORT $LN9@cgibin_deb
  00118	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168604
  0011f	48 89 44 24 60	 mov	 QWORD PTR tv136[rsp], rax
  00124	eb 0c		 jmp	 SHORT $LN10@cgibin_deb
$LN9@cgibin_deb:
  00126	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168605
  0012d	48 89 44 24 60	 mov	 QWORD PTR tv136[rsp], rax
$LN10@cgibin_deb:
  00132	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00137	83 b8 ac 01 00
	00 02		 cmp	 DWORD PTR [rax+428], 2
  0013e	7e 0e		 jle	 SHORT $LN11@cgibin_deb
  00140	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168606
  00147	48 89 44 24 68	 mov	 QWORD PTR tv140[rsp], rax
  0014c	eb 0c		 jmp	 SHORT $LN12@cgibin_deb
$LN11@cgibin_deb:
  0014e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168607
  00155	48 89 44 24 68	 mov	 QWORD PTR tv140[rsp], rax
$LN12@cgibin_deb:
  0015a	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0015f	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00163	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00168	0f b7 49 46	 movzx	 ecx, WORD PTR [rcx+70]
  0016c	48 8b 54 24 50	 mov	 rdx, QWORD PTR dev$[rsp]
  00171	0f b7 52 46	 movzx	 edx, WORD PTR [rdx+70]
  00175	4c 8b 44 24 50	 mov	 r8, QWORD PTR dev$[rsp]
  0017a	45 0f b7 40 48	 movzx	 r8d, WORD PTR [r8+72]
  0017f	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tv130[rsp]
  00184	4c 89 4c 24 48	 mov	 QWORD PTR [rsp+72], r9
  00189	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tv136[rsp]
  0018e	4c 89 4c 24 40	 mov	 QWORD PTR [rsp+64], r9
  00193	4c 8b 4c 24 68	 mov	 r9, QWORD PTR tv140[rsp]
  00198	4c 89 4c 24 38	 mov	 QWORD PTR [rsp+56], r9
  0019d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  001a1	48 8b 44 24 70	 mov	 rax, QWORD PTR devclass$[rsp]
  001a6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001ab	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001af	44 8b ca	 mov	 r9d, edx
  001b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168608
  001b9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001c1	8b 08		 mov	 ecx, DWORD PTR [rax]
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN5@cgibin_deb:

; 837  :                                    "<td>%4.4X</td>"
; 838  :                                    "<td><a href=\"detail?subchan=%4.4X\">%4.4X</a></td>"
; 839  :                                    "<td>%s</td>"
; 840  :                                    "<td>%4.4X</td>"
; 841  :                                    "<td>%s%s%s</td>"
; 842  :                                    "</tr>\n",
; 843  :                                    dev->devnum,
; 844  :                                    dev->subchan,dev->subchan,
; 845  :                                    devclass,
; 846  :                                    dev->devtype,
; 847  :                                    (dev->fd > 2 ? "open " : ""),
; 848  :                                    (dev->busy ? "busy " : ""),
; 849  :                                    (IOPENDING(dev) ? "pending " : ""));
; 850  :         }

  001c9	e9 77 fe ff ff	 jmp	 $LN2@cgibin_deb
$LN3@cgibin_deb:

; 851  : 
; 852  :     hprintf(webblk->sock,"</table>\n");

  001ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168609
  001d5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001dd	8b 08		 mov	 ecx, DWORD PTR [rax]
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 853  : 
; 854  :     html_footer(webblk);

  001e5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  001ed	e8 00 00 00 00	 call	 html_footer

; 855  : 
; 856  : }

  001f2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001f9	c3		 ret	 0
cgibin_debug_device_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
ipldev$ = 48
i$ = 52
iplcpu$ = 56
doipl$ = 60
value$ = 64
dev$ = 72
tv152 = 80
tv175 = 88
webblk$ = 112
cgibin_ipl PROC

; 731  : {

$LN27:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 732  : int i;
; 733  : char *value;
; 734  : DEVBLK *dev;
; 735  : U16 ipldev;
; 736  : int iplcpu;
; 737  : U32 doipl;
; 738  : 
; 739  :     html_header(webblk);

  00009	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  0000e	e8 00 00 00 00	 call	 html_header

; 740  : 
; 741  :     hprintf(webblk->sock,"<h1>Perform Initial Program Load</h1>\n");

  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168554
  0001a	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  0001f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 742  : 
; 743  :     if(cgi_variable(webblk,"doipl"))

  00027	41 b8 03 00 00
	00		 mov	 r8d, 3
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168557
  00034	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  00039	e8 00 00 00 00	 call	 http_variable
  0003e	48 85 c0	 test	 rax, rax
  00041	74 0a		 je	 SHORT $LN8@cgibin_ipl

; 744  :         doipl = 1;

  00043	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR doipl$[rsp], 1
  0004b	eb 08		 jmp	 SHORT $LN9@cgibin_ipl
$LN8@cgibin_ipl:

; 745  :     else
; 746  :         doipl = 0;

  0004d	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR doipl$[rsp], 0
$LN9@cgibin_ipl:

; 747  : 
; 748  :     if((value = cgi_variable(webblk,"device")))

  00055	41 b8 03 00 00
	00		 mov	 r8d, 3
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168560
  00062	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  00067	e8 00 00 00 00	 call	 http_variable
  0006c	48 89 44 24 40	 mov	 QWORD PTR value$[rsp], rax
  00071	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  00077	74 18		 je	 SHORT $LN10@cgibin_ipl

; 749  :         sscanf(value,"%hx",&ipldev);

  00079	4c 8d 44 24 30	 lea	 r8, QWORD PTR ipldev$[rsp]
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168561
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0008a	e8 00 00 00 00	 call	 sscanf
  0008f	eb 13		 jmp	 SHORT $LN11@cgibin_ipl
$LN10@cgibin_ipl:

; 750  :     else
; 751  :         ipldev = sysblk.ipldev;

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	0f b7 80 f2 00
	00 00		 movzx	 eax, WORD PTR [rax+242]
  0009f	66 89 44 24 30	 mov	 WORD PTR ipldev$[rsp], ax
$LN11@cgibin_ipl:

; 752  : 
; 753  :     if((value = cgi_variable(webblk,"cpu")))

  000a4	41 b8 03 00 00
	00		 mov	 r8d, 3
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168564
  000b1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  000b6	e8 00 00 00 00	 call	 http_variable
  000bb	48 89 44 24 40	 mov	 QWORD PTR value$[rsp], rax
  000c0	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  000c6	74 18		 je	 SHORT $LN12@cgibin_ipl

; 754  :         sscanf(value,"%x",&iplcpu);

  000c8	4c 8d 44 24 38	 lea	 r8, QWORD PTR iplcpu$[rsp]
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168565
  000d4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  000d9	e8 00 00 00 00	 call	 sscanf
  000de	eb 11		 jmp	 SHORT $LN13@cgibin_ipl
$LN12@cgibin_ipl:

; 755  :     else
; 756  :         iplcpu = sysblk.iplcpu;

  000e0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000e7	8b 80 f4 00 00
	00		 mov	 eax, DWORD PTR [rax+244]
  000ed	89 44 24 38	 mov	 DWORD PTR iplcpu$[rsp], eax
$LN13@cgibin_ipl:

; 757  : 
; 758  :     if((value = cgi_variable(webblk,"loadparm")))

  000f1	41 b8 03 00 00
	00		 mov	 r8d, 3
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168567
  000fe	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  00103	e8 00 00 00 00	 call	 http_variable
  00108	48 89 44 24 40	 mov	 QWORD PTR value$[rsp], rax
  0010d	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  00113	74 0a		 je	 SHORT $LN14@cgibin_ipl

; 759  :     set_loadparm(value);

  00115	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  0011a	e8 00 00 00 00	 call	 set_loadparm
$LN14@cgibin_ipl:

; 760  : 
; 761  :     /* Validate CPU number */
; 762  :     if(iplcpu >= sysblk.maxcpu)

  0011f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00126	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0012c	39 44 24 38	 cmp	 DWORD PTR iplcpu$[rsp], eax
  00130	7c 08		 jl	 SHORT $LN15@cgibin_ipl

; 763  :         doipl = 0;

  00132	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR doipl$[rsp], 0
$LN15@cgibin_ipl:

; 764  : 
; 765  :     if(!doipl)

  0013a	83 7c 24 3c 00	 cmp	 DWORD PTR doipl$[rsp], 0
  0013f	0f 85 b3 01 00
	00		 jne	 $LN16@cgibin_ipl

; 766  :     {
; 767  :         /* Present IPL parameters */
; 768  :         hprintf(webblk->sock,"<form method=post>\n"

  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168571
  0014c	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00151	8b 08		 mov	 ecx, DWORD PTR [rax]
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 769  :                               "<select type=submit name=cpu>\n");
; 770  : 
; 771  :         for(i = 0; i < sysblk.maxcpu; i++)

  00159	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00161	eb 0a		 jmp	 SHORT $LN4@cgibin_ipl
$LN2@cgibin_ipl:
  00163	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  00167	ff c0		 inc	 eax
  00169	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN4@cgibin_ipl:
  0016d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00174	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0017a	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  0017e	7d 7d		 jge	 SHORT $LN3@cgibin_ipl

; 772  :             if(IS_CPU_ONLINE(i))

  00180	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  00185	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0018c	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00195	74 61		 je	 SHORT $LN18@cgibin_ipl

; 773  :                 hprintf(webblk->sock,"<option value=%4.4X%s>CPU%4.4X</option>\n",

  00197	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001a3	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  001ab	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  001b2	3b 44 24 38	 cmp	 eax, DWORD PTR iplcpu$[rsp]
  001b6	75 0e		 jne	 SHORT $LN23@cgibin_ipl
  001b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168573
  001bf	48 89 44 24 50	 mov	 QWORD PTR tv152[rsp], rax
  001c4	eb 0c		 jmp	 SHORT $LN24@cgibin_ipl
$LN23@cgibin_ipl:
  001c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168574
  001cd	48 89 44 24 50	 mov	 QWORD PTR tv152[rsp], rax
$LN24@cgibin_ipl:
  001d2	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  001d6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001da	4c 8b 4c 24 50	 mov	 r9, QWORD PTR tv152[rsp]
  001df	44 8b 44 24 34	 mov	 r8d, DWORD PTR i$[rsp]
  001e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168575
  001eb	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  001f0	8b 08		 mov	 ecx, DWORD PTR [rax]
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN18@cgibin_ipl:
  001f8	e9 66 ff ff ff	 jmp	 $LN2@cgibin_ipl
$LN3@cgibin_ipl:

; 774  :                   i, ((sysblk.regs[i]->cpuad == iplcpu) ? " selected" : ""), i);
; 775  : 
; 776  :         hprintf(webblk->sock,"</select>\n"

  001fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168576
  00204	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00209	8b 08		 mov	 ecx, DWORD PTR [rax]
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 777  :                               "<select type=submit name=device>\n");
; 778  : 
; 779  :         for(dev = sysblk.firstdev; dev; dev = dev->nextdev)

  00211	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00218	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  0021f	48 89 44 24 48	 mov	 QWORD PTR dev$[rsp], rax
  00224	eb 0e		 jmp	 SHORT $LN7@cgibin_ipl
$LN5@cgibin_ipl:
  00226	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0022b	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0022f	48 89 44 24 48	 mov	 QWORD PTR dev$[rsp], rax
$LN7@cgibin_ipl:
  00234	48 83 7c 24 48
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0023a	74 76		 je	 SHORT $LN6@cgibin_ipl

; 780  :             if(dev->pmcw.flag5 & PMCW5_V)

  0023c	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00241	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  00248	83 e0 01	 and	 eax, 1
  0024b	85 c0		 test	 eax, eax
  0024d	74 5e		 je	 SHORT $LN19@cgibin_ipl

; 781  :                 hprintf(webblk->sock,"<option value=%4.4X%s>DEV%4.4X</option>\n",

  0024f	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00254	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00258	0f b7 4c 24 30	 movzx	 ecx, WORD PTR ipldev$[rsp]
  0025d	3b c1		 cmp	 eax, ecx
  0025f	75 0e		 jne	 SHORT $LN25@cgibin_ipl
  00261	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168578
  00268	48 89 44 24 58	 mov	 QWORD PTR tv175[rsp], rax
  0026d	eb 0c		 jmp	 SHORT $LN26@cgibin_ipl
$LN25@cgibin_ipl:
  0026f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168579
  00276	48 89 44 24 58	 mov	 QWORD PTR tv175[rsp], rax
$LN26@cgibin_ipl:
  0027b	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00280	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00284	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00289	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0028d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00291	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tv175[rsp]
  00296	44 8b c1	 mov	 r8d, ecx
  00299	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168580
  002a0	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  002a5	8b 08		 mov	 ecx, DWORD PTR [rax]
  002a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN19@cgibin_ipl:
  002ad	e9 74 ff ff ff	 jmp	 $LN5@cgibin_ipl
$LN6@cgibin_ipl:

; 782  :                   dev->devnum, ((dev->devnum == ipldev) ? " selected" : ""), dev->devnum);
; 783  : 
; 784  :         hprintf(webblk->sock,"</select>\n");

  002b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168581
  002b9	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  002be	8b 08		 mov	 ecx, DWORD PTR [rax]
  002c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 785  : 
; 786  :         hprintf(webblk->sock,"Loadparm:<input type=text name=loadparm size=8 value=\"%s\">\n", str_loadparm());

  002c6	e8 00 00 00 00	 call	 str_loadparm
  002cb	4c 8b c0	 mov	 r8, rax
  002ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168582
  002d5	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  002da	8b 08		 mov	 ecx, DWORD PTR [rax]
  002dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 787  : 
; 788  :         hprintf(webblk->sock,"<input type=submit name=doipl value=\"IPL\">\n"

  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168583
  002e9	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  002ee	8b 08		 mov	 ecx, DWORD PTR [rax]
  002f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 789  :                           "</form>\n");
; 790  : 
; 791  :     }

  002f6	eb 5e		 jmp	 SHORT $LN17@cgibin_ipl
$LN16@cgibin_ipl:

; 792  :     else
; 793  :     {
; 794  :         OBTAIN_INTLOCK(NULL);

  002f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168584
  002ff	33 c9		 xor	 ecx, ecx
  00301	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 795  :         /* Perform IPL function */
; 796  :         if( load_ipl(0, ipldev, iplcpu,0) )

  00306	45 33 c9	 xor	 r9d, r9d
  00309	44 8b 44 24 38	 mov	 r8d, DWORD PTR iplcpu$[rsp]
  0030e	0f b7 54 24 30	 movzx	 edx, WORD PTR ipldev$[rsp]
  00313	33 c9		 xor	 ecx, ecx
  00315	e8 00 00 00 00	 call	 load_ipl
  0031a	85 c0		 test	 eax, eax
  0031c	74 16		 je	 SHORT $LN20@cgibin_ipl

; 797  :         {
; 798  :             hprintf(webblk->sock,"<h3>IPL failed, see the "

  0031e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168587
  00325	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  0032a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0032c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 799  :                                   "<a href=\"syslog#bottom\">system log</a> "
; 800  :                                   "for details</h3>\n");
; 801  :         }

  00332	eb 14		 jmp	 SHORT $LN21@cgibin_ipl
$LN20@cgibin_ipl:

; 802  :         else
; 803  :         {
; 804  :             hprintf(webblk->sock,"<h3>IPL completed</h3>\n");

  00334	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168588
  0033b	48 8b 44 24 70	 mov	 rax, QWORD PTR webblk$[rsp]
  00340	8b 08		 mov	 ecx, DWORD PTR [rax]
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN21@cgibin_ipl:

; 805  :         }
; 806  :         RELEASE_INTLOCK(NULL);

  00348	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168589
  0034f	33 c9		 xor	 ecx, ecx
  00351	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN17@cgibin_ipl:

; 807  :     }
; 808  : 
; 809  :     html_footer(webblk);

  00356	48 8b 4c 24 70	 mov	 rcx, QWORD PTR webblk$[rsp]
  0035b	e8 00 00 00 00	 call	 html_footer

; 810  : 
; 811  : }

  00360	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00364	c3		 ret	 0
cgibin_ipl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
addr$ = 32
i$ = 36
j$ = 40
m$1 = 44
value$ = 48
webblk$ = 80
cgibin_debug_storage PROC

; 672  : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 673  : int i, j;
; 674  : char *value;
; 675  : U32 addr = 0;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR addr$[rsp], 0

; 676  : 
; 677  :     /* INCOMPLETE
; 678  :      * no storage alter
; 679  :      * no storage type (abs/real/prim virt/sec virt/access reg virt)
; 680  :      * no cpu selection for storage other than abs
; 681  :      */
; 682  : 
; 683  :     if((value = cgi_variable(webblk,"alter_a0")))

  00011	41 b8 03 00 00
	00		 mov	 r8d, 3
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168523
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR webblk$[rsp]
  00023	e8 00 00 00 00	 call	 http_variable
  00028	48 89 44 24 30	 mov	 QWORD PTR value$[rsp], rax
  0002d	48 83 7c 24 30
	00		 cmp	 QWORD PTR value$[rsp], 0
  00033	74 16		 je	 SHORT $LN8@cgibin_deb

; 684  :         sscanf(value,"%x",&addr);

  00035	4c 8d 44 24 20	 lea	 r8, QWORD PTR addr$[rsp]
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168524
  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR value$[rsp]
  00046	e8 00 00 00 00	 call	 sscanf
$LN8@cgibin_deb:

; 685  : 
; 686  :     addr &= ~0x0F;

  0004b	8b 44 24 20	 mov	 eax, DWORD PTR addr$[rsp]
  0004f	83 e0 f0	 and	 eax, -16		; fffffff0H
  00052	89 44 24 20	 mov	 DWORD PTR addr$[rsp], eax

; 687  : 
; 688  :     html_header(webblk);

  00056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR webblk$[rsp]
  0005b	e8 00 00 00 00	 call	 html_header

; 689  : 
; 690  : 
; 691  :     hprintf(webblk->sock,"<form method=post>\n"

  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168525
  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 692  :                           "<table>\n");
; 693  : 
; 694  :     if(addr > sysblk.mainsize || (addr + 128) > sysblk.mainsize)

  00074	8b 44 24 20	 mov	 eax, DWORD PTR addr$[rsp]
  00078	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0007f	48 3b 81 90 00
	00 00		 cmp	 rax, QWORD PTR [rcx+144]
  00086	77 1b		 ja	 SHORT $LN10@cgibin_deb
  00088	8b 44 24 20	 mov	 eax, DWORD PTR addr$[rsp]
  0008c	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00091	8b c0		 mov	 eax, eax
  00093	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0009a	48 3b 81 90 00
	00 00		 cmp	 rax, QWORD PTR [rcx+144]
  000a1	76 18		 jbe	 SHORT $LN9@cgibin_deb
$LN10@cgibin_deb:

; 695  :         addr = sysblk.mainsize - 128;

  000a3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000aa	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000b1	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  000b7	89 44 24 20	 mov	 DWORD PTR addr$[rsp], eax
$LN9@cgibin_deb:

; 696  : 
; 697  :     for(i = 0; i < 128;)

  000bb	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
$LN2@cgibin_deb:
  000c3	81 7c 24 24 80
	00 00 00	 cmp	 DWORD PTR i$[rsp], 128	; 00000080H
  000cb	0f 8d f0 00 00
	00		 jge	 $LN3@cgibin_deb

; 698  :     {
; 699  :         if(i == 0)

  000d1	83 7c 24 24 00	 cmp	 DWORD PTR i$[rsp], 0
  000d6	75 34		 jne	 SHORT $LN11@cgibin_deb

; 700  :             hprintf(webblk->sock,"<tr>\n"

  000d8	8b 44 24 20	 mov	 eax, DWORD PTR addr$[rsp]
  000dc	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  000e0	03 c8		 add	 ecx, eax
  000e2	8b c1		 mov	 eax, ecx
  000e4	8b 4c 24 20	 mov	 ecx, DWORD PTR addr$[rsp]
  000e8	8b 54 24 24	 mov	 edx, DWORD PTR i$[rsp]
  000ec	03 d1		 add	 edx, ecx
  000ee	8b ca		 mov	 ecx, edx
  000f0	44 8b c8	 mov	 r9d, eax
  000f3	44 8b c1	 mov	 r8d, ecx
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168530
  000fd	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  00102	8b 08		 mov	 ecx, DWORD PTR [rax]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  0010a	eb 23		 jmp	 SHORT $LN12@cgibin_deb
$LN11@cgibin_deb:

; 701  :                                   "<td><input type=text name=alter_a0 size=8 value=%8.8X>"
; 702  :                                   "<input type=hidden name=alter_a1 value=%8.8X></td>\n"
; 703  :                                   "<td><input type=submit name=refresh value=\"Refresh\"></td>\n",
; 704  :                                   i + addr, i + addr);
; 705  :         else
; 706  :             hprintf(webblk->sock,"<tr>\n"

  0010c	8b 44 24 20	 mov	 eax, DWORD PTR addr$[rsp]
  00110	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00114	03 c8		 add	 ecx, eax
  00116	8b c1		 mov	 eax, ecx
  00118	44 8b c0	 mov	 r8d, eax
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168531
  00122	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  00127	8b 08		 mov	 ecx, DWORD PTR [rax]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN12@cgibin_deb:

; 707  :                                   "<td align=center>%8.8X</td>\n"
; 708  :                                   "<td></td>\n",
; 709  :                                   i + addr);
; 710  : 
; 711  :     for(j = 0; j < 4; i += 4, j++)

  0012f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00137	eb 15		 jmp	 SHORT $LN7@cgibin_deb
$LN5@cgibin_deb:
  00139	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0013d	83 c0 04	 add	 eax, 4
  00140	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
  00144	8b 44 24 28	 mov	 eax, DWORD PTR j$[rsp]
  00148	ff c0		 inc	 eax
  0014a	89 44 24 28	 mov	 DWORD PTR j$[rsp], eax
$LN7@cgibin_deb:
  0014e	83 7c 24 28 04	 cmp	 DWORD PTR j$[rsp], 4
  00153	7d 53		 jge	 SHORT $LN6@cgibin_deb

; 712  :         {
; 713  :         U32 m;
; 714  :             FETCH_FW(m,sysblk.mainstor + i + addr);

  00155	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0015a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00161	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00168	48 03 c8	 add	 rcx, rax
  0016b	48 8b c1	 mov	 rax, rcx
  0016e	8b 4c 24 20	 mov	 ecx, DWORD PTR addr$[rsp]
  00172	48 03 c1	 add	 rax, rcx
  00175	48 8b c8	 mov	 rcx, rax
  00178	e8 00 00 00 00	 call	 fetch_fw_noswap
  0017d	8b c8		 mov	 ecx, eax
  0017f	e8 00 00 00 00	 call	 _byteswap_ulong
  00184	89 44 24 2c	 mov	 DWORD PTR m$1[rsp], eax

; 715  :             hprintf(webblk->sock,"<td><input type=text name=alter_m%d size=8 value=%8.8X></td>\n",i,m);

  00188	44 8b 4c 24 2c	 mov	 r9d, DWORD PTR m$1[rsp]
  0018d	44 8b 44 24 24	 mov	 r8d, DWORD PTR i$[rsp]
  00192	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168532
  00199	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  0019e	8b 08		 mov	 ecx, DWORD PTR [rax]
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 716  :         }

  001a6	eb 91		 jmp	 SHORT $LN5@cgibin_deb
$LN6@cgibin_deb:

; 717  : 
; 718  :         hprintf(webblk->sock,"</tr>\n");

  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168533
  001af	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [rax]
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 719  :     }

  001bc	e9 02 ff ff ff	 jmp	 $LN2@cgibin_deb
$LN3@cgibin_deb:

; 720  : 
; 721  :     hprintf(webblk->sock,"</table>\n"

  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168534
  001c8	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  001cd	8b 08		 mov	 ecx, DWORD PTR [rax]
  001cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 722  :                           "</form>\n");
; 723  :     html_footer(webblk);

  001d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR webblk$[rsp]
  001da	e8 00 00 00 00	 call	 html_footer

; 724  : 
; 725  : }

  001df	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001e3	c3		 ret	 0
cgibin_debug_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
i$ = 64
cpu$ = 68
value$ = 72
select_ar$ = 80
select_cr$ = 84
select_gr$ = 88
regs$ = 96
tv277 = 104
tv280 = 108
tv297 = 112
tv300 = 116
tv307 = 120
tv310 = 124
tv394 = 128
tv397 = 132
tv405 = 136
tv408 = 140
tv418 = 144
tv472 = 148
tv475 = 152
tv485 = 156
tv415 = 160
tv495 = 164
tv498 = 168
tv528 = 172
tv531 = 176
tv488 = 180
tv274 = 184
tv267 = 192
tv325 = 200
tv337 = 208
tv344 = 216
tv388 = 224
tv433 = 232
tv446 = 240
tv453 = 248
tv466 = 256
tv511 = 264
tv522 = 272
regname$1 = 280
regname$2 = 296
regname$3 = 312
__$ArrayPad$ = 328
webblk$ = 352
cgibin_debug_registers PROC

; 435  : {

$LN126:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 436  : int i, cpu = 0;

  0001e	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR cpu$[rsp], 0

; 437  : int select_gr, select_cr, select_ar;
; 438  : char *value;
; 439  : REGS *regs;
; 440  : 
; 441  :     if((value = cgi_variable(webblk,"cpu")))

  00026	41 b8 03 00 00
	00		 mov	 r8d, 3
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168414
  00033	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0003b	e8 00 00 00 00	 call	 http_variable
  00040	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  00045	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0004b	74 0f		 je	 SHORT $LN26@cgibin_deb

; 442  :         cpu = atoi(value);

  0004d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00058	89 44 24 44	 mov	 DWORD PTR cpu$[rsp], eax
$LN26@cgibin_deb:

; 443  : 
; 444  :     if((value = cgi_variable(webblk,"select_gr")) && *value == 'S')

  0005c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168417
  00069	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00071	e8 00 00 00 00	 call	 http_variable
  00076	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  0007b	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00081	74 17		 je	 SHORT $LN27@cgibin_deb
  00083	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00088	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0008b	83 f8 53	 cmp	 eax, 83			; 00000053H
  0008e	75 0a		 jne	 SHORT $LN27@cgibin_deb

; 445  :         select_gr = 1;

  00090	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR select_gr$[rsp], 1
  00098	eb 08		 jmp	 SHORT $LN28@cgibin_deb
$LN27@cgibin_deb:

; 446  :     else
; 447  :         select_gr = 0;

  0009a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR select_gr$[rsp], 0
$LN28@cgibin_deb:

; 448  : 
; 449  :     if((value = cgi_variable(webblk,"select_cr")) && *value == 'S')

  000a2	41 b8 03 00 00
	00		 mov	 r8d, 3
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168420
  000af	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000b7	e8 00 00 00 00	 call	 http_variable
  000bc	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  000c1	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  000c7	74 17		 je	 SHORT $LN29@cgibin_deb
  000c9	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  000ce	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d1	83 f8 53	 cmp	 eax, 83			; 00000053H
  000d4	75 0a		 jne	 SHORT $LN29@cgibin_deb

; 450  :         select_cr = 1;

  000d6	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR select_cr$[rsp], 1
  000de	eb 08		 jmp	 SHORT $LN30@cgibin_deb
$LN29@cgibin_deb:

; 451  :     else
; 452  :         select_cr = 0;

  000e0	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR select_cr$[rsp], 0
$LN30@cgibin_deb:

; 453  : 
; 454  :     if((value = cgi_variable(webblk,"select_ar")) && *value == 'S')

  000e8	41 b8 03 00 00
	00		 mov	 r8d, 3
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168423
  000f5	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000fd	e8 00 00 00 00	 call	 http_variable
  00102	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  00107	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0010d	74 17		 je	 SHORT $LN31@cgibin_deb
  0010f	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00114	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00117	83 f8 53	 cmp	 eax, 83			; 00000053H
  0011a	75 0a		 jne	 SHORT $LN31@cgibin_deb

; 455  :         select_ar = 1;

  0011c	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR select_ar$[rsp], 1
  00124	eb 08		 jmp	 SHORT $LN32@cgibin_deb
$LN31@cgibin_deb:

; 456  :     else
; 457  :         select_ar = 0;

  00126	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR select_ar$[rsp], 0
$LN32@cgibin_deb:

; 458  : 
; 459  :     /* Validate cpu number */
; 460  :     if (cpu < 0 || cpu >= sysblk.maxcpu || !IS_CPU_ONLINE(cpu))

  0012e	83 7c 24 44 00	 cmp	 DWORD PTR cpu$[rsp], 0
  00133	7c 2a		 jl	 SHORT $LN34@cgibin_deb
  00135	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0013c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00142	39 44 24 44	 cmp	 DWORD PTR cpu$[rsp], eax
  00146	7d 17		 jge	 SHORT $LN34@cgibin_deb
  00148	48 63 44 24 44	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0014d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00154	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0015d	75 42		 jne	 SHORT $LN33@cgibin_deb
$LN34@cgibin_deb:

; 461  :         for (cpu = 0; cpu < sysblk.maxcpu; cpu++)

  0015f	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR cpu$[rsp], 0
  00167	eb 0a		 jmp	 SHORT $LN4@cgibin_deb
$LN2@cgibin_deb:
  00169	8b 44 24 44	 mov	 eax, DWORD PTR cpu$[rsp]
  0016d	ff c0		 inc	 eax
  0016f	89 44 24 44	 mov	 DWORD PTR cpu$[rsp], eax
$LN4@cgibin_deb:
  00173	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0017a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00180	39 44 24 44	 cmp	 DWORD PTR cpu$[rsp], eax
  00184	7d 1b		 jge	 SHORT $LN3@cgibin_deb

; 462  :             if(IS_CPU_ONLINE(cpu))

  00186	48 63 44 24 44	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0018b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00192	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0019b	74 02		 je	 SHORT $LN35@cgibin_deb

; 463  :                 break;

  0019d	eb 02		 jmp	 SHORT $LN3@cgibin_deb
$LN35@cgibin_deb:
  0019f	eb c8		 jmp	 SHORT $LN2@cgibin_deb
$LN3@cgibin_deb:
$LN33@cgibin_deb:

; 464  : 
; 465  :     if(cpu < sysblk.maxcpu)

  001a1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001a8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ae	39 44 24 44	 cmp	 DWORD PTR cpu$[rsp], eax
  001b2	7d 1b		 jge	 SHORT $LN36@cgibin_deb

; 466  :         regs = sysblk.regs[cpu];

  001b4	48 63 44 24 44	 movsxd	 rax, DWORD PTR cpu$[rsp]
  001b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001c0	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  001c8	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax
  001cd	eb 22		 jmp	 SHORT $LN37@cgibin_deb
$LN36@cgibin_deb:

; 467  :     else
; 468  :         regs = sysblk.regs[sysblk.pcpu];

  001cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001d6	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  001dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001e4	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  001ec	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax
$LN37@cgibin_deb:

; 469  : 
; 470  :     if (!regs) regs = &sysblk.dummyregs;

  001f1	48 83 7c 24 60
	00		 cmp	 QWORD PTR regs$[rsp], 0
  001f7	75 12		 jne	 SHORT $LN38@cgibin_deb
  001f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00200	48 05 00 15 00
	00		 add	 rax, 5376		; 00001500H
  00206	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax
$LN38@cgibin_deb:

; 471  : 
; 472  :     if((value = cgi_variable(webblk,"alter_gr")) && *value == 'A')

  0020b	41 b8 03 00 00
	00		 mov	 r8d, 3
  00211	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168431
  00218	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00220	e8 00 00 00 00	 call	 http_variable
  00225	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  0022a	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00230	0f 84 d5 00 00
	00		 je	 $LN39@cgibin_deb
  00236	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  0023b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0023e	83 f8 41	 cmp	 eax, 65			; 00000041H
  00241	0f 85 c4 00 00
	00		 jne	 $LN39@cgibin_deb

; 473  :     {
; 474  :         for(i = 0; i < 16; i++)

  00247	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0024f	eb 0a		 jmp	 SHORT $LN7@cgibin_deb
$LN5@cgibin_deb:
  00251	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00255	ff c0		 inc	 eax
  00257	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN7@cgibin_deb:
  0025b	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  00260	0f 8d a5 00 00
	00		 jge	 $LN6@cgibin_deb

; 475  :         {
; 476  :         char regname[16];
; 477  :             MSGBUF(regname,"alter_gr%d",i);

  00266	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  0026b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168432
  00272	ba 10 00 00 00	 mov	 edx, 16
  00277	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR regname$1[rsp]
  0027f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 478  :             if((value = cgi_variable(webblk,regname)))

  00285	41 b8 03 00 00
	00		 mov	 r8d, 3
  0028b	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR regname$1[rsp]
  00293	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0029b	e8 00 00 00 00	 call	 http_variable
  002a0	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  002a5	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  002ab	74 59		 je	 SHORT $LN40@cgibin_deb

; 479  :             {
; 480  :                 if(regs->arch_mode != ARCH_900_IDX)

  002ad	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  002b2	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  002b6	74 28		 je	 SHORT $LN41@cgibin_deb

; 481  :                     sscanf(value,"%"SCNx32,&(regs->GR_L(i)));

  002b8	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  002bd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  002c2	48 8d 84 c1 80
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+640]
  002ca	4c 8b c0	 mov	 r8, rax
  002cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168436
  002d4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  002d9	e8 00 00 00 00	 call	 sscanf
  002de	eb 26		 jmp	 SHORT $LN42@cgibin_deb
$LN41@cgibin_deb:

; 482  :                 else
; 483  :                     sscanf(value,"%"SCNx64,&(regs->GR_G(i)));

  002e0	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  002e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  002ea	48 8d 84 c1 80
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+640]
  002f2	4c 8b c0	 mov	 r8, rax
  002f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168437
  002fc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  00301	e8 00 00 00 00	 call	 sscanf
$LN42@cgibin_deb:
$LN40@cgibin_deb:

; 484  :             }
; 485  :         }

  00306	e9 46 ff ff ff	 jmp	 $LN5@cgibin_deb
$LN6@cgibin_deb:
$LN39@cgibin_deb:

; 486  :     }
; 487  : 
; 488  :     if((value = cgi_variable(webblk,"alter_cr")) && *value == 'A')

  0030b	41 b8 03 00 00
	00		 mov	 r8d, 3
  00311	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168439
  00318	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00320	e8 00 00 00 00	 call	 http_variable
  00325	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  0032a	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00330	0f 84 db 00 00
	00		 je	 $LN43@cgibin_deb
  00336	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  0033b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0033e	83 f8 41	 cmp	 eax, 65			; 00000041H
  00341	0f 85 ca 00 00
	00		 jne	 $LN43@cgibin_deb

; 489  :     {
; 490  :         for(i = 0; i < 16; i++)

  00347	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0034f	eb 0a		 jmp	 SHORT $LN10@cgibin_deb
$LN8@cgibin_deb:
  00351	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00355	ff c0		 inc	 eax
  00357	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN10@cgibin_deb:
  0035b	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  00360	0f 8d ab 00 00
	00		 jge	 $LN9@cgibin_deb

; 491  :         {
; 492  :         char regname[16];
; 493  :             MSGBUF(regname,"alter_cr%d",i);

  00366	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  0036b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168440
  00372	ba 10 00 00 00	 mov	 edx, 16
  00377	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR regname$2[rsp]
  0037f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 494  :             if((value = cgi_variable(webblk,regname)))

  00385	41 b8 03 00 00
	00		 mov	 r8d, 3
  0038b	48 8d 94 24 28
	01 00 00	 lea	 rdx, QWORD PTR regname$2[rsp]
  00393	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0039b	e8 00 00 00 00	 call	 http_variable
  003a0	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  003a5	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  003ab	74 5f		 je	 SHORT $LN44@cgibin_deb

; 495  :             {
; 496  :                 if(regs->arch_mode != ARCH_900_IDX)

  003ad	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  003b2	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  003b6	74 2b		 je	 SHORT $LN45@cgibin_deb

; 497  :                     sscanf(value,"%"SCNx32,&(regs->CR_L(i)));

  003b8	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  003bc	ff c0		 inc	 eax
  003be	48 98		 cdqe
  003c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  003c5	48 8d 84 c1 00
	06 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+1536]
  003cd	4c 8b c0	 mov	 r8, rax
  003d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168444
  003d7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  003dc	e8 00 00 00 00	 call	 sscanf
  003e1	eb 29		 jmp	 SHORT $LN46@cgibin_deb
$LN45@cgibin_deb:

; 498  :                 else
; 499  :                     sscanf(value,"%"SCNx64,&(regs->CR_G(i)));

  003e3	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  003e7	ff c0		 inc	 eax
  003e9	48 98		 cdqe
  003eb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  003f0	48 8d 84 c1 00
	06 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+1536]
  003f8	4c 8b c0	 mov	 r8, rax
  003fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168445
  00402	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  00407	e8 00 00 00 00	 call	 sscanf
$LN46@cgibin_deb:
$LN44@cgibin_deb:

; 500  :             }
; 501  :         }

  0040c	e9 40 ff ff ff	 jmp	 $LN8@cgibin_deb
$LN9@cgibin_deb:
$LN43@cgibin_deb:

; 502  :     }
; 503  : 
; 504  :     if((value = cgi_variable(webblk,"alter_ar")) && *value == 'A')

  00411	41 b8 03 00 00
	00		 mov	 r8d, 3
  00417	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168447
  0041e	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00426	e8 00 00 00 00	 call	 http_variable
  0042b	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  00430	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00436	0f 84 9b 00 00
	00		 je	 $LN47@cgibin_deb
  0043c	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00441	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00444	83 f8 41	 cmp	 eax, 65			; 00000041H
  00447	0f 85 8a 00 00
	00		 jne	 $LN47@cgibin_deb

; 505  :     {
; 506  :         for(i = 0; i < 16; i++)

  0044d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00455	eb 0a		 jmp	 SHORT $LN13@cgibin_deb
$LN11@cgibin_deb:
  00457	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0045b	ff c0		 inc	 eax
  0045d	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN13@cgibin_deb:
  00461	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  00466	7d 6f		 jge	 SHORT $LN12@cgibin_deb

; 507  :         {
; 508  :         char regname[16];
; 509  :             MSGBUF(regname,"alter_ar%d",i);

  00468	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  0046d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168448
  00474	ba 10 00 00 00	 mov	 edx, 16
  00479	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR regname$3[rsp]
  00481	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 510  :             if((value = cgi_variable(webblk,regname)))

  00487	41 b8 03 00 00
	00		 mov	 r8d, 3
  0048d	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR regname$3[rsp]
  00495	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0049d	e8 00 00 00 00	 call	 http_variable
  004a2	48 89 44 24 48	 mov	 QWORD PTR value$[rsp], rax
  004a7	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  004ad	74 26		 je	 SHORT $LN48@cgibin_deb

; 511  :                 sscanf(value,"%x",&(regs->AR(i)));

  004af	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  004b4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  004b9	48 8d 84 81 00
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax*4+768]
  004c1	4c 8b c0	 mov	 r8, rax
  004c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168450
  004cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  004d0	e8 00 00 00 00	 call	 sscanf
$LN48@cgibin_deb:

; 512  :         }

  004d5	eb 80		 jmp	 SHORT $LN11@cgibin_deb
$LN12@cgibin_deb:
$LN47@cgibin_deb:

; 513  :     }
; 514  : 
; 515  :     html_header(webblk);

  004d7	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  004df	e8 00 00 00 00	 call	 html_header

; 516  : 
; 517  :     hprintf(webblk->sock,"<form method=post>\n"

  004e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168451
  004eb	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  004f3	8b 08		 mov	 ecx, DWORD PTR [rax]
  004f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 518  :                           "<select type=submit name=cpu>\n");
; 519  : 
; 520  :     for(i = 0; i < sysblk.maxcpu; i++)

  004fb	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00503	eb 0a		 jmp	 SHORT $LN16@cgibin_deb
$LN14@cgibin_deb:
  00505	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00509	ff c0		 inc	 eax
  0050b	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN16@cgibin_deb:
  0050f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00516	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0051c	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00520	7d 72		 jge	 SHORT $LN15@cgibin_deb

; 521  :         if(IS_CPU_ONLINE(i))

  00522	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00527	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0052e	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00537	74 56		 je	 SHORT $LN49@cgibin_deb

; 522  :             hprintf(webblk->sock,"<option value=%d%s>CPU%4.4X</option>\n",

  00539	8b 44 24 44	 mov	 eax, DWORD PTR cpu$[rsp]
  0053d	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00541	75 11		 jne	 SHORT $LN62@cgibin_deb
  00543	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168453
  0054a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv267[rsp], rax
  00552	eb 0f		 jmp	 SHORT $LN63@cgibin_deb
$LN62@cgibin_deb:
  00554	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168454
  0055b	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv267[rsp], rax
$LN63@cgibin_deb:
  00563	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00567	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0056b	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR tv267[rsp]
  00573	44 8b 44 24 40	 mov	 r8d, DWORD PTR i$[rsp]
  00578	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168455
  0057f	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00587	8b 08		 mov	 ecx, DWORD PTR [rax]
  00589	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN49@cgibin_deb:
  0058f	e9 71 ff ff ff	 jmp	 $LN14@cgibin_deb
$LN15@cgibin_deb:

; 523  :               i,i==cpu?" selected":"",i);
; 524  : 
; 525  :     hprintf(webblk->sock,"</select>\n"

  00594	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  00599	74 0d		 je	 SHORT $LN64@cgibin_deb
  0059b	c7 84 24 b8 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv274[rsp], 83 ; 00000053H
  005a6	eb 0b		 jmp	 SHORT $LN65@cgibin_deb
$LN64@cgibin_deb:
  005a8	c7 84 24 b8 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv274[rsp], 72 ; 00000048H
$LN65@cgibin_deb:
  005b3	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  005b8	74 0a		 je	 SHORT $LN66@cgibin_deb
  005ba	c7 44 24 68 53
	00 00 00	 mov	 DWORD PTR tv277[rsp], 83 ; 00000053H
  005c2	eb 08		 jmp	 SHORT $LN67@cgibin_deb
$LN66@cgibin_deb:
  005c4	c7 44 24 68 48
	00 00 00	 mov	 DWORD PTR tv277[rsp], 72 ; 00000048H
$LN67@cgibin_deb:
  005cc	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  005d1	74 0a		 je	 SHORT $LN68@cgibin_deb
  005d3	c7 44 24 6c 53
	00 00 00	 mov	 DWORD PTR tv280[rsp], 83 ; 00000053H
  005db	eb 08		 jmp	 SHORT $LN69@cgibin_deb
$LN68@cgibin_deb:
  005dd	c7 44 24 6c 48
	00 00 00	 mov	 DWORD PTR tv280[rsp], 72 ; 00000048H
$LN69@cgibin_deb:
  005e5	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv274[rsp]
  005ec	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  005f0	8b 44 24 68	 mov	 eax, DWORD PTR tv277[rsp]
  005f4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  005f8	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR tv280[rsp]
  005fd	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  00602	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168456
  00609	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00611	8b 08		 mov	 ecx, DWORD PTR [rax]
  00613	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 526  :                           "<input type=submit name=selcpu value=\"Select\">\n"
; 527  :                           "<input type=hidden name=cpu value=%d>\n"
; 528  :                           "<input type=hidden name=select_gr value=%c>\n"
; 529  :                           "<input type=hidden name=select_cr value=%c>\n"
; 530  :                           "<input type=hidden name=select_ar value=%c>\n",
; 531  :                           cpu, select_gr?'S':'H',select_cr?'S':'H',select_ar?'S':'H');
; 532  :     hprintf( webblk->sock, "Mode: %s\n", get_arch_name( regs ));

  00619	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  0061e	e8 00 00 00 00	 call	 get_arch_name
  00623	4c 8b c0	 mov	 r8, rax
  00626	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168457
  0062d	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00635	8b 08		 mov	 ecx, DWORD PTR [rax]
  00637	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 533  :     hprintf(webblk->sock,"</form>\n");

  0063d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168458
  00644	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0064c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0064e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 534  : 
; 535  :     if(!select_gr)

  00654	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  00659	75 60		 jne	 SHORT $LN50@cgibin_deb

; 536  :     {
; 537  :         hprintf(webblk->sock,"<form method=post>\n"

  0065b	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  00660	74 0a		 je	 SHORT $LN70@cgibin_deb
  00662	c7 44 24 70 53
	00 00 00	 mov	 DWORD PTR tv297[rsp], 83 ; 00000053H
  0066a	eb 08		 jmp	 SHORT $LN71@cgibin_deb
$LN70@cgibin_deb:
  0066c	c7 44 24 70 48
	00 00 00	 mov	 DWORD PTR tv297[rsp], 72 ; 00000048H
$LN71@cgibin_deb:
  00674	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  00679	74 0a		 je	 SHORT $LN72@cgibin_deb
  0067b	c7 44 24 74 53
	00 00 00	 mov	 DWORD PTR tv300[rsp], 83 ; 00000053H
  00683	eb 08		 jmp	 SHORT $LN73@cgibin_deb
$LN72@cgibin_deb:
  00685	c7 44 24 74 48
	00 00 00	 mov	 DWORD PTR tv300[rsp], 72 ; 00000048H
$LN73@cgibin_deb:
  0068d	8b 44 24 70	 mov	 eax, DWORD PTR tv297[rsp]
  00691	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00695	44 8b 4c 24 74	 mov	 r9d, DWORD PTR tv300[rsp]
  0069a	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  0069f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168461
  006a6	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  006ae	8b 08		 mov	 ecx, DWORD PTR [rax]
  006b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 538  :                               "<input type=submit name=select_gr "
; 539  :                               "value=\"Select General Registers\">\n"
; 540  :                               "<input type=hidden name=cpu value=%d>\n"
; 541  :                               "<input type=hidden name=select_cr value=%c>\n"
; 542  :                               "<input type=hidden name=select_ar value=%c>\n"
; 543  :                               "</form>\n",cpu,select_cr?'S':'H',select_ar?'S':'H');
; 544  :     }

  006b6	e9 63 02 00 00	 jmp	 $LN51@cgibin_deb
$LN50@cgibin_deb:

; 545  :     else
; 546  :     {
; 547  :         hprintf(webblk->sock,"<form method=post>\n"

  006bb	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  006c0	74 0a		 je	 SHORT $LN74@cgibin_deb
  006c2	c7 44 24 78 53
	00 00 00	 mov	 DWORD PTR tv307[rsp], 83 ; 00000053H
  006ca	eb 08		 jmp	 SHORT $LN75@cgibin_deb
$LN74@cgibin_deb:
  006cc	c7 44 24 78 48
	00 00 00	 mov	 DWORD PTR tv307[rsp], 72 ; 00000048H
$LN75@cgibin_deb:
  006d4	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  006d9	74 0a		 je	 SHORT $LN76@cgibin_deb
  006db	c7 44 24 7c 53
	00 00 00	 mov	 DWORD PTR tv310[rsp], 83 ; 00000053H
  006e3	eb 08		 jmp	 SHORT $LN77@cgibin_deb
$LN76@cgibin_deb:
  006e5	c7 44 24 7c 48
	00 00 00	 mov	 DWORD PTR tv310[rsp], 72 ; 00000048H
$LN77@cgibin_deb:
  006ed	8b 44 24 78	 mov	 eax, DWORD PTR tv307[rsp]
  006f1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  006f5	44 8b 4c 24 7c	 mov	 r9d, DWORD PTR tv310[rsp]
  006fa	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  006ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168462
  00706	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0070e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00710	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 548  :                               "<input type=submit name=select_gr "
; 549  :                               "value=\"Hide General Registers\">\n"
; 550  :                               "<input type=hidden name=cpu value=%d>\n"
; 551  :                               "<input type=hidden name=select_cr value=%c>\n"
; 552  :                               "<input type=hidden name=select_ar value=%c>\n"
; 553  :                               "</form>\n",cpu,select_cr?'S':'H',select_ar?'S':'H');
; 554  : 
; 555  :         hprintf(webblk->sock,"<form method=post>\n"

  00716	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168463
  0071d	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00725	8b 08		 mov	 ecx, DWORD PTR [rax]
  00727	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 556  :                               "<table>\n");
; 557  :         for(i = 0; i < 16; i++)

  0072d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00735	eb 0a		 jmp	 SHORT $LN19@cgibin_deb
$LN17@cgibin_deb:
  00737	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0073b	ff c0		 inc	 eax
  0073d	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN19@cgibin_deb:
  00741	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  00746	0f 8d 65 01 00
	00		 jge	 $LN18@cgibin_deb

; 558  :         {
; 559  :             if(regs->arch_mode != ARCH_900_IDX)

  0074c	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00751	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  00755	0f 84 aa 00 00
	00		 je	 $LN52@cgibin_deb

; 560  :                 hprintf(webblk->sock,"%s<td>GR%d</td><td><input type=text name=alter_gr%d size=8 "

  0075b	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0075f	83 e0 03	 and	 eax, 3
  00762	83 f8 03	 cmp	 eax, 3
  00765	75 11		 jne	 SHORT $LN78@cgibin_deb
  00767	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168466
  0076e	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv325[rsp], rax
  00776	eb 0f		 jmp	 SHORT $LN79@cgibin_deb
$LN78@cgibin_deb:
  00778	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168467
  0077f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv325[rsp], rax
$LN79@cgibin_deb:
  00787	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0078b	83 e0 03	 and	 eax, 3
  0078e	85 c0		 test	 eax, eax
  00790	75 11		 jne	 SHORT $LN80@cgibin_deb
  00792	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168468
  00799	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv337[rsp], rax
  007a1	eb 0f		 jmp	 SHORT $LN81@cgibin_deb
$LN80@cgibin_deb:
  007a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168469
  007aa	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv337[rsp], rax
$LN81@cgibin_deb:
  007b2	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  007b7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv325[rsp]
  007bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  007c9	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  007d0	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  007d4	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  007d8	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  007dc	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  007e1	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR tv337[rsp]
  007e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168470
  007f0	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  007f8	8b 08		 mov	 ecx, DWORD PTR [rax]
  007fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  00800	e9 a7 00 00 00	 jmp	 $LN53@cgibin_deb
$LN52@cgibin_deb:

; 561  :                   "value=%8.8X></td>\n%s",
; 562  :                   (i&3)==0?"<tr>\n":"",i,i,regs->GR_L(i),((i&3)==3)?"</tr>\n":"");
; 563  :             else
; 564  :                 hprintf(webblk->sock,"%s<td>GR%d</td><td><input type=text name=alter_gr%d size=16 "

  00805	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00809	83 e0 03	 and	 eax, 3
  0080c	83 f8 03	 cmp	 eax, 3
  0080f	75 11		 jne	 SHORT $LN82@cgibin_deb
  00811	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168471
  00818	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv344[rsp], rax
  00820	eb 0f		 jmp	 SHORT $LN83@cgibin_deb
$LN82@cgibin_deb:
  00822	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168472
  00829	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv344[rsp], rax
$LN83@cgibin_deb:
  00831	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00835	83 e0 03	 and	 eax, 3
  00838	85 c0		 test	 eax, eax
  0083a	75 11		 jne	 SHORT $LN84@cgibin_deb
  0083c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168473
  00843	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv388[rsp], rax
  0084b	eb 0f		 jmp	 SHORT $LN85@cgibin_deb
$LN84@cgibin_deb:
  0084d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168474
  00854	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv388[rsp], rax
$LN85@cgibin_deb:
  0085c	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00861	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv344[rsp]
  00869	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0086e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00873	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  0087b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00880	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00884	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00888	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  0088d	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR tv388[rsp]
  00895	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168475
  0089c	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  008a4	8b 08		 mov	 ecx, DWORD PTR [rax]
  008a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN53@cgibin_deb:

; 565  :                   "value=%16.16"PRIX64"></td>\n%s",
; 566  :                   (i&3)==0?"<tr>\n":"",i,i,(U64)regs->GR_G(i),((i&3)==3)?"</tr>\n":"");
; 567  :         }

  008ac	e9 86 fe ff ff	 jmp	 $LN17@cgibin_deb
$LN18@cgibin_deb:

; 568  :         hprintf(webblk->sock,"</table>\n"

  008b1	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  008b6	74 0d		 je	 SHORT $LN86@cgibin_deb
  008b8	c7 84 24 80 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv394[rsp], 83 ; 00000053H
  008c3	eb 0b		 jmp	 SHORT $LN87@cgibin_deb
$LN86@cgibin_deb:
  008c5	c7 84 24 80 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv394[rsp], 72 ; 00000048H
$LN87@cgibin_deb:
  008d0	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  008d5	74 0d		 je	 SHORT $LN88@cgibin_deb
  008d7	c7 84 24 84 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv397[rsp], 83 ; 00000053H
  008e2	eb 0b		 jmp	 SHORT $LN89@cgibin_deb
$LN88@cgibin_deb:
  008e4	c7 84 24 84 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv397[rsp], 72 ; 00000048H
$LN89@cgibin_deb:
  008ef	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv394[rsp]
  008f6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  008fa	44 8b 8c 24 84
	00 00 00	 mov	 r9d, DWORD PTR tv397[rsp]
  00902	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  00907	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168476
  0090e	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00916	8b 08		 mov	 ecx, DWORD PTR [rax]
  00918	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN51@cgibin_deb:

; 569  :                               "<input type=submit name=refresh value=\"Refresh\">\n"
; 570  :                               "<input type=submit name=alter_gr value=\"Alter\">\n"
; 571  :                               "<input type=hidden name=cpu value=%d>\n"
; 572  :                               "<input type=hidden name=select_gr value=S>\n"
; 573  :                               "<input type=hidden name=select_cr value=%c>\n"
; 574  :                               "<input type=hidden name=select_ar value=%c>\n"
; 575  :                               "</form>\n",cpu,select_cr?'S':'H',select_ar?'S':'H');
; 576  :     }
; 577  : 
; 578  : 
; 579  :     if(!select_cr)

  0091e	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  00923	75 72		 jne	 SHORT $LN54@cgibin_deb

; 580  :     {
; 581  :         hprintf(webblk->sock,"<form method=post>\n"

  00925	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  0092a	74 0d		 je	 SHORT $LN90@cgibin_deb
  0092c	c7 84 24 88 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv405[rsp], 83 ; 00000053H
  00937	eb 0b		 jmp	 SHORT $LN91@cgibin_deb
$LN90@cgibin_deb:
  00939	c7 84 24 88 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv405[rsp], 72 ; 00000048H
$LN91@cgibin_deb:
  00944	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  00949	74 0d		 je	 SHORT $LN92@cgibin_deb
  0094b	c7 84 24 8c 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv408[rsp], 83 ; 00000053H
  00956	eb 0b		 jmp	 SHORT $LN93@cgibin_deb
$LN92@cgibin_deb:
  00958	c7 84 24 8c 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv408[rsp], 72 ; 00000048H
$LN93@cgibin_deb:
  00963	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv405[rsp]
  0096a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0096e	44 8b 8c 24 8c
	00 00 00	 mov	 r9d, DWORD PTR tv408[rsp]
  00976	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  0097b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168479
  00982	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0098a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0098c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 582  :                               "<input type=submit name=select_cr "
; 583  :                               "value=\"Select Control Registers\">\n"
; 584  :                               "<input type=hidden name=cpu value=%d>\n"
; 585  :                               "<input type=hidden name=select_gr value=%c>\n"
; 586  :                               "<input type=hidden name=select_ar value=%c>\n"
; 587  :                               "</form>\n",cpu,select_gr?'S':'H',select_ar?'S':'H');
; 588  :     }

  00992	e9 7b 02 00 00	 jmp	 $LN55@cgibin_deb
$LN54@cgibin_deb:

; 589  :     else
; 590  :     {
; 591  :         hprintf(webblk->sock,"<form method=post>\n"

  00997	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  0099c	74 0d		 je	 SHORT $LN94@cgibin_deb
  0099e	c7 84 24 a0 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv415[rsp], 83 ; 00000053H
  009a9	eb 0b		 jmp	 SHORT $LN95@cgibin_deb
$LN94@cgibin_deb:
  009ab	c7 84 24 a0 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv415[rsp], 72 ; 00000048H
$LN95@cgibin_deb:
  009b6	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  009bb	74 0d		 je	 SHORT $LN96@cgibin_deb
  009bd	c7 84 24 90 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv418[rsp], 83 ; 00000053H
  009c8	eb 0b		 jmp	 SHORT $LN97@cgibin_deb
$LN96@cgibin_deb:
  009ca	c7 84 24 90 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv418[rsp], 72 ; 00000048H
$LN97@cgibin_deb:
  009d5	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv415[rsp]
  009dc	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  009e0	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR tv418[rsp]
  009e8	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  009ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168480
  009f4	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  009fc	8b 08		 mov	 ecx, DWORD PTR [rax]
  009fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 592  :                               "<input type=submit name=select_cr "
; 593  :                               "value=\"Hide Control Registers\">\n"
; 594  :                               "<input type=hidden name=cpu value=%d>\n"
; 595  :                               "<input type=hidden name=select_gr value=%c>\n"
; 596  :                               "<input type=hidden name=select_ar value=%c>\n"
; 597  :                               "</form>\n",cpu,select_gr?'S':'H',select_ar?'S':'H');
; 598  : 
; 599  :         hprintf(webblk->sock,"<form method=post>\n"

  00a04	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168481
  00a0b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00a13	8b 08		 mov	 ecx, DWORD PTR [rax]
  00a15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 600  :                               "<table>\n");
; 601  :         for(i = 0; i < 16; i++)

  00a1b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00a23	eb 0a		 jmp	 SHORT $LN22@cgibin_deb
$LN20@cgibin_deb:
  00a25	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00a29	ff c0		 inc	 eax
  00a2b	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN22@cgibin_deb:
  00a2f	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  00a34	0f 8d 6b 01 00
	00		 jge	 $LN21@cgibin_deb

; 602  :         {
; 603  :             if(regs->arch_mode != ARCH_900_IDX)

  00a3a	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00a3f	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  00a43	0f 84 ad 00 00
	00		 je	 $LN56@cgibin_deb

; 604  :                 hprintf(webblk->sock,"%s<td>CR%d</td><td><input type=text name=alter_cr%d size=8 "

  00a49	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00a4d	83 e0 03	 and	 eax, 3
  00a50	83 f8 03	 cmp	 eax, 3
  00a53	75 11		 jne	 SHORT $LN98@cgibin_deb
  00a55	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168484
  00a5c	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv433[rsp], rax
  00a64	eb 0f		 jmp	 SHORT $LN99@cgibin_deb
$LN98@cgibin_deb:
  00a66	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168485
  00a6d	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv433[rsp], rax
$LN99@cgibin_deb:
  00a75	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00a79	83 e0 03	 and	 eax, 3
  00a7c	85 c0		 test	 eax, eax
  00a7e	75 11		 jne	 SHORT $LN100@cgibin_deb
  00a80	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168486
  00a87	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv446[rsp], rax
  00a8f	eb 0f		 jmp	 SHORT $LN101@cgibin_deb
$LN100@cgibin_deb:
  00a91	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168487
  00a98	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv446[rsp], rax
$LN101@cgibin_deb:
  00aa0	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00aa4	ff c0		 inc	 eax
  00aa6	48 98		 cdqe
  00aa8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv433[rsp]
  00ab0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ab5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00aba	8b 84 c1 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+1536]
  00ac1	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00ac5	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00ac9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00acd	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  00ad2	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR tv446[rsp]
  00ada	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168488
  00ae1	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00ae9	8b 08		 mov	 ecx, DWORD PTR [rax]
  00aeb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  00af1	e9 aa 00 00 00	 jmp	 $LN57@cgibin_deb
$LN56@cgibin_deb:

; 605  :                   "value=%8.8X></td>\n%s",
; 606  :                   (i&3)==0?"<tr>\n":"",i,i,regs->CR_L(i),((i&3)==3)?"</tr>\n":"");
; 607  :             else
; 608  :                 hprintf(webblk->sock,"%s<td>CR%d</td><td><input type=text name=alter_cr%d size=16 "

  00af6	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00afa	83 e0 03	 and	 eax, 3
  00afd	83 f8 03	 cmp	 eax, 3
  00b00	75 11		 jne	 SHORT $LN102@cgibin_deb
  00b02	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168489
  00b09	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv453[rsp], rax
  00b11	eb 0f		 jmp	 SHORT $LN103@cgibin_deb
$LN102@cgibin_deb:
  00b13	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168490
  00b1a	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv453[rsp], rax
$LN103@cgibin_deb:
  00b22	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00b26	83 e0 03	 and	 eax, 3
  00b29	85 c0		 test	 eax, eax
  00b2b	75 11		 jne	 SHORT $LN104@cgibin_deb
  00b2d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168491
  00b34	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv466[rsp], rax
  00b3c	eb 0f		 jmp	 SHORT $LN105@cgibin_deb
$LN104@cgibin_deb:
  00b3e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168492
  00b45	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv466[rsp], rax
$LN105@cgibin_deb:
  00b4d	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00b51	ff c0		 inc	 eax
  00b53	48 98		 cdqe
  00b55	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv453[rsp]
  00b5d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b62	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00b67	48 8b 84 c1 00
	06 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+1536]
  00b6f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00b74	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00b78	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00b7c	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  00b81	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR tv466[rsp]
  00b89	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168493
  00b90	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00b98	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b9a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN57@cgibin_deb:

; 609  :                   "value=%16.16"PRIX64"></td>\n%s",
; 610  :                   (i&3)==0?"<tr>\n":"",i,i,(U64)regs->CR_G(i),((i&3)==3)?"</tr>\n":"");
; 611  :         }

  00ba0	e9 80 fe ff ff	 jmp	 $LN20@cgibin_deb
$LN21@cgibin_deb:

; 612  :         hprintf(webblk->sock,"</table>\n"

  00ba5	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  00baa	74 0d		 je	 SHORT $LN106@cgibin_deb
  00bac	c7 84 24 94 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv472[rsp], 83 ; 00000053H
  00bb7	eb 0b		 jmp	 SHORT $LN107@cgibin_deb
$LN106@cgibin_deb:
  00bb9	c7 84 24 94 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv472[rsp], 72 ; 00000048H
$LN107@cgibin_deb:
  00bc4	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  00bc9	74 0d		 je	 SHORT $LN108@cgibin_deb
  00bcb	c7 84 24 98 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv475[rsp], 83 ; 00000053H
  00bd6	eb 0b		 jmp	 SHORT $LN109@cgibin_deb
$LN108@cgibin_deb:
  00bd8	c7 84 24 98 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv475[rsp], 72 ; 00000048H
$LN109@cgibin_deb:
  00be3	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv472[rsp]
  00bea	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00bee	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR tv475[rsp]
  00bf6	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  00bfb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168494
  00c02	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00c0a	8b 08		 mov	 ecx, DWORD PTR [rax]
  00c0c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN55@cgibin_deb:

; 613  :                               "<input type=submit name=refresh value=\"Refresh\">\n"
; 614  :                               "<input type=submit name=alter_cr value=\"Alter\">\n"
; 615  :                               "<input type=hidden name=cpu value=%d>\n"
; 616  :                               "<input type=hidden name=select_cr value=S>\n"
; 617  :                               "<input type=hidden name=select_gr value=%c>\n"
; 618  :                               "<input type=hidden name=select_ar value=%c>\n"
; 619  :                               "</form>\n",cpu,select_gr?'S':'H',select_ar?'S':'H');
; 620  :     }
; 621  : 
; 622  : 
; 623  :     if(regs->arch_mode != ARCH_370_IDX)

  00c12	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00c17	83 78 64 00	 cmp	 DWORD PTR [rax+100], 0
  00c1b	0f 84 33 02 00
	00		 je	 $LN58@cgibin_deb

; 624  :     {
; 625  :         if(!select_ar)

  00c21	83 7c 24 50 00	 cmp	 DWORD PTR select_ar$[rsp], 0
  00c26	75 72		 jne	 SHORT $LN59@cgibin_deb

; 626  :         {
; 627  :             hprintf(webblk->sock,"<form method=post>\n"

  00c28	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  00c2d	74 0d		 je	 SHORT $LN110@cgibin_deb
  00c2f	c7 84 24 9c 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv485[rsp], 83 ; 00000053H
  00c3a	eb 0b		 jmp	 SHORT $LN111@cgibin_deb
$LN110@cgibin_deb:
  00c3c	c7 84 24 9c 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv485[rsp], 72 ; 00000048H
$LN111@cgibin_deb:
  00c47	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  00c4c	74 0d		 je	 SHORT $LN112@cgibin_deb
  00c4e	c7 84 24 b4 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv488[rsp], 83 ; 00000053H
  00c59	eb 0b		 jmp	 SHORT $LN113@cgibin_deb
$LN112@cgibin_deb:
  00c5b	c7 84 24 b4 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv488[rsp], 72 ; 00000048H
$LN113@cgibin_deb:
  00c66	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv485[rsp]
  00c6d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00c71	44 8b 8c 24 b4
	00 00 00	 mov	 r9d, DWORD PTR tv488[rsp]
  00c79	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  00c7e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168498
  00c85	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00c8d	8b 08		 mov	 ecx, DWORD PTR [rax]
  00c8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 628  :                                   "<input type=submit name=select_ar "
; 629  :                                   "value=\"Select Access Registers\">\n"
; 630  :                                   "<input type=hidden name=cpu value=%d>\n"
; 631  :                                   "<input type=hidden name=select_gr value=%c>\n"
; 632  :                                   "<input type=hidden name=select_cr value=%c>\n"
; 633  :                                   "</form>\n",cpu,select_gr?'S':'H',select_cr?'S':'H');
; 634  :         }

  00c95	e9 ba 01 00 00	 jmp	 $LN60@cgibin_deb
$LN59@cgibin_deb:

; 635  :         else
; 636  :         {
; 637  :             hprintf(webblk->sock,"<form method=post>\n"

  00c9a	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  00c9f	74 0d		 je	 SHORT $LN114@cgibin_deb
  00ca1	c7 84 24 a4 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv495[rsp], 83 ; 00000053H
  00cac	eb 0b		 jmp	 SHORT $LN115@cgibin_deb
$LN114@cgibin_deb:
  00cae	c7 84 24 a4 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv495[rsp], 72 ; 00000048H
$LN115@cgibin_deb:
  00cb9	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  00cbe	74 0d		 je	 SHORT $LN116@cgibin_deb
  00cc0	c7 84 24 a8 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv498[rsp], 83 ; 00000053H
  00ccb	eb 0b		 jmp	 SHORT $LN117@cgibin_deb
$LN116@cgibin_deb:
  00ccd	c7 84 24 a8 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv498[rsp], 72 ; 00000048H
$LN117@cgibin_deb:
  00cd8	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv495[rsp]
  00cdf	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00ce3	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR tv498[rsp]
  00ceb	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  00cf0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168499
  00cf7	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00cff	8b 08		 mov	 ecx, DWORD PTR [rax]
  00d01	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 638  :                                   "<input type=submit name=select_ar "
; 639  :                                   "value=\"Hide Access Registers\">\n"
; 640  :                                   "<input type=hidden name=cpu value=%d>\n"
; 641  :                                   "<input type=hidden name=select_gr value=%c>\n"
; 642  :                                   "<input type=hidden name=select_cr value=%c>\n"
; 643  :                                   "</form>\n",cpu,select_gr?'S':'H',select_cr?'S':'H');
; 644  : 
; 645  :             hprintf(webblk->sock,"<form method=post>\n"

  00d07	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168500
  00d0e	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00d16	8b 08		 mov	 ecx, DWORD PTR [rax]
  00d18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 646  :                                   "<table>\n");
; 647  :             for(i = 0; i < 16; i++)

  00d1e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00d26	eb 0a		 jmp	 SHORT $LN25@cgibin_deb
$LN23@cgibin_deb:
  00d28	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00d2c	ff c0		 inc	 eax
  00d2e	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN25@cgibin_deb:
  00d32	83 7c 24 40 10	 cmp	 DWORD PTR i$[rsp], 16
  00d37	0f 8d aa 00 00
	00		 jge	 $LN24@cgibin_deb

; 648  :             {
; 649  :                 hprintf(webblk->sock,"%s<td>AR%d</td><td><input type=text name=alter_ar%d size=8 "

  00d3d	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00d41	83 e0 03	 and	 eax, 3
  00d44	83 f8 03	 cmp	 eax, 3
  00d47	75 11		 jne	 SHORT $LN118@cgibin_deb
  00d49	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168501
  00d50	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv511[rsp], rax
  00d58	eb 0f		 jmp	 SHORT $LN119@cgibin_deb
$LN118@cgibin_deb:
  00d5a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168502
  00d61	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv511[rsp], rax
$LN119@cgibin_deb:
  00d69	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00d6d	83 e0 03	 and	 eax, 3
  00d70	85 c0		 test	 eax, eax
  00d72	75 11		 jne	 SHORT $LN120@cgibin_deb
  00d74	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168503
  00d7b	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv522[rsp], rax
  00d83	eb 0f		 jmp	 SHORT $LN121@cgibin_deb
$LN120@cgibin_deb:
  00d85	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168504
  00d8c	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv522[rsp], rax
$LN121@cgibin_deb:
  00d94	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00d99	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv511[rsp]
  00da1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00da6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00dab	8b 84 81 00 03
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+768]
  00db2	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00db6	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00dba	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00dbe	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  00dc3	4c 8b 84 24 10
	01 00 00	 mov	 r8, QWORD PTR tv522[rsp]
  00dcb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168505
  00dd2	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00dda	8b 08		 mov	 ecx, DWORD PTR [rax]
  00ddc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 650  :                   "value=%8.8X></td>\n%s",
; 651  :                   (i&3)==0?"<tr>\n":"",i,i,regs->AR(i),((i&3)==3)?"</tr>\n":"");
; 652  :             }

  00de2	e9 41 ff ff ff	 jmp	 $LN23@cgibin_deb
$LN24@cgibin_deb:

; 653  :             hprintf(webblk->sock,"</table>\n"

  00de7	83 7c 24 54 00	 cmp	 DWORD PTR select_cr$[rsp], 0
  00dec	74 0d		 je	 SHORT $LN122@cgibin_deb
  00dee	c7 84 24 ac 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv528[rsp], 83 ; 00000053H
  00df9	eb 0b		 jmp	 SHORT $LN123@cgibin_deb
$LN122@cgibin_deb:
  00dfb	c7 84 24 ac 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv528[rsp], 72 ; 00000048H
$LN123@cgibin_deb:
  00e06	83 7c 24 58 00	 cmp	 DWORD PTR select_gr$[rsp], 0
  00e0b	74 0d		 je	 SHORT $LN124@cgibin_deb
  00e0d	c7 84 24 b0 00
	00 00 53 00 00
	00		 mov	 DWORD PTR tv531[rsp], 83 ; 00000053H
  00e18	eb 0b		 jmp	 SHORT $LN125@cgibin_deb
$LN124@cgibin_deb:
  00e1a	c7 84 24 b0 00
	00 00 48 00 00
	00		 mov	 DWORD PTR tv531[rsp], 72 ; 00000048H
$LN125@cgibin_deb:
  00e25	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv528[rsp]
  00e2c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00e30	44 8b 8c 24 b0
	00 00 00	 mov	 r9d, DWORD PTR tv531[rsp]
  00e38	44 8b 44 24 44	 mov	 r8d, DWORD PTR cpu$[rsp]
  00e3d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168506
  00e44	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00e4c	8b 08		 mov	 ecx, DWORD PTR [rax]
  00e4e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN60@cgibin_deb:
$LN58@cgibin_deb:

; 654  :                                   "<input type=submit name=refresh value=\"Refresh\">\n"
; 655  :                                   "<input type=submit name=alter_ar value=\"Alter\">\n"
; 656  :                                   "<input type=hidden name=cpu value=%d>\n"
; 657  :                                   "<input type=hidden name=select_gr value=%c>\n"
; 658  :                                   "<input type=hidden name=select_cr value=%c>\n"
; 659  :                                   "<input type=hidden name=select_ar value=S>\n"
; 660  :                                   "</form>\n",cpu,select_gr?'S':'H',select_cr?'S':'H');
; 661  :         }
; 662  :     }
; 663  : 
; 664  :     html_footer(webblk);

  00e54	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00e5c	e8 00 00 00 00	 call	 html_footer

; 665  : 
; 666  : }

  00e61	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00e69	48 33 cc	 xor	 rcx, rsp
  00e6c	e8 00 00 00 00	 call	 __security_check_cookie
  00e71	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00e78	c3		 ret	 0
cgibin_debug_registers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
msgcount$ = 48
refresh_interval$ = 52
autorefresh$ = 56
num_bytes$ = 60
value$ = 64
wrk_bufptr$1 = 72
tv174 = 80
tv153 = 84
logbuf_idx$ = 88
tv172 = 92
sav_wrk$2 = 96
command$ = 104
logbuf_ptr$ = 112
tv213 = 120
tv278 = 128
webblk$ = 160
cgibin_syslog PROC

; 268  : {

$LN34:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 269  : int     num_bytes;
; 270  : int     logbuf_idx;
; 271  : char   *logbuf_ptr;
; 272  : char   *command;
; 273  : char   *value;
; 274  : int     autorefresh = 0;

  0000c	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR autorefresh$[rsp], 0

; 275  : int     refresh_interval = 5;

  00014	c7 44 24 34 05
	00 00 00	 mov	 DWORD PTR refresh_interval$[rsp], 5

; 276  : int     msgcount = 22;

  0001c	c7 44 24 30 16
	00 00 00	 mov	 DWORD PTR msgcount$[rsp], 22

; 277  : 
; 278  :     if ((command = cgi_variable(webblk,"command")))

  00024	41 b8 03 00 00
	00		 mov	 r8d, 3
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168305
  00031	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00039	e8 00 00 00 00	 call	 http_variable
  0003e	48 89 44 24 68	 mov	 QWORD PTR command$[rsp], rax
  00043	48 83 7c 24 68
	00		 cmp	 QWORD PTR command$[rsp], 0
  00049	74 19		 je	 SHORT $LN6@cgibin_sys

; 279  :     {
; 280  :         panel_command(command);

  0004b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR command$[rsp]
  00050	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_panel_command
  00057	ff 10		 call	 QWORD PTR [rax]

; 281  :         // Wait a bit before proceeding in case
; 282  :         // the command issues a lot of messages
; 283  :         usleep(50000);

  00059	b9 50 c3 00 00	 mov	 ecx, 50000		; 0000c350H
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep
$LN6@cgibin_sys:

; 284  :     }
; 285  : 
; 286  :     if((value = cgi_variable(webblk,"msgcount")))

  00064	41 b8 03 00 00
	00		 mov	 r8d, 3
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168308
  00071	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00079	e8 00 00 00 00	 call	 http_variable
  0007e	48 89 44 24 40	 mov	 QWORD PTR value$[rsp], rax
  00083	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  00089	74 11		 je	 SHORT $LN7@cgibin_sys

; 287  :         msgcount = atoi(value);

  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00096	89 44 24 30	 mov	 DWORD PTR msgcount$[rsp], eax
  0009a	eb 36		 jmp	 SHORT $LN8@cgibin_sys
$LN7@cgibin_sys:

; 288  :     else
; 289  :         if((value = cgi_cookie(webblk,"msgcount")))

  0009c	41 b8 08 00 00
	00		 mov	 r8d, 8
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168310
  000a9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000b1	e8 00 00 00 00	 call	 http_variable
  000b6	48 89 44 24 40	 mov	 QWORD PTR value$[rsp], rax
  000bb	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  000c1	74 0f		 je	 SHORT $LN9@cgibin_sys

; 290  :             msgcount = atoi(value);

  000c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000ce	89 44 24 30	 mov	 DWORD PTR msgcount$[rsp], eax
$LN9@cgibin_sys:
$LN8@cgibin_sys:

; 291  : 
; 292  :     if ((value = cgi_variable(webblk,"refresh_interval")))

  000d2	41 b8 03 00 00
	00		 mov	 r8d, 3
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168312
  000df	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000e7	e8 00 00 00 00	 call	 http_variable
  000ec	48 89 44 24 40	 mov	 QWORD PTR value$[rsp], rax
  000f1	48 83 7c 24 40
	00		 cmp	 QWORD PTR value$[rsp], 0
  000f7	74 0f		 je	 SHORT $LN10@cgibin_sys

; 293  :         refresh_interval = atoi(value);

  000f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR value$[rsp]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00104	89 44 24 34	 mov	 DWORD PTR refresh_interval$[rsp], eax
$LN10@cgibin_sys:

; 294  : 
; 295  :     if (cgi_variable(webblk,"autorefresh"))

  00108	41 b8 03 00 00
	00		 mov	 r8d, 3
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168315
  00115	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0011d	e8 00 00 00 00	 call	 http_variable
  00122	48 85 c0	 test	 rax, rax
  00125	74 0a		 je	 SHORT $LN11@cgibin_sys

; 296  :         autorefresh = 1;

  00127	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR autorefresh$[rsp], 1
  0012f	eb 50		 jmp	 SHORT $LN12@cgibin_sys
$LN11@cgibin_sys:

; 297  :     else if (cgi_variable(webblk,"norefresh"))

  00131	41 b8 03 00 00
	00		 mov	 r8d, 3
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168318
  0013e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00146	e8 00 00 00 00	 call	 http_variable
  0014b	48 85 c0	 test	 rax, rax
  0014e	74 0a		 je	 SHORT $LN13@cgibin_sys

; 298  :         autorefresh = 0;

  00150	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR autorefresh$[rsp], 0
  00158	eb 27		 jmp	 SHORT $LN14@cgibin_sys
$LN13@cgibin_sys:

; 299  :     else if (cgi_variable(webblk,"refresh"))

  0015a	41 b8 03 00 00
	00		 mov	 r8d, 3
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168320
  00167	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0016f	e8 00 00 00 00	 call	 http_variable
  00174	48 85 c0	 test	 rax, rax
  00177	74 08		 je	 SHORT $LN15@cgibin_sys

; 300  :         autorefresh = 1;

  00179	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR autorefresh$[rsp], 1
$LN15@cgibin_sys:
$LN14@cgibin_sys:
$LN12@cgibin_sys:

; 301  : 
; 302  :     html_header(webblk);

  00181	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00189	e8 00 00 00 00	 call	 html_header

; 303  : 
; 304  :     hprintf(webblk->sock,"<script language=\"JavaScript\">\n"

  0018e	44 8b 44 24 30	 mov	 r8d, DWORD PTR msgcount$[rsp]
  00193	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168321
  0019a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001a2	8b 08		 mov	 ecx, DWORD PTR [rax]
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 305  :                           "<!--\n"
; 306  :                           "document.cookie = \"msgcount=%d\";\n"
; 307  :                           "//-->\n"
; 308  :                           "</script>\n",
; 309  :                           msgcount);
; 310  : 
; 311  :     hprintf(webblk->sock, "<H2>Hercules System Log</H2>\n");

  001aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168322
  001b1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001b9	8b 08		 mov	 ecx, DWORD PTR [rax]
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 312  :     hprintf(webblk->sock, "<PRE>\n");

  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168323
  001c8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001d0	8b 08		 mov	 ecx, DWORD PTR [rax]
  001d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 313  : 
; 314  :     // Get the index to our desired starting message...
; 315  : 
; 316  :     logbuf_idx = msgcount ? log_line( msgcount ) : -1;

  001d8	83 7c 24 30 00	 cmp	 DWORD PTR msgcount$[rsp], 0
  001dd	74 10		 je	 SHORT $LN28@cgibin_sys
  001df	8b 4c 24 30	 mov	 ecx, DWORD PTR msgcount$[rsp]
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_log_line
  001e9	89 44 24 54	 mov	 DWORD PTR tv153[rsp], eax
  001ed	eb 08		 jmp	 SHORT $LN29@cgibin_sys
$LN28@cgibin_sys:
  001ef	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR tv153[rsp], -1
$LN29@cgibin_sys:
  001f7	8b 44 24 54	 mov	 eax, DWORD PTR tv153[rsp]
  001fb	89 44 24 58	 mov	 DWORD PTR logbuf_idx$[rsp], eax

; 317  : 
; 318  :     // Now read the logfile starting at that index. The return
; 319  :     // value is the total #of bytes of messages data there is.
; 320  : 
; 321  :     if ((num_bytes = log_read( &logbuf_ptr, &logbuf_idx, LOG_NOBLOCK )) > 0)

  001ff	45 33 c0	 xor	 r8d, r8d
  00202	48 8d 54 24 58	 lea	 rdx, QWORD PTR logbuf_idx$[rsp]
  00207	48 8d 4c 24 70	 lea	 rcx, QWORD PTR logbuf_ptr$[rsp]
  0020c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_log_read
  00212	89 44 24 3c	 mov	 DWORD PTR num_bytes$[rsp], eax
  00216	83 7c 24 3c 00	 cmp	 DWORD PTR num_bytes$[rsp], 0
  0021b	0f 8e 2f 01 00
	00		 jle	 $LN16@cgibin_sys

; 322  :     {
; 323  :         // Copy the message data to a work buffer for processing.
; 324  :         // This is to allow for the possibility, however remote,
; 325  :         // that the logfile buffer actually wraps around and over-
; 326  :         // lays the message data we were going to display (which
; 327  :         // could happen if there's a sudden flood of messages)
; 328  : 
; 329  :         char   *wrk_bufptr      = malloc( num_bytes );

  00221	48 63 44 24 3c	 movsxd	 rax, DWORD PTR num_bytes$[rsp]
  00226	48 8b c8	 mov	 rcx, rax
  00229	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0022f	48 89 44 24 48	 mov	 QWORD PTR wrk_bufptr$1[rsp], rax

; 330  :         char   *sav_wrk         = NULL;

  00234	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR sav_wrk$2[rsp], 0

; 331  : 
; 332  :         if (wrk_bufptr)

  0023d	48 83 7c 24 48
	00		 cmp	 QWORD PTR wrk_bufptr$1[rsp], 0
  00243	74 24		 je	 SHORT $LN17@cgibin_sys

; 333  :         {
; 334  :             sav_wrk = wrk_bufptr;

  00245	48 8b 44 24 48	 mov	 rax, QWORD PTR wrk_bufptr$1[rsp]
  0024a	48 89 44 24 60	 mov	 QWORD PTR sav_wrk$2[rsp], rax

; 335  :             strncpy( wrk_bufptr,  logbuf_ptr, num_bytes );

  0024f	48 63 44 24 3c	 movsxd	 rax, DWORD PTR num_bytes$[rsp]
  00254	4c 8b c0	 mov	 r8, rax
  00257	48 8b 54 24 70	 mov	 rdx, QWORD PTR logbuf_ptr$[rsp]
  0025c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wrk_bufptr$1[rsp]
  00261	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 336  :         }

  00267	eb 0a		 jmp	 SHORT $LN18@cgibin_sys
$LN17@cgibin_sys:

; 337  :         else         wrk_bufptr = logbuf_ptr;

  00269	48 8b 44 24 70	 mov	 rax, QWORD PTR logbuf_ptr$[rsp]
  0026e	48 89 44 24 48	 mov	 QWORD PTR wrk_bufptr$1[rsp], rax
$LN18@cgibin_sys:
$LN2@cgibin_sys:

; 338  : 
; 339  : 
; 340  :         // We need to convert certain characters that might
; 341  :         // possibly be erroneously interpreted as HTML code
; 342  : 
; 343  : #define  AMP_LT    "&lt;"       // (HTML code for '<')
; 344  : #define  AMP_GT    "&gt;"       // (HTML code for '>')
; 345  : #define  AMP_AMP   "&amp;"      // (HTML code for '&')
; 346  : 
; 347  :         while ( num_bytes-- )

  00273	8b 44 24 3c	 mov	 eax, DWORD PTR num_bytes$[rsp]
  00277	89 44 24 5c	 mov	 DWORD PTR tv172[rsp], eax
  0027b	8b 44 24 3c	 mov	 eax, DWORD PTR num_bytes$[rsp]
  0027f	ff c8		 dec	 eax
  00281	89 44 24 3c	 mov	 DWORD PTR num_bytes$[rsp], eax
  00285	83 7c 24 5c 00	 cmp	 DWORD PTR tv172[rsp], 0
  0028a	0f 84 ad 00 00
	00		 je	 $LN3@cgibin_sys

; 348  :         {
; 349  :             switch ( *wrk_bufptr )

  00290	48 8b 44 24 48	 mov	 rax, QWORD PTR wrk_bufptr$1[rsp]
  00295	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00298	88 44 24 50	 mov	 BYTE PTR tv174[rsp], al
  0029c	80 7c 24 50 26	 cmp	 BYTE PTR tv174[rsp], 38	; 00000026H
  002a1	74 4e		 je	 SHORT $LN21@cgibin_sys
  002a3	80 7c 24 50 3c	 cmp	 BYTE PTR tv174[rsp], 60	; 0000003cH
  002a8	74 09		 je	 SHORT $LN19@cgibin_sys
  002aa	80 7c 24 50 3e	 cmp	 BYTE PTR tv174[rsp], 62	; 0000003eH
  002af	74 21		 je	 SHORT $LN20@cgibin_sys
  002b1	eb 5d		 jmp	 SHORT $LN22@cgibin_sys
$LN19@cgibin_sys:

; 350  :             {
; 351  :             case '<':
; 352  :                 hwrite( webblk->sock, AMP_LT     , sizeof(AMP_LT) );

  002b3	41 b8 05 00 00
	00		 mov	 r8d, 5
  002b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168328
  002c0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  002c8	8b 08		 mov	 ecx, DWORD PTR [rax]
  002ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite

; 353  :                 break;

  002d0	eb 59		 jmp	 SHORT $LN4@cgibin_sys
$LN20@cgibin_sys:

; 354  :             case '>':
; 355  :                 hwrite( webblk->sock, AMP_GT     , sizeof(AMP_GT) );

  002d2	41 b8 05 00 00
	00		 mov	 r8d, 5
  002d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168330
  002df	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  002e7	8b 08		 mov	 ecx, DWORD PTR [rax]
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite

; 356  :                 break;

  002ef	eb 3a		 jmp	 SHORT $LN4@cgibin_sys
$LN21@cgibin_sys:

; 357  :             case '&':
; 358  :                 hwrite( webblk->sock, AMP_AMP    , sizeof(AMP_AMP));

  002f1	41 b8 06 00 00
	00		 mov	 r8d, 6
  002f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168332
  002fe	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00306	8b 08		 mov	 ecx, DWORD PTR [rax]
  00308	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite

; 359  :                 break;

  0030e	eb 1b		 jmp	 SHORT $LN4@cgibin_sys
$LN22@cgibin_sys:

; 360  :             default:
; 361  :                 hwrite( webblk->sock, wrk_bufptr , 1              );

  00310	41 b8 01 00 00
	00		 mov	 r8d, 1
  00316	48 8b 54 24 48	 mov	 rdx, QWORD PTR wrk_bufptr$1[rsp]
  0031b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00323	8b 08		 mov	 ecx, DWORD PTR [rax]
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite
$LN4@cgibin_sys:

; 362  :                 break;
; 363  :             }
; 364  : 
; 365  :             wrk_bufptr++;

  0032b	48 8b 44 24 48	 mov	 rax, QWORD PTR wrk_bufptr$1[rsp]
  00330	48 ff c0	 inc	 rax
  00333	48 89 44 24 48	 mov	 QWORD PTR wrk_bufptr$1[rsp], rax

; 366  :         }

  00338	e9 36 ff ff ff	 jmp	 $LN2@cgibin_sys
$LN3@cgibin_sys:

; 367  : 
; 368  :         // (free our work buffer if it's really ours)
; 369  : 
; 370  :         if ( sav_wrk )

  0033d	48 83 7c 24 60
	00		 cmp	 QWORD PTR sav_wrk$2[rsp], 0
  00343	74 0b		 je	 SHORT $LN23@cgibin_sys

; 371  :             free( sav_wrk );

  00345	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sav_wrk$2[rsp]
  0034a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN23@cgibin_sys:
$LN16@cgibin_sys:

; 372  :     }
; 373  : 
; 374  :     hprintf(webblk->sock, "</PRE>\n");

  00350	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168335
  00357	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0035f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 375  : 
; 376  :     hprintf(webblk->sock, "<FORM method=post>Command:\n");

  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168336
  0036e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00376	8b 08		 mov	 ecx, DWORD PTR [rax]
  00378	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 377  :     hprintf(webblk->sock, "<INPUT type=text name=command size=80 autofocus>\n");

  0037e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168337
  00385	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0038d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0038f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 378  :     hprintf(webblk->sock, "<INPUT type=submit name=send value=\"Send\">\n");

  00395	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168338
  0039c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  003a4	8b 08		 mov	 ecx, DWORD PTR [rax]
  003a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 379  :     hprintf(webblk->sock, "<INPUT type=hidden name=%srefresh value=1>\n",autorefresh ? "auto" : "no");

  003ac	83 7c 24 38 00	 cmp	 DWORD PTR autorefresh$[rsp], 0
  003b1	74 0e		 je	 SHORT $LN30@cgibin_sys
  003b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168339
  003ba	48 89 44 24 78	 mov	 QWORD PTR tv213[rsp], rax
  003bf	eb 0c		 jmp	 SHORT $LN31@cgibin_sys
$LN30@cgibin_sys:
  003c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168340
  003c8	48 89 44 24 78	 mov	 QWORD PTR tv213[rsp], rax
$LN31@cgibin_sys:
  003cd	4c 8b 44 24 78	 mov	 r8, QWORD PTR tv213[rsp]
  003d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168341
  003d9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  003e1	8b 08		 mov	 ecx, DWORD PTR [rax]
  003e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 380  :     hprintf(webblk->sock, "<INPUT type=hidden name=refresh_interval value=%d>\n",refresh_interval);

  003e9	44 8b 44 24 34	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  003ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168342
  003f5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  003fd	8b 08		 mov	 ecx, DWORD PTR [rax]
  003ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 381  :     hprintf(webblk->sock, "<INPUT type=hidden name=msgcount value=%d>\n",msgcount);

  00405	44 8b 44 24 30	 mov	 r8d, DWORD PTR msgcount$[rsp]
  0040a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168343
  00411	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00419	8b 08		 mov	 ecx, DWORD PTR [rax]
  0041b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 382  :     hprintf(webblk->sock, "</FORM>\n<BR>\n");

  00421	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168344
  00428	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00430	8b 08		 mov	 ecx, DWORD PTR [rax]
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 383  : 
; 384  :     hprintf(webblk->sock, "<A name=bottom>\n");

  00438	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168345
  0043f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00447	8b 08		 mov	 ecx, DWORD PTR [rax]
  00449	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 385  : 
; 386  :     hprintf(webblk->sock, "<FORM method=post>\n");

  0044f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168346
  00456	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0045e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00460	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 387  :     if(!autorefresh)

  00466	83 7c 24 38 00	 cmp	 DWORD PTR autorefresh$[rsp], 0
  0046b	75 4c		 jne	 SHORT $LN24@cgibin_sys

; 388  :     {
; 389  :         hprintf(webblk->sock, "<INPUT type=submit value=\"Auto Refresh\" name=autorefresh>\n");

  0046d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168349
  00474	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0047c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 390  :         hprintf(webblk->sock, "Refresh Interval: ");

  00484	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168350
  0048b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00493	8b 08		 mov	 ecx, DWORD PTR [rax]
  00495	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 391  :         hprintf(webblk->sock, "<INPUT type=text name=\"refresh_interval\" size=2 value=%d>\n",

  0049b	44 8b 44 24 34	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  004a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168351
  004a7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  004af	8b 08		 mov	 ecx, DWORD PTR [rax]
  004b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 392  :            refresh_interval);
; 393  :     }

  004b7	eb 4f		 jmp	 SHORT $LN25@cgibin_sys
$LN24@cgibin_sys:

; 394  :     else
; 395  :     {
; 396  :         hprintf(webblk->sock, "<INPUT type=submit name=norefresh value=\"Stop Refreshing\">\n");

  004b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168352
  004c0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  004c8	8b 08		 mov	 ecx, DWORD PTR [rax]
  004ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 397  :         hprintf(webblk->sock, "<INPUT type=hidden name=refresh_interval value=%d>\n",refresh_interval);

  004d0	44 8b 44 24 34	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  004d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168353
  004dc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  004e4	8b 08		 mov	 ecx, DWORD PTR [rax]
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 398  :         hprintf(webblk->sock, " Refresh Interval: %2d \n", refresh_interval);

  004ec	44 8b 44 24 34	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  004f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168354
  004f8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00500	8b 08		 mov	 ecx, DWORD PTR [rax]
  00502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN25@cgibin_sys:

; 399  :     }
; 400  :     hprintf(webblk->sock, "<INPUT type=hidden name=msgcount value=%d>\n",msgcount);

  00508	44 8b 44 24 30	 mov	 r8d, DWORD PTR msgcount$[rsp]
  0050d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168355
  00514	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0051c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0051e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 401  :     hprintf(webblk->sock, "</FORM>\n");

  00524	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168356
  0052b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00533	8b 08		 mov	 ecx, DWORD PTR [rax]
  00535	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 402  : 
; 403  :     hprintf(webblk->sock, "<FORM method=post>\n");

  0053b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168357
  00542	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0054a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0054c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 404  :     hprintf(webblk->sock, "Only show last ");

  00552	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168358
  00559	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00561	8b 08		 mov	 ecx, DWORD PTR [rax]
  00563	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 405  :     hprintf(webblk->sock, "<INPUT type=text name=msgcount size=3 value=%d>",msgcount);

  00569	44 8b 44 24 30	 mov	 r8d, DWORD PTR msgcount$[rsp]
  0056e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168359
  00575	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0057d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0057f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 406  :     hprintf(webblk->sock, " lines (zero for all loglines)\n");

  00585	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168360
  0058c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00594	8b 08		 mov	 ecx, DWORD PTR [rax]
  00596	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 407  :     hprintf(webblk->sock, "<INPUT type=hidden name=%srefresh value=1>\n",autorefresh ? "auto" : "no");

  0059c	83 7c 24 38 00	 cmp	 DWORD PTR autorefresh$[rsp], 0
  005a1	74 11		 je	 SHORT $LN32@cgibin_sys
  005a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168361
  005aa	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv278[rsp], rax
  005b2	eb 0f		 jmp	 SHORT $LN33@cgibin_sys
$LN32@cgibin_sys:
  005b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168362
  005bb	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv278[rsp], rax
$LN33@cgibin_sys:
  005c3	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR tv278[rsp]
  005cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168363
  005d2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  005da	8b 08		 mov	 ecx, DWORD PTR [rax]
  005dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 408  :     hprintf(webblk->sock, "<INPUT type=hidden name=refresh_interval value=%d>\n",refresh_interval);

  005e2	44 8b 44 24 34	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  005e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168364
  005ee	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  005f6	8b 08		 mov	 ecx, DWORD PTR [rax]
  005f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 409  :     hprintf(webblk->sock, "</FORM>\n");

  005fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168365
  00605	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0060d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0060f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 410  : 
; 411  :     if (autorefresh)

  00615	83 7c 24 38 00	 cmp	 DWORD PTR autorefresh$[rsp], 0
  0061a	74 6a		 je	 SHORT $LN26@cgibin_sys

; 412  :     {
; 413  :         /* JavaScript to cause automatic page refresh */
; 414  :         hprintf(webblk->sock, "<script language=\"JavaScript\">\n");

  0061c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168367
  00623	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0062b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0062d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 415  :         hprintf(webblk->sock, "<!--\nsetTimeout('window.location.replace(\"%s"

  00633	69 44 24 34 e8
	03 00 00	 imul	 eax, DWORD PTR refresh_interval$[rsp], 1000 ; 000003e8H
  0063b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0063f	8b 44 24 30	 mov	 eax, DWORD PTR msgcount$[rsp]
  00643	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00647	44 8b 4c 24 34	 mov	 r9d, DWORD PTR refresh_interval$[rsp]
  0064c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00654	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  00658	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168368
  0065f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00667	8b 08		 mov	 ecx, DWORD PTR [rax]
  00669	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 416  :                "?refresh_interval=%d"
; 417  :                "&refresh=1"
; 418  :                "&msgcount=%d"
; 419  :                "\")', %d)\n",
; 420  :                cgi_baseurl(webblk),
; 421  :                refresh_interval,
; 422  :                msgcount,
; 423  :                refresh_interval*1000);
; 424  :         hprintf(webblk->sock, "//-->\n</script>\n");

  0066f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168369
  00676	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0067e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00680	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN26@cgibin_sys:

; 425  :     }
; 426  : 
; 427  :     html_footer(webblk);

  00686	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0068e	e8 00 00 00 00	 call	 html_footer

; 428  : 
; 429  : }

  00693	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0069a	c3		 ret	 0
cgibin_syslog ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
refresh_interval$ = 144
autorefresh$ = 148
regs$ = 152
tv260 = 160
value$ = 168
qword$ = 176
__$ArrayPad$ = 192
webblk$ = 288
cgibin_psw PROC

; 185  : {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 54		 push	 r12
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 186  :     REGS *regs;
; 187  :     QWORD   qword;
; 188  : 
; 189  :     char *value;
; 190  :     int autorefresh=0;

  0002a	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR autorefresh$[rsp], 0

; 191  :     int refresh_interval=5;

  00035	c7 84 24 90 00
	00 00 05 00 00
	00		 mov	 DWORD PTR refresh_interval$[rsp], 5

; 192  : 
; 193  :     regs = sysblk.regs[sysblk.pcpu];

  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00047	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0004e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00055	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0005d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 194  :     if (!regs) regs = &sysblk.dummyregs;

  00065	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  0006e	75 15		 jne	 SHORT $LN2@cgibin_psw
  00070	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00077	48 05 00 15 00
	00		 add	 rax, 5376		; 00001500H
  0007d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax
$LN2@cgibin_psw:

; 195  : 
; 196  :     html_header(webblk);

  00085	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0008d	e8 00 00 00 00	 call	 html_header

; 197  : 
; 198  : 
; 199  :     if (cgi_variable(webblk,"autorefresh"))

  00092	41 b8 03 00 00
	00		 mov	 r8d, 3
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168256
  0009f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000a7	e8 00 00 00 00	 call	 http_variable
  000ac	48 85 c0	 test	 rax, rax
  000af	74 0d		 je	 SHORT $LN3@cgibin_psw

; 200  :         autorefresh = 1;

  000b1	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR autorefresh$[rsp], 1
  000bc	eb 56		 jmp	 SHORT $LN4@cgibin_psw
$LN3@cgibin_psw:

; 201  :     else if (cgi_variable(webblk,"norefresh"))

  000be	41 b8 03 00 00
	00		 mov	 r8d, 3
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168259
  000cb	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000d3	e8 00 00 00 00	 call	 http_variable
  000d8	48 85 c0	 test	 rax, rax
  000db	74 0d		 je	 SHORT $LN5@cgibin_psw

; 202  :         autorefresh = 0;

  000dd	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR autorefresh$[rsp], 0
  000e8	eb 2a		 jmp	 SHORT $LN6@cgibin_psw
$LN5@cgibin_psw:

; 203  :     else if (cgi_variable(webblk,"refresh"))

  000ea	41 b8 03 00 00
	00		 mov	 r8d, 3
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168261
  000f7	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000ff	e8 00 00 00 00	 call	 http_variable
  00104	48 85 c0	 test	 rax, rax
  00107	74 0b		 je	 SHORT $LN7@cgibin_psw

; 204  :         autorefresh = 1;

  00109	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR autorefresh$[rsp], 1
$LN7@cgibin_psw:
$LN6@cgibin_psw:
$LN4@cgibin_psw:

; 205  : 
; 206  :     if ((value = cgi_variable(webblk,"refresh_interval")))

  00114	41 b8 03 00 00
	00		 mov	 r8d, 3
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168263
  00121	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00129	e8 00 00 00 00	 call	 http_variable
  0012e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR value$[rsp], rax
  00136	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR value$[rsp], 0
  0013f	74 15		 je	 SHORT $LN8@cgibin_psw

; 207  :         refresh_interval = atoi(value);

  00141	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0014f	89 84 24 90 00
	00 00		 mov	 DWORD PTR refresh_interval$[rsp], eax
$LN8@cgibin_psw:

; 208  : 
; 209  :     hprintf(webblk->sock, "<H2>Program Status Word</H2>\n");

  00156	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168264
  0015d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00165	8b 08		 mov	 ecx, DWORD PTR [rax]
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 210  : 
; 211  :     hprintf(webblk->sock, "<FORM method=post>\n");

  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168265
  00174	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0017c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0017e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 212  : 
; 213  :     if (!autorefresh)

  00184	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR autorefresh$[rsp], 0
  0018c	75 4f		 jne	 SHORT $LN9@cgibin_psw

; 214  :     {
; 215  :         hprintf(webblk->sock, "<INPUT type=submit value=\"Auto Refresh\" name=autorefresh>\n");

  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168268
  00195	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0019d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 216  :         hprintf(webblk->sock, "Refresh Interval: ");

  001a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168269
  001ac	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001b4	8b 08		 mov	 ecx, DWORD PTR [rax]
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 217  :         hprintf(webblk->sock, "<INPUT type=text size=2 name=\"refresh_interval\" value=%d>\n",

  001bc	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  001c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168270
  001cb	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001d3	8b 08		 mov	 ecx, DWORD PTR [rax]
  001d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 218  :            refresh_interval);
; 219  :     }

  001db	eb 55		 jmp	 SHORT $LN10@cgibin_psw
$LN9@cgibin_psw:

; 220  :     else
; 221  :     {
; 222  :         hprintf(webblk->sock, "<INPUT type=submit value=\"Stop Refreshing\" name=norefresh>\n");

  001dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168271
  001e4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001ec	8b 08		 mov	 ecx, DWORD PTR [rax]
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 223  :         hprintf(webblk->sock, "Refresh Interval: %d\n", refresh_interval);

  001f4	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  001fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168272
  00203	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0020b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0020d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 224  :         hprintf(webblk->sock, "<INPUT type=hidden name=\"refresh_interval\" value=%d>\n",refresh_interval);

  00213	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR refresh_interval$[rsp]
  0021b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168273
  00222	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0022a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0022c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN10@cgibin_psw:

; 225  :     }
; 226  : 
; 227  :     hprintf(webblk->sock, "</FORM>\n");

  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168274
  00239	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00241	8b 08		 mov	 ecx, DWORD PTR [rax]
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 228  : 
; 229  :     hprintf(webblk->sock, "<P>\n");

  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168275
  00250	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00258	8b 08		 mov	 ecx, DWORD PTR [rax]
  0025a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 230  : 
; 231  :     if( regs->arch_mode != ARCH_900_IDX )

  00260	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00268	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  0026c	0f 84 e2 00 00
	00		 je	 $LN11@cgibin_psw

; 232  :     {
; 233  :         copy_psw (regs, qword);

  00272	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR qword$[rsp]
  0027a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00282	e8 00 00 00 00	 call	 copy_psw

; 234  :         hprintf(webblk->sock, "PSW=%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X\n",

  00287	b8 01 00 00 00	 mov	 eax, 1
  0028c	48 6b c0 07	 imul	 rax, rax, 7
  00290	0f b6 84 04 b0
	00 00 00	 movzx	 eax, BYTE PTR qword$[rsp+rax]
  00298	b9 01 00 00 00	 mov	 ecx, 1
  0029d	48 6b c9 06	 imul	 rcx, rcx, 6
  002a1	0f b6 8c 0c b0
	00 00 00	 movzx	 ecx, BYTE PTR qword$[rsp+rcx]
  002a9	ba 01 00 00 00	 mov	 edx, 1
  002ae	48 6b d2 05	 imul	 rdx, rdx, 5
  002b2	0f b6 94 14 b0
	00 00 00	 movzx	 edx, BYTE PTR qword$[rsp+rdx]
  002ba	41 b8 01 00 00
	00		 mov	 r8d, 1
  002c0	4d 6b c0 04	 imul	 r8, r8, 4
  002c4	46 0f b6 84 04
	b0 00 00 00	 movzx	 r8d, BYTE PTR qword$[rsp+r8]
  002cd	41 b9 01 00 00
	00		 mov	 r9d, 1
  002d3	4d 6b c9 03	 imul	 r9, r9, 3
  002d7	46 0f b6 8c 0c
	b0 00 00 00	 movzx	 r9d, BYTE PTR qword$[rsp+r9]
  002e0	41 ba 01 00 00
	00		 mov	 r10d, 1
  002e6	4d 6b d2 02	 imul	 r10, r10, 2
  002ea	46 0f b6 94 14
	b0 00 00 00	 movzx	 r10d, BYTE PTR qword$[rsp+r10]
  002f3	41 bb 01 00 00
	00		 mov	 r11d, 1
  002f9	4d 6b db 01	 imul	 r11, r11, 1
  002fd	46 0f b6 9c 1c
	b0 00 00 00	 movzx	 r11d, BYTE PTR qword$[rsp+r11]
  00306	bb 01 00 00 00	 mov	 ebx, 1
  0030b	48 6b db 00	 imul	 rbx, rbx, 0
  0030f	0f b6 9c 1c b0
	00 00 00	 movzx	 ebx, BYTE PTR qword$[rsp+rbx]
  00317	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0031b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0031f	89 54 24 38	 mov	 DWORD PTR [rsp+56], edx
  00323	44 89 44 24 30	 mov	 DWORD PTR [rsp+48], r8d
  00328	44 89 4c 24 28	 mov	 DWORD PTR [rsp+40], r9d
  0032d	44 89 54 24 20	 mov	 DWORD PTR [rsp+32], r10d
  00332	45 8b cb	 mov	 r9d, r11d
  00335	44 8b c3	 mov	 r8d, ebx
  00338	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168278
  0033f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00347	8b 08		 mov	 ecx, DWORD PTR [rax]
  00349	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 235  :                 qword[0], qword[1], qword[2], qword[3],
; 236  :                 qword[4], qword[5], qword[6], qword[7]);
; 237  :     }

  0034f	e9 a8 01 00 00	 jmp	 $LN12@cgibin_psw
$LN11@cgibin_psw:

; 238  :     else
; 239  :     {
; 240  :         copy_psw (regs, qword);

  00354	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR qword$[rsp]
  0035c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00364	e8 00 00 00 00	 call	 copy_psw

; 241  :         hprintf(webblk->sock, "PSW=%2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X "

  00369	b8 01 00 00 00	 mov	 eax, 1
  0036e	48 6b c0 0f	 imul	 rax, rax, 15
  00372	0f b6 84 04 b0
	00 00 00	 movzx	 eax, BYTE PTR qword$[rsp+rax]
  0037a	b9 01 00 00 00	 mov	 ecx, 1
  0037f	48 6b c9 0e	 imul	 rcx, rcx, 14
  00383	0f b6 8c 0c b0
	00 00 00	 movzx	 ecx, BYTE PTR qword$[rsp+rcx]
  0038b	ba 01 00 00 00	 mov	 edx, 1
  00390	48 6b d2 0d	 imul	 rdx, rdx, 13
  00394	0f b6 94 14 b0
	00 00 00	 movzx	 edx, BYTE PTR qword$[rsp+rdx]
  0039c	bb 01 00 00 00	 mov	 ebx, 1
  003a1	48 6b db 0c	 imul	 rbx, rbx, 12
  003a5	0f b6 9c 1c b0
	00 00 00	 movzx	 ebx, BYTE PTR qword$[rsp+rbx]
  003ad	41 b8 01 00 00
	00		 mov	 r8d, 1
  003b3	4d 6b c0 0b	 imul	 r8, r8, 11
  003b7	46 0f b6 84 04
	b0 00 00 00	 movzx	 r8d, BYTE PTR qword$[rsp+r8]
  003c0	41 b9 01 00 00
	00		 mov	 r9d, 1
  003c6	4d 6b c9 0a	 imul	 r9, r9, 10
  003ca	46 0f b6 8c 0c
	b0 00 00 00	 movzx	 r9d, BYTE PTR qword$[rsp+r9]
  003d3	41 ba 01 00 00
	00		 mov	 r10d, 1
  003d9	4d 6b d2 09	 imul	 r10, r10, 9
  003dd	46 0f b6 94 14
	b0 00 00 00	 movzx	 r10d, BYTE PTR qword$[rsp+r10]
  003e6	41 bb 01 00 00
	00		 mov	 r11d, 1
  003ec	4d 6b db 08	 imul	 r11, r11, 8
  003f0	46 0f b6 9c 1c
	b0 00 00 00	 movzx	 r11d, BYTE PTR qword$[rsp+r11]
  003f9	bf 01 00 00 00	 mov	 edi, 1
  003fe	48 6b ff 07	 imul	 rdi, rdi, 7
  00402	0f b6 bc 3c b0
	00 00 00	 movzx	 edi, BYTE PTR qword$[rsp+rdi]
  0040a	be 01 00 00 00	 mov	 esi, 1
  0040f	48 6b f6 06	 imul	 rsi, rsi, 6
  00413	0f b6 b4 34 b0
	00 00 00	 movzx	 esi, BYTE PTR qword$[rsp+rsi]
  0041b	bd 01 00 00 00	 mov	 ebp, 1
  00420	48 6b ed 05	 imul	 rbp, rbp, 5
  00424	0f b6 ac 2c b0
	00 00 00	 movzx	 ebp, BYTE PTR qword$[rsp+rbp]
  0042c	41 be 01 00 00
	00		 mov	 r14d, 1
  00432	4d 6b f6 04	 imul	 r14, r14, 4
  00436	46 0f b6 b4 34
	b0 00 00 00	 movzx	 r14d, BYTE PTR qword$[rsp+r14]
  0043f	41 bf 01 00 00
	00		 mov	 r15d, 1
  00445	4d 6b ff 03	 imul	 r15, r15, 3
  00449	46 0f b6 bc 3c
	b0 00 00 00	 movzx	 r15d, BYTE PTR qword$[rsp+r15]
  00452	41 bc 01 00 00
	00		 mov	 r12d, 1
  00458	4d 6b e4 02	 imul	 r12, r12, 2
  0045c	46 0f b6 a4 24
	b0 00 00 00	 movzx	 r12d, BYTE PTR qword$[rsp+r12]
  00465	41 bd 01 00 00
	00		 mov	 r13d, 1
  0046b	4d 6b ed 01	 imul	 r13, r13, 1
  0046f	46 0f b6 ac 2c
	b0 00 00 00	 movzx	 r13d, BYTE PTR qword$[rsp+r13]
  00478	44 89 ac 24 a0
	00 00 00	 mov	 DWORD PTR tv260[rsp], r13d
  00480	41 bd 01 00 00
	00		 mov	 r13d, 1
  00486	4d 6b ed 00	 imul	 r13, r13, 0
  0048a	46 0f b6 ac 2c
	b0 00 00 00	 movzx	 r13d, BYTE PTR qword$[rsp+r13]
  00493	89 84 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], eax
  0049a	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  004a1	89 54 24 78	 mov	 DWORD PTR [rsp+120], edx
  004a5	89 5c 24 70	 mov	 DWORD PTR [rsp+112], ebx
  004a9	44 89 44 24 68	 mov	 DWORD PTR [rsp+104], r8d
  004ae	44 89 4c 24 60	 mov	 DWORD PTR [rsp+96], r9d
  004b3	44 89 54 24 58	 mov	 DWORD PTR [rsp+88], r10d
  004b8	44 89 5c 24 50	 mov	 DWORD PTR [rsp+80], r11d
  004bd	89 7c 24 48	 mov	 DWORD PTR [rsp+72], edi
  004c1	89 74 24 40	 mov	 DWORD PTR [rsp+64], esi
  004c5	89 6c 24 38	 mov	 DWORD PTR [rsp+56], ebp
  004c9	44 89 74 24 30	 mov	 DWORD PTR [rsp+48], r14d
  004ce	44 89 7c 24 28	 mov	 DWORD PTR [rsp+40], r15d
  004d3	44 89 64 24 20	 mov	 DWORD PTR [rsp+32], r12d
  004d8	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv260[rsp]
  004df	44 8b c8	 mov	 r9d, eax
  004e2	45 8b c5	 mov	 r8d, r13d
  004e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168279
  004ec	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  004f4	8b 08		 mov	 ecx, DWORD PTR [rax]
  004f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN12@cgibin_psw:

; 242  :                 "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X\n",
; 243  :                 qword[0], qword[1], qword[2], qword[3],
; 244  :                 qword[4], qword[5], qword[6], qword[7],
; 245  :                 qword[8], qword[9], qword[10], qword[11],
; 246  :                 qword[12], qword[13], qword[14], qword[15]);
; 247  :     }
; 248  : 
; 249  :     if (autorefresh)

  004fc	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR autorefresh$[rsp], 0
  00504	74 68		 je	 SHORT $LN13@cgibin_psw

; 250  :     {
; 251  :         /* JavaScript to cause automatic page refresh */
; 252  :         hprintf(webblk->sock, "<script language=\"JavaScript\">\n");

  00506	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168281
  0050d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00515	8b 08		 mov	 ecx, DWORD PTR [rax]
  00517	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 253  :         hprintf(webblk->sock, "<!--\nsetTimeout('window.location.replace(\"%s?refresh_interval=%d&refresh=1\")', %d)\n",

  0051d	69 84 24 90 00
	00 00 e8 03 00
	00		 imul	 eax, DWORD PTR refresh_interval$[rsp], 1000 ; 000003e8H
  00528	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0052c	44 8b 8c 24 90
	00 00 00	 mov	 r9d, DWORD PTR refresh_interval$[rsp]
  00534	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0053c	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  00540	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168282
  00547	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0054f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00551	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 254  :                cgi_baseurl(webblk),
; 255  :                refresh_interval,
; 256  :                refresh_interval*1000);
; 257  :         hprintf(webblk->sock, "//-->\n</script>\n");

  00557	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168283
  0055e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00566	8b 08		 mov	 ecx, DWORD PTR [rax]
  00568	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN13@cgibin_psw:

; 258  :     }
; 259  : 
; 260  :     html_footer(webblk);

  0056e	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00576	e8 00 00 00 00	 call	 html_footer

; 261  : 
; 262  : }

  0057b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00583	48 33 cc	 xor	 rcx, rsp
  00586	e8 00 00 00 00	 call	 __security_check_cookie
  0058b	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00592	41 5f		 pop	 r15
  00594	41 5e		 pop	 r14
  00596	41 5d		 pop	 r13
  00598	41 5c		 pop	 r12
  0059a	5f		 pop	 rdi
  0059b	5e		 pop	 rsi
  0059c	5d		 pop	 rbp
  0059d	5b		 pop	 rbx
  0059e	c3		 ret	 0
cgibin_psw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
i$ = 48
regs$ = 56
tv85 = 64
tv133 = 72
webblk$ = 96
cgibin_reg_general PROC

; 154  : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 155  : int i;
; 156  : 
; 157  :     REGS *regs;
; 158  : 
; 159  :     regs = sysblk.regs[sysblk.pcpu];

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00017	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0001e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00026	48 89 44 24 38	 mov	 QWORD PTR regs$[rsp], rax

; 160  :     if (!regs) regs = &sysblk.dummyregs;

  0002b	48 83 7c 24 38
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00031	75 12		 jne	 SHORT $LN8@cgibin_reg
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0003a	48 05 00 15 00
	00		 add	 rax, 5376		; 00001500H
  00040	48 89 44 24 38	 mov	 QWORD PTR regs$[rsp], rax
$LN8@cgibin_reg:

; 161  : 
; 162  :     html_header(webblk);

  00045	48 8b 4c 24 60	 mov	 rcx, QWORD PTR webblk$[rsp]
  0004a	e8 00 00 00 00	 call	 html_header

; 163  : 
; 164  :     hprintf(webblk->sock, "<H2>General Registers</H2>\n");

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168233
  00056	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 165  :     hprintf(webblk->sock, "<PRE>\n");

  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168234
  0006a	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  0006f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 166  :     if(regs->arch_mode != ARCH_900_IDX)

  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  0007c	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  00080	74 7a		 je	 SHORT $LN9@cgibin_reg

; 167  :         for (i = 0; i < 16; i++)

  00082	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0008a	eb 0a		 jmp	 SHORT $LN4@cgibin_reg
$LN2@cgibin_reg:
  0008c	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00090	ff c0		 inc	 eax
  00092	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@cgibin_reg:
  00096	83 7c 24 30 10	 cmp	 DWORD PTR i$[rsp], 16
  0009b	7d 5d		 jge	 SHORT $LN3@cgibin_reg

; 168  :             hprintf(webblk->sock, "GR%2.2d=%8.8X%s", i, regs->GR_L(i),

  0009d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  000a1	83 e0 03	 and	 eax, 3
  000a4	83 f8 03	 cmp	 eax, 3
  000a7	75 0e		 jne	 SHORT $LN12@cgibin_reg
  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168237
  000b0	48 89 44 24 40	 mov	 QWORD PTR tv85[rsp], rax
  000b5	eb 0c		 jmp	 SHORT $LN13@cgibin_reg
$LN12@cgibin_reg:
  000b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168238
  000be	48 89 44 24 40	 mov	 QWORD PTR tv85[rsp], rax
$LN13@cgibin_reg:
  000c3	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000c8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv85[rsp]
  000cd	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	44 8b 8c c1 80
	02 00 00	 mov	 r9d, DWORD PTR [rcx+rax*8+640]
  000df	44 8b 44 24 30	 mov	 r8d, DWORD PTR i$[rsp]
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168239
  000eb	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  000f0	8b 08		 mov	 ecx, DWORD PTR [rax]
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  000f8	eb 92		 jmp	 SHORT $LN2@cgibin_reg
$LN3@cgibin_reg:

; 169  :                 ((i & 0x03) == 0x03) ? "\n" : "\t");

  000fa	eb 78		 jmp	 SHORT $LN10@cgibin_reg
$LN9@cgibin_reg:

; 170  :     else
; 171  :         for (i = 0; i < 16; i++)

  000fc	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00104	eb 0a		 jmp	 SHORT $LN7@cgibin_reg
$LN5@cgibin_reg:
  00106	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0010a	ff c0		 inc	 eax
  0010c	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@cgibin_reg:
  00110	83 7c 24 30 10	 cmp	 DWORD PTR i$[rsp], 16
  00115	7d 5d		 jge	 SHORT $LN6@cgibin_reg

; 172  :             hprintf(webblk->sock, "GR%1.1X=%16.16"PRIX64"%s", i,

  00117	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0011b	83 e0 03	 and	 eax, 3
  0011e	83 f8 03	 cmp	 eax, 3
  00121	75 0e		 jne	 SHORT $LN14@cgibin_reg
  00123	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168240
  0012a	48 89 44 24 48	 mov	 QWORD PTR tv133[rsp], rax
  0012f	eb 0c		 jmp	 SHORT $LN15@cgibin_reg
$LN14@cgibin_reg:
  00131	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168241
  00138	48 89 44 24 48	 mov	 QWORD PTR tv133[rsp], rax
$LN15@cgibin_reg:
  0013d	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00142	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv133[rsp]
  00147	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0014c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  00151	4c 8b 8c c1 80
	02 00 00	 mov	 r9, QWORD PTR [rcx+rax*8+640]
  00159	44 8b 44 24 30	 mov	 r8d, DWORD PTR i$[rsp]
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168242
  00165	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  0016a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  00172	eb 92		 jmp	 SHORT $LN5@cgibin_reg
$LN6@cgibin_reg:
$LN10@cgibin_reg:

; 173  :                 (U64)regs->GR_G(i), ((i & 0x03) == 0x03) ? "\n" : " ");
; 174  : 
; 175  :     hprintf(webblk->sock, "</PRE>\n");

  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168243
  0017b	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  00180	8b 08		 mov	 ecx, DWORD PTR [rax]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 176  : 
; 177  :     html_footer(webblk);

  00188	48 8b 4c 24 60	 mov	 rcx, QWORD PTR webblk$[rsp]
  0018d	e8 00 00 00 00	 call	 html_footer

; 178  : 
; 179  : }

  00192	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00196	c3		 ret	 0
cgibin_reg_general ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
i$ = 48
regs$ = 56
tv85 = 64
tv134 = 72
webblk$ = 96
cgibin_reg_control PROC

; 123  : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 124  : int i;
; 125  : 
; 126  :     REGS *regs;
; 127  : 
; 128  :     regs = sysblk.regs[sysblk.pcpu];

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00017	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0001e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00026	48 89 44 24 38	 mov	 QWORD PTR regs$[rsp], rax

; 129  :     if (!regs) regs = &sysblk.dummyregs;

  0002b	48 83 7c 24 38
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00031	75 12		 jne	 SHORT $LN8@cgibin_reg
  00033	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0003a	48 05 00 15 00
	00		 add	 rax, 5376		; 00001500H
  00040	48 89 44 24 38	 mov	 QWORD PTR regs$[rsp], rax
$LN8@cgibin_reg:

; 130  : 
; 131  :     html_header(webblk);

  00045	48 8b 4c 24 60	 mov	 rcx, QWORD PTR webblk$[rsp]
  0004a	e8 00 00 00 00	 call	 html_header

; 132  : 
; 133  :     hprintf(webblk->sock, "<H2>Control Registers</H2>\n");

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168208
  00056	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 134  :     hprintf(webblk->sock, "<PRE>\n");

  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168209
  0006a	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  0006f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 135  :     if(regs->arch_mode != ARCH_900_IDX)

  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR regs$[rsp]
  0007c	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  00080	74 7d		 je	 SHORT $LN9@cgibin_reg

; 136  :         for (i = 0; i < 16; i++)

  00082	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0008a	eb 0a		 jmp	 SHORT $LN4@cgibin_reg
$LN2@cgibin_reg:
  0008c	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00090	ff c0		 inc	 eax
  00092	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@cgibin_reg:
  00096	83 7c 24 30 10	 cmp	 DWORD PTR i$[rsp], 16
  0009b	7d 60		 jge	 SHORT $LN3@cgibin_reg

; 137  :             hprintf(webblk->sock, "CR%2.2d=%8.8X%s", i, regs->CR_L(i),

  0009d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  000a1	83 e0 03	 and	 eax, 3
  000a4	83 f8 03	 cmp	 eax, 3
  000a7	75 0e		 jne	 SHORT $LN12@cgibin_reg
  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168212
  000b0	48 89 44 24 40	 mov	 QWORD PTR tv85[rsp], rax
  000b5	eb 0c		 jmp	 SHORT $LN13@cgibin_reg
$LN12@cgibin_reg:
  000b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168213
  000be	48 89 44 24 40	 mov	 QWORD PTR tv85[rsp], rax
$LN13@cgibin_reg:
  000c3	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  000c7	ff c0		 inc	 eax
  000c9	48 98		 cdqe
  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv85[rsp]
  000d0	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000d5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  000da	44 8b 8c c1 00
	06 00 00	 mov	 r9d, DWORD PTR [rcx+rax*8+1536]
  000e2	44 8b 44 24 30	 mov	 r8d, DWORD PTR i$[rsp]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168214
  000ee	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  000f3	8b 08		 mov	 ecx, DWORD PTR [rax]
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  000fb	eb 8f		 jmp	 SHORT $LN2@cgibin_reg
$LN3@cgibin_reg:

; 138  :                 ((i & 0x03) == 0x03) ? "\n" : "\t");

  000fd	eb 7b		 jmp	 SHORT $LN10@cgibin_reg
$LN9@cgibin_reg:

; 139  :     else
; 140  :         for (i = 0; i < 16; i++)

  000ff	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00107	eb 0a		 jmp	 SHORT $LN7@cgibin_reg
$LN5@cgibin_reg:
  00109	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0010d	ff c0		 inc	 eax
  0010f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@cgibin_reg:
  00113	83 7c 24 30 10	 cmp	 DWORD PTR i$[rsp], 16
  00118	7d 60		 jge	 SHORT $LN6@cgibin_reg

; 141  :             hprintf(webblk->sock, "CR%1.1X=%16.16"PRIX64"%s", i,

  0011a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0011e	83 e0 03	 and	 eax, 3
  00121	83 f8 03	 cmp	 eax, 3
  00124	75 0e		 jne	 SHORT $LN14@cgibin_reg
  00126	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168215
  0012d	48 89 44 24 48	 mov	 QWORD PTR tv134[rsp], rax
  00132	eb 0c		 jmp	 SHORT $LN15@cgibin_reg
$LN14@cgibin_reg:
  00134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168216
  0013b	48 89 44 24 48	 mov	 QWORD PTR tv134[rsp], rax
$LN15@cgibin_reg:
  00140	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00144	ff c0		 inc	 eax
  00146	48 98		 cdqe
  00148	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv134[rsp]
  0014d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00152	48 8b 4c 24 38	 mov	 rcx, QWORD PTR regs$[rsp]
  00157	4c 8b 8c c1 00
	06 00 00	 mov	 r9, QWORD PTR [rcx+rax*8+1536]
  0015f	44 8b 44 24 30	 mov	 r8d, DWORD PTR i$[rsp]
  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168217
  0016b	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  00170	8b 08		 mov	 ecx, DWORD PTR [rax]
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  00178	eb 8f		 jmp	 SHORT $LN5@cgibin_reg
$LN6@cgibin_reg:
$LN10@cgibin_reg:

; 142  :                 (U64)regs->CR_G(i), ((i & 0x03) == 0x03) ? "\n" : " ");
; 143  : 
; 144  :     hprintf(webblk->sock, "</PRE>\n");

  0017a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168218
  00181	48 8b 44 24 60	 mov	 rax, QWORD PTR webblk$[rsp]
  00186	8b 08		 mov	 ecx, DWORD PTR [rax]
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 145  : 
; 146  :     html_footer(webblk);

  0018e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR webblk$[rsp]
  00193	e8 00 00 00 00	 call	 html_footer

; 147  : 
; 148  : }

  00198	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019c	c3		 ret	 0
cgibin_reg_control ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cgibin.c
_TEXT	SEGMENT
gpr$ = 160
cpu$ = 164
regs$ = 168
tv174 = 176
psw$ = 184
__$ArrayPad$ = 200
webblk$ = 288
cgibin_blinkenlights_cpu PROC

; 76   : {

$LN17:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 54		 push	 r12
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 77   :     REGS*  regs;
; 78   :     QWORD  psw;
; 79   :     int    cpu, gpr;
; 80   : 
; 81   :     hprintf( webblk->sock, "Expires: 0\n" );

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168183
  00031	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00039	8b 08		 mov	 ecx, DWORD PTR [rax]
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 82   :     hprintf( webblk->sock, "Content-type: text/csv;\n\n" );

  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168184
  00048	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00050	8b 08		 mov	 ecx, DWORD PTR [rax]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 83   : 
; 84   :     for (cpu=0; cpu < sysblk.maxcpu; cpu++)

  00058	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cpu$[rsp], 0
  00063	eb 10		 jmp	 SHORT $LN4@cgibin_bli
$LN2@cgibin_bli:
  00065	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR cpu$[rsp]
  0006c	ff c0		 inc	 eax
  0006e	89 84 24 a4 00
	00 00		 mov	 DWORD PTR cpu$[rsp], eax
$LN4@cgibin_bli:
  00075	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00082	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR cpu$[rsp], eax
  00089	0f 8d bf 03 00
	00		 jge	 $LN3@cgibin_bli

; 85   :     {
; 86   :         if (!(regs = sysblk.regs[ cpu ]))

  0008f	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR cpu$[rsp]
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0009e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  000a6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax
  000ae	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  000b7	75 15		 jne	 SHORT $LN11@cgibin_bli

; 87   :             regs = &sysblk.dummyregs;

  000b9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000c0	48 05 00 15 00
	00		 add	 rax, 5376		; 00001500H
  000c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax
$LN11@cgibin_bli:

; 88   : 
; 89   :         copy_psw( regs, psw );

  000ce	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR psw$[rsp]
  000d6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000de	e8 00 00 00 00	 call	 copy_psw

; 90   : 
; 91   :         if (ARCH_900_IDX == regs->arch_mode)

  000e3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000eb	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  000ef	0f 85 a4 01 00
	00		 jne	 $LN12@cgibin_bli

; 92   :         {
; 93   :             hprintf( webblk->sock,

  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	48 6b c0 0f	 imul	 rax, rax, 15
  000fe	0f b6 84 04 b8
	00 00 00	 movzx	 eax, BYTE PTR psw$[rsp+rax]
  00106	b9 01 00 00 00	 mov	 ecx, 1
  0010b	48 6b c9 0e	 imul	 rcx, rcx, 14
  0010f	0f b6 8c 0c b8
	00 00 00	 movzx	 ecx, BYTE PTR psw$[rsp+rcx]
  00117	ba 01 00 00 00	 mov	 edx, 1
  0011c	48 6b d2 0d	 imul	 rdx, rdx, 13
  00120	0f b6 94 14 b8
	00 00 00	 movzx	 edx, BYTE PTR psw$[rsp+rdx]
  00128	41 b8 01 00 00
	00		 mov	 r8d, 1
  0012e	4d 6b c0 0c	 imul	 r8, r8, 12
  00132	46 0f b6 84 04
	b8 00 00 00	 movzx	 r8d, BYTE PTR psw$[rsp+r8]
  0013b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00141	4d 6b c9 0b	 imul	 r9, r9, 11
  00145	46 0f b6 8c 0c
	b8 00 00 00	 movzx	 r9d, BYTE PTR psw$[rsp+r9]
  0014e	41 ba 01 00 00
	00		 mov	 r10d, 1
  00154	4d 6b d2 0a	 imul	 r10, r10, 10
  00158	46 0f b6 94 14
	b8 00 00 00	 movzx	 r10d, BYTE PTR psw$[rsp+r10]
  00161	41 bb 01 00 00
	00		 mov	 r11d, 1
  00167	4d 6b db 09	 imul	 r11, r11, 9
  0016b	46 0f b6 9c 1c
	b8 00 00 00	 movzx	 r11d, BYTE PTR psw$[rsp+r11]
  00174	bb 01 00 00 00	 mov	 ebx, 1
  00179	48 6b db 08	 imul	 rbx, rbx, 8
  0017d	0f b6 9c 1c b8
	00 00 00	 movzx	 ebx, BYTE PTR psw$[rsp+rbx]
  00185	bf 01 00 00 00	 mov	 edi, 1
  0018a	48 6b ff 07	 imul	 rdi, rdi, 7
  0018e	0f b6 bc 3c b8
	00 00 00	 movzx	 edi, BYTE PTR psw$[rsp+rdi]
  00196	be 01 00 00 00	 mov	 esi, 1
  0019b	48 6b f6 06	 imul	 rsi, rsi, 6
  0019f	0f b6 b4 34 b8
	00 00 00	 movzx	 esi, BYTE PTR psw$[rsp+rsi]
  001a7	bd 01 00 00 00	 mov	 ebp, 1
  001ac	48 6b ed 05	 imul	 rbp, rbp, 5
  001b0	0f b6 ac 2c b8
	00 00 00	 movzx	 ebp, BYTE PTR psw$[rsp+rbp]
  001b8	41 be 01 00 00
	00		 mov	 r14d, 1
  001be	4d 6b f6 04	 imul	 r14, r14, 4
  001c2	46 0f b6 b4 34
	b8 00 00 00	 movzx	 r14d, BYTE PTR psw$[rsp+r14]
  001cb	41 bf 01 00 00
	00		 mov	 r15d, 1
  001d1	4d 6b ff 03	 imul	 r15, r15, 3
  001d5	46 0f b6 bc 3c
	b8 00 00 00	 movzx	 r15d, BYTE PTR psw$[rsp+r15]
  001de	41 bc 01 00 00
	00		 mov	 r12d, 1
  001e4	4d 6b e4 02	 imul	 r12, r12, 2
  001e8	46 0f b6 a4 24
	b8 00 00 00	 movzx	 r12d, BYTE PTR psw$[rsp+r12]
  001f1	41 bd 01 00 00
	00		 mov	 r13d, 1
  001f7	4d 6b ed 01	 imul	 r13, r13, 1
  001fb	46 0f b6 ac 2c
	b8 00 00 00	 movzx	 r13d, BYTE PTR psw$[rsp+r13]
  00204	44 89 ac 24 b0
	00 00 00	 mov	 DWORD PTR tv174[rsp], r13d
  0020c	41 bd 01 00 00
	00		 mov	 r13d, 1
  00212	4d 6b ed 00	 imul	 r13, r13, 0
  00216	46 0f b6 ac 2c
	b8 00 00 00	 movzx	 r13d, BYTE PTR psw$[rsp+r13]
  0021f	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  00226	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  0022d	89 94 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], edx
  00234	44 89 44 24 78	 mov	 DWORD PTR [rsp+120], r8d
  00239	44 89 4c 24 70	 mov	 DWORD PTR [rsp+112], r9d
  0023e	44 89 54 24 68	 mov	 DWORD PTR [rsp+104], r10d
  00243	44 89 5c 24 60	 mov	 DWORD PTR [rsp+96], r11d
  00248	89 5c 24 58	 mov	 DWORD PTR [rsp+88], ebx
  0024c	89 7c 24 50	 mov	 DWORD PTR [rsp+80], edi
  00250	89 74 24 48	 mov	 DWORD PTR [rsp+72], esi
  00254	89 6c 24 40	 mov	 DWORD PTR [rsp+64], ebp
  00258	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  0025d	44 89 7c 24 30	 mov	 DWORD PTR [rsp+48], r15d
  00262	44 89 64 24 28	 mov	 DWORD PTR [rsp+40], r12d
  00267	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv174[rsp]
  0026e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00272	45 8b cd	 mov	 r9d, r13d
  00275	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR cpu$[rsp]
  0027d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168188
  00284	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0028c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 94   :                 "CPU%4.4d,PSW,%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X\n"
; 95   :                 , cpu
; 96   :                 , psw[  0 ], psw[  1 ], psw[  2 ], psw[  3 ]
; 97   :                 , psw[  4 ], psw[  5 ], psw[  6 ], psw[  7 ]
; 98   :                 , psw[  8 ], psw[  9 ], psw[ 10 ], psw[ 11 ]
; 99   :                 , psw[ 12 ], psw[ 13 ], psw[ 14 ], psw[ 15 ]
; 100  :             );
; 101  :         }

  00294	e9 c8 00 00 00	 jmp	 $LN13@cgibin_bli
$LN12@cgibin_bli:

; 102  :         else
; 103  :         {
; 104  :             hprintf( webblk->sock,

  00299	b8 01 00 00 00	 mov	 eax, 1
  0029e	48 6b c0 07	 imul	 rax, rax, 7
  002a2	0f b6 84 04 b8
	00 00 00	 movzx	 eax, BYTE PTR psw$[rsp+rax]
  002aa	b9 01 00 00 00	 mov	 ecx, 1
  002af	48 6b c9 06	 imul	 rcx, rcx, 6
  002b3	0f b6 8c 0c b8
	00 00 00	 movzx	 ecx, BYTE PTR psw$[rsp+rcx]
  002bb	ba 01 00 00 00	 mov	 edx, 1
  002c0	48 6b d2 05	 imul	 rdx, rdx, 5
  002c4	0f b6 94 14 b8
	00 00 00	 movzx	 edx, BYTE PTR psw$[rsp+rdx]
  002cc	bb 01 00 00 00	 mov	 ebx, 1
  002d1	48 6b db 04	 imul	 rbx, rbx, 4
  002d5	0f b6 9c 1c b8
	00 00 00	 movzx	 ebx, BYTE PTR psw$[rsp+rbx]
  002dd	bf 01 00 00 00	 mov	 edi, 1
  002e2	48 6b ff 03	 imul	 rdi, rdi, 3
  002e6	0f b6 bc 3c b8
	00 00 00	 movzx	 edi, BYTE PTR psw$[rsp+rdi]
  002ee	be 01 00 00 00	 mov	 esi, 1
  002f3	48 6b f6 02	 imul	 rsi, rsi, 2
  002f7	0f b6 b4 34 b8
	00 00 00	 movzx	 esi, BYTE PTR psw$[rsp+rsi]
  002ff	bd 01 00 00 00	 mov	 ebp, 1
  00304	48 6b ed 01	 imul	 rbp, rbp, 1
  00308	0f b6 ac 2c b8
	00 00 00	 movzx	 ebp, BYTE PTR psw$[rsp+rbp]
  00310	41 b8 01 00 00
	00		 mov	 r8d, 1
  00316	4d 6b c0 00	 imul	 r8, r8, 0
  0031a	46 0f b6 84 04
	b8 00 00 00	 movzx	 r8d, BYTE PTR psw$[rsp+r8]
  00323	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00327	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0032b	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  0032f	89 5c 24 38	 mov	 DWORD PTR [rsp+56], ebx
  00333	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  00337	89 74 24 28	 mov	 DWORD PTR [rsp+40], esi
  0033b	89 6c 24 20	 mov	 DWORD PTR [rsp+32], ebp
  0033f	45 8b c8	 mov	 r9d, r8d
  00342	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR cpu$[rsp]
  0034a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168189
  00351	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00359	8b 08		 mov	 ecx, DWORD PTR [rax]
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN13@cgibin_bli:

; 105  :                 "CPU%4.4d,PSW,%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X\n"
; 106  :                 , cpu
; 107  :                 , psw[0], psw[1], psw[2], psw[3]
; 108  :                 , psw[4], psw[5], psw[6], psw[7]
; 109  :             );
; 110  :         }
; 111  : 
; 112  :         if (ARCH_900_IDX == regs->arch_mode)

  00361	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00369	83 78 64 02	 cmp	 DWORD PTR [rax+100], 2
  0036d	75 6f		 jne	 SHORT $LN14@cgibin_bli

; 113  :             for (gpr=0; gpr < 16; gpr++) hprintf( webblk->sock, "CPU%4.4d,GR%1.1X=%16.16"PRIX64"\n", cpu, gpr, (U64) regs->GR_G( gpr ));

  0036f	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR gpr$[rsp], 0
  0037a	eb 10		 jmp	 SHORT $LN7@cgibin_bli
$LN5@cgibin_bli:
  0037c	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR gpr$[rsp]
  00383	ff c0		 inc	 eax
  00385	89 84 24 a0 00
	00 00		 mov	 DWORD PTR gpr$[rsp], eax
$LN7@cgibin_bli:
  0038c	83 bc 24 a0 00
	00 00 10	 cmp	 DWORD PTR gpr$[rsp], 16
  00394	7d 46		 jge	 SHORT $LN6@cgibin_bli
  00396	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR gpr$[rsp]
  0039e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003a6	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  003ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b3	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR gpr$[rsp]
  003bb	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR cpu$[rsp]
  003c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168192
  003ca	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  003d2	8b 08		 mov	 ecx, DWORD PTR [rax]
  003d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  003da	eb a0		 jmp	 SHORT $LN5@cgibin_bli
$LN6@cgibin_bli:
  003dc	eb 6b		 jmp	 SHORT $LN15@cgibin_bli
$LN14@cgibin_bli:

; 114  :         else
; 115  :             for (gpr=0; gpr < 16; gpr++) hprintf( webblk->sock, "CPU%4.4d,GR%2.2d,%8.8"  PRIX32"\n", cpu, gpr, (U32) regs->GR_L( gpr ));

  003de	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR gpr$[rsp], 0
  003e9	eb 10		 jmp	 SHORT $LN10@cgibin_bli
$LN8@cgibin_bli:
  003eb	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR gpr$[rsp]
  003f2	ff c0		 inc	 eax
  003f4	89 84 24 a0 00
	00 00		 mov	 DWORD PTR gpr$[rsp], eax
$LN10@cgibin_bli:
  003fb	83 bc 24 a0 00
	00 00 10	 cmp	 DWORD PTR gpr$[rsp], 16
  00403	7d 44		 jge	 SHORT $LN9@cgibin_bli
  00405	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR gpr$[rsp]
  0040d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00415	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0041c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00420	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR gpr$[rsp]
  00428	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR cpu$[rsp]
  00430	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168193
  00437	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0043f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00441	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
  00447	eb a2		 jmp	 SHORT $LN8@cgibin_bli
$LN9@cgibin_bli:
$LN15@cgibin_bli:

; 116  :     }

  00449	e9 17 fc ff ff	 jmp	 $LN2@cgibin_bli
$LN3@cgibin_bli:

; 117  : }

  0044e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00456	48 33 cc	 xor	 rcx, rsp
  00459	e8 00 00 00 00	 call	 __security_check_cookie
  0045e	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00465	41 5f		 pop	 r15
  00467	41 5e		 pop	 r14
  00469	41 5d		 pop	 r13
  0046b	41 5c		 pop	 r12
  0046d	5f		 pop	 rdi
  0046e	5e		 pop	 rsi
  0046f	5d		 pop	 rbp
  00470	5b		 pop	 rbx
  00471	c3		 ret	 0
cgibin_blinkenlights_cpu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Release_Interrupt_Lock PROC

; 403  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Release_In:

; 404  :     UNREFERENCED( regs );

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@Release_In

; 405  :     sysblk.intowner = LOCK_OWNER_NONE;

  00014	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00020	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 406  :     hthread_release_lock( &sysblk.intlock, location );

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00034	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 407  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
Release_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Obtain_Interrupt_Lock PROC

; 379  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Obtain_Int

; 381  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Obtain_Int:

; 382  :     hthread_obtain_lock( &sysblk.intlock, location );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 383  :     Interrupt_Lock_Obtained( regs, location );

  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained

; 384  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Interrupt_Lock_Obtained PROC

; 347  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 348  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	0f 84 db 00 00
	00		 je	 $LN4@Interrupt_
$LN2@Interrupt_:

; 349  :     {
; 350  :         /* Wait for any SYNCHRONIZE_CPUS to finish before proceeding */
; 351  :         while (sysblk.syncing)

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8f 00 00
	00		 je	 $LN3@Interrupt_

; 352  :         {
; 353  :             /* Indicate we have reached the sync point */
; 354  :             sysblk.sync_mask &= ~HOSTREGS->cpubit;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00035	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0003c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00040	48 f7 d0	 not	 rax
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004a	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  00051	48 23 c8	 and	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005e	48 89 81 80 13
	00 00		 mov	 QWORD PTR [rcx+4992], rax

; 355  : 
; 356  :             /* If we're the last CPU to reach this sync point,
; 357  :                signal the CPU that requested the sync that it
; 358  :                may now safely proceed with its exclusive logic.
; 359  :             */
; 360  :             if (!sysblk.sync_mask)

  00065	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006c	48 83 b8 80 13
	00 00 00	 cmp	 QWORD PTR [rax+4992], 0
  00074	75 1b		 jne	 SHORT $LN6@Interrupt_

; 361  :                 hthread_signal_condition( &sysblk.all_synced_cond, location );

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007d	48 05 88 13 00
	00		 add	 rax, 5000		; 00001388H
  00083	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@Interrupt_:

; 362  : 
; 363  :             /* Wait for CPU that requested the sync to indicate
; 364  :                it's done and thus is now safe for us to proceed.
; 365  :             */
; 366  :             hthread_wait_condition( &sysblk.sync_done_cond, &sysblk.intlock, location );

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a5	48 81 c1 90 13
	00 00		 add	 rcx, 5008		; 00001390H
  000ac	4c 8b 44 24 38	 mov	 r8, QWORD PTR location$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 367  :         }

  000ba	e9 5b ff ff ff	 jmp	 $LN2@Interrupt_
$LN3@Interrupt_:

; 368  : 
; 369  :         HOSTREGS->intwait = false;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000c4	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000cb	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0

; 370  :         sysblk.intowner = HOSTREGS->cpuad;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e5	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  000ec	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 371  :     }

  000f3	eb 13		 jmp	 SHORT $LN5@Interrupt_
$LN4@Interrupt_:

; 372  :     else
; 373  :         sysblk.intowner = LOCK_OWNER_OTHER;

  000f5	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00101	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax
$LN5@Interrupt_:

; 374  : }

  00108	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010c	c3		 ret	 0
Interrupt_Lock_Obtained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
