; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	syntax
PUBLIC	main
EXTRN	__imp__errno:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_cckd_comp:PROC
EXTRN	__imp_cckd_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_is_dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$syntax DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$syntax
$pdata$main DD	imagerel $LN59
	DD	imagerel $LN59+2839
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159619 DB	'CCKD compress program', 00H
	ORG $+2
$SG159620 DB	'cckdcomp', 00H
	ORG $+3
$SG159633 DB	'open()', 00H
	ORG $+1
$SG159634 DB	'E', 00H
	ORG $+2
$SG159635 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159636 DB	'main', 00H
	ORG $+3
$SG159641 DB	'read()', 00H
	ORG $+1
$SG159642 DB	'E', 00H
	ORG $+2
$SG159637 DB	'cckdcomp.c', 00H
	ORG $+1
$SG159647 DB	'E', 00H
	ORG $+2
$SG159639 DB	'CKD header incomplete', 00H
	ORG $+2
$SG159643 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159644 DB	'main', 00H
	ORG $+3
$SG159654 DB	'E', 00H
	ORG $+2
$SG159645 DB	'cckdcomp.c', 00H
	ORG $+5
$SG159648 DB	'HHC02424%s Dasd image file format unsupported or unrecog'
	DB	'nized: %s', 0aH, 00H
	ORG $+1
$SG159649 DB	'main', 00H
	ORG $+3
$SG159660 DB	'read()', 00H
	ORG $+1
$SG159661 DB	'E', 00H
	ORG $+2
$SG159650 DB	'cckdcomp.c', 00H
	ORG $+1
$SG159666 DB	'E', 00H
	ORG $+2
$SG159653 DB	'lseek()', 00H
$SG159655 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159656 DB	'main', 00H
	ORG $+3
$SG159671 DB	'E', 00H
	ORG $+2
$SG159657 DB	'cckdcomp.c', 00H
	ORG $+1
$SG159678 DB	'I', 00H
	ORG $+2
$SG159659 DB	'incomplete', 00H
	ORG $+5
$SG159662 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159663 DB	'main', 00H
	ORG $+3
$SG159680 DB	'syntax', 00H
	ORG $+5
$SG159664 DB	'cckdcomp.c', 00H
	ORG $+5
$SG159667 DB	'HHC00352%s %1d:%04X CCKD file %s: opened bit is on, use '
	DB	'-f', 0aH, 00H
$SG159668 DB	'main', 00H
	ORG $+7
$SG159669 DB	'cckdcomp.c', 00H
	ORG $+5
$SG159672 DB	'HHC00353%s %1d:%04X CCKD file %s: check disk errors', 0aH
	DB	00H
	ORG $+3
$SG159673 DB	'main', 00H
	ORG $+3
$SG159674 DB	'cckdcomp.c', 00H
	ORG $+5
$SG159679 DB	'HHC02497%s Usage: %s [-f] [-level] file1 [file2 ... ]', 0aH
	DB	'HHC02497I   file    name of CCKD file', 0aH, 'HHC02497I Optio'
	DB	'ns:', 0aH, 'HHC02497I   -f      force check even if OPENED bi'
	DB	't is on', 0aH, 'HHC02497I   -0      minimal checking (default'
	DB	')', 0aH, 'HHC02497I   -1      normal  checking', 0aH, 'HHC024'
	DB	'97I   -2      intermediate checking', 0aH, 'HHC02497I   -3   '
	DB	'   maximal checking', 0aH, 00H
	ORG $+4
$SG159681 DB	'cckdcomp.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	021H
	DD	0aaaH
voltbl	ENDS
xdata	SEGMENT
$unwind$syntax DD 010901H
	DD	08209H
$unwind$main DD	032919H
	DD	041a0117H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	020c0H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcomp.c
_TEXT	SEGMENT
dev$ = 112
rc$ = 120
tv83 = 124
i$ = 128
tv184 = 132
tv212 = 136
tv218 = 140
force$ = 144
tv270 = 148
tv276 = 152
tv309 = 156
tv315 = 160
tv336 = 164
tv342 = 168
level$ = 172
tv364 = 176
tv370 = 180
tv178 = 184
pgm$ = 192
emsg$1 = 200
tv300 = 208
tv168 = 216
tv173 = 224
tv207 = 232
tv236 = 240
tv259 = 248
tv265 = 256
tv304 = 264
tv331 = 272
tv359 = 280
devhdr$ = 288
cdevhdr$ = 800
devblk$ = 1312
__$ArrayPad$ = 8384
argc$ = 8416
argv$ = 8424
main	PROC

; 28   : {

$LN59:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 d0 20 00 00	 mov	 eax, 8400		; 000020d0H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 c0
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 29   : char           *pgm;                    /* less any extension (.ext) */
; 30   : int             i;                      /* Index                     */
; 31   : int             rc;                     /* Return code               */
; 32   : int             level=-1;               /* Level for chkdsk          */

  00029	c7 84 24 ac 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR level$[rsp], -1

; 33   : int             force=0;                /* 1=Compress if OPENED set  */

  00034	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR force$[rsp], 0

; 34   : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 35   : CCKD_DEVHDR     cdevhdr;                /* Compressed CKD device hdr */
; 36   : DEVBLK          devblk;                 /* DEVBLK                    */
; 37   : DEVBLK         *dev=&devblk;            /* -> DEVBLK                 */

  0003f	48 8d 84 24 20
	05 00 00	 lea	 rax, QWORD PTR devblk$[rsp]
  00047	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 38   : 
; 39   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  0004c	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  00054	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159619
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159620
  00067	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006f	8b 8c 24 e0 20
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0007c	89 84 24 e0 20
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 40   : 
; 41   :     /* parse the arguments */
; 42   :     for (argc--, argv++ ; argc > 0 ; argc--, argv++)

  00083	8b 84 24 e0 20
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0008a	ff c8		 dec	 eax
  0008c	89 84 24 e0 20
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  00093	48 8b 84 24 e8
	20 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0009b	48 83 c0 08	 add	 rax, 8
  0009f	48 89 84 24 e8
	20 00 00	 mov	 QWORD PTR argv$[rsp], rax
  000a7	eb 24		 jmp	 SHORT $LN4@main
$LN2@main:
  000a9	8b 84 24 e0 20
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000b0	ff c8		 dec	 eax
  000b2	89 84 24 e0 20
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  000b9	48 8b 84 24 e8
	20 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000c1	48 83 c0 08	 add	 rax, 8
  000c5	48 89 84 24 e8
	20 00 00	 mov	 QWORD PTR argv$[rsp], rax
$LN4@main:
  000cd	83 bc 24 e0 20
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000d5	0f 8e 36 01 00
	00		 jle	 $LN3@main

; 43   :     {
; 44   :         if(**argv != '-') break;

  000db	48 8b 84 24 e8
	20 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e9	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  000ec	74 05		 je	 SHORT $LN10@main
  000ee	e9 1e 01 00 00	 jmp	 $LN3@main
$LN10@main:

; 45   : 
; 46   :         switch(argv[0][1])

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 00	 imul	 rax, rax, 0
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	48 6b c9 01	 imul	 rcx, rcx, 1
  00105	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0010d	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00111	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00115	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
  00119	8b 44 24 7c	 mov	 eax, DWORD PTR tv83[rsp]
  0011d	83 e8 30	 sub	 eax, 48			; 00000030H
  00120	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
  00124	83 7c 24 7c 36	 cmp	 DWORD PTR tv83[rsp], 54	; 00000036H
  00129	0f 87 cb 00 00
	00		 ja	 $LN19@main
  0012f	48 63 44 24 7c	 movsxd	 rax, DWORD PTR tv83[rsp]
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0013b	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN57@main[rcx+rax]
  00143	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN58@main[rcx+rax*4]
  0014a	48 03 c1	 add	 rax, rcx
  0014d	ff e0		 jmp	 rax
$LN11@main:
$LN12@main:
$LN13@main:
$LN14@main:
$LN15@main:

; 47   :         {
; 48   :             case '0':
; 49   :             case '1':
; 50   :             case '2':
; 51   :             case '3':
; 52   :             case '4':  if (argv[0][2] != '\0') return syntax( pgm );

  0014f	b8 08 00 00 00	 mov	 eax, 8
  00154	48 6b c0 00	 imul	 rax, rax, 0
  00158	b9 01 00 00 00	 mov	 ecx, 1
  0015d	48 6b c9 02	 imul	 rcx, rcx, 2
  00161	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00169	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0016d	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00171	85 c0		 test	 eax, eax
  00173	74 12		 je	 SHORT $LN16@main
  00175	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0017d	e8 00 00 00 00	 call	 syntax
  00182	e9 23 09 00 00	 jmp	 $LN1@main
$LN16@main:

; 53   :                        level = (argv[0][1] & 0xf);

  00187	b8 08 00 00 00	 mov	 eax, 8
  0018c	48 6b c0 00	 imul	 rax, rax, 0
  00190	b9 01 00 00 00	 mov	 ecx, 1
  00195	48 6b c9 01	 imul	 rcx, rcx, 1
  00199	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001a1	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001a5	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001a9	83 e0 0f	 and	 eax, 15
  001ac	89 84 24 ac 00
	00 00		 mov	 DWORD PTR level$[rsp], eax

; 54   :                        break;

  001b3	eb 57		 jmp	 SHORT $LN5@main
$LN17@main:

; 55   :             case 'f':  if (argv[0][2] != '\0') return syntax( pgm );

  001b5	b8 08 00 00 00	 mov	 eax, 8
  001ba	48 6b c0 00	 imul	 rax, rax, 0
  001be	b9 01 00 00 00	 mov	 ecx, 1
  001c3	48 6b c9 02	 imul	 rcx, rcx, 2
  001c7	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001cf	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001d3	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001d7	85 c0		 test	 eax, eax
  001d9	74 12		 je	 SHORT $LN18@main
  001db	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001e3	e8 00 00 00 00	 call	 syntax
  001e8	e9 bd 08 00 00	 jmp	 $LN1@main
$LN18@main:

; 56   :                        force = 1;

  001ed	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR force$[rsp], 1

; 57   :                        break;

  001f8	eb 12		 jmp	 SHORT $LN5@main
$LN19@main:

; 58   :             default:   return syntax( pgm );

  001fa	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00202	e8 00 00 00 00	 call	 syntax
  00207	e9 9e 08 00 00	 jmp	 $LN1@main
$LN5@main:

; 59   :         }
; 60   :     }

  0020c	e9 98 fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 61   : 
; 62   :     if (argc < 1) return syntax( pgm );

  00211	83 bc 24 e0 20
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00219	7d 12		 jge	 SHORT $LN20@main
  0021b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00223	e8 00 00 00 00	 call	 syntax
  00228	e9 7d 08 00 00	 jmp	 $LN1@main
$LN20@main:

; 63   : 
; 64   :     for (i = 0; i < argc; i++)

  0022d	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00238	eb 10		 jmp	 SHORT $LN9@main
$LN7@main:
  0023a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00241	ff c0		 inc	 eax
  00243	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  0024a	8b 84 24 e0 20
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00251	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00258	0f 8d 4a 08 00
	00		 jge	 $LN8@main

; 65   :     {
; 66   :         memset (dev, 0, sizeof(DEVBLK));

  0025e	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dev$[rsp]
  00263	33 c0		 xor	 eax, eax
  00265	b9 a0 1b 00 00	 mov	 ecx, 7072		; 00001ba0H
  0026a	f3 aa		 rep stosb

; 67   :         dev->batch = 1;

  0026c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00271	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00277	0f ba e8 0a	 bts	 eax, 10
  0027b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00280	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 68   : 
; 69   :         /* open the file */
; 70   :         hostpath(dev->filename, argv[i], sizeof(dev->filename));

  00286	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0028e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00293	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0029a	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  002a0	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  002a8	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  002ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 71   :         dev->fd = HOPEN (dev->filename, O_RDWR|O_BINARY);

  002b2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002b7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002bd	ba 02 80 00 00	 mov	 edx, 32770		; 00008002H
  002c2	48 8b c8	 mov	 rcx, rax
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  002cb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  002d0	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 72   :         if (dev->fd < 0)

  002d6	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002db	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  002e2	0f 8d fe 00 00
	00		 jge	 $LN21@main

; 73   :         {
; 74   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 75   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  002e8	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  002ee	74 12		 je	 SHORT $LN31@main
  002f0	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002f5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  002f9	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv178[rsp], eax
  00300	eb 0b		 jmp	 SHORT $LN32@main
$LN31@main:
  00302	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv178[rsp], 0
$LN32@main:
  0030d	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00313	74 14		 je	 SHORT $LN33@main
  00315	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0031a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0031e	d1 f8		 sar	 eax, 1
  00320	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  00327	eb 0b		 jmp	 SHORT $LN34@main
$LN33@main:
  00329	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
$LN34@main:
  00334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0033a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00342	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv168[rsp], rax
  0034a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0034f	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00356	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv173[rsp], rcx
  0035e	b9 02 00 00 00	 mov	 ecx, 2
  00363	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00369	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv168[rsp]
  00371	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159633
  0037d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00382	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv173[rsp]
  0038a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0038f	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv178[rsp]
  00396	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0039a	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  003a1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159634
  003ac	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159635
  003b8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159636
  003cf	ba 4c 00 00 00	 mov	 edx, 76			; 0000004cH
  003d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159637
  003db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 76   :                     "open()", strerror( errno ));
; 77   :             continue;

  003e1	e9 54 fe ff ff	 jmp	 $LN7@main
$LN21@main:

; 78   :         }
; 79   : 
; 80   :         /* Read the device header */
; 81   :         rc = read (dev->fd, &devhdr, CKD_DEVHDR_SIZE);

  003e6	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  003ec	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  003f4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  003f9	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  003ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00405	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 82   :         if (rc < (int)CKD_DEVHDR_SIZE)

  00409	81 7c 24 78 00
	02 00 00	 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  00411	0f 8d 24 01 00
	00		 jge	 $LN22@main

; 83   :         {
; 84   :             const char* emsg = "CKD header incomplete";

  00417	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159639
  0041e	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax

; 85   :             if (rc < 0)

  00426	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0042b	7d 16		 jge	 SHORT $LN23@main

; 86   :                 emsg = strerror( errno );

  0042d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00433	8b 08		 mov	 ecx, DWORD PTR [rax]
  00435	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0043b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax
$LN23@main:

; 87   : 
; 88   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 89   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  00443	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00449	74 12		 je	 SHORT $LN35@main
  0044b	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00450	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00454	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv212[rsp], eax
  0045b	eb 0b		 jmp	 SHORT $LN36@main
$LN35@main:
  0045d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv212[rsp], 0
$LN36@main:
  00468	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0046e	74 14		 je	 SHORT $LN37@main
  00470	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00475	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00479	d1 f8		 sar	 eax, 1
  0047b	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv218[rsp], eax
  00482	eb 0b		 jmp	 SHORT $LN38@main
$LN37@main:
  00484	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
$LN38@main:
  0048f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00494	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0049a	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv207[rsp], rax
  004a2	b9 02 00 00 00	 mov	 ecx, 2
  004a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004ad	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR emsg$1[rsp]
  004b5	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  004ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159641
  004c1	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  004c6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv207[rsp]
  004ce	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004d3	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv212[rsp]
  004da	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004de	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv218[rsp]
  004e5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  004e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  004f0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159643
  004fc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00501	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00506	41 b9 03 00 00
	00		 mov	 r9d, 3
  0050c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159644
  00513	ba 5a 00 00 00	 mov	 edx, 90			; 0000005aH
  00518	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159645
  0051f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 90   :                     "read()", emsg );
; 91   :             close( dev->fd );

  00525	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0052a	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00530	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 92   :             continue;

  00536	e9 ff fc ff ff	 jmp	 $LN7@main
$LN22@main:

; 93   :         }
; 94   : 
; 95   :         /* Check the device header identifier */
; 96   :         if (!is_dh_devid_typ( devhdr.dh_devid, ANY32_CMP_OR_SF_TYP ))

  0053b	ba 00 60 00 60	 mov	 edx, 1610637312		; 60006000H
  00540	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  00548	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  0054e	0f b6 c0	 movzx	 eax, al
  00551	85 c0		 test	 eax, eax
  00553	75 7d		 jne	 SHORT $LN24@main

; 97   :         {
; 98   :             // "Dasd image file format unsupported or unrecognized: %s"
; 99   :             FWRMSG( stderr, HHC02424, "E", dev->filename );

  00555	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0055a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00560	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv236[rsp], rax
  00568	b9 02 00 00 00	 mov	 ecx, 2
  0056d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00573	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv236[rsp]
  0057b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00580	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  00587	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0058c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  00593	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00598	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0059d	41 b9 03 00 00
	00		 mov	 r9d, 3
  005a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159649
  005aa	ba 63 00 00 00	 mov	 edx, 99			; 00000063H
  005af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  005b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 100  :             close( dev->fd );

  005bc	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005c1	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  005c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 101  :             continue;

  005cd	e9 68 fc ff ff	 jmp	 $LN7@main
$LN24@main:

; 102  :         }
; 103  :         dev->cckd64 = 0;

  005d2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005d7	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  005de	24 fe		 and	 al, 254			; 000000feH
  005e0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  005e5	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 104  : 
; 105  :         /* Check CCKD_OPT_OPENED bit if -f not specified */
; 106  :         if (!force)

  005eb	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR force$[rsp], 0
  005f3	0f 85 91 03 00
	00		 jne	 $LN25@main

; 107  :         {
; 108  :             if (lseek (dev->fd, CCKD_DEVHDR_POS, SEEK_SET) < 0)

  005f9	45 33 c0	 xor	 r8d, r8d
  005fc	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00601	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00606	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0060c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00612	48 85 c0	 test	 rax, rax
  00615	0f 8d 18 01 00
	00		 jge	 $LN26@main

; 109  :             {
; 110  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 111  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0061b	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00621	74 12		 je	 SHORT $LN39@main
  00623	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00628	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0062c	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv270[rsp], eax
  00633	eb 0b		 jmp	 SHORT $LN40@main
$LN39@main:
  00635	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv270[rsp], 0
$LN40@main:
  00640	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00646	74 14		 je	 SHORT $LN41@main
  00648	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0064d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00651	d1 f8		 sar	 eax, 1
  00653	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv276[rsp], eax
  0065a	eb 0b		 jmp	 SHORT $LN42@main
$LN41@main:
  0065c	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv276[rsp], 0
$LN42@main:
  00667	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0066d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0066f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00675	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv259[rsp], rax
  0067d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00682	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00689	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv265[rsp], rcx
  00691	b9 02 00 00 00	 mov	 ecx, 2
  00696	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0069c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv259[rsp]
  006a4	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  006a9	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  006b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  006b9	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  006be	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv265[rsp]
  006c6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006cb	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv270[rsp]
  006d2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006d6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv276[rsp]
  006dd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  006e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159654
  006e8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159655
  006f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00704	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159656
  0070b	ba 70 00 00 00	 mov	 edx, 112		; 00000070H
  00710	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159657
  00717	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 112  :                         "lseek()", (U64)CCKD_DEVHDR_POS, strerror( errno ));
; 113  :                 close (dev->fd);

  0071d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00722	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00728	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 114  :                 continue;

  0072e	e9 07 fb ff ff	 jmp	 $LN7@main
$LN26@main:

; 115  :             }
; 116  :             if ((rc = read (dev->fd, &cdevhdr, CCKD_DEVHDR_SIZE)) < CCKD_DEVHDR_SIZE)

  00733	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00739	48 8d 94 24 20
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00741	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00746	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0074c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00752	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00756	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  0075b	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00761	0f 8d 2f 01 00
	00		 jge	 $LN27@main

; 117  :             {
; 118  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 119  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00767	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0076c	7d 18		 jge	 SHORT $LN43@main
  0076e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00774	8b 08		 mov	 ecx, DWORD PTR [rax]
  00776	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0077c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv300[rsp], rax
  00784	eb 0f		 jmp	 SHORT $LN44@main
$LN43@main:
  00786	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159659
  0078d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv300[rsp], rax
$LN44@main:
  00795	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0079b	74 12		 je	 SHORT $LN45@main
  0079d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007a2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  007a6	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv309[rsp], eax
  007ad	eb 0b		 jmp	 SHORT $LN46@main
$LN45@main:
  007af	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv309[rsp], 0
$LN46@main:
  007ba	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  007c0	74 14		 je	 SHORT $LN47@main
  007c2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007c7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  007cb	d1 f8		 sar	 eax, 1
  007cd	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv315[rsp], eax
  007d4	eb 0b		 jmp	 SHORT $LN48@main
$LN47@main:
  007d6	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv315[rsp], 0
$LN48@main:
  007e1	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007e6	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  007ec	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv304[rsp], rax
  007f4	b9 02 00 00 00	 mov	 ecx, 2
  007f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007ff	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv300[rsp]
  00807	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0080c	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00815	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159660
  0081c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00821	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv304[rsp]
  00829	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0082e	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv309[rsp]
  00835	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00839	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv315[rsp]
  00840	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00844	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159661
  0084b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00850	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159662
  00857	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0085c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00861	41 b9 03 00 00
	00		 mov	 r9d, 3
  00867	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159663
  0086e	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  00873	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159664
  0087a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 120  :                         "read()", (U64)CCKD_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 121  :                 close (dev->fd);

  00880	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00885	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0088b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 122  :                 continue;

  00891	e9 a4 f9 ff ff	 jmp	 $LN7@main
$LN27@main:

; 123  :             }
; 124  :             if (cdevhdr.cdh_opts & CCKD_OPT_OPENED)

  00896	0f b6 84 24 23
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  0089e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  008a3	85 c0		 test	 eax, eax
  008a5	0f 84 df 00 00
	00		 je	 $LN28@main

; 125  :             {
; 126  :                 // "%1d:%04X CCKD file %s: opened bit is on, use -f"
; 127  :                 FWRMSG( stderr, HHC00352, "E", LCSS_DEVNUM, dev->filename );

  008ab	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  008b1	74 12		 je	 SHORT $LN49@main
  008b3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008b8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  008bc	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv336[rsp], eax
  008c3	eb 0b		 jmp	 SHORT $LN50@main
$LN49@main:
  008c5	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv336[rsp], 0
$LN50@main:
  008d0	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  008d6	74 14		 je	 SHORT $LN51@main
  008d8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008dd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  008e1	d1 f8		 sar	 eax, 1
  008e3	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv342[rsp], eax
  008ea	eb 0b		 jmp	 SHORT $LN52@main
$LN51@main:
  008ec	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv342[rsp], 0
$LN52@main:
  008f7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008fc	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00902	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv331[rsp], rax
  0090a	b9 02 00 00 00	 mov	 ecx, 2
  0090f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00915	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv331[rsp]
  0091d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00922	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv336[rsp]
  00929	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0092d	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv342[rsp]
  00934	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00938	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159666
  0093f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159667
  0094b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00950	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00955	41 b9 03 00 00
	00		 mov	 r9d, 3
  0095b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159668
  00962	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159669
  0096e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 128  :                 close (dev->fd);

  00974	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00979	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0097f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 129  :                 continue;

  00985	e9 b0 f8 ff ff	 jmp	 $LN7@main
$LN28@main:
$LN25@main:

; 130  :             }
; 131  :         } /* if (!force) */
; 132  : 
; 133  :         /* call chkdsk */
; 134  :         if (cckd_chkdsk (dev, level) < 0)

  0098a	8b 94 24 ac 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00991	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00996	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_chkdsk
  0099c	85 c0		 test	 eax, eax
  0099e	0f 8d df 00 00
	00		 jge	 $LN29@main

; 135  :         {
; 136  :             FWRMSG( stderr, HHC00353, "E", LCSS_DEVNUM, dev->filename );

  009a4	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  009aa	74 12		 je	 SHORT $LN53@main
  009ac	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009b1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  009b5	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv364[rsp], eax
  009bc	eb 0b		 jmp	 SHORT $LN54@main
$LN53@main:
  009be	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv364[rsp], 0
$LN54@main:
  009c9	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  009cf	74 14		 je	 SHORT $LN55@main
  009d1	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009d6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  009da	d1 f8		 sar	 eax, 1
  009dc	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv370[rsp], eax
  009e3	eb 0b		 jmp	 SHORT $LN56@main
$LN55@main:
  009e5	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv370[rsp], 0
$LN56@main:
  009f0	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009f5	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  009fb	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv359[rsp], rax
  00a03	b9 02 00 00 00	 mov	 ecx, 2
  00a08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a0e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv359[rsp]
  00a16	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00a1b	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv364[rsp]
  00a22	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00a26	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv370[rsp]
  00a2d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00a31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159671
  00a38	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159672
  00a44	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a49	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a4e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a54	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159673
  00a5b	ba 88 00 00 00	 mov	 edx, 136		; 00000088H
  00a60	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159674
  00a67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 137  :             close (dev->fd);

  00a6d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a72	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00a78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 138  :             continue;

  00a7e	e9 b7 f7 ff ff	 jmp	 $LN7@main
$LN29@main:

; 139  :         }
; 140  : 
; 141  :         /* call compress */
; 142  :         rc = cckd_comp (dev);

  00a83	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00a88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_comp
  00a8e	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 143  : 
; 144  :         close (dev->fd);

  00a92	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a97	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00a9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 145  : 
; 146  :     } /* for each arg */

  00aa3	e9 92 f7 ff ff	 jmp	 $LN7@main
$LN8@main:

; 147  : 
; 148  :     return 0;

  00aa8	33 c0		 xor	 eax, eax
$LN1@main:

; 149  : }

  00aaa	48 8b 8c 24 c0
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00ab2	48 33 cc	 xor	 rcx, rsp
  00ab5	e8 00 00 00 00	 call	 __security_check_cookie
  00aba	48 81 c4 d0 20
	00 00		 add	 rsp, 8400		; 000020d0H
  00ac1	5f		 pop	 rdi
  00ac2	c3		 ret	 0
  00ac3	90		 npad	 1
$LN58@main:
  00ac4	00 00 00 00	 DD	 $LN11@main
  00ac8	00 00 00 00	 DD	 $LN12@main
  00acc	00 00 00 00	 DD	 $LN13@main
  00ad0	00 00 00 00	 DD	 $LN14@main
  00ad4	00 00 00 00	 DD	 $LN15@main
  00ad8	00 00 00 00	 DD	 $LN17@main
  00adc	00 00 00 00	 DD	 $LN19@main
$LN57@main:
  00ae0	00		 DB	 0
  00ae1	01		 DB	 1
  00ae2	02		 DB	 2
  00ae3	03		 DB	 3
  00ae4	04		 DB	 4
  00ae5	06		 DB	 6
  00ae6	06		 DB	 6
  00ae7	06		 DB	 6
  00ae8	06		 DB	 6
  00ae9	06		 DB	 6
  00aea	06		 DB	 6
  00aeb	06		 DB	 6
  00aec	06		 DB	 6
  00aed	06		 DB	 6
  00aee	06		 DB	 6
  00aef	06		 DB	 6
  00af0	06		 DB	 6
  00af1	06		 DB	 6
  00af2	06		 DB	 6
  00af3	06		 DB	 6
  00af4	06		 DB	 6
  00af5	06		 DB	 6
  00af6	06		 DB	 6
  00af7	06		 DB	 6
  00af8	06		 DB	 6
  00af9	06		 DB	 6
  00afa	06		 DB	 6
  00afb	06		 DB	 6
  00afc	06		 DB	 6
  00afd	06		 DB	 6
  00afe	06		 DB	 6
  00aff	06		 DB	 6
  00b00	06		 DB	 6
  00b01	06		 DB	 6
  00b02	06		 DB	 6
  00b03	06		 DB	 6
  00b04	06		 DB	 6
  00b05	06		 DB	 6
  00b06	06		 DB	 6
  00b07	06		 DB	 6
  00b08	06		 DB	 6
  00b09	06		 DB	 6
  00b0a	06		 DB	 6
  00b0b	06		 DB	 6
  00b0c	06		 DB	 6
  00b0d	06		 DB	 6
  00b0e	06		 DB	 6
  00b0f	06		 DB	 6
  00b10	06		 DB	 6
  00b11	06		 DB	 6
  00b12	06		 DB	 6
  00b13	06		 DB	 6
  00b14	06		 DB	 6
  00b15	06		 DB	 6
  00b16	05		 DB	 5
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcomp.c
_TEXT	SEGMENT
pgm$ = 80
syntax	PROC

; 156  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 157  :     WRMSG( HHC02497, "I", pgm );

  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159679
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159680
  00048	ba 9d 00 00 00	 mov	 edx, 157		; 0000009dH
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159681
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 158  :     return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1

; 159  : }

  0005f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00063	c3		 ret	 0
syntax	ENDP
_TEXT	ENDS
END
