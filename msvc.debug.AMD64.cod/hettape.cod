; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	open_het
PUBLIC	close_het
PUBLIC	passedeot_het
PUBLIC	rewind_het
PUBLIC	write_hetmark
PUBLIC	sync_het
PUBLIC	fsb_het
PUBLIC	bsb_het
PUBLIC	fsf_het
PUBLIC	bsf_het
PUBLIC	read_het
PUBLIC	write_het
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp__chsize_s:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_het_open:PROC
EXTRN	__imp_het_close:PROC
EXTRN	__imp_het_read:PROC
EXTRN	__imp_het_write:PROC
EXTRN	__imp_het_tapemark:PROC
EXTRN	__imp_het_sync:PROC
EXTRN	__imp_het_cntl:PROC
EXTRN	__imp_het_bsb:PROC
EXTRN	__imp_het_fsb:PROC
EXTRN	__imp_het_bsf:PROC
EXTRN	__imp_het_fsf:PROC
EXTRN	__imp_het_rewind:PROC
EXTRN	__imp_het_error:PROC
EXTRN	__imp_het_tell:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	build_senseX:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$open_het DD imagerel $LN25
	DD	imagerel $LN25+1500
	DD	imagerel $unwind$open_het
$pdata$close_het DD imagerel $LN10
	DD	imagerel $LN10+436
	DD	imagerel $unwind$close_het
$pdata$passedeot_het DD imagerel $LN6
	DD	imagerel $LN6+162
	DD	imagerel $unwind$passedeot_het
$pdata$rewind_het DD imagerel $LN8
	DD	imagerel $LN8+560
	DD	imagerel $unwind$rewind_het
$pdata$write_hetmark DD imagerel $LN9
	DD	imagerel $LN9+593
	DD	imagerel $unwind$write_hetmark
$pdata$sync_het DD imagerel $LN10
	DD	imagerel $LN10+415
	DD	imagerel $unwind$sync_het
$pdata$fsb_het DD imagerel $LN17
	DD	imagerel $LN17+918
	DD	imagerel $unwind$fsb_het
$pdata$bsb_het DD imagerel $LN10
	DD	imagerel $LN10+655
	DD	imagerel $unwind$bsb_het
$pdata$fsf_het DD imagerel $LN10
	DD	imagerel $LN10+588
	DD	imagerel $unwind$fsf_het
$pdata$bsf_het DD imagerel $LN28
	DD	imagerel $LN28+931
	DD	imagerel $unwind$bsf_het
$pdata$read_het DD imagerel $LN14
	DD	imagerel $LN14+954
	DD	imagerel $unwind$read_het
$pdata$write_het DD imagerel $LN35
	DD	imagerel $LN35+1662
	DD	imagerel $unwind$write_het
pdata	ENDS
_DATA	SEGMENT
$SG169208 DB	'*', 00H
	ORG $+6
$SG169215 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169216 DB	'het_open()', 00H
	ORG $+1
$SG169217 DB	'het', 00H
$SG169218 DB	'E', 00H
	ORG $+2
$SG169222 DB	'*', 00H
	ORG $+2
$SG169226 DB	'het', 00H
	ORG $+4
$SG169219 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169220 DB	'open_het', 00H
	ORG $+3
$SG169227 DB	'I', 00H
	ORG $+2
$SG169221 DB	'hettape.c', 00H
	ORG $+2
$SG169238 DB	'het', 00H
$SG169228 DB	'HHC00235%s %1d:%04X Tape file %s, type %s: tape created', 0aH
	DB	00H
	ORG $+3
$SG169239 DB	'I', 00H
	ORG $+2
$SG169229 DB	'open_het', 00H
	ORG $+3
$SG169243 DB	'*', 00H
	ORG $+2
$SG169230 DB	'hettape.c', 00H
	ORG $+2
$SG169256 DB	'het', 00H
$SG169240 DB	'HHC00201%s %1d:%04X Tape file %s, type %s: tape closed', 0aH
	DB	00H
$SG169241 DB	'close_het', 00H
	ORG $+2
$SG169257 DB	'E', 00H
	ORG $+2
$SG169242 DB	'hettape.c', 00H
	ORG $+2
$SG169279 DB	'het', 00H
$SG169254 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169255 DB	'het_rewind()', 00H
	ORG $+3
$SG169277 DB	'end of file (uninitialized tape)', 00H
	ORG $+7
$SG169258 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169259 DB	'rewind_het', 00H
	ORG $+1
$SG169280 DB	'E', 00H
	ORG $+2
$SG169260 DB	'hettape.c', 00H
	ORG $+2
$SG169286 DB	'het', 00H
$SG169278 DB	'het_read()', 00H
	ORG $+5
$SG169284 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169281 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169287 DB	'E', 00H
	ORG $+2
$SG169282 DB	'read_het', 00H
	ORG $+3
$SG169318 DB	'het', 00H
$SG169283 DB	'hettape.c', 00H
	ORG $+2
$SG169319 DB	'E', 00H
	ORG $+2
$SG169285 DB	'het_read()', 00H
	ORG $+5
$SG169288 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169327 DB	'het', 00H
$SG169289 DB	'read_het', 00H
	ORG $+3
$SG169328 DB	'I', 00H
	ORG $+2
$SG169290 DB	'hettape.c', 00H
	ORG $+2
$SG169335 DB	'het', 00H
$SG169316 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169317 DB	'het_write()', 00H
$SG169336 DB	'I', 00H
	ORG $+2
$SG169361 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169320 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169363 DB	'het', 00H
$SG169321 DB	'write_het', 00H
	ORG $+2
$SG169364 DB	'E', 00H
	ORG $+2
$SG169322 DB	'hettape.c', 00H
	ORG $+6
$SG169329 DB	'HHC00208%s %1d:%04X Tape file %s, type %s: maximum tape '
	DB	'capacity exceeded', 0aH, 00H
	ORG $+1
$SG169380 DB	'het', 00H
$SG169330 DB	'write_het', 00H
	ORG $+2
$SG169381 DB	'E', 00H
	ORG $+2
$SG169331 DB	'hettape.c', 00H
	ORG $+6
$SG169337 DB	'HHC00209%s %1d:%04X Tape file %s, type %s: maximum tape '
	DB	'capacity enforced', 0aH, 00H
	ORG $+1
$SG169401 DB	'het', 00H
$SG169338 DB	'write_het', 00H
	ORG $+2
$SG169402 DB	'E', 00H
	ORG $+2
$SG169339 DB	'hettape.c', 00H
	ORG $+2
$SG169407 DB	'het', 00H
$SG169341 DB	'write_het', 00H
	ORG $+2
$SG169408 DB	'E', 00H
	ORG $+2
$SG169342 DB	'hettape.c', 00H
	ORG $+6
$SG169343 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169345 DB	'write_het', 00H
	ORG $+2
$SG169429 DB	'het', 00H
$SG169346 DB	'hettape.c', 00H
	ORG $+6
$SG169362 DB	'het_tapemark()', 00H
	ORG $+1
$SG169397 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169347 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169366 DB	'write_hetmark', 00H
	ORG $+2
$SG169404 DB	'fsb_het', 00H
$SG169365 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169430 DB	'E', 00H
	ORG $+2
$SG169367 DB	'hettape.c', 00H
	ORG $+2
$SG169447 DB	'het', 00H
$SG169379 DB	'het_sync()', 00H
	ORG $+5
$SG169382 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169383 DB	'sync_het', 00H
	ORG $+3
$SG169448 DB	'E', 00H
	ORG $+2
$SG169384 DB	'hettape.c', 00H
	ORG $+2
$SG169496 DB	'het', 00H
$SG169400 DB	'het_fsb()', 00H
	ORG $+6
$SG169410 DB	'fsb_het', 00H
$SG169403 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169497 DB	'E', 00H
	ORG $+2
$SG169405 DB	'hettape.c', 00H
	ORG $+6
$SG169406 DB	'het_fsb()', 00H
	ORG $+6
$SG169409 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169411 DB	'hettape.c', 00H
	ORG $+6
$SG169427 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169428 DB	'het_bsb()', 00H
	ORG $+6
$SG169431 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169432 DB	'bsb_het', 00H
$SG169433 DB	'hettape.c', 00H
	ORG $+6
$SG169445 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169446 DB	'het_fsf()', 00H
	ORG $+6
$SG169449 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169450 DB	'fsf_het', 00H
$SG169451 DB	'hettape.c', 00H
	ORG $+6
$SG169485 DB	'bsf_het', 00H
$SG169486 DB	'hettape.c', 00H
	ORG $+6
$SG169487 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169489 DB	'bsf_het', 00H
$SG169490 DB	'hettape.c', 00H
	ORG $+6
$SG169491 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169494 DB	'Het error ''%s'': ''%s''', 00H
	ORG $+3
$SG169495 DB	'het_bsf()', 00H
	ORG $+6
$SG169498 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169499 DB	'bsf_het', 00H
$SG169500 DB	'hettape.c', 00H
	ORG $+6
$SG169503 DB	'bsf_het', 00H
$SG169504 DB	'hettape.c', 00H
	ORG $+6
$SG169505 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169507 DB	'bsf_het', 00H
$SG169508 DB	'hettape.c', 00H
	ORG $+6
$SG169509 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:write_het
	DD	025H
	DD	0666H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:read_het
	DD	025H
	DD	03a2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:bsf_het
	DD	020H
	DD	038bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fsf_het
	DD	020H
	DD	0234H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:bsb_het
	DD	020H
	DD	0277H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fsb_het
	DD	020H
	DD	037eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:write_hetmark
	DD	020H
	DD	0239H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rewind_het
	DD	020H
	DD	0218H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:open_het
	DD	020H
	DD	05c4H
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$open_het DD 022819H
	DD	04b0116H
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$close_het DD 010901H
	DD	0e209H
$unwind$passedeot_het DD 010901H
	DD	06209H
$unwind$rewind_het DD 022819H
	DD	0250116H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$write_hetmark DD 022819H
	DD	0270116H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$sync_het DD 021601H
	DD	0130116H
$unwind$fsb_het DD 022819H
	DD	0290116H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$bsb_het DD 022819H
	DD	0270116H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$fsf_het DD 022819H
	DD	0270116H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$bsf_het DD 022819H
	DD	0270116H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$read_het DD 022d19H
	DD	029011bH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$write_het DD 022d19H
	DD	02b011bH
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv143 = 116
tv149 = 120
tv185 = 124
tv191 = 128
tv220 = 132
tv226 = 136
cursize$ = 144
tv90 = 152
tv134 = 160
tv138 = 168
tv180 = 176
tv215 = 184
msgbuf$1 = 192
__$ArrayPad$ = 320
dev$ = 352
buf$ = 360
blklen$ = 368
unitstat$ = 376
code$ = 384
write_het PROC

; 233  : {

$LN35:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 234  : int             rc;                     /* Return code               */
; 235  : off_t           cursize;                /* Current size for size chk */
; 236  : 
; 237  :     if (dev->hetb->writeprotect)

  0002d	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00035	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0003c	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0003f	83 e0 01	 and	 eax, 1
  00042	85 c0		 test	 eax, eax
  00044	74 2d		 je	 SHORT $LN8@write_het

; 238  :     {
; 239  :         build_senseX( TAPE_BSENSE_WRITEPROTECT, dev, unitstat, code );

  00046	44 0f b6 8c 24
	80 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0004f	4c 8b 84 24 78
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00057	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0005f	b9 06 00 00 00	 mov	 ecx, 6
  00064	e8 00 00 00 00	 call	 build_senseX

; 240  :             return -1;

  00069	b8 ff ff ff ff	 mov	 eax, -1
  0006e	e9 f3 05 00 00	 jmp	 $LN1@write_het
$LN8@write_het:

; 241  :     }
; 242  : 
; 243  :     /* Check if we have already violated the size limit */
; 244  :     if (dev->tdparms.maxsize > 0)

  00073	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007b	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  00083	7e 63		 jle	 SHORT $LN9@write_het

; 245  :     {
; 246  :         if ((cursize = het_tell( dev->hetb )) >= dev->tdparms.maxsize)

  00085	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0008d	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tell
  0009a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR cursize$[rsp], rax
  000a2	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000aa	48 8b 80 38 10
	00 00		 mov	 rax, QWORD PTR [rax+4152]
  000b1	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR cursize$[rsp], rax
  000b9	7c 2d		 jl	 SHORT $LN10@write_het

; 247  :         {
; 248  :             build_senseX( TAPE_BSENSE_ENDOFTAPE, dev, unitstat, code );

  000bb	44 0f b6 8c 24
	80 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  000c4	4c 8b 84 24 78
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  000cc	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  000d4	b9 08 00 00 00	 mov	 ecx, 8
  000d9	e8 00 00 00 00	 call	 build_senseX

; 249  :             return -1;

  000de	b8 ff ff ff ff	 mov	 eax, -1
  000e3	e9 7e 05 00 00	 jmp	 $LN1@write_het
$LN10@write_het:
$LN9@write_het:

; 250  :         }
; 251  :     }
; 252  : 
; 253  :     /* Write the data block */
; 254  :     if ((rc = het_write( dev->hetb, buf, blklen )) < 0)

  000e8	44 8b 84 24 70
	01 00 00	 mov	 r8d, DWORD PTR blklen$[rsp]
  000f0	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  000f8	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00100	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_write
  0010d	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax
  00111	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00116	0f 8d 8a 01 00
	00		 jge	 $LN11@write_het

; 255  :     {
; 256  :         /* Handle write error condition */
; 257  :         char msgbuf[128];
; 258  :         MSGBUF( msgbuf, "Het error '%s': '%s'", het_error( rc ), strerror( errno ));

  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00122	8b 08		 mov	 ecx, DWORD PTR [rax]
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0012a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv90[rsp], rax
  00132	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0013c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv90[rsp]
  00144	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00149	4c 8b c8	 mov	 r9, rax
  0014c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169316
  00153	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00158	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 259  :         WRMSG( HHC00204, "E", LCSS_DEVNUM, dev->filename, "het", "het_write()", (off_t) dev->hetb->cblk, msgbuf );

  00166	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0016f	74 12		 je	 SHORT $LN23@write_het
  00171	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00179	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0017d	89 44 24 74	 mov	 DWORD PTR tv143[rsp], eax
  00181	eb 08		 jmp	 SHORT $LN24@write_het
$LN23@write_het:
  00183	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN24@write_het:
  0018b	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00194	74 14		 je	 SHORT $LN25@write_het
  00196	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0019e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001a2	d1 f8		 sar	 eax, 1
  001a4	89 44 24 78	 mov	 DWORD PTR tv149[rsp], eax
  001a8	eb 08		 jmp	 SHORT $LN26@write_het
$LN25@write_het:
  001aa	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
$LN26@write_het:
  001b2	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ba	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  001c1	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  001c4	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv134[rsp], rax
  001cc	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001d4	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  001db	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv138[rsp], rcx
  001e3	b9 01 00 00 00	 mov	 ecx, 1
  001e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ee	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  001f6	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  001fb	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv134[rsp]
  00203	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169317
  0020f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169318
  0021b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00220	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv138[rsp]
  00228	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0022d	8b 4c 24 74	 mov	 ecx, DWORD PTR tv143[rsp]
  00231	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00235	8b 4c 24 78	 mov	 ecx, DWORD PTR tv149[rsp]
  00239	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169319
  00244	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00249	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169320
  00250	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00255	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0025a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00260	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169321
  00267	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  0026c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169322
  00273	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 260  : 
; 261  :         /* Set unit check with equipment check */
; 262  :         build_senseX( TAPE_BSENSE_WRITEFAIL, dev, unitstat, code );

  00279	44 0f b6 8c 24
	80 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00282	4c 8b 84 24 78
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0028a	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00292	b9 03 00 00 00	 mov	 ecx, 3
  00297	e8 00 00 00 00	 call	 build_senseX

; 263  :         return -1;

  0029c	b8 ff ff ff ff	 mov	 eax, -1
  002a1	e9 c0 03 00 00	 jmp	 $LN1@write_het
$LN11@write_het:

; 264  :     }
; 265  : 
; 266  :     /* Check if we have violated the maxsize limit */
; 267  :     /* Also check if we are passed EOT marker */
; 268  :     if (dev->tdparms.maxsize > 0)

  002a6	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002ae	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  002b6	0f 8e 8a 03 00
	00		 jle	 $LN12@write_het

; 269  :     {
; 270  :         if ((cursize = het_tell( dev->hetb )) > dev->tdparms.maxsize)

  002bc	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002c4	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  002cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tell
  002d1	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR cursize$[rsp], rax
  002d9	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002e1	48 8b 80 38 10
	00 00		 mov	 rax, QWORD PTR [rax+4152]
  002e8	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR cursize$[rsp], rax
  002f0	0f 8e 50 03 00
	00		 jle	 $LN13@write_het

; 271  :         {
; 272  :             if (!dev->batch || !dev->quiet)

  002f6	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002fe	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00304	c1 e8 0a	 shr	 eax, 10
  00307	83 e0 01	 and	 eax, 1
  0030a	85 c0		 test	 eax, eax
  0030c	74 1c		 je	 SHORT $LN15@write_het
  0030e	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00316	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0031c	c1 e8 0c	 shr	 eax, 12
  0031f	83 e0 01	 and	 eax, 1
  00322	85 c0		 test	 eax, eax
  00324	0f 85 db 00 00
	00		 jne	 $LN14@write_het
$LN15@write_het:

; 273  :                 // "%1d:%04X Tape file %s, type %s: maximum tape capacity exceeded"
; 274  :                 WRMSG( HHC00208, "I", LCSS_DEVNUM, dev->filename, "het" );

  0032a	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00333	74 12		 je	 SHORT $LN27@write_het
  00335	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0033d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00341	89 44 24 7c	 mov	 DWORD PTR tv185[rsp], eax
  00345	eb 08		 jmp	 SHORT $LN28@write_het
$LN27@write_het:
  00347	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv185[rsp], 0
$LN28@write_het:
  0034f	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00358	74 17		 je	 SHORT $LN29@write_het
  0035a	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00362	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00366	d1 f8		 sar	 eax, 1
  00368	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv191[rsp], eax
  0036f	eb 0b		 jmp	 SHORT $LN30@write_het
$LN29@write_het:
  00371	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv191[rsp], 0
$LN30@write_het:
  0037c	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00384	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0038a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv180[rsp], rax
  00392	b9 01 00 00 00	 mov	 ecx, 1
  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0039d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169327
  003a4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003a9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv180[rsp]
  003b1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003b6	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv185[rsp]
  003ba	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003be	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv191[rsp]
  003c5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169328
  003d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169329
  003dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169330
  003f3	ba 12 01 00 00	 mov	 edx, 274		; 00000112H
  003f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169331
  003ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@write_het:

; 275  : 
; 276  :             if (dev->tdparms.strictsize)

  00405	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0040d	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00413	c1 e8 08	 shr	 eax, 8
  00416	83 e0 01	 and	 eax, 1
  00419	85 c0		 test	 eax, eax
  0041b	0f 84 fb 01 00
	00		 je	 $LN16@write_het

; 277  :             {
; 278  :                 if (!dev->batch || !dev->quiet)

  00421	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00429	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0042f	c1 e8 0a	 shr	 eax, 10
  00432	83 e0 01	 and	 eax, 1
  00435	85 c0		 test	 eax, eax
  00437	74 1c		 je	 SHORT $LN18@write_het
  00439	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00441	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00447	c1 e8 0c	 shr	 eax, 12
  0044a	83 e0 01	 and	 eax, 1
  0044d	85 c0		 test	 eax, eax
  0044f	0f 85 e4 00 00
	00		 jne	 $LN17@write_het
$LN18@write_het:

; 279  :                     // "%1d:%04X Tape file %s, type %s: maximum tape capacity enforced"
; 280  :                     WRMSG( HHC00209, "I", LCSS_DEVNUM, dev->filename, "het" );

  00455	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0045e	74 15		 je	 SHORT $LN31@write_het
  00460	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00468	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0046c	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv220[rsp], eax
  00473	eb 0b		 jmp	 SHORT $LN32@write_het
$LN31@write_het:
  00475	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv220[rsp], 0
$LN32@write_het:
  00480	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00489	74 17		 je	 SHORT $LN33@write_het
  0048b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00493	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00497	d1 f8		 sar	 eax, 1
  00499	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv226[rsp], eax
  004a0	eb 0b		 jmp	 SHORT $LN34@write_het
$LN33@write_het:
  004a2	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv226[rsp], 0
$LN34@write_het:
  004ad	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004b5	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  004bb	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv215[rsp], rax
  004c3	b9 01 00 00 00	 mov	 ecx, 1
  004c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169335
  004d5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  004da	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv215[rsp]
  004e2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004e7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv220[rsp]
  004ee	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004f2	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv226[rsp]
  004f9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  004fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169336
  00504	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169337
  00510	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00515	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0051a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00520	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169338
  00527	ba 18 01 00 00	 mov	 edx, 280		; 00000118H
  0052c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169339
  00533	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@write_het:

; 281  : 
; 282  :                 het_bsb( dev->hetb );

  00539	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00541	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00548	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_bsb

; 283  :                 cursize = het_tell( dev->hetb );

  0054e	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00556	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  0055d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tell
  00563	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR cursize$[rsp], rax
$LN4@write_het:

; 284  :                 VERIFY( 0 == ftruncate( dev->hetb->fd, cursize ));

  0056b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00573	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0057a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR cursize$[rsp]
  00582	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00585	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  0058b	85 c0		 test	 eax, eax
  0058d	74 5c		 je	 SHORT $LN19@write_het
$LN7@write_het:
  0058f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169341
  00596	41 b8 1c 01 00
	00		 mov	 r8d, 284		; 0000011cH
  0059c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169342
  005a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169343
  005aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  005b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  005b6	85 c0		 test	 eax, eax
  005b8	74 20		 je	 SHORT $LN20@write_het
  005ba	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169345
  005c1	41 b8 1c 01 00
	00		 mov	 r8d, 284		; 0000011cH
  005c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169346
  005ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169347
  005d5	e8 00 00 00 00	 call	 DebuggerTrace
$LN20@write_het:
  005da	33 c0		 xor	 eax, eax
  005dc	85 c0		 test	 eax, eax
  005de	75 af		 jne	 SHORT $LN7@write_het
  005e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  005e6	85 c0		 test	 eax, eax
  005e8	74 01		 je	 SHORT $LN21@write_het
  005ea	cc		 int	 3
$LN21@write_het:
$LN19@write_het:
  005eb	33 c0		 xor	 eax, eax
  005ed	85 c0		 test	 eax, eax
  005ef	0f 85 76 ff ff
	ff		 jne	 $LN4@write_het

; 285  :                 dev->hetb->truncated = TRUE; /* SHOULD BE IN HETLIB */

  005f5	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005fd	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  00604	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  00607	83 c8 04	 or	 eax, 4
  0060a	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00612	48 8b 89 28 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4136]
  00619	89 41 24	 mov	 DWORD PTR [rcx+36], eax
$LN16@write_het:

; 286  :             }
; 287  : 
; 288  :             build_senseX( TAPE_BSENSE_ENDOFTAPE, dev, unitstat, code );

  0061c	44 0f b6 8c 24
	80 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00625	4c 8b 84 24 78
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0062d	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00635	b9 08 00 00 00	 mov	 ecx, 8
  0063a	e8 00 00 00 00	 call	 build_senseX

; 289  :             return -1;

  0063f	b8 ff ff ff ff	 mov	 eax, -1
  00644	eb 20		 jmp	 SHORT $LN1@write_het
$LN13@write_het:
$LN12@write_het:

; 290  :         }
; 291  :     }
; 292  : 
; 293  :     /* Return normal status */
; 294  :     dev->blockid++;

  00646	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0064e	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00654	ff c0		 inc	 eax
  00656	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0065e	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 295  : 
; 296  :     return 0;

  00664	33 c0		 xor	 eax, eax
$LN1@write_het:

; 297  : 
; 298  : } /* end function write_het */

  00666	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0066e	48 33 cc	 xor	 rcx, rsp
  00671	e8 00 00 00 00	 call	 __security_check_cookie
  00676	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  0067d	c3		 ret	 0
write_het ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv91 = 116
tv129 = 120
tv166 = 124
tv172 = 128
tv82 = 136
tv86 = 144
tv145 = 152
tv157 = 160
tv161 = 168
msgbuf$1 = 176
__$ArrayPad$ = 304
dev$ = 336
buf$ = 344
unitstat$ = 352
code$ = 360
read_het PROC

; 187  : {

$LN14:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 188  : int             rc;                     /* Return code               */
; 189  : 
; 190  :     rc = het_read (dev->hetb, buf);

  0002d	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00035	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0003d	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_read
  0004a	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 191  :     if (rc < 0)

  0004e	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00053	0f 8d 27 03 00
	00		 jge	 $LN2@read_het

; 192  :     {
; 193  :         /* Increment file number and return zero if tapemark was read */
; 194  :         if (rc == HETE_TAPEMARK)

  00059	83 7c 24 70 fe	 cmp	 DWORD PTR rc$[rsp], -2
  0005e	75 46		 jne	 SHORT $LN3@read_het

; 195  :         {
; 196  :             dev->curfilen++;

  00060	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00068	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  0006f	66 ff c0	 inc	 ax
  00072	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0007a	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 197  :             dev->blockid++;

  00081	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00089	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0008f	ff c0		 inc	 eax
  00091	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00099	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 198  :             return 0;

  0009f	33 c0		 xor	 eax, eax
  000a1	e9 fc 02 00 00	 jmp	 $LN1@read_het
$LN3@read_het:

; 199  :         }
; 200  : 
; 201  :         /* Handle end of file (uninitialized tape) condition */
; 202  :         if (rc == HETE_EOT)

  000a6	83 7c 24 70 fc	 cmp	 DWORD PTR rc$[rsp], -4
  000ab	0f 85 3f 01 00
	00		 jne	 $LN4@read_het

; 203  :         {
; 204  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "het", "het_read()", (off_t)dev->hetb->cblk, "end of file (uninitialized tape)");

  000b1	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000ba	74 12		 je	 SHORT $LN6@read_het
  000bc	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000c4	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000c8	89 44 24 74	 mov	 DWORD PTR tv91[rsp], eax
  000cc	eb 08		 jmp	 SHORT $LN7@read_het
$LN6@read_het:
  000ce	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN7@read_het:
  000d6	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000df	74 14		 je	 SHORT $LN8@read_het
  000e1	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000e9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000ed	d1 f8		 sar	 eax, 1
  000ef	89 44 24 78	 mov	 DWORD PTR tv129[rsp], eax
  000f3	eb 08		 jmp	 SHORT $LN9@read_het
$LN8@read_het:
  000f5	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv129[rsp], 0
$LN9@read_het:
  000fd	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00105	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0010c	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0010f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv82[rsp], rax
  00117	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0011f	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00126	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv86[rsp], rcx
  0012e	b9 01 00 00 00	 mov	 ecx, 1
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169277
  00140	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00145	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv82[rsp]
  0014d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169278
  00159	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169279
  00165	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0016a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv86[rsp]
  00172	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00177	8b 4c 24 74	 mov	 ecx, DWORD PTR tv91[rsp]
  0017b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0017f	8b 4c 24 78	 mov	 ecx, DWORD PTR tv129[rsp]
  00183	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169280
  0018e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169281
  0019a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169282
  001b1	ba cc 00 00 00	 mov	 edx, 204		; 000000ccH
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169283
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 205  : 
; 206  :             /* Set unit exception with tape indicate (end of tape) */
; 207  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  001c3	44 0f b6 8c 24
	68 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  001cc	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  001d4	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  001dc	b9 08 00 00 00	 mov	 ecx, 8
  001e1	e8 00 00 00 00	 call	 build_senseX

; 208  :             return -1;

  001e6	b8 ff ff ff ff	 mov	 eax, -1
  001eb	e9 b2 01 00 00	 jmp	 $LN1@read_het
$LN4@read_het:

; 209  :         }
; 210  :         {
; 211  :             char msgbuf[128];
; 212  :             MSGBUF( msgbuf, "Het error '%s': '%s'", het_error(rc), strerror(errno));

  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001f6	8b 08		 mov	 ecx, DWORD PTR [rax]
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001fe	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv145[rsp], rax
  00206	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00210	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv145[rsp]
  00218	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0021d	4c 8b c8	 mov	 r9, rax
  00220	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169284
  00227	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0022c	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 213  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "het", "het_read()", (off_t)dev->hetb->cblk, msgbuf);

  0023a	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00243	74 12		 je	 SHORT $LN10@read_het
  00245	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0024d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00251	89 44 24 7c	 mov	 DWORD PTR tv166[rsp], eax
  00255	eb 08		 jmp	 SHORT $LN11@read_het
$LN10@read_het:
  00257	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN11@read_het:
  0025f	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00268	74 17		 je	 SHORT $LN12@read_het
  0026a	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00272	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00276	d1 f8		 sar	 eax, 1
  00278	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  0027f	eb 0b		 jmp	 SHORT $LN13@read_het
$LN12@read_het:
  00281	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv172[rsp], 0
$LN13@read_het:
  0028c	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00294	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0029b	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0029e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv157[rsp], rax
  002a6	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002ae	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  002b5	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv161[rsp], rcx
  002bd	b9 01 00 00 00	 mov	 ecx, 1
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002c8	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  002d0	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  002d5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv157[rsp]
  002dd	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169285
  002e9	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  002ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169286
  002f5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002fa	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv161[rsp]
  00302	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00307	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv166[rsp]
  0030b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0030f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv172[rsp]
  00316	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0031a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169287
  00321	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169288
  0032d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00332	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00337	41 b9 03 00 00
	00		 mov	 r9d, 3
  0033d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169289
  00344	ba d5 00 00 00	 mov	 edx, 213		; 000000d5H
  00349	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169290
  00350	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 214  :         }
; 215  :         /* Set unit check with equipment check */
; 216  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  00356	44 0f b6 8c 24
	68 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0035f	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00367	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0036f	b9 02 00 00 00	 mov	 ecx, 2
  00374	e8 00 00 00 00	 call	 build_senseX

; 217  :         return -1;

  00379	b8 ff ff ff ff	 mov	 eax, -1
  0037e	eb 22		 jmp	 SHORT $LN1@read_het
$LN2@read_het:

; 218  :     }
; 219  :     dev->blockid++;

  00380	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00388	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0038e	ff c0		 inc	 eax
  00390	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00398	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 220  :     /* Return block length */
; 221  :     return rc;

  0039e	8b 44 24 70	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@read_het:

; 222  : 
; 223  : } /* end function read_het */

  003a2	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003aa	48 33 cc	 xor	 rcx, rsp
  003ad	e8 00 00 00 00	 call	 __security_check_cookie
  003b2	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  003b9	c3		 ret	 0
read_het ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv152 = 116
tv158 = 120
tv131 = 128
tv143 = 136
tv147 = 144
msgbuf$1 = 160
__$ArrayPad$ = 288
dev$ = 320
unitstat$ = 328
code$ = 336
bsf_het	PROC

; 542  : {

$LN28:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 543  : int             rc;                     /* Return code               */
; 544  : 
; 545  :     /* Error if already at load point */
; 546  :     if (dev->curfilen == 1 && dev->hetb->cblk == 0)

  00028	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	75 42		 jne	 SHORT $LN14@bsf_het
  0003c	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00044	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0004b	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0004f	75 2d		 jne	 SHORT $LN14@bsf_het

; 547  :     {
; 548  :         build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  00051	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0005a	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00062	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0006a	b9 09 00 00 00	 mov	 ecx, 9
  0006f	e8 00 00 00 00	 call	 build_senseX

; 549  :         return -1;

  00074	b8 ff ff ff ff	 mov	 eax, -1
  00079	e9 0d 03 00 00	 jmp	 $LN1@bsf_het
$LN14@bsf_het:

; 550  :     }
; 551  : 
; 552  :     /* Attempt the backspace file */
; 553  :     rc = het_bsf (dev->hetb);

  0007e	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00086	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_bsf
  00093	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax
$LN4@bsf_het:

; 554  : 
; 555  :     /* Return code from het_bsf will always be negative */
; 556  :     ASSERT( rc < 0 );

  00097	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  0009c	7c 5c		 jl	 SHORT $LN15@bsf_het
$LN7@bsf_het:
  0009e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169485
  000a5	41 b8 2c 02 00
	00		 mov	 r8d, 556		; 0000022cH
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169486
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169487
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000c5	85 c0		 test	 eax, eax
  000c7	74 20		 je	 SHORT $LN16@bsf_het
  000c9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169489
  000d0	41 b8 2c 02 00
	00		 mov	 r8d, 556		; 0000022cH
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169490
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169491
  000e4	e8 00 00 00 00	 call	 DebuggerTrace
$LN16@bsf_het:
  000e9	33 c0		 xor	 eax, eax
  000eb	85 c0		 test	 eax, eax
  000ed	75 af		 jne	 SHORT $LN7@bsf_het
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000f5	85 c0		 test	 eax, eax
  000f7	74 01		 je	 SHORT $LN17@bsf_het
  000f9	cc		 int	 3
$LN17@bsf_het:
$LN15@bsf_het:
  000fa	33 c0		 xor	 eax, eax
  000fc	85 c0		 test	 eax, eax
  000fe	75 97		 jne	 SHORT $LN4@bsf_het

; 557  : 
; 558  :     /* Maintain position */
; 559  :     dev->blockid = dev->hetb->cblk;

  00100	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00108	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0010f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00117	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0011a	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 560  : 
; 561  :     /* Check for true I/O error */
; 562  :     if (rc < 0 && (rc != HETE_TAPEMARK && rc != HETE_BOT))

  00120	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00125	0f 8d a0 01 00
	00		 jge	 $LN18@bsf_het
  0012b	83 7c 24 70 fe	 cmp	 DWORD PTR rc$[rsp], -2
  00130	0f 84 95 01 00
	00		 je	 $LN18@bsf_het
  00136	83 7c 24 70 fd	 cmp	 DWORD PTR rc$[rsp], -3
  0013b	0f 84 8a 01 00
	00		 je	 $LN18@bsf_het

; 563  :     {
; 564  :         char msgbuf[128];
; 565  :         MSGBUF( msgbuf, "Het error '%s': '%s'", het_error(rc), strerror(errno));

  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00147	8b 08		 mov	 ecx, DWORD PTR [rax]
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0014f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv131[rsp], rax
  00157	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00161	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  00169	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0016e	4c 8b c8	 mov	 r9, rax
  00171	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169494
  00178	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0017d	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 566  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "het", "het_bsf()", (off_t)dev->hetb->cblk, msgbuf);

  0018b	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00194	74 12		 je	 SHORT $LN24@bsf_het
  00196	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0019e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001a2	89 44 24 74	 mov	 DWORD PTR tv152[rsp], eax
  001a6	eb 08		 jmp	 SHORT $LN25@bsf_het
$LN24@bsf_het:
  001a8	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv152[rsp], 0
$LN25@bsf_het:
  001b0	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001b9	74 14		 je	 SHORT $LN26@bsf_het
  001bb	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001c3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001c7	d1 f8		 sar	 eax, 1
  001c9	89 44 24 78	 mov	 DWORD PTR tv158[rsp], eax
  001cd	eb 08		 jmp	 SHORT $LN27@bsf_het
$LN26@bsf_het:
  001cf	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN27@bsf_het:
  001d7	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001df	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  001e6	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  001e9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  001f1	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001f9	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00200	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv147[rsp], rcx
  00208	b9 01 00 00 00	 mov	 ecx, 1
  0020d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00213	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  0021b	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00220	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv143[rsp]
  00228	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169495
  00234	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169496
  00240	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00245	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv147[rsp]
  0024d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00252	8b 4c 24 74	 mov	 ecx, DWORD PTR tv152[rsp]
  00256	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0025a	8b 4c 24 78	 mov	 ecx, DWORD PTR tv158[rsp]
  0025e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169497
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169498
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169499
  0028c	ba 36 02 00 00	 mov	 edx, 566		; 00000236H
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169500
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 567  : 
; 568  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  0029e	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  002a7	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  002af	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002b7	b9 0e 00 00 00	 mov	 ecx, 14
  002bc	e8 00 00 00 00	 call	 build_senseX

; 569  :         return -1;

  002c1	b8 ff ff ff ff	 mov	 eax, -1
  002c6	e9 c0 00 00 00	 jmp	 $LN1@bsf_het
$LN18@bsf_het:

; 570  :     }
; 571  : 
; 572  :     /* Error if we backspaced into load point */
; 573  :     if (rc == HETE_BOT)

  002cb	83 7c 24 70 fd	 cmp	 DWORD PTR rc$[rsp], -3
  002d0	75 2d		 jne	 SHORT $LN19@bsf_het

; 574  :     {
; 575  :         build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  002d2	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  002db	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  002e3	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002eb	b9 09 00 00 00	 mov	 ecx, 9
  002f0	e8 00 00 00 00	 call	 build_senseX

; 576  :         return -1;

  002f5	b8 ff ff ff ff	 mov	 eax, -1
  002fa	e9 8c 00 00 00	 jmp	 $LN1@bsf_het
$LN19@bsf_het:
$LN10@bsf_het:

; 577  :     }
; 578  : 
; 579  :     /* Otherwise verify the only other possibility */
; 580  :     ASSERT( rc == HETE_TAPEMARK );

  002ff	83 7c 24 70 fe	 cmp	 DWORD PTR rc$[rsp], -2
  00304	74 5c		 je	 SHORT $LN20@bsf_het
$LN13@bsf_het:
  00306	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169503
  0030d	41 b8 44 02 00
	00		 mov	 r8d, 580		; 00000244H
  00313	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169504
  0031a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169505
  00321	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0032d	85 c0		 test	 eax, eax
  0032f	74 20		 je	 SHORT $LN21@bsf_het
  00331	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169507
  00338	41 b8 44 02 00
	00		 mov	 r8d, 580		; 00000244H
  0033e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169508
  00345	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169509
  0034c	e8 00 00 00 00	 call	 DebuggerTrace
$LN21@bsf_het:
  00351	33 c0		 xor	 eax, eax
  00353	85 c0		 test	 eax, eax
  00355	75 af		 jne	 SHORT $LN13@bsf_het
  00357	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0035d	85 c0		 test	 eax, eax
  0035f	74 01		 je	 SHORT $LN22@bsf_het
  00361	cc		 int	 3
$LN22@bsf_het:
$LN20@bsf_het:
  00362	33 c0		 xor	 eax, eax
  00364	85 c0		 test	 eax, eax
  00366	75 97		 jne	 SHORT $LN10@bsf_het

; 581  : 
; 582  :     /* Maintain position */
; 583  :     dev->curfilen--;

  00368	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00370	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00377	66 ff c8	 dec	 ax
  0037a	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00382	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 584  : 
; 585  :     /* Return success */
; 586  :     return 0;

  00389	33 c0		 xor	 eax, eax
$LN1@bsf_het:

; 587  : 
; 588  : } /* end function bsf_het */

  0038b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00393	48 33 cc	 xor	 rcx, rsp
  00396	e8 00 00 00 00	 call	 __security_check_cookie
  0039b	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  003a2	c3		 ret	 0
bsf_het	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv90 = 116
tv128 = 120
tv69 = 128
tv81 = 136
tv85 = 144
msgbuf$1 = 160
__$ArrayPad$ = 288
dev$ = 320
unitstat$ = 328
code$ = 336
fsf_het	PROC

; 477  : {

$LN10:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 478  : int             rc;                     /* Return code               */
; 479  : 
; 480  :     /* Forward space to start of next file */
; 481  :     rc = het_fsf (dev->hetb);

  00028	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_fsf
  0003d	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 482  :     if (rc < 0)

  00041	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00046	0f 8d b3 01 00
	00		 jge	 $LN2@fsf_het

; 483  :     {
; 484  :         char msgbuf[128];
; 485  :         MSGBUF( msgbuf, "Het error '%s': '%s'", het_error(rc), strerror(errno));

  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00052	8b 08		 mov	 ecx, DWORD PTR [rax]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0005a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv69[rsp], rax
  00062	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0006c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv69[rsp]
  00074	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00079	4c 8b c8	 mov	 r9, rax
  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169445
  00083	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00088	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 486  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "het", "het_fsf()", (off_t)dev->hetb->cblk, msgbuf);

  00096	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0009f	74 12		 je	 SHORT $LN6@fsf_het
  000a1	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000ad	89 44 24 74	 mov	 DWORD PTR tv90[rsp], eax
  000b1	eb 08		 jmp	 SHORT $LN7@fsf_het
$LN6@fsf_het:
  000b3	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN7@fsf_het:
  000bb	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000c4	74 14		 je	 SHORT $LN8@fsf_het
  000c6	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ce	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000d2	d1 f8		 sar	 eax, 1
  000d4	89 44 24 78	 mov	 DWORD PTR tv128[rsp], eax
  000d8	eb 08		 jmp	 SHORT $LN9@fsf_het
$LN8@fsf_het:
  000da	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN9@fsf_het:
  000e2	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ea	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  000f1	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000f4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv81[rsp], rax
  000fc	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00104	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0010b	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv85[rsp], rcx
  00113	b9 01 00 00 00	 mov	 ecx, 1
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011e	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00126	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0012b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv81[rsp]
  00133	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169446
  0013f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169447
  0014b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00150	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv85[rsp]
  00158	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0015d	8b 4c 24 74	 mov	 ecx, DWORD PTR tv90[rsp]
  00161	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00165	8b 4c 24 78	 mov	 ecx, DWORD PTR tv128[rsp]
  00169	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169448
  00174	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169449
  00180	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00185	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00190	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169450
  00197	ba e6 01 00 00	 mov	 edx, 486		; 000001e6H
  0019c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169451
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 487  : 
; 488  :         if(rc==HETE_EOT)

  001a9	83 7c 24 70 fc	 cmp	 DWORD PTR rc$[rsp], -4
  001ae	75 25		 jne	 SHORT $LN3@fsf_het

; 489  :         {
; 490  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  001b0	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  001b9	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  001c1	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  001c9	b9 08 00 00 00	 mov	 ecx, 8
  001ce	e8 00 00 00 00	 call	 build_senseX

; 491  :         }

  001d3	eb 23		 jmp	 SHORT $LN4@fsf_het
$LN3@fsf_het:

; 492  :         else
; 493  :         {
; 494  :             build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  001d5	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  001de	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  001e6	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  001ee	b9 02 00 00 00	 mov	 ecx, 2
  001f3	e8 00 00 00 00	 call	 build_senseX
$LN4@fsf_het:

; 495  :         }
; 496  :         return -1;

  001f8	b8 ff ff ff ff	 mov	 eax, -1
  001fd	eb 35		 jmp	 SHORT $LN1@fsf_het
$LN2@fsf_het:

; 497  :     }
; 498  : 
; 499  :     /* Maintain position */
; 500  :     dev->blockid = rc;

  001ff	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00207	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  0020b	89 88 04 10 00
	00		 mov	 DWORD PTR [rax+4100], ecx

; 501  :     dev->curfilen++;

  00211	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00219	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00220	66 ff c0	 inc	 ax
  00223	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0022b	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 502  : 
; 503  :     /* Return success */
; 504  :     return 0;

  00232	33 c0		 xor	 eax, eax
$LN1@fsf_het:

; 505  : 
; 506  : } /* end function fsf_het */

  00234	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0023c	48 33 cc	 xor	 rcx, rsp
  0023f	e8 00 00 00 00	 call	 __security_check_cookie
  00244	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  0024b	c3		 ret	 0
fsf_het	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv136 = 116
tv142 = 120
tv83 = 128
tv95 = 136
tv131 = 144
msgbuf$1 = 160
__$ArrayPad$ = 288
dev$ = 320
unitstat$ = 328
code$ = 336
bsb_het	PROC

; 430  : {

$LN10:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 431  : int             rc;                     /* Return code               */
; 432  : 
; 433  :     /* Back space one block */
; 434  :     rc = het_bsb (dev->hetb);

  00028	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_bsb
  0003d	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 435  :     if (rc < 0)

  00041	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00046	0f 8d 08 02 00
	00		 jge	 $LN2@bsb_het

; 436  :     {
; 437  :         /* Increment file number and return zero if tapemark was read */
; 438  :         if (rc == HETE_TAPEMARK)

  0004c	83 7c 24 70 fe	 cmp	 DWORD PTR rc$[rsp], -2
  00051	75 46		 jne	 SHORT $LN3@bsb_het

; 439  :         {
; 440  :             dev->blockid--;

  00053	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0005b	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00061	ff c8		 dec	 eax
  00063	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0006b	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 441  :             dev->curfilen--;

  00071	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00079	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00080	66 ff c8	 dec	 ax
  00083	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0008b	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 442  :             return 0;

  00092	33 c0		 xor	 eax, eax
  00094	e9 de 01 00 00	 jmp	 $LN1@bsb_het
$LN3@bsb_het:

; 443  :         }
; 444  : 
; 445  :         /* Unit check if already at start of tape */
; 446  :         if (rc == HETE_BOT)

  00099	83 7c 24 70 fd	 cmp	 DWORD PTR rc$[rsp], -3
  0009e	75 2d		 jne	 SHORT $LN4@bsb_het

; 447  :         {
; 448  :             build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  000a0	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  000a9	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  000b1	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  000b9	b9 09 00 00 00	 mov	 ecx, 9
  000be	e8 00 00 00 00	 call	 build_senseX

; 449  :             return -1;

  000c3	b8 ff ff ff ff	 mov	 eax, -1
  000c8	e9 aa 01 00 00	 jmp	 $LN1@bsb_het
$LN4@bsb_het:

; 450  :         }
; 451  :         {
; 452  :             char msgbuf[128];
; 453  :             MSGBUF( msgbuf, "Het error '%s': '%s'", het_error(rc), strerror(errno));

  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000d3	8b 08		 mov	 ecx, DWORD PTR [rax]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000db	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv83[rsp], rax
  000e3	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  000ed	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv83[rsp]
  000f5	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000fa	4c 8b c8	 mov	 r9, rax
  000fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169427
  00104	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00109	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 454  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename,

  00117	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00120	74 12		 je	 SHORT $LN6@bsb_het
  00122	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0012e	89 44 24 74	 mov	 DWORD PTR tv136[rsp], eax
  00132	eb 08		 jmp	 SHORT $LN7@bsb_het
$LN6@bsb_het:
  00134	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN7@bsb_het:
  0013c	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00145	74 14		 je	 SHORT $LN8@bsb_het
  00147	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0014f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00153	d1 f8		 sar	 eax, 1
  00155	89 44 24 78	 mov	 DWORD PTR tv142[rsp], eax
  00159	eb 08		 jmp	 SHORT $LN9@bsb_het
$LN8@bsb_het:
  0015b	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN9@bsb_het:
  00163	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0016b	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  00172	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00175	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv95[rsp], rax
  0017d	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00185	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0018c	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv131[rsp], rcx
  00194	b9 01 00 00 00	 mov	 ecx, 1
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019f	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  001a7	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  001ac	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  001b4	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169428
  001c0	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169429
  001cc	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001d1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  001d9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001de	8b 4c 24 74	 mov	 ecx, DWORD PTR tv136[rsp]
  001e2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001e6	8b 4c 24 78	 mov	 ecx, DWORD PTR tv142[rsp]
  001ea	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169430
  001f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169431
  00201	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00206	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0020b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00211	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169432
  00218	ba c7 01 00 00	 mov	 edx, 455		; 000001c7H
  0021d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169433
  00224	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 455  :                    "het", "het_bsb()", (off_t)dev->hetb->cblk, msgbuf);
; 456  :         }
; 457  :         /* Set unit check with equipment check */
; 458  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  0022a	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00233	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0023b	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00243	b9 02 00 00 00	 mov	 ecx, 2
  00248	e8 00 00 00 00	 call	 build_senseX

; 459  :         return -1;

  0024d	b8 ff ff ff ff	 mov	 eax, -1
  00252	eb 23		 jmp	 SHORT $LN1@bsb_het
$LN2@bsb_het:

; 460  :     }
; 461  : 
; 462  :     dev->blockid--;

  00254	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0025c	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00262	ff c8		 dec	 eax
  00264	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0026c	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 463  : 
; 464  :     /* Return +1 to indicate back space successful */
; 465  :     return +1;

  00272	b8 01 00 00 00	 mov	 eax, 1
$LN1@bsb_het:

; 466  : 
; 467  : } /* end function bsb_het */

  00277	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0027f	48 33 cc	 xor	 rcx, rsp
  00282	e8 00 00 00 00	 call	 __security_check_cookie
  00287	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  0028e	c3		 ret	 0
bsb_het	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv133 = 116
tv139 = 120
tv158 = 124
tv164 = 128
tv78 = 136
tv92 = 144
tv128 = 152
tv153 = 160
msgbuf$1 = 176
__$ArrayPad$ = 304
dev$ = 336
unitstat$ = 344
code$ = 352
fsb_het	PROC

; 376  : {

$LN17:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 377  : int             rc;                     /* Return code               */
; 378  : 
; 379  :     /* Forward space one block */
; 380  :     rc = het_fsb (dev->hetb);

  00028	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_fsb
  0003d	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 381  : 
; 382  :     if (rc < 0)

  00041	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00046	0f 8d 0f 03 00
	00		 jge	 $LN2@fsb_het

; 383  :     {
; 384  :         /* Increment file number and return zero if tapemark was read */
; 385  :         if (rc == HETE_TAPEMARK)

  0004c	83 7c 24 70 fe	 cmp	 DWORD PTR rc$[rsp], -2
  00051	75 46		 jne	 SHORT $LN3@fsb_het

; 386  :         {
; 387  :             dev->blockid++;

  00053	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0005b	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00061	ff c0		 inc	 eax
  00063	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0006b	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 388  :             dev->curfilen++;

  00071	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00079	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00080	66 ff c0	 inc	 ax
  00083	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0008b	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 389  :             return 0;

  00092	33 c0		 xor	 eax, eax
  00094	e9 e5 02 00 00	 jmp	 $LN1@fsb_het
$LN3@fsb_het:

; 390  :         }
; 391  :         {
; 392  :             char msgbuf[128];
; 393  :             MSGBUF( msgbuf, "Het error '%s': '%s'", het_error(rc), strerror(errno));

  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0009f	8b 08		 mov	 ecx, DWORD PTR [rax]
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000a7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv78[rsp], rax
  000af	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  000b9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv78[rsp]
  000c1	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000c6	4c 8b c8	 mov	 r9, rax
  000c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169397
  000d0	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  000d5	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 394  : 
; 395  :             if (dev->hetb) // (could be null! see GitHub Issue #515!)

  000e3	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000eb	48 83 b8 28 10
	00 00 00	 cmp	 QWORD PTR [rax+4136], 0
  000f3	0f 84 18 01 00
	00		 je	 $LN4@fsb_het

; 396  :                 // "%1d:%04X Tape file %s, type %s: error in function %s, offset 0x%16.16"PRIX64": %s"
; 397  :                 WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "het", "het_fsb()", (off_t)dev->hetb->cblk, msgbuf);

  000f9	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00102	74 12		 je	 SHORT $LN9@fsb_het
  00104	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0010c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00110	89 44 24 74	 mov	 DWORD PTR tv133[rsp], eax
  00114	eb 08		 jmp	 SHORT $LN10@fsb_het
$LN9@fsb_het:
  00116	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN10@fsb_het:
  0011e	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00127	74 14		 je	 SHORT $LN11@fsb_het
  00129	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00131	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00135	d1 f8		 sar	 eax, 1
  00137	89 44 24 78	 mov	 DWORD PTR tv139[rsp], eax
  0013b	eb 08		 jmp	 SHORT $LN12@fsb_het
$LN11@fsb_het:
  0013d	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
$LN12@fsb_het:
  00145	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0014d	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  00154	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00157	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv92[rsp], rax
  0015f	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00167	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0016e	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv128[rsp], rcx
  00176	b9 01 00 00 00	 mov	 ecx, 1
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00181	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00189	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0018e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv92[rsp]
  00196	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169400
  001a2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169401
  001ae	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001b3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv128[rsp]
  001bb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001c0	8b 4c 24 74	 mov	 ecx, DWORD PTR tv133[rsp]
  001c4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001c8	8b 4c 24 78	 mov	 ecx, DWORD PTR tv139[rsp]
  001cc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169402
  001d7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169403
  001e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ed	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169404
  001fa	ba 8d 01 00 00	 mov	 edx, 397		; 0000018dH
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169405
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0020c	e9 f4 00 00 00	 jmp	 $LN5@fsb_het
$LN4@fsb_het:

; 398  :             else
; 399  :                 // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 400  :                 WRMSG( HHC00205, "E", LCSS_DEVNUM, dev->filename, "het", "het_fsb()", msgbuf );

  00211	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0021a	74 12		 je	 SHORT $LN13@fsb_het
  0021c	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00224	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00228	89 44 24 7c	 mov	 DWORD PTR tv158[rsp], eax
  0022c	eb 08		 jmp	 SHORT $LN14@fsb_het
$LN13@fsb_het:
  0022e	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN14@fsb_het:
  00236	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0023f	74 17		 je	 SHORT $LN15@fsb_het
  00241	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00249	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0024d	d1 f8		 sar	 eax, 1
  0024f	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv164[rsp], eax
  00256	eb 0b		 jmp	 SHORT $LN16@fsb_het
$LN15@fsb_het:
  00258	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv164[rsp], 0
$LN16@fsb_het:
  00263	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0026b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00271	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv153[rsp], rax
  00279	b9 01 00 00 00	 mov	 ecx, 1
  0027e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00284	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  0028c	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169406
  00298	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169407
  002a4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002a9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv153[rsp]
  002b1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002b6	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv158[rsp]
  002ba	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002be	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv164[rsp]
  002c5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169408
  002d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169409
  002dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169410
  002f3	ba 90 01 00 00	 mov	 edx, 400		; 00000190H
  002f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169411
  002ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@fsb_het:

; 401  :         }
; 402  :         /* Set unit check with equipment check */
; 403  :         if(rc==HETE_EOT)

  00305	83 7c 24 70 fc	 cmp	 DWORD PTR rc$[rsp], -4
  0030a	75 25		 jne	 SHORT $LN6@fsb_het

; 404  :         {
; 405  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  0030c	44 0f b6 8c 24
	60 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00315	4c 8b 84 24 58
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0031d	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00325	b9 08 00 00 00	 mov	 ecx, 8
  0032a	e8 00 00 00 00	 call	 build_senseX

; 406  :         }

  0032f	eb 23		 jmp	 SHORT $LN7@fsb_het
$LN6@fsb_het:

; 407  :         else
; 408  :         {
; 409  :             build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  00331	44 0f b6 8c 24
	60 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0033a	4c 8b 84 24 58
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00342	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0034a	b9 02 00 00 00	 mov	 ecx, 2
  0034f	e8 00 00 00 00	 call	 build_senseX
$LN7@fsb_het:

; 410  :         }
; 411  :         return -1;

  00354	b8 ff ff ff ff	 mov	 eax, -1
  00359	eb 23		 jmp	 SHORT $LN1@fsb_het
$LN2@fsb_het:

; 412  :     }
; 413  : 
; 414  :     dev->blockid++;

  0035b	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00363	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00369	ff c0		 inc	 eax
  0036b	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00373	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 415  : 
; 416  :     /* Return +1 to indicate forward space successful */
; 417  :     return +1;

  00379	b8 01 00 00 00	 mov	 eax, 1
$LN1@fsb_het:

; 418  : 
; 419  : } /* end function fsb_het */

  0037e	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00386	48 33 cc	 xor	 rcx, rsp
  00389	e8 00 00 00 00	 call	 __security_check_cookie
  0038e	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  00395	c3		 ret	 0
fsb_het	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv84 = 116
tv90 = 120
tv73 = 128
tv79 = 136
dev$ = 160
unitstat$ = 168
code$ = 176
sync_het PROC

; 344  : {

$LN10:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 345  : int             rc;                     /* Return code               */
; 346  : 
; 347  :     /* Perform the flush */
; 348  :     rc = het_sync (dev->hetb);

  00016	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001e	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_sync
  0002b	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 349  :     if (rc < 0)

  0002f	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00034	0f 8d 5b 01 00
	00		 jge	 $LN2@sync_het

; 350  :     {
; 351  :         /* Handle error condition */
; 352  :         if (HETE_PROTECTED == rc)

  0003a	83 7c 24 70 f2	 cmp	 DWORD PTR rc$[rsp], -14
  0003f	75 28		 jne	 SHORT $LN3@sync_het

; 353  :             build_senseX(TAPE_BSENSE_WRITEPROTECT,dev,unitstat,code);

  00041	44 0f b6 8c 24
	b0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0004a	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00052	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0005a	b9 06 00 00 00	 mov	 ecx, 6
  0005f	e8 00 00 00 00	 call	 build_senseX
  00064	e9 25 01 00 00	 jmp	 $LN4@sync_het
$LN3@sync_het:

; 354  :         else
; 355  :         {
; 356  :             WRMSG (HHC00205, "E", LCSS_DEVNUM, dev->filename, "het", "het_sync()", strerror(errno));

  00069	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00072	74 12		 je	 SHORT $LN6@sync_het
  00074	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00080	89 44 24 74	 mov	 DWORD PTR tv84[rsp], eax
  00084	eb 08		 jmp	 SHORT $LN7@sync_het
$LN6@sync_het:
  00086	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN7@sync_het:
  0008e	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00097	74 14		 je	 SHORT $LN8@sync_het
  00099	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000a5	d1 f8		 sar	 eax, 1
  000a7	89 44 24 78	 mov	 DWORD PTR tv90[rsp], eax
  000ab	eb 08		 jmp	 SHORT $LN9@sync_het
$LN8@sync_het:
  000ad	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN9@sync_het:
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000bb	8b 08		 mov	 ecx, DWORD PTR [rax]
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000c3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
  000cb	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000d3	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  000da	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR tv79[rsp], rcx
  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ed	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv73[rsp]
  000f5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169379
  00101	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169380
  0010d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00112	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv79[rsp]
  0011a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0011f	8b 4c 24 74	 mov	 ecx, DWORD PTR tv84[rsp]
  00123	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00127	8b 4c 24 78	 mov	 ecx, DWORD PTR tv90[rsp]
  0012b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169381
  00136	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169382
  00142	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00147	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00152	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169383
  00159	ba 64 01 00 00	 mov	 edx, 356		; 00000164H
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169384
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 357  :             build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  0016b	44 0f b6 8c 24
	b0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00174	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0017c	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00184	b9 03 00 00 00	 mov	 ecx, 3
  00189	e8 00 00 00 00	 call	 build_senseX
$LN4@sync_het:

; 358  :         }
; 359  :         return -1;

  0018e	b8 ff ff ff ff	 mov	 eax, -1
  00193	eb 02		 jmp	 SHORT $LN1@sync_het
$LN2@sync_het:

; 360  :     }
; 361  : 
; 362  :     /* Return normal status */
; 363  :     return 0;

  00195	33 c0		 xor	 eax, eax
$LN1@sync_het:

; 364  : 
; 365  : } /* end function sync_het */

  00197	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0019e	c3		 ret	 0
sync_het ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv130 = 116
tv136 = 120
tv77 = 128
tv89 = 136
tv93 = 144
msgbuf$1 = 160
__$ArrayPad$ = 288
dev$ = 320
unitstat$ = 328
code$ = 336
write_hetmark PROC

; 307  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 308  : int             rc;                     /* Return code               */
; 309  : 
; 310  :     if ( dev->hetb->writeprotect )

  00028	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  00037	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0003a	83 e0 01	 and	 eax, 1
  0003d	85 c0		 test	 eax, eax
  0003f	74 2d		 je	 SHORT $LN2@write_hetm

; 311  :     {
; 312  :         build_senseX(TAPE_BSENSE_WRITEPROTECT,dev,unitstat,code);

  00041	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0004a	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00052	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0005a	b9 06 00 00 00	 mov	 ecx, 6
  0005f	e8 00 00 00 00	 call	 build_senseX

; 313  :         return -1;

  00064	b8 ff ff ff ff	 mov	 eax, -1
  00069	e9 cb 01 00 00	 jmp	 $LN1@write_hetm
$LN2@write_hetm:

; 314  :     }
; 315  : 
; 316  :     /* Write the tape mark */
; 317  :     rc = het_tapemark (dev->hetb);

  0006e	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00076	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tapemark
  00083	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 318  :     if (rc < 0)

  00087	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  0008c	0f 8d 87 01 00
	00		 jge	 $LN3@write_hetm

; 319  :     {
; 320  :         /* Handle error condition */
; 321  :         char msgbuf[128];
; 322  :         MSGBUF( msgbuf, "Het error '%s': '%s'", het_error(rc), strerror(errno));

  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00098	8b 08		 mov	 ecx, DWORD PTR [rax]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000a0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000a8	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  000b2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv77[rsp]
  000ba	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000bf	4c 8b c8	 mov	 r9, rax
  000c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169361
  000c9	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  000ce	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 323  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "het", "het_tapemark()", (off_t)dev->hetb->cblk, msgbuf);

  000dc	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000e5	74 12		 je	 SHORT $LN5@write_hetm
  000e7	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ef	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000f3	89 44 24 74	 mov	 DWORD PTR tv130[rsp], eax
  000f7	eb 08		 jmp	 SHORT $LN6@write_hetm
$LN5@write_hetm:
  000f9	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN6@write_hetm:
  00101	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0010a	74 14		 je	 SHORT $LN7@write_hetm
  0010c	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00114	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00118	d1 f8		 sar	 eax, 1
  0011a	89 44 24 78	 mov	 DWORD PTR tv136[rsp], eax
  0011e	eb 08		 jmp	 SHORT $LN8@write_hetm
$LN7@write_hetm:
  00120	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN8@write_hetm:
  00128	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00130	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  00137	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0013a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv89[rsp], rax
  00142	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0014a	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00151	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv93[rsp], rcx
  00159	b9 01 00 00 00	 mov	 ecx, 1
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00164	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  0016c	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00171	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv89[rsp]
  00179	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169362
  00185	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169363
  00191	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00196	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv93[rsp]
  0019e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001a3	8b 4c 24 74	 mov	 ecx, DWORD PTR tv130[rsp]
  001a7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001ab	8b 4c 24 78	 mov	 ecx, DWORD PTR tv136[rsp]
  001af	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169364
  001ba	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169365
  001c6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001cb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169366
  001dd	ba 43 01 00 00	 mov	 edx, 323		; 00000143H
  001e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169367
  001e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 324  : 
; 325  :         /* Set unit check with equipment check */
; 326  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  001ef	44 0f b6 8c 24
	50 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  001f8	4c 8b 84 24 48
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00200	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00208	b9 03 00 00 00	 mov	 ecx, 3
  0020d	e8 00 00 00 00	 call	 build_senseX

; 327  :         return -1;

  00212	b8 ff ff ff ff	 mov	 eax, -1
  00217	eb 20		 jmp	 SHORT $LN1@write_hetm
$LN3@write_hetm:

; 328  :     }
; 329  : 
; 330  :     /* Return normal status */
; 331  :     dev->blockid++;

  00219	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00221	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00227	ff c0		 inc	 eax
  00229	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00231	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 332  : 
; 333  :     return 0;

  00237	33 c0		 xor	 eax, eax
$LN1@write_hetm:

; 334  : 
; 335  : } /* end function write_hetmark */

  00239	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00241	48 33 cc	 xor	 rcx, rsp
  00244	e8 00 00 00 00	 call	 __security_check_cookie
  00249	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  00250	c3		 ret	 0
write_hetmark ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv86 = 116
tv92 = 120
tv69 = 128
tv81 = 136
msgbuf$1 = 144
__$ArrayPad$ = 272
dev$ = 304
unitstat$ = 312
code$ = 320
rewind_het PROC

; 157  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 158  : int rc;
; 159  :     rc = het_rewind (dev->hetb);

  00028	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_rewind
  0003d	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 160  :     if (rc < 0)

  00041	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00046	0f 8d 5f 01 00
	00		 jge	 $LN2@rewind_het

; 161  :     {
; 162  :         /* Handle seek error condition */
; 163  :         char msgbuf[128];
; 164  :         MSGBUF( msgbuf, "Het error '%s': '%s'", het_error(rc), strerror(errno));

  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00052	8b 08		 mov	 ecx, DWORD PTR [rax]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0005a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv69[rsp], rax
  00062	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0006c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv69[rsp]
  00074	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00079	4c 8b c8	 mov	 r9, rax
  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169254
  00083	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00088	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 165  :         WRMSG (HHC00205, "E", LCSS_DEVNUM, dev->filename, "het", "het_rewind()", msgbuf);

  00096	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0009f	74 12		 je	 SHORT $LN4@rewind_het
  000a1	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000ad	89 44 24 74	 mov	 DWORD PTR tv86[rsp], eax
  000b1	eb 08		 jmp	 SHORT $LN5@rewind_het
$LN4@rewind_het:
  000b3	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN5@rewind_het:
  000bb	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000c4	74 14		 je	 SHORT $LN6@rewind_het
  000c6	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ce	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000d2	d1 f8		 sar	 eax, 1
  000d4	89 44 24 78	 mov	 DWORD PTR tv92[rsp], eax
  000d8	eb 08		 jmp	 SHORT $LN7@rewind_het
$LN6@rewind_het:
  000da	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN7@rewind_het:
  000e2	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ea	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000f0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv81[rsp], rax
  000f8	b9 01 00 00 00	 mov	 ecx, 1
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00103	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  0010b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169255
  00117	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169256
  00123	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00128	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv81[rsp]
  00130	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00135	8b 4c 24 74	 mov	 ecx, DWORD PTR tv86[rsp]
  00139	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0013d	8b 4c 24 78	 mov	 ecx, DWORD PTR tv92[rsp]
  00141	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169257
  0014c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169258
  00158	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00162	41 b9 03 00 00
	00		 mov	 r9d, 3
  00168	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169259
  0016f	ba a5 00 00 00	 mov	 edx, 165		; 000000a5H
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169260
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 166  : 
; 167  :         build_senseX(TAPE_BSENSE_REWINDFAILED,dev,unitstat,code);

  00181	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0018a	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00192	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0019a	b9 13 00 00 00	 mov	 ecx, 19
  0019f	e8 00 00 00 00	 call	 build_senseX

; 168  :         return -1;

  001a4	b8 ff ff ff ff	 mov	 eax, -1
  001a9	eb 6d		 jmp	 SHORT $LN1@rewind_het
$LN2@rewind_het:

; 169  :     }
; 170  :     dev->nxtblkpos=0;

  001ab	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001b3	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 171  :     dev->prvblkpos=-1;

  001be	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001c6	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 172  :     dev->curfilen=1;

  001d1	b8 01 00 00 00	 mov	 eax, 1
  001d6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001de	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 173  :     dev->blockid=0;

  001e5	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ed	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 174  :     dev->fenced = 0;

  001f7	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ff	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00205	83 e0 fe	 and	 eax, -2			; fffffffeH
  00208	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00210	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 175  :     return 0;

  00216	33 c0		 xor	 eax, eax
$LN1@rewind_het:

; 176  : }

  00218	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00220	48 33 cc	 xor	 rcx, rsp
  00223	e8 00 00 00 00	 call	 __security_check_cookie
  00228	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  0022f	c3		 ret	 0
rewind_het ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
cursize$ = 32
dev$ = 64
passedeot_het PROC

; 512  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 513  : off_t cursize;
; 514  :     if(dev->fd>0)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00015	7e 6b		 jle	 SHORT $LN2@passedeot_

; 515  :     {
; 516  :         if(dev->tdparms.maxsize>0)

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0001c	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  00024	7e 5c		 jle	 SHORT $LN3@passedeot_

; 517  :         {
; 518  :             cursize=het_tell(dev->hetb);

  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0002b	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tell
  00038	48 89 44 24 20	 mov	 QWORD PTR cursize$[rsp], rax

; 519  :             if(cursize+dev->eotmargin>dev->tdparms.maxsize)

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00042	48 8b 80 70 10
	00 00		 mov	 rax, QWORD PTR [rax+4208]
  00049	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cursize$[rsp]
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00059	48 3b 81 38 10
	00 00		 cmp	 rax, QWORD PTR [rcx+4152]
  00060	7e 20		 jle	 SHORT $LN4@passedeot_

; 520  :             {
; 521  :                 dev->eotwarning = 1;

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00067	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0006d	83 c8 20	 or	 eax, 32			; 00000020H
  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00075	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 522  :                 return 1;

  0007b	b8 01 00 00 00	 mov	 eax, 1
  00080	eb 1b		 jmp	 SHORT $LN1@passedeot_
$LN4@passedeot_:
$LN3@passedeot_:
$LN2@passedeot_:

; 523  :             }
; 524  :         }
; 525  :     }
; 526  :     dev->eotwarning = 0;

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00087	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0008d	83 e0 df	 and	 eax, -33		; ffffffdfH
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00095	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 527  :     return 0;

  0009b	33 c0		 xor	 eax, eax
$LN1@passedeot_:

; 528  : }

  0009d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a1	c3		 ret	 0
passedeot_het ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
tv80 = 96
tv86 = 100
tv75 = 104
dev$ = 128
close_het PROC

; 134  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 135  :     if (dev->fd >= 0)

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00011	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00018	0f 8c 00 01 00
	00		 jl	 $LN2@close_het

; 136  :     {
; 137  :         if (!dev->batch || !dev->quiet)

  0001e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00026	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0002c	c1 e8 0a	 shr	 eax, 10
  0002f	83 e0 01	 and	 eax, 1
  00032	85 c0		 test	 eax, eax
  00034	74 1c		 je	 SHORT $LN4@close_het
  00036	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0003e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00044	c1 e8 0c	 shr	 eax, 12
  00047	83 e0 01	 and	 eax, 1
  0004a	85 c0		 test	 eax, eax
  0004c	0f 85 cc 00 00
	00		 jne	 $LN3@close_het
$LN4@close_het:

; 138  :             // "%1d:%04X Tape file %s, type %s: tape closed"
; 139  :             WRMSG( HHC00201, "I", LCSS_DEVNUM, dev->filename, "het" );

  00052	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0005b	74 12		 je	 SHORT $LN6@close_het
  0005d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00065	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00069	89 44 24 60	 mov	 DWORD PTR tv80[rsp], eax
  0006d	eb 08		 jmp	 SHORT $LN7@close_het
$LN6@close_het:
  0006f	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN7@close_het:
  00077	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00080	74 14		 je	 SHORT $LN8@close_het
  00082	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0008a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0008e	d1 f8		 sar	 eax, 1
  00090	89 44 24 64	 mov	 DWORD PTR tv86[rsp], eax
  00094	eb 08		 jmp	 SHORT $LN9@close_het
$LN8@close_het:
  00096	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN9@close_het:
  0009e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a6	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000ac	48 89 44 24 68	 mov	 QWORD PTR tv75[rsp], rax
  000b1	b9 01 00 00 00	 mov	 ecx, 1
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169238
  000c3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv75[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv80[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv86[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169239
  000e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169240
  000f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00105	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169241
  0010c	ba 8b 00 00 00	 mov	 edx, 139		; 0000008bH
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169242
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@close_het:
$LN2@close_het:

; 140  :     }
; 141  : 
; 142  :     het_close( &dev->hetb );

  0011e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00126	48 05 28 10 00
	00		 add	 rax, 4136		; 00001028H
  0012c	48 8b c8	 mov	 rcx, rax
  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_close

; 143  :     STRLCPY( dev->filename, TAPE_UNLOADED );

  00135	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0013d	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00143	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169243
  00150	48 8b c8	 mov	 rcx, rax
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 144  : 
; 145  :     dev->fh      = NULL;

  00159	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00161	48 c7 80 b0 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+432], 0

; 146  :     dev->fd      = -1;

  0016c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00174	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 147  :     dev->blockid =  0;

  0017e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00186	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 148  :     dev->fenced  =  0;

  00190	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00198	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0019e	83 e0 fe	 and	 eax, -2			; fffffffeH
  001a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001a9	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 149  : }

  001af	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001b3	c3		 ret	 0
close_het ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hettape.c
_TEXT	SEGMENT
rc$ = 112
tv85 = 116
tv87 = 120
tv196 = 124
tv202 = 128
tv244 = 132
tv250 = 136
save_errno$1 = 140
tv179 = 144
tv191 = 152
tv239 = 160
msgbuf$2 = 176
pathname$ = 304
__$ArrayPad$ = 576
dev$ = 608
unitstat$ = 616
code$ = 624
open_het PROC

; 40   : {

$LN25:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 41   :     int   rc;                           /* Return code               */
; 42   :     char  pathname[MAX_PATH];           /* file path in host format  */
; 43   : 
; 44   :     /* Check for no tape in drive */
; 45   : 
; 46   :     if (strcmp( dev->filename, TAPE_UNLOADED ) == 0)

  00028	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169208
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 strcmp
  00045	85 c0		 test	 eax, eax
  00047	75 2a		 jne	 SHORT $LN2@open_het

; 47   :     {
; 48   :         build_senseX( TAPE_BSENSE_TAPEUNLOADED, dev, unitstat, code );

  00049	44 0f b6 8c 24
	70 02 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00052	4c 8b 84 24 68
	02 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0005a	48 8b 94 24 60
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00062	33 c9		 xor	 ecx, ecx
  00064	e8 00 00 00 00	 call	 build_senseX

; 49   :         return -1;

  00069	b8 ff ff ff ff	 mov	 eax, -1
  0006e	e9 51 05 00 00	 jmp	 $LN1@open_het
$LN2@open_het:

; 50   :     }
; 51   : 
; 52   :     /* Open the HET file */
; 53   : 
; 54   :     hostpath( pathname, dev->filename, sizeof( pathname ));

  00073	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00081	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 55   : 
; 56   :     rc = het_open( &dev->hetb, pathname,

  00098	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a0	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  000a6	c1 e8 0b	 shr	 eax, 11
  000a9	83 e0 01	 and	 eax, 1
  000ac	85 c0		 test	 eax, eax
  000ae	74 0a		 je	 SHORT $LN15@open_het
  000b0	c7 44 24 78 02
	00 00 00	 mov	 DWORD PTR tv87[rsp], 2
  000b8	eb 31		 jmp	 SHORT $LN16@open_het
$LN15@open_het:
  000ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000c1	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000c7	c1 e8 13	 shr	 eax, 19
  000ca	83 e0 01	 and	 eax, 1
  000cd	85 c0		 test	 eax, eax
  000cf	74 0a		 je	 SHORT $LN13@open_het
  000d1	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  000d9	eb 08		 jmp	 SHORT $LN14@open_het
$LN13@open_het:
  000db	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN14@open_het:
  000e3	8b 44 24 74	 mov	 eax, DWORD PTR tv85[rsp]
  000e7	89 44 24 78	 mov	 DWORD PTR tv87[rsp], eax
$LN16@open_het:
  000eb	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f3	48 05 28 10 00
	00		 add	 rax, 4136		; 00001028H
  000f9	44 8b 44 24 78	 mov	 r8d, DWORD PTR tv87[rsp]
  000fe	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR pathname$[rsp]
  00106	48 8b c8	 mov	 rcx, rax
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_open
  0010f	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 57   :                    dev->tdparms.logical_readonly ? HETOPEN_READONLY
; 58   :                    : sysblk.auto_tape_create ? HETOPEN_CREATE : 0 );
; 59   : 
; 60   :     if (rc >= 0)

  00113	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00118	0f 8c 5d 01 00
	00		 jl	 $LN3@open_het

; 61   :     {
; 62   :         /* Keep file descriptor and handle synchronized */
; 63   :         dev->fd = dev->hetb->fd;

  0011e	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00126	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0012d	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00135	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00138	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 64   :         dev->fh = dev->hetb->fh;

  0013e	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00146	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0014d	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00155	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00158	48 89 81 b0 01
	00 00		 mov	 QWORD PTR [rcx+432], rax

; 65   : 
; 66   :         if (dev->hetb->writeprotect)

  0015f	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00167	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0016e	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  00171	83 e0 01	 and	 eax, 1
  00174	85 c0		 test	 eax, eax
  00176	74 1f		 je	 SHORT $LN4@open_het

; 67   :             dev->readonly = 1;

  00178	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00180	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00186	83 c8 02	 or	 eax, 2
  00189	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00191	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN4@open_het:

; 68   : 
; 69   :         rc = het_cntl( dev->hetb, HETCNTL_SET | HETCNTL_COMPRESS,

  00197	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0019f	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  001a5	83 e0 01	 and	 eax, 1
  001a8	44 8b c0	 mov	 r8d, eax
  001ab	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  001b0	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001b8	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  001c5	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 70   :             dev->tdparms.compress );
; 71   : 
; 72   :         if (rc >= 0)

  001c9	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  001ce	0f 8c a7 00 00
	00		 jl	 $LN5@open_het

; 73   :         {
; 74   :             rc = het_cntl( dev->hetb, HETCNTL_SET | HETCNTL_METHOD,

  001d4	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001dc	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  001e2	d1 e8		 shr	 eax, 1
  001e4	83 e0 07	 and	 eax, 7
  001e7	44 8b c0	 mov	 r8d, eax
  001ea	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  001ef	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001f7	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  001fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00204	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 75   :                 dev->tdparms.method );
; 76   : 
; 77   :             if (rc >= 0)

  00208	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  0020d	7c 6c		 jl	 SHORT $LN6@open_het

; 78   :             {
; 79   :                 rc = het_cntl( dev->hetb, HETCNTL_SET | HETCNTL_LEVEL,

  0020f	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00217	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0021d	c1 e8 04	 shr	 eax, 4
  00220	83 e0 0f	 and	 eax, 15
  00223	44 8b c0	 mov	 r8d, eax
  00226	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  0022b	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00233	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00240	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 80   :                     dev->tdparms.level );
; 81   : 
; 82   :                 if (rc >= 0)

  00244	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00249	7c 30		 jl	 SHORT $LN7@open_het

; 83   :                 {
; 84   :                     rc = het_cntl( dev->hetb, HETCNTL_SET | HETCNTL_CHUNKSIZE,

  0024b	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00253	0f b7 80 34 10
	00 00		 movzx	 eax, WORD PTR [rax+4148]
  0025a	44 8b c0	 mov	 r8d, eax
  0025d	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  00262	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0026a	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00277	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax
$LN7@open_het:
$LN6@open_het:
$LN5@open_het:
$LN3@open_het:

; 85   :                         dev->tdparms.chksize );
; 86   :                 }
; 87   :             }
; 88   :         }
; 89   :     }
; 90   : 
; 91   :     /* Check for open failure */
; 92   : 
; 93   :     if (rc < 0)

  0027b	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00280	0f 8d e9 01 00
	00		 jge	 $LN8@open_het

; 94   :     {
; 95   :         int save_errno = errno;

  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0028c	8b 00		 mov	 eax, DWORD PTR [rax]
  0028e	89 84 24 8c 00
	00 00		 mov	 DWORD PTR save_errno$1[rsp], eax

; 96   :         het_close( &dev->hetb );

  00295	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0029d	48 05 28 10 00
	00		 add	 rax, 4136		; 00001028H
  002a3	48 8b c8	 mov	 rcx, rax
  002a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_close

; 97   :         dev->fd = -1;

  002ac	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002b4	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 98   :         dev->fh = NULL;

  002be	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002c6	48 c7 80 b0 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+432], 0

; 99   :         errno = save_errno;

  002d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002d7	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR save_errno$1[rsp]
  002de	89 08		 mov	 DWORD PTR [rax], ecx

; 100  : 
; 101  :         {
; 102  :             char msgbuf[128];
; 103  :             MSGBUF( msgbuf, "Het error '%s': '%s'",

  002e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002e6	8b 08		 mov	 ecx, DWORD PTR [rax]
  002e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  002ee	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
  002f6	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  002fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00300	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  00308	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0030d	4c 8b c8	 mov	 r9, rax
  00310	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169215
  00317	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0031c	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$2[rsp]
  00324	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 104  :                 het_error( rc ), strerror( errno ));
; 105  : 
; 106  :             // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 107  :             WRMSG( HHC00205, "E", LCSS_DEVNUM,

  0032a	48 83 bc 24 60
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00333	74 12		 je	 SHORT $LN17@open_het
  00335	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0033d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00341	89 44 24 7c	 mov	 DWORD PTR tv196[rsp], eax
  00345	eb 08		 jmp	 SHORT $LN18@open_het
$LN17@open_het:
  00347	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv196[rsp], 0
$LN18@open_het:
  0034f	48 83 bc 24 60
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00358	74 17		 je	 SHORT $LN19@open_het
  0035a	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00362	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00366	d1 f8		 sar	 eax, 1
  00368	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv202[rsp], eax
  0036f	eb 0b		 jmp	 SHORT $LN20@open_het
$LN19@open_het:
  00371	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv202[rsp], 0
$LN20@open_het:
  0037c	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00384	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0038a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv191[rsp], rax
  00392	b9 01 00 00 00	 mov	 ecx, 1
  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0039d	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$2[rsp]
  003a5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  003aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169216
  003b1	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  003b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169217
  003bd	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv191[rsp]
  003ca	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003cf	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv196[rsp]
  003d3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003d7	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv202[rsp]
  003de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169218
  003e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169219
  003f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00405	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169220
  0040c	ba 6c 00 00 00	 mov	 edx, 108		; 0000006cH
  00411	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169221
  00418	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 108  :                     dev->filename, "het", "het_open()", msgbuf );
; 109  :         }
; 110  : 
; 111  :         STRLCPY( dev->filename, TAPE_UNLOADED );

  0041e	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00426	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0042c	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00432	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169222
  00439	48 8b c8	 mov	 rcx, rax
  0043c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 112  :         build_senseX( TAPE_BSENSE_TAPELOADFAIL, dev, unitstat, code );

  00442	44 0f b6 8c 24
	70 02 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0044b	4c 8b 84 24 68
	02 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00453	48 8b 94 24 60
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0045b	b9 01 00 00 00	 mov	 ecx, 1
  00460	e8 00 00 00 00	 call	 build_senseX

; 113  :         return -1;

  00465	b8 ff ff ff ff	 mov	 eax, -1
  0046a	e9 55 01 00 00	 jmp	 $LN1@open_het
$LN8@open_het:

; 114  :     }
; 115  : 
; 116  :     /* Open success */
; 117  : 
; 118  :     if (sysblk.auto_tape_create && dev->hetb->created)

  0046f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00476	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0047c	c1 e8 13	 shr	 eax, 19
  0047f	83 e0 01	 and	 eax, 1
  00482	85 c0		 test	 eax, eax
  00484	0f 84 38 01 00
	00		 je	 $LN9@open_het
  0048a	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00492	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  00499	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0049c	c1 e8 0b	 shr	 eax, 11
  0049f	83 e0 01	 and	 eax, 1
  004a2	85 c0		 test	 eax, eax
  004a4	0f 84 18 01 00
	00		 je	 $LN9@open_het

; 119  :     {
; 120  :         if (!dev->batch || !dev->quiet)

  004aa	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004b2	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  004b8	c1 e8 0a	 shr	 eax, 10
  004bb	83 e0 01	 and	 eax, 1
  004be	85 c0		 test	 eax, eax
  004c0	74 1c		 je	 SHORT $LN11@open_het
  004c2	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004ca	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  004d0	c1 e8 0c	 shr	 eax, 12
  004d3	83 e0 01	 and	 eax, 1
  004d6	85 c0		 test	 eax, eax
  004d8	0f 85 e4 00 00
	00		 jne	 $LN10@open_het
$LN11@open_het:

; 121  :             // "%1d:%04X Tape file %s, type %s: tape created"
; 122  :             WRMSG( HHC00235, "I", LCSS_DEVNUM, dev->filename, "het" );

  004de	48 83 bc 24 60
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004e7	74 15		 je	 SHORT $LN21@open_het
  004e9	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004f1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  004f5	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv244[rsp], eax
  004fc	eb 0b		 jmp	 SHORT $LN22@open_het
$LN21@open_het:
  004fe	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN22@open_het:
  00509	48 83 bc 24 60
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00512	74 17		 je	 SHORT $LN23@open_het
  00514	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0051c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00520	d1 f8		 sar	 eax, 1
  00522	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv250[rsp], eax
  00529	eb 0b		 jmp	 SHORT $LN24@open_het
$LN23@open_het:
  0052b	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv250[rsp], 0
$LN24@open_het:
  00536	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0053e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00544	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv239[rsp], rax
  0054c	b9 01 00 00 00	 mov	 ecx, 1
  00551	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169226
  0055e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00563	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv239[rsp]
  0056b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00570	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv244[rsp]
  00577	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0057b	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv250[rsp]
  00582	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00586	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169227
  0058d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00592	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169228
  00599	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0059e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005a3	41 b9 03 00 00
	00		 mov	 r9d, 3
  005a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169229
  005b0	ba 7a 00 00 00	 mov	 edx, 122		; 0000007aH
  005b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169230
  005bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@open_het:
$LN9@open_het:

; 123  :     }
; 124  :     return 0;

  005c2	33 c0		 xor	 eax, eax
$LN1@open_het:

; 125  : 
; 126  : } /* end function open_het */

  005c4	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005cc	48 33 cc	 xor	 rcx, rsp
  005cf	e8 00 00 00 00	 call	 __security_check_cookie
  005d4	48 81 c4 58 02
	00 00		 add	 rsp, 600		; 00000258H
  005db	c3		 ret	 0
open_het ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
