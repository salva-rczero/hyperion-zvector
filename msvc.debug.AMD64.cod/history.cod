; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	history_requested
PUBLIC	historyCmdLine
PUBLIC	history_lines
PUBLIC	history_lines_end
PUBLIC	history_ptr
PUBLIC	backup
PUBLIC	history_count
_BSS	SEGMENT
history_requested DD 01H DUP (?)
	ALIGN	8

historyCmdLine DQ 01H DUP (?)
history_lines DQ 01H DUP (?)
history_lines_end DQ 01H DUP (?)
history_ptr DQ	01H DUP (?)
backup	DQ	01H DUP (?)
history_count DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	history_init
PUBLIC	history_add
PUBLIC	history_remove
PUBLIC	history_next
PUBLIC	history_prev
PUBLIC	history_relative_line
PUBLIC	history_absolute_line
PUBLIC	history_show
PUBLIC	copy_to_historyCmdLine
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$history_init DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$history_init
$pdata$history_add DD imagerel $LN8
	DD	imagerel $LN8+417
	DD	imagerel $unwind$history_add
$pdata$history_remove DD imagerel $LN24
	DD	imagerel $LN24+496
	DD	imagerel $unwind$history_remove
$pdata$history_next DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$history_next
$pdata$history_prev DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$history_prev
$pdata$history_relative_line DD imagerel $LN7
	DD	imagerel $LN7+405
	DD	imagerel $unwind$history_relative_line
$pdata$history_absolute_line DD imagerel $LN10
	DD	imagerel $LN10+426
	DD	imagerel $unwind$history_absolute_line
$pdata$history_show DD imagerel $LN5
	DD	imagerel $LN5+143
	DD	imagerel $unwind$history_show
$pdata$copy_to_historyCmdLine DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$copy_to_historyCmdLine
pdata	ENDS
_DATA	SEGMENT
$SG159143 DB	'history_remove', 00H
	ORG $+1
$SG159144 DB	'history.c', 00H
	ORG $+6
$SG159145 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159147 DB	'history_remove', 00H
	ORG $+1
$SG159148 DB	'history.c', 00H
	ORG $+6
$SG159152 DB	'history_remove', 00H
	ORG $+1
$SG159180 DB	'History limited to last %d commands', 00H
	ORG $+4
$SG159149 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159153 DB	'history.c', 00H
	ORG $+6
$SG159156 DB	'history_remove', 00H
	ORG $+1
$SG159183 DB	'history_relative_line', 00H
	ORG $+2
$SG159154 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159157 DB	'history.c', 00H
	ORG $+2
$SG159181 DB	'E', 00H
	ORG $+2
$SG159182 DB	'HHC02293%s %s', 0aH, 00H
	ORG $+1
$SG159189 DB	'history_relative_line', 00H
	ORG $+2
$SG159158 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159184 DB	'history.c', 00H
	ORG $+2
$SG159187 DB	'E', 00H
	ORG $+2
$SG159186 DB	'Only %d commands in history', 00H
$SG159202 DB	'E', 00H
	ORG $+2
$SG159188 DB	'HHC02293%s %s', 0aH, 00H
	ORG $+1
$SG159190 DB	'history.c', 00H
	ORG $+2
$SG159209 DB	'E', 00H
	ORG $+2
$SG159201 DB	'History empty', 00H
	ORG $+2
$SG159203 DB	'HHC02293%s %s', 0aH, 00H
	ORG $+1
$SG159204 DB	'history_absolute_line', 00H
	ORG $+2
$SG159205 DB	'history.c', 00H
	ORG $+2
$SG159217 DB	'I', 00H
	ORG $+2
$SG159208 DB	'Only commands %d-%d are in history', 00H
	ORG $+5
$SG159210 DB	'HHC02293%s %s', 0aH, 00H
	ORG $+1
$SG159211 DB	'history_absolute_line', 00H
	ORG $+2
$SG159212 DB	'history.c', 00H
	ORG $+6
$SG159218 DB	'HHC02273%s Index %3d: %s', 0aH, 00H
	ORG $+6
$SG159219 DB	'history_show', 00H
	ORG $+3
$SG159220 DB	'history.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:history_absolute_line
	DD	015H
	DD	0192H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:history_relative_line
	DD	015H
	DD	017dH
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$history_init DD 010401H
	DD	04204H
$unwind$history_add DD 010901H
	DD	06209H
$unwind$history_remove DD 010401H
	DD	06204H
$unwind$history_next DD 010401H
	DD	04204H
$unwind$history_prev DD 010401H
	DD	04204H
$unwind$history_relative_line DD 021d19H
	DD	017010bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$history_absolute_line DD 021d19H
	DD	017010bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$history_show DD 010401H
	DD	0c204H
$unwind$copy_to_historyCmdLine DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
size$ = 32
cmdline$ = 64
copy_to_historyCmdLine PROC

; 47   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 48   :     size_t size = strlen( cmdline ) + 1;

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cmdline$[rsp]
  0000e	e8 00 00 00 00	 call	 strlen
  00013	48 ff c0	 inc	 rax
  00016	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 49   :     free( historyCmdLine );

  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR historyCmdLine
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 50   :     historyCmdLine = malloc( size );

  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR size$[rsp]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00033	48 89 05 00 00
	00 00		 mov	 QWORD PTR historyCmdLine, rax

; 51   :     strlcpy( historyCmdLine, cmdline, size );

  0003a	4c 8b 44 24 20	 mov	 r8, QWORD PTR size$[rsp]
  0003f	48 8b 54 24 40	 mov	 rdx, QWORD PTR cmdline$[rsp]
  00044	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR historyCmdLine
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 52   : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
copy_to_historyCmdLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
tmp$ = 80
history_show PROC

; 298  : {

$LN5:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 299  :     HISTORY* tmp = history_lines;

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  0000b	48 89 44 24 50	 mov	 QWORD PTR tmp$[rsp], rax
$LN2@history_sh:

; 300  : 
; 301  :     while (tmp)

  00010	48 83 7c 24 50
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00016	74 70		 je	 SHORT $LN3@history_sh

; 302  :     {
; 303  :         // "Index %3d: %s"
; 304  :         WRMSG( HHC02273, "I", tmp->number, tmp->cmdline );

  00018	b9 01 00 00 00	 mov	 ecx, 1
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tmp$[rsp]
  00028	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0002c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tmp$[rsp]
  00036	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00038	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159217
  00043	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159218
  0004f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00054	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00059	41 b9 03 00 00
	00		 mov	 r9d, 3
  0005f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159219
  00066	ba 30 01 00 00	 mov	 edx, 304		; 00000130H
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159220
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 305  :         tmp = tmp->next;

  00078	48 8b 44 24 50	 mov	 rax, QWORD PTR tmp$[rsp]
  0007d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00081	48 89 44 24 50	 mov	 QWORD PTR tmp$[rsp], rax

; 306  :     }

  00086	eb 88		 jmp	 SHORT $LN2@history_sh
$LN3@history_sh:

; 307  :     return 0;

  00088	33 c0		 xor	 eax, eax

; 308  : }

  0008a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0008e	c3		 ret	 0
history_show ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
lowlimit$ = 64
tv82 = 68
tmp$ = 72
buf$ = 80
__$ArrayPad$ = 160
aline$ = 192
history_absolute_line PROC

; 262  : {

$LN10:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 263  :     HISTORY* tmp = history_lines_end;

  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00024	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax

; 264  :     int lowlimit;
; 265  :     char buf[80];
; 266  : 
; 267  :     if (!history_count)

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR history_count, 0
  00030	75 5d		 jne	 SHORT $LN4@history_ab

; 268  :     {
; 269  :         // "%s"
; 270  :         WRMSG( HHC02293, "E", "History empty" );

  00032	b9 01 00 00 00	 mov	 ecx, 1
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159201
  00044	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159202
  00050	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159203
  0005c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00061	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00066	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159204
  00073	ba 0e 01 00 00	 mov	 edx, 270		; 0000010eH
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159205
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 271  :         return -1;

  00085	b8 ff ff ff ff	 mov	 eax, -1
  0008a	e9 03 01 00 00	 jmp	 $LN1@history_ab
$LN4@history_ab:

; 272  :     }
; 273  : 
; 274  :     lowlimit = (history_count - HISTORY_MAX);

  0008f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR history_count
  00095	2d ff 00 00 00	 sub	 eax, 255		; 000000ffH
  0009a	89 44 24 40	 mov	 DWORD PTR lowlimit$[rsp], eax

; 275  : 
; 276  :     if (aline > history_count || aline <= lowlimit)

  0009e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR history_count
  000a4	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR aline$[rsp], eax
  000ab	7f 11		 jg	 SHORT $LN6@history_ab
  000ad	8b 44 24 40	 mov	 eax, DWORD PTR lowlimit$[rsp]
  000b1	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR aline$[rsp], eax
  000b8	0f 8f 99 00 00
	00		 jg	 $LN5@history_ab
$LN6@history_ab:

; 277  :     {
; 278  :         MSGBUF( buf, "Only commands %d-%d are in history",

  000be	83 7c 24 40 00	 cmp	 DWORD PTR lowlimit$[rsp], 0
  000c3	7d 0a		 jge	 SHORT $LN8@history_ab
  000c5	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  000cd	eb 0a		 jmp	 SHORT $LN9@history_ab
$LN8@history_ab:
  000cf	8b 44 24 40	 mov	 eax, DWORD PTR lowlimit$[rsp]
  000d3	ff c0		 inc	 eax
  000d5	89 44 24 44	 mov	 DWORD PTR tv82[rsp], eax
$LN9@history_ab:
  000d9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR history_count
  000df	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e3	44 8b 4c 24 44	 mov	 r9d, DWORD PTR tv82[rsp]
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159208
  000ef	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  000f4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 279  :             lowlimit < 0 ? 1 : lowlimit + 1, history_count );
; 280  :         // "%s"
; 281  :         WRMSG( HHC02293, "E", buf );

  000ff	b9 01 00 00 00	 mov	 ecx, 1
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0010a	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0010f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159209
  0011b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159210
  00127	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00131	41 b9 03 00 00
	00		 mov	 r9d, 3
  00137	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159211
  0013e	ba 19 01 00 00	 mov	 edx, 281		; 00000119H
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159212
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 282  :         return -1;

  00150	b8 ff ff ff ff	 mov	 eax, -1
  00155	eb 3b		 jmp	 SHORT $LN1@history_ab
$LN5@history_ab:
$LN2@history_ab:

; 283  :     }
; 284  : 
; 285  :     while (tmp->number != aline)

  00157	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0015c	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR aline$[rsp]
  00163	39 08		 cmp	 DWORD PTR [rax], ecx
  00165	74 10		 je	 SHORT $LN3@history_ab

; 286  :         tmp = tmp->prev;

  00167	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0016c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00170	48 89 44 24 48	 mov	 QWORD PTR tmp$[rsp], rax
  00175	eb e0		 jmp	 SHORT $LN2@history_ab
$LN3@history_ab:

; 287  : 
; 288  :     copy_to_historyCmdLine( tmp->cmdline );

  00177	48 8b 44 24 48	 mov	 rax, QWORD PTR tmp$[rsp]
  0017c	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00180	e8 00 00 00 00	 call	 copy_to_historyCmdLine

; 289  : 
; 290  :     history_ptr = NULL;

  00185	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_ptr, 0

; 291  :     return 0;

  00190	33 c0		 xor	 eax, eax
$LN1@history_ab:

; 292  : }

  00192	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0019a	48 33 cc	 xor	 rcx, rsp
  0019d	e8 00 00 00 00	 call	 __security_check_cookie
  001a2	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001a9	c3		 ret	 0
history_absolute_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
tmp$ = 64
buf$ = 80
__$ArrayPad$ = 160
rline$ = 192
history_relative_line PROC

; 226  : {

$LN7:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 227  :     HISTORY* tmp = history_lines_end;

  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00024	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 228  :     char buf[80];
; 229  : 
; 230  :     if (-rline > HISTORY_MAX)

  00029	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR rline$[rsp]
  00030	f7 d8		 neg	 eax
  00032	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00037	7e 78		 jle	 SHORT $LN4@history_re

; 231  :     {
; 232  :         MSGBUF( buf, "History limited to last %d commands", HISTORY_MAX );

  00039	41 b9 ff 00 00
	00		 mov	 r9d, 255		; 000000ffH
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159180
  00046	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  0004b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 233  :         // "%s"
; 234  :         WRMSG( HHC02293, "E", buf );

  00056	b9 01 00 00 00	 mov	 ecx, 1
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00061	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00066	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159181
  00072	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159182
  0007e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00083	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00088	41 b9 03 00 00
	00		 mov	 r9d, 3
  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159183
  00095	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159184
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 235  :         return -1;

  000a7	b8 ff ff ff ff	 mov	 eax, -1
  000ac	e9 cc 00 00 00	 jmp	 $LN1@history_re
$LN4@history_re:

; 236  :     }
; 237  : 
; 238  :     if (-rline > history_count)

  000b1	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR rline$[rsp]
  000b8	f7 d8		 neg	 eax
  000ba	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR history_count
  000c0	7e 76		 jle	 SHORT $LN5@history_re

; 239  :     {
; 240  :         MSGBUF( buf, "Only %d commands in history", history_count );

  000c2	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR history_count
  000c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159186
  000d0	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  000d5	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 241  :         // "%s"
; 242  :         WRMSG( HHC02293, "E", buf );

  000e0	b9 01 00 00 00	 mov	 ecx, 1
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000eb	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  000f0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159187
  000fc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159188
  00108	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00112	41 b9 03 00 00
	00		 mov	 r9d, 3
  00118	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159189
  0011f	ba f2 00 00 00	 mov	 edx, 242		; 000000f2H
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159190
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 243  :         return -1;

  00131	b8 ff ff ff ff	 mov	 eax, -1
  00136	eb 45		 jmp	 SHORT $LN1@history_re
$LN5@history_re:
$LN2@history_re:

; 244  :     }
; 245  : 
; 246  :     while (rline < -1)

  00138	83 bc 24 c0 00
	00 00 ff	 cmp	 DWORD PTR rline$[rsp], -1
  00140	7d 20		 jge	 SHORT $LN3@history_re

; 247  :     {
; 248  :         tmp = tmp->prev;

  00142	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  00147	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0014b	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 249  :         rline++;

  00150	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR rline$[rsp]
  00157	ff c0		 inc	 eax
  00159	89 84 24 c0 00
	00 00		 mov	 DWORD PTR rline$[rsp], eax

; 250  :     }

  00160	eb d6		 jmp	 SHORT $LN2@history_re
$LN3@history_re:

; 251  : 
; 252  :     copy_to_historyCmdLine( tmp->cmdline );

  00162	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  00167	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0016b	e8 00 00 00 00	 call	 copy_to_historyCmdLine

; 253  : 
; 254  :     history_ptr = NULL;

  00170	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_ptr, 0

; 255  :     return 0;

  0017b	33 c0		 xor	 eax, eax
$LN1@history_re:

; 256  : }

  0017d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00185	48 33 cc	 xor	 rcx, rsp
  00188	e8 00 00 00 00	 call	 __security_check_cookie
  0018d	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00194	c3		 ret	 0
history_relative_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
history_prev PROC

; 206  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 207  :     if (!history_ptr)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR history_ptr, 0
  0000c	75 33		 jne	 SHORT $LN2@history_pr

; 208  :     {
; 209  :         if (!(history_ptr = history_lines_end))

  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00015	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_ptr, rax
  0001c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR history_ptr, 0
  00024	75 07		 jne	 SHORT $LN3@history_pr

; 210  :             return -1;

  00026	b8 ff ff ff ff	 mov	 eax, -1
  0002b	eb 56		 jmp	 SHORT $LN1@history_pr
$LN3@history_pr:

; 211  :         copy_to_historyCmdLine( history_ptr->cmdline );

  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00034	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00038	e8 00 00 00 00	 call	 copy_to_historyCmdLine

; 212  :         return 0;

  0003d	33 c0		 xor	 eax, eax
  0003f	eb 42		 jmp	 SHORT $LN1@history_pr
$LN2@history_pr:

; 213  :     }
; 214  : 
; 215  :     if (!history_ptr->prev) history_ptr = history_lines_end;

  00041	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00048	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0004d	75 10		 jne	 SHORT $LN4@history_pr
  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00056	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_ptr, rax
  0005d	eb 12		 jmp	 SHORT $LN5@history_pr
$LN4@history_pr:

; 216  :     else                    history_ptr = history_ptr->prev;

  0005f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00066	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006a	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_ptr, rax
$LN5@history_pr:

; 217  : 
; 218  :     copy_to_historyCmdLine( history_ptr->cmdline );

  00071	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00078	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0007c	e8 00 00 00 00	 call	 copy_to_historyCmdLine

; 219  :     return 0;

  00081	33 c0		 xor	 eax, eax
$LN1@history_pr:

; 220  : }

  00083	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00087	c3		 ret	 0
history_prev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
history_next PROC

; 186  : {

$LN7:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 187  :     if (!history_ptr)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR history_ptr, 0
  0000c	75 33		 jne	 SHORT $LN2@history_ne

; 188  :     {
; 189  :         if (!(history_ptr = history_lines_end))

  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00015	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_ptr, rax
  0001c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR history_ptr, 0
  00024	75 07		 jne	 SHORT $LN3@history_ne

; 190  :             return -1;

  00026	b8 ff ff ff ff	 mov	 eax, -1
  0002b	eb 56		 jmp	 SHORT $LN1@history_ne
$LN3@history_ne:

; 191  :         copy_to_historyCmdLine( history_ptr->cmdline );

  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00034	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00038	e8 00 00 00 00	 call	 copy_to_historyCmdLine

; 192  :         return 0;

  0003d	33 c0		 xor	 eax, eax
  0003f	eb 42		 jmp	 SHORT $LN1@history_ne
$LN2@history_ne:

; 193  :     }
; 194  : 
; 195  :     if (!history_ptr->next) history_ptr = history_lines;

  00041	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00048	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0004d	75 10		 jne	 SHORT $LN4@history_ne
  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  00056	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_ptr, rax
  0005d	eb 12		 jmp	 SHORT $LN5@history_ne
$LN4@history_ne:

; 196  :     else                    history_ptr = history_ptr->next;

  0005f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00066	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0006a	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_ptr, rax
$LN5@history_ne:

; 197  : 
; 198  :     copy_to_historyCmdLine( history_ptr->cmdline );

  00071	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_ptr
  00078	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0007c	e8 00 00 00 00	 call	 copy_to_historyCmdLine

; 199  :     return 0;

  00081	33 c0		 xor	 eax, eax
$LN1@history_ne:

; 200  : }

  00083	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00087	c3		 ret	 0
history_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
tmp$ = 32
history_remove PROC

; 141  : {

$LN24:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 142  :     HISTORY* tmp;
; 143  : 
; 144  :     if (!history_lines)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR history_lines, 0
  0000c	75 07		 jne	 SHORT $LN14@history_re

; 145  :         return 0;

  0000e	33 c0		 xor	 eax, eax
  00010	e9 d6 01 00 00	 jmp	 $LN1@history_re
$LN14@history_re:

; 146  : 
; 147  :     if (history_lines == history_lines_end)

  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  0001c	48 39 05 00 00
	00 00		 cmp	 QWORD PTR history_lines, rax
  00023	0f 85 24 01 00
	00		 jne	 $LN15@history_re
$LN4@history_re:

; 148  :     {
; 149  :         ASSERT( !history_lines->next );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  00030	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00035	74 5c		 je	 SHORT $LN16@history_re
$LN7@history_re:
  00037	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159143
  0003e	41 b8 95 00 00
	00		 mov	 r8d, 149		; 00000095H
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159144
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159145
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0005e	85 c0		 test	 eax, eax
  00060	74 20		 je	 SHORT $LN17@history_re
  00062	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159147
  00069	41 b8 95 00 00
	00		 mov	 r8d, 149		; 00000095H
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159148
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159149
  0007d	e8 00 00 00 00	 call	 DebuggerTrace
$LN17@history_re:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 af		 jne	 SHORT $LN7@history_re
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0008e	85 c0		 test	 eax, eax
  00090	74 01		 je	 SHORT $LN18@history_re
  00092	cc		 int	 3
$LN18@history_re:
$LN16@history_re:
  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 90		 jne	 SHORT $LN4@history_re
$LN10@history_re:

; 150  :         ASSERT( history_count == 1 );

  00099	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR history_count, 1
  000a0	74 5c		 je	 SHORT $LN19@history_re
$LN13@history_re:
  000a2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159152
  000a9	41 b8 96 00 00
	00		 mov	 r8d, 150		; 00000096H
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159153
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159154
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000c9	85 c0		 test	 eax, eax
  000cb	74 20		 je	 SHORT $LN20@history_re
  000cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159156
  000d4	41 b8 96 00 00
	00		 mov	 r8d, 150		; 00000096H
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159157
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159158
  000e8	e8 00 00 00 00	 call	 DebuggerTrace
$LN20@history_re:
  000ed	33 c0		 xor	 eax, eax
  000ef	85 c0		 test	 eax, eax
  000f1	75 af		 jne	 SHORT $LN13@history_re
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000f9	85 c0		 test	 eax, eax
  000fb	74 01		 je	 SHORT $LN21@history_re
  000fd	cc		 int	 3
$LN21@history_re:
$LN19@history_re:
  000fe	33 c0		 xor	 eax, eax
  00100	85 c0		 test	 eax, eax
  00102	75 95		 jne	 SHORT $LN10@history_re

; 151  : 
; 152  :         free( history_lines->cmdline );

  00104	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  0010b	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 153  :         free( history_lines );

  00115	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR history_lines
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 154  : 
; 155  :         history_lines     = NULL;

  00122	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_lines, 0

; 156  :         history_lines_end = NULL;

  0012d	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_lines_end, 0

; 157  : 
; 158  :         history_count--;

  00138	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR history_count
  0013e	ff c8		 dec	 eax
  00140	89 05 00 00 00
	00		 mov	 DWORD PTR history_count, eax

; 159  : 
; 160  :         return 0;

  00146	33 c0		 xor	 eax, eax
  00148	e9 9e 00 00 00	 jmp	 $LN1@history_re
$LN15@history_re:

; 161  :     }
; 162  : 
; 163  :     tmp = history_lines_end->prev;

  0014d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00154	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00158	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 164  :     tmp->next = NULL;

  0015d	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  00162	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 165  : 
; 166  :     free( history_lines_end->cmdline );

  0016a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00171	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 167  :     free( history_lines_end );

  0017b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR history_lines_end
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 168  : 
; 169  :     history_count--;

  00188	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR history_count
  0018e	ff c8		 dec	 eax
  00190	89 05 00 00 00
	00		 mov	 DWORD PTR history_count, eax

; 170  :     history_lines_end = tmp;

  00196	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  0019b	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_lines_end, rax

; 171  : 
; 172  :     if (backup)

  001a2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR backup, 0
  001aa	74 3d		 je	 SHORT $LN22@history_re

; 173  :     {
; 174  :         backup->next = history_lines;

  001ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR backup
  001b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR history_lines
  001ba	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 175  :         history_lines->prev = backup;

  001be	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  001c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR backup
  001cc	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 176  :         history_lines = backup;

  001d0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR backup
  001d7	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_lines, rax

; 177  :         backup = NULL;

  001de	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR backup, 0
$LN22@history_re:

; 178  :     }
; 179  :     return 0;

  001e9	33 c0		 xor	 eax, eax
$LN1@history_re:

; 180  : }

  001eb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001ef	c3		 ret	 0
history_remove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
tmp$ = 32
size$ = 40
cmdline$ = 64
history_add PROC

; 74   : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 75   :     HISTORY*  tmp;
; 76   :     size_t    size;
; 77   : 
; 78   :     /* if there is some backup line remaining, remove it */
; 79   :     if (backup)

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR backup, 0
  00011	74 29		 je	 SHORT $LN2@history_ad

; 80   :     {
; 81   :         free( backup->cmdline );

  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR backup
  0001a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 82   :         free( backup );

  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR backup
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 83   :         backup = NULL;

  00031	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR backup, 0
$LN2@history_ad:

; 84   :     }
; 85   : 
; 86   :     /* If last line is exactly the same as this line
; 87   :        ignore and return to caller
; 88   :     */
; 89   :     if (history_lines && !strcmp( cmdline, history_lines_end->cmdline ))

  0003c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR history_lines, 0
  00044	74 2b		 je	 SHORT $LN3@history_ad
  00046	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  0004d	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00056	e8 00 00 00 00	 call	 strcmp
  0005b	85 c0		 test	 eax, eax
  0005d	75 12		 jne	 SHORT $LN3@history_ad

; 90   :     {
; 91   :         history_ptr = NULL;

  0005f	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_ptr, 0

; 92   :         return 0;

  0006a	33 c0		 xor	 eax, eax
  0006c	e9 2b 01 00 00	 jmp	 $LN1@history_ad
$LN3@history_ad:

; 93   :     }
; 94   : 
; 95   :     /* Allocate space and copy string */
; 96   :     tmp  = (HISTORY*) malloc( sizeof( HISTORY ));

  00071	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0007c	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 97   :     size = strlen( cmdline ) + 1;

  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00086	e8 00 00 00 00	 call	 strlen
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 98   :     tmp->cmdline = (char*) malloc(size);

  00093	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  000a3	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 99   :     strlcpy( tmp->cmdline, cmdline, size );

  000a7	4c 8b 44 24 28	 mov	 r8, QWORD PTR size$[rsp]
  000ac	48 8b 54 24 40	 mov	 rdx, QWORD PTR cmdline$[rsp]
  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  000b6	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 100  :     tmp->next = NULL;

  000c0	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  000c5	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 101  :     tmp->prev = NULL;

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  000d2	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 102  :     tmp->number = ++history_count;

  000da	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR history_count
  000e0	ff c0		 inc	 eax
  000e2	89 05 00 00 00
	00		 mov	 DWORD PTR history_count, eax
  000e8	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  000ed	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR history_count
  000f3	89 08		 mov	 DWORD PTR [rax], ecx

; 103  : 
; 104  :     if (!history_lines)

  000f5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR history_lines, 0
  000fd	75 1a		 jne	 SHORT $LN4@history_ad

; 105  :     {
; 106  :         /* first in list */
; 107  :         history_lines     = tmp;

  000ff	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  00104	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_lines, rax

; 108  :         history_lines_end = tmp;

  0010b	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  00110	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_lines_end, rax

; 109  :     }

  00117	eb 2c		 jmp	 SHORT $LN5@history_ad
$LN4@history_ad:

; 110  :     else
; 111  :     {
; 112  :         tmp->prev               = history_lines_end;

  00119	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  0011e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR history_lines_end
  00125	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 113  :         history_lines_end->next = tmp;

  00129	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines_end
  00130	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  00135	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 114  :         history_lines_end       = tmp;

  00139	48 8b 44 24 20	 mov	 rax, QWORD PTR tmp$[rsp]
  0013e	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_lines_end, rax
$LN5@history_ad:

; 115  :     }
; 116  : 
; 117  :     history_ptr = NULL;

  00145	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_ptr, 0

; 118  : 
; 119  :     if (history_count > HISTORY_MAX)

  00150	81 3d 00 00 00
	00 ff 00 00 00	 cmp	 DWORD PTR history_count, 255 ; 000000ffH
  0015a	7e 3e		 jle	 SHORT $LN6@history_ad

; 120  :     {
; 121  :         /* If we are over maximum number of lines in history list,
; 122  :            oldest one should be deleted, but we don't know whether
; 123  :            history_remove will be called or not, so the oldest line
; 124  :            is just saved instead, to be deleted on the next call.
; 125  :         */
; 126  :         backup              = history_lines;

  0015c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  00163	48 89 05 00 00
	00 00		 mov	 QWORD PTR backup, rax

; 127  :         history_lines       = history_lines->next;

  0016a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  00171	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00175	48 89 05 00 00
	00 00		 mov	 QWORD PTR history_lines, rax

; 128  :         backup->next        = NULL;

  0017c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR backup
  00183	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 129  :         history_lines->prev = NULL;

  0018b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR history_lines
  00192	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
$LN6@history_ad:

; 130  :     }
; 131  :     return 0;

  0019a	33 c0		 xor	 eax, eax
$LN1@history_ad:

; 132  : }

  0019c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001a0	c3		 ret	 0
history_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\history.c
_TEXT	SEGMENT
history_init PROC

; 58   : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 59   :     history_lines      = NULL;

  00004	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_lines, 0

; 60   :     history_lines_end  = NULL;

  0000f	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_lines_end, 0

; 61   :     history_ptr        = NULL;

  0001a	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR history_ptr, 0

; 62   :     backup             = NULL;

  00025	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR backup, 0

; 63   :     history_count      = 0;

  00030	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR history_count, 0

; 64   : 
; 65   :     historyCmdLine     = (char*) malloc( CMD_SIZE + 1 );

  0003a	b9 01 01 00 00	 mov	 ecx, 257		; 00000101H
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00045	48 89 05 00 00
	00 00		 mov	 QWORD PTR historyCmdLine, rax

; 66   :     history_requested  = 0;

  0004c	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR history_requested, 0

; 67   :     return 0;

  00056	33 c0		 xor	 eax, eax

; 68   : }

  00058	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005c	c3		 ret	 0
history_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
