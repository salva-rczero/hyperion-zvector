; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	syntax
PUBLIC	main
EXTRN	__imp__errno:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_cckd_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_is_dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
$SG159676 DB	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$syntax DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$syntax
$pdata$main DD	imagerel $LN74
	DD	imagerel $LN74+3387
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159621 DB	'DASD CCKD image verification', 00H
	ORG $+3
$SG159622 DB	'cckdcdsk', 00H
	ORG $+3
$SG159638 DB	'open()', 00H
	ORG $+1
$SG159639 DB	'E', 00H
	ORG $+2
$SG159640 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159641 DB	'main', 00H
	ORG $+3
$SG159646 DB	'read()', 00H
	ORG $+1
$SG159647 DB	'E', 00H
	ORG $+2
$SG159642 DB	'cckdcdsk.c', 00H
	ORG $+1
$SG159652 DB	'E', 00H
	ORG $+2
$SG159644 DB	'CKD header incomplete', 00H
	ORG $+2
$SG159648 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159649 DB	'main', 00H
	ORG $+3
$SG159659 DB	'E', 00H
	ORG $+2
$SG159650 DB	'cckdcdsk.c', 00H
	ORG $+1
$SG159654 DB	'main', 00H
	ORG $+7
$SG159653 DB	'HHC02424%s Dasd image file format unsupported or unrecog'
	DB	'nized: %s', 0aH, 00H
	ORG $+1
$SG159666 DB	'E', 00H
	ORG $+2
$SG159655 DB	'cckdcdsk.c', 00H
	ORG $+1
$SG159671 DB	'E', 00H
	ORG $+2
$SG159658 DB	'lseek()', 00H
$SG159660 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159661 DB	'main', 00H
	ORG $+3
$SG159665 DB	'read()', 00H
	ORG $+1
$SG159677 DB	'I', 00H
	ORG $+2
$SG159662 DB	'cckdcdsk.c', 00H
	ORG $+1
$SG159681 DB	'W', 00H
	ORG $+2
$SG159664 DB	'incomplete', 00H
	ORG $+1
$SG159668 DB	'main', 00H
	ORG $+7
$SG159667 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159682 DB	'I', 00H
	ORG $+2
$SG159669 DB	'cckdcdsk.c', 00H
	ORG $+1
$SG159692 DB	'I', 00H
	ORG $+2
$SG159672 DB	'HHC00352%s %1d:%04X CCKD file %s: opened bit is on, use '
	DB	'-f', 0aH, 00H
$SG159673 DB	'main', 00H
	ORG $+3
$SG159694 DB	'syntax', 00H
	ORG $+5
$SG159674 DB	'cckdcdsk.c', 00H
	ORG $+5
$SG159675 DB	' (read-only)', 00H
	ORG $+3
$SG159678 DB	'HHC00379%s %1d:%04X CCKD file %s: starting %s level %d%s'
	DB	'...', 0aH, 00H
	ORG $+3
$SG159679 DB	'main', 00H
	ORG $+3
$SG159680 DB	'cckdcdsk.c', 00H
	ORG $+5
$SG159683 DB	'HHC00380%s %1d:%04X CCKD file %s: %s level %d complete; '
	DB	'rc=%d', 0aH, 00H
	ORG $+1
$SG159684 DB	'main', 00H
	ORG $+3
$SG159685 DB	'cckdcdsk.c', 00H
	ORG $+13
$SG159693 DB	'HHC02411%s Usage: %s [-f] [-level] [-ro] file1 [file2 ..'
	DB	'.]', 0aH, 'HHC02410I   file    name of DASD image file', 0aH, 'H'
	DB	'HC02411I options:', 0aH, 'HHC02411I   -f      force check eve'
	DB	'n if OPENED bit is on', 0aH, 'HHC02411I   -ro     open file r'
	DB	'eadonly, no repairs', 0aH, 'HHC02411I   -0      minimal check'
	DB	'ing (hdr, chdr, l1tab, l2tabs)', 0aH, 'HHC02411I   -1      no'
	DB	'rmal  checking (hdr, chdr, l1tab, l2tabs, free spaces)', 0aH, 'H'
	DB	'HC02411I   -2      extra   checking (hdr, chdr, l1tab, l2tabs'
	DB	', free spaces, trkhdrs)', 0aH, 'HHC02411I   -3      maximal c'
	DB	'hecking (hdr, chdr, l1tab, l2tabs, free spaces, trkimgs)', 0aH
	DB	'HHC02411I   -4      recover everything without using meta-dat'
	DB	'a', 0aH, 00H
	ORG $+1
$SG159695 DB	'cckdcdsk.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	021H
	DD	0cbdH
voltbl	ENDS
xdata	SEGMENT
$unwind$syntax DD 010901H
	DD	08209H
$unwind$main DD	032919H
	DD	04200117H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	020f0H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcdsk.c
_TEXT	SEGMENT
dev$ = 112
rc$ = 120
tv83 = 124
i$ = 128
level$ = 132
maxrc$ = 136
ro$ = 140
pgm$ = 144
tv200 = 152
tv228 = 156
tv234 = 160
force$ = 164
tv286 = 168
tv292 = 172
tv325 = 176
tv331 = 180
tv352 = 184
tv358 = 188
tv381 = 192
tv419 = 196
tv443 = 200
tv449 = 204
tv178 = 208
tv194 = 212
emsg$1 = 216
tv316 = 224
tv372 = 232
tv452 = 240
tv184 = 248
tv189 = 256
tv223 = 264
tv252 = 272
tv275 = 280
tv281 = 288
tv320 = 296
tv347 = 304
tv376 = 312
tv438 = 320
devhdr$ = 336
cdevhdr$ = 848
devblk$ = 1360
__$ArrayPad$ = 8432
argc$ = 8464
argv$ = 8472
main	PROC

; 27   : {

$LN74:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 00 21 00 00	 mov	 eax, 8448		; 00002100H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 f0
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 28   : char           *pgm;                    /* less any extension (.ext) */
; 29   : int             i;                      /* Index                     */
; 30   : int             rc;                     /* Return code               */
; 31   : int             maxrc=0;                /* Worst return code         */

  00029	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR maxrc$[rsp], 0

; 32   : int             level=1;                /* Chkdsk level checking     */

  00034	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR level$[rsp], 1

; 33   : int             ro=0;                   /* 1=Open readonly           */

  0003f	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ro$[rsp], 0

; 34   : int             force=0;                /* 1=Check if OPENED bit on  */

  0004a	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR force$[rsp], 0

; 35   : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 36   : CCKD_DEVHDR     cdevhdr;                /* Compressed CKD device hdr */
; 37   : DEVBLK          devblk;                 /* DEVBLK                    */
; 38   : DEVBLK         *dev;                    /* DEVBLK pointer            */
; 39   : 
; 40   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  00055	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  0005d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00062	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159621
  00069	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159622
  00070	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00078	8b 8c 24 10 21
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  00085	89 84 24 10 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 41   : 
; 42   :     /* parse the arguments */
; 43   :     for (argc--, argv++ ; argc > 0 ; argc--, argv++)

  0008c	8b 84 24 10 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00093	ff c8		 dec	 eax
  00095	89 84 24 10 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  0009c	48 8b 84 24 18
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000a4	48 83 c0 08	 add	 rax, 8
  000a8	48 89 84 24 18
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
  000b0	eb 24		 jmp	 SHORT $LN4@main
$LN2@main:
  000b2	8b 84 24 10 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000b9	ff c8		 dec	 eax
  000bb	89 84 24 10 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  000c2	48 8b 84 24 18
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000ca	48 83 c0 08	 add	 rax, 8
  000ce	48 89 84 24 18
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
$LN4@main:
  000d6	83 bc 24 10 21
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000de	0f 8e aa 01 00
	00		 jle	 $LN3@main

; 44   :     {
; 45   :         if(**argv != '-') break;

  000e4	48 8b 84 24 18
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000ec	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ef	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f2	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  000f5	74 05		 je	 SHORT $LN10@main
  000f7	e9 92 01 00 00	 jmp	 $LN3@main
$LN10@main:

; 46   : 
; 47   :         switch(argv[0][1])

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 00	 imul	 rax, rax, 0
  00105	b9 01 00 00 00	 mov	 ecx, 1
  0010a	48 6b c9 01	 imul	 rcx, rcx, 1
  0010e	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00116	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0011a	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0011e	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
  00122	8b 44 24 7c	 mov	 eax, DWORD PTR tv83[rsp]
  00126	83 e8 30	 sub	 eax, 48			; 00000030H
  00129	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
  0012d	83 7c 24 7c 42	 cmp	 DWORD PTR tv83[rsp], 66	; 00000042H
  00132	0f 87 3f 01 00
	00		 ja	 $LN22@main
  00138	48 63 44 24 7c	 movsxd	 rax, DWORD PTR tv83[rsp]
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00144	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN72@main[rcx+rax]
  0014c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN73@main[rcx+rax*4]
  00153	48 03 c1	 add	 rax, rcx
  00156	ff e0		 jmp	 rax
$LN11@main:
$LN12@main:
$LN13@main:
$LN14@main:
$LN15@main:

; 48   :         {
; 49   :             case '0':
; 50   :             case '1':
; 51   :             case '2':
; 52   :             case '3':
; 53   :             case '4':  if (argv[0][2] != '\0') return syntax( pgm );

  00158	b8 08 00 00 00	 mov	 eax, 8
  0015d	48 6b c0 00	 imul	 rax, rax, 0
  00161	b9 01 00 00 00	 mov	 ecx, 1
  00166	48 6b c9 02	 imul	 rcx, rcx, 2
  0016a	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00172	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00176	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0017a	85 c0		 test	 eax, eax
  0017c	74 12		 je	 SHORT $LN16@main
  0017e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00186	e8 00 00 00 00	 call	 syntax
  0018b	e9 2d 0b 00 00	 jmp	 $LN1@main
$LN16@main:

; 54   :                        level = (argv[0][1] & 0xf);

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 00	 imul	 rax, rax, 0
  00199	b9 01 00 00 00	 mov	 ecx, 1
  0019e	48 6b c9 01	 imul	 rcx, rcx, 1
  001a2	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001aa	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001ae	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001b2	83 e0 0f	 and	 eax, 15
  001b5	89 84 24 84 00
	00 00		 mov	 DWORD PTR level$[rsp], eax

; 55   :                        break;

  001bc	e9 c8 00 00 00	 jmp	 $LN5@main
$LN17@main:

; 56   :             case 'f':  if (argv[0][2] != '\0') return syntax( pgm );

  001c1	b8 08 00 00 00	 mov	 eax, 8
  001c6	48 6b c0 00	 imul	 rax, rax, 0
  001ca	b9 01 00 00 00	 mov	 ecx, 1
  001cf	48 6b c9 02	 imul	 rcx, rcx, 2
  001d3	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001db	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001df	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001e3	85 c0		 test	 eax, eax
  001e5	74 12		 je	 SHORT $LN18@main
  001e7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001ef	e8 00 00 00 00	 call	 syntax
  001f4	e9 c4 0a 00 00	 jmp	 $LN1@main
$LN18@main:

; 57   :                        force = 1;

  001f9	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR force$[rsp], 1

; 58   :                        break;

  00204	e9 80 00 00 00	 jmp	 $LN5@main
$LN19@main:

; 59   :             case 'r':  if (argv[0][2] == 'o' && argv[0][3] == '\0')

  00209	b8 08 00 00 00	 mov	 eax, 8
  0020e	48 6b c0 00	 imul	 rax, rax, 0
  00212	b9 01 00 00 00	 mov	 ecx, 1
  00217	48 6b c9 02	 imul	 rcx, rcx, 2
  0021b	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00223	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00227	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0022b	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  0022e	75 33		 jne	 SHORT $LN20@main
  00230	b8 08 00 00 00	 mov	 eax, 8
  00235	48 6b c0 00	 imul	 rax, rax, 0
  00239	b9 01 00 00 00	 mov	 ecx, 1
  0023e	48 6b c9 03	 imul	 rcx, rcx, 3
  00242	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0024a	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0024e	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00252	85 c0		 test	 eax, eax
  00254	75 0d		 jne	 SHORT $LN20@main

; 60   :                            ro = 1;

  00256	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ro$[rsp], 1
  00261	eb 12		 jmp	 SHORT $LN21@main
$LN20@main:

; 61   :                        else return syntax( pgm );

  00263	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0026b	e8 00 00 00 00	 call	 syntax
  00270	e9 48 0a 00 00	 jmp	 $LN1@main
$LN21@main:

; 62   :                        break;

  00275	eb 12		 jmp	 SHORT $LN5@main
$LN22@main:

; 63   :             default:   return syntax( pgm );

  00277	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0027f	e8 00 00 00 00	 call	 syntax
  00284	e9 34 0a 00 00	 jmp	 $LN1@main
$LN5@main:

; 64   :         }
; 65   :     }

  00289	e9 24 fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 66   : 
; 67   :     if (argc < 1) return syntax( pgm );

  0028e	83 bc 24 10 21
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00296	7d 12		 jge	 SHORT $LN23@main
  00298	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  002a0	e8 00 00 00 00	 call	 syntax
  002a5	e9 13 0a 00 00	 jmp	 $LN1@main
$LN23@main:

; 68   : 
; 69   :     dev = &devblk;

  002aa	48 8d 84 24 50
	05 00 00	 lea	 rax, QWORD PTR devblk$[rsp]
  002b2	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 70   : 
; 71   :     for (i = 0; i < argc; i++)

  002b7	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  002c2	eb 10		 jmp	 SHORT $LN9@main
$LN7@main:
  002c4	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  002cb	ff c0		 inc	 eax
  002cd	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  002d4	8b 84 24 10 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  002db	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  002e2	0f 8d ce 09 00
	00		 jge	 $LN8@main

; 72   :     {
; 73   :         memset (dev, 0, sizeof(DEVBLK));

  002e8	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dev$[rsp]
  002ed	33 c0		 xor	 eax, eax
  002ef	b9 a0 1b 00 00	 mov	 ecx, 7072		; 00001ba0H
  002f4	f3 aa		 rep stosb

; 74   :         dev->batch = 1;

  002f6	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002fb	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00301	0f ba e8 0a	 bts	 eax, 10
  00305	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0030a	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 75   : 
; 76   :         /* open the file */
; 77   :         hostpath(dev->filename, argv[i], sizeof(dev->filename));

  00310	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00318	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0031d	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00324	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0032a	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00332	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  00336	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 78   :         dev->fd = HOPEN (dev->filename, ro ? O_RDONLY|O_BINARY : O_RDWR|O_BINARY);

  0033c	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  00344	74 0d		 je	 SHORT $LN36@main
  00346	c7 84 24 d0 00
	00 00 00 80 00
	00		 mov	 DWORD PTR tv178[rsp], 32768 ; 00008000H
  00351	eb 0b		 jmp	 SHORT $LN37@main
$LN36@main:
  00353	c7 84 24 d0 00
	00 00 02 80 00
	00		 mov	 DWORD PTR tv178[rsp], 32770 ; 00008002H
$LN37@main:
  0035e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00363	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00369	8b 94 24 d0 00
	00 00		 mov	 edx, DWORD PTR tv178[rsp]
  00370	48 8b c8	 mov	 rcx, rax
  00373	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00379	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0037e	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 79   :         if (dev->fd < 0)

  00384	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00389	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00390	0f 8d fe 00 00
	00		 jge	 $LN24@main

; 80   :         {
; 81   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 82   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  00396	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0039c	74 12		 je	 SHORT $LN38@main
  0039e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  003a3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003a7	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv194[rsp], eax
  003ae	eb 0b		 jmp	 SHORT $LN39@main
$LN38@main:
  003b0	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
$LN39@main:
  003bb	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  003c1	74 14		 je	 SHORT $LN40@main
  003c3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  003c8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003cc	d1 f8		 sar	 eax, 1
  003ce	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  003d5	eb 0b		 jmp	 SHORT $LN41@main
$LN40@main:
  003d7	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv200[rsp], 0
$LN41@main:
  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  003e8	8b 08		 mov	 ecx, DWORD PTR [rax]
  003ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003f0	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv184[rsp], rax
  003f8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  003fd	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00404	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv189[rsp], rcx
  0040c	b9 02 00 00 00	 mov	 ecx, 2
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00417	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv184[rsp]
  0041f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159638
  0042b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00430	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  00438	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0043d	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv194[rsp]
  00444	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00448	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv200[rsp]
  0044f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00453	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159639
  0045a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0045f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  00466	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0046b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00470	41 b9 03 00 00
	00		 mov	 r9d, 3
  00476	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159641
  0047d	ba 53 00 00 00	 mov	 edx, 83			; 00000053H
  00482	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  00489	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 83   :                     "open()", strerror( errno ));
; 84   :             continue;

  0048f	e9 30 fe ff ff	 jmp	 $LN7@main
$LN24@main:

; 85   :         }
; 86   : 
; 87   :         /* Read the device header */
; 88   :         rc = read (dev->fd, &devhdr, CKD_DEVHDR_SIZE);

  00494	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0049a	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  004a2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  004a7	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  004ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  004b3	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 89   :         if (rc < (int)CKD_DEVHDR_SIZE)

  004b7	81 7c 24 78 00
	02 00 00	 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  004bf	0f 8d 24 01 00
	00		 jge	 $LN25@main

; 90   :         {
; 91   :             const char* emsg = "CKD header incomplete";

  004c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159644
  004cc	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax

; 92   :             if (rc < 0)

  004d4	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  004d9	7d 16		 jge	 SHORT $LN26@main

; 93   :                 emsg = strerror( errno );

  004db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  004e1	8b 08		 mov	 ecx, DWORD PTR [rax]
  004e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  004e9	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax
$LN26@main:

; 94   : 
; 95   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 96   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  004f1	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  004f7	74 12		 je	 SHORT $LN42@main
  004f9	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  004fe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00502	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv228[rsp], eax
  00509	eb 0b		 jmp	 SHORT $LN43@main
$LN42@main:
  0050b	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv228[rsp], 0
$LN43@main:
  00516	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0051c	74 14		 je	 SHORT $LN44@main
  0051e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00523	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00527	d1 f8		 sar	 eax, 1
  00529	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv234[rsp], eax
  00530	eb 0b		 jmp	 SHORT $LN45@main
$LN44@main:
  00532	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv234[rsp], 0
$LN45@main:
  0053d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00542	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00548	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv223[rsp], rax
  00550	b9 02 00 00 00	 mov	 ecx, 2
  00555	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0055b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR emsg$1[rsp]
  00563	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00568	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159646
  0056f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00574	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv223[rsp]
  0057c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00581	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv228[rsp]
  00588	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0058c	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv234[rsp]
  00593	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00597	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  0059e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  005aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  005ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159649
  005c1	ba 61 00 00 00	 mov	 edx, 97			; 00000061H
  005c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  005cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 97   :                     "read()", emsg );
; 98   :             close( dev->fd );

  005d3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005d8	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  005de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 99   :             continue;

  005e4	e9 db fc ff ff	 jmp	 $LN7@main
$LN25@main:

; 100  :         }
; 101  : 
; 102  :         /* Check the device header identifier */
; 103  :         if (!is_dh_devid_typ( devhdr.dh_devid, ANY32_CMP_OR_SF_TYP ))

  005e9	ba 00 60 00 60	 mov	 edx, 1610637312		; 60006000H
  005ee	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  005f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  005fc	0f b6 c0	 movzx	 eax, al
  005ff	85 c0		 test	 eax, eax
  00601	75 7d		 jne	 SHORT $LN27@main

; 104  :         {
; 105  :             // "Dasd image file format unsupported or unrecognized: %s"
; 106  :             FWRMSG( stderr, HHC02424, "E", dev->filename );

  00603	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00608	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0060e	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv252[rsp], rax
  00616	b9 02 00 00 00	 mov	 ecx, 2
  0061b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00621	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv252[rsp]
  00629	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0062e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159652
  00635	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0063a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  00641	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00646	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0064b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00651	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159654
  00658	ba 6a 00 00 00	 mov	 edx, 106		; 0000006aH
  0065d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159655
  00664	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 107  :             close( dev->fd );

  0066a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0066f	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00675	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 108  :             continue;

  0067b	e9 44 fc ff ff	 jmp	 $LN7@main
$LN27@main:

; 109  :         }
; 110  :         dev->cckd64 = 0;

  00680	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00685	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0068c	24 fe		 and	 al, 254			; 000000feH
  0068e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00693	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 111  : 
; 112  :         /* Check CCKD_OPT_OPENED bit if -f not specified */
; 113  :         if (!force)

  00699	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR force$[rsp], 0
  006a1	0f 85 91 03 00
	00		 jne	 $LN28@main

; 114  :         {
; 115  :             if (lseek (dev->fd, CCKD_DEVHDR_POS, SEEK_SET) < 0)

  006a7	45 33 c0	 xor	 r8d, r8d
  006aa	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  006af	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006b4	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  006ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  006c0	48 85 c0	 test	 rax, rax
  006c3	0f 8d 18 01 00
	00		 jge	 $LN29@main

; 116  :             {
; 117  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 118  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  006c9	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006cf	74 12		 je	 SHORT $LN46@main
  006d1	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006d6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  006da	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv286[rsp], eax
  006e1	eb 0b		 jmp	 SHORT $LN47@main
$LN46@main:
  006e3	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv286[rsp], 0
$LN47@main:
  006ee	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006f4	74 14		 je	 SHORT $LN48@main
  006f6	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006fb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  006ff	d1 f8		 sar	 eax, 1
  00701	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv292[rsp], eax
  00708	eb 0b		 jmp	 SHORT $LN49@main
$LN48@main:
  0070a	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv292[rsp], 0
$LN49@main:
  00715	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0071b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0071d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00723	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv275[rsp], rax
  0072b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00730	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00737	48 89 8c 24 20
	01 00 00	 mov	 QWORD PTR tv281[rsp], rcx
  0073f	b9 02 00 00 00	 mov	 ecx, 2
  00744	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0074a	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv275[rsp]
  00752	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00757	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00760	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159658
  00767	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0076c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv281[rsp]
  00774	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00779	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv286[rsp]
  00780	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00784	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv292[rsp]
  0078b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0078f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159659
  00796	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0079b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159660
  007a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  007b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159661
  007b9	ba 77 00 00 00	 mov	 edx, 119		; 00000077H
  007be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159662
  007c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 119  :                         "lseek()", (U64)CCKD_DEVHDR_POS, strerror( errno ));
; 120  :                 close (dev->fd);

  007cb	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007d0	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  007d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 121  :                 continue;

  007dc	e9 e3 fa ff ff	 jmp	 $LN7@main
$LN29@main:

; 122  :             }
; 123  :             if ((rc = read (dev->fd, &cdevhdr, CCKD_DEVHDR_SIZE)) < CCKD_DEVHDR_SIZE)

  007e1	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  007e7	48 8d 94 24 50
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  007ef	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007f4	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  007fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00800	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00804	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  00809	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  0080f	0f 8d 2f 01 00
	00		 jge	 $LN30@main

; 124  :             {
; 125  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 126  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00815	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0081a	7d 18		 jge	 SHORT $LN50@main
  0081c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00822	8b 08		 mov	 ecx, DWORD PTR [rax]
  00824	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0082a	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
  00832	eb 0f		 jmp	 SHORT $LN51@main
$LN50@main:
  00834	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159664
  0083b	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
$LN51@main:
  00843	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00849	74 12		 je	 SHORT $LN52@main
  0084b	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00850	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00854	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
  0085b	eb 0b		 jmp	 SHORT $LN53@main
$LN52@main:
  0085d	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN53@main:
  00868	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0086e	74 14		 je	 SHORT $LN54@main
  00870	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00875	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00879	d1 f8		 sar	 eax, 1
  0087b	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  00882	eb 0b		 jmp	 SHORT $LN55@main
$LN54@main:
  00884	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
$LN55@main:
  0088f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00894	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0089a	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv320[rsp], rax
  008a2	b9 02 00 00 00	 mov	 ecx, 2
  008a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008ad	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv316[rsp]
  008b5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  008ba	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  008c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159665
  008ca	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  008cf	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv320[rsp]
  008d7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  008dc	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv325[rsp]
  008e3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  008e7	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv331[rsp]
  008ee	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  008f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159666
  008f9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159667
  00905	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0090a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0090f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00915	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159668
  0091c	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00921	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159669
  00928	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 127  :                         "read()", (U64)CCKD_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 128  :                 close (dev->fd);

  0092e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00933	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00939	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 129  :                 continue;

  0093f	e9 80 f9 ff ff	 jmp	 $LN7@main
$LN30@main:

; 130  :             }
; 131  :             if (cdevhdr.cdh_opts & CCKD_OPT_OPENED)

  00944	0f b6 84 24 53
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  0094c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00951	85 c0		 test	 eax, eax
  00953	0f 84 df 00 00
	00		 je	 $LN31@main

; 132  :             {
; 133  :                 // "%1d:%04X CCKD file %s: opened bit is on, use -f"
; 134  :                 FWRMSG( stderr, HHC00352, "E", LCSS_DEVNUM, dev->filename );

  00959	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0095f	74 12		 je	 SHORT $LN56@main
  00961	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00966	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0096a	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
  00971	eb 0b		 jmp	 SHORT $LN57@main
$LN56@main:
  00973	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv352[rsp], 0
$LN57@main:
  0097e	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00984	74 14		 je	 SHORT $LN58@main
  00986	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0098b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0098f	d1 f8		 sar	 eax, 1
  00991	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv358[rsp], eax
  00998	eb 0b		 jmp	 SHORT $LN59@main
$LN58@main:
  0099a	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv358[rsp], 0
$LN59@main:
  009a5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009aa	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  009b0	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv347[rsp], rax
  009b8	b9 02 00 00 00	 mov	 ecx, 2
  009bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009c3	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv347[rsp]
  009cb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  009d0	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv352[rsp]
  009d7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  009db	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv358[rsp]
  009e2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  009e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159671
  009ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159672
  009f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a03	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a09	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159673
  00a10	ba 86 00 00 00	 mov	 edx, 134		; 00000086H
  00a15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159674
  00a1c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 135  :                 close (dev->fd);

  00a22	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a27	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00a2d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 136  :                 continue;

  00a33	e9 8c f8 ff ff	 jmp	 $LN7@main
$LN31@main:
$LN28@main:

; 137  :             }
; 138  :         } /* if (!force) */
; 139  : 
; 140  :         // "%1d:%04X CCKD file %s: starting %s level %d%s..."
; 141  :         WRMSG( HHC00379, "I", LCSS_DEVNUM, dev->filename,

  00a38	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  00a40	74 11		 je	 SHORT $LN60@main
  00a42	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159675
  00a49	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv372[rsp], rax
  00a51	eb 0f		 jmp	 SHORT $LN61@main
$LN60@main:
  00a53	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159676
  00a5a	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv372[rsp], rax
$LN61@main:
  00a62	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a68	74 12		 je	 SHORT $LN62@main
  00a6a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a6f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a73	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
  00a7a	eb 0b		 jmp	 SHORT $LN63@main
$LN62@main:
  00a7c	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv381[rsp], 0
$LN63@main:
  00a87	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a8d	74 14		 je	 SHORT $LN64@main
  00a8f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a94	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00a98	d1 f8		 sar	 eax, 1
  00a9a	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv419[rsp], eax
  00aa1	eb 0b		 jmp	 SHORT $LN65@main
$LN64@main:
  00aa3	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv419[rsp], 0
$LN65@main:
  00aae	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00ab3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00ab9	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv376[rsp], rax
  00ac1	b9 01 00 00 00	 mov	 ecx, 1
  00ac6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00acc	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv372[rsp]
  00ad4	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00ad9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR level$[rsp]
  00ae0	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00ae4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00aec	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00af1	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv376[rsp]
  00af9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00afe	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv381[rsp]
  00b05	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00b09	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv419[rsp]
  00b10	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00b14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159677
  00b1b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  00b27	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b2c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b31	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b37	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159679
  00b3e	ba 8e 00 00 00	 mov	 edx, 142		; 0000008eH
  00b43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159680
  00b4a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 142  :             pgm, level, ro ? " (read-only)" : "" );
; 143  : 
; 144  :         rc = cckd_chkdsk (dev, level);

  00b50	8b 94 24 84 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00b57	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00b5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_chkdsk
  00b62	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 145  : 
; 146  :         close (dev->fd);

  00b66	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b6b	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00b71	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 147  : 
; 148  :         // "%1d:%04X CCKD file %s: %s level %d complete: rc=%d"
; 149  :         WRMSG( HHC00380, rc ? "W" : "I", LCSS_DEVNUM, dev->filename,

  00b77	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00b7d	74 12		 je	 SHORT $LN66@main
  00b7f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b84	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b88	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv443[rsp], eax
  00b8f	eb 0b		 jmp	 SHORT $LN67@main
$LN66@main:
  00b91	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv443[rsp], 0
$LN67@main:
  00b9c	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00ba2	74 14		 je	 SHORT $LN68@main
  00ba4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00ba9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00bad	d1 f8		 sar	 eax, 1
  00baf	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv449[rsp], eax
  00bb6	eb 0b		 jmp	 SHORT $LN69@main
$LN68@main:
  00bb8	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv449[rsp], 0
$LN69@main:
  00bc3	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00bc8	74 11		 je	 SHORT $LN70@main
  00bca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159681
  00bd1	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv452[rsp], rax
  00bd9	eb 0f		 jmp	 SHORT $LN71@main
$LN70@main:
  00bdb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159682
  00be2	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv452[rsp], rax
$LN71@main:
  00bea	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00bef	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00bf5	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv438[rsp], rax
  00bfd	b9 01 00 00 00	 mov	 ecx, 1
  00c02	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c08	8b 4c 24 78	 mov	 ecx, DWORD PTR rc$[rsp]
  00c0c	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  00c10	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR level$[rsp]
  00c17	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00c1b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00c23	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00c28	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv438[rsp]
  00c30	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c35	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv443[rsp]
  00c3c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c40	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv449[rsp]
  00c47	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c4b	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv452[rsp]
  00c53	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c58	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159683
  00c5f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c64	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c69	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c6f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159684
  00c76	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  00c7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159685
  00c82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 150  :             pgm, level, rc );
; 151  : 
; 152  :         /* Save worst return code */
; 153  :         if (maxrc >= 0)

  00c88	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR maxrc$[rsp], 0
  00c90	7c 1f		 jl	 SHORT $LN32@main

; 154  :             if (rc < 0 || rc > maxrc)

  00c92	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00c97	7c 0d		 jl	 SHORT $LN34@main
  00c99	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR maxrc$[rsp]
  00ca0	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00ca4	7e 0b		 jle	 SHORT $LN33@main
$LN34@main:

; 155  :                 maxrc = rc;

  00ca6	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  00caa	89 84 24 88 00
	00 00		 mov	 DWORD PTR maxrc$[rsp], eax
$LN33@main:
$LN32@main:

; 156  : 
; 157  :     } /* for each arg */

  00cb1	e9 0e f6 ff ff	 jmp	 $LN7@main
$LN8@main:

; 158  : 
; 159  :     return maxrc;

  00cb6	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR maxrc$[rsp]
$LN1@main:

; 160  : }

  00cbd	48 8b 8c 24 f0
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00cc5	48 33 cc	 xor	 rcx, rsp
  00cc8	e8 00 00 00 00	 call	 __security_check_cookie
  00ccd	48 81 c4 00 21
	00 00		 add	 rsp, 8448		; 00002100H
  00cd4	5f		 pop	 rdi
  00cd5	c3		 ret	 0
  00cd6	66 90		 npad	 2
$LN73@main:
  00cd8	00 00 00 00	 DD	 $LN11@main
  00cdc	00 00 00 00	 DD	 $LN12@main
  00ce0	00 00 00 00	 DD	 $LN13@main
  00ce4	00 00 00 00	 DD	 $LN14@main
  00ce8	00 00 00 00	 DD	 $LN15@main
  00cec	00 00 00 00	 DD	 $LN17@main
  00cf0	00 00 00 00	 DD	 $LN19@main
  00cf4	00 00 00 00	 DD	 $LN22@main
$LN72@main:
  00cf8	00		 DB	 0
  00cf9	01		 DB	 1
  00cfa	02		 DB	 2
  00cfb	03		 DB	 3
  00cfc	04		 DB	 4
  00cfd	07		 DB	 7
  00cfe	07		 DB	 7
  00cff	07		 DB	 7
  00d00	07		 DB	 7
  00d01	07		 DB	 7
  00d02	07		 DB	 7
  00d03	07		 DB	 7
  00d04	07		 DB	 7
  00d05	07		 DB	 7
  00d06	07		 DB	 7
  00d07	07		 DB	 7
  00d08	07		 DB	 7
  00d09	07		 DB	 7
  00d0a	07		 DB	 7
  00d0b	07		 DB	 7
  00d0c	07		 DB	 7
  00d0d	07		 DB	 7
  00d0e	07		 DB	 7
  00d0f	07		 DB	 7
  00d10	07		 DB	 7
  00d11	07		 DB	 7
  00d12	07		 DB	 7
  00d13	07		 DB	 7
  00d14	07		 DB	 7
  00d15	07		 DB	 7
  00d16	07		 DB	 7
  00d17	07		 DB	 7
  00d18	07		 DB	 7
  00d19	07		 DB	 7
  00d1a	07		 DB	 7
  00d1b	07		 DB	 7
  00d1c	07		 DB	 7
  00d1d	07		 DB	 7
  00d1e	07		 DB	 7
  00d1f	07		 DB	 7
  00d20	07		 DB	 7
  00d21	07		 DB	 7
  00d22	07		 DB	 7
  00d23	07		 DB	 7
  00d24	07		 DB	 7
  00d25	07		 DB	 7
  00d26	07		 DB	 7
  00d27	07		 DB	 7
  00d28	07		 DB	 7
  00d29	07		 DB	 7
  00d2a	07		 DB	 7
  00d2b	07		 DB	 7
  00d2c	07		 DB	 7
  00d2d	07		 DB	 7
  00d2e	05		 DB	 5
  00d2f	07		 DB	 7
  00d30	07		 DB	 7
  00d31	07		 DB	 7
  00d32	07		 DB	 7
  00d33	07		 DB	 7
  00d34	07		 DB	 7
  00d35	07		 DB	 7
  00d36	07		 DB	 7
  00d37	07		 DB	 7
  00d38	07		 DB	 7
  00d39	07		 DB	 7
  00d3a	06		 DB	 6
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcdsk.c
_TEXT	SEGMENT
pgm$ = 80
syntax	PROC

; 166  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 167  :     WRMSG( HHC02411, "I", pgm );

  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159692
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159693
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159694
  00048	ba a7 00 00 00	 mov	 edx, 167		; 000000a7H
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159695
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 168  :     return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1

; 169  : }

  0005f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00063	c3		 ret	 0
syntax	ENDP
_TEXT	ENDS
END
