; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	curpos
PUBLIC	prevpos
_BSS	SEGMENT
curpos	DD	01H DUP (?)
prevpos	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	main
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_extgui:DWORD
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
buf	DB	0200000H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN36
	DD	imagerel $LN36+2415
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
vollbl	DB	0e5H, 0d6H, 0d3H, 00H
hdrlbl	DB	0c8H, 0c4H, 0d9H, 00H
eoflbl	DB	0c5H, 0d6H, 0c6H, 00H
eovlbl	DB	0c5H, 0d6H, 0e5H, 00H
$SG169237 DB	'tape map', 00H
	ORG $+7
$SG169238 DB	'tapemap', 00H
$SG169241 DB	'I', 00H
	ORG $+2
$SG169246 DB	'E', 00H
	ORG $+2
$SG169242 DB	'HHC02726%s Usage: %s filename', 0aH, 00H
	ORG $+1
$SG169243 DB	'main', 00H
	ORG $+3
$SG169244 DB	'tapemap.c', 00H
	ORG $+2
$SG169257 DB	'E', 00H
	ORG $+2
$SG169247 DB	'HHC02715%s Tape %s: Error opening: errno=%d: %s', 0aH, 00H
	ORG $+3
$SG169248 DB	'main', 00H
	ORG $+3
$SG169263 DB	'E', 00H
	ORG $+2
$SG169249 DB	'tapemap.c', 00H
	ORG $+2
$SG169268 DB	'I', 00H
	ORG $+2
$SG169253 DB	'IPOS=%ld', 0aH, 00H
	ORG $+2
$SG169274 DB	'I', 00H
	ORG $+2
$SG169256 DB	'AWSTAPE', 00H
$SG169258 DB	'HHC02707%s File %s: Error reading %s header: rc=%d, errn'
	DB	'o=%d: %s', 0aH, 00H
	ORG $+2
$SG169259 DB	'main', 00H
	ORG $+3
$SG169284 DB	'E', 00H
	ORG $+2
$SG169260 DB	'tapemap.c', 00H
	ORG $+2
$SG169289 DB	'E', 00H
	ORG $+2
$SG169262 DB	'AWSTAPE', 00H
$SG169264 DB	'HHC02741%s File %s: Error, incomplete %s header', 0aH, 00H
	ORG $+3
$SG169265 DB	'main', 00H
	ORG $+3
$SG169295 DB	'E', 00H
	ORG $+2
$SG169266 DB	'tapemap.c', 00H
	ORG $+2
$SG169301 DB	'I', 00H
	ORG $+2
$SG169269 DB	'HHC02704%s End of tape', 0aH, 00H
$SG169270 DB	'main', 00H
	ORG $+3
$SG169271 DB	'tapemap.c', 00H
	ORG $+2
$SG169276 DB	'main', 00H
	ORG $+7
$SG169275 DB	'HHC02721%s File No. %u: Blocks=%u, Bytes=%lld, Block siz'
	DB	'e min=%u, max=%u, avg=%u', 0aH, 00H
	ORG $+6
$SG169277 DB	'tapemap.c', 00H
	ORG $+6
$SG169283 DB	'AWSTAPE', 00H
$SG169285 DB	'HHC02709%s File %s: Error reading %s data block: rc=%d, '
	DB	'errno=%d: %s', 0aH, 00H
	ORG $+2
$SG169286 DB	'main', 00H
	ORG $+3
$SG169287 DB	'tapemap.c', 00H
	ORG $+6
$SG169290 DB	'HHC02742%s File %s: Error, incomplete final data block: '
	DB	'expected %d bytes, read %d', 0aH, 00H
$SG169291 DB	'main', 00H
	ORG $+7
$SG169292 DB	'tapemap.c', 00H
	ORG $+6
$SG169294 DB	'AWSTAPE', 00H
$SG169296 DB	'HHC02743%s File %s: Error, %s header block without data', 0aH
	DB	00H
	ORG $+3
$SG169297 DB	'main', 00H
	ORG $+7
$SG169298 DB	'tapemap.c', 00H
	ORG $+6
$SG169302 DB	'HHC02722%s Tape Label: %s', 0aH, 00H
	ORG $+1
$SG169303 DB	'main', 00H
	ORG $+7
$SG169304 DB	'tapemap.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	01cH
	DD	0955H
voltbl	ENDS
xdata	SEGMENT
$unwind$main DD	042419H
	DD	04f0112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	0260H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapemap.c
_TEXT	SEGMENT
len$ = 112
curblkl$ = 116
blkcount$ = 120
i$ = 124
minblksz$ = 128
infd$ = 132
maxblksz$ = 136
fileno$ = 140
filename$ = 144
tv217 = 152
file_bytes$ = 160
$T1 = 168
pgm$ = 176
tv94 = 184
tv130 = 192
tv162 = 200
tv166 = 208
tv255 = 216
tv291 = 224
awshdr$ = 232
labelrec$ = 240
pathname$ = 336
__$ArrayPad$ = 608
argc$ = 656
argv$ = 664
main	PROC

; 40   : {

$LN36:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 41   : char           *pgm;                    /* less any extension (.ext) */
; 42   : int             i;                      /* Array subscript           */
; 43   : int             len;                    /* Block length              */
; 44   : char           *filename;               /* -> Input file name        */
; 45   : int             infd = -1;              /* Input file descriptor     */

  00024	c7 84 24 84 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR infd$[rsp], -1

; 46   : int             fileno;                 /* Tape file number          */
; 47   : int             blkcount;               /* Block count               */
; 48   : int             curblkl;                /* Current block length      */
; 49   : int             minblksz;               /* Minimum block size        */
; 50   : int             maxblksz;               /* Maximum block size        */
; 51   : int64_t         file_bytes;             /* File byte count           */
; 52   : BYTE            labelrec[81];           /* Standard label (ASCIIZ)   */
; 53   : AWSTAPE_BLKHDR  awshdr;                 /* AWSTAPE block header      */
; 54   : char            pathname[MAX_PATH];     /* file path in host format  */
; 55   : 
; 56   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  0002f	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  00037	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169237
  00043	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169238
  0004a	48 8b 94 24 98
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00052	8b 8c 24 90 02
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0005f	89 84 24 90 02
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 57   : 
; 58   :     /* The only argument is the tape image file name */
; 59   :     if (argc == 2 && argv[1] != NULL)

  00066	83 bc 24 90 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0006e	75 37		 jne	 SHORT $LN10@main
  00070	b8 08 00 00 00	 mov	 eax, 8
  00075	48 6b c0 01	 imul	 rax, rax, 1
  00079	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00081	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00086	74 1f		 je	 SHORT $LN10@main

; 60   :     {
; 61   :         filename = argv[1];

  00088	b8 08 00 00 00	 mov	 eax, 8
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00099	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0009d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR filename$[rsp], rax

; 62   :     }

  000a5	eb 5f		 jmp	 SHORT $LN11@main
$LN10@main:

; 63   :     else
; 64   :     {
; 65   :         // "Usage: %s filename"
; 66   :         WRMSG( HHC02726, "I", pgm );

  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  000ba	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169241
  000c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169242
  000d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169243
  000e9	ba 42 00 00 00	 mov	 edx, 66			; 00000042H
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169244
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 67   :         exit (1);

  000fb	b9 01 00 00 00	 mov	 ecx, 1
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN11@main:

; 68   :     }
; 69   : 
; 70   :     /* Open the tape device */
; 71   :     hostpath(pathname, filename, sizeof(pathname));

  00106	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0010c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00114	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 72   :     infd = HOPEN (pathname, O_RDONLY | O_BINARY);

  00122	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  00127	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00135	89 84 24 84 00
	00 00		 mov	 DWORD PTR infd$[rsp], eax

; 73   :     if (infd < 0)

  0013c	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR infd$[rsp], 0
  00144	0f 8d 9e 00 00
	00		 jge	 $LN12@main

; 74   :     {
; 75   :         // "Tape %s: Error opening: errno=%d: %s"
; 76   :         FWRMSG( stderr, HHC02715, "E", filename, errno, strerror( errno ));

  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00150	8b 08		 mov	 ecx, DWORD PTR [rax]
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00158	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv94[rsp], rax
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00166	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
  0016e	b9 02 00 00 00	 mov	 ecx, 2
  00173	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00179	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv94[rsp]
  00181	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00186	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv130[rsp]
  0018e	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00190	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00194	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  0019c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169246
  001a8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169247
  001b4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001be	41 b9 03 00 00
	00		 mov	 r9d, 3
  001c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169248
  001cb	ba 4c 00 00 00	 mov	 edx, 76			; 0000004cH
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169249
  001d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 77   :         exit (2);

  001dd	b9 02 00 00 00	 mov	 ecx, 2
  001e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN12@main:

; 78   :     }
; 79   : 
; 80   :     /* Read blocks from the input file and report on them */
; 81   :     fileno = 1;

  001e8	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR fileno$[rsp], 1

; 82   :     blkcount = 0;

  001f3	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR blkcount$[rsp], 0

; 83   :     minblksz = 0;

  001fb	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR minblksz$[rsp], 0

; 84   :     maxblksz = 0;

  00206	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR maxblksz$[rsp], 0

; 85   :     file_bytes = 0;

  00211	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR file_bytes$[rsp], 0

; 86   :     len = 0;

  0021d	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0
$LN2@main:

; 87   : 
; 88   :     while (1)

  00225	33 c0		 xor	 eax, eax
  00227	83 f8 01	 cmp	 eax, 1
  0022a	0f 84 16 07 00
	00		 je	 $LN3@main

; 89   :     {
; 90   :         if (extgui)

  00230	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00237	83 38 00	 cmp	 DWORD PTR [rax], 0
  0023a	74 5b		 je	 SHORT $LN13@main

; 91   :         {
; 92   :             /* Report progress every nnnK */
; 93   :             if( ( curpos & PROGRESS_MASK ) != ( prevpos & PROGRESS_MASK ) )

  0023c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curpos
  00242	25 00 00 fc ff	 and	 eax, -262144		; fffffffffffc0000H
  00247	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR prevpos
  0024d	81 e1 00 00 fc
	ff		 and	 ecx, -262144		; fffffffffffc0000H
  00253	3b c1		 cmp	 eax, ecx
  00255	74 40		 je	 SHORT $LN14@main

; 94   :             {
; 95   :                 prevpos = curpos;

  00257	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curpos
  0025d	89 05 00 00 00
	00		 mov	 DWORD PTR prevpos, eax
$LN6@main:

; 96   :                 EXTGUIMSG( "IPOS=%ld\n", curpos );

  00263	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0026a	83 38 00	 cmp	 DWORD PTR [rax], 0
  0026d	74 22		 je	 SHORT $LN15@main
  0026f	b9 02 00 00 00	 mov	 ecx, 2
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0027a	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR curpos
  00281	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169253
  00288	48 8b c8	 mov	 rcx, rax
  0028b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN15@main:
  00291	33 c0		 xor	 eax, eax
  00293	85 c0		 test	 eax, eax
  00295	75 cc		 jne	 SHORT $LN6@main
$LN14@main:
$LN13@main:

; 97   :             }
; 98   :         }
; 99   : 
; 100  :         /* Read a block from the tape */
; 101  :         len = read (infd, buf, sizeof(AWSTAPE_BLKHDR));

  00297	41 b8 06 00 00
	00		 mov	 r8d, 6
  0029d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  002a4	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR infd$[rsp]
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  002b1	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 102  : 
; 103  :         if (extgui)

  002b5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  002bc	83 38 00	 cmp	 DWORD PTR [rax], 0
  002bf	74 14		 je	 SHORT $LN16@main

; 104  :             curpos += len;

  002c1	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  002c5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curpos
  002cb	03 c8		 add	 ecx, eax
  002cd	8b c1		 mov	 eax, ecx
  002cf	89 05 00 00 00
	00		 mov	 DWORD PTR curpos, eax
$LN16@main:

; 105  : 
; 106  :         if (len < 0)

  002d5	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  002da	0f 8d b2 00 00
	00		 jge	 $LN17@main

; 107  :         {
; 108  :             // "File %s: Error reading %s header: rc=%d, errno=%d: %s"
; 109  :             FWRMSG( stderr, HHC02707, "E", filename, "AWSTAPE", len, errno, strerror( errno ));

  002e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002e6	8b 08		 mov	 ecx, DWORD PTR [rax]
  002e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  002ee	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv162[rsp], rax
  002f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002fc	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv166[rsp], rax
  00304	b9 02 00 00 00	 mov	 ecx, 2
  00309	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0030f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv162[rsp]
  00317	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0031c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv166[rsp]
  00324	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00326	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0032a	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  0032e	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169256
  00339	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0033e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00346	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0034b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169257
  00352	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00357	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169258
  0035e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00363	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00368	41 b9 03 00 00
	00		 mov	 r9d, 3
  0036e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169259
  00375	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169260
  00381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 110  :             exit (3);

  00387	b9 03 00 00 00	 mov	 ecx, 3
  0038c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN17@main:

; 111  :         }
; 112  : 
; 113  :         /* Did we finish too soon? */
; 114  :         if ((len > 0) && (len < (int)sizeof(AWSTAPE_BLKHDR)))

  00392	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00397	7e 72		 jle	 SHORT $LN18@main
  00399	83 7c 24 70 06	 cmp	 DWORD PTR len$[rsp], 6
  0039e	7d 6b		 jge	 SHORT $LN18@main

; 115  :         {
; 116  :             // "File %s: Error, incomplete %s header"
; 117  :             FWRMSG( stderr, HHC02741, "E", filename, "AWSTAPE" );

  003a0	b9 02 00 00 00	 mov	 ecx, 2
  003a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169262
  003b2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  003bf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169263
  003cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169264
  003d7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e1	41 b9 03 00 00
	00		 mov	 r9d, 3
  003e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169265
  003ee	ba 75 00 00 00	 mov	 edx, 117		; 00000075H
  003f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169266
  003fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 118  :             exit(4);

  00400	b9 04 00 00 00	 mov	 ecx, 4
  00405	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN18@main:

; 119  :         }
; 120  : 
; 121  :         /* Check for end of tape. */
; 122  :         if (len == 0)

  0040b	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00410	75 4c		 jne	 SHORT $LN19@main

; 123  :         {
; 124  :             // "End of tape"
; 125  :             WRMSG( HHC02704, "I" );

  00412	b9 01 00 00 00	 mov	 ecx, 1
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0041d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169268
  00424	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00429	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169269
  00430	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00435	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0043a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00440	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169270
  00447	ba 7d 00 00 00	 mov	 edx, 125		; 0000007dH
  0044c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169271
  00453	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 126  :             break;

  00459	e9 e8 04 00 00	 jmp	 $LN3@main
$LN19@main:

; 127  :         }
; 128  : 
; 129  :         /* Parse the block header */
; 130  :         memcpy(&awshdr, buf, sizeof(AWSTAPE_BLKHDR));

  0045e	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR awshdr$[rsp]
  00466	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  0046d	48 8b f8	 mov	 rdi, rax
  00470	48 8b f1	 mov	 rsi, rcx
  00473	b9 06 00 00 00	 mov	 ecx, 6
  00478	f3 a4		 rep movsb

; 131  : 
; 132  :         /* Tapemark? */
; 133  :         if ((awshdr.flags1 & AWSTAPE_FLAG1_TAPEMARK) != 0)

  0047a	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  00482	83 e0 40	 and	 eax, 64			; 00000040H
  00485	85 c0		 test	 eax, eax
  00487	0f 84 ee 00 00
	00		 je	 $LN20@main

; 134  :         {
; 135  :             /* Print summary of current file */
; 136  :             // "File No. %u: Blocks=%u, Bytes=%"PRId64", Block size min=%u, max=%u, avg=%u"
; 137  :             WRMSG( HHC02721, "I", fileno, blkcount, file_bytes,

  0048d	83 7c 24 78 00	 cmp	 DWORD PTR blkcount$[rsp], 0
  00492	74 15		 je	 SHORT $LN32@main
  00494	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR file_bytes$[rsp]
  0049b	99		 cdq
  0049c	f7 7c 24 78	 idiv	 DWORD PTR blkcount$[rsp]
  004a0	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
  004a7	eb 0b		 jmp	 SHORT $LN33@main
$LN32@main:
  004a9	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv217[rsp], 0
$LN33@main:
  004b4	b9 01 00 00 00	 mov	 ecx, 1
  004b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004bf	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv217[rsp]
  004c6	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  004ca	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR maxblksz$[rsp]
  004d1	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  004d5	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR minblksz$[rsp]
  004dc	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  004e0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR file_bytes$[rsp]
  004e8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004ed	8b 4c 24 78	 mov	 ecx, DWORD PTR blkcount$[rsp]
  004f1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004f5	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR fileno$[rsp]
  004fc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00500	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169274
  00507	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0050c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169275
  00513	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00518	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0051d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00523	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169276
  0052a	ba 8b 00 00 00	 mov	 edx, 139		; 0000008bH
  0052f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169277
  00536	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 138  :                          minblksz, maxblksz,
; 139  :                          (blkcount ? ((int)file_bytes/blkcount) : 0 ));
; 140  : 
; 141  :             /* Reset counters for next file */
; 142  :             fileno++;

  0053c	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR fileno$[rsp]
  00543	ff c0		 inc	 eax
  00545	89 84 24 8c 00
	00 00		 mov	 DWORD PTR fileno$[rsp], eax

; 143  :             minblksz = 0;

  0054c	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR minblksz$[rsp], 0

; 144  :             maxblksz = 0;

  00557	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR maxblksz$[rsp], 0

; 145  :             blkcount = 0;

  00562	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR blkcount$[rsp], 0

; 146  :             file_bytes = 0;

  0056a	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR file_bytes$[rsp], 0

; 147  : 
; 148  :         }

  00576	e9 c6 03 00 00	 jmp	 $LN21@main
$LN20@main:

; 149  :         else /* if(tapemark) */
; 150  :         {
; 151  :             /* Count blocks and block sizes */
; 152  :             blkcount++;

  0057b	8b 44 24 78	 mov	 eax, DWORD PTR blkcount$[rsp]
  0057f	ff c0		 inc	 eax
  00581	89 44 24 78	 mov	 DWORD PTR blkcount$[rsp], eax

; 153  :             curblkl = awshdr.curblkl[0] + (awshdr.curblkl[1] << 8);

  00585	b8 01 00 00 00	 mov	 eax, 1
  0058a	48 6b c0 00	 imul	 rax, rax, 0
  0058e	0f b6 84 04 e8
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+rax]
  00596	b9 01 00 00 00	 mov	 ecx, 1
  0059b	48 6b c9 01	 imul	 rcx, rcx, 1
  0059f	0f b6 8c 0c e8
	00 00 00	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx]
  005a7	c1 e1 08	 shl	 ecx, 8
  005aa	03 c1		 add	 eax, ecx
  005ac	89 44 24 74	 mov	 DWORD PTR curblkl$[rsp], eax

; 154  :             if (curblkl > maxblksz) maxblksz = curblkl;

  005b0	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR maxblksz$[rsp]
  005b7	39 44 24 74	 cmp	 DWORD PTR curblkl$[rsp], eax
  005bb	7e 0b		 jle	 SHORT $LN22@main
  005bd	8b 44 24 74	 mov	 eax, DWORD PTR curblkl$[rsp]
  005c1	89 84 24 88 00
	00 00		 mov	 DWORD PTR maxblksz$[rsp], eax
$LN22@main:

; 155  :             if (minblksz == 0 || curblkl < minblksz) minblksz = curblkl;

  005c8	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR minblksz$[rsp], 0
  005d0	74 0d		 je	 SHORT $LN24@main
  005d2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR minblksz$[rsp]
  005d9	39 44 24 74	 cmp	 DWORD PTR curblkl$[rsp], eax
  005dd	7d 0b		 jge	 SHORT $LN23@main
$LN24@main:
  005df	8b 44 24 74	 mov	 eax, DWORD PTR curblkl$[rsp]
  005e3	89 84 24 80 00
	00 00		 mov	 DWORD PTR minblksz$[rsp], eax
$LN23@main:

; 156  : 
; 157  :             file_bytes += curblkl;

  005ea	48 63 44 24 74	 movsxd	 rax, DWORD PTR curblkl$[rsp]
  005ef	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR file_bytes$[rsp]
  005f7	48 03 c8	 add	 rcx, rax
  005fa	48 8b c1	 mov	 rax, rcx
  005fd	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR file_bytes$[rsp], rax

; 158  : 
; 159  :             /* Read the data block. */
; 160  :             len = read (infd, buf, curblkl);

  00605	44 8b 44 24 74	 mov	 r8d, DWORD PTR curblkl$[rsp]
  0060a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  00611	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR infd$[rsp]
  00618	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0061e	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 161  : 
; 162  :             if (extgui)

  00622	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00629	83 38 00	 cmp	 DWORD PTR [rax], 0
  0062c	74 14		 je	 SHORT $LN25@main

; 163  :                 curpos += len;

  0062e	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00632	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curpos
  00638	03 c8		 add	 ecx, eax
  0063a	8b c1		 mov	 eax, ecx
  0063c	89 05 00 00 00
	00		 mov	 DWORD PTR curpos, eax
$LN25@main:

; 164  : 
; 165  :             if (len < 0)

  00642	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00647	0f 8d b2 00 00
	00		 jge	 $LN26@main

; 166  :             {
; 167  :                 // "File %s: Error reading %s data block: rc=%d, errno=%d: %s"
; 168  :                 FWRMSG( stderr, HHC02709, "E", filename, "AWSTAPE", len, errno, strerror( errno ));

  0064d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00653	8b 08		 mov	 ecx, DWORD PTR [rax]
  00655	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0065b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv255[rsp], rax
  00663	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00669	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv291[rsp], rax
  00671	b9 02 00 00 00	 mov	 ecx, 2
  00676	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0067c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv255[rsp]
  00684	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00689	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv291[rsp]
  00691	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00693	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00697	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  0069b	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0069f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169283
  006a6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006ab	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  006b3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169284
  006bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169285
  006cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  006db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169286
  006e2	ba a8 00 00 00	 mov	 edx, 168		; 000000a8H
  006e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169287
  006ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 169  :                 exit (5);

  006f4	b9 05 00 00 00	 mov	 ecx, 5
  006f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN26@main:

; 170  :             }
; 171  : 
; 172  :             /* Did we finish too soon? */
; 173  :             if ((len > 0) && (len < curblkl))

  006ff	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00704	7e 79		 jle	 SHORT $LN27@main
  00706	8b 44 24 74	 mov	 eax, DWORD PTR curblkl$[rsp]
  0070a	39 44 24 70	 cmp	 DWORD PTR len$[rsp], eax
  0070e	7d 6f		 jge	 SHORT $LN27@main

; 174  :             {
; 175  :                 // "File %s: Error, incomplete final data block: expected %d bytes, read %d"
; 176  :                 FWRMSG( stderr, HHC02742, "E", filename, curblkl, len );

  00710	b9 02 00 00 00	 mov	 ecx, 2
  00715	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0071b	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  0071f	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00723	8b 4c 24 74	 mov	 ecx, DWORD PTR curblkl$[rsp]
  00727	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0072b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00733	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00738	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169289
  0073f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00744	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169290
  0074b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00750	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00755	41 b9 03 00 00
	00		 mov	 r9d, 3
  0075b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169291
  00762	ba b0 00 00 00	 mov	 edx, 176		; 000000b0H
  00767	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169292
  0076e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 177  :                 exit(6);

  00774	b9 06 00 00 00	 mov	 ecx, 6
  00779	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN27@main:

; 178  :             }
; 179  : 
; 180  :             /* Check for end of tape */
; 181  :             if (len == 0)

  0077f	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00784	75 6b		 jne	 SHORT $LN28@main

; 182  :             {
; 183  :                 // "File %s: Error, %s header block without data"
; 184  :                 FWRMSG( stderr, HHC02743, "E", filename, "AWSTAPE" );

  00786	b9 02 00 00 00	 mov	 ecx, 2
  0078b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00791	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169294
  00798	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0079d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  007a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169295
  007b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169296
  007bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  007cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169297
  007d4	ba b8 00 00 00	 mov	 edx, 184		; 000000b8H
  007d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169298
  007e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 185  :                 exit(7);

  007e6	b9 07 00 00 00	 mov	 ecx, 7
  007eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN28@main:

; 186  :             }
; 187  : 
; 188  :             /* Print standard labels */
; 189  :             if (len == 80 && blkcount < 4
; 190  :                 && (memcmp(buf, vollbl, 3) == 0

  007f1	83 7c 24 70 50	 cmp	 DWORD PTR len$[rsp], 80	; 00000050H
  007f6	0f 85 45 01 00
	00		 jne	 $LN29@main
  007fc	83 7c 24 78 04	 cmp	 DWORD PTR blkcount$[rsp], 4
  00801	0f 8d 3a 01 00
	00		 jge	 $LN29@main
  00807	41 b8 03 00 00
	00		 mov	 r8d, 3
  0080d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:vollbl
  00814	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  0081b	e8 00 00 00 00	 call	 memcmp
  00820	85 c0		 test	 eax, eax
  00822	74 5b		 je	 SHORT $LN30@main
  00824	41 b8 03 00 00
	00		 mov	 r8d, 3
  0082a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hdrlbl
  00831	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00838	e8 00 00 00 00	 call	 memcmp
  0083d	85 c0		 test	 eax, eax
  0083f	74 3e		 je	 SHORT $LN30@main
  00841	41 b8 03 00 00
	00		 mov	 r8d, 3
  00847	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:eoflbl
  0084e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00855	e8 00 00 00 00	 call	 memcmp
  0085a	85 c0		 test	 eax, eax
  0085c	74 21		 je	 SHORT $LN30@main
  0085e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00864	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:eovlbl
  0086b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00872	e8 00 00 00 00	 call	 memcmp
  00877	85 c0		 test	 eax, eax
  00879	0f 85 c2 00 00
	00		 jne	 $LN29@main
$LN30@main:

; 191  :                     || memcmp(buf, hdrlbl, 3) == 0
; 192  :                     || memcmp(buf, eoflbl, 3) == 0
; 193  :                     || memcmp(buf, eovlbl, 3) == 0))
; 194  :             {
; 195  :                 for (i=0; i < 80; i++)

  0087f	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00887	eb 0a		 jmp	 SHORT $LN9@main
$LN7@main:
  00889	8b 44 24 7c	 mov	 eax, DWORD PTR i$[rsp]
  0088d	ff c0		 inc	 eax
  0088f	89 44 24 7c	 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  00893	83 7c 24 7c 50	 cmp	 DWORD PTR i$[rsp], 80	; 00000050H
  00898	7d 24		 jge	 SHORT $LN8@main

; 196  :                     labelrec[i] = guest_to_host(buf[i]);

  0089a	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  0089f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  008a6	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  008aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  008b0	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR i$[rsp]
  008b5	88 84 0c f0 00
	00 00		 mov	 BYTE PTR labelrec$[rsp+rcx], al
  008bc	eb cb		 jmp	 SHORT $LN7@main
$LN8@main:

; 197  :                 labelrec[i] = '\0';

  008be	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  008c3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  008cb	48 83 bc 24 a8
	00 00 00 51	 cmp	 QWORD PTR $T1[rsp], 81	; 00000051H
  008d4	73 02		 jae	 SHORT $LN34@main
  008d6	eb 05		 jmp	 SHORT $LN35@main
$LN34@main:
  008d8	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN35@main:
  008dd	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  008e5	c6 84 04 f0 00
	00 00 00	 mov	 BYTE PTR labelrec$[rsp+rax], 0

; 198  :                 // "Tape Label: %s"
; 199  :                 WRMSG( HHC02722, "I", labelrec );

  008ed	b9 01 00 00 00	 mov	 ecx, 1
  008f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008f8	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR labelrec$[rsp]
  00900	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00905	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169301
  0090c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00911	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169302
  00918	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0091d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00922	41 b9 03 00 00
	00		 mov	 r9d, 3
  00928	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169303
  0092f	ba c7 00 00 00	 mov	 edx, 199		; 000000c7H
  00934	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169304
  0093b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@main:
$LN21@main:

; 200  :             }
; 201  : 
; 202  :         } /* end if(tapemark) */
; 203  : 
; 204  :     } /* end while */

  00941	e9 df f8 ff ff	 jmp	 $LN2@main
$LN3@main:

; 205  : 
; 206  :     /* Close files and exit */
; 207  :     close (infd);

  00946	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR infd$[rsp]
  0094d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 208  : 
; 209  :     return 0;

  00953	33 c0		 xor	 eax, eax
$LN31@main:

; 210  : 
; 211  : } /* end function main */

  00955	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0095d	48 33 cc	 xor	 rcx, rsp
  00960	e8 00 00 00 00	 call	 __security_check_cookie
  00965	48 81 c4 78 02
	00 00		 add	 rsp, 632		; 00000278H
  0096c	5f		 pop	 rdi
  0096d	5e		 pop	 rsi
  0096e	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END
