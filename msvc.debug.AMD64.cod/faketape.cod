; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	open_faketape
PUBLIC	close_faketape
PUBLIC	passedeot_faketape
PUBLIC	rewind_faketape
PUBLIC	write_fakemark
PUBLIC	sync_faketape
PUBLIC	fsb_faketape
PUBLIC	bsb_faketape
PUBLIC	fsf_faketape
PUBLIC	bsf_faketape
PUBLIC	readhdr_faketape
PUBLIC	writehdr_faketape
PUBLIC	read_faketape
PUBLIC	write_faketape
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp__chsize_s:PROC
EXTRN	__imp__commit:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	build_senseX:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$open_faketape DD imagerel $LN21
	DD	imagerel $LN21+1227
	DD	imagerel $unwind$open_faketape
$pdata$close_faketape DD imagerel $LN8
	DD	imagerel $LN8+362
	DD	imagerel $unwind$close_faketape
$pdata$rewind_faketape DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$rewind_faketape
$pdata$write_fakemark DD imagerel $LN21
	DD	imagerel $LN21+1205
	DD	imagerel $unwind$write_fakemark
$pdata$sync_faketape DD imagerel $LN9
	DD	imagerel $LN9+422
	DD	imagerel $unwind$sync_faketape
$pdata$fsb_faketape DD imagerel $LN5
	DD	imagerel $LN5+227
	DD	imagerel $unwind$fsb_faketape
$pdata$bsb_faketape DD imagerel $LN6
	DD	imagerel $LN6+265
	DD	imagerel $unwind$bsb_faketape
$pdata$fsf_faketape DD imagerel $LN7
	DD	imagerel $LN7+83
	DD	imagerel $unwind$fsf_faketape
$pdata$bsf_faketape DD imagerel $LN8
	DD	imagerel $LN8+131
	DD	imagerel $unwind$bsf_faketape
$pdata$readhdr_faketape DD imagerel $LN36
	DD	imagerel $LN36+2176
	DD	imagerel $unwind$readhdr_faketape
$pdata$writehdr_faketape DD imagerel $LN14
	DD	imagerel $LN14+1027
	DD	imagerel $unwind$writehdr_faketape
$pdata$read_faketape DD imagerel $LN16
	DD	imagerel $LN16+995
	DD	imagerel $unwind$read_faketape
$pdata$write_faketape DD imagerel $LN27
	DD	imagerel $LN27+1676
	DD	imagerel $unwind$write_faketape
pdata	ENDS
_DATA	SEGMENT
$SG169289 DB	'fake', 00H
	ORG $+3
$SG169290 DB	'I', 00H
	ORG $+2
$SG169294 DB	'*', 00H
	ORG $+2
$SG169291 DB	'HHC00201%s %1d:%04X Tape file %s, type %s: tape closed', 0aH
	DB	00H
$SG169292 DB	'close_faketape', 00H
	ORG $+1
$SG169293 DB	'faketape.c', 00H
	ORG $+1
$SG169322 DB	'*', 00H
	ORG $+2
$SG169326 DB	'fake', 00H
	ORG $+3
$SG169327 DB	'I', 00H
	ORG $+2
$SG169337 DB	'open()', 00H
	ORG $+1
$SG169339 DB	'E', 00H
	ORG $+2
$SG169328 DB	'HHC00235%s %1d:%04X Tape file %s, type %s: tape created', 0aH
	DB	00H
	ORG $+3
$SG169343 DB	'*', 00H
	ORG $+2
$SG169329 DB	'open_faketape', 00H
	ORG $+2
$SG169330 DB	'faketape.c', 00H
	ORG $+1
$SG169338 DB	'fake', 00H
	ORG $+7
$SG169341 DB	'open_faketape', 00H
	ORG $+2
$SG169371 DB	'lseek()', 00H
$SG169340 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169342 DB	'faketape.c', 00H
	ORG $+1
$SG169372 DB	'fake', 00H
	ORG $+3
$SG169373 DB	'E', 00H
	ORG $+2
$SG169374 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169378 DB	'read()', 00H
	ORG $+1
$SG169380 DB	'E', 00H
	ORG $+2
$SG169375 DB	'readhdr_faketape', 00H
	ORG $+3
$SG169388 DB	'E', 00H
	ORG $+2
$SG169376 DB	'faketape.c', 00H
	ORG $+1
$SG169379 DB	'fake', 00H
	ORG $+7
$SG169382 DB	'readhdr_faketape', 00H
	ORG $+7
$SG169381 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169396 DB	'E', 00H
	ORG $+2
$SG169383 DB	'faketape.c', 00H
	ORG $+1
$SG169400 DB	'%x', 00H
	ORG $+1
$SG169385 DB	'end of file (uninitialized tape)', 00H
	ORG $+3
$SG169401 DB	'%x', 00H
	ORG $+1
$SG169386 DB	'readhdr_faketape()', 00H
	ORG $+1
$SG169387 DB	'fake', 00H
	ORG $+7
$SG169390 DB	'readhdr_faketape', 00H
	ORG $+7
$SG169389 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169402 DB	'%x', 00H
	ORG $+1
$SG169391 DB	'faketape.c', 00H
	ORG $+1
$SG169407 DB	'E', 00H
	ORG $+2
$SG169393 DB	'unexpected end of file', 00H
	ORG $+1
$SG169394 DB	'readhdr_faketape()', 00H
	ORG $+1
$SG169395 DB	'fake', 00H
	ORG $+7
$SG169398 DB	'readhdr_faketape', 00H
	ORG $+7
$SG169397 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169430 DB	'read()', 00H
	ORG $+1
$SG169432 DB	'E', 00H
	ORG $+2
$SG169399 DB	'faketape.c', 00H
	ORG $+1
$SG169440 DB	'E', 00H
	ORG $+2
$SG169404 DB	'block header damage', 00H
$SG169468 DB	'E', 00H
	ORG $+2
$SG169405 DB	'readhdr_faketape()', 00H
	ORG $+1
$SG169406 DB	'fake', 00H
	ORG $+7
$SG169408 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169472 DB	'%4.4X', 00H
	ORG $+2
$SG169478 DB	'E', 00H
	ORG $+2
$SG169409 DB	'readhdr_faketape', 00H
	ORG $+3
$SG169473 DB	'%4.4X', 00H
	ORG $+2
$SG169512 DB	'E', 00H
	ORG $+2
$SG169410 DB	'faketape.c', 00H
	ORG $+1
$SG169431 DB	'fake', 00H
	ORG $+7
$SG169433 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169474 DB	'%4.4X', 00H
	ORG $+2
$SG169522 DB	'E', 00H
	ORG $+2
$SG169434 DB	'read_faketape', 00H
	ORG $+2
$SG169435 DB	'faketape.c', 00H
	ORG $+1
$SG169530 DB	'E', 00H
	ORG $+2
$SG169437 DB	'end of file within data block', 00H
	ORG $+2
$SG169438 DB	'read_faketape()', 00H
$SG169439 DB	'fake', 00H
	ORG $+3
$SG169441 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169558 DB	'E', 00H
	ORG $+2
$SG169442 DB	'read_faketape', 00H
	ORG $+2
$SG169443 DB	'faketape.c', 00H
	ORG $+1
$SG169568 DB	'E', 00H
	ORG $+2
$SG169466 DB	'lseek()', 00H
$SG169467 DB	'fake', 00H
	ORG $+3
$SG169469 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169583 DB	'E', 00H
	ORG $+2
$SG169470 DB	'writehdr_faketape', 00H
	ORG $+6
$SG169471 DB	'faketape.c', 00H
	ORG $+5
$SG169476 DB	'write()', 00H
$SG169477 DB	'fake', 00H
	ORG $+3
$SG169480 DB	'writehdr_faketape', 00H
	ORG $+6
$SG169479 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169481 DB	'faketape.c', 00H
	ORG $+5
$SG169510 DB	'lseek()', 00H
$SG169511 DB	'fake', 00H
	ORG $+3
$SG169513 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169514 DB	'write_faketape', 00H
	ORG $+1
$SG169515 DB	'faketape.c', 00H
	ORG $+5
$SG169520 DB	'write()', 00H
$SG169521 DB	'fake', 00H
	ORG $+3
$SG169523 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169524 DB	'write_faketape', 00H
	ORG $+1
$SG169525 DB	'faketape.c', 00H
	ORG $+5
$SG169528 DB	'ftruncate()', 00H
$SG169529 DB	'fake', 00H
	ORG $+7
$SG169532 DB	'write_faketape', 00H
	ORG $+1
$SG169556 DB	'lseek()', 00H
$SG169531 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169533 DB	'faketape.c', 00H
	ORG $+1
$SG169557 DB	'fake', 00H
	ORG $+7
$SG169560 DB	'write_fakemark', 00H
	ORG $+1
$SG169567 DB	'fake', 00H
	ORG $+3
$SG169559 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169561 DB	'faketape.c', 00H
	ORG $+5
$SG169566 DB	'ftruncate()', 00H
	ORG $+4
$SG169569 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+7
$SG169570 DB	'write_fakemark', 00H
	ORG $+1
$SG169571 DB	'faketape.c', 00H
	ORG $+5
$SG169581 DB	'fdatasync()', 00H
$SG169582 DB	'fake', 00H
	ORG $+7
$SG169585 DB	'sync_faketape', 00H
	ORG $+10
$SG169584 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169586 DB	'faketape.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:writehdr_faketape
	DD	027H
	DD	03ebH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:readhdr_faketape
	DD	025H
	DD	0868H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:open_faketape
	DD	020H
	DD	04b3H
voltbl	ENDS
xdata	SEGMENT
$unwind$open_faketape DD 022819H
	DD	03b0116H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$close_faketape DD 010901H
	DD	0e209H
$unwind$rewind_faketape DD 011301H
	DD	06213H
$unwind$write_fakemark DD 021601H
	DD	0190116H
$unwind$sync_faketape DD 021601H
	DD	0130116H
$unwind$fsb_faketape DD 011301H
	DD	08213H
$unwind$bsb_faketape DD 011301H
	DD	0a213H
$unwind$fsf_faketape DD 011301H
	DD	06213H
$unwind$bsf_faketape DD 011301H
	DD	06213H
$unwind$readhdr_faketape DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0118H
$unwind$writehdr_faketape DD 022f19H
	DD	01b011dH
	DD	imagerel __GSHandlerCheck
	DD	0c8H
$unwind$read_faketape DD 021b01H
	DD	017011bH
$unwind$write_faketape DD 021b01H
	DD	01b011bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
rc$ = 112
prvblkl$ = 116
blkpos$ = 120
tv130 = 128
tv136 = 132
tv194 = 136
tv200 = 140
tv244 = 144
tv250 = 148
rcoff$ = 152
tv86 = 160
tv93 = 168
tv182 = 176
tv189 = 184
tv232 = 192
tv239 = 200
dev$ = 224
buf$ = 232
blklen$ = 240
unitstat$ = 248
code$ = 256
write_faketape PROC

; 417  : {

$LN27:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 418  : int             rc;                     /* Return code               */
; 419  : off_t           rcoff;                  /* Return code from lseek()  */
; 420  : off_t           blkpos;                 /* Offset of block header    */
; 421  : U16             prvblkl;                /* Length of previous block  */
; 422  : 
; 423  :     /* Initialize current block position and previous block length */
; 424  :     blkpos = dev->nxtblkpos;

  0001b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00023	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0002a	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax

; 425  :     prvblkl = 0;

  0002f	33 c0		 xor	 eax, eax
  00031	66 89 44 24 74	 mov	 WORD PTR prvblkl$[rsp], ax

; 426  : 
; 427  :     /* Determine previous block length if not at start of tape */
; 428  :     if (dev->nxtblkpos > 0)

  00036	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0003e	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00046	7e 70		 jle	 SHORT $LN5@write_fake

; 429  :     {
; 430  :         /* Retrieve the previous block length */
; 431  :         rc = readhdr_faketape (dev, dev->prvblkpos, NULL, &prvblkl, unitstat,code);

  00048	0f b6 84 24 00
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00050	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00054	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0005c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00061	4c 8d 4c 24 74	 lea	 r9, QWORD PTR prvblkl$[rsp]
  00066	45 33 c0	 xor	 r8d, r8d
  00069	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00071	48 8b 90 10 10
	00 00		 mov	 rdx, QWORD PTR [rax+4112]
  00078	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00080	e8 00 00 00 00	 call	 readhdr_faketape
  00085	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 432  :         if (rc < 0) return -1;

  00089	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  0008e	7d 0a		 jge	 SHORT $LN6@write_fake
  00090	b8 ff ff ff ff	 mov	 eax, -1
  00095	e9 ea 05 00 00	 jmp	 $LN1@write_fake
$LN6@write_fake:

; 433  : 
; 434  :         /* Recalculate the offset of the next block */
; 435  :         blkpos = dev->prvblkpos + sizeof(FAKETAPE_BLKHDR) + prvblkl;

  0009a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a2	48 8b 80 10 10
	00 00		 mov	 rax, QWORD PTR [rax+4112]
  000a9	0f b7 4c 24 74	 movzx	 ecx, WORD PTR prvblkl$[rsp]
  000ae	48 8d 44 08 0c	 lea	 rax, QWORD PTR [rax+rcx+12]
  000b3	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax
$LN5@write_fake:

; 436  :     }
; 437  : 
; 438  :     /* Reposition file to the new block header */
; 439  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  000b8	45 33 c0	 xor	 r8d, r8d
  000bb	48 8b 54 24 78	 mov	 rdx, QWORD PTR blkpos$[rsp]
  000c0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000c8	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  000d4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 440  :     if (rcoff < 0)

  000dc	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  000e5	0f 8d 4b 01 00
	00		 jge	 $LN7@write_fake

; 441  :     {
; 442  :         /* Handle seek error condition */
; 443  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "lseek()", blkpos, strerror(errno));

  000eb	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000f4	74 15		 je	 SHORT $LN15@write_fake
  000f6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000fe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00102	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv130[rsp], eax
  00109	eb 0b		 jmp	 SHORT $LN16@write_fake
$LN15@write_fake:
  0010b	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv130[rsp], 0
$LN16@write_fake:
  00116	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0011f	74 17		 je	 SHORT $LN17@write_fake
  00121	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00129	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0012d	d1 f8		 sar	 eax, 1
  0012f	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv136[rsp], eax
  00136	eb 0b		 jmp	 SHORT $LN18@write_fake
$LN17@write_fake:
  00138	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv136[rsp], 0
$LN18@write_fake:
  00143	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00149	8b 08		 mov	 ecx, DWORD PTR [rax]
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00151	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv86[rsp], rax
  00159	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00161	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00168	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv93[rsp], rcx
  00170	b9 01 00 00 00	 mov	 ecx, 1
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv86[rsp]
  00183	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00188	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0018d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169510
  00199	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169511
  001a5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001aa	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv93[rsp]
  001b2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001b7	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv130[rsp]
  001be	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001c2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv136[rsp]
  001c9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169512
  001d4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169513
  001e0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ea	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169514
  001f7	ba bb 01 00 00	 mov	 edx, 443		; 000001bbH
  001fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169515
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 444  : 
; 445  :         /* Set unit check with equipment check */
; 446  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00209	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00212	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0021a	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00222	b9 0e 00 00 00	 mov	 ecx, 14
  00227	e8 00 00 00 00	 call	 build_senseX

; 447  :         return -1;

  0022c	b8 ff ff ff ff	 mov	 eax, -1
  00231	e9 4e 04 00 00	 jmp	 $LN1@write_fake
$LN7@write_fake:

; 448  :     }
; 449  :     /* ISW: Determine if we are passed maxsize */
; 450  :     if(dev->tdparms.maxsize>0)

  00236	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0023e	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  00246	7e 59		 jle	 SHORT $LN8@write_fake

; 451  :     {
; 452  :         if((off_t)(dev->nxtblkpos+blklen+sizeof(FAKETAPE_BLKHDR)) > dev->tdparms.maxsize)

  00248	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR blklen$[rsp]
  0024f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00257	48 8b 89 08 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4104]
  0025e	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  00263	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0026b	48 3b 81 38 10
	00 00		 cmp	 rax, QWORD PTR [rcx+4152]
  00272	7e 2d		 jle	 SHORT $LN9@write_fake

; 453  :         {
; 454  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  00274	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0027d	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00285	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0028d	b9 08 00 00 00	 mov	 ecx, 8
  00292	e8 00 00 00 00	 call	 build_senseX

; 455  :             return -1;

  00297	b8 ff ff ff ff	 mov	 eax, -1
  0029c	e9 e3 03 00 00	 jmp	 $LN1@write_fake
$LN9@write_fake:
$LN8@write_fake:

; 456  :         }
; 457  :     }
; 458  :     /* ISW: End of virtual physical EOT determination */
; 459  : 
; 460  :     /* Write the block header */
; 461  :     rc = writehdr_faketape (dev, rcoff, prvblkl, blklen, unitstat, code);

  002a1	0f b6 84 24 00
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  002a9	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  002ad	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  002b5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ba	44 0f b7 8c 24
	f0 00 00 00	 movzx	 r9d, WORD PTR blklen$[rsp]
  002c3	44 0f b7 44 24
	74		 movzx	 r8d, WORD PTR prvblkl$[rsp]
  002c9	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR rcoff$[rsp]
  002d1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002d9	e8 00 00 00 00	 call	 writehdr_faketape
  002de	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 462  :     if (rc < 0) return -1; /* (error message already issued) */

  002e2	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  002e7	7d 0a		 jge	 SHORT $LN10@write_fake
  002e9	b8 ff ff ff ff	 mov	 eax, -1
  002ee	e9 91 03 00 00	 jmp	 $LN1@write_fake
$LN10@write_fake:

; 463  : 
; 464  :     /* Calculate the offsets of the next and previous blocks */
; 465  :     dev->nxtblkpos = blkpos + sizeof(FAKETAPE_BLKHDR) + blklen;

  002f3	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR blklen$[rsp]
  002fa	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  002ff	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  00304	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0030c	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 466  :     dev->prvblkpos = blkpos;

  00313	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0031b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00320	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx

; 467  : 
; 468  :     /* Write the data block */
; 469  :     rc = write (dev->fd, buf, blklen);

  00327	44 8b 84 24 f0
	00 00 00	 mov	 r8d, DWORD PTR blklen$[rsp]
  0032f	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00337	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0033f	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00345	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0034b	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 470  :     if (rc < (int)blklen)

  0034f	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR blklen$[rsp]
  00356	39 44 24 70	 cmp	 DWORD PTR rc$[rsp], eax
  0035a	0f 8d 83 01 00
	00		 jge	 $LN11@write_fake

; 471  :     {
; 472  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "write()", blkpos, strerror(errno));

  00360	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00369	74 15		 je	 SHORT $LN19@write_fake
  0036b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00373	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00377	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv194[rsp], eax
  0037e	eb 0b		 jmp	 SHORT $LN20@write_fake
$LN19@write_fake:
  00380	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
$LN20@write_fake:
  0038b	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00394	74 17		 je	 SHORT $LN21@write_fake
  00396	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0039e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003a2	d1 f8		 sar	 eax, 1
  003a4	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  003ab	eb 0b		 jmp	 SHORT $LN22@write_fake
$LN21@write_fake:
  003ad	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv200[rsp], 0
$LN22@write_fake:
  003b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  003be	8b 08		 mov	 ecx, DWORD PTR [rax]
  003c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003c6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv182[rsp], rax
  003ce	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003d6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  003dd	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv189[rsp], rcx
  003e5	b9 01 00 00 00	 mov	 ecx, 1
  003ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003f0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv182[rsp]
  003f8	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  003fd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00402	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00407	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169520
  0040e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00413	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169521
  0041a	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0041f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  00427	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0042c	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv194[rsp]
  00433	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00437	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv200[rsp]
  0043e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00442	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169522
  00449	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0044e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169523
  00455	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0045a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00465	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169524
  0046c	ba d8 01 00 00	 mov	 edx, 472		; 000001d8H
  00471	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169525
  00478	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 473  :         if(errno==ENOSPC)

  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00484	83 38 1c	 cmp	 DWORD PTR [rax], 28
  00487	75 2d		 jne	 SHORT $LN12@write_fake

; 474  :         {
; 475  :             /* Disk FULL */
; 476  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  00489	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00492	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0049a	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  004a2	b9 08 00 00 00	 mov	 ecx, 8
  004a7	e8 00 00 00 00	 call	 build_senseX

; 477  :             return -1;

  004ac	b8 ff ff ff ff	 mov	 eax, -1
  004b1	e9 ce 01 00 00	 jmp	 $LN1@write_fake
$LN12@write_fake:

; 478  :         }
; 479  : 
; 480  :         /* Set unit check with equipment check */
; 481  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  004b6	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  004bf	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  004c7	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  004cf	b9 03 00 00 00	 mov	 ecx, 3
  004d4	e8 00 00 00 00	 call	 build_senseX

; 482  :         return -1;

  004d9	b8 ff ff ff ff	 mov	 eax, -1
  004de	e9 a1 01 00 00	 jmp	 $LN1@write_fake
$LN11@write_fake:

; 483  :     }
; 484  : 
; 485  :     /* Increment the block number */
; 486  :     dev->blockid++;

  004e3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004eb	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  004f1	ff c0		 inc	 eax
  004f3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004fb	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax
$LN4@write_fake:

; 487  : 
; 488  :     /* Set new physical EOF */
; 489  :     do rc = ftruncate( dev->fd, dev->nxtblkpos );

  00501	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00509	48 8b 90 08 10
	00 00		 mov	 rdx, QWORD PTR [rax+4104]
  00510	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00518	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0051e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  00524	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 490  :     while (EINTR == rc);

  00528	83 7c 24 70 04	 cmp	 DWORD PTR rc$[rsp], 4
  0052d	74 d2		 je	 SHORT $LN4@write_fake

; 491  : 
; 492  :     if (rc != 0)

  0052f	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00534	0f 84 48 01 00
	00		 je	 $LN13@write_fake

; 493  :     {
; 494  :         /* Handle write error condition */
; 495  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "ftruncate()", blkpos, strerror(errno));

  0053a	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00543	74 15		 je	 SHORT $LN23@write_fake
  00545	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0054d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00551	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv244[rsp], eax
  00558	eb 0b		 jmp	 SHORT $LN24@write_fake
$LN23@write_fake:
  0055a	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN24@write_fake:
  00565	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0056e	74 17		 je	 SHORT $LN25@write_fake
  00570	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00578	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0057c	d1 f8		 sar	 eax, 1
  0057e	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv250[rsp], eax
  00585	eb 0b		 jmp	 SHORT $LN26@write_fake
$LN25@write_fake:
  00587	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv250[rsp], 0
$LN26@write_fake:
  00592	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00598	8b 08		 mov	 ecx, DWORD PTR [rax]
  0059a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  005a0	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv232[rsp], rax
  005a8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005b0	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  005b7	48 89 8c 24 c8
	00 00 00	 mov	 QWORD PTR tv239[rsp], rcx
  005bf	b9 01 00 00 00	 mov	 ecx, 1
  005c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005ca	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv232[rsp]
  005d2	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  005d7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  005dc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169528
  005e8	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  005ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169529
  005f4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  005f9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv239[rsp]
  00601	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00606	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv244[rsp]
  0060d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00611	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv250[rsp]
  00618	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0061c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169530
  00623	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00628	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169531
  0062f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00634	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00639	41 b9 03 00 00
	00		 mov	 r9d, 3
  0063f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169532
  00646	ba ef 01 00 00	 mov	 edx, 495		; 000001efH
  0064b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169533
  00652	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 496  : 
; 497  :         /* Set unit check with equipment check */
; 498  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00658	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00661	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00669	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00671	b9 03 00 00 00	 mov	 ecx, 3
  00676	e8 00 00 00 00	 call	 build_senseX

; 499  :         return -1;

  0067b	b8 ff ff ff ff	 mov	 eax, -1
  00680	eb 02		 jmp	 SHORT $LN1@write_fake
$LN13@write_fake:

; 500  :     }
; 501  : 
; 502  :     /* Return normal status */
; 503  :     return 0;

  00682	33 c0		 xor	 eax, eax
$LN1@write_fake:

; 504  : 
; 505  : } /* end function write_faketape */

  00684	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  0068b	c3		 ret	 0
write_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
curblkl$ = 112
rc$ = 116
blkpos$ = 120
tv129 = 128
tv135 = 132
tv161 = 136
tv167 = 140
tv85 = 144
tv92 = 152
tv156 = 160
dev$ = 192
buf$ = 200
unitstat$ = 208
code$ = 216
read_faketape PROC

; 290  : {

$LN16:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 291  : int             rc;                     /* Return code               */
; 292  : off_t           blkpos;                 /* Offset of block header    */
; 293  : U16             curblkl;                /* Current block length      */
; 294  : 
; 295  :     /* Initialize current block position */
; 296  :     blkpos = dev->nxtblkpos;

  0001b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00023	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0002a	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax

; 297  : 
; 298  :     /* Read the block header to obtain the current block length */
; 299  :     rc = readhdr_faketape (dev, blkpos, NULL, &curblkl, unitstat,code);

  0002f	0f b6 84 24 d8
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00037	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0003b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00043	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00048	4c 8d 4c 24 70	 lea	 r9, QWORD PTR curblkl$[rsp]
  0004d	45 33 c0	 xor	 r8d, r8d
  00050	48 8b 54 24 78	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00055	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0005d	e8 00 00 00 00	 call	 readhdr_faketape
  00062	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 300  :     if (rc < 0) return -1; /* (error message already issued) */

  00066	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0006b	7d 0a		 jge	 SHORT $LN2@read_faket
  0006d	b8 ff ff ff ff	 mov	 eax, -1
  00072	e9 64 03 00 00	 jmp	 $LN1@read_faket
$LN2@read_faket:

; 301  : 
; 302  :     /* Calculate the offset of the next block header */
; 303  :     blkpos += sizeof(FAKETAPE_BLKHDR) + curblkl;

  00077	0f b7 44 24 70	 movzx	 eax, WORD PTR curblkl$[rsp]
  0007c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00081	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  00086	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax

; 304  : 
; 305  :     /* If not a tapemark, read the data block */
; 306  :     if (curblkl > 0)

  0008b	0f b7 44 24 70	 movzx	 eax, WORD PTR curblkl$[rsp]
  00090	85 c0		 test	 eax, eax
  00092	0f 8e c0 02 00
	00		 jle	 $LN3@read_faket

; 307  :     {
; 308  :         rc = read (dev->fd, buf, curblkl);

  00098	0f b7 44 24 70	 movzx	 eax, WORD PTR curblkl$[rsp]
  0009d	44 8b c0	 mov	 r8d, eax
  000a0	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  000a8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000b0	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  000bc	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 309  : 
; 310  :         /* Handle read error condition */
; 311  :         if (rc < 0)

  000c0	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  000c5	0f 8d 4b 01 00
	00		 jge	 $LN4@read_faket

; 312  :         {
; 313  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "read()", blkpos, strerror(errno));

  000cb	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000d4	74 15		 je	 SHORT $LN8@read_faket
  000d6	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000de	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000e2	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv129[rsp], eax
  000e9	eb 0b		 jmp	 SHORT $LN9@read_faket
$LN8@read_faket:
  000eb	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv129[rsp], 0
$LN9@read_faket:
  000f6	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000ff	74 17		 je	 SHORT $LN10@read_faket
  00101	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00109	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0010d	d1 f8		 sar	 eax, 1
  0010f	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv135[rsp], eax
  00116	eb 0b		 jmp	 SHORT $LN11@read_faket
$LN10@read_faket:
  00118	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv135[rsp], 0
$LN11@read_faket:
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00129	8b 08		 mov	 ecx, DWORD PTR [rax]
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00131	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv85[rsp], rax
  00139	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00141	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00148	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv92[rsp], rcx
  00150	b9 01 00 00 00	 mov	 ecx, 1
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv85[rsp]
  00163	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00168	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0016d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169430
  00179	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169431
  00185	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0018a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv92[rsp]
  00192	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00197	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv129[rsp]
  0019e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001a2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv135[rsp]
  001a9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169432
  001b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169433
  001c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169434
  001d7	ba 39 01 00 00	 mov	 edx, 313		; 00000139H
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169435
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 314  : 
; 315  :             /* Set unit check with equipment check */
; 316  :             build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  001e9	44 0f b6 8c 24
	d8 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  001f2	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  001fa	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00202	b9 02 00 00 00	 mov	 ecx, 2
  00207	e8 00 00 00 00	 call	 build_senseX

; 317  :             return -1;

  0020c	b8 ff ff ff ff	 mov	 eax, -1
  00211	e9 c5 01 00 00	 jmp	 $LN1@read_faket
$LN4@read_faket:

; 318  :         }
; 319  : 
; 320  :         /* Handle end of file within data block */
; 321  :         if (rc < curblkl)

  00216	0f b7 44 24 70	 movzx	 eax, WORD PTR curblkl$[rsp]
  0021b	39 44 24 74	 cmp	 DWORD PTR rc$[rsp], eax
  0021f	0f 8d 33 01 00
	00		 jge	 $LN5@read_faket

; 322  :         {
; 323  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "read_faketape()", blkpos, "end of file within data block");

  00225	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0022e	74 15		 je	 SHORT $LN12@read_faket
  00230	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00238	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0023c	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv161[rsp], eax
  00243	eb 0b		 jmp	 SHORT $LN13@read_faket
$LN12@read_faket:
  00245	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv161[rsp], 0
$LN13@read_faket:
  00250	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00259	74 17		 je	 SHORT $LN14@read_faket
  0025b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00263	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00267	d1 f8		 sar	 eax, 1
  00269	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv167[rsp], eax
  00270	eb 0b		 jmp	 SHORT $LN15@read_faket
$LN14@read_faket:
  00272	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv167[rsp], 0
$LN15@read_faket:
  0027d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00285	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0028b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv156[rsp], rax
  00293	b9 01 00 00 00	 mov	 ecx, 1
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0029e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169437
  002a5	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  002aa	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  002af	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169438
  002bb	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  002c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169439
  002c7	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002cc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv156[rsp]
  002d4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002d9	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv161[rsp]
  002e0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002e4	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv167[rsp]
  002eb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169440
  002f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169441
  00302	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00307	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00312	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169442
  00319	ba 43 01 00 00	 mov	 edx, 323		; 00000143H
  0031e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169443
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 324  : 
; 325  :             /* Set unit check with data check and partial record */
; 326  :             build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  0032b	44 0f b6 8c 24
	d8 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00334	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0033c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00344	b9 11 00 00 00	 mov	 ecx, 17
  00349	e8 00 00 00 00	 call	 build_senseX

; 327  :             return -1;

  0034e	b8 ff ff ff ff	 mov	 eax, -1
  00353	e9 83 00 00 00	 jmp	 $LN1@read_faket
$LN5@read_faket:
$LN3@read_faket:

; 328  :         }
; 329  :     }
; 330  : 
; 331  :     /* Calculate the offsets of the next and previous blocks */
; 332  :     dev->prvblkpos = dev->nxtblkpos;

  00358	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00360	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00368	48 8b 89 08 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4104]
  0036f	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx

; 333  :     dev->nxtblkpos = blkpos;

  00376	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0037e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00383	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 334  : 
; 335  :     /* Increment the block number */
; 336  :     dev->blockid++;

  0038a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00392	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00398	ff c0		 inc	 eax
  0039a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003a2	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 337  : 
; 338  :     /* Increment file number and return zero if tapemark was read */
; 339  :     if (curblkl == 0)

  003a8	0f b7 44 24 70	 movzx	 eax, WORD PTR curblkl$[rsp]
  003ad	85 c0		 test	 eax, eax
  003af	75 25		 jne	 SHORT $LN6@read_faket

; 340  :     {
; 341  :         dev->curfilen++;

  003b1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003b9	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  003c0	66 ff c0	 inc	 ax
  003c3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003cb	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 342  :         return 0; /* UX will be set by caller */

  003d2	33 c0		 xor	 eax, eax
  003d4	eb 05		 jmp	 SHORT $LN1@read_faket
$LN6@read_faket:

; 343  :     }
; 344  : 
; 345  :     /* Return block length */
; 346  :     return curblkl;

  003d6	0f b7 44 24 70	 movzx	 eax, WORD PTR curblkl$[rsp]
$LN1@read_faket:

; 347  : 
; 348  : } /* end function read_faketape */

  003db	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  003e2	c3		 ret	 0
read_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
tv82 = 112
tv88 = 116
tv191 = 120
tv197 = 124
rc$ = 128
rcoff$ = 136
tv70 = 144
tv77 = 152
tv179 = 160
tv186 = 168
fakehdr$ = 176
sblklen$ = 192
__$ArrayPad$ = 200
dev$ = 224
blkpos$ = 232
prvblkl$ = 240
curblkl$ = 248
unitstat$ = 256
code$ = 264
writehdr_faketape PROC

; 360  : {

$LN14:
  00000	66 44 89 4c 24
	20		 mov	 WORD PTR [rsp+32], r9w
  00006	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 361  : int             rc;                     /* Return code               */
; 362  : off_t           rcoff;                  /* Return code from lseek()  */
; 363  : FAKETAPE_BLKHDR fakehdr;                /* FAKETAPE block header     */
; 364  : char            sblklen[5];             /* work buffer               */
; 365  : 
; 366  :     /* Position file to where block header is to go */
; 367  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  0002f	45 33 c0	 xor	 r8d, r8d
  00032	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR blkpos$[rsp]
  0003a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00042	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0004e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 368  :     if (rcoff < 0)

  00056	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  0005f	0f 8d 3c 01 00
	00		 jge	 $LN2@writehdr_f

; 369  :     {
; 370  :         /* Handle seek error condition */
; 371  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "lseek()", blkpos, strerror(errno));

  00065	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0006e	74 12		 je	 SHORT $LN6@writehdr_f
  00070	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00078	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0007c	89 44 24 70	 mov	 DWORD PTR tv82[rsp], eax
  00080	eb 08		 jmp	 SHORT $LN7@writehdr_f
$LN6@writehdr_f:
  00082	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN7@writehdr_f:
  0008a	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00093	74 14		 je	 SHORT $LN8@writehdr_f
  00095	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000a1	d1 f8		 sar	 eax, 1
  000a3	89 44 24 74	 mov	 DWORD PTR tv88[rsp], eax
  000a7	eb 08		 jmp	 SHORT $LN9@writehdr_f
$LN8@writehdr_f:
  000a9	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN9@writehdr_f:
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b7	8b 08		 mov	 ecx, DWORD PTR [rax]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000bf	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv70[rsp], rax
  000c7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000cf	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  000d6	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv77[rsp], rcx
  000de	b9 01 00 00 00	 mov	 ecx, 1
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv70[rsp]
  000f1	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  000f6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  000fe	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169466
  0010a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169467
  00116	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0011b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv77[rsp]
  00123	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00128	8b 4c 24 70	 mov	 ecx, DWORD PTR tv82[rsp]
  0012c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00130	8b 4c 24 74	 mov	 ecx, DWORD PTR tv88[rsp]
  00134	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169468
  0013f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169469
  0014b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00150	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00155	41 b9 03 00 00
	00		 mov	 r9d, 3
  0015b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169470
  00162	ba 73 01 00 00	 mov	 edx, 371		; 00000173H
  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169471
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 372  : 
; 373  :         /* Set unit check with equipment check */
; 374  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00174	44 0f b6 8c 24
	08 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0017d	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00185	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0018d	b9 0e 00 00 00	 mov	 ecx, 14
  00192	e8 00 00 00 00	 call	 build_senseX

; 375  :         return -1;

  00197	b8 ff ff ff ff	 mov	 eax, -1
  0019c	e9 4a 02 00 00	 jmp	 $LN1@writehdr_f
$LN2@writehdr_f:

; 376  :     }
; 377  : 
; 378  :     /* Build the 12-ASCII-hex-character block header */
; 379  :     /* Note : strings are not NULL terminated in the faketape header */
; 380  :     /*        hence the use of an intermediate buffer                */
; 381  :     MSGBUF( sblklen, "%4.4X", prvblkl );

  001a1	0f b7 84 24 f0
	00 00 00	 movzx	 eax, WORD PTR prvblkl$[rsp]
  001a9	44 8b c8	 mov	 r9d, eax
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169472
  001b3	ba 05 00 00 00	 mov	 edx, 5
  001b8	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  001c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 382  :     memcpy( fakehdr.sprvblkl, sblklen, sizeof(fakehdr.sprvblkl) );

  001c6	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR sblklen$[rsp]
  001cd	89 84 24 b0 00
	00 00		 mov	 DWORD PTR fakehdr$[rsp], eax

; 383  :     MSGBUF( sblklen, "%4.4X", curblkl );

  001d4	0f b7 84 24 f8
	00 00 00	 movzx	 eax, WORD PTR curblkl$[rsp]
  001dc	44 8b c8	 mov	 r9d, eax
  001df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169473
  001e6	ba 05 00 00 00	 mov	 edx, 5
  001eb	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 384  :     memcpy( fakehdr.scurblkl, sblklen, sizeof(fakehdr.scurblkl) );

  001f9	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR sblklen$[rsp]
  00200	89 84 24 b4 00
	00 00		 mov	 DWORD PTR fakehdr$[rsp+4], eax

; 385  :     MSGBUF( sblklen, "%4.4X", prvblkl ^ curblkl );

  00207	0f b7 84 24 f0
	00 00 00	 movzx	 eax, WORD PTR prvblkl$[rsp]
  0020f	0f b7 8c 24 f8
	00 00 00	 movzx	 ecx, WORD PTR curblkl$[rsp]
  00217	33 c1		 xor	 eax, ecx
  00219	44 8b c8	 mov	 r9d, eax
  0021c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169474
  00223	ba 05 00 00 00	 mov	 edx, 5
  00228	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  00230	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 386  :     memcpy( fakehdr.sxorblkl, sblklen, sizeof(fakehdr.sxorblkl) );

  00236	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR sblklen$[rsp]
  0023d	89 84 24 b8 00
	00 00		 mov	 DWORD PTR fakehdr$[rsp+8], eax

; 387  : 
; 388  :     /* Write the block header */
; 389  :     rc = write (dev->fd, &fakehdr, sizeof(FAKETAPE_BLKHDR));

  00244	41 b8 0c 00 00
	00		 mov	 r8d, 12
  0024a	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR fakehdr$[rsp]
  00252	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0025a	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00266	89 84 24 80 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 390  :     if (rc < (int)sizeof(FAKETAPE_BLKHDR))

  0026d	83 bc 24 80 00
	00 00 0c	 cmp	 DWORD PTR rc$[rsp], 12
  00275	0f 8d 6e 01 00
	00		 jge	 $LN3@writehdr_f

; 391  :     {
; 392  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "write()", blkpos, strerror(errno));

  0027b	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00284	74 12		 je	 SHORT $LN10@writehdr_f
  00286	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0028e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00292	89 44 24 78	 mov	 DWORD PTR tv191[rsp], eax
  00296	eb 08		 jmp	 SHORT $LN11@writehdr_f
$LN10@writehdr_f:
  00298	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv191[rsp], 0
$LN11@writehdr_f:
  002a0	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  002a9	74 14		 je	 SHORT $LN12@writehdr_f
  002ab	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002b3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  002b7	d1 f8		 sar	 eax, 1
  002b9	89 44 24 7c	 mov	 DWORD PTR tv197[rsp], eax
  002bd	eb 08		 jmp	 SHORT $LN13@writehdr_f
$LN12@writehdr_f:
  002bf	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv197[rsp], 0
$LN13@writehdr_f:
  002c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002cd	8b 08		 mov	 ecx, DWORD PTR [rax]
  002cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  002d5	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
  002dd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002e5	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  002ec	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv186[rsp], rcx
  002f4	b9 01 00 00 00	 mov	 ecx, 1
  002f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ff	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  00307	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0030c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00314	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169476
  00320	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169477
  0032c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00331	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv186[rsp]
  00339	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0033e	8b 4c 24 78	 mov	 ecx, DWORD PTR tv191[rsp]
  00342	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00346	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv197[rsp]
  0034a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0034e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169478
  00355	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169479
  00361	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00366	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0036b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00371	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169480
  00378	ba 88 01 00 00	 mov	 edx, 392		; 00000188H
  0037d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169481
  00384	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 393  :         if(errno==ENOSPC)

  0038a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00390	83 38 1c	 cmp	 DWORD PTR [rax], 28
  00393	75 2a		 jne	 SHORT $LN4@writehdr_f

; 394  :         {
; 395  :             /* Disk FULL */
; 396  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  00395	44 0f b6 8c 24
	08 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0039e	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  003a6	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  003ae	b9 08 00 00 00	 mov	 ecx, 8
  003b3	e8 00 00 00 00	 call	 build_senseX

; 397  :             return -1;

  003b8	b8 ff ff ff ff	 mov	 eax, -1
  003bd	eb 2c		 jmp	 SHORT $LN1@writehdr_f
$LN4@writehdr_f:

; 398  :         }
; 399  : 
; 400  :         /* Set unit check with equipment check */
; 401  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  003bf	44 0f b6 8c 24
	08 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  003c8	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  003d0	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  003d8	b9 03 00 00 00	 mov	 ecx, 3
  003dd	e8 00 00 00 00	 call	 build_senseX

; 402  :         return -1;

  003e2	b8 ff ff ff ff	 mov	 eax, -1
  003e7	eb 02		 jmp	 SHORT $LN1@writehdr_f
$LN3@writehdr_f:

; 403  :     }
; 404  : 
; 405  :     return 0;

  003e9	33 c0		 xor	 eax, eax
$LN1@writehdr_f:

; 406  : 
; 407  : } /* end function writehdr_faketape */

  003eb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003f3	48 33 cc	 xor	 rcx, rsp
  003f6	e8 00 00 00 00	 call	 __security_check_cookie
  003fb	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00402	c3		 ret	 0
writehdr_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
rc$ = 112
tv82 = 116
tv88 = 120
tv153 = 124
tv159 = 128
tv184 = 132
tv190 = 136
tv215 = 140
tv221 = 144
tv274 = 148
tv280 = 152
prvblkl$ = 156
curblkl$ = 160
xorblkl$ = 164
$T1 = 168
$T2 = 176
$T3 = 184
rcoff$ = 192
tv70 = 200
tv77 = 208
tv141 = 216
tv148 = 224
tv179 = 232
tv210 = 240
tv269 = 248
fakehdr$ = 256
sblklen$ = 272
__$ArrayPad$ = 280
dev$ = 304
blkpos$ = 312
pprvblkl$ = 320
pcurblkl$ = 328
unitstat$ = 336
code$ = 344
readhdr_faketape PROC

; 204  : {

$LN36:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 205  : int             rc;                     /* Return code               */
; 206  : off_t           rcoff;                  /* Return code from lseek()  */
; 207  : FAKETAPE_BLKHDR fakehdr;                /* FakeTape block header     */
; 208  : char            sblklen[5];             /* work for converting hdr   */
; 209  : int             prvblkl;                /* Previous block length     */
; 210  : int             curblkl;                /* Current block length      */
; 211  : int             xorblkl;                /* XOR check of block lens   */
; 212  : 
; 213  :     /* Reposition file to the requested block header */
; 214  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  0002d	45 33 c0	 xor	 r8d, r8d
  00030	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00038	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00040	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0004c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 215  :     if (rcoff < 0)

  00054	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  0005d	0f 8d 3c 01 00
	00		 jge	 $LN2@readhdr_fa

; 216  :     {
; 217  :         /* Handle seek error condition */
; 218  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "lseek()", blkpos, strerror(errno));

  00063	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0006c	74 12		 je	 SHORT $LN10@readhdr_fa
  0006e	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00076	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0007a	89 44 24 74	 mov	 DWORD PTR tv82[rsp], eax
  0007e	eb 08		 jmp	 SHORT $LN11@readhdr_fa
$LN10@readhdr_fa:
  00080	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN11@readhdr_fa:
  00088	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00091	74 14		 je	 SHORT $LN12@readhdr_fa
  00093	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0009f	d1 f8		 sar	 eax, 1
  000a1	89 44 24 78	 mov	 DWORD PTR tv88[rsp], eax
  000a5	eb 08		 jmp	 SHORT $LN13@readhdr_fa
$LN12@readhdr_fa:
  000a7	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN13@readhdr_fa:
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b5	8b 08		 mov	 ecx, DWORD PTR [rax]
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000bd	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv70[rsp], rax
  000c5	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000cd	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  000d4	48 89 8c 24 d0
	00 00 00	 mov	 QWORD PTR tv77[rsp], rcx
  000dc	b9 01 00 00 00	 mov	 ecx, 1
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000e7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv70[rsp]
  000ef	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  000f4	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  000fc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169371
  00108	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169372
  00114	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00119	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv77[rsp]
  00121	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00126	8b 4c 24 74	 mov	 ecx, DWORD PTR tv82[rsp]
  0012a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0012e	8b 4c 24 78	 mov	 ecx, DWORD PTR tv88[rsp]
  00132	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169373
  0013d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169374
  00149	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00153	41 b9 03 00 00
	00		 mov	 r9d, 3
  00159	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169375
  00160	ba da 00 00 00	 mov	 edx, 218		; 000000daH
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169376
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 219  : 
; 220  :         /* Set unit check with equipment check */
; 221  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00172	44 0f b6 8c 24
	58 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0017b	4c 8b 84 24 50
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00183	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0018b	b9 0e 00 00 00	 mov	 ecx, 14
  00190	e8 00 00 00 00	 call	 build_senseX

; 222  :         return -1;

  00195	b8 ff ff ff ff	 mov	 eax, -1
  0019a	e9 c9 06 00 00	 jmp	 $LN1@readhdr_fa
$LN2@readhdr_fa:

; 223  :     }
; 224  : 
; 225  :     /* Read the 12-ASCII-hex-character block header */
; 226  :     rc = read (dev->fd, &fakehdr, sizeof(FAKETAPE_BLKHDR));

  0019f	41 b8 0c 00 00
	00		 mov	 r8d, 12
  001a5	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR fakehdr$[rsp]
  001ad	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001b5	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  001c1	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 227  : 
; 228  :     /* Handle read error condition */
; 229  :     if (rc < 0)

  001c5	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  001ca	0f 8d 45 01 00
	00		 jge	 $LN3@readhdr_fa

; 230  :     {
; 231  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "read()", blkpos, strerror(errno));

  001d0	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001d9	74 12		 je	 SHORT $LN14@readhdr_fa
  001db	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001e3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001e7	89 44 24 7c	 mov	 DWORD PTR tv153[rsp], eax
  001eb	eb 08		 jmp	 SHORT $LN15@readhdr_fa
$LN14@readhdr_fa:
  001ed	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN15@readhdr_fa:
  001f5	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001fe	74 17		 je	 SHORT $LN16@readhdr_fa
  00200	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00208	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0020c	d1 f8		 sar	 eax, 1
  0020e	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  00215	eb 0b		 jmp	 SHORT $LN17@readhdr_fa
$LN16@readhdr_fa:
  00217	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv159[rsp], 0
$LN17@readhdr_fa:
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00228	8b 08		 mov	 ecx, DWORD PTR [rax]
  0022a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00230	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
  00238	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00240	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00247	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv148[rsp], rcx
  0024f	b9 01 00 00 00	 mov	 ecx, 1
  00254	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0025a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv141[rsp]
  00262	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00267	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0026f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169378
  0027b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169379
  00287	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0028c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv148[rsp]
  00294	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00299	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv153[rsp]
  0029d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002a1	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv159[rsp]
  002a8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169380
  002b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169381
  002bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169382
  002d6	ba e7 00 00 00	 mov	 edx, 231		; 000000e7H
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169383
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 232  : 
; 233  :         /* Set unit check with equipment check */
; 234  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  002e8	44 0f b6 8c 24
	58 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  002f1	4c 8b 84 24 50
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  002f9	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00301	b9 02 00 00 00	 mov	 ecx, 2
  00306	e8 00 00 00 00	 call	 build_senseX

; 235  :         return -1;

  0030b	b8 ff ff ff ff	 mov	 eax, -1
  00310	e9 53 05 00 00	 jmp	 $LN1@readhdr_fa
$LN3@readhdr_fa:

; 236  :     }
; 237  : 
; 238  :     /* Handle end of file (uninitialized tape) condition */
; 239  :     if (rc == 0)

  00315	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  0031a	0f 85 36 01 00
	00		 jne	 $LN4@readhdr_fa

; 240  :     {
; 241  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "readhdr_faketape()", blkpos, "end of file (uninitialized tape)");

  00320	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00329	74 15		 je	 SHORT $LN18@readhdr_fa
  0032b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00333	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00337	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  0033e	eb 0b		 jmp	 SHORT $LN19@readhdr_fa
$LN18@readhdr_fa:
  00340	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
$LN19@readhdr_fa:
  0034b	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00354	74 17		 je	 SHORT $LN20@readhdr_fa
  00356	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0035e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00362	d1 f8		 sar	 eax, 1
  00364	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv190[rsp], eax
  0036b	eb 0b		 jmp	 SHORT $LN21@readhdr_fa
$LN20@readhdr_fa:
  0036d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv190[rsp], 0
$LN21@readhdr_fa:
  00378	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00380	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00386	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
  0038e	b9 01 00 00 00	 mov	 ecx, 1
  00393	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00399	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169385
  003a0	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  003a5	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  003ad	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  003b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169386
  003b9	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  003be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169387
  003c5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003ca	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  003d2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003d7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  003de	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003e2	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv190[rsp]
  003e9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169388
  003f4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169389
  00400	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00405	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00410	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169390
  00417	ba f1 00 00 00	 mov	 edx, 241		; 000000f1H
  0041c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169391
  00423	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 242  : 
; 243  :         /* Set unit exception with tape indicate (end of tape) */
; 244  :         build_senseX(TAPE_BSENSE_EMPTYTAPE,dev,unitstat,code);

  00429	44 0f b6 8c 24
	58 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00432	4c 8b 84 24 50
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0043a	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00442	b9 07 00 00 00	 mov	 ecx, 7
  00447	e8 00 00 00 00	 call	 build_senseX

; 245  :         return -1;

  0044c	b8 ff ff ff ff	 mov	 eax, -1
  00451	e9 12 04 00 00	 jmp	 $LN1@readhdr_fa
$LN4@readhdr_fa:

; 246  :     }
; 247  : 
; 248  :     /* Handle end of file within block header */
; 249  :     if (rc < (int)sizeof(FAKETAPE_BLKHDR))

  00456	83 7c 24 70 0c	 cmp	 DWORD PTR rc$[rsp], 12
  0045b	0f 8d 36 01 00
	00		 jge	 $LN5@readhdr_fa

; 250  :     {
; 251  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "readhdr_faketape()", blkpos, "unexpected end of file");

  00461	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0046a	74 15		 je	 SHORT $LN22@readhdr_fa
  0046c	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00474	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00478	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv215[rsp], eax
  0047f	eb 0b		 jmp	 SHORT $LN23@readhdr_fa
$LN22@readhdr_fa:
  00481	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv215[rsp], 0
$LN23@readhdr_fa:
  0048c	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00495	74 17		 je	 SHORT $LN24@readhdr_fa
  00497	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0049f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  004a3	d1 f8		 sar	 eax, 1
  004a5	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv221[rsp], eax
  004ac	eb 0b		 jmp	 SHORT $LN25@readhdr_fa
$LN24@readhdr_fa:
  004ae	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv221[rsp], 0
$LN25@readhdr_fa:
  004b9	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004c1	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  004c7	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
  004cf	b9 01 00 00 00	 mov	 ecx, 1
  004d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169393
  004e1	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  004e6	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  004ee	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  004f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169394
  004fa	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  004ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169395
  00506	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0050b	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv210[rsp]
  00513	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00518	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv215[rsp]
  0051f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00523	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv221[rsp]
  0052a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0052e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169396
  00535	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0053a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169397
  00541	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00546	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0054b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00551	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169398
  00558	ba fb 00 00 00	 mov	 edx, 251		; 000000fbH
  0055d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169399
  00564	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 252  : 
; 253  :         build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  0056a	44 0f b6 8c 24
	58 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00573	4c 8b 84 24 50
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0057b	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00583	b9 11 00 00 00	 mov	 ecx, 17
  00588	e8 00 00 00 00	 call	 build_senseX

; 254  :         return -1;

  0058d	b8 ff ff ff ff	 mov	 eax, -1
  00592	e9 d1 02 00 00	 jmp	 $LN1@readhdr_fa
$LN5@readhdr_fa:

; 255  :     }
; 256  : 
; 257  :     /* Convert the ASCII-hex-character block lengths to binary */
; 258  :     strncpy( sblklen, fakehdr.sprvblkl, 4 ); sblklen[4] = 0; sscanf( sblklen, "%x", &prvblkl );

  00597	41 b8 04 00 00
	00		 mov	 r8d, 4
  0059d	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR fakehdr$[rsp]
  005a5	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  005ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  005b3	b8 01 00 00 00	 mov	 eax, 1
  005b8	48 6b c0 04	 imul	 rax, rax, 4
  005bc	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  005c4	48 83 bc 24 a8
	00 00 00 05	 cmp	 QWORD PTR $T1[rsp], 5
  005cd	73 02		 jae	 SHORT $LN26@readhdr_fa
  005cf	eb 05		 jmp	 SHORT $LN27@readhdr_fa
$LN26@readhdr_fa:
  005d1	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN27@readhdr_fa:
  005d6	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  005de	c6 84 04 10 01
	00 00 00	 mov	 BYTE PTR sblklen$[rsp+rax], 0
  005e6	4c 8d 84 24 9c
	00 00 00	 lea	 r8, QWORD PTR prvblkl$[rsp]
  005ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169400
  005f5	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  005fd	e8 00 00 00 00	 call	 sscanf

; 259  :     strncpy( sblklen, fakehdr.scurblkl, 4 ); sblklen[4] = 0; sscanf( sblklen, "%x", &curblkl );

  00602	41 b8 04 00 00
	00		 mov	 r8d, 4
  00608	48 8d 94 24 04
	01 00 00	 lea	 rdx, QWORD PTR fakehdr$[rsp+4]
  00610	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  00618	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  0061e	b8 01 00 00 00	 mov	 eax, 1
  00623	48 6b c0 04	 imul	 rax, rax, 4
  00627	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  0062f	48 83 bc 24 b0
	00 00 00 05	 cmp	 QWORD PTR $T2[rsp], 5
  00638	73 02		 jae	 SHORT $LN28@readhdr_fa
  0063a	eb 05		 jmp	 SHORT $LN29@readhdr_fa
$LN28@readhdr_fa:
  0063c	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN29@readhdr_fa:
  00641	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  00649	c6 84 04 10 01
	00 00 00	 mov	 BYTE PTR sblklen$[rsp+rax], 0
  00651	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR curblkl$[rsp]
  00659	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169401
  00660	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  00668	e8 00 00 00 00	 call	 sscanf

; 260  :     strncpy( sblklen, fakehdr.sxorblkl, 4 ); sblklen[4] = 0; sscanf( sblklen, "%x", &xorblkl );

  0066d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00673	48 8d 94 24 08
	01 00 00	 lea	 rdx, QWORD PTR fakehdr$[rsp+8]
  0067b	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  00683	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy
  00689	b8 01 00 00 00	 mov	 eax, 1
  0068e	48 6b c0 04	 imul	 rax, rax, 4
  00692	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  0069a	48 83 bc 24 b8
	00 00 00 05	 cmp	 QWORD PTR $T3[rsp], 5
  006a3	73 02		 jae	 SHORT $LN30@readhdr_fa
  006a5	eb 05		 jmp	 SHORT $LN31@readhdr_fa
$LN30@readhdr_fa:
  006a7	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN31@readhdr_fa:
  006ac	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  006b4	c6 84 04 10 01
	00 00 00	 mov	 BYTE PTR sblklen$[rsp+rax], 0
  006bc	4c 8d 84 24 a4
	00 00 00	 lea	 r8, QWORD PTR xorblkl$[rsp]
  006c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169402
  006cb	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR sblklen$[rsp]
  006d3	e8 00 00 00 00	 call	 sscanf

; 261  : 
; 262  :     /* Verify header integrity using the XOR header field */
; 263  :     if ( (prvblkl ^ curblkl) != xorblkl )

  006d8	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR curblkl$[rsp]
  006df	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR prvblkl$[rsp]
  006e6	33 c8		 xor	 ecx, eax
  006e8	8b c1		 mov	 eax, ecx
  006ea	3b 84 24 a4 00
	00 00		 cmp	 eax, DWORD PTR xorblkl$[rsp]
  006f1	0f 84 33 01 00
	00		 je	 $LN6@readhdr_fa

; 264  :     {
; 265  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "readhdr_faketape()", blkpos, "block header damage");

  006f7	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00700	74 15		 je	 SHORT $LN32@readhdr_fa
  00702	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0070a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0070e	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv274[rsp], eax
  00715	eb 0b		 jmp	 SHORT $LN33@readhdr_fa
$LN32@readhdr_fa:
  00717	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv274[rsp], 0
$LN33@readhdr_fa:
  00722	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0072b	74 17		 je	 SHORT $LN34@readhdr_fa
  0072d	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00735	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00739	d1 f8		 sar	 eax, 1
  0073b	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv280[rsp], eax
  00742	eb 0b		 jmp	 SHORT $LN35@readhdr_fa
$LN34@readhdr_fa:
  00744	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
$LN35@readhdr_fa:
  0074f	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00757	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0075d	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv269[rsp], rax
  00765	b9 01 00 00 00	 mov	 ecx, 1
  0076a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00770	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169404
  00777	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0077c	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00784	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00789	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169405
  00790	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00795	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169406
  0079c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  007a1	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv269[rsp]
  007a9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  007ae	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv274[rsp]
  007b5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  007b9	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv280[rsp]
  007c0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  007c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169407
  007cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169408
  007d7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007e1	41 b9 03 00 00
	00		 mov	 r9d, 3
  007e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169409
  007ee	ba 09 01 00 00	 mov	 edx, 265		; 00000109H
  007f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169410
  007fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 266  : 
; 267  :         /* Set unit check with equipment check */
; 268  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  00800	44 0f b6 8c 24
	58 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00809	4c 8b 84 24 50
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00811	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00819	b9 02 00 00 00	 mov	 ecx, 2
  0081e	e8 00 00 00 00	 call	 build_senseX

; 269  :         return -1;

  00823	b8 ff ff ff ff	 mov	 eax, -1
  00828	eb 3e		 jmp	 SHORT $LN1@readhdr_fa
$LN6@readhdr_fa:

; 270  :     }
; 271  : 
; 272  :     /* Return the converted value(s) to the caller */
; 273  :     if (pprvblkl) *pprvblkl = prvblkl;

  0082a	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR pprvblkl$[rsp], 0
  00833	74 13		 je	 SHORT $LN7@readhdr_fa
  00835	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR pprvblkl$[rsp]
  0083d	0f b7 8c 24 9c
	00 00 00	 movzx	 ecx, WORD PTR prvblkl$[rsp]
  00845	66 89 08	 mov	 WORD PTR [rax], cx
$LN7@readhdr_fa:

; 274  :     if (pcurblkl) *pcurblkl = curblkl;

  00848	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR pcurblkl$[rsp], 0
  00851	74 13		 je	 SHORT $LN8@readhdr_fa
  00853	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pcurblkl$[rsp]
  0085b	0f b7 8c 24 a0
	00 00 00	 movzx	 ecx, WORD PTR curblkl$[rsp]
  00863	66 89 08	 mov	 WORD PTR [rax], cx
$LN8@readhdr_fa:

; 275  : 
; 276  :     /* Successful return */
; 277  :     return 0;

  00866	33 c0		 xor	 eax, eax
$LN1@readhdr_fa:
$LN9@readhdr_fa:

; 278  : 
; 279  : } /* end function readhdr_faketape */

  00868	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00870	48 33 cc	 xor	 rcx, rsp
  00873	e8 00 00 00 00	 call	 __security_check_cookie
  00878	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  0087f	c3		 ret	 0
readhdr_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
rc$ = 32
dev$ = 64
unitstat$ = 72
code$ = 80
bsf_faketape PROC

; 743  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@bsf_faketa:

; 744  : int             rc;                     /* Return code               */
; 745  : 
; 746  :     while (1)

  00013	33 c0		 xor	 eax, eax
  00015	83 f8 01	 cmp	 eax, 1
  00018	74 62		 je	 SHORT $LN3@bsf_faketa

; 747  :     {
; 748  :         /* Exit if now at start of tape */
; 749  :         if (dev->nxtblkpos == 0)

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0001f	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00027	75 21		 jne	 SHORT $LN4@bsf_faketa

; 750  :         {
; 751  :             build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  00029	44 0f b6 4c 24
	50		 movzx	 r9d, BYTE PTR code$[rsp]
  0002f	4c 8b 44 24 48	 mov	 r8, QWORD PTR unitstat$[rsp]
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR dev$[rsp]
  00039	b9 09 00 00 00	 mov	 ecx, 9
  0003e	e8 00 00 00 00	 call	 build_senseX

; 752  :             return -1;

  00043	b8 ff ff ff ff	 mov	 eax, -1
  00048	eb 34		 jmp	 SHORT $LN1@bsf_faketa
$LN4@bsf_faketa:

; 753  :         }
; 754  : 
; 755  :         /* Backspace to previous block position */
; 756  :         rc = bsb_faketape (dev, unitstat,code);

  0004a	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR code$[rsp]
  00050	48 8b 54 24 48	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0005a	e8 00 00 00 00	 call	 bsb_faketape
  0005f	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 757  :         if (rc < 0) return -1; /* (error message already issued) */

  00063	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00068	7d 07		 jge	 SHORT $LN5@bsf_faketa
  0006a	b8 ff ff ff ff	 mov	 eax, -1
  0006f	eb 0d		 jmp	 SHORT $LN1@bsf_faketa
$LN5@bsf_faketa:

; 758  : 
; 759  :         /* Exit loop if backspaced over a tapemark */
; 760  :         if (rc == 0) break;

  00071	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00076	75 02		 jne	 SHORT $LN6@bsf_faketa
  00078	eb 02		 jmp	 SHORT $LN3@bsf_faketa
$LN6@bsf_faketa:

; 761  : 
; 762  :     } /* end while */

  0007a	eb 97		 jmp	 SHORT $LN2@bsf_faketa
$LN3@bsf_faketa:

; 763  : 
; 764  :     /* Return normal status */
; 765  :     return 0;

  0007c	33 c0		 xor	 eax, eax
$LN1@bsf_faketa:

; 766  : 
; 767  : } /* end function bsf_faketape */

  0007e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00082	c3		 ret	 0
bsf_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
rc$ = 32
dev$ = 64
unitstat$ = 72
code$ = 80
fsf_faketape PROC

; 712  : {

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@fsf_faketa:

; 713  : int             rc;                     /* Return code               */
; 714  : 
; 715  :     while (1)

  00013	33 c0		 xor	 eax, eax
  00015	83 f8 01	 cmp	 eax, 1
  00018	74 32		 je	 SHORT $LN3@fsf_faketa

; 716  :     {
; 717  :         /* Forward space over next block */
; 718  :         rc = fsb_faketape (dev, unitstat,code);

  0001a	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR code$[rsp]
  00020	48 8b 54 24 48	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0002a	e8 00 00 00 00	 call	 fsb_faketape
  0002f	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 719  :         if (rc < 0) return -1; /* (error message already issued) */

  00033	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00038	7d 07		 jge	 SHORT $LN4@fsf_faketa
  0003a	b8 ff ff ff ff	 mov	 eax, -1
  0003f	eb 0d		 jmp	 SHORT $LN1@fsf_faketa
$LN4@fsf_faketa:

; 720  : 
; 721  :         /* Exit loop if spaced over a tapemark */
; 722  :         if (rc == 0) break;

  00041	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00046	75 02		 jne	 SHORT $LN5@fsf_faketa
  00048	eb 02		 jmp	 SHORT $LN3@fsf_faketa
$LN5@fsf_faketa:

; 723  : 
; 724  :     } /* end while */

  0004a	eb c7		 jmp	 SHORT $LN2@fsf_faketa
$LN3@fsf_faketa:

; 725  : 
; 726  :     /* Return normal status */
; 727  :     return 0;

  0004c	33 c0		 xor	 eax, eax
$LN1@fsf_faketa:

; 728  : 
; 729  : } /* end function fsf_faketape */

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
fsf_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
curblkl$ = 48
prvblkl$ = 52
rc$ = 56
blkpos$ = 64
dev$ = 96
unitstat$ = 104
code$ = 112
bsb_faketape PROC

; 665  : {

$LN6:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 666  : int             rc;                     /* Return code               */
; 667  : U16             curblkl;                /* Length of current block   */
; 668  : U16             prvblkl;                /* Length of previous block  */
; 669  : off_t           blkpos;                 /* Offset of block header    */
; 670  : 
; 671  :     /* Unit check if already at start of tape */
; 672  :     if (dev->nxtblkpos == 0)

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00018	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00020	75 24		 jne	 SHORT $LN2@bsb_faketa

; 673  :     {
; 674  :         build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  00022	44 0f b6 4c 24
	70		 movzx	 r9d, BYTE PTR code$[rsp]
  00028	4c 8b 44 24 68	 mov	 r8, QWORD PTR unitstat$[rsp]
  0002d	48 8b 54 24 60	 mov	 rdx, QWORD PTR dev$[rsp]
  00032	b9 09 00 00 00	 mov	 ecx, 9
  00037	e8 00 00 00 00	 call	 build_senseX

; 675  :         return -1;

  0003c	b8 ff ff ff ff	 mov	 eax, -1
  00041	e9 be 00 00 00	 jmp	 $LN1@bsb_faketa
$LN2@bsb_faketa:

; 676  :     }
; 677  : 
; 678  :     /* Backspace to previous block position */
; 679  :     blkpos = dev->prvblkpos;

  00046	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0004b	48 8b 80 10 10
	00 00		 mov	 rax, QWORD PTR [rax+4112]
  00052	48 89 44 24 40	 mov	 QWORD PTR blkpos$[rsp], rax

; 680  : 
; 681  :     /* Read the block header to obtain the block lengths */
; 682  :     rc = readhdr_faketape (dev, blkpos, &prvblkl, &curblkl, unitstat,code);

  00057	0f b6 44 24 70	 movzx	 eax, BYTE PTR code$[rsp]
  0005c	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00060	48 8b 44 24 68	 mov	 rax, QWORD PTR unitstat$[rsp]
  00065	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006a	4c 8d 4c 24 30	 lea	 r9, QWORD PTR curblkl$[rsp]
  0006f	4c 8d 44 24 34	 lea	 r8, QWORD PTR prvblkl$[rsp]
  00074	48 8b 54 24 40	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00079	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  0007e	e8 00 00 00 00	 call	 readhdr_faketape
  00083	89 44 24 38	 mov	 DWORD PTR rc$[rsp], eax

; 683  :     if (rc < 0) return -1; /* (error message already issued) */

  00087	83 7c 24 38 00	 cmp	 DWORD PTR rc$[rsp], 0
  0008c	7d 07		 jge	 SHORT $LN3@bsb_faketa
  0008e	b8 ff ff ff ff	 mov	 eax, -1
  00093	eb 6f		 jmp	 SHORT $LN1@bsb_faketa
$LN3@bsb_faketa:

; 684  : 
; 685  :     /* Calculate the offset of the previous block */
; 686  :     dev->prvblkpos = blkpos - sizeof(FAKETAPE_BLKHDR) - prvblkl;

  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR blkpos$[rsp]
  0009a	48 83 e8 0c	 sub	 rax, 12
  0009e	0f b7 4c 24 34	 movzx	 ecx, WORD PTR prvblkl$[rsp]
  000a3	48 2b c1	 sub	 rax, rcx
  000a6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  000ab	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 687  :     dev->nxtblkpos = blkpos;

  000b2	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR blkpos$[rsp]
  000bc	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 688  : 
; 689  :     /* Decrement current file number if backspaced over tapemark */
; 690  :     if (curblkl == 0)

  000c3	0f b7 44 24 30	 movzx	 eax, WORD PTR curblkl$[rsp]
  000c8	85 c0		 test	 eax, eax
  000ca	75 1b		 jne	 SHORT $LN4@bsb_faketa

; 691  :         dev->curfilen--;

  000cc	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000d1	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  000d8	66 ff c8	 dec	 ax
  000db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  000e0	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax
$LN4@bsb_faketa:

; 692  : 
; 693  :     /* Decrement the block number */
; 694  :     dev->blockid--;

  000e7	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000ec	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  000f2	ff c8		 dec	 eax
  000f4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  000f9	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 695  : 
; 696  :     /* Return block length or zero if tapemark */
; 697  :     return curblkl;

  000ff	0f b7 44 24 30	 movzx	 eax, WORD PTR curblkl$[rsp]
$LN1@bsb_faketa:

; 698  : 
; 699  : } /* end function bsb_faketape */

  00104	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00108	c3		 ret	 0
bsb_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
blklen$ = 48
rc$ = 52
blkpos$ = 56
dev$ = 80
unitstat$ = 88
code$ = 96
fsb_faketape PROC

; 625  : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 626  : int             rc;                     /* Return code               */
; 627  : off_t           blkpos;                 /* Offset of block header    */
; 628  : U16             blklen;                 /* Block length              */
; 629  : 
; 630  :     /* Initialize current block position */
; 631  :     blkpos = dev->nxtblkpos;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00018	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0001f	48 89 44 24 38	 mov	 QWORD PTR blkpos$[rsp], rax

; 632  : 
; 633  :     /* Read the block header to obtain the current block length */
; 634  :     rc = readhdr_faketape (dev, blkpos, NULL, &blklen, unitstat,code);

  00024	0f b6 44 24 60	 movzx	 eax, BYTE PTR code$[rsp]
  00029	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR unitstat$[rsp]
  00032	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00037	4c 8d 4c 24 30	 lea	 r9, QWORD PTR blklen$[rsp]
  0003c	45 33 c0	 xor	 r8d, r8d
  0003f	48 8b 54 24 38	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00049	e8 00 00 00 00	 call	 readhdr_faketape
  0004e	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 635  :     if (rc < 0) return -1; /* (error message already issued) */

  00052	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  00057	7d 07		 jge	 SHORT $LN2@fsb_faketa
  00059	b8 ff ff ff ff	 mov	 eax, -1
  0005e	eb 7e		 jmp	 SHORT $LN1@fsb_faketa
$LN2@fsb_faketa:

; 636  : 
; 637  :     /* Calculate the offset of the next block */
; 638  :     blkpos += sizeof(FAKETAPE_BLKHDR) + blklen;

  00060	0f b7 44 24 30	 movzx	 eax, WORD PTR blklen$[rsp]
  00065	48 8b 4c 24 38	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0006a	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  0006f	48 89 44 24 38	 mov	 QWORD PTR blkpos$[rsp], rax

; 639  : 
; 640  :     /* Calculate the offsets of the next and previous blocks */
; 641  :     dev->prvblkpos = dev->nxtblkpos;

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00079	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0007e	48 8b 89 08 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4104]
  00085	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx

; 642  :     dev->nxtblkpos = blkpos;

  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00091	48 8b 4c 24 38	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00096	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 643  : 
; 644  :     /* Increment current file number if tapemark was skipped */
; 645  :     if (blklen == 0)

  0009d	0f b7 44 24 30	 movzx	 eax, WORD PTR blklen$[rsp]
  000a2	85 c0		 test	 eax, eax
  000a4	75 1b		 jne	 SHORT $LN3@fsb_faketa

; 646  :         dev->curfilen++;

  000a6	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  000ab	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  000b2	66 ff c0	 inc	 ax
  000b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000ba	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax
$LN3@fsb_faketa:

; 647  : 
; 648  :     /* Increment the block number */
; 649  :     dev->blockid++;

  000c1	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  000c6	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  000cc	ff c0		 inc	 eax
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000d3	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 650  : 
; 651  :     /* Return block length or zero if tapemark */
; 652  :     return blklen;

  000d9	0f b7 44 24 30	 movzx	 eax, WORD PTR blklen$[rsp]
$LN1@fsb_faketa:

; 653  : 
; 654  : } /* end function fsb_faketape */

  000de	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e2	c3		 ret	 0
fsb_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
tv87 = 112
tv93 = 116
tv76 = 120
tv82 = 128
dev$ = 160
unitstat$ = 168
code$ = 176
sync_faketape PROC

; 593  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 594  :     /* Unit check if tape is write-protected */
; 595  :     if (dev->readonly)

  00016	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00024	d1 e8		 shr	 eax, 1
  00026	83 e0 01	 and	 eax, 1
  00029	85 c0		 test	 eax, eax
  0002b	74 2d		 je	 SHORT $LN2@sync_faket

; 596  :     {
; 597  :         build_senseX(TAPE_BSENSE_WRITEPROTECT,dev,unitstat,code);

  0002d	44 0f b6 8c 24
	b0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00036	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0003e	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00046	b9 06 00 00 00	 mov	 ecx, 6
  0004b	e8 00 00 00 00	 call	 build_senseX

; 598  :         return -1;

  00050	b8 ff ff ff ff	 mov	 eax, -1
  00055	e9 44 01 00 00	 jmp	 $LN1@sync_faket
$LN2@sync_faket:

; 599  :     }
; 600  : 
; 601  :     /* Perform sync. Return error on failure. */
; 602  :     if (fdatasync( dev->fd ) < 0)

  0005a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00062	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__commit
  0006e	85 c0		 test	 eax, eax
  00070	0f 8d 26 01 00
	00		 jge	 $LN3@sync_faket

; 603  :     {
; 604  :         /* Log the error */
; 605  :         WRMSG (HHC00205, "E", LCSS_DEVNUM, dev->filename, "fake", "fdatasync()", strerror(errno));

  00076	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0007f	74 12		 je	 SHORT $LN5@sync_faket
  00081	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00089	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0008d	89 44 24 70	 mov	 DWORD PTR tv87[rsp], eax
  00091	eb 08		 jmp	 SHORT $LN6@sync_faket
$LN5@sync_faket:
  00093	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN6@sync_faket:
  0009b	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000a4	74 14		 je	 SHORT $LN7@sync_faket
  000a6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ae	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 44 24 74	 mov	 DWORD PTR tv93[rsp], eax
  000b8	eb 08		 jmp	 SHORT $LN8@sync_faket
$LN7@sync_faket:
  000ba	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN8@sync_faket:
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000c8	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000d0	48 89 44 24 78	 mov	 QWORD PTR tv76[rsp], rax
  000d5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000dd	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  000e4	48 89 8c 24 80
	00 00 00	 mov	 QWORD PTR tv82[rsp], rcx
  000ec	b9 01 00 00 00	 mov	 ecx, 1
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv76[rsp]
  000fc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169581
  00108	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169582
  00114	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00119	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv82[rsp]
  00121	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00126	8b 4c 24 70	 mov	 ecx, DWORD PTR tv87[rsp]
  0012a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0012e	8b 4c 24 74	 mov	 ecx, DWORD PTR tv93[rsp]
  00132	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169583
  0013d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169584
  00149	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00153	41 b9 03 00 00
	00		 mov	 r9d, 3
  00159	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169585
  00160	ba 5d 02 00 00	 mov	 edx, 605		; 0000025dH
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169586
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 606  :         /* Set unit check with equipment check */
; 607  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00172	44 0f b6 8c 24
	b0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0017b	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00183	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0018b	b9 03 00 00 00	 mov	 ecx, 3
  00190	e8 00 00 00 00	 call	 build_senseX

; 608  :         return -1;

  00195	b8 ff ff ff ff	 mov	 eax, -1
  0019a	eb 02		 jmp	 SHORT $LN1@sync_faket
$LN3@sync_faket:

; 609  :     }
; 610  : 
; 611  :     /* Return normal status */
; 612  :     return 0;

  0019c	33 c0		 xor	 eax, eax
$LN1@sync_faket:

; 613  : 
; 614  : } /* end function sync_faketape */

  0019e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  001a5	c3		 ret	 0
sync_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
prvblkl$ = 112
rc$ = 116
blkpos$ = 120
tv130 = 128
tv136 = 132
tv195 = 136
tv201 = 140
rcoff$ = 144
tv86 = 152
tv93 = 160
tv183 = 168
tv190 = 176
dev$ = 208
unitstat$ = 216
code$ = 224
write_fakemark PROC

; 514  : {

$LN21:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 515  : int             rc;                     /* Return code               */
; 516  : off_t           rcoff;                  /* Return code from lseek()  */
; 517  : off_t           blkpos;                 /* Offset of block header    */
; 518  : U16             prvblkl;                /* Length of previous block  */
; 519  : 
; 520  :     /* Initialize current block position and previous block length */
; 521  :     blkpos = dev->nxtblkpos;

  00016	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001e	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  00025	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax

; 522  :     prvblkl = 0;

  0002a	33 c0		 xor	 eax, eax
  0002c	66 89 44 24 70	 mov	 WORD PTR prvblkl$[rsp], ax

; 523  : 
; 524  :     /* Determine previous block length if not at start of tape */
; 525  :     if (dev->nxtblkpos > 0)

  00031	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00039	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00041	7e 70		 jle	 SHORT $LN5@write_fake

; 526  :     {
; 527  :         /* Retrieve the previous block length */
; 528  :         rc = readhdr_faketape (dev, dev->prvblkpos, NULL, &prvblkl, unitstat,code);

  00043	0f b6 84 24 e0
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  0004b	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0004f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	4c 8d 4c 24 70	 lea	 r9, QWORD PTR prvblkl$[rsp]
  00061	45 33 c0	 xor	 r8d, r8d
  00064	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0006c	48 8b 90 10 10
	00 00		 mov	 rdx, QWORD PTR [rax+4112]
  00073	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0007b	e8 00 00 00 00	 call	 readhdr_faketape
  00080	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 529  :         if (rc < 0) return -1;

  00084	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00089	7d 0a		 jge	 SHORT $LN6@write_fake
  0008b	b8 ff ff ff ff	 mov	 eax, -1
  00090	e9 18 04 00 00	 jmp	 $LN1@write_fake
$LN6@write_fake:

; 530  : 
; 531  :         /* Recalculate the offset of the next block */
; 532  :         blkpos = dev->prvblkpos + sizeof(FAKETAPE_BLKHDR) + prvblkl;

  00095	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009d	48 8b 80 10 10
	00 00		 mov	 rax, QWORD PTR [rax+4112]
  000a4	0f b7 4c 24 70	 movzx	 ecx, WORD PTR prvblkl$[rsp]
  000a9	48 8d 44 08 0c	 lea	 rax, QWORD PTR [rax+rcx+12]
  000ae	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax
$LN5@write_fake:

; 533  :     }
; 534  : 
; 535  :     /* Reposition file to the new block header */
; 536  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  000b3	45 33 c0	 xor	 r8d, r8d
  000b6	48 8b 54 24 78	 mov	 rdx, QWORD PTR blkpos$[rsp]
  000bb	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000c3	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  000cf	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 537  :     if (rcoff < 0)

  000d7	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  000e0	0f 8d 4b 01 00
	00		 jge	 $LN7@write_fake

; 538  :     {
; 539  :         /* Handle seek error condition */
; 540  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "lseek()", blkpos, strerror(errno));

  000e6	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000ef	74 15		 je	 SHORT $LN13@write_fake
  000f1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000fd	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv130[rsp], eax
  00104	eb 0b		 jmp	 SHORT $LN14@write_fake
$LN13@write_fake:
  00106	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv130[rsp], 0
$LN14@write_fake:
  00111	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0011a	74 17		 je	 SHORT $LN15@write_fake
  0011c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00124	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00128	d1 f8		 sar	 eax, 1
  0012a	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv136[rsp], eax
  00131	eb 0b		 jmp	 SHORT $LN16@write_fake
$LN15@write_fake:
  00133	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv136[rsp], 0
$LN16@write_fake:
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00144	8b 08		 mov	 ecx, DWORD PTR [rax]
  00146	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0014c	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv86[rsp], rax
  00154	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0015c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00163	48 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR tv93[rsp], rcx
  0016b	b9 01 00 00 00	 mov	 ecx, 1
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00176	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv86[rsp]
  0017e	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00183	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00188	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169556
  00194	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00199	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169557
  001a0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001a5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv93[rsp]
  001ad	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001b2	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv130[rsp]
  001b9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001bd	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv136[rsp]
  001c4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169558
  001cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169559
  001db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  001eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169560
  001f2	ba 1c 02 00 00	 mov	 edx, 540		; 0000021cH
  001f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169561
  001fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 541  : 
; 542  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00204	44 0f b6 8c 24
	e0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0020d	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00215	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0021d	b9 0e 00 00 00	 mov	 ecx, 14
  00222	e8 00 00 00 00	 call	 build_senseX

; 543  :         return -1;

  00227	b8 ff ff ff ff	 mov	 eax, -1
  0022c	e9 7c 02 00 00	 jmp	 $LN1@write_fake
$LN7@write_fake:

; 544  :     }
; 545  :     /* ISW: Determine if we are passed maxsize */
; 546  :     if(dev->tdparms.maxsize>0)

  00231	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00239	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  00241	7e 51		 jle	 SHORT $LN8@write_fake

; 547  :     {
; 548  :         if((off_t)(dev->nxtblkpos+sizeof(FAKETAPE_BLKHDR)) > dev->tdparms.maxsize)

  00243	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0024b	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  00252	48 83 c0 0c	 add	 rax, 12
  00256	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0025e	48 3b 81 38 10
	00 00		 cmp	 rax, QWORD PTR [rcx+4152]
  00265	7e 2d		 jle	 SHORT $LN9@write_fake

; 549  :         {
; 550  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  00267	44 0f b6 8c 24
	e0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00270	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00278	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00280	b9 08 00 00 00	 mov	 ecx, 8
  00285	e8 00 00 00 00	 call	 build_senseX

; 551  :             return -1;

  0028a	b8 ff ff ff ff	 mov	 eax, -1
  0028f	e9 19 02 00 00	 jmp	 $LN1@write_fake
$LN9@write_fake:
$LN8@write_fake:

; 552  :         }
; 553  :     }
; 554  :     /* ISW: End of virtual physical EOT determination */
; 555  : 
; 556  :     /* Write the block header */
; 557  :     rc = writehdr_faketape (dev, rcoff, prvblkl, 0, unitstat, code);

  00294	0f b6 84 24 e0
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  0029c	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  002a0	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  002a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ad	45 33 c9	 xor	 r9d, r9d
  002b0	44 0f b7 44 24
	70		 movzx	 r8d, WORD PTR prvblkl$[rsp]
  002b6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR rcoff$[rsp]
  002be	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002c6	e8 00 00 00 00	 call	 writehdr_faketape
  002cb	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 558  :     if (rc < 0) return -1; /* (error message already issued) */

  002cf	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  002d4	7d 0a		 jge	 SHORT $LN10@write_fake
  002d6	b8 ff ff ff ff	 mov	 eax, -1
  002db	e9 cd 01 00 00	 jmp	 $LN1@write_fake
$LN10@write_fake:

; 559  : 
; 560  :     /* Increment the block number */
; 561  :     dev->blockid++;

  002e0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002e8	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  002ee	ff c0		 inc	 eax
  002f0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002f8	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 562  : 
; 563  :     /* Calculate the offsets of the next and previous blocks */
; 564  :     dev->nxtblkpos = blkpos + sizeof(FAKETAPE_BLKHDR);

  002fe	48 8b 44 24 78	 mov	 rax, QWORD PTR blkpos$[rsp]
  00303	48 83 c0 0c	 add	 rax, 12
  00307	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0030f	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 565  :     dev->prvblkpos = blkpos;

  00316	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0031e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00323	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx
$LN4@write_fake:

; 566  : 
; 567  :     /* Set new physical EOF */
; 568  :     do rc = ftruncate( dev->fd, dev->nxtblkpos );

  0032a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00332	48 8b 90 08 10
	00 00		 mov	 rdx, QWORD PTR [rax+4104]
  00339	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00341	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  0034d	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 569  :     while (EINTR == rc);

  00351	83 7c 24 74 04	 cmp	 DWORD PTR rc$[rsp], 4
  00356	74 d2		 je	 SHORT $LN4@write_fake

; 570  : 
; 571  :     if (rc != 0)

  00358	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0035d	0f 84 48 01 00
	00		 je	 $LN11@write_fake

; 572  :     {
; 573  :         /* Handle write error condition */
; 574  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "fake", "ftruncate()", blkpos, strerror(errno));

  00363	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0036c	74 15		 je	 SHORT $LN17@write_fake
  0036e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00376	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0037a	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv195[rsp], eax
  00381	eb 0b		 jmp	 SHORT $LN18@write_fake
$LN17@write_fake:
  00383	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv195[rsp], 0
$LN18@write_fake:
  0038e	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00397	74 17		 je	 SHORT $LN19@write_fake
  00399	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003a1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003a5	d1 f8		 sar	 eax, 1
  003a7	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv201[rsp], eax
  003ae	eb 0b		 jmp	 SHORT $LN20@write_fake
$LN19@write_fake:
  003b0	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv201[rsp], 0
$LN20@write_fake:
  003bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  003c1	8b 08		 mov	 ecx, DWORD PTR [rax]
  003c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003c9	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv183[rsp], rax
  003d1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003d9	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  003e0	48 89 8c 24 b0
	00 00 00	 mov	 QWORD PTR tv190[rsp], rcx
  003e8	b9 01 00 00 00	 mov	 ecx, 1
  003ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003f3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv183[rsp]
  003fb	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00400	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00405	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169566
  00411	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169567
  0041d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00422	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv190[rsp]
  0042a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0042f	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv195[rsp]
  00436	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0043a	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv201[rsp]
  00441	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00445	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169568
  0044c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169569
  00458	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0045d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00462	41 b9 03 00 00
	00		 mov	 r9d, 3
  00468	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169570
  0046f	ba 3e 02 00 00	 mov	 edx, 574		; 0000023eH
  00474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169571
  0047b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 575  : 
; 576  :         /* Set unit check with equipment check */
; 577  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00481	44 0f b6 8c 24
	e0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0048a	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00492	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0049a	b9 03 00 00 00	 mov	 ecx, 3
  0049f	e8 00 00 00 00	 call	 build_senseX

; 578  :         return -1;

  004a4	b8 ff ff ff ff	 mov	 eax, -1
  004a9	eb 02		 jmp	 SHORT $LN1@write_fake
$LN11@write_fake:

; 579  :     }
; 580  : 
; 581  :     /* Return normal status */
; 582  :     return 0;

  004ab	33 c0		 xor	 eax, eax
$LN1@write_fake:

; 583  : 
; 584  : } /* end function write_fakemark */

  004ad	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  004b4	c3		 ret	 0
write_fakemark ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
rcoff$ = 32
dev$ = 64
unitstat$ = 72
code$ = 80
rewind_faketape PROC

; 57   : {

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 58   :     off_t rcoff;
; 59   :     rcoff=lseek(dev->fd,0,SEEK_SET);

  00013	45 33 c0	 xor	 r8d, r8d
  00016	33 d2		 xor	 edx, edx
  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0001d	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00029	48 89 44 24 20	 mov	 QWORD PTR rcoff$[rsp], rax

; 60   :     if(rcoff<0)

  0002e	48 83 7c 24 20
	00		 cmp	 QWORD PTR rcoff$[rsp], 0
  00034	7d 21		 jge	 SHORT $LN2@rewind_fak

; 61   :     {
; 62   :         build_senseX(TAPE_BSENSE_REWINDFAILED,dev,unitstat,code);

  00036	44 0f b6 4c 24
	50		 movzx	 r9d, BYTE PTR code$[rsp]
  0003c	4c 8b 44 24 48	 mov	 r8, QWORD PTR unitstat$[rsp]
  00041	48 8b 54 24 40	 mov	 rdx, QWORD PTR dev$[rsp]
  00046	b9 13 00 00 00	 mov	 ecx, 19
  0004b	e8 00 00 00 00	 call	 build_senseX

; 63   :         return -1;

  00050	b8 ff ff ff ff	 mov	 eax, -1
  00055	eb 5b		 jmp	 SHORT $LN1@rewind_fak
$LN2@rewind_fak:

; 64   :     }
; 65   :     dev->nxtblkpos=0;

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0005c	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 66   :     dev->prvblkpos=-1;

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0006c	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 67   :     dev->curfilen=1;

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00081	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 68   :     dev->blockid=0;

  00088	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0008d	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 69   :     dev->fenced = 0;

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0009c	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  000a2	83 e0 fe	 and	 eax, -2			; fffffffeH
  000a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000aa	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 70   :     return 0;

  000b0	33 c0		 xor	 eax, eax
$LN1@rewind_fak:

; 71   : }

  000b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b6	c3		 ret	 0
rewind_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
dev$ = 8
passedeot_faketape PROC

; 78   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 79   :     if(dev->nxtblkpos==0)

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  0000a	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00012	75 20		 jne	 SHORT $LN2@passedeot_

; 80   :     {
; 81   :         dev->eotwarning = 0;

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00019	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0001f	83 e0 df	 and	 eax, -33		; ffffffdfH
  00022	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00027	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 82   :         return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 8d 00 00 00	 jmp	 $LN1@passedeot_
$LN2@passedeot_:

; 83   :     }
; 84   :     if(dev->tdparms.maxsize==0)

  00034	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00039	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  00041	75 1d		 jne	 SHORT $LN3@passedeot_

; 85   :     {
; 86   :         dev->eotwarning = 0;

  00043	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00048	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0004e	83 e0 df	 and	 eax, -33		; ffffffdfH
  00051	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00056	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 87   :         return 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	eb 61		 jmp	 SHORT $LN1@passedeot_
$LN3@passedeot_:

; 88   :     }
; 89   :     if(dev->nxtblkpos + dev->eotmargin > dev->tdparms.maxsize)

  00060	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00065	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0006c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00071	48 03 81 70 10
	00 00		 add	 rax, QWORD PTR [rcx+4208]
  00078	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  0007d	48 3b 81 38 10
	00 00		 cmp	 rax, QWORD PTR [rcx+4152]
  00084	7e 20		 jle	 SHORT $LN4@passedeot_

; 90   :     {
; 91   :         dev->eotwarning = 1;

  00086	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  0008b	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00091	83 c8 20	 or	 eax, 32			; 00000020H
  00094	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00099	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 92   :         return 1;

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	eb 1b		 jmp	 SHORT $LN1@passedeot_
$LN4@passedeot_:

; 93   :     }
; 94   :     dev->eotwarning = 0;

  000a6	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  000ab	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  000b1	83 e0 df	 and	 eax, -33		; ffffffdfH
  000b4	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  000b9	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 95   :     return 0;

  000bf	33 c0		 xor	 eax, eax
$LN1@passedeot_:

; 96   : }

  000c1	c3		 ret	 0
passedeot_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
tv72 = 96
tv78 = 100
tv67 = 104
dev$ = 128
close_faketape PROC

; 39   : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 40   :     if( dev->fd >= 0 )

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00011	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00018	0f 8c e0 00 00
	00		 jl	 $LN2@close_fake

; 41   :     {
; 42   :         WRMSG (HHC00201, "I", LCSS_DEVNUM, dev->filename, "fake");

  0001e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00027	74 12		 je	 SHORT $LN4@close_fake
  00029	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00031	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00035	89 44 24 60	 mov	 DWORD PTR tv72[rsp], eax
  00039	eb 08		 jmp	 SHORT $LN5@close_fake
$LN4@close_fake:
  0003b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN5@close_fake:
  00043	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0004c	74 14		 je	 SHORT $LN6@close_fake
  0004e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00056	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0005a	d1 f8		 sar	 eax, 1
  0005c	89 44 24 64	 mov	 DWORD PTR tv78[rsp], eax
  00060	eb 08		 jmp	 SHORT $LN7@close_fake
$LN6@close_fake:
  00062	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN7@close_fake:
  0006a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00072	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00078	48 89 44 24 68	 mov	 QWORD PTR tv67[rsp], rax
  0007d	b9 01 00 00 00	 mov	 ecx, 1
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169289
  0008f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00094	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv67[rsp]
  00099	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0009e	8b 4c 24 60	 mov	 ecx, DWORD PTR tv72[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 64	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169290
  000b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169291
  000c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169292
  000d8	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169293
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 43   :         close(dev->fd);

  000ea	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f2	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN2@close_fake:

; 44   :     }
; 45   :     STRLCPY( dev->filename, TAPE_UNLOADED );

  000fe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00106	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0010c	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169294
  00119	48 8b c8	 mov	 rcx, rax
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 46   :     dev->fd=-1;

  00122	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012a	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 47   :     dev->blockid = 0;

  00134	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0013c	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 48   :     dev->fenced = 0;

  00146	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0014e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00154	83 e0 fe	 and	 eax, -2			; fffffffeH
  00157	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0015f	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 49   :     return;
; 50   : }

  00165	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00169	c3		 ret	 0
close_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\faketape.c
_TEXT	SEGMENT
rc$ = 112
ret_code$1 = 116
tv135 = 120
tv141 = 124
tv192 = 128
tv198 = 132
tmp_fd$2 = 136
tv130 = 144
tv181 = 152
tv187 = 160
pathname$ = 176
__$ArrayPad$ = 448
dev$ = 480
unitstat$ = 488
code$ = 496
open_faketape PROC

; 109  : {

$LN21:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 110  :     int   rc = -1;                      /* Return code               */

  00028	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 111  :     char  pathname[MAX_PATH];           /* file path in host format  */
; 112  : 
; 113  :     /* Check for no tape in drive */
; 114  : 
; 115  :     if (strcmp( dev->filename, TAPE_UNLOADED ) == 0)

  00030	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00038	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169322
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 strcmp
  0004d	85 c0		 test	 eax, eax
  0004f	75 2a		 jne	 SHORT $LN2@open_faket

; 116  :     {
; 117  :         build_senseX( TAPE_BSENSE_TAPEUNLOADED, dev, unitstat, code );

  00051	44 0f b6 8c 24
	f0 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0005a	4c 8b 84 24 e8
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00062	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0006a	33 c9		 xor	 ecx, ecx
  0006c	e8 00 00 00 00	 call	 build_senseX

; 118  :         return -1;

  00071	b8 ff ff ff ff	 mov	 eax, -1
  00076	e9 38 04 00 00	 jmp	 $LN1@open_faket
$LN2@open_faket:

; 119  :     }
; 120  : 
; 121  :     /* Open the FAKETAPE file */
; 122  : 
; 123  :     hostpath( pathname, dev->filename, sizeof( pathname ));

  0007b	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00083	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00089	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0008f	48 8b d0	 mov	 rdx, rax
  00092	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 124  : 
; 125  :     if (!dev->tdparms.logical_readonly)

  000a0	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a8	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  000ae	c1 e8 0b	 shr	 eax, 11
  000b1	83 e0 01	 and	 eax, 1
  000b4	85 c0		 test	 eax, eax
  000b6	0f 85 db 01 00
	00		 jne	 $LN3@open_faket

; 126  :     {
; 127  :         rc = HOPEN( pathname, O_RDWR | O_BINARY,

  000bc	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  000c2	ba 02 80 00 00	 mov	 edx, 32770		; 00008002H
  000c7	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  000d5	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 128  :             S_IRUSR | S_IWUSR | S_IRGRP );
; 129  : 
; 130  :         if (rc < 0 && sysblk.auto_tape_create)

  000d9	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  000de	0f 8d b3 01 00
	00		 jge	 $LN4@open_faket
  000e4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000eb	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000f1	c1 e8 13	 shr	 eax, 19
  000f4	83 e0 01	 and	 eax, 1
  000f7	85 c0		 test	 eax, eax
  000f9	0f 84 98 01 00
	00		 je	 $LN4@open_faket

; 131  :         {
; 132  :             /* Automatically create the missing tape file */
; 133  :             rc = HOPEN( pathname, O_RDWR | O_BINARY | O_CREAT,

  000ff	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  00105	ba 02 81 00 00	 mov	 edx, 33026		; 00008102H
  0010a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00118	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 134  :                 S_IRUSR | S_IWUSR | S_IRGRP );
; 135  : 
; 136  :             if (rc >= 0)

  0011c	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00121	0f 8c 70 01 00
	00		 jl	 $LN5@open_faket

; 137  :             {
; 138  :                 int tmp_fd = dev->fd;

  00127	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012f	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  00135	89 84 24 88 00
	00 00		 mov	 DWORD PTR tmp_fd$2[rsp], eax

; 139  :                 int ret_code = 0;

  0013c	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR ret_code$1[rsp], 0

; 140  :                 dev->fd = rc;

  00144	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0014c	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  00150	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx

; 141  : 
; 142  :                 // "%1d:%04X Tape file %s, type %s: tape created"
; 143  :                 WRMSG( HHC00235, "I", LCSS_DEVNUM,

  00156	48 83 bc 24 e0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0015f	74 12		 je	 SHORT $LN13@open_faket
  00161	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00169	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0016d	89 44 24 78	 mov	 DWORD PTR tv135[rsp], eax
  00171	eb 08		 jmp	 SHORT $LN14@open_faket
$LN13@open_faket:
  00173	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN14@open_faket:
  0017b	48 83 bc 24 e0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00184	74 14		 je	 SHORT $LN15@open_faket
  00186	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0018e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00192	d1 f8		 sar	 eax, 1
  00194	89 44 24 7c	 mov	 DWORD PTR tv141[rsp], eax
  00198	eb 08		 jmp	 SHORT $LN16@open_faket
$LN15@open_faket:
  0019a	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN16@open_faket:
  001a2	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001aa	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  001b0	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
  001b8	b9 01 00 00 00	 mov	 ecx, 1
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169326
  001ca	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001cf	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv130[rsp]
  001d7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001dc	8b 4c 24 78	 mov	 ecx, DWORD PTR tv135[rsp]
  001e0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001e4	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv141[rsp]
  001e8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169327
  001f3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169328
  001ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00204	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00209	41 b9 03 00 00
	00		 mov	 r9d, 3
  0020f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169329
  00216	ba 90 00 00 00	 mov	 edx, 144		; 00000090H
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169330
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 144  :                     dev->filename, "fake" );
; 145  : 
; 146  :                 /* Write two tapemarks */
; 147  :                 ret_code = write_fakemark( dev, unitstat, code );

  00228	44 0f b6 84 24
	f0 01 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00231	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00239	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00241	e8 00 00 00 00	 call	 write_fakemark
  00246	89 44 24 74	 mov	 DWORD PTR ret_code$1[rsp], eax

; 148  : 
; 149  :                 if (ret_code >= 0)

  0024a	83 7c 24 74 00	 cmp	 DWORD PTR ret_code$1[rsp], 0
  0024f	7c 22		 jl	 SHORT $LN6@open_faket

; 150  :                     ret_code = write_fakemark( dev, unitstat, code );

  00251	44 0f b6 84 24
	f0 01 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  0025a	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00262	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0026a	e8 00 00 00 00	 call	 write_fakemark
  0026f	89 44 24 74	 mov	 DWORD PTR ret_code$1[rsp], eax
$LN6@open_faket:

; 151  : 
; 152  :                 if (ret_code < 0)

  00273	83 7c 24 74 00	 cmp	 DWORD PTR ret_code$1[rsp], 0
  00278	7d 1d		 jge	 SHORT $LN7@open_faket

; 153  :                 {
; 154  :                     dev->fd = tmp_fd;

  0027a	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00282	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tmp_fd$2[rsp]
  00289	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx

; 155  :                     rc = ret_code;

  0028f	8b 44 24 74	 mov	 eax, DWORD PTR ret_code$1[rsp]
  00293	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax
$LN7@open_faket:
$LN5@open_faket:
$LN4@open_faket:
$LN3@open_faket:

; 156  :                 }
; 157  :             }
; 158  :         }
; 159  : 
; 160  :     }
; 161  : 
; 162  :     /* If file is read-only open it again with read-only access */
; 163  :     if (0
; 164  :         || dev->tdparms.logical_readonly
; 165  :         || (rc < 0 && (EROFS == errno || EACCES == errno))

  00297	33 c0		 xor	 eax, eax
  00299	85 c0		 test	 eax, eax
  0029b	75 35		 jne	 SHORT $LN9@open_faket
  0029d	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002a5	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  002ab	c1 e8 0b	 shr	 eax, 11
  002ae	83 e0 01	 and	 eax, 1
  002b1	85 c0		 test	 eax, eax
  002b3	75 1d		 jne	 SHORT $LN9@open_faket
  002b5	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  002ba	7d 52		 jge	 SHORT $LN8@open_faket
  002bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002c2	83 38 1e	 cmp	 DWORD PTR [rax], 30
  002c5	74 0b		 je	 SHORT $LN10@open_faket
  002c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002cd	83 38 0d	 cmp	 DWORD PTR [rax], 13
  002d0	75 3c		 jne	 SHORT $LN8@open_faket
$LN10@open_faket:
$LN9@open_faket:

; 166  :     )
; 167  :     {
; 168  :         dev->readonly = 1;

  002d2	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002da	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  002e0	83 c8 02	 or	 eax, 2
  002e3	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002eb	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 169  :         rc = HOPEN( pathname, O_RDONLY | O_BINARY, S_IRUSR | S_IRGRP );

  002f1	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  002f7	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  002fc	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00304	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  0030a	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax
$LN8@open_faket:

; 170  :     }
; 171  : 
; 172  :     /* Check for open failure */
; 173  : 
; 174  :     if (rc < 0)

  0030e	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00313	0f 8d 62 01 00
	00		 jge	 $LN11@open_faket

; 175  :     {
; 176  :         // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 177  :         WRMSG (HHC00205, "E", LCSS_DEVNUM, dev->filename, "fake", "open()", strerror(errno));

  00319	48 83 bc 24 e0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00322	74 15		 je	 SHORT $LN17@open_faket
  00324	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0032c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00330	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv192[rsp], eax
  00337	eb 0b		 jmp	 SHORT $LN18@open_faket
$LN17@open_faket:
  00339	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv192[rsp], 0
$LN18@open_faket:
  00344	48 83 bc 24 e0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0034d	74 17		 je	 SHORT $LN19@open_faket
  0034f	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00357	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0035b	d1 f8		 sar	 eax, 1
  0035d	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv198[rsp], eax
  00364	eb 0b		 jmp	 SHORT $LN20@open_faket
$LN19@open_faket:
  00366	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv198[rsp], 0
$LN20@open_faket:
  00371	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00377	8b 08		 mov	 ecx, DWORD PTR [rax]
  00379	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0037f	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv181[rsp], rax
  00387	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0038f	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00396	48 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR tv187[rsp], rcx
  0039e	b9 01 00 00 00	 mov	 ecx, 1
  003a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv181[rsp]
  003b1	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  003b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169337
  003bd	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  003c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169338
  003c9	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003ce	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv187[rsp]
  003d6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003db	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv192[rsp]
  003e2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003e6	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv198[rsp]
  003ed	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169339
  003f8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169340
  00404	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00409	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00414	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169341
  0041b	ba b1 00 00 00	 mov	 edx, 177		; 000000b1H
  00420	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169342
  00427	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 178  : 
; 179  :         STRLCPY( dev->filename, TAPE_UNLOADED );

  0042d	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00435	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0043b	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00441	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169343
  00448	48 8b c8	 mov	 rcx, rax
  0044b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 180  :         build_senseX(TAPE_BSENSE_TAPELOADFAIL,dev,unitstat,code);

  00451	44 0f b6 8c 24
	f0 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0045a	4c 8b 84 24 e8
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00462	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0046a	b9 01 00 00 00	 mov	 ecx, 1
  0046f	e8 00 00 00 00	 call	 build_senseX

; 181  :         return -1;

  00474	b8 ff ff ff ff	 mov	 eax, -1
  00479	eb 38		 jmp	 SHORT $LN1@open_faket
$LN11@open_faket:

; 182  :     }
; 183  : 
; 184  :     /* Open success. Save file descriptor and rewind to load-point */
; 185  : 
; 186  :     dev->fd = rc;

  0047b	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00483	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  00487	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx

; 187  :     rc = rewind_faketape( dev, unitstat, code );

  0048d	44 0f b6 84 24
	f0 01 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00496	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  0049e	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004a6	e8 00 00 00 00	 call	 rewind_faketape
  004ab	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 188  :     return rc;

  004af	8b 44 24 70	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@open_faket:

; 189  : 
; 190  : } /* end function open_faketape */

  004b3	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004bb	48 33 cc	 xor	 rcx, rsp
  004be	e8 00 00 00 00	 call	 __security_check_cookie
  004c3	48 81 c4 d8 01
	00 00		 add	 rsp, 472		; 000001d8H
  004ca	c3		 ret	 0
open_faketape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
