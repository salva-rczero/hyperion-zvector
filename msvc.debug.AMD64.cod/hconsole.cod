; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsnprintf
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_snprintf
PUBLIC	set_screen_color
PUBLIC	set_screen_pos
PUBLIC	clear_screen
PUBLIC	erase_to_eol
PUBLIC	set_or_reset_console_mode
PUBLIC	translate_keystroke
PUBLIC	console_beep
PUBLIC	get_console_dim
PUBLIC	get_cursor_pos
PUBLIC	set_console_cursor_shape
PUBLIC	w32_set_console_title
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_MessageBeep:PROC
EXTRN	__imp_GetConsoleMode:PROC
EXTRN	__imp_SetConsoleMode:PROC
EXTRN	__imp_FillConsoleOutputCharacterA:PROC
EXTRN	__imp_FillConsoleOutputAttribute:PROC
EXTRN	__imp_SetConsoleCursorInfo:PROC
EXTRN	__imp_GetConsoleScreenBufferInfo:PROC
EXTRN	__imp_SetConsoleCursorPosition:PROC
EXTRN	__imp_SetConsoleTextAttribute:PROC
EXTRN	__imp_GetConsoleTitleA:PROC
EXTRN	__imp_SetConsoleTitleA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_getch:PROC
EXTRN	__imp_kbhit:PROC
EXTRN	__imp__get_osfhandle:PROC
EXTRN	__imp__isatty:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
g_dwConsoleInputMode DD 01H DUP (?)
g_dwConsoleOutputMode DD 01H DUP (?)
g_wDefaultAttrib DW 01H DUP (?)
	ALIGN	4

g_szOriginalTitle DB 0100H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$_vsnprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_snprintf DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$_snprintf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$set_screen_color DD imagerel $LN24
	DD	imagerel $LN24+401
	DD	imagerel $unwind$set_screen_color
$pdata$set_screen_pos DD imagerel $LN35
	DD	imagerel $LN35+600
	DD	imagerel $unwind$set_screen_pos
$pdata$clear_screen DD imagerel $LN60
	DD	imagerel $LN60+925
	DD	imagerel $unwind$clear_screen
$pdata$erase_to_eol DD imagerel $LN42
	DD	imagerel $LN42+687
	DD	imagerel $unwind$erase_to_eol
$pdata$set_or_reset_console_mode DD imagerel $LN80
	DD	imagerel $LN80+1121
	DD	imagerel $unwind$set_or_reset_console_mode
$pdata$translate_keystroke DD imagerel $LN81
	DD	imagerel $LN81+2082
	DD	imagerel $unwind$translate_keystroke
$pdata$console_beep DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$console_beep
$pdata$get_console_dim DD imagerel $LN17
	DD	imagerel $LN17+383
	DD	imagerel $unwind$get_console_dim
$pdata$get_cursor_pos DD imagerel $LN20
	DD	imagerel $LN20+359
	DD	imagerel $unwind$get_cursor_pos
$pdata$set_console_cursor_shape DD imagerel $LN18
	DD	imagerel $LN18+310
	DD	imagerel $unwind$set_console_cursor_shape
$pdata$w32_set_console_title DD imagerel $LN18
	DD	imagerel $LN18+363
	DD	imagerel $unwind$w32_set_console_title
$pdata$W32_COLOR DD imagerel W32_COLOR
	DD	imagerel W32_COLOR+284
	DD	imagerel $unwind$W32_COLOR
pdata	ENDS
_DATA	SEGMENT
$SG159183 DB	'set_or_reset_console_mode', 00H
	ORG $+6
$SG159184 DB	'hconsole.c', 00H
	ORG $+5
$SG159185 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159187 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159603 DB	01bH, '[A', 00H
$SG159188 DB	'hconsole.c', 00H
	ORG $+5
$SG159312 DB	'set_screen_color', 00H
	ORG $+7
$SG159189 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159193 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159605 DB	01bH, '[B', 00H
$SG159194 DB	'hconsole.c', 00H
	ORG $+5
$SG159316 DB	'set_screen_color', 00H
	ORG $+7
$SG159195 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159197 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159607 DB	01bH, '[C', 00H
$SG159198 DB	'hconsole.c', 00H
	ORG $+5
$SG159321 DB	'set_screen_color', 00H
	ORG $+7
$SG159199 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159204 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159609 DB	01bH, '[D', 00H
$SG159205 DB	'hconsole.c', 00H
	ORG $+5
$SG159325 DB	'set_screen_color', 00H
	ORG $+7
$SG159206 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159208 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159611 DB	01bH, 'w', 00H
	ORG $+1
$SG159209 DB	'hconsole.c', 00H
	ORG $+5
$SG159365 DB	'set_screen_pos', 00H
	ORG $+1
$SG159591 DB	01bH, '[1~', 00H
	ORG $+3
$SG159210 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159213 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159613 DB	01bH, 'u', 00H
	ORG $+1
$SG159214 DB	'hconsole.c', 00H
	ORG $+5
$SG159369 DB	'set_screen_pos', 00H
	ORG $+1
$SG159593 DB	01bH, '[2~', 00H
	ORG $+3
$SG159215 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159217 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159615 DB	01bH, 'D', 00H
	ORG $+1
$SG159218 DB	'hconsole.c', 00H
	ORG $+5
$SG159374 DB	'set_screen_pos', 00H
	ORG $+1
$SG159595 DB	01bH, '[3~', 00H
	ORG $+3
$SG159219 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159222 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159617 DB	01bH, 'M', 00H
	ORG $+1
$SG159223 DB	'hconsole.c', 00H
	ORG $+5
$SG159378 DB	'set_screen_pos', 00H
	ORG $+1
$SG159597 DB	01bH, '[4~', 00H
	ORG $+3
$SG159224 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159226 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159619 DB	01bH, 'OA', 00H
$SG159227 DB	'hconsole.c', 00H
	ORG $+5
$SG159385 DB	'set_screen_pos', 00H
	ORG $+1
$SG159599 DB	01bH, '[5~', 00H
	ORG $+3
$SG159228 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159231 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159621 DB	01bH, 'OB', 00H
$SG159232 DB	'hconsole.c', 00H
	ORG $+5
$SG159389 DB	'set_screen_pos', 00H
	ORG $+1
$SG159601 DB	01bH, '[6~', 00H
	ORG $+3
$SG159233 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159235 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159623 DB	01bH, 'OC', 00H
$SG159236 DB	'hconsole.c', 00H
	ORG $+5
$SG159445 DB	'clear_screen', 00H
	ORG $+3
$SG159625 DB	01bH, 'OD', 00H
	ORG $+4
$SG159237 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159240 DB	'set_or_reset_console_mode', 00H
	ORG $+2
$SG159856 DB	'%hs', 00H
$SG159241 DB	'hconsole.c', 00H
	ORG $+5
$SG159449 DB	'clear_screen', 00H
	ORG $+3
$SG159627 DB	01bH, ')01', 00H
	ORG $+3
$SG159242 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159244 DB	'set_or_reset_console_mode', 00H
	ORG $+6
$SG159245 DB	'hconsole.c', 00H
	ORG $+5
$SG159454 DB	'clear_screen', 00H
	ORG $+3
$SG159629 DB	01bH, ')02', 00H
	ORG $+3
$SG159246 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159249 DB	'set_or_reset_console_mode', 00H
	ORG $+6
$SG159250 DB	'hconsole.c', 00H
	ORG $+5
$SG159458 DB	'clear_screen', 00H
	ORG $+3
$SG159631 DB	01bH, ')03', 00H
	ORG $+3
$SG159251 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159253 DB	'set_or_reset_console_mode', 00H
	ORG $+6
$SG159254 DB	'hconsole.c', 00H
	ORG $+5
$SG159463 DB	'clear_screen', 00H
	ORG $+3
$SG159633 DB	01bH, ')04', 00H
	ORG $+3
$SG159255 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159313 DB	'hconsole.c', 00H
	ORG $+5
$SG159467 DB	'clear_screen', 00H
	ORG $+3
$SG159635 DB	01bH, ')05', 00H
	ORG $+3
$SG159314 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159317 DB	'hconsole.c', 00H
	ORG $+5
$SG159472 DB	'clear_screen', 00H
	ORG $+3
$SG159637 DB	01bH, ')06', 00H
	ORG $+3
$SG159318 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159322 DB	'hconsole.c', 00H
	ORG $+5
$SG159476 DB	'clear_screen', 00H
	ORG $+3
$SG159639 DB	01bH, ')07', 00H
	ORG $+3
$SG159323 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159326 DB	'hconsole.c', 00H
	ORG $+5
$SG159481 DB	'clear_screen', 00H
	ORG $+3
$SG159641 DB	01bH, ')08', 00H
	ORG $+3
$SG159327 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159366 DB	'hconsole.c', 00H
	ORG $+5
$SG159485 DB	'clear_screen', 00H
	ORG $+3
$SG159643 DB	01bH, ')09', 00H
	ORG $+3
$SG159367 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159370 DB	'hconsole.c', 00H
	ORG $+5
$SG159490 DB	'clear_screen', 00H
	ORG $+3
$SG159645 DB	01bH, ')10', 00H
	ORG $+3
$SG159371 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159375 DB	'hconsole.c', 00H
	ORG $+5
$SG159494 DB	'clear_screen', 00H
	ORG $+3
$SG159647 DB	01bH, ')11', 00H
	ORG $+3
$SG159376 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159379 DB	'hconsole.c', 00H
	ORG $+5
$SG159537 DB	'erase_to_eol', 00H
	ORG $+3
$SG159649 DB	01bH, ')12', 00H
	ORG $+3
$SG159380 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159386 DB	'hconsole.c', 00H
	ORG $+5
$SG159541 DB	'erase_to_eol', 00H
	ORG $+3
$SG159651 DB	01bH, ')13', 00H
	ORG $+3
$SG159387 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159390 DB	'hconsole.c', 00H
	ORG $+5
$SG159546 DB	'erase_to_eol', 00H
	ORG $+3
$SG159653 DB	01bH, ')14', 00H
	ORG $+3
$SG159391 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159446 DB	'hconsole.c', 00H
	ORG $+5
$SG159550 DB	'erase_to_eol', 00H
	ORG $+3
$SG159655 DB	01bH, ')15', 00H
	ORG $+3
$SG159447 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159450 DB	'hconsole.c', 00H
	ORG $+5
$SG159555 DB	'erase_to_eol', 00H
	ORG $+3
$SG159657 DB	01bH, ')16', 00H
	ORG $+3
$SG159451 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159455 DB	'hconsole.c', 00H
	ORG $+5
$SG159559 DB	'erase_to_eol', 00H
	ORG $+3
$SG159659 DB	01bH, ')17', 00H
	ORG $+3
$SG159456 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159459 DB	'hconsole.c', 00H
	ORG $+5
$SG159564 DB	'erase_to_eol', 00H
	ORG $+3
$SG159661 DB	01bH, ')18', 00H
	ORG $+3
$SG159460 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159464 DB	'hconsole.c', 00H
	ORG $+5
$SG159568 DB	'erase_to_eol', 00H
	ORG $+3
$SG159663 DB	01bH, ')19', 00H
	ORG $+3
$SG159465 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159468 DB	'hconsole.c', 00H
	ORG $+1
$SG159665 DB	01bH, ')20', 00H
	ORG $+7
$SG159469 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159473 DB	'hconsole.c', 00H
	ORG $+1
$SG159667 DB	01bH, ')21', 00H
	ORG $+7
$SG159474 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159477 DB	'hconsole.c', 00H
	ORG $+1
$SG159669 DB	01bH, ')22', 00H
	ORG $+7
$SG159478 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159482 DB	'hconsole.c', 00H
	ORG $+1
$SG159671 DB	01bH, ')23', 00H
	ORG $+7
$SG159483 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159486 DB	'hconsole.c', 00H
	ORG $+1
$SG159673 DB	01bH, ')24', 00H
	ORG $+7
$SG159487 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159491 DB	'hconsole.c', 00H
	ORG $+1
$SG159675 DB	01bH, ')25', 00H
	ORG $+7
$SG159492 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159495 DB	'hconsole.c', 00H
	ORG $+1
$SG159677 DB	01bH, ')26', 00H
	ORG $+7
$SG159496 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159538 DB	'hconsole.c', 00H
	ORG $+1
$SG159679 DB	01bH, ')27', 00H
	ORG $+7
$SG159539 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159542 DB	'hconsole.c', 00H
	ORG $+1
$SG159681 DB	01bH, ')28', 00H
	ORG $+7
$SG159543 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159547 DB	'hconsole.c', 00H
	ORG $+1
$SG159683 DB	01bH, ')29', 00H
	ORG $+7
$SG159548 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159551 DB	'hconsole.c', 00H
	ORG $+1
$SG159685 DB	01bH, ')30', 00H
	ORG $+7
$SG159552 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159556 DB	'hconsole.c', 00H
	ORG $+1
$SG159687 DB	01bH, ')31', 00H
	ORG $+7
$SG159557 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159560 DB	'hconsole.c', 00H
	ORG $+1
$SG159689 DB	01bH, ')32', 00H
	ORG $+7
$SG159561 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159565 DB	'hconsole.c', 00H
	ORG $+1
$SG159691 DB	01bH, ')33', 00H
	ORG $+7
$SG159566 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159569 DB	'hconsole.c', 00H
	ORG $+1
$SG159693 DB	01bH, ')34', 00H
	ORG $+7
$SG159570 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159695 DB	01bH, ')35', 00H
	ORG $+3
$SG159697 DB	01bH, ')36', 00H
	ORG $+3
$SG159699 DB	01bH, ')37', 00H
	ORG $+3
$SG159701 DB	01bH, ')38', 00H
	ORG $+3
$SG159703 DB	01bH, ')39', 00H
	ORG $+3
$SG159705 DB	01bH, ')40', 00H
	ORG $+3
$SG159707 DB	01bH, ')41', 00H
	ORG $+3
$SG159709 DB	01bH, ')42', 00H
	ORG $+3
$SG159711 DB	01bH, ')43', 00H
	ORG $+3
$SG159713 DB	01bH, ')44', 00H
	ORG $+3
$SG159715 DB	01bH, ')45', 00H
	ORG $+3
$SG159717 DB	01bH, ')46', 00H
	ORG $+3
$SG159719 DB	01bH, ')47', 00H
	ORG $+3
$SG159721 DB	01bH, ')48', 00H
	ORG $+3
$SG159758 DB	'get_cursor_pos', 00H
	ORG $+1
$SG159759 DB	'hconsole.c', 00H
	ORG $+5
$SG159762 DB	'get_cursor_pos', 00H
	ORG $+1
$SG159791 DB	'get_console_dim', 00H
$SG159846 DB	'w32_set_console_title', 00H
	ORG $+2
$SG159760 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159763 DB	'hconsole.c', 00H
	ORG $+5
$SG159795 DB	'get_console_dim', 00H
$SG159850 DB	'w32_set_console_title', 00H
	ORG $+2
$SG159764 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159792 DB	'hconsole.c', 00H
	ORG $+13
$SG159793 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159796 DB	'hconsole.c', 00H
	ORG $+13
$SG159797 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159821 DB	'set_console_cursor_shape', 00H
	ORG $+7
$SG159822 DB	'hconsole.c', 00H
	ORG $+13
$SG159823 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159825 DB	'set_console_cursor_shape', 00H
	ORG $+7
$SG159826 DB	'hconsole.c', 00H
	ORG $+13
$SG159827 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159847 DB	'hconsole.c', 00H
	ORG $+13
$SG159848 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159851 DB	'hconsole.c', 00H
	ORG $+13
$SG159852 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:w32_set_console_title
	DD	016H
	DD	0153H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:get_cursor_pos
	DD	021H
	DD	0155H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:get_console_dim
	DD	01dH
	DD	016dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:set_or_reset_console_mode
	DD	017H
	DD	044fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:erase_to_eol
	DD	013H
	DD	029dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:clear_screen
	DD	013H
	DD	038bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:set_screen_pos
	DD	01eH
	DD	0246H
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$set_screen_color DD 011401H
	DD	08214H
$unwind$set_screen_pos DD 012319H
	DD	0a214H
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$clear_screen DD 011819H
	DD	0e209H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$erase_to_eol DD 011819H
	DD	0e209H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$set_or_reset_console_mode DD 011c19H
	DD	0c20dH
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$translate_keystroke DD 010e01H
	DD	0620eH
$unwind$console_beep DD 010901H
	DD	06209H
$unwind$get_console_dim DD 012219H
	DD	0a213H
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$get_cursor_pos DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$set_console_cursor_shape DD 010d01H
	DD	0820dH
$unwind$w32_set_console_title DD 021e19H
	DD	02b010cH
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$W32_COLOR DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_snprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
tv65 = 32
herc_color$ = 64
W32_COLOR PROC

; 96   : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 97   :     switch ( herc_color )

  00009	0f bf 44 24 40	 movsx	 eax, WORD PTR herc_color$[rsp]
  0000e	89 44 24 20	 mov	 DWORD PTR tv65[rsp], eax
  00012	83 7c 24 20 12	 cmp	 DWORD PTR tv65[rsp], 18
  00017	0f 87 a6 00 00
	00		 ja	 $LN23@W32_COLOR
  0001d	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv65[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00029	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN25@W32_COLOR[rcx+rax*4]
  00030	48 03 c1	 add	 rax, rcx
  00033	ff e0		 jmp	 rax
$LN4@W32_COLOR:

; 98   :     {
; 99   :         case COLOR_BLACK:         return W32_COLOR_BLACK;

  00035	33 c0		 xor	 eax, eax
  00037	e9 8c 00 00 00	 jmp	 $LN1@W32_COLOR
$LN5@W32_COLOR:

; 100  :         case COLOR_RED:           return W32_COLOR_RED;

  0003c	b8 04 00 00 00	 mov	 eax, 4
  00041	e9 82 00 00 00	 jmp	 $LN1@W32_COLOR
$LN6@W32_COLOR:

; 101  :         case COLOR_GREEN:         return W32_COLOR_GREEN;

  00046	b8 02 00 00 00	 mov	 eax, 2
  0004b	eb 7b		 jmp	 SHORT $LN1@W32_COLOR
$LN7@W32_COLOR:

; 102  :         case COLOR_BLUE:          return W32_COLOR_BLUE;

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	eb 74		 jmp	 SHORT $LN1@W32_COLOR
$LN8@W32_COLOR:

; 103  :         case COLOR_CYAN:          return W32_COLOR_CYAN;

  00054	b8 03 00 00 00	 mov	 eax, 3
  00059	eb 6d		 jmp	 SHORT $LN1@W32_COLOR
$LN9@W32_COLOR:

; 104  :         case COLOR_MAGENTA:       return W32_COLOR_MAGENTA;

  0005b	b8 05 00 00 00	 mov	 eax, 5
  00060	eb 66		 jmp	 SHORT $LN1@W32_COLOR
$LN10@W32_COLOR:

; 105  :         case COLOR_YELLOW:        return W32_COLOR_YELLOW;

  00062	b8 06 00 00 00	 mov	 eax, 6
  00067	eb 5f		 jmp	 SHORT $LN1@W32_COLOR
$LN11@W32_COLOR:

; 106  :         case COLOR_DARK_GREY:     return W32_COLOR_DARK_GREY;

  00069	b8 08 00 00 00	 mov	 eax, 8
  0006e	eb 58		 jmp	 SHORT $LN1@W32_COLOR
$LN12@W32_COLOR:

; 107  : 
; 108  :         case COLOR_LIGHT_GREY:    return W32_COLOR_LIGHT_GREY;

  00070	b8 07 00 00 00	 mov	 eax, 7
  00075	eb 51		 jmp	 SHORT $LN1@W32_COLOR
$LN13@W32_COLOR:

; 109  :         case COLOR_LIGHT_RED:     return W32_COLOR_LIGHT_RED;

  00077	b8 0c 00 00 00	 mov	 eax, 12
  0007c	eb 4a		 jmp	 SHORT $LN1@W32_COLOR
$LN14@W32_COLOR:

; 110  :         case COLOR_LIGHT_GREEN:   return W32_COLOR_LIGHT_GREEN;

  0007e	b8 0a 00 00 00	 mov	 eax, 10
  00083	eb 43		 jmp	 SHORT $LN1@W32_COLOR
$LN15@W32_COLOR:

; 111  :         case COLOR_LIGHT_BLUE:    return W32_COLOR_LIGHT_BLUE;

  00085	b8 09 00 00 00	 mov	 eax, 9
  0008a	eb 3c		 jmp	 SHORT $LN1@W32_COLOR
$LN16@W32_COLOR:

; 112  :         case COLOR_LIGHT_CYAN:    return W32_COLOR_LIGHT_CYAN;

  0008c	b8 0b 00 00 00	 mov	 eax, 11
  00091	eb 35		 jmp	 SHORT $LN1@W32_COLOR
$LN17@W32_COLOR:

; 113  :         case COLOR_LIGHT_MAGENTA: return W32_COLOR_LIGHT_MAGENTA;

  00093	b8 0d 00 00 00	 mov	 eax, 13
  00098	eb 2e		 jmp	 SHORT $LN1@W32_COLOR
$LN18@W32_COLOR:

; 114  :         case COLOR_LIGHT_YELLOW:  return W32_COLOR_LIGHT_YELLOW;

  0009a	b8 0e 00 00 00	 mov	 eax, 14
  0009f	eb 27		 jmp	 SHORT $LN1@W32_COLOR
$LN19@W32_COLOR:

; 115  :         case COLOR_WHITE:         return W32_COLOR_WHITE;

  000a1	b8 0f 00 00 00	 mov	 eax, 15
  000a6	eb 20		 jmp	 SHORT $LN1@W32_COLOR
$LN20@W32_COLOR:

; 116  : 
; 117  :         case COLOR_DEFAULT_BG:    return default_BG_color();

  000a8	e8 00 00 00 00	 call	 default_BG_color
  000ad	eb 19		 jmp	 SHORT $LN1@W32_COLOR
$LN21@W32_COLOR:

; 118  :         case COLOR_DEFAULT_FG:    return default_FG_color();

  000af	e8 00 00 00 00	 call	 default_FG_color
  000b4	eb 12		 jmp	 SHORT $LN1@W32_COLOR
$LN22@W32_COLOR:

; 119  :         case COLOR_DEFAULT_LIGHT: return default_FG_color() | FOREGROUND_INTENSITY;

  000b6	e8 00 00 00 00	 call	 default_FG_color
  000bb	0f b7 c0	 movzx	 eax, ax
  000be	83 c8 08	 or	 eax, 8
  000c1	eb 05		 jmp	 SHORT $LN1@W32_COLOR
$LN23@W32_COLOR:

; 120  : 
; 121  :         default:                  return default_FG_color();

  000c3	e8 00 00 00 00	 call	 default_FG_color
$LN1@W32_COLOR:

; 122  :     }
; 123  : }

  000c8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cc	c3		 ret	 0
  000cd	0f 1f 00	 npad	 3
$LN25@W32_COLOR:
  000d0	00 00 00 00	 DD	 $LN4@W32_COLOR
  000d4	00 00 00 00	 DD	 $LN5@W32_COLOR
  000d8	00 00 00 00	 DD	 $LN6@W32_COLOR
  000dc	00 00 00 00	 DD	 $LN7@W32_COLOR
  000e0	00 00 00 00	 DD	 $LN8@W32_COLOR
  000e4	00 00 00 00	 DD	 $LN9@W32_COLOR
  000e8	00 00 00 00	 DD	 $LN10@W32_COLOR
  000ec	00 00 00 00	 DD	 $LN11@W32_COLOR
  000f0	00 00 00 00	 DD	 $LN12@W32_COLOR
  000f4	00 00 00 00	 DD	 $LN13@W32_COLOR
  000f8	00 00 00 00	 DD	 $LN14@W32_COLOR
  000fc	00 00 00 00	 DD	 $LN15@W32_COLOR
  00100	00 00 00 00	 DD	 $LN16@W32_COLOR
  00104	00 00 00 00	 DD	 $LN17@W32_COLOR
  00108	00 00 00 00	 DD	 $LN18@W32_COLOR
  0010c	00 00 00 00	 DD	 $LN19@W32_COLOR
  00110	00 00 00 00	 DD	 $LN21@W32_COLOR
  00114	00 00 00 00	 DD	 $LN20@W32_COLOR
  00118	00 00 00 00	 DD	 $LN22@W32_COLOR
W32_COLOR ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
default_BG_color PROC

; 28   : static WORD default_BG_color() { return (g_wDefaultAttrib >> 4) & 0x0F; }

  00000	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR g_wDefaultAttrib
  00007	c1 f8 04	 sar	 eax, 4
  0000a	83 e0 0f	 and	 eax, 15
  0000d	c3		 ret	 0
default_BG_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
default_FG_color PROC

; 27   : static WORD default_FG_color() { return  g_wDefaultAttrib       & 0x0F; }

  00000	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR g_wDefaultAttrib
  00007	83 e0 0f	 and	 eax, 15
  0000a	c3		 ret	 0
default_FG_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
tv130 = 32
pszNewTitle$ = 40
$T1 = 48
szNewTitleBuff$ = 64
__$ArrayPad$ = 320
pszTitle$ = 352
w32_set_console_title PROC

; 549  : {

$LN18:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 550  :     TCHAR    szNewTitleBuff [ MAX_WINDOW_TITLE_LEN ];
; 551  :     LPCTSTR  pszNewTitle = NULL;

  0001e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR pszNewTitle$[rsp], 0

; 552  : 
; 553  :     if (!g_szOriginalTitle[0])

  00027	b8 01 00 00 00	 mov	 eax, 1
  0002c	48 6b c0 00	 imul	 rax, rax, 0
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_szOriginalTitle
  00037	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0003b	85 c0		 test	 eax, eax
  0003d	75 78		 jne	 SHORT $LN8@w32_set_co
$LN4@w32_set_co:

; 554  :         VERIFY(GetConsoleTitle( g_szOriginalTitle, MAX_WINDOW_TITLE_LEN ));

  0003f	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:g_szOriginalTitle
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleTitleA
  00051	85 c0		 test	 eax, eax
  00053	75 5c		 jne	 SHORT $LN9@w32_set_co
$LN7@w32_set_co:
  00055	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159846
  0005c	41 b8 2a 02 00
	00		 mov	 r8d, 554		; 0000022aH
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159847
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159848
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0007c	85 c0		 test	 eax, eax
  0007e	74 20		 je	 SHORT $LN10@w32_set_co
  00080	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159850
  00087	41 b8 2a 02 00
	00		 mov	 r8d, 554		; 0000022aH
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159851
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159852
  0009b	e8 00 00 00 00	 call	 DebuggerTrace
$LN10@w32_set_co:
  000a0	33 c0		 xor	 eax, eax
  000a2	85 c0		 test	 eax, eax
  000a4	75 af		 jne	 SHORT $LN7@w32_set_co
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000ac	85 c0		 test	 eax, eax
  000ae	74 01		 je	 SHORT $LN11@w32_set_co
  000b0	cc		 int	 3
$LN11@w32_set_co:
$LN9@w32_set_co:
  000b1	33 c0		 xor	 eax, eax
  000b3	85 c0		 test	 eax, eax
  000b5	75 88		 jne	 SHORT $LN4@w32_set_co
$LN8@w32_set_co:

; 555  : 
; 556  :     if (pszTitle)

  000b7	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR pszTitle$[rsp], 0
  000c0	74 57		 je	 SHORT $LN12@w32_set_co

; 557  :     {
; 558  :         _sntprintf( szNewTitleBuff, MAX_WINDOW_TITLE_LEN-1, _T("%hs"), pszTitle );

  000c2	4c 8b 8c 24 60
	01 00 00	 mov	 r9, QWORD PTR pszTitle$[rsp]
  000ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159856
  000d1	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  000d6	48 8d 4c 24 40	 lea	 rcx, QWORD PTR szNewTitleBuff$[rsp]
  000db	e8 00 00 00 00	 call	 _snprintf

; 559  :         szNewTitleBuff[MAX_WINDOW_TITLE_LEN-1]=0;

  000e0	b8 01 00 00 00	 mov	 eax, 1
  000e5	48 69 c0 ff 00
	00 00		 imul	 rax, rax, 255		; 000000ffH
  000ec	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
  000f1	48 81 7c 24 30
	00 01 00 00	 cmp	 QWORD PTR $T1[rsp], 256	; 00000100H
  000fa	73 02		 jae	 SHORT $LN16@w32_set_co
  000fc	eb 05		 jmp	 SHORT $LN17@w32_set_co
$LN16@w32_set_co:
  000fe	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN17@w32_set_co:
  00103	48 8b 44 24 30	 mov	 rax, QWORD PTR $T1[rsp]
  00108	c6 44 04 40 00	 mov	 BYTE PTR szNewTitleBuff$[rsp+rax], 0

; 560  :         pszNewTitle = szNewTitleBuff;

  0010d	48 8d 44 24 40	 lea	 rax, QWORD PTR szNewTitleBuff$[rsp]
  00112	48 89 44 24 28	 mov	 QWORD PTR pszNewTitle$[rsp], rax

; 561  :     }

  00117	eb 0c		 jmp	 SHORT $LN13@w32_set_co
$LN12@w32_set_co:

; 562  :     else
; 563  :         pszNewTitle = g_szOriginalTitle;

  00119	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:g_szOriginalTitle
  00120	48 89 44 24 28	 mov	 QWORD PTR pszNewTitle$[rsp], rax
$LN13@w32_set_co:

; 564  : 
; 565  :     if (!SetConsoleTitle( pszNewTitle ))

  00125	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pszNewTitle$[rsp]
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleTitleA
  00130	85 c0		 test	 eax, eax
  00132	75 1d		 jne	 SHORT $LN14@w32_set_co

; 566  :     {
; 567  :         errno = GetLastError();

  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  0013a	89 44 24 20	 mov	 DWORD PTR tv130[rsp], eax
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00144	8b 4c 24 20	 mov	 ecx, DWORD PTR tv130[rsp]
  00148	89 08		 mov	 DWORD PTR [rax], ecx

; 568  :         return -1;

  0014a	b8 ff ff ff ff	 mov	 eax, -1
  0014f	eb 02		 jmp	 SHORT $LN1@w32_set_co
$LN14@w32_set_co:

; 569  :     }
; 570  :     return 0;

  00151	33 c0		 xor	 eax, eax
$LN1@w32_set_co:
$LN15@w32_set_co:

; 571  : }

  00153	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0015b	48 33 cc	 xor	 rcx, rsp
  0015e	e8 00 00 00 00	 call	 __security_check_cookie
  00163	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  0016a	c3		 ret	 0
w32_set_console_title ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
cons_fd$ = 32
tv91 = 36
hStdErr$ = 40
ci$ = 48
confp$ = 80
ins$ = 88
set_console_cursor_shape PROC

; 508  : {

$LN18:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 509  :     CONSOLE_CURSOR_INFO  ci;
; 510  :     HANDLE  hStdErr;
; 511  :     int     cons_fd;
; 512  : 
; 513  :     if ( !confp )

  0000d	48 83 7c 24 50
	00		 cmp	 QWORD PTR confp$[rsp], 0
  00013	75 16		 jne	 SHORT $LN8@set_consol

; 514  :     {
; 515  :         errno = EINVAL;

  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0001b	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 516  :         return -1;

  00021	b8 ff ff ff ff	 mov	 eax, -1
  00026	e9 06 01 00 00	 jmp	 $LN1@set_consol
$LN8@set_consol:

; 517  :     }
; 518  : 
; 519  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  0002b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR confp$[rsp]
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00036	89 44 24 20	 mov	 DWORD PTR cons_fd$[rsp], eax
  0003a	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  00044	85 c0		 test	 eax, eax
  00046	75 16		 jne	 SHORT $LN9@set_consol

; 520  :     {
; 521  :         errno = EBADF;

  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0004e	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 522  :         return -1;

  00054	b8 ff ff ff ff	 mov	 eax, -1
  00059	e9 d3 00 00 00	 jmp	 $LN1@set_consol
$LN9@set_consol:

; 523  :     }
; 524  : 
; 525  :     hStdErr = (HANDLE) _get_osfhandle( cons_fd );

  0005e	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  00068	48 89 44 24 28	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN4@set_consol:

; 526  :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  0006d	48 83 7c 24 28
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  00073	74 08		 je	 SHORT $LN11@set_consol
  00075	48 83 7c 24 28
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  0007b	75 5c		 jne	 SHORT $LN10@set_consol
$LN11@set_consol:
$LN7@set_consol:
  0007d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159821
  00084	41 b8 0e 02 00
	00		 mov	 r8d, 526		; 0000020eH
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159822
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159823
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000a4	85 c0		 test	 eax, eax
  000a6	74 20		 je	 SHORT $LN12@set_consol
  000a8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159825
  000af	41 b8 0e 02 00
	00		 mov	 r8d, 526		; 0000020eH
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159826
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159827
  000c3	e8 00 00 00 00	 call	 DebuggerTrace
$LN12@set_consol:
  000c8	33 c0		 xor	 eax, eax
  000ca	85 c0		 test	 eax, eax
  000cc	75 af		 jne	 SHORT $LN7@set_consol
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000d4	85 c0		 test	 eax, eax
  000d6	74 01		 je	 SHORT $LN13@set_consol
  000d8	cc		 int	 3
$LN13@set_consol:
$LN10@set_consol:
  000d9	33 c0		 xor	 eax, eax
  000db	85 c0		 test	 eax, eax
  000dd	75 8e		 jne	 SHORT $LN4@set_consol

; 527  : 
; 528  :     ci.bVisible = TRUE;

  000df	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR ci$[rsp+4], 1

; 529  :     ci.dwSize = ins ? 20 : 100; // (note: values are percent of cell height)

  000e7	83 7c 24 58 00	 cmp	 DWORD PTR ins$[rsp], 0
  000ec	74 0a		 je	 SHORT $LN16@set_consol
  000ee	c7 44 24 24 14
	00 00 00	 mov	 DWORD PTR tv91[rsp], 20
  000f6	eb 08		 jmp	 SHORT $LN17@set_consol
$LN16@set_consol:
  000f8	c7 44 24 24 64
	00 00 00	 mov	 DWORD PTR tv91[rsp], 100 ; 00000064H
$LN17@set_consol:
  00100	8b 44 24 24	 mov	 eax, DWORD PTR tv91[rsp]
  00104	89 44 24 30	 mov	 DWORD PTR ci$[rsp], eax

; 530  : 
; 531  :     if ( !SetConsoleCursorInfo( hStdErr, &ci ) )

  00108	48 8d 54 24 30	 lea	 rdx, QWORD PTR ci$[rsp]
  0010d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCursorInfo
  00118	85 c0		 test	 eax, eax
  0011a	75 13		 jne	 SHORT $LN14@set_consol

; 532  :     {
; 533  :         errno = EIO;

  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00122	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 534  :         return -1;

  00128	b8 ff ff ff ff	 mov	 eax, -1
  0012d	eb 02		 jmp	 SHORT $LN1@set_consol
$LN14@set_consol:

; 535  :     }
; 536  : 
; 537  :     return 0;

  0012f	33 c0		 xor	 eax, eax
$LN1@set_consol:

; 538  : }

  00131	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00135	c3		 ret	 0
set_console_cursor_shape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
cons_fd$ = 32
hStdErr$ = 40
csbi$ = 48
__$ArrayPad$ = 72
keybrd_fd$ = 96
confp$ = 104
row$ = 112
col$ = 120
get_cursor_pos PROC

; 434  : {

$LN20:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@get_cursor:

; 435  :     CONSOLE_SCREEN_BUFFER_INFO  csbi;
; 436  :     HANDLE  hStdErr;
; 437  :     int     cons_fd;
; 438  : 
; 439  :     UNREFERENCED( keybrd_fd );

  00026	33 c0		 xor	 eax, eax
  00028	85 c0		 test	 eax, eax
  0002a	75 fa		 jne	 SHORT $LN4@get_cursor

; 440  : 
; 441  :     if ( !confp || !row || !col )

  0002c	48 83 7c 24 68
	00		 cmp	 QWORD PTR confp$[rsp], 0
  00032	74 10		 je	 SHORT $LN12@get_cursor
  00034	48 83 7c 24 70
	00		 cmp	 QWORD PTR row$[rsp], 0
  0003a	74 08		 je	 SHORT $LN12@get_cursor
  0003c	48 83 7c 24 78
	00		 cmp	 QWORD PTR col$[rsp], 0
  00042	75 16		 jne	 SHORT $LN11@get_cursor
$LN12@get_cursor:

; 442  :     {
; 443  :         errno = EINVAL;

  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0004a	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 444  :         return -1;

  00050	b8 ff ff ff ff	 mov	 eax, -1
  00055	e9 fb 00 00 00	 jmp	 $LN1@get_cursor
$LN11@get_cursor:

; 445  :     }
; 446  : 
; 447  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  0005a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR confp$[rsp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00065	89 44 24 20	 mov	 DWORD PTR cons_fd$[rsp], eax
  00069	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  00073	85 c0		 test	 eax, eax
  00075	75 16		 jne	 SHORT $LN13@get_cursor

; 448  :     {
; 449  :         errno = EBADF;

  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0007d	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 450  :         return -1;

  00083	b8 ff ff ff ff	 mov	 eax, -1
  00088	e9 c8 00 00 00	 jmp	 $LN1@get_cursor
$LN13@get_cursor:

; 451  :     }
; 452  : 
; 453  :     hStdErr = (HANDLE) _get_osfhandle( cons_fd );

  0008d	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  00097	48 89 44 24 28	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN7@get_cursor:

; 454  :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  0009c	48 83 7c 24 28
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  000a2	74 08		 je	 SHORT $LN15@get_cursor
  000a4	48 83 7c 24 28
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  000aa	75 5c		 jne	 SHORT $LN14@get_cursor
$LN15@get_cursor:
$LN10@get_cursor:
  000ac	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159758
  000b3	41 b8 c6 01 00
	00		 mov	 r8d, 454		; 000001c6H
  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159759
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159760
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000d3	85 c0		 test	 eax, eax
  000d5	74 20		 je	 SHORT $LN16@get_cursor
  000d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159762
  000de	41 b8 c6 01 00
	00		 mov	 r8d, 454		; 000001c6H
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159763
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159764
  000f2	e8 00 00 00 00	 call	 DebuggerTrace
$LN16@get_cursor:
  000f7	33 c0		 xor	 eax, eax
  000f9	85 c0		 test	 eax, eax
  000fb	75 af		 jne	 SHORT $LN10@get_cursor
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00103	85 c0		 test	 eax, eax
  00105	74 01		 je	 SHORT $LN17@get_cursor
  00107	cc		 int	 3
$LN17@get_cursor:
$LN14@get_cursor:
  00108	33 c0		 xor	 eax, eax
  0010a	85 c0		 test	 eax, eax
  0010c	75 8e		 jne	 SHORT $LN7@get_cursor

; 455  : 
; 456  :     if ( !GetConsoleScreenBufferInfo( hStdErr, &csbi ) )

  0010e	48 8d 54 24 30	 lea	 rdx, QWORD PTR csbi$[rsp]
  00113	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo
  0011e	85 c0		 test	 eax, eax
  00120	75 13		 jne	 SHORT $LN18@get_cursor

; 457  :     {
; 458  :         errno = EIO;

  00122	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00128	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 459  :         return -1;

  0012e	b8 ff ff ff ff	 mov	 eax, -1
  00133	eb 20		 jmp	 SHORT $LN1@get_cursor
$LN18@get_cursor:

; 460  :     }
; 461  : 
; 462  :     *row = 1 + csbi.dwCursorPosition.Y;

  00135	0f bf 44 24 36	 movsx	 eax, WORD PTR csbi$[rsp+6]
  0013a	ff c0		 inc	 eax
  0013c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR row$[rsp]
  00141	66 89 01	 mov	 WORD PTR [rcx], ax

; 463  :     *col = 1 + csbi.dwCursorPosition.X;

  00144	0f bf 44 24 34	 movsx	 eax, WORD PTR csbi$[rsp+4]
  00149	ff c0		 inc	 eax
  0014b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR col$[rsp]
  00150	66 89 01	 mov	 WORD PTR [rcx], ax

; 464  : 
; 465  :     return 0;

  00153	33 c0		 xor	 eax, eax
$LN1@get_cursor:

; 466  : }

  00155	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0015a	48 33 cc	 xor	 rcx, rsp
  0015d	e8 00 00 00 00	 call	 __security_check_cookie
  00162	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00166	c3		 ret	 0
get_cursor_pos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
cons_fd$ = 32
hStdErr$ = 40
csbi$ = 48
__$ArrayPad$ = 72
confp$ = 96
rows$ = 104
cols$ = 112
get_console_dim PROC

; 472  : {

$LN17:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 473  :     CONSOLE_SCREEN_BUFFER_INFO  csbi;
; 474  :     HANDLE  hStdErr;
; 475  :     int     cons_fd;
; 476  : 
; 477  :     if ( !confp || !rows || !cols )

  00022	48 83 7c 24 60
	00		 cmp	 QWORD PTR confp$[rsp], 0
  00028	74 10		 je	 SHORT $LN9@get_consol
  0002a	48 83 7c 24 68
	00		 cmp	 QWORD PTR rows$[rsp], 0
  00030	74 08		 je	 SHORT $LN9@get_consol
  00032	48 83 7c 24 70
	00		 cmp	 QWORD PTR cols$[rsp], 0
  00038	75 16		 jne	 SHORT $LN8@get_consol
$LN9@get_consol:

; 478  :     {
; 479  :         errno = EINVAL;

  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00040	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 480  :         return -1;

  00046	b8 ff ff ff ff	 mov	 eax, -1
  0004b	e9 1d 01 00 00	 jmp	 $LN1@get_consol
$LN8@get_consol:

; 481  :     }
; 482  : 
; 483  :     *rows = *cols = 0;

  00050	48 8b 44 24 70	 mov	 rax, QWORD PTR cols$[rsp]
  00055	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  0005b	48 8b 44 24 68	 mov	 rax, QWORD PTR rows$[rsp]
  00060	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 484  : 
; 485  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  00066	48 8b 4c 24 60	 mov	 rcx, QWORD PTR confp$[rsp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00071	89 44 24 20	 mov	 DWORD PTR cons_fd$[rsp], eax
  00075	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  0007f	85 c0		 test	 eax, eax
  00081	75 16		 jne	 SHORT $LN10@get_consol

; 486  :     {
; 487  :         errno = EBADF;

  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00089	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 488  :         return -1;

  0008f	b8 ff ff ff ff	 mov	 eax, -1
  00094	e9 d4 00 00 00	 jmp	 $LN1@get_consol
$LN10@get_consol:

; 489  :     }
; 490  : 
; 491  :     hStdErr = (HANDLE) _get_osfhandle( cons_fd );

  00099	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  000a3	48 89 44 24 28	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN4@get_consol:

; 492  :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  000a8	48 83 7c 24 28
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  000ae	74 08		 je	 SHORT $LN12@get_consol
  000b0	48 83 7c 24 28
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  000b6	75 5c		 jne	 SHORT $LN11@get_consol
$LN12@get_consol:
$LN7@get_consol:
  000b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159791
  000bf	41 b8 ec 01 00
	00		 mov	 r8d, 492		; 000001ecH
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159792
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159793
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000df	85 c0		 test	 eax, eax
  000e1	74 20		 je	 SHORT $LN13@get_consol
  000e3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159795
  000ea	41 b8 ec 01 00
	00		 mov	 r8d, 492		; 000001ecH
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159796
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159797
  000fe	e8 00 00 00 00	 call	 DebuggerTrace
$LN13@get_consol:
  00103	33 c0		 xor	 eax, eax
  00105	85 c0		 test	 eax, eax
  00107	75 af		 jne	 SHORT $LN7@get_consol
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0010f	85 c0		 test	 eax, eax
  00111	74 01		 je	 SHORT $LN14@get_consol
  00113	cc		 int	 3
$LN14@get_consol:
$LN11@get_consol:
  00114	33 c0		 xor	 eax, eax
  00116	85 c0		 test	 eax, eax
  00118	75 8e		 jne	 SHORT $LN4@get_consol

; 493  : 
; 494  :     if ( !GetConsoleScreenBufferInfo( hStdErr, &csbi ) )

  0011a	48 8d 54 24 30	 lea	 rdx, QWORD PTR csbi$[rsp]
  0011f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo
  0012a	85 c0		 test	 eax, eax
  0012c	75 13		 jne	 SHORT $LN15@get_consol

; 495  :     {
; 496  :         errno = EIO;

  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00134	c7 00 05 00 00
	00		 mov	 DWORD PTR [rax], 5

; 497  :         return -1;

  0013a	b8 ff ff ff ff	 mov	 eax, -1
  0013f	eb 2c		 jmp	 SHORT $LN1@get_consol
$LN15@get_consol:

; 498  :     }
; 499  : 
; 500  :     *rows = 1 + csbi.srWindow.Bottom - csbi.srWindow.Top;

  00141	0f bf 44 24 40	 movsx	 eax, WORD PTR csbi$[rsp+16]
  00146	ff c0		 inc	 eax
  00148	0f bf 4c 24 3c	 movsx	 ecx, WORD PTR csbi$[rsp+12]
  0014d	2b c1		 sub	 eax, ecx
  0014f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR rows$[rsp]
  00154	89 01		 mov	 DWORD PTR [rcx], eax

; 501  :     *cols = 1 + csbi.srWindow.Right  - csbi.srWindow.Left;

  00156	0f bf 44 24 3e	 movsx	 eax, WORD PTR csbi$[rsp+14]
  0015b	ff c0		 inc	 eax
  0015d	0f bf 4c 24 3a	 movsx	 ecx, WORD PTR csbi$[rsp+10]
  00162	2b c1		 sub	 eax, ecx
  00164	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cols$[rsp]
  00169	89 01		 mov	 DWORD PTR [rcx], eax

; 502  :     return 0;

  0016b	33 c0		 xor	 eax, eax
$LN1@get_consol:

; 503  : }

  0016d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00172	48 33 cc	 xor	 rcx, rsp
  00175	e8 00 00 00 00	 call	 __security_check_cookie
  0017a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0017e	c3		 ret	 0
get_console_dim ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
cons_fd$ = 32
confp$ = 64
console_beep PROC

; 410  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 411  :     int cons_fd;
; 412  : 
; 413  :     if ( !confp )

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR confp$[rsp], 0
  0000f	75 13		 jne	 SHORT $LN2@console_be

; 414  :     {
; 415  :         errno = EINVAL;

  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00017	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 416  :         return -1;

  0001d	b8 ff ff ff ff	 mov	 eax, -1
  00022	eb 3d		 jmp	 SHORT $LN1@console_be
$LN2@console_be:

; 417  :     }
; 418  : 
; 419  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR confp$[rsp]
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0002f	89 44 24 20	 mov	 DWORD PTR cons_fd$[rsp], eax
  00033	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  0003d	85 c0		 test	 eax, eax
  0003f	75 13		 jne	 SHORT $LN3@console_be

; 420  :     {
; 421  :         errno = EBADF;

  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00047	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 422  :         return -1;

  0004d	b8 ff ff ff ff	 mov	 eax, -1
  00052	eb 0d		 jmp	 SHORT $LN1@console_be
$LN3@console_be:

; 423  :     }
; 424  : 
; 425  :     MessageBeep(-1);

  00054	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MessageBeep

; 426  : 
; 427  :     return 0;

  0005f	33 c0		 xor	 eax, eax
$LN1@console_be:

; 428  : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
console_beep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
ch$ = 32
ch2$1 = 33
orig_ch$2 = 34
tv75 = 36
tv67 = 40
kbbuf$ = 64
pkblen$ = 72
translate_keystroke PROC

; 277  : {

$LN81:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 278  :     BYTE ch = kbbuf[0];         // (move char to work var)

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 00	 imul	 rax, rax, 0
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	88 44 24 20	 mov	 BYTE PTR ch$[rsp], al

; 279  : 
; 280  :     switch ( ch )               // Check if special key pressed...

  00024	0f b6 44 24 20	 movzx	 eax, BYTE PTR ch$[rsp]
  00029	88 44 24 28	 mov	 BYTE PTR tv67[rsp], al
  0002d	80 7c 24 28 00	 cmp	 BYTE PTR tv67[rsp], 0
  00032	74 27		 je	 SHORT $LN8@translate_
  00034	80 7c 24 28 0d	 cmp	 BYTE PTR tv67[rsp], 13
  00039	74 09		 je	 SHORT $LN6@translate_
  0003b	80 7c 24 28 e0	 cmp	 BYTE PTR tv67[rsp], 224	; 000000e0H
  00040	74 19		 je	 SHORT $LN9@translate_
  00042	eb 12		 jmp	 SHORT $LN7@translate_
$LN6@translate_:

; 281  :     {
; 282  :         case 0x0D:              // enter key
; 283  :             kbbuf[0] = '\n';    // change to newline character

  00044	b8 01 00 00 00	 mov	 eax, 1
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00052	c6 04 01 0a	 mov	 BYTE PTR [rcx+rax], 10
$LN7@translate_:

; 284  :                                 // fall thru to default case
; 285  :         default:                // no further translation needed
; 286  :             break;              // accept the keystroke as-is

  00056	e9 4d 06 00 00	 jmp	 $LN2@translate_
$LN8@translate_:
$LN9@translate_:

; 287  : 
; 288  :         // translate special key (escape sequence)...
; 289  : 
; 290  :         case 0x00:              // 1st char of special key press
; 291  :         case 0xE0:              // 1st char of special key press
; 292  :         {
; 293  :             BYTE orig_ch, ch2;
; 294  : 
; 295  :             if ( !kbhit() )     // if not two chars generated,

  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_kbhit
  00061	85 c0		 test	 eax, eax
  00063	75 05		 jne	 SHORT $LN10@translate_

; 296  :                 break;          // then not special key press

  00065	e9 3e 06 00 00	 jmp	 $LN2@translate_
$LN10@translate_:

; 297  : 
; 298  :             orig_ch = ch;       // save original keystroke

  0006a	0f b6 44 24 20	 movzx	 eax, BYTE PTR ch$[rsp]
  0006f	88 44 24 22	 mov	 BYTE PTR orig_ch$2[rsp], al

; 299  :             ch = '\x1B';        // change it to an escape char

  00073	c6 44 24 20 1b	 mov	 BYTE PTR ch$[rsp], 27

; 300  :             ch2 = getch();      // get second keystroke of pair

  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getch
  0007e	88 44 24 21	 mov	 BYTE PTR ch2$1[rsp], al

; 301  : 
; 302  :             switch ( ch2 )      // generate ANSI escape sequence

  00082	0f b6 44 24 21	 movzx	 eax, BYTE PTR ch2$1[rsp]
  00087	89 44 24 24	 mov	 DWORD PTR tv75[rsp], eax
  0008b	8b 44 24 24	 mov	 eax, DWORD PTR tv75[rsp]
  0008f	83 e8 3b	 sub	 eax, 59			; 0000003bH
  00092	89 44 24 24	 mov	 DWORD PTR tv75[rsp], eax
  00096	83 7c 24 24 65	 cmp	 DWORD PTR tv75[rsp], 101 ; 00000065H
  0009b	0f 87 c0 05 00
	00		 ja	 $LN77@translate_
  000a1	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv75[rsp]
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000ad	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN79@translate_[rcx+rax]
  000b5	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN80@translate_[rcx+rax*4]
  000bc	48 03 c1	 add	 rax, rcx
  000bf	ff e0		 jmp	 rax
$LN11@translate_:

; 303  :             {
; 304  :                 case 0x47: strcpy( kbbuf, KBD_HOME            ); break;

  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159591
  000c8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  000cd	e8 00 00 00 00	 call	 strcpy
  000d2	e9 c0 05 00 00	 jmp	 $LN4@translate_
$LN12@translate_:

; 305  :                 case 0x52: strcpy( kbbuf, KBD_INSERT          ); break;

  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159593
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  000e3	e8 00 00 00 00	 call	 strcpy
  000e8	e9 aa 05 00 00	 jmp	 $LN4@translate_
$LN13@translate_:

; 306  :                 case 0x53: strcpy( kbbuf, KBD_DELETE          ); break;

  000ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159595
  000f4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  000f9	e8 00 00 00 00	 call	 strcpy
  000fe	e9 94 05 00 00	 jmp	 $LN4@translate_
$LN14@translate_:

; 307  :                 case 0x4F: strcpy( kbbuf, KBD_END             ); break;

  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159597
  0010a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0010f	e8 00 00 00 00	 call	 strcpy
  00114	e9 7e 05 00 00	 jmp	 $LN4@translate_
$LN15@translate_:

; 308  :                 case 0x49: strcpy( kbbuf, KBD_PAGE_UP         ); break;

  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159599
  00120	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00125	e8 00 00 00 00	 call	 strcpy
  0012a	e9 68 05 00 00	 jmp	 $LN4@translate_
$LN16@translate_:

; 309  :                 case 0x51: strcpy( kbbuf, KBD_PAGE_DOWN       ); break;

  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159601
  00136	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0013b	e8 00 00 00 00	 call	 strcpy
  00140	e9 52 05 00 00	 jmp	 $LN4@translate_
$LN17@translate_:

; 310  : 
; 311  :                 case 0x48: strcpy( kbbuf, KBD_UP_ARROW        ); break;

  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159603
  0014c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00151	e8 00 00 00 00	 call	 strcpy
  00156	e9 3c 05 00 00	 jmp	 $LN4@translate_
$LN18@translate_:

; 312  :                 case 0x50: strcpy( kbbuf, KBD_DOWN_ARROW      ); break;

  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159605
  00162	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00167	e8 00 00 00 00	 call	 strcpy
  0016c	e9 26 05 00 00	 jmp	 $LN4@translate_
$LN19@translate_:

; 313  :                 case 0x4D: strcpy( kbbuf, KBD_RIGHT_ARROW     ); break;

  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159607
  00178	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0017d	e8 00 00 00 00	 call	 strcpy
  00182	e9 10 05 00 00	 jmp	 $LN4@translate_
$LN20@translate_:

; 314  :                 case 0x4B: strcpy( kbbuf, KBD_LEFT_ARROW      ); break;

  00187	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159609
  0018e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00193	e8 00 00 00 00	 call	 strcpy
  00198	e9 fa 04 00 00	 jmp	 $LN4@translate_
$LN21@translate_:

; 315  : 
; 316  :                 case 0x77: strcpy( kbbuf, KBD_CTRL_HOME       ); break;

  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159611
  001a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  001a9	e8 00 00 00 00	 call	 strcpy
  001ae	e9 e4 04 00 00	 jmp	 $LN4@translate_
$LN22@translate_:

; 317  :                 case 0x75: strcpy( kbbuf, KBD_CTRL_END        ); break;

  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159613
  001ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  001bf	e8 00 00 00 00	 call	 strcpy
  001c4	e9 ce 04 00 00	 jmp	 $LN4@translate_
$LN23@translate_:

; 318  : 
; 319  :                 case 0x8D: strcpy( kbbuf, KBD_CTRL_UP_ARROW   ); break;

  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159615
  001d0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  001d5	e8 00 00 00 00	 call	 strcpy
  001da	e9 b8 04 00 00	 jmp	 $LN4@translate_
$LN24@translate_:

; 320  :                 case 0x91: strcpy( kbbuf, KBD_CTRL_DOWN_ARROW ); break;

  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159617
  001e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  001eb	e8 00 00 00 00	 call	 strcpy
  001f0	e9 a2 04 00 00	 jmp	 $LN4@translate_
$LN25@translate_:

; 321  : 
; 322  :                 case 0x98: strcpy( kbbuf, KBD_ALT_UP_ARROW    ); break;

  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159619
  001fc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00201	e8 00 00 00 00	 call	 strcpy
  00206	e9 8c 04 00 00	 jmp	 $LN4@translate_
$LN26@translate_:

; 323  :                 case 0xA0: strcpy( kbbuf, KBD_ALT_DOWN_ARROW  ); break;

  0020b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159621
  00212	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00217	e8 00 00 00 00	 call	 strcpy
  0021c	e9 76 04 00 00	 jmp	 $LN4@translate_
$LN27@translate_:

; 324  :                 case 0x9D: strcpy( kbbuf, KBD_ALT_RIGHT_ARROW ); break;

  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159623
  00228	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0022d	e8 00 00 00 00	 call	 strcpy
  00232	e9 60 04 00 00	 jmp	 $LN4@translate_
$LN28@translate_:

; 325  :                 case 0x9B: strcpy( kbbuf, KBD_ALT_LEFT_ARROW  ); break;

  00237	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159625
  0023e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00243	e8 00 00 00 00	 call	 strcpy
  00248	e9 4a 04 00 00	 jmp	 $LN4@translate_
$LN29@translate_:

; 326  : 
; 327  :                 case 0x3b: strcpy( kbbuf, KBD_PF1             ); break;

  0024d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159627
  00254	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00259	e8 00 00 00 00	 call	 strcpy
  0025e	e9 34 04 00 00	 jmp	 $LN4@translate_
$LN30@translate_:

; 328  :                 case 0x3c: strcpy( kbbuf, KBD_PF2             ); break;

  00263	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159629
  0026a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0026f	e8 00 00 00 00	 call	 strcpy
  00274	e9 1e 04 00 00	 jmp	 $LN4@translate_
$LN31@translate_:

; 329  :                 case 0x3d: strcpy( kbbuf, KBD_PF3             ); break;

  00279	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159631
  00280	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00285	e8 00 00 00 00	 call	 strcpy
  0028a	e9 08 04 00 00	 jmp	 $LN4@translate_
$LN32@translate_:

; 330  :                 case 0x3e: strcpy( kbbuf, KBD_PF4             ); break;

  0028f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159633
  00296	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0029b	e8 00 00 00 00	 call	 strcpy
  002a0	e9 f2 03 00 00	 jmp	 $LN4@translate_
$LN33@translate_:

; 331  : 
; 332  :                 case 0x3f: strcpy( kbbuf, KBD_PF5             ); break;

  002a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159635
  002ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  002b1	e8 00 00 00 00	 call	 strcpy
  002b6	e9 dc 03 00 00	 jmp	 $LN4@translate_
$LN34@translate_:

; 333  :                 case 0x40: strcpy( kbbuf, KBD_PF6             ); break;

  002bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159637
  002c2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  002c7	e8 00 00 00 00	 call	 strcpy
  002cc	e9 c6 03 00 00	 jmp	 $LN4@translate_
$LN35@translate_:

; 334  :                 case 0x41: strcpy( kbbuf, KBD_PF7             ); break;

  002d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159639
  002d8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  002dd	e8 00 00 00 00	 call	 strcpy
  002e2	e9 b0 03 00 00	 jmp	 $LN4@translate_
$LN36@translate_:

; 335  :                 case 0x42: strcpy( kbbuf, KBD_PF8             ); break;

  002e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159641
  002ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  002f3	e8 00 00 00 00	 call	 strcpy
  002f8	e9 9a 03 00 00	 jmp	 $LN4@translate_
$LN37@translate_:

; 336  : 
; 337  :                 case 0x43: strcpy( kbbuf, KBD_PF9             ); break;

  002fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159643
  00304	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00309	e8 00 00 00 00	 call	 strcpy
  0030e	e9 84 03 00 00	 jmp	 $LN4@translate_
$LN38@translate_:

; 338  :                 case 0x44: strcpy( kbbuf, KBD_PF10            ); break;

  00313	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159645
  0031a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0031f	e8 00 00 00 00	 call	 strcpy
  00324	e9 6e 03 00 00	 jmp	 $LN4@translate_
$LN39@translate_:

; 339  :                 case 0x85: strcpy( kbbuf, KBD_PF11            ); break;

  00329	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159647
  00330	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00335	e8 00 00 00 00	 call	 strcpy
  0033a	e9 58 03 00 00	 jmp	 $LN4@translate_
$LN40@translate_:

; 340  :                 case 0x86: strcpy( kbbuf, KBD_PF12            ); break;

  0033f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159649
  00346	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0034b	e8 00 00 00 00	 call	 strcpy
  00350	e9 42 03 00 00	 jmp	 $LN4@translate_
$LN41@translate_:

; 341  : 
; 342  :                 case 0x54: strcpy( kbbuf, KBD_PF13            ); break;

  00355	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159651
  0035c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00361	e8 00 00 00 00	 call	 strcpy
  00366	e9 2c 03 00 00	 jmp	 $LN4@translate_
$LN42@translate_:

; 343  :                 case 0x55: strcpy( kbbuf, KBD_PF14            ); break;

  0036b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159653
  00372	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00377	e8 00 00 00 00	 call	 strcpy
  0037c	e9 16 03 00 00	 jmp	 $LN4@translate_
$LN43@translate_:

; 344  :                 case 0x56: strcpy( kbbuf, KBD_PF15            ); break;

  00381	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159655
  00388	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0038d	e8 00 00 00 00	 call	 strcpy
  00392	e9 00 03 00 00	 jmp	 $LN4@translate_
$LN44@translate_:

; 345  :                 case 0x57: strcpy( kbbuf, KBD_PF16            ); break;

  00397	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159657
  0039e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  003a3	e8 00 00 00 00	 call	 strcpy
  003a8	e9 ea 02 00 00	 jmp	 $LN4@translate_
$LN45@translate_:

; 346  : 
; 347  :                 case 0x58: strcpy( kbbuf, KBD_PF17            ); break;

  003ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159659
  003b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  003b9	e8 00 00 00 00	 call	 strcpy
  003be	e9 d4 02 00 00	 jmp	 $LN4@translate_
$LN46@translate_:

; 348  :                 case 0x59: strcpy( kbbuf, KBD_PF18            ); break;

  003c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159661
  003ca	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  003cf	e8 00 00 00 00	 call	 strcpy
  003d4	e9 be 02 00 00	 jmp	 $LN4@translate_
$LN47@translate_:

; 349  :                 case 0x5a: strcpy( kbbuf, KBD_PF19            ); break;

  003d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159663
  003e0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  003e5	e8 00 00 00 00	 call	 strcpy
  003ea	e9 a8 02 00 00	 jmp	 $LN4@translate_
$LN48@translate_:

; 350  :                 case 0x5b: strcpy( kbbuf, KBD_PF20            ); break;

  003ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159665
  003f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  003fb	e8 00 00 00 00	 call	 strcpy
  00400	e9 92 02 00 00	 jmp	 $LN4@translate_
$LN49@translate_:

; 351  : 
; 352  :                 case 0x5c: strcpy( kbbuf, KBD_PF21            ); break;

  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159667
  0040c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00411	e8 00 00 00 00	 call	 strcpy
  00416	e9 7c 02 00 00	 jmp	 $LN4@translate_
$LN50@translate_:

; 353  :                 case 0x5d: strcpy( kbbuf, KBD_PF22            ); break;

  0041b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159669
  00422	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00427	e8 00 00 00 00	 call	 strcpy
  0042c	e9 66 02 00 00	 jmp	 $LN4@translate_
$LN51@translate_:

; 354  :                 case 0x87: strcpy( kbbuf, KBD_PF23            ); break;

  00431	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159671
  00438	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0043d	e8 00 00 00 00	 call	 strcpy
  00442	e9 50 02 00 00	 jmp	 $LN4@translate_
$LN52@translate_:

; 355  :                 case 0x88: strcpy( kbbuf, KBD_PF24            ); break;

  00447	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159673
  0044e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00453	e8 00 00 00 00	 call	 strcpy
  00458	e9 3a 02 00 00	 jmp	 $LN4@translate_
$LN53@translate_:

; 356  : 
; 357  :                 case 0x5e: strcpy( kbbuf, KBD_PF25            ); break;

  0045d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159675
  00464	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00469	e8 00 00 00 00	 call	 strcpy
  0046e	e9 24 02 00 00	 jmp	 $LN4@translate_
$LN54@translate_:

; 358  :                 case 0x5f: strcpy( kbbuf, KBD_PF26            ); break;

  00473	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159677
  0047a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0047f	e8 00 00 00 00	 call	 strcpy
  00484	e9 0e 02 00 00	 jmp	 $LN4@translate_
$LN55@translate_:

; 359  :                 case 0x60: strcpy( kbbuf, KBD_PF27            ); break;

  00489	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159679
  00490	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00495	e8 00 00 00 00	 call	 strcpy
  0049a	e9 f8 01 00 00	 jmp	 $LN4@translate_
$LN56@translate_:

; 360  :                 case 0x61: strcpy( kbbuf, KBD_PF28            ); break;

  0049f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159681
  004a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  004ab	e8 00 00 00 00	 call	 strcpy
  004b0	e9 e2 01 00 00	 jmp	 $LN4@translate_
$LN57@translate_:

; 361  : 
; 362  :                 case 0x62: strcpy( kbbuf, KBD_PF29            ); break;

  004b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159683
  004bc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  004c1	e8 00 00 00 00	 call	 strcpy
  004c6	e9 cc 01 00 00	 jmp	 $LN4@translate_
$LN58@translate_:

; 363  :                 case 0x63: strcpy( kbbuf, KBD_PF30            ); break;

  004cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159685
  004d2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  004d7	e8 00 00 00 00	 call	 strcpy
  004dc	e9 b6 01 00 00	 jmp	 $LN4@translate_
$LN59@translate_:

; 364  :                 case 0x64: strcpy( kbbuf, KBD_PF31            ); break;

  004e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159687
  004e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  004ed	e8 00 00 00 00	 call	 strcpy
  004f2	e9 a0 01 00 00	 jmp	 $LN4@translate_
$LN60@translate_:

; 365  :                 case 0x65: strcpy( kbbuf, KBD_PF32            ); break;

  004f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159689
  004fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00503	e8 00 00 00 00	 call	 strcpy
  00508	e9 8a 01 00 00	 jmp	 $LN4@translate_
$LN61@translate_:

; 366  : 
; 367  :                 case 0x66: strcpy( kbbuf, KBD_PF33            ); break;

  0050d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159691
  00514	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00519	e8 00 00 00 00	 call	 strcpy
  0051e	e9 74 01 00 00	 jmp	 $LN4@translate_
$LN62@translate_:

; 368  :                 case 0x67: strcpy( kbbuf, KBD_PF34            ); break;

  00523	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159693
  0052a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0052f	e8 00 00 00 00	 call	 strcpy
  00534	e9 5e 01 00 00	 jmp	 $LN4@translate_
$LN63@translate_:

; 369  :                 case 0x89: strcpy( kbbuf, KBD_PF35            ); break;

  00539	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159695
  00540	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00545	e8 00 00 00 00	 call	 strcpy
  0054a	e9 48 01 00 00	 jmp	 $LN4@translate_
$LN64@translate_:

; 370  :                 case 0x8a: strcpy( kbbuf, KBD_PF36            ); break;

  0054f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159697
  00556	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0055b	e8 00 00 00 00	 call	 strcpy
  00560	e9 32 01 00 00	 jmp	 $LN4@translate_
$LN65@translate_:

; 371  : 
; 372  :                 case 0x68: strcpy( kbbuf, KBD_PF37            ); break;

  00565	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159699
  0056c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00571	e8 00 00 00 00	 call	 strcpy
  00576	e9 1c 01 00 00	 jmp	 $LN4@translate_
$LN66@translate_:

; 373  :                 case 0x69: strcpy( kbbuf, KBD_PF38            ); break;

  0057b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159701
  00582	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00587	e8 00 00 00 00	 call	 strcpy
  0058c	e9 06 01 00 00	 jmp	 $LN4@translate_
$LN67@translate_:

; 374  :                 case 0x6a: strcpy( kbbuf, KBD_PF39            ); break;

  00591	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159703
  00598	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0059d	e8 00 00 00 00	 call	 strcpy
  005a2	e9 f0 00 00 00	 jmp	 $LN4@translate_
$LN68@translate_:

; 375  :                 case 0x6b: strcpy( kbbuf, KBD_PF40            ); break;

  005a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159705
  005ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  005b3	e8 00 00 00 00	 call	 strcpy
  005b8	e9 da 00 00 00	 jmp	 $LN4@translate_
$LN69@translate_:

; 376  : 
; 377  :                 case 0x6c: strcpy( kbbuf, KBD_PF41            ); break;

  005bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159707
  005c4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  005c9	e8 00 00 00 00	 call	 strcpy
  005ce	e9 c4 00 00 00	 jmp	 $LN4@translate_
$LN70@translate_:

; 378  :                 case 0x6d: strcpy( kbbuf, KBD_PF42            ); break;

  005d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159709
  005da	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  005df	e8 00 00 00 00	 call	 strcpy
  005e4	e9 ae 00 00 00	 jmp	 $LN4@translate_
$LN71@translate_:

; 379  :                 case 0x6e: strcpy( kbbuf, KBD_PF43            ); break;

  005e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159711
  005f0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  005f5	e8 00 00 00 00	 call	 strcpy
  005fa	e9 98 00 00 00	 jmp	 $LN4@translate_
$LN72@translate_:

; 380  :                 case 0x6f: strcpy( kbbuf, KBD_PF44            ); break;

  005ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159713
  00606	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0060b	e8 00 00 00 00	 call	 strcpy
  00610	e9 82 00 00 00	 jmp	 $LN4@translate_
$LN73@translate_:

; 381  : 
; 382  :                 case 0x70: strcpy( kbbuf, KBD_PF45            ); break;

  00615	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159715
  0061c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00621	e8 00 00 00 00	 call	 strcpy
  00626	eb 6f		 jmp	 SHORT $LN4@translate_
$LN74@translate_:

; 383  :                 case 0x71: strcpy( kbbuf, KBD_PF46            ); break;

  00628	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159717
  0062f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00634	e8 00 00 00 00	 call	 strcpy
  00639	eb 5c		 jmp	 SHORT $LN4@translate_
$LN75@translate_:

; 384  :                 case 0x8b: strcpy( kbbuf, KBD_PF47            ); break;

  0063b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159719
  00642	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00647	e8 00 00 00 00	 call	 strcpy
  0064c	eb 49		 jmp	 SHORT $LN4@translate_
$LN76@translate_:

; 385  :                 case 0x8c: strcpy( kbbuf, KBD_PF48            ); break;

  0064e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159721
  00655	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0065a	e8 00 00 00 00	 call	 strcpy
  0065f	eb 36		 jmp	 SHORT $LN4@translate_
$LN77@translate_:

; 386  : 
; 387  :                 default:
; 388  :                 {
; 389  :                     /* EAT IT */
; 390  :                     kbbuf[0] = 0;

  00661	b8 01 00 00 00	 mov	 eax, 1
  00666	48 6b c0 00	 imul	 rax, rax, 0
  0066a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0066f	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 391  :                     kbbuf[1] = 0;

  00673	b8 01 00 00 00	 mov	 eax, 1
  00678	48 6b c0 01	 imul	 rax, rax, 1
  0067c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00681	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 392  :                     kbbuf[2] = 0;

  00685	b8 01 00 00 00	 mov	 eax, 1
  0068a	48 6b c0 02	 imul	 rax, rax, 2
  0068e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  00693	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN4@translate_:

; 393  :                     break;
; 394  : 
; 395  :                 } // end default
; 396  : 
; 397  :             } // end switch( ch2 )
; 398  : 
; 399  :             *pkblen = (int)strlen( kbbuf );      // inform caller #of chars

  00697	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kbbuf$[rsp]
  0069c	e8 00 00 00 00	 call	 strlen
  006a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pkblen$[rsp]
  006a6	89 01		 mov	 DWORD PTR [rcx], eax
$LN2@translate_:

; 400  :             break;
; 401  : 
; 402  :         } // end case: 0x00, 0xE0
; 403  : 
; 404  :     } // end switch( ch )
; 405  : }

  006a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  006ac	c3		 ret	 0
  006ad	0f 1f 00	 npad	 3
$LN80@translate_:
  006b0	00 00 00 00	 DD	 $LN29@translate_
  006b4	00 00 00 00	 DD	 $LN30@translate_
  006b8	00 00 00 00	 DD	 $LN31@translate_
  006bc	00 00 00 00	 DD	 $LN32@translate_
  006c0	00 00 00 00	 DD	 $LN33@translate_
  006c4	00 00 00 00	 DD	 $LN34@translate_
  006c8	00 00 00 00	 DD	 $LN35@translate_
  006cc	00 00 00 00	 DD	 $LN36@translate_
  006d0	00 00 00 00	 DD	 $LN37@translate_
  006d4	00 00 00 00	 DD	 $LN38@translate_
  006d8	00 00 00 00	 DD	 $LN11@translate_
  006dc	00 00 00 00	 DD	 $LN17@translate_
  006e0	00 00 00 00	 DD	 $LN15@translate_
  006e4	00 00 00 00	 DD	 $LN20@translate_
  006e8	00 00 00 00	 DD	 $LN19@translate_
  006ec	00 00 00 00	 DD	 $LN14@translate_
  006f0	00 00 00 00	 DD	 $LN18@translate_
  006f4	00 00 00 00	 DD	 $LN16@translate_
  006f8	00 00 00 00	 DD	 $LN12@translate_
  006fc	00 00 00 00	 DD	 $LN13@translate_
  00700	00 00 00 00	 DD	 $LN41@translate_
  00704	00 00 00 00	 DD	 $LN42@translate_
  00708	00 00 00 00	 DD	 $LN43@translate_
  0070c	00 00 00 00	 DD	 $LN44@translate_
  00710	00 00 00 00	 DD	 $LN45@translate_
  00714	00 00 00 00	 DD	 $LN46@translate_
  00718	00 00 00 00	 DD	 $LN47@translate_
  0071c	00 00 00 00	 DD	 $LN48@translate_
  00720	00 00 00 00	 DD	 $LN49@translate_
  00724	00 00 00 00	 DD	 $LN50@translate_
  00728	00 00 00 00	 DD	 $LN53@translate_
  0072c	00 00 00 00	 DD	 $LN54@translate_
  00730	00 00 00 00	 DD	 $LN55@translate_
  00734	00 00 00 00	 DD	 $LN56@translate_
  00738	00 00 00 00	 DD	 $LN57@translate_
  0073c	00 00 00 00	 DD	 $LN58@translate_
  00740	00 00 00 00	 DD	 $LN59@translate_
  00744	00 00 00 00	 DD	 $LN60@translate_
  00748	00 00 00 00	 DD	 $LN61@translate_
  0074c	00 00 00 00	 DD	 $LN62@translate_
  00750	00 00 00 00	 DD	 $LN65@translate_
  00754	00 00 00 00	 DD	 $LN66@translate_
  00758	00 00 00 00	 DD	 $LN67@translate_
  0075c	00 00 00 00	 DD	 $LN68@translate_
  00760	00 00 00 00	 DD	 $LN69@translate_
  00764	00 00 00 00	 DD	 $LN70@translate_
  00768	00 00 00 00	 DD	 $LN71@translate_
  0076c	00 00 00 00	 DD	 $LN72@translate_
  00770	00 00 00 00	 DD	 $LN73@translate_
  00774	00 00 00 00	 DD	 $LN74@translate_
  00778	00 00 00 00	 DD	 $LN22@translate_
  0077c	00 00 00 00	 DD	 $LN21@translate_
  00780	00 00 00 00	 DD	 $LN39@translate_
  00784	00 00 00 00	 DD	 $LN40@translate_
  00788	00 00 00 00	 DD	 $LN51@translate_
  0078c	00 00 00 00	 DD	 $LN52@translate_
  00790	00 00 00 00	 DD	 $LN63@translate_
  00794	00 00 00 00	 DD	 $LN64@translate_
  00798	00 00 00 00	 DD	 $LN75@translate_
  0079c	00 00 00 00	 DD	 $LN76@translate_
  007a0	00 00 00 00	 DD	 $LN23@translate_
  007a4	00 00 00 00	 DD	 $LN24@translate_
  007a8	00 00 00 00	 DD	 $LN25@translate_
  007ac	00 00 00 00	 DD	 $LN28@translate_
  007b0	00 00 00 00	 DD	 $LN27@translate_
  007b4	00 00 00 00	 DD	 $LN26@translate_
  007b8	00 00 00 00	 DD	 $LN77@translate_
$LN79@translate_:
  007bc	00		 DB	 0
  007bd	01		 DB	 1
  007be	02		 DB	 2
  007bf	03		 DB	 3
  007c0	04		 DB	 4
  007c1	05		 DB	 5
  007c2	06		 DB	 6
  007c3	07		 DB	 7
  007c4	08		 DB	 8
  007c5	09		 DB	 9
  007c6	42		 DB	 66			; 00000042H
  007c7	42		 DB	 66			; 00000042H
  007c8	0a		 DB	 10
  007c9	0b		 DB	 11
  007ca	0c		 DB	 12
  007cb	42		 DB	 66			; 00000042H
  007cc	0d		 DB	 13
  007cd	42		 DB	 66			; 00000042H
  007ce	0e		 DB	 14
  007cf	42		 DB	 66			; 00000042H
  007d0	0f		 DB	 15
  007d1	10		 DB	 16
  007d2	11		 DB	 17
  007d3	12		 DB	 18
  007d4	13		 DB	 19
  007d5	14		 DB	 20
  007d6	15		 DB	 21
  007d7	16		 DB	 22
  007d8	17		 DB	 23
  007d9	18		 DB	 24
  007da	19		 DB	 25
  007db	1a		 DB	 26
  007dc	1b		 DB	 27
  007dd	1c		 DB	 28
  007de	1d		 DB	 29
  007df	1e		 DB	 30
  007e0	1f		 DB	 31
  007e1	20		 DB	 32			; 00000020H
  007e2	21		 DB	 33			; 00000021H
  007e3	22		 DB	 34			; 00000022H
  007e4	23		 DB	 35			; 00000023H
  007e5	24		 DB	 36			; 00000024H
  007e6	25		 DB	 37			; 00000025H
  007e7	26		 DB	 38			; 00000026H
  007e8	27		 DB	 39			; 00000027H
  007e9	28		 DB	 40			; 00000028H
  007ea	29		 DB	 41			; 00000029H
  007eb	2a		 DB	 42			; 0000002aH
  007ec	2b		 DB	 43			; 0000002bH
  007ed	2c		 DB	 44			; 0000002cH
  007ee	2d		 DB	 45			; 0000002dH
  007ef	2e		 DB	 46			; 0000002eH
  007f0	2f		 DB	 47			; 0000002fH
  007f1	30		 DB	 48			; 00000030H
  007f2	31		 DB	 49			; 00000031H
  007f3	42		 DB	 66			; 00000042H
  007f4	42		 DB	 66			; 00000042H
  007f5	42		 DB	 66			; 00000042H
  007f6	32		 DB	 50			; 00000032H
  007f7	42		 DB	 66			; 00000042H
  007f8	33		 DB	 51			; 00000033H
  007f9	42		 DB	 66			; 00000042H
  007fa	42		 DB	 66			; 00000042H
  007fb	42		 DB	 66			; 00000042H
  007fc	42		 DB	 66			; 00000042H
  007fd	42		 DB	 66			; 00000042H
  007fe	42		 DB	 66			; 00000042H
  007ff	42		 DB	 66			; 00000042H
  00800	42		 DB	 66			; 00000042H
  00801	42		 DB	 66			; 00000042H
  00802	42		 DB	 66			; 00000042H
  00803	42		 DB	 66			; 00000042H
  00804	42		 DB	 66			; 00000042H
  00805	42		 DB	 66			; 00000042H
  00806	34		 DB	 52			; 00000034H
  00807	35		 DB	 53			; 00000035H
  00808	36		 DB	 54			; 00000036H
  00809	37		 DB	 55			; 00000037H
  0080a	38		 DB	 56			; 00000038H
  0080b	39		 DB	 57			; 00000039H
  0080c	3a		 DB	 58			; 0000003aH
  0080d	3b		 DB	 59			; 0000003bH
  0080e	3c		 DB	 60			; 0000003cH
  0080f	42		 DB	 66			; 00000042H
  00810	42		 DB	 66			; 00000042H
  00811	42		 DB	 66			; 00000042H
  00812	3d		 DB	 61			; 0000003dH
  00813	42		 DB	 66			; 00000042H
  00814	42		 DB	 66			; 00000042H
  00815	42		 DB	 66			; 00000042H
  00816	42		 DB	 66			; 00000042H
  00817	42		 DB	 66			; 00000042H
  00818	42		 DB	 66			; 00000042H
  00819	3e		 DB	 62			; 0000003eH
  0081a	42		 DB	 66			; 00000042H
  0081b	42		 DB	 66			; 00000042H
  0081c	3f		 DB	 63			; 0000003fH
  0081d	42		 DB	 66			; 00000042H
  0081e	40		 DB	 64			; 00000040H
  0081f	42		 DB	 66			; 00000042H
  00820	42		 DB	 66			; 00000042H
  00821	41		 DB	 65			; 00000041H
translate_keystroke ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
hStdErr$ = 32
dwNewInputMode$ = 40
dwNewOutputMode$ = 44
hStdIn$ = 48
csbi$ = 56
__$ArrayPad$ = 80
keybrd_fd$ = 112
save_and_set$ = 120
set_or_reset_console_mode PROC

; 31   : {

$LN80:
  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 32   :     CONSOLE_SCREEN_BUFFER_INFO  csbi;
; 33   :     HANDLE  hStdIn, hStdErr;
; 34   :     DWORD   dwNewInputMode;
; 35   :     DWORD   dwNewOutputMode;
; 36   : 
; 37   :     if ( ! _isatty( keybrd_fd ) )

  0001c	8b 4c 24 70	 mov	 ecx, DWORD PTR keybrd_fd$[rsp]
  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  00026	85 c0		 test	 eax, eax
  00028	75 16		 jne	 SHORT $LN50@set_or_res

; 38   :     {
; 39   :         errno = EBADF;

  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00030	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 40   :         return -1;

  00036	b8 ff ff ff ff	 mov	 eax, -1
  0003b	e9 0f 04 00 00	 jmp	 $LN1@set_or_res
$LN50@set_or_res:

; 41   :     }
; 42   : 
; 43   :     hStdIn  = (HANDLE) _get_osfhandle( keybrd_fd );

  00040	8b 4c 24 70	 mov	 ecx, DWORD PTR keybrd_fd$[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  0004a	48 89 44 24 30	 mov	 QWORD PTR hStdIn$[rsp], rax
$LN4@set_or_res:

; 44   :     ASSERT( hStdIn && INVALID_HANDLE_VALUE != hStdIn );

  0004f	48 83 7c 24 30
	00		 cmp	 QWORD PTR hStdIn$[rsp], 0
  00055	74 08		 je	 SHORT $LN52@set_or_res
  00057	48 83 7c 24 30
	ff		 cmp	 QWORD PTR hStdIn$[rsp], -1
  0005d	75 5c		 jne	 SHORT $LN51@set_or_res
$LN52@set_or_res:
$LN7@set_or_res:
  0005f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159183
  00066	41 b8 2c 00 00
	00		 mov	 r8d, 44			; 0000002cH
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159184
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159185
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00086	85 c0		 test	 eax, eax
  00088	74 20		 je	 SHORT $LN53@set_or_res
  0008a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159187
  00091	41 b8 2c 00 00
	00		 mov	 r8d, 44			; 0000002cH
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159188
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159189
  000a5	e8 00 00 00 00	 call	 DebuggerTrace
$LN53@set_or_res:
  000aa	33 c0		 xor	 eax, eax
  000ac	85 c0		 test	 eax, eax
  000ae	75 af		 jne	 SHORT $LN7@set_or_res
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000b6	85 c0		 test	 eax, eax
  000b8	74 01		 je	 SHORT $LN54@set_or_res
  000ba	cc		 int	 3
$LN54@set_or_res:
$LN51@set_or_res:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 8e		 jne	 SHORT $LN4@set_or_res

; 45   : 
; 46   :     hStdErr  = GetStdHandle( STD_ERROR_HANDLE );

  000c1	b9 f4 ff ff ff	 mov	 ecx, -12		; fffffff4H
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStdHandle
  000cc	48 89 44 24 20	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN10@set_or_res:

; 47   :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  000d1	48 83 7c 24 20
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  000d7	74 08		 je	 SHORT $LN56@set_or_res
  000d9	48 83 7c 24 20
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  000df	75 5c		 jne	 SHORT $LN55@set_or_res
$LN56@set_or_res:
$LN13@set_or_res:
  000e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159193
  000e8	41 b8 2f 00 00
	00		 mov	 r8d, 47			; 0000002fH
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159194
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159195
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00108	85 c0		 test	 eax, eax
  0010a	74 20		 je	 SHORT $LN57@set_or_res
  0010c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159197
  00113	41 b8 2f 00 00
	00		 mov	 r8d, 47			; 0000002fH
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159198
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159199
  00127	e8 00 00 00 00	 call	 DebuggerTrace
$LN57@set_or_res:
  0012c	33 c0		 xor	 eax, eax
  0012e	85 c0		 test	 eax, eax
  00130	75 af		 jne	 SHORT $LN13@set_or_res
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00138	85 c0		 test	 eax, eax
  0013a	74 01		 je	 SHORT $LN58@set_or_res
  0013c	cc		 int	 3
$LN58@set_or_res:
$LN55@set_or_res:
  0013d	33 c0		 xor	 eax, eax
  0013f	85 c0		 test	 eax, eax
  00141	75 8e		 jne	 SHORT $LN10@set_or_res

; 48   : 
; 49   :     if ( save_and_set )

  00143	0f bf 44 24 78	 movsx	 eax, WORD PTR save_and_set$[rsp]
  00148	85 c0		 test	 eax, eax
  0014a	0f 84 87 01 00
	00		 je	 $LN59@set_or_res
$LN16@set_or_res:

; 50   :     {
; 51   :         VERIFY( GetConsoleMode( hStdIn,  &g_dwConsoleInputMode  ) );

  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:g_dwConsoleInputMode
  00157	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hStdIn$[rsp]
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleMode
  00162	85 c0		 test	 eax, eax
  00164	75 5c		 jne	 SHORT $LN61@set_or_res
$LN19@set_or_res:
  00166	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159204
  0016d	41 b8 33 00 00
	00		 mov	 r8d, 51			; 00000033H
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159205
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159206
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00187	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0018d	85 c0		 test	 eax, eax
  0018f	74 20		 je	 SHORT $LN62@set_or_res
  00191	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159208
  00198	41 b8 33 00 00
	00		 mov	 r8d, 51			; 00000033H
  0019e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159209
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159210
  001ac	e8 00 00 00 00	 call	 DebuggerTrace
$LN62@set_or_res:
  001b1	33 c0		 xor	 eax, eax
  001b3	85 c0		 test	 eax, eax
  001b5	75 af		 jne	 SHORT $LN19@set_or_res
  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001bd	85 c0		 test	 eax, eax
  001bf	74 01		 je	 SHORT $LN63@set_or_res
  001c1	cc		 int	 3
$LN63@set_or_res:
$LN61@set_or_res:
  001c2	33 c0		 xor	 eax, eax
  001c4	85 c0		 test	 eax, eax
  001c6	75 88		 jne	 SHORT $LN16@set_or_res
$LN22@set_or_res:

; 52   :         VERIFY( GetConsoleMode( hStdErr, &g_dwConsoleOutputMode ) );

  001c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:g_dwConsoleOutputMode
  001cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  001d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleMode
  001da	85 c0		 test	 eax, eax
  001dc	75 5c		 jne	 SHORT $LN64@set_or_res
$LN25@set_or_res:
  001de	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159213
  001e5	41 b8 34 00 00
	00		 mov	 r8d, 52			; 00000034H
  001eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159214
  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159215
  001f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00205	85 c0		 test	 eax, eax
  00207	74 20		 je	 SHORT $LN65@set_or_res
  00209	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159217
  00210	41 b8 34 00 00
	00		 mov	 r8d, 52			; 00000034H
  00216	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159218
  0021d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159219
  00224	e8 00 00 00 00	 call	 DebuggerTrace
$LN65@set_or_res:
  00229	33 c0		 xor	 eax, eax
  0022b	85 c0		 test	 eax, eax
  0022d	75 af		 jne	 SHORT $LN25@set_or_res
  0022f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00235	85 c0		 test	 eax, eax
  00237	74 01		 je	 SHORT $LN66@set_or_res
  00239	cc		 int	 3
$LN66@set_or_res:
$LN64@set_or_res:
  0023a	33 c0		 xor	 eax, eax
  0023c	85 c0		 test	 eax, eax
  0023e	75 88		 jne	 SHORT $LN22@set_or_res
$LN28@set_or_res:

; 53   :         VERIFY( GetConsoleScreenBufferInfo( hStdErr, &csbi ) );

  00240	48 8d 54 24 38	 lea	 rdx, QWORD PTR csbi$[rsp]
  00245	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo
  00250	85 c0		 test	 eax, eax
  00252	75 5c		 jne	 SHORT $LN67@set_or_res
$LN31@set_or_res:
  00254	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159222
  0025b	41 b8 35 00 00
	00		 mov	 r8d, 53			; 00000035H
  00261	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159223
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159224
  0026f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00275	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0027b	85 c0		 test	 eax, eax
  0027d	74 20		 je	 SHORT $LN68@set_or_res
  0027f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159226
  00286	41 b8 35 00 00
	00		 mov	 r8d, 53			; 00000035H
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159227
  00293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159228
  0029a	e8 00 00 00 00	 call	 DebuggerTrace
$LN68@set_or_res:
  0029f	33 c0		 xor	 eax, eax
  002a1	85 c0		 test	 eax, eax
  002a3	75 af		 jne	 SHORT $LN31@set_or_res
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002ab	85 c0		 test	 eax, eax
  002ad	74 01		 je	 SHORT $LN69@set_or_res
  002af	cc		 int	 3
$LN69@set_or_res:
$LN67@set_or_res:
  002b0	33 c0		 xor	 eax, eax
  002b2	85 c0		 test	 eax, eax
  002b4	75 8a		 jne	 SHORT $LN28@set_or_res

; 54   :         g_wDefaultAttrib = csbi.wAttributes;

  002b6	0f b7 44 24 40	 movzx	 eax, WORD PTR csbi$[rsp+8]
  002bb	66 89 05 00 00
	00 00		 mov	 WORD PTR g_wDefaultAttrib, ax

; 55   :         dwNewInputMode  = 0;

  002c2	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR dwNewInputMode$[rsp], 0

; 56   :         dwNewOutputMode = 0;

  002ca	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR dwNewOutputMode$[rsp], 0

; 57   :     }

  002d2	e9 8c 00 00 00	 jmp	 $LN60@set_or_res
$LN59@set_or_res:
$LN34@set_or_res:

; 58   :     else // (restore/reset)
; 59   :     {
; 60   :         VERIFY( SetConsoleTextAttribute( hStdErr, g_wDefaultAttrib ) );

  002d7	0f b7 15 00 00
	00 00		 movzx	 edx, WORD PTR g_wDefaultAttrib
  002de	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleTextAttribute
  002e9	85 c0		 test	 eax, eax
  002eb	75 5c		 jne	 SHORT $LN70@set_or_res
$LN37@set_or_res:
  002ed	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159231
  002f4	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159232
  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159233
  00308	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0030e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00314	85 c0		 test	 eax, eax
  00316	74 20		 je	 SHORT $LN71@set_or_res
  00318	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159235
  0031f	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00325	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159236
  0032c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159237
  00333	e8 00 00 00 00	 call	 DebuggerTrace
$LN71@set_or_res:
  00338	33 c0		 xor	 eax, eax
  0033a	85 c0		 test	 eax, eax
  0033c	75 af		 jne	 SHORT $LN37@set_or_res
  0033e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00344	85 c0		 test	 eax, eax
  00346	74 01		 je	 SHORT $LN72@set_or_res
  00348	cc		 int	 3
$LN72@set_or_res:
$LN70@set_or_res:
  00349	33 c0		 xor	 eax, eax
  0034b	85 c0		 test	 eax, eax
  0034d	75 88		 jne	 SHORT $LN34@set_or_res

; 61   :         dwNewInputMode  = g_dwConsoleInputMode;

  0034f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR g_dwConsoleInputMode
  00355	89 44 24 28	 mov	 DWORD PTR dwNewInputMode$[rsp], eax

; 62   :         dwNewOutputMode = g_dwConsoleOutputMode;

  00359	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR g_dwConsoleOutputMode
  0035f	89 44 24 2c	 mov	 DWORD PTR dwNewOutputMode$[rsp], eax
$LN60@set_or_res:
$LN40@set_or_res:

; 63   :     }
; 64   : 
; 65   :     VERIFY( SetConsoleMode( hStdIn,  dwNewInputMode  ) );

  00363	8b 54 24 28	 mov	 edx, DWORD PTR dwNewInputMode$[rsp]
  00367	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hStdIn$[rsp]
  0036c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleMode
  00372	85 c0		 test	 eax, eax
  00374	75 5c		 jne	 SHORT $LN73@set_or_res
$LN43@set_or_res:
  00376	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159240
  0037d	41 b8 41 00 00
	00		 mov	 r8d, 65			; 00000041H
  00383	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159241
  0038a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159242
  00391	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0039d	85 c0		 test	 eax, eax
  0039f	74 20		 je	 SHORT $LN74@set_or_res
  003a1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159244
  003a8	41 b8 41 00 00
	00		 mov	 r8d, 65			; 00000041H
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159245
  003b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159246
  003bc	e8 00 00 00 00	 call	 DebuggerTrace
$LN74@set_or_res:
  003c1	33 c0		 xor	 eax, eax
  003c3	85 c0		 test	 eax, eax
  003c5	75 af		 jne	 SHORT $LN43@set_or_res
  003c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  003cd	85 c0		 test	 eax, eax
  003cf	74 01		 je	 SHORT $LN75@set_or_res
  003d1	cc		 int	 3
$LN75@set_or_res:
$LN73@set_or_res:
  003d2	33 c0		 xor	 eax, eax
  003d4	85 c0		 test	 eax, eax
  003d6	75 8b		 jne	 SHORT $LN40@set_or_res
$LN46@set_or_res:

; 66   :     VERIFY( SetConsoleMode( hStdErr, dwNewOutputMode ) );

  003d8	8b 54 24 2c	 mov	 edx, DWORD PTR dwNewOutputMode$[rsp]
  003dc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  003e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleMode
  003e7	85 c0		 test	 eax, eax
  003e9	75 5c		 jne	 SHORT $LN76@set_or_res
$LN49@set_or_res:
  003eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159249
  003f2	41 b8 42 00 00
	00		 mov	 r8d, 66			; 00000042H
  003f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159250
  003ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159251
  00406	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0040c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00412	85 c0		 test	 eax, eax
  00414	74 20		 je	 SHORT $LN77@set_or_res
  00416	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159253
  0041d	41 b8 42 00 00
	00		 mov	 r8d, 66			; 00000042H
  00423	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159254
  0042a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159255
  00431	e8 00 00 00 00	 call	 DebuggerTrace
$LN77@set_or_res:
  00436	33 c0		 xor	 eax, eax
  00438	85 c0		 test	 eax, eax
  0043a	75 af		 jne	 SHORT $LN49@set_or_res
  0043c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00442	85 c0		 test	 eax, eax
  00444	74 01		 je	 SHORT $LN78@set_or_res
  00446	cc		 int	 3
$LN78@set_or_res:
$LN76@set_or_res:
  00447	33 c0		 xor	 eax, eax
  00449	85 c0		 test	 eax, eax
  0044b	75 8b		 jne	 SHORT $LN46@set_or_res

; 67   : 
; 68   :     return 0;

  0044d	33 c0		 xor	 eax, eax
$LN1@set_or_res:

; 69   : }

  0044f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00454	48 33 cc	 xor	 rcx, rsp
  00457	e8 00 00 00 00	 call	 __security_check_cookie
  0045c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00460	c3		 ret	 0
set_or_reset_console_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
ptConsole$ = 48
cons_fd$ = 52
hStdErr$ = 56
dwCellsWritten$ = 64
csbi$ = 72
__$ArrayPad$ = 96
confp$ = 128
erase_to_eol PROC

; 244  : {

$LN42:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 245  :     CONSOLE_SCREEN_BUFFER_INFO  csbi;
; 246  :     HANDLE  hStdErr;
; 247  :     DWORD   dwCellsWritten;
; 248  :     COORD   ptConsole;
; 249  :     int     cons_fd;
; 250  : 
; 251  :     if ( !confp )

  00018	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR confp$[rsp], 0
  00021	75 16		 jne	 SHORT $LN26@erase_to_e

; 252  :     {
; 253  :         errno = EINVAL;

  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00029	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 254  :         return -1;

  0002f	b8 ff ff ff ff	 mov	 eax, -1
  00034	e9 64 02 00 00	 jmp	 $LN1@erase_to_e
$LN26@erase_to_e:

; 255  :     }
; 256  : 
; 257  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR confp$[rsp]
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00047	89 44 24 34	 mov	 DWORD PTR cons_fd$[rsp], eax
  0004b	8b 4c 24 34	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  00055	85 c0		 test	 eax, eax
  00057	75 16		 jne	 SHORT $LN27@erase_to_e

; 258  :     {
; 259  :         errno = EBADF;

  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0005f	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 260  :         return -1;

  00065	b8 ff ff ff ff	 mov	 eax, -1
  0006a	e9 2e 02 00 00	 jmp	 $LN1@erase_to_e
$LN27@erase_to_e:

; 261  :     }
; 262  : 
; 263  :     hStdErr = (HANDLE) _get_osfhandle( cons_fd );

  0006f	8b 4c 24 34	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  00079	48 89 44 24 38	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN4@erase_to_e:

; 264  :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  0007e	48 83 7c 24 38
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  00084	74 08		 je	 SHORT $LN29@erase_to_e
  00086	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  0008c	75 5c		 jne	 SHORT $LN28@erase_to_e
$LN29@erase_to_e:
$LN7@erase_to_e:
  0008e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159537
  00095	41 b8 08 01 00
	00		 mov	 r8d, 264		; 00000108H
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159538
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159539
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000b5	85 c0		 test	 eax, eax
  000b7	74 20		 je	 SHORT $LN30@erase_to_e
  000b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159541
  000c0	41 b8 08 01 00
	00		 mov	 r8d, 264		; 00000108H
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159542
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159543
  000d4	e8 00 00 00 00	 call	 DebuggerTrace
$LN30@erase_to_e:
  000d9	33 c0		 xor	 eax, eax
  000db	85 c0		 test	 eax, eax
  000dd	75 af		 jne	 SHORT $LN7@erase_to_e
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000e5	85 c0		 test	 eax, eax
  000e7	74 01		 je	 SHORT $LN31@erase_to_e
  000e9	cc		 int	 3
$LN31@erase_to_e:
$LN28@erase_to_e:
  000ea	33 c0		 xor	 eax, eax
  000ec	85 c0		 test	 eax, eax
  000ee	75 8e		 jne	 SHORT $LN4@erase_to_e
$LN10@erase_to_e:

; 265  : 
; 266  :     VERIFY( GetConsoleScreenBufferInfo( hStdErr, &csbi ) ); ptConsole = csbi.dwCursorPosition;

  000f0	48 8d 54 24 48	 lea	 rdx, QWORD PTR csbi$[rsp]
  000f5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo
  00100	85 c0		 test	 eax, eax
  00102	75 5c		 jne	 SHORT $LN32@erase_to_e
$LN13@erase_to_e:
  00104	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159546
  0010b	41 b8 0a 01 00
	00		 mov	 r8d, 266		; 0000010aH
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159547
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159548
  0011f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0012b	85 c0		 test	 eax, eax
  0012d	74 20		 je	 SHORT $LN33@erase_to_e
  0012f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159550
  00136	41 b8 0a 01 00
	00		 mov	 r8d, 266		; 0000010aH
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159551
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159552
  0014a	e8 00 00 00 00	 call	 DebuggerTrace
$LN33@erase_to_e:
  0014f	33 c0		 xor	 eax, eax
  00151	85 c0		 test	 eax, eax
  00153	75 af		 jne	 SHORT $LN13@erase_to_e
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0015b	85 c0		 test	 eax, eax
  0015d	74 01		 je	 SHORT $LN34@erase_to_e
  0015f	cc		 int	 3
$LN34@erase_to_e:
$LN32@erase_to_e:
  00160	33 c0		 xor	 eax, eax
  00162	85 c0		 test	 eax, eax
  00164	75 8a		 jne	 SHORT $LN10@erase_to_e
  00166	8b 44 24 4c	 mov	 eax, DWORD PTR csbi$[rsp+4]
  0016a	89 44 24 30	 mov	 DWORD PTR ptConsole$[rsp], eax
$LN16@erase_to_e:

; 267  :     VERIFY( FillConsoleOutputAttribute( hStdErr, csbi.wAttributes, csbi.dwSize.X - ptConsole.X, ptConsole, &dwCellsWritten ) );

  0016e	0f bf 44 24 48	 movsx	 eax, WORD PTR csbi$[rsp]
  00173	0f bf 4c 24 30	 movsx	 ecx, WORD PTR ptConsole$[rsp]
  00178	2b c1		 sub	 eax, ecx
  0017a	48 8d 4c 24 40	 lea	 rcx, QWORD PTR dwCellsWritten$[rsp]
  0017f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00184	44 8b 4c 24 30	 mov	 r9d, DWORD PTR ptConsole$[rsp]
  00189	44 8b c0	 mov	 r8d, eax
  0018c	0f b7 54 24 50	 movzx	 edx, WORD PTR csbi$[rsp+8]
  00191	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputAttribute
  0019c	85 c0		 test	 eax, eax
  0019e	75 5c		 jne	 SHORT $LN35@erase_to_e
$LN19@erase_to_e:
  001a0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159555
  001a7	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159556
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159557
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001c7	85 c0		 test	 eax, eax
  001c9	74 20		 je	 SHORT $LN36@erase_to_e
  001cb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159559
  001d2	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159560
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159561
  001e6	e8 00 00 00 00	 call	 DebuggerTrace
$LN36@erase_to_e:
  001eb	33 c0		 xor	 eax, eax
  001ed	85 c0		 test	 eax, eax
  001ef	75 af		 jne	 SHORT $LN19@erase_to_e
  001f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001f7	85 c0		 test	 eax, eax
  001f9	74 01		 je	 SHORT $LN37@erase_to_e
  001fb	cc		 int	 3
$LN37@erase_to_e:
$LN35@erase_to_e:
  001fc	33 c0		 xor	 eax, eax
  001fe	85 c0		 test	 eax, eax
  00200	0f 85 68 ff ff
	ff		 jne	 $LN16@erase_to_e
$LN22@erase_to_e:

; 268  :     VERIFY( FillConsoleOutputCharacter( hStdErr,     ' ',          csbi.dwSize.X - ptConsole.X, ptConsole, &dwCellsWritten ) );

  00206	0f bf 44 24 48	 movsx	 eax, WORD PTR csbi$[rsp]
  0020b	0f bf 4c 24 30	 movsx	 ecx, WORD PTR ptConsole$[rsp]
  00210	2b c1		 sub	 eax, ecx
  00212	48 8d 4c 24 40	 lea	 rcx, QWORD PTR dwCellsWritten$[rsp]
  00217	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0021c	44 8b 4c 24 30	 mov	 r9d, DWORD PTR ptConsole$[rsp]
  00221	44 8b c0	 mov	 r8d, eax
  00224	b2 20		 mov	 dl, 32			; 00000020H
  00226	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputCharacterA
  00231	85 c0		 test	 eax, eax
  00233	75 5c		 jne	 SHORT $LN38@erase_to_e
$LN25@erase_to_e:
  00235	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159564
  0023c	41 b8 0c 01 00
	00		 mov	 r8d, 268		; 0000010cH
  00242	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159565
  00249	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159566
  00250	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00256	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0025c	85 c0		 test	 eax, eax
  0025e	74 20		 je	 SHORT $LN39@erase_to_e
  00260	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159568
  00267	41 b8 0c 01 00
	00		 mov	 r8d, 268		; 0000010cH
  0026d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159569
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159570
  0027b	e8 00 00 00 00	 call	 DebuggerTrace
$LN39@erase_to_e:
  00280	33 c0		 xor	 eax, eax
  00282	85 c0		 test	 eax, eax
  00284	75 af		 jne	 SHORT $LN25@erase_to_e
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0028c	85 c0		 test	 eax, eax
  0028e	74 01		 je	 SHORT $LN40@erase_to_e
  00290	cc		 int	 3
$LN40@erase_to_e:
$LN38@erase_to_e:
  00291	33 c0		 xor	 eax, eax
  00293	85 c0		 test	 eax, eax
  00295	0f 85 6b ff ff
	ff		 jne	 $LN22@erase_to_e

; 269  : 
; 270  :     return 0;

  0029b	33 c0		 xor	 eax, eax
$LN1@erase_to_e:

; 271  : }

  0029d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002a2	48 33 cc	 xor	 rcx, rsp
  002a5	e8 00 00 00 00	 call	 __security_check_cookie
  002aa	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002ae	c3		 ret	 0
erase_to_eol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
ptConsole$ = 48
hStdErr$ = 56
cons_fd$ = 64
dwNumCells$ = 68
dwCellsWritten$ = 72
csbi$ = 80
__$ArrayPad$ = 104
confp$ = 128
clear_screen PROC

; 210  : {

$LN60:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 211  :     CONSOLE_SCREEN_BUFFER_INFO  csbi;
; 212  :     HANDLE  hStdErr;
; 213  :     DWORD   dwNumCells, dwCellsWritten;
; 214  :     COORD   ptConsole = { 0, 0 };

  00018	33 c0		 xor	 eax, eax
  0001a	66 89 44 24 30	 mov	 WORD PTR ptConsole$[rsp], ax
  0001f	33 c0		 xor	 eax, eax
  00021	66 89 44 24 32	 mov	 WORD PTR ptConsole$[rsp+2], ax

; 215  :     int     cons_fd;
; 216  : 
; 217  :     if ( !confp )

  00026	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR confp$[rsp], 0
  0002f	75 16		 jne	 SHORT $LN38@clear_scre

; 218  :     {
; 219  :         errno = EINVAL;

  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00037	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 220  :         return -1;

  0003d	b8 ff ff ff ff	 mov	 eax, -1
  00042	e9 44 03 00 00	 jmp	 $LN1@clear_scre
$LN38@clear_scre:

; 221  :     }
; 222  : 
; 223  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  00047	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR confp$[rsp]
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  00055	89 44 24 40	 mov	 DWORD PTR cons_fd$[rsp], eax
  00059	8b 4c 24 40	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  00063	85 c0		 test	 eax, eax
  00065	75 16		 jne	 SHORT $LN39@clear_scre

; 224  :     {
; 225  :         errno = EBADF;

  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0006d	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 226  :         return -1;

  00073	b8 ff ff ff ff	 mov	 eax, -1
  00078	e9 0e 03 00 00	 jmp	 $LN1@clear_scre
$LN39@clear_scre:

; 227  :     }
; 228  : 
; 229  :     hStdErr = (HANDLE) _get_osfhandle( cons_fd );

  0007d	8b 4c 24 40	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  00087	48 89 44 24 38	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN4@clear_scre:

; 230  :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  0008c	48 83 7c 24 38
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  00092	74 08		 je	 SHORT $LN41@clear_scre
  00094	48 83 7c 24 38
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  0009a	75 5c		 jne	 SHORT $LN40@clear_scre
$LN41@clear_scre:
$LN7@clear_scre:
  0009c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159445
  000a3	41 b8 e6 00 00
	00		 mov	 r8d, 230		; 000000e6H
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159446
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159447
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000c3	85 c0		 test	 eax, eax
  000c5	74 20		 je	 SHORT $LN42@clear_scre
  000c7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159449
  000ce	41 b8 e6 00 00
	00		 mov	 r8d, 230		; 000000e6H
  000d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159450
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159451
  000e2	e8 00 00 00 00	 call	 DebuggerTrace
$LN42@clear_scre:
  000e7	33 c0		 xor	 eax, eax
  000e9	85 c0		 test	 eax, eax
  000eb	75 af		 jne	 SHORT $LN7@clear_scre
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000f3	85 c0		 test	 eax, eax
  000f5	74 01		 je	 SHORT $LN43@clear_scre
  000f7	cc		 int	 3
$LN43@clear_scre:
$LN40@clear_scre:
  000f8	33 c0		 xor	 eax, eax
  000fa	85 c0		 test	 eax, eax
  000fc	75 8e		 jne	 SHORT $LN4@clear_scre
$LN10@clear_scre:

; 231  : 
; 232  :     VERIFY( GetConsoleScreenBufferInfo( hStdErr, &csbi ) ); dwNumCells = csbi.dwSize.X * csbi.dwSize.Y;

  000fe	48 8d 54 24 50	 lea	 rdx, QWORD PTR csbi$[rsp]
  00103	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo
  0010e	85 c0		 test	 eax, eax
  00110	75 5c		 jne	 SHORT $LN44@clear_scre
$LN13@clear_scre:
  00112	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159454
  00119	41 b8 e8 00 00
	00		 mov	 r8d, 232		; 000000e8H
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159455
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159456
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00139	85 c0		 test	 eax, eax
  0013b	74 20		 je	 SHORT $LN45@clear_scre
  0013d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159458
  00144	41 b8 e8 00 00
	00		 mov	 r8d, 232		; 000000e8H
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159459
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159460
  00158	e8 00 00 00 00	 call	 DebuggerTrace
$LN45@clear_scre:
  0015d	33 c0		 xor	 eax, eax
  0015f	85 c0		 test	 eax, eax
  00161	75 af		 jne	 SHORT $LN13@clear_scre
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00169	85 c0		 test	 eax, eax
  0016b	74 01		 je	 SHORT $LN46@clear_scre
  0016d	cc		 int	 3
$LN46@clear_scre:
$LN44@clear_scre:
  0016e	33 c0		 xor	 eax, eax
  00170	85 c0		 test	 eax, eax
  00172	75 8a		 jne	 SHORT $LN10@clear_scre
  00174	0f bf 44 24 50	 movsx	 eax, WORD PTR csbi$[rsp]
  00179	0f bf 4c 24 52	 movsx	 ecx, WORD PTR csbi$[rsp+2]
  0017e	0f af c1	 imul	 eax, ecx
  00181	89 44 24 44	 mov	 DWORD PTR dwNumCells$[rsp], eax
$LN16@clear_scre:

; 233  :     VERIFY( FillConsoleOutputCharacter( hStdErr, ' ', dwNumCells, ptConsole, &dwCellsWritten ) );

  00185	48 8d 44 24 48	 lea	 rax, QWORD PTR dwCellsWritten$[rsp]
  0018a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018f	44 8b 4c 24 30	 mov	 r9d, DWORD PTR ptConsole$[rsp]
  00194	44 8b 44 24 44	 mov	 r8d, DWORD PTR dwNumCells$[rsp]
  00199	b2 20		 mov	 dl, 32			; 00000020H
  0019b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputCharacterA
  001a6	85 c0		 test	 eax, eax
  001a8	75 5c		 jne	 SHORT $LN47@clear_scre
$LN19@clear_scre:
  001aa	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159463
  001b1	41 b8 e9 00 00
	00		 mov	 r8d, 233		; 000000e9H
  001b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159464
  001be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159465
  001c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001d1	85 c0		 test	 eax, eax
  001d3	74 20		 je	 SHORT $LN48@clear_scre
  001d5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159467
  001dc	41 b8 e9 00 00
	00		 mov	 r8d, 233		; 000000e9H
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159468
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159469
  001f0	e8 00 00 00 00	 call	 DebuggerTrace
$LN48@clear_scre:
  001f5	33 c0		 xor	 eax, eax
  001f7	85 c0		 test	 eax, eax
  001f9	75 af		 jne	 SHORT $LN19@clear_scre
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00201	85 c0		 test	 eax, eax
  00203	74 01		 je	 SHORT $LN49@clear_scre
  00205	cc		 int	 3
$LN49@clear_scre:
$LN47@clear_scre:
  00206	33 c0		 xor	 eax, eax
  00208	85 c0		 test	 eax, eax
  0020a	0f 85 75 ff ff
	ff		 jne	 $LN16@clear_scre
$LN22@clear_scre:

; 234  :     VERIFY( GetConsoleScreenBufferInfo( hStdErr, &csbi ) );

  00210	48 8d 54 24 50	 lea	 rdx, QWORD PTR csbi$[rsp]
  00215	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  0021a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo
  00220	85 c0		 test	 eax, eax
  00222	75 5c		 jne	 SHORT $LN50@clear_scre
$LN25@clear_scre:
  00224	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159472
  0022b	41 b8 ea 00 00
	00		 mov	 r8d, 234		; 000000eaH
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159473
  00238	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159474
  0023f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00245	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0024b	85 c0		 test	 eax, eax
  0024d	74 20		 je	 SHORT $LN51@clear_scre
  0024f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159476
  00256	41 b8 ea 00 00
	00		 mov	 r8d, 234		; 000000eaH
  0025c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159477
  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159478
  0026a	e8 00 00 00 00	 call	 DebuggerTrace
$LN51@clear_scre:
  0026f	33 c0		 xor	 eax, eax
  00271	85 c0		 test	 eax, eax
  00273	75 af		 jne	 SHORT $LN25@clear_scre
  00275	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0027b	85 c0		 test	 eax, eax
  0027d	74 01		 je	 SHORT $LN52@clear_scre
  0027f	cc		 int	 3
$LN52@clear_scre:
$LN50@clear_scre:
  00280	33 c0		 xor	 eax, eax
  00282	85 c0		 test	 eax, eax
  00284	75 8a		 jne	 SHORT $LN22@clear_scre
$LN28@clear_scre:

; 235  :     VERIFY( FillConsoleOutputAttribute( hStdErr, csbi.wAttributes, dwNumCells, ptConsole, &dwCellsWritten ) );

  00286	48 8d 44 24 48	 lea	 rax, QWORD PTR dwCellsWritten$[rsp]
  0028b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00290	44 8b 4c 24 30	 mov	 r9d, DWORD PTR ptConsole$[rsp]
  00295	44 8b 44 24 44	 mov	 r8d, DWORD PTR dwNumCells$[rsp]
  0029a	0f b7 54 24 58	 movzx	 edx, WORD PTR csbi$[rsp+8]
  0029f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  002a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillConsoleOutputAttribute
  002aa	85 c0		 test	 eax, eax
  002ac	75 5c		 jne	 SHORT $LN53@clear_scre
$LN31@clear_scre:
  002ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159481
  002b5	41 b8 eb 00 00
	00		 mov	 r8d, 235		; 000000ebH
  002bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159482
  002c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159483
  002c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  002cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002d5	85 c0		 test	 eax, eax
  002d7	74 20		 je	 SHORT $LN54@clear_scre
  002d9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159485
  002e0	41 b8 eb 00 00
	00		 mov	 r8d, 235		; 000000ebH
  002e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159486
  002ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159487
  002f4	e8 00 00 00 00	 call	 DebuggerTrace
$LN54@clear_scre:
  002f9	33 c0		 xor	 eax, eax
  002fb	85 c0		 test	 eax, eax
  002fd	75 af		 jne	 SHORT $LN31@clear_scre
  002ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00305	85 c0		 test	 eax, eax
  00307	74 01		 je	 SHORT $LN55@clear_scre
  00309	cc		 int	 3
$LN55@clear_scre:
$LN53@clear_scre:
  0030a	33 c0		 xor	 eax, eax
  0030c	85 c0		 test	 eax, eax
  0030e	0f 85 72 ff ff
	ff		 jne	 $LN28@clear_scre
$LN34@clear_scre:

; 236  :     VERIFY( SetConsoleCursorPosition  ( hStdErr, ptConsole ) );

  00314	8b 54 24 30	 mov	 edx, DWORD PTR ptConsole$[rsp]
  00318	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  0031d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCursorPosition
  00323	85 c0		 test	 eax, eax
  00325	75 5c		 jne	 SHORT $LN56@clear_scre
$LN37@clear_scre:
  00327	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159490
  0032e	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  00334	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159491
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159492
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00348	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0034e	85 c0		 test	 eax, eax
  00350	74 20		 je	 SHORT $LN57@clear_scre
  00352	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159494
  00359	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  0035f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159495
  00366	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159496
  0036d	e8 00 00 00 00	 call	 DebuggerTrace
$LN57@clear_scre:
  00372	33 c0		 xor	 eax, eax
  00374	85 c0		 test	 eax, eax
  00376	75 af		 jne	 SHORT $LN37@clear_scre
  00378	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0037e	85 c0		 test	 eax, eax
  00380	74 01		 je	 SHORT $LN58@clear_scre
  00382	cc		 int	 3
$LN58@clear_scre:
$LN56@clear_scre:
  00383	33 c0		 xor	 eax, eax
  00385	85 c0		 test	 eax, eax
  00387	75 8b		 jne	 SHORT $LN34@clear_scre

; 237  : 
; 238  :     return 0;

  00389	33 c0		 xor	 eax, eax
$LN1@clear_scre:

; 239  : }

  0038b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00390	48 33 cc	 xor	 rcx, rsp
  00393	e8 00 00 00 00	 call	 __security_check_cookie
  00398	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0039c	c3		 ret	 0
clear_screen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
cons_fd$ = 32
ptConsole$ = 36
hStdErr$ = 40
csbi$ = 48
__$ArrayPad$ = 72
confp$ = 96
rowY1$ = 104
colX1$ = 112
set_screen_pos PROC

; 163  : {

$LN35:
  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 164  :     CONSOLE_SCREEN_BUFFER_INFO  csbi;
; 165  :     HANDLE  hStdErr;
; 166  :     COORD   ptConsole;
; 167  :     int     cons_fd;
; 168  : 
; 169  :     if ( !confp )

  00023	48 83 7c 24 60
	00		 cmp	 QWORD PTR confp$[rsp], 0
  00029	75 16		 jne	 SHORT $LN20@set_screen

; 170  :     {
; 171  :         errno = EINVAL;

  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00031	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 172  :         return -1;

  00037	b8 ff ff ff ff	 mov	 eax, -1
  0003c	e9 05 02 00 00	 jmp	 $LN1@set_screen
$LN20@set_screen:

; 173  :     }
; 174  : 
; 175  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  00041	48 8b 4c 24 60	 mov	 rcx, QWORD PTR confp$[rsp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0004c	89 44 24 20	 mov	 DWORD PTR cons_fd$[rsp], eax
  00050	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  0005a	85 c0		 test	 eax, eax
  0005c	75 16		 jne	 SHORT $LN21@set_screen

; 176  :     {
; 177  :         errno = EBADF;

  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00064	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 178  :         return -1;

  0006a	b8 ff ff ff ff	 mov	 eax, -1
  0006f	e9 d2 01 00 00	 jmp	 $LN1@set_screen
$LN21@set_screen:

; 179  :     }
; 180  : 
; 181  :     hStdErr = (HANDLE) _get_osfhandle( cons_fd );

  00074	8b 4c 24 20	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  0007e	48 89 44 24 28	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN4@set_screen:

; 182  :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  00083	48 83 7c 24 28
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  00089	74 08		 je	 SHORT $LN23@set_screen
  0008b	48 83 7c 24 28
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  00091	75 5c		 jne	 SHORT $LN22@set_screen
$LN23@set_screen:
$LN7@set_screen:
  00093	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159365
  0009a	41 b8 b6 00 00
	00		 mov	 r8d, 182		; 000000b6H
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159366
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159367
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000ba	85 c0		 test	 eax, eax
  000bc	74 20		 je	 SHORT $LN24@set_screen
  000be	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159369
  000c5	41 b8 b6 00 00
	00		 mov	 r8d, 182		; 000000b6H
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159370
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159371
  000d9	e8 00 00 00 00	 call	 DebuggerTrace
$LN24@set_screen:
  000de	33 c0		 xor	 eax, eax
  000e0	85 c0		 test	 eax, eax
  000e2	75 af		 jne	 SHORT $LN7@set_screen
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000ea	85 c0		 test	 eax, eax
  000ec	74 01		 je	 SHORT $LN25@set_screen
  000ee	cc		 int	 3
$LN25@set_screen:
$LN22@set_screen:
  000ef	33 c0		 xor	 eax, eax
  000f1	85 c0		 test	 eax, eax
  000f3	75 8e		 jne	 SHORT $LN4@set_screen
$LN10@set_screen:

; 183  : 
; 184  :     VERIFY( GetConsoleScreenBufferInfo( hStdErr, &csbi ) );

  000f5	48 8d 54 24 30	 lea	 rdx, QWORD PTR csbi$[rsp]
  000fa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  000ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetConsoleScreenBufferInfo
  00105	85 c0		 test	 eax, eax
  00107	75 5c		 jne	 SHORT $LN26@set_screen
$LN13@set_screen:
  00109	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159374
  00110	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159375
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159376
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00130	85 c0		 test	 eax, eax
  00132	74 20		 je	 SHORT $LN27@set_screen
  00134	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159378
  0013b	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159379
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159380
  0014f	e8 00 00 00 00	 call	 DebuggerTrace
$LN27@set_screen:
  00154	33 c0		 xor	 eax, eax
  00156	85 c0		 test	 eax, eax
  00158	75 af		 jne	 SHORT $LN13@set_screen
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00160	85 c0		 test	 eax, eax
  00162	74 01		 je	 SHORT $LN28@set_screen
  00164	cc		 int	 3
$LN28@set_screen:
$LN26@set_screen:
  00165	33 c0		 xor	 eax, eax
  00167	85 c0		 test	 eax, eax
  00169	75 8a		 jne	 SHORT $LN10@set_screen

; 185  : 
; 186  :     // Note: ANSI escape codes are 1-based, whereas
; 187  :     // SetConsoleCursorPosition values are 0-based...
; 188  : 
; 189  :     if (0
; 190  :         || colX1 < 1 || colX1 > csbi.dwSize.X
; 191  :         || rowY1 < 1 || rowY1 > csbi.dwSize.Y

  0016b	33 c0		 xor	 eax, eax
  0016d	85 c0		 test	 eax, eax
  0016f	75 30		 jne	 SHORT $LN30@set_screen
  00171	0f bf 44 24 70	 movsx	 eax, WORD PTR colX1$[rsp]
  00176	83 f8 01	 cmp	 eax, 1
  00179	7c 26		 jl	 SHORT $LN30@set_screen
  0017b	0f bf 44 24 70	 movsx	 eax, WORD PTR colX1$[rsp]
  00180	0f bf 4c 24 30	 movsx	 ecx, WORD PTR csbi$[rsp]
  00185	3b c1		 cmp	 eax, ecx
  00187	7f 18		 jg	 SHORT $LN30@set_screen
  00189	0f bf 44 24 68	 movsx	 eax, WORD PTR rowY1$[rsp]
  0018e	83 f8 01	 cmp	 eax, 1
  00191	7c 0e		 jl	 SHORT $LN30@set_screen
  00193	0f bf 44 24 68	 movsx	 eax, WORD PTR rowY1$[rsp]
  00198	0f bf 4c 24 32	 movsx	 ecx, WORD PTR csbi$[rsp+2]
  0019d	3b c1		 cmp	 eax, ecx
  0019f	7e 16		 jle	 SHORT $LN29@set_screen
$LN30@set_screen:

; 192  :     )
; 193  :     {
; 194  :         errno = EINVAL;

  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001a7	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 195  :         return -1;

  001ad	b8 ff ff ff ff	 mov	 eax, -1
  001b2	e9 8f 00 00 00	 jmp	 $LN1@set_screen
$LN29@set_screen:

; 196  :     }
; 197  : 
; 198  :     ptConsole.X = colX1 - 1;

  001b7	0f bf 44 24 70	 movsx	 eax, WORD PTR colX1$[rsp]
  001bc	ff c8		 dec	 eax
  001be	66 89 44 24 24	 mov	 WORD PTR ptConsole$[rsp], ax

; 199  :     ptConsole.Y = rowY1 - 1;

  001c3	0f bf 44 24 68	 movsx	 eax, WORD PTR rowY1$[rsp]
  001c8	ff c8		 dec	 eax
  001ca	66 89 44 24 26	 mov	 WORD PTR ptConsole$[rsp+2], ax
$LN16@set_screen:

; 200  : 
; 201  :     VERIFY( SetConsoleCursorPosition( hStdErr, ptConsole ) );

  001cf	8b 54 24 24	 mov	 edx, DWORD PTR ptConsole$[rsp]
  001d3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCursorPosition
  001de	85 c0		 test	 eax, eax
  001e0	75 5c		 jne	 SHORT $LN31@set_screen
$LN19@set_screen:
  001e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159385
  001e9	41 b8 c9 00 00
	00		 mov	 r8d, 201		; 000000c9H
  001ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159386
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159387
  001fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00209	85 c0		 test	 eax, eax
  0020b	74 20		 je	 SHORT $LN32@set_screen
  0020d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159389
  00214	41 b8 c9 00 00
	00		 mov	 r8d, 201		; 000000c9H
  0021a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159390
  00221	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159391
  00228	e8 00 00 00 00	 call	 DebuggerTrace
$LN32@set_screen:
  0022d	33 c0		 xor	 eax, eax
  0022f	85 c0		 test	 eax, eax
  00231	75 af		 jne	 SHORT $LN19@set_screen
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00239	85 c0		 test	 eax, eax
  0023b	74 01		 je	 SHORT $LN33@set_screen
  0023d	cc		 int	 3
$LN33@set_screen:
$LN31@set_screen:
  0023e	33 c0		 xor	 eax, eax
  00240	85 c0		 test	 eax, eax
  00242	75 8b		 jne	 SHORT $LN16@set_screen

; 202  : 
; 203  :     return 0;

  00244	33 c0		 xor	 eax, eax
$LN1@set_screen:

; 204  : }

  00246	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0024b	48 33 cc	 xor	 rcx, rsp
  0024e	e8 00 00 00 00	 call	 __security_check_cookie
  00253	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00257	c3		 ret	 0
set_screen_pos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hconsole.c
_TEXT	SEGMENT
wColor$ = 32
cons_fd$ = 36
tv92 = 40
hStdErr$ = 48
confp$ = 80
herc_fore$ = 88
herc_back$ = 96
set_screen_color PROC

; 128  : {

$LN24:
  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 129  :     HANDLE  hStdErr;
; 130  :     WORD    wColor;
; 131  :     int     cons_fd;
; 132  : 
; 133  :     if ( !confp )

  00014	48 83 7c 24 50
	00		 cmp	 QWORD PTR confp$[rsp], 0
  0001a	75 16		 jne	 SHORT $LN14@set_screen

; 134  :     {
; 135  :         errno = EINVAL;

  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00022	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 136  :         return -1;

  00028	b8 ff ff ff ff	 mov	 eax, -1
  0002d	e9 5a 01 00 00	 jmp	 $LN1@set_screen
$LN14@set_screen:

; 137  :     }
; 138  : 
; 139  :     if ( ! _isatty( cons_fd = fileno( confp ) ) )

  00032	48 8b 4c 24 50	 mov	 rcx, QWORD PTR confp$[rsp]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0003d	89 44 24 24	 mov	 DWORD PTR cons_fd$[rsp], eax
  00041	8b 4c 24 24	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isatty
  0004b	85 c0		 test	 eax, eax
  0004d	75 16		 jne	 SHORT $LN15@set_screen

; 140  :     {
; 141  :         errno = EBADF;

  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00055	c7 00 09 00 00
	00		 mov	 DWORD PTR [rax], 9

; 142  :         return -1;

  0005b	b8 ff ff ff ff	 mov	 eax, -1
  00060	e9 27 01 00 00	 jmp	 $LN1@set_screen
$LN15@set_screen:

; 143  :     }
; 144  : 
; 145  :     hStdErr = (HANDLE) _get_osfhandle( cons_fd );

  00065	8b 4c 24 24	 mov	 ecx, DWORD PTR cons_fd$[rsp]
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__get_osfhandle
  0006f	48 89 44 24 30	 mov	 QWORD PTR hStdErr$[rsp], rax
$LN4@set_screen:

; 146  :     ASSERT( hStdErr && INVALID_HANDLE_VALUE != hStdErr );

  00074	48 83 7c 24 30
	00		 cmp	 QWORD PTR hStdErr$[rsp], 0
  0007a	74 08		 je	 SHORT $LN17@set_screen
  0007c	48 83 7c 24 30
	ff		 cmp	 QWORD PTR hStdErr$[rsp], -1
  00082	75 5c		 jne	 SHORT $LN16@set_screen
$LN17@set_screen:
$LN7@set_screen:
  00084	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159312
  0008b	41 b8 92 00 00
	00		 mov	 r8d, 146		; 00000092H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159313
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159314
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000ab	85 c0		 test	 eax, eax
  000ad	74 20		 je	 SHORT $LN18@set_screen
  000af	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159316
  000b6	41 b8 92 00 00
	00		 mov	 r8d, 146		; 00000092H
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159317
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159318
  000ca	e8 00 00 00 00	 call	 DebuggerTrace
$LN18@set_screen:
  000cf	33 c0		 xor	 eax, eax
  000d1	85 c0		 test	 eax, eax
  000d3	75 af		 jne	 SHORT $LN7@set_screen
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000db	85 c0		 test	 eax, eax
  000dd	74 01		 je	 SHORT $LN19@set_screen
  000df	cc		 int	 3
$LN19@set_screen:
$LN16@set_screen:
  000e0	33 c0		 xor	 eax, eax
  000e2	85 c0		 test	 eax, eax
  000e4	75 8e		 jne	 SHORT $LN4@set_screen

; 147  : 
; 148  :     wColor =

  000e6	0f b7 4c 24 58	 movzx	 ecx, WORD PTR herc_fore$[rsp]
  000eb	e8 00 00 00 00	 call	 W32_COLOR
  000f0	0f b7 c0	 movzx	 eax, ax
  000f3	89 44 24 28	 mov	 DWORD PTR tv92[rsp], eax
  000f7	0f b7 4c 24 60	 movzx	 ecx, WORD PTR herc_back$[rsp]
  000fc	e8 00 00 00 00	 call	 W32_COLOR
  00101	0f b7 c0	 movzx	 eax, ax
  00104	c1 e0 04	 shl	 eax, 4
  00107	8b 4c 24 28	 mov	 ecx, DWORD PTR tv92[rsp]
  0010b	0b c8		 or	 ecx, eax
  0010d	8b c1		 mov	 eax, ecx
  0010f	66 89 44 24 20	 mov	 WORD PTR wColor$[rsp], ax
$LN10@set_screen:

; 149  :         0
; 150  :         | W32_FOREGROUND_COLOR( W32_COLOR( herc_fore ) )
; 151  :         | W32_BACKGROUND_COLOR( W32_COLOR( herc_back ) )
; 152  :         ;
; 153  : 
; 154  :     VERIFY( SetConsoleTextAttribute( hStdErr, wColor ) );

  00114	0f b7 54 24 20	 movzx	 edx, WORD PTR wColor$[rsp]
  00119	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hStdErr$[rsp]
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleTextAttribute
  00124	85 c0		 test	 eax, eax
  00126	75 5c		 jne	 SHORT $LN20@set_screen
$LN13@set_screen:
  00128	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159321
  0012f	41 b8 9a 00 00
	00		 mov	 r8d, 154		; 0000009aH
  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159322
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159323
  00143	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0014f	85 c0		 test	 eax, eax
  00151	74 20		 je	 SHORT $LN21@set_screen
  00153	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159325
  0015a	41 b8 9a 00 00
	00		 mov	 r8d, 154		; 0000009aH
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159326
  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159327
  0016e	e8 00 00 00 00	 call	 DebuggerTrace
$LN21@set_screen:
  00173	33 c0		 xor	 eax, eax
  00175	85 c0		 test	 eax, eax
  00177	75 af		 jne	 SHORT $LN13@set_screen
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0017f	85 c0		 test	 eax, eax
  00181	74 01		 je	 SHORT $LN22@set_screen
  00183	cc		 int	 3
$LN22@set_screen:
$LN20@set_screen:
  00184	33 c0		 xor	 eax, eax
  00186	85 c0		 test	 eax, eax
  00188	75 8a		 jne	 SHORT $LN10@set_screen

; 155  : 
; 156  :     return 0;

  0018a	33 c0		 xor	 eax, eax
$LN1@set_screen:

; 157  : }

  0018c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00190	c3		 ret	 0
set_screen_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_snprintf PROC						; COMDAT

; 1947 :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1948 :         int _Result;
; 1949 :         va_list _ArgList;
; 1950 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 58	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1951 :         _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00036	e8 00 00 00 00	 call	 _vsnprintf
  0003b	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1952 :         __crt_va_end(_ArgList);

  0003f	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1953 :         return _Result;

  00048	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1954 :     }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
_vsnprintf PROC						; COMDAT

; 1411 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	45 33 c9	 xor	 r9d, r9d
  00025	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Format$[rsp]
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsnprintf_l

; 1413 :     }

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
