; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+8
_x2x_tab DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	03eH
	DB	03fH
	DB	040H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	05bH
	DB	05cH
	DB	05dH
	DB	05eH
	DB	05fH
	DB	060H
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	07bH
	DB	07cH
	DB	07dH
	DB	07eH
	DB	07fH
	DB	080H
	DB	081H
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	08bH
	DB	08cH
	DB	08dH
	DB	08eH
	DB	08fH
	DB	090H
	DB	091H
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	09bH
	DB	09cH
	DB	09dH
	DB	09eH
	DB	09fH
	DB	0a0H
	DB	0a1H
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0abH
	DB	0acH
	DB	0adH
	DB	0aeH
	DB	0afH
	DB	0b0H
	DB	0b1H
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0bbH
	DB	0bcH
	DB	0bdH
	DB	0beH
	DB	0bfH
	DB	0c0H
	DB	0c1H
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0cbH
	DB	0ccH
	DB	0cdH
	DB	0ceH
	DB	0cfH
	DB	0d0H
	DB	0d1H
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0dbH
	DB	0dcH
	DB	0ddH
	DB	0deH
	DB	0dfH
	DB	0e0H
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0ebH
	DB	0ecH
	DB	0edH
	DB	0eeH
	DB	0efH
	DB	0f0H
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	DB	0fbH
	DB	0fcH
	DB	0fdH
	DB	0feH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	hexdumpaw
PUBLIC	hexdumpew
PUBLIC	e2aora2e
EXTRN	__imp_isgraph:PROC
EXTRN	strlen:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	g2h_tab:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$hexdumpaw DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$hexdumpaw
$pdata$hexdumpew DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$hexdumpew
$pdata$e2atab DD imagerel e2atab
	DD	imagerel e2atab+14
	DD	imagerel $unwind$e2atab
$pdata$e2aora2e DD imagerel $LN8
	DD	imagerel $LN8+145
	DD	imagerel $unwind$e2aora2e
$pdata$_hexlinex DD imagerel _hexlinex
	DD	imagerel _hexlinex+961
	DD	imagerel $unwind$_hexlinex
$pdata$_hexdumpxn DD imagerel _hexdumpxn
	DD	imagerel _hexdumpxn+933
	DD	imagerel $unwind$_hexdumpxn
pdata	ENDS
_DATA	SEGMENT
$SG159201 DB	'%s%0*llX  ', 00H
	ORG $+5
$SG159203 DB	'%s%0*llX  ', 00H
	ORG $+1
$SG159280 DB	'  ', 00H
	ORG $+1
$SG159282 DB	'%02X', 00H
	ORG $+3
$SG159283 DB	' ', 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$hexdumpaw DD 011801H
	DD	0a218H
$unwind$hexdumpew DD 011801H
	DD	0c218H
$unwind$e2atab DD 010401H
	DD	04204H
$unwind$e2aora2e DD 011801H
	DD	02218H
$unwind$_hexlinex DD 011801H
	DD	0a218H
$unwind$_hexdumpxn DD 011801H
	DD	0e218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hexdumpe.c
_TEXT	SEGMENT
bpl$ = 64
p$ = 72
n$ = 80
lbs$ = 88
tv194 = 96
lines$1 = 104
pfx$ = 128
buf$ = 136
dat$ = 144
skp$ = 152
amt$ = 160
adr$ = 168
hxd$ = 176
bpg$ = 184
gpl$ = 192
x2x$ = 200
_hexdumpxn PROC

; 129  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 130  :     char *p;
; 131  :     size_t n = strlen(pfx);

  00018	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pfx$[rsp]
  00020	e8 00 00 00 00	 call	 strlen
  00025	48 89 44 24 50	 mov	 QWORD PTR n$[rsp], rax

; 132  :     size_t bpl = (bpg * gpl);

  0002a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  00032	48 0f af 84 24
	c0 00 00 00	 imul	 rax, QWORD PTR gpl$[rsp]
  0003b	48 89 44 24 40	 mov	 QWORD PTR bpl$[rsp], rax

; 133  :     size_t lbs = n + hxd + 2 + (bpl * 2) + gpl + 1 + bpl + 1;

  00040	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR hxd$[rsp]
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR gpl$[rsp]
  0005b	48 03 c8	 add	 rcx, rax
  0005e	48 8b c1	 mov	 rax, rcx
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bpl$[rsp]
  00066	48 8d 44 48 02	 lea	 rax, QWORD PTR [rax+rcx*2+2]
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bpl$[rsp]
  00070	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  00075	48 89 44 24 58	 mov	 QWORD PTR lbs$[rsp], rax

; 134  :     adr &= (0xFFFFFFFFFFFFFFFFULL >> (64 - (hxd * 4)));

  0007a	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR hxd$[rsp]
  00081	c1 e0 02	 shl	 eax, 2
  00084	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00089	2b c8		 sub	 ecx, eax
  0008b	8b c1		 mov	 eax, ecx
  0008d	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  00094	48 89 4c 24 60	 mov	 QWORD PTR tv194[rsp], rcx
  00099	0f b6 c8	 movzx	 ecx, al
  0009c	48 8b 44 24 60	 mov	 rax, QWORD PTR tv194[rsp]
  000a1	48 d3 e8	 shr	 rax, cl
  000a4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR adr$[rsp]
  000ac	48 23 c8	 and	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR adr$[rsp], rax

; 135  :     if (!buf || !dat || !amt || !bpg || !gpl || skp >= bpl)

  000ba	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp], 0
  000c3	74 3b		 je	 SHORT $LN6@hexdumpxn
  000c5	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dat$[rsp], 0
  000ce	74 30		 je	 SHORT $LN6@hexdumpxn
  000d0	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR amt$[rsp], 0
  000d9	74 25		 je	 SHORT $LN6@hexdumpxn
  000db	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR bpg$[rsp], 0
  000e4	74 1a		 je	 SHORT $LN6@hexdumpxn
  000e6	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR gpl$[rsp], 0
  000ef	74 0f		 je	 SHORT $LN6@hexdumpxn
  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR bpl$[rsp]
  000f6	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR skp$[rsp], rax
  000fe	72 05		 jb	 SHORT $LN5@hexdumpxn
$LN6@hexdumpxn:

; 136  :         return;

  00100	e9 9b 02 00 00	 jmp	 $LN1@hexdumpxn
$LN5@hexdumpxn:

; 137  :     if (!(p = *buf)) {

  00105	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0010d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00110	48 89 44 24 48	 mov	 QWORD PTR p$[rsp], rax
  00115	48 83 7c 24 48
	00		 cmp	 QWORD PTR p$[rsp], 0
  0011b	75 6b		 jne	 SHORT $LN7@hexdumpxn

; 138  :         size_t lines = (skp + amt + bpl - 1) / bpl;

  0011d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR amt$[rsp]
  00125	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR skp$[rsp]
  0012d	48 03 c8	 add	 rcx, rax
  00130	48 8b c1	 mov	 rax, rcx
  00133	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bpl$[rsp]
  00138	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0013d	33 d2		 xor	 edx, edx
  0013f	48 f7 74 24 40	 div	 QWORD PTR bpl$[rsp]
  00144	48 89 44 24 68	 mov	 QWORD PTR lines$1[rsp], rax

; 139  :         if (!(p = *buf = (char*) malloc( (lines * lbs) + 1 )))

  00149	48 8b 44 24 68	 mov	 rax, QWORD PTR lines$1[rsp]
  0014e	48 0f af 44 24
	58		 imul	 rax, QWORD PTR lbs$[rsp]
  00154	48 ff c0	 inc	 rax
  00157	48 8b c8	 mov	 rcx, rax
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00160	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00168	48 89 01	 mov	 QWORD PTR [rcx], rax
  0016b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00173	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00176	48 89 44 24 48	 mov	 QWORD PTR p$[rsp], rax
  0017b	48 83 7c 24 48
	00		 cmp	 QWORD PTR p$[rsp], 0
  00181	75 05		 jne	 SHORT $LN8@hexdumpxn

; 140  :             return;

  00183	e9 18 02 00 00	 jmp	 $LN1@hexdumpxn
$LN8@hexdumpxn:
$LN7@hexdumpxn:

; 141  :     }
; 142  :     for (; (skp+amt) >= bpl; adr+=bpl, p+=lbs) {

  00188	eb 30		 jmp	 SHORT $LN4@hexdumpxn
$LN2@hexdumpxn:
  0018a	48 8b 44 24 40	 mov	 rax, QWORD PTR bpl$[rsp]
  0018f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR adr$[rsp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR adr$[rsp], rax
  001a5	48 8b 44 24 58	 mov	 rax, QWORD PTR lbs$[rsp]
  001aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  001af	48 03 c8	 add	 rcx, rax
  001b2	48 8b c1	 mov	 rax, rcx
  001b5	48 89 44 24 48	 mov	 QWORD PTR p$[rsp], rax
$LN4@hexdumpxn:
  001ba	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR amt$[rsp]
  001c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR skp$[rsp]
  001ca	48 03 c8	 add	 rcx, rax
  001cd	48 8b c1	 mov	 rax, rcx
  001d0	48 3b 44 24 40	 cmp	 rax, QWORD PTR bpl$[rsp]
  001d5	0f 82 12 01 00
	00		 jb	 $LN3@hexdumpxn

; 143  :         sprintf( &p[0], "%s%0*"PRIX64"  ", pfx, hxd, adr );

  001db	b8 01 00 00 00	 mov	 eax, 1
  001e0	48 6b c0 00	 imul	 rax, rax, 0
  001e4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  001e9	48 03 c8	 add	 rcx, rax
  001ec	48 8b c1	 mov	 rax, rcx
  001ef	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR adr$[rsp]
  001f7	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001fc	44 8b 8c 24 b0
	00 00 00	 mov	 r9d, DWORD PTR hxd$[rsp]
  00204	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pfx$[rsp]
  0020c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159201
  00213	48 8b c8	 mov	 rcx, rax
  00216	e8 00 00 00 00	 call	 sprintf

; 144  :         _hexlinex( &p[n+hxd+2], dat, skp, (bpl-skp), bpg, gpl, x2x );

  0021b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR skp$[rsp]
  00223	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bpl$[rsp]
  00228	48 2b c8	 sub	 rcx, rax
  0022b	48 8b c1	 mov	 rax, rcx
  0022e	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR hxd$[rsp]
  00236	48 8b 54 24 50	 mov	 rdx, QWORD PTR n$[rsp]
  0023b	48 03 d1	 add	 rdx, rcx
  0023e	48 8b ca	 mov	 rcx, rdx
  00241	48 8b 54 24 48	 mov	 rdx, QWORD PTR p$[rsp]
  00246	48 8d 4c 0a 02	 lea	 rcx, QWORD PTR [rdx+rcx+2]
  0024b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR x2x$[rsp]
  00253	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  00258	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR gpl$[rsp]
  00260	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00265	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR bpg$[rsp]
  0026d	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00272	4c 8b c8	 mov	 r9, rax
  00275	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR skp$[rsp]
  0027d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dat$[rsp]
  00285	e8 00 00 00 00	 call	 _hexlinex

; 145  :         dat += (bpl - skp);

  0028a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR skp$[rsp]
  00292	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bpl$[rsp]
  00297	48 2b c8	 sub	 rcx, rax
  0029a	48 8b c1	 mov	 rax, rcx
  0029d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dat$[rsp]
  002a5	48 03 c8	 add	 rcx, rax
  002a8	48 8b c1	 mov	 rax, rcx
  002ab	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dat$[rsp], rax

; 146  :         amt -= (bpl - skp);

  002b3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR skp$[rsp]
  002bb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bpl$[rsp]
  002c0	48 2b c8	 sub	 rcx, rax
  002c3	48 8b c1	 mov	 rax, rcx
  002c6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR amt$[rsp]
  002ce	48 2b c8	 sub	 rcx, rax
  002d1	48 8b c1	 mov	 rax, rcx
  002d4	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR amt$[rsp], rax

; 147  :         skp = 0;

  002dc	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR skp$[rsp], 0

; 148  :     }

  002e8	e9 9d fe ff ff	 jmp	 $LN2@hexdumpxn
$LN3@hexdumpxn:

; 149  :     if (amt) {

  002ed	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR amt$[rsp], 0
  002f6	0f 84 a4 00 00
	00		 je	 $LN9@hexdumpxn

; 150  :         sprintf( &p[0], "%s%0*"PRIX64"  ", pfx, hxd, adr );

  002fc	b8 01 00 00 00	 mov	 eax, 1
  00301	48 6b c0 00	 imul	 rax, rax, 0
  00305	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  0030a	48 03 c8	 add	 rcx, rax
  0030d	48 8b c1	 mov	 rax, rcx
  00310	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR adr$[rsp]
  00318	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0031d	44 8b 8c 24 b0
	00 00 00	 mov	 r9d, DWORD PTR hxd$[rsp]
  00325	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pfx$[rsp]
  0032d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159203
  00334	48 8b c8	 mov	 rcx, rax
  00337	e8 00 00 00 00	 call	 sprintf

; 151  :         _hexlinex( &p[n+hxd+2], dat, skp, amt, bpg, gpl, x2x );

  0033c	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR hxd$[rsp]
  00344	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  00349	48 03 c8	 add	 rcx, rax
  0034c	48 8b c1	 mov	 rax, rcx
  0034f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  00354	48 8d 44 01 02	 lea	 rax, QWORD PTR [rcx+rax+2]
  00359	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR x2x$[rsp]
  00361	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00366	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR gpl$[rsp]
  0036e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00373	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR bpg$[rsp]
  0037b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00380	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR amt$[rsp]
  00388	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR skp$[rsp]
  00390	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR dat$[rsp]
  00398	48 8b c8	 mov	 rcx, rax
  0039b	e8 00 00 00 00	 call	 _hexlinex
$LN9@hexdumpxn:
$LN1@hexdumpxn:

; 152  :     }
; 153  : }

  003a0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  003a4	c3		 ret	 0
_hexdumpxn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hexdumpe.c
_TEXT	SEGMENT
c$ = 32
i$ = 40
n$ = 48
g$ = 56
s$ = 64
b$ = 72
buf$ = 96
dat$ = 104
skp$ = 112
amt$ = 120
bpg$ = 128
gpl$ = 136
x2x$ = 144
_hexlinex PROC

; 213  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 214  :     size_t i, b, g, s, n;
; 215  :     register char c;
; 216  :     if (!buf)

  00018	48 83 7c 24 60
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0001e	75 05		 jne	 SHORT $LN11@hexlinex

; 217  :         return;

  00020	e9 97 03 00 00	 jmp	 $LN1@hexlinex
$LN11@hexlinex:

; 218  :     if (!dat || !amt || !bpg || !gpl || skp >= (bpg * gpl)) {

  00025	48 83 7c 24 68
	00		 cmp	 QWORD PTR dat$[rsp], 0
  0002b	74 36		 je	 SHORT $LN13@hexlinex
  0002d	48 83 7c 24 78
	00		 cmp	 QWORD PTR amt$[rsp], 0
  00033	74 2e		 je	 SHORT $LN13@hexlinex
  00035	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR bpg$[rsp], 0
  0003e	74 23		 je	 SHORT $LN13@hexlinex
  00040	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR gpl$[rsp], 0
  00049	74 18		 je	 SHORT $LN13@hexlinex
  0004b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  00053	48 0f af 84 24
	88 00 00 00	 imul	 rax, QWORD PTR gpl$[rsp]
  0005c	48 39 44 24 70	 cmp	 QWORD PTR skp$[rsp], rax
  00061	72 0d		 jb	 SHORT $LN12@hexlinex
$LN13@hexlinex:

; 219  :         *buf = 0;

  00063	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp]
  00068	c6 00 00	 mov	 BYTE PTR [rax], 0

; 220  :         return;

  0006b	e9 4c 03 00 00	 jmp	 $LN1@hexlinex
$LN12@hexlinex:

; 221  :     }
; 222  :     if ((skp + amt) > (bpg * gpl))

  00070	48 8b 44 24 78	 mov	 rax, QWORD PTR amt$[rsp]
  00075	48 8b 4c 24 70	 mov	 rcx, QWORD PTR skp$[rsp]
  0007a	48 03 c8	 add	 rcx, rax
  0007d	48 8b c1	 mov	 rax, rcx
  00080	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR bpg$[rsp]
  00088	48 0f af 8c 24
	88 00 00 00	 imul	 rcx, QWORD PTR gpl$[rsp]
  00091	48 3b c1	 cmp	 rax, rcx
  00094	76 1b		 jbe	 SHORT $LN14@hexlinex

; 223  :         amt = (bpg * gpl) - skp;

  00096	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  0009e	48 0f af 84 24
	88 00 00 00	 imul	 rax, QWORD PTR gpl$[rsp]
  000a7	48 2b 44 24 70	 sub	 rax, QWORD PTR skp$[rsp]
  000ac	48 89 44 24 78	 mov	 QWORD PTR amt$[rsp], rax
$LN14@hexlinex:

; 224  :     for (i=g=0, s=skp; g < gpl; g++) {

  000b1	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR g$[rsp], 0
  000ba	48 8b 44 24 38	 mov	 rax, QWORD PTR g$[rsp]
  000bf	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
  000c4	48 8b 44 24 70	 mov	 rax, QWORD PTR skp$[rsp]
  000c9	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax
  000ce	eb 0d		 jmp	 SHORT $LN4@hexlinex
$LN2@hexlinex:
  000d0	48 8b 44 24 38	 mov	 rax, QWORD PTR g$[rsp]
  000d5	48 ff c0	 inc	 rax
  000d8	48 89 44 24 38	 mov	 QWORD PTR g$[rsp], rax
$LN4@hexlinex:
  000dd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR gpl$[rsp]
  000e5	48 39 44 24 38	 cmp	 QWORD PTR g$[rsp], rax
  000ea	0f 83 61 01 00
	00		 jae	 $LN3@hexlinex

; 225  :         for (b=0; b < bpg; b++, i++) {

  000f0	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR b$[rsp], 0
  000f9	eb 1a		 jmp	 SHORT $LN7@hexlinex
$LN5@hexlinex:
  000fb	48 8b 44 24 48	 mov	 rax, QWORD PTR b$[rsp]
  00100	48 ff c0	 inc	 rax
  00103	48 89 44 24 48	 mov	 QWORD PTR b$[rsp], rax
  00108	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0010d	48 ff c0	 inc	 rax
  00110	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN7@hexlinex:
  00115	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  0011d	48 39 44 24 48	 cmp	 QWORD PTR b$[rsp], rax
  00122	0f 83 c1 00 00
	00		 jae	 $LN6@hexlinex

; 226  :             n = ((g*(bpg*2))+g+(b*2));

  00128	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  00130	48 d1 e0	 shl	 rax, 1
  00133	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$[rsp]
  00138	48 0f af c8	 imul	 rcx, rax
  0013c	48 8b c1	 mov	 rax, rcx
  0013f	48 03 44 24 38	 add	 rax, QWORD PTR g$[rsp]
  00144	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  00149	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0014d	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 227  :             if (s || (i-skp) >= amt) {

  00152	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  00158	75 17		 jne	 SHORT $LN17@hexlinex
  0015a	48 8b 44 24 70	 mov	 rax, QWORD PTR skp$[rsp]
  0015f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00164	48 2b c8	 sub	 rcx, rax
  00167	48 8b c1	 mov	 rax, rcx
  0016a	48 3b 44 24 78	 cmp	 rax, QWORD PTR amt$[rsp]
  0016f	72 36		 jb	 SHORT $LN15@hexlinex
$LN17@hexlinex:

; 228  :                 sprintf( &buf[n],

  00171	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00176	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  0017b	48 03 c8	 add	 rcx, rax
  0017e	48 8b c1	 mov	 rax, rcx
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159280
  00188	48 8b c8	 mov	 rcx, rax
  0018b	e8 00 00 00 00	 call	 sprintf

; 229  :                     "  " );
; 230  :                 if (s)

  00190	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  00196	74 0d		 je	 SHORT $LN18@hexlinex

; 231  :                     s--;

  00198	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0019d	48 ff c8	 dec	 rax
  001a0	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax
$LN18@hexlinex:

; 232  :             } else

  001a5	eb 3d		 jmp	 SHORT $LN16@hexlinex
$LN15@hexlinex:

; 233  :                 sprintf(&buf[n],

  001a7	48 8b 44 24 70	 mov	 rax, QWORD PTR skp$[rsp]
  001ac	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001b1	48 2b c8	 sub	 rcx, rax
  001b4	48 8b c1	 mov	 rax, rcx
  001b7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dat$[rsp]
  001bc	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001c0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  001c5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  001ca	48 8b 54 24 60	 mov	 rdx, QWORD PTR buf$[rsp]
  001cf	48 03 d1	 add	 rdx, rcx
  001d2	48 8b ca	 mov	 rcx, rdx
  001d5	44 8b c0	 mov	 r8d, eax
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159282
  001df	e8 00 00 00 00	 call	 sprintf
$LN16@hexlinex:

; 234  :                     "%02X", dat[i-skp] & 0xff );
; 235  :         }

  001e4	e9 12 ff ff ff	 jmp	 $LN5@hexlinex
$LN6@hexlinex:

; 236  :         n = ((g*(bpg*2))+g+(b*2));

  001e9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  001f1	48 d1 e0	 shl	 rax, 1
  001f4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$[rsp]
  001f9	48 0f af c8	 imul	 rcx, rax
  001fd	48 8b c1	 mov	 rax, rcx
  00200	48 03 44 24 38	 add	 rax, QWORD PTR g$[rsp]
  00205	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  0020a	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0020e	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 237  :         sprintf( &buf[((g*(bpg*2))+g+(b*2))], " " );

  00213	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  0021b	48 d1 e0	 shl	 rax, 1
  0021e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$[rsp]
  00223	48 0f af c8	 imul	 rcx, rax
  00227	48 8b c1	 mov	 rax, rcx
  0022a	48 03 44 24 38	 add	 rax, QWORD PTR g$[rsp]
  0022f	48 03 44 24 60	 add	 rax, QWORD PTR buf$[rsp]
  00234	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  00239	48 8d 04 48	 lea	 rax, QWORD PTR [rax+rcx*2]
  0023d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159283
  00244	48 8b c8	 mov	 rcx, rax
  00247	e8 00 00 00 00	 call	 sprintf

; 238  :     }

  0024c	e9 7f fe ff ff	 jmp	 $LN2@hexlinex
$LN3@hexlinex:

; 239  :     n = (bpg*gpl*2)+gpl;

  00251	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR bpg$[rsp]
  00259	48 0f af 84 24
	88 00 00 00	 imul	 rax, QWORD PTR gpl$[rsp]
  00262	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR gpl$[rsp]
  0026a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0026e	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 240  :     buf[n] = ' ';

  00273	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00278	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  0027d	48 03 c8	 add	 rcx, rax
  00280	48 8b c1	 mov	 rax, rcx
  00283	c6 00 20	 mov	 BYTE PTR [rax], 32	; 00000020H

; 241  :     for (i=0, s=skp, n++; i < (skp+amt); i++) {

  00286	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0028f	48 8b 44 24 70	 mov	 rax, QWORD PTR skp$[rsp]
  00294	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax
  00299	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  0029e	48 ff c0	 inc	 rax
  002a1	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax
  002a6	eb 0d		 jmp	 SHORT $LN10@hexlinex
$LN8@hexlinex:
  002a8	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  002ad	48 ff c0	 inc	 rax
  002b0	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN10@hexlinex:
  002b5	48 8b 44 24 78	 mov	 rax, QWORD PTR amt$[rsp]
  002ba	48 8b 4c 24 70	 mov	 rcx, QWORD PTR skp$[rsp]
  002bf	48 03 c8	 add	 rcx, rax
  002c2	48 8b c1	 mov	 rax, rcx
  002c5	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  002ca	0f 83 b9 00 00
	00		 jae	 $LN9@hexlinex

; 242  :         if (s) {

  002d0	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  002d6	74 2b		 je	 SHORT $LN19@hexlinex

; 243  :             buf[n+i] = ' ';

  002d8	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  002dd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  002e2	48 03 c8	 add	 rcx, rax
  002e5	48 8b c1	 mov	 rax, rcx
  002e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  002ed	c6 04 01 20	 mov	 BYTE PTR [rcx+rax], 32	; 00000020H

; 244  :             s--;

  002f1	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  002f6	48 ff c8	 dec	 rax
  002f9	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 245  :         } else {

  002fe	e9 81 00 00 00	 jmp	 $LN20@hexlinex
$LN19@hexlinex:

; 246  :             c = x2x[ (unsigned char) dat[i-skp] ];

  00303	48 8b 44 24 70	 mov	 rax, QWORD PTR skp$[rsp]
  00308	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0030d	48 2b c8	 sub	 rcx, rax
  00310	48 8b c1	 mov	 rax, rcx
  00313	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dat$[rsp]
  00318	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0031c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR x2x$[rsp]
  00324	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00328	88 44 24 20	 mov	 BYTE PTR c$[rsp], al

; 247  :             if (' ' == c || isgraph(c & 0xFF))

  0032c	0f be 44 24 20	 movsx	 eax, BYTE PTR c$[rsp]
  00331	83 f8 20	 cmp	 eax, 32			; 00000020H
  00334	74 16		 je	 SHORT $LN23@hexlinex
  00336	0f be 44 24 20	 movsx	 eax, BYTE PTR c$[rsp]
  0033b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00340	8b c8		 mov	 ecx, eax
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isgraph
  00348	85 c0		 test	 eax, eax
  0034a	74 1f		 je	 SHORT $LN21@hexlinex
$LN23@hexlinex:

; 248  :                 buf[n+i] = c;

  0034c	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00351	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  00356	48 03 c8	 add	 rcx, rax
  00359	48 8b c1	 mov	 rax, rcx
  0035c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  00361	0f b6 54 24 20	 movzx	 edx, BYTE PTR c$[rsp]
  00366	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00369	eb 19		 jmp	 SHORT $LN22@hexlinex
$LN21@hexlinex:

; 249  :             else
; 250  :                 buf[n+i] = '.';

  0036b	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00370	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  00375	48 03 c8	 add	 rcx, rax
  00378	48 8b c1	 mov	 rax, rcx
  0037b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  00380	c6 04 01 2e	 mov	 BYTE PTR [rcx+rax], 46	; 0000002eH
$LN22@hexlinex:
$LN20@hexlinex:

; 251  :         }
; 252  :     }

  00384	e9 1f ff ff ff	 jmp	 $LN8@hexlinex
$LN9@hexlinex:

; 253  :     buf[n+i+0] = '\n';

  00389	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0038e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  00393	48 03 c8	 add	 rcx, rax
  00396	48 8b c1	 mov	 rax, rcx
  00399	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  0039e	c6 04 01 0a	 mov	 BYTE PTR [rcx+rax], 10

; 254  :     buf[n+i+1] = 0;

  003a2	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  003a7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  003ac	48 03 c8	 add	 rcx, rax
  003af	48 8b c1	 mov	 rax, rcx
  003b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  003b7	c6 44 01 01 00	 mov	 BYTE PTR [rcx+rax+1], 0
$LN1@hexlinex:

; 255  : }

  003bc	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003c0	c3		 ret	 0
_hexlinex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hexdumpe.c
_TEXT	SEGMENT
i$ = 0
out$ = 32
in$ = 40
len$ = 48
x2xtab$ = 56
e2aora2e PROC

; 110  : {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 111  :     size_t i;
; 112  :     if (!out || !in || !len || !x2xtab)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR out$[rsp], 0
  0001e	74 18		 je	 SHORT $LN6@e2aora2e
  00020	48 83 7c 24 28
	00		 cmp	 QWORD PTR in$[rsp], 0
  00026	74 10		 je	 SHORT $LN6@e2aora2e
  00028	48 83 7c 24 30
	00		 cmp	 QWORD PTR len$[rsp], 0
  0002e	74 08		 je	 SHORT $LN6@e2aora2e
  00030	48 83 7c 24 38
	00		 cmp	 QWORD PTR x2xtab$[rsp], 0
  00036	75 04		 jne	 SHORT $LN5@e2aora2e
$LN6@e2aora2e:

; 113  :         return 0;

  00038	32 c0		 xor	 al, al
  0003a	eb 50		 jmp	 SHORT $LN1@e2aora2e
$LN5@e2aora2e:

; 114  :     for (i=0; i < len; i++)

  0003c	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00044	eb 0b		 jmp	 SHORT $LN4@e2aora2e
$LN2@e2aora2e:
  00046	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  0004a	48 ff c0	 inc	 rax
  0004d	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
$LN4@e2aora2e:
  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR len$[rsp]
  00056	48 39 04 24	 cmp	 QWORD PTR i$[rsp], rax
  0005a	73 2e		 jae	 SHORT $LN3@e2aora2e

; 115  :         out[i] = x2xtab[(unsigned char) in[i]];

  0005c	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00060	48 8b 4c 24 28	 mov	 rcx, QWORD PTR in$[rsp]
  00065	48 03 c8	 add	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006e	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00072	48 8b 54 24 20	 mov	 rdx, QWORD PTR out$[rsp]
  00077	48 03 d1	 add	 rdx, rcx
  0007a	48 8b ca	 mov	 rcx, rdx
  0007d	48 8b 54 24 38	 mov	 rdx, QWORD PTR x2xtab$[rsp]
  00082	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00086	88 01		 mov	 BYTE PTR [rcx], al
  00088	eb bc		 jmp	 SHORT $LN2@e2aora2e
$LN3@e2aora2e:

; 116  :     return 1;

  0008a	b0 01		 mov	 al, 1
$LN1@e2aora2e:

; 117  : }

  0008c	48 83 c4 18	 add	 rsp, 24
  00090	c3		 ret	 0
e2aora2e ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hexdumpe.h
_TEXT	SEGMENT
e2atab	PROC

; 191  : static INLINE  const char*  e2atab()  { return (const char*) g2h_tab(); }

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	e8 00 00 00 00	 call	 g2h_tab
  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
e2atab	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hexdumpe.c
_TEXT	SEGMENT
tv64 = 80
pfx$ = 112
buf$ = 120
dat$ = 128
skp$ = 136
amt$ = 144
adr$ = 152
bits$ = 160
bpg$ = 168
gpl$ = 176
hexdumpew PROC

; 165  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 166  :     _hexdumpxn( pfx, buf, dat, skp, amt, adr, (bits/4), bpg, gpl, e2atab() );

  00018	e8 00 00 00 00	 call	 e2atab
  0001d	48 89 44 24 50	 mov	 QWORD PTR tv64[rsp], rax
  00022	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR bits$[rsp]
  00029	99		 cdq
  0002a	83 e2 03	 and	 edx, 3
  0002d	03 c2		 add	 eax, edx
  0002f	c1 f8 02	 sar	 eax, 2
  00032	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv64[rsp]
  00037	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0003c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR gpl$[rsp]
  00044	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00049	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR bpg$[rsp]
  00051	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00056	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0005a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR adr$[rsp]
  00062	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00067	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR amt$[rsp]
  0006f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00074	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR skp$[rsp]
  0007c	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR dat$[rsp]
  00084	48 8b 54 24 78	 mov	 rdx, QWORD PTR buf$[rsp]
  00089	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pfx$[rsp]
  0008e	e8 00 00 00 00	 call	 _hexdumpxn

; 167  : }

  00093	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00097	c3		 ret	 0
hexdumpew ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hexdumpe.c
_TEXT	SEGMENT
pfx$ = 96
buf$ = 104
dat$ = 112
skp$ = 120
amt$ = 128
adr$ = 136
bits$ = 144
bpg$ = 152
gpl$ = 160
hexdumpaw PROC

; 158  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 159  :     _hexdumpxn( pfx, buf, dat, skp, amt, adr, (bits/4), bpg, gpl, _x2x_tab );

  00018	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR bits$[rsp]
  0001f	99		 cdq
  00020	83 e2 03	 and	 edx, 3
  00023	03 c2		 add	 eax, edx
  00025	c1 f8 02	 sar	 eax, 2
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_x2x_tab
  0002f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00034	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR gpl$[rsp]
  0003c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00041	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR bpg$[rsp]
  00049	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0004e	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00052	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR adr$[rsp]
  0005a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR amt$[rsp]
  00067	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006c	4c 8b 4c 24 78	 mov	 r9, QWORD PTR skp$[rsp]
  00071	4c 8b 44 24 70	 mov	 r8, QWORD PTR dat$[rsp]
  00076	48 8b 54 24 68	 mov	 rdx, QWORD PTR buf$[rsp]
  0007b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pfx$[rsp]
  00080	e8 00 00 00 00	 call	 _hexdumpxn

; 160  : }

  00085	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00089	c3		 ret	 0
hexdumpaw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
