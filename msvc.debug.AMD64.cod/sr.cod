; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	ourendian
_BSS	SEGMENT
ourendian DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	crwendian:BYTE
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	fetch_hw_noswap
PUBLIC	store_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	store_fw_noswap
PUBLIC	fetch_dw_noswap
PUBLIC	store_dw_noswap
PUBLIC	suspend_cmd
PUBLIC	resume_cmd
PUBLIC	sr_active_devices
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp__ctime64:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_hthread_create_thread:PROC
EXTRN	__imp_ptyp2short:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_gettimeofday:PROC
EXTRN	__imp_usleep:PROC
EXTRN	__imp_w32_fwrite:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fclose:PROC
EXTRN	clock_hsuspend:PROC
EXTRN	clock_hresume:PROC
EXTRN	get_cpu_timer:PROC
EXTRN	set_cpu_timer:PROC
EXTRN	s370_execute_ccw_chain:PROC
EXTRN	s390_execute_ccw_chain:PROC
EXTRN	z900_execute_ccw_chain:PROC
EXTRN	s370_load_psw:PROC
EXTRN	s390_load_psw:PROC
EXTRN	z900_load_psw:PROC
EXTRN	copy_psw:PROC
EXTRN	machine_check_crwpend:PROC
EXTRN	find_device_by_devnum:PROC
EXTRN	attach_device:PROC
EXTRN	configure_cpu:PROC
EXTRN	deconfigure_cpu:PROC
EXTRN	set_loadparm:PROC
EXTRN	str_loadparm:PROC
EXTRN	servc_hsuspend:PROC
EXTRN	servc_hresume:PROC
EXTRN	do_shutdown:PROC
EXTRN	Queue_IO_Interrupt:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	get_arch_name:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG178576 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
pdata	SEGMENT
$pdata$ctime DD	imagerel ctime
	DD	imagerel ctime+25
	DD	imagerel $unwind$ctime
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_dw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_dw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$suspend_cmd DD imagerel $LN575
	DD	imagerel $LN575+8828
	DD	imagerel $unwind$suspend_cmd
$pdata$resume_cmd DD imagerel $LN1019
	DD	imagerel $LN1019+19116
	DD	imagerel $unwind$resume_cmd
$pdata$wakeup_cpu DD imagerel wakeup_cpu
	DD	imagerel wakeup_cpu+44
	DD	imagerel $unwind$wakeup_cpu
$pdata$wakeup_cpu_mask DD imagerel wakeup_cpu_mask
	DD	imagerel wakeup_cpu_mask+251
	DD	imagerel $unwind$wakeup_cpu_mask
$pdata$Interrupt_Lock_Obtained DD imagerel Interrupt_Lock_Obtained
	DD	imagerel Interrupt_Lock_Obtained+269
	DD	imagerel $unwind$Interrupt_Lock_Obtained
$pdata$Obtain_Interrupt_Lock DD imagerel Obtain_Interrupt_Lock
	DD	imagerel Obtain_Interrupt_Lock+88
	DD	imagerel $unwind$Obtain_Interrupt_Lock
$pdata$Release_Interrupt_Lock DD imagerel Release_Interrupt_Lock
	DD	imagerel Release_Interrupt_Lock+71
	DD	imagerel $unwind$Release_Interrupt_Lock
$pdata$are_all_cpus_stopped_intlock_held DD imagerel are_all_cpus_stopped_intlock_held
	DD	imagerel are_all_cpus_stopped_intlock_held+118
	DD	imagerel $unwind$are_all_cpus_stopped_intlock_held
$pdata$are_all_cpus_stopped DD imagerel are_all_cpus_stopped
	DD	imagerel are_all_cpus_stopped+51
	DD	imagerel $unwind$are_all_cpus_stopped
$pdata$sr_write_hdr DD imagerel sr_write_hdr
	DD	imagerel sr_write_hdr+199
	DD	imagerel $unwind$sr_write_hdr
$pdata$sr_write_value DD imagerel sr_write_value
	DD	imagerel sr_write_value+378
	DD	imagerel $unwind$sr_write_value
$pdata$sr_write_buf DD imagerel sr_write_buf
	DD	imagerel sr_write_buf+285
	DD	imagerel $unwind$sr_write_buf
$pdata$sr_write_string DD imagerel sr_write_string
	DD	imagerel sr_write_string+190
	DD	imagerel $unwind$sr_write_string
$pdata$sr_read_hdr DD imagerel sr_read_hdr
	DD	imagerel sr_read_hdr+221
	DD	imagerel $unwind$sr_read_hdr
$pdata$sr_read_value DD imagerel sr_read_value
	DD	imagerel sr_read_value+588
	DD	imagerel $unwind$sr_read_value
$pdata$sr_read_buf DD imagerel sr_read_buf
	DD	imagerel sr_read_buf+240
	DD	imagerel $unwind$sr_read_buf
$pdata$sr_read_string DD imagerel sr_read_string
	DD	imagerel sr_read_string+143
	DD	imagerel $unwind$sr_read_string
$pdata$sr_read_skip DD imagerel sr_read_skip
	DD	imagerel sr_read_skip+248
	DD	imagerel $unwind$sr_read_skip
$pdata$sr_write_error_ DD imagerel sr_write_error_
	DD	imagerel sr_write_error_+121
	DD	imagerel $unwind$sr_write_error_
$pdata$sr_read_error_ DD imagerel sr_read_error_
	DD	imagerel sr_read_error_+121
	DD	imagerel $unwind$sr_read_error_
$pdata$sr_value_error_ DD imagerel sr_value_error_
	DD	imagerel sr_value_error_+80
	DD	imagerel $unwind$sr_value_error_
$pdata$sr_string_error_ DD imagerel sr_string_error_
	DD	imagerel sr_string_error_+80
	DD	imagerel $unwind$sr_string_error_
$pdata$sr_active_devices DD imagerel $LN9
	DD	imagerel $LN9+242
	DD	imagerel $unwind$sr_active_devices
pdata	ENDS
_DATA	SEGMENT
$SG158973 DB	'C:\papa\MyGit\hyperion-zvector\hinlines.h:549', 00H
	ORG $+2
$SG158974 DB	'C:\papa\MyGit\hyperion-zvector\hinlines.h:553', 00H
	ORG $+2
$SG177265 DB	'SR: sr_write_hdr:    key=0x%8.8x, len=0x%8.8x', 0aH, 00H
	ORG $+1
$SG177267 DB	'SR: sr_write_hdr:    key=0x%8.8x, len=0x%8.8x', 0aH, 00H
	ORG $+1
$SG177282 DB	'SR: sr_write_string: key=0x%8.8x', 0aH, 00H
	ORG $+2
$SG177459 DB	'E', 00H
	ORG $+2
$SG177284 DB	'SR: sr_write_string: key=0x%8.8x', 0aH, 00H
	ORG $+2
$SG177464 DB	'read()', 00H
	ORG $+1
$SG177465 DB	'E', 00H
	ORG $+2
$SG177307 DB	'SR: sr_write_buf:    key=0x%8.8x, len=0x%16.16llx', 0aH, 00H
	ORG $+1
$SG177476 DB	'E', 00H
	ORG $+2
$SG177309 DB	'SR: sr_write_buf:    key=0x%8.8x, len=0x%16.16llx', 0aH, 00H
	ORG $+5
$SG177353 DB	'SR: sr_read_hdr:   key=0x%8.8x, len=0x%8.8x', 0aH, 00H
	ORG $+3
$SG177370 DB	'SR: sr_read_skip:                  len=0x%8.8x', 0aH, 00H
$SG177406 DB	'SR: sr_read_buf:                   len=0x%16.16llx', 0aH
	DB	00H
	ORG $+4
$SG177331 DB	'SR: sr_write_value:  key=0x%8.8x, len=0x%8.8x, val=0x%16'
	DB	'.16llx', 0aH, 00H
$SG177333 DB	'SR: sr_write_value:  key=0x%8.8x, len=0x%8.8x, val=0x%16'
	DB	'.16llx', 0aH, 00H
$SG177355 DB	'SR: sr_read_hdr:   key=0x%8.8x, len=0x%8.8x', 0aH, 00H
	ORG $+3
$SG177372 DB	'SR: sr_read_skip:                  len=0x%8.8x', 0aH, 00H
$SG177385 DB	'SR: sr_read_string:                len=0x%8.8x', 0aH, 00H
$SG177387 DB	'SR: sr_read_string:                len=0x%8.8x', 0aH, 00H
$SG177408 DB	'SR: sr_read_buf:                   len=0x%16.16llx', 0aH
	DB	00H
$SG177481 DB	'E', 00H
	ORG $+2
$SG177458 DB	'write()', 00H
$SG177440 DB	'SR: sr_read_value:              suslen=0x%8.8x, reslen=0'
	DB	'x%8.8x,', 0aH, 00H
	ORG $+7
$SG177450 DB	'                           val=0x%16.16llx', 0aH, 00H
$SG178409 DB	'E', 00H
	ORG $+2
$SG177461 DB	'sr_write_error_', 00H
$SG177462 DB	'C:\papa\MyGit\hyperion-zvector\sr.h', 00H
	ORG $+4
$SG177442 DB	'SR: sr_read_value:              suslen=0x%8.8x, reslen=0'
	DB	'x%8.8x,', 0aH, 00H
	ORG $+3
$SG178414 DB	'wb', 00H
	ORG $+1
$SG177452 DB	'                           val=0x%16.16llx', 0aH, 00H
$SG178417 DB	'E', 00H
	ORG $+2
$SG177460 DB	'HHC02001%s SR: error in function %s: %s', 0aH, 00H
	ORG $+3
$SG178416 DB	'open()', 00H
	ORG $+1
$SG178445 DB	'W', 00H
	ORG $+2
$SG177466 DB	'HHC02001%s SR: error in function %s: %s', 0aH, 00H
	ORG $+3
$SG178450 DB	'W', 00H
	ORG $+2
$SG177467 DB	'sr_read_error_', 00H
	ORG $+1
$SG177468 DB	'C:\papa\MyGit\hyperion-zvector\sr.h', 00H
$SG178613 DB	'E', 00H
	ORG $+2
$SG177477 DB	'HHC02020%s SR: value error, incorrect length', 0aH, 00H
	ORG $+2
$SG177478 DB	'sr_value_error_', 00H
$SG177479 DB	'C:\papa\MyGit\hyperion-zvector\sr.h', 00H
$SG179713 DB	'E', 00H
	ORG $+2
$SG177482 DB	'HHC02021%s SR: string error, incorrect length', 0aH, 00H
	ORG $+1
$SG177483 DB	'sr_string_error_', 00H
	ORG $+3
$SG179725 DB	'E', 00H
	ORG $+2
$SG177484 DB	'C:\papa\MyGit\hyperion-zvector\sr.h', 00H
$SG179729 DB	'rb', 00H
	ORG $+1
$SG177494 DB	'sr.c:49', 00H
$SG177498 DB	'sr.c:54', 00H
$SG177499 DB	'sr.c:63', 00H
$SG178407 DB	'hercules.srf', 00H
	ORG $+3
$SG178410 DB	'HHC02000%s SR: too many arguments', 0aH, 00H
	ORG $+1
$SG179732 DB	'E', 00H
	ORG $+2
$SG178411 DB	'suspend_cmd', 00H
$SG178412 DB	'sr.c', 00H
	ORG $+3
$SG179731 DB	'open()', 00H
	ORG $+1
$SG179745 DB	'E', 00H
	ORG $+2
$SG178418 DB	'HHC02001%s SR: error in function %s: %s', 0aH, 00H
	ORG $+3
$SG179762 DB	'I', 00H
	ORG $+2
$SG178419 DB	'suspend_cmd', 00H
$SG178420 DB	'sr.c', 00H
	ORG $+3
$SG179772 DB	'E', 00H
	ORG $+2
$SG178421 DB	'SR: Begin Suspend Processing...', 0aH, 00H
	ORG $+3
$SG179779 DB	'%dM', 00H
$SG178423 DB	'SR: Begin Suspend Processing...', 0aH, 00H
	ORG $+3
$SG179780 DB	'%dM', 00H
$SG178424 DB	'SR: Stopping All CPUs...', 0aH, 00H
	ORG $+2
$SG179782 DB	'E', 00H
	ORG $+2
$SG178426 DB	'SR: Stopping All CPUs...', 0aH, 00H
	ORG $+2
$SG179794 DB	'%d', 00H
	ORG $+1
$SG178427 DB	'sr.c:105', 00H
	ORG $+3
$SG179795 DB	'%d', 00H
	ORG $+1
$SG178429 DB	'sr.c:115', 00H
	ORG $+3
$SG179797 DB	'E', 00H
	ORG $+2
$SG178430 DB	'sr.c:118', 00H
	ORG $+3
$SG179809 DB	'%dM', 00H
$SG178431 DB	'sr.c:120', 00H
	ORG $+3
$SG179810 DB	'%dM', 00H
$SG178432 DB	'sr.c:122', 00H
	ORG $+3
$SG179812 DB	'E', 00H
	ORG $+2
$SG178433 DB	'SR: Waiting for I/O Queue to clear...', 0aH, 00H
	ORG $+1
$SG178435 DB	'SR: Waiting for I/O Queue to clear...', 0aH, 00H
	ORG $+1
$SG178436 DB	'sr.c:126', 00H
	ORG $+3
$SG179874 DB	'E', 00H
	ORG $+2
$SG178437 DB	'sr.c:129', 00H
	ORG $+3
$SG179942 DB	'E', 00H
	ORG $+2
$SG178438 DB	'sr.c:131', 00H
	ORG $+3
$SG179949 DB	'E', 00H
	ORG $+2
$SG178439 DB	'sr.c:133', 00H
	ORG $+3
$SG179955 DB	'E', 00H
	ORG $+2
$SG178440 DB	'SR: Waiting for Active I/Os to Complete...', 0aH, 00H
$SG179965 DB	'E', 00H
	ORG $+2
$SG178442 DB	'SR: Waiting for Active I/Os to Complete...', 0aH, 00H
$SG179975 DB	'E', 00H
	ORG $+2
$SG178446 DB	'HHC02002%s SR: waiting for device %04X', 0aH, 00H
$SG178447 DB	'suspend_cmd', 00H
$SG178448 DB	'sr.c', 00H
	ORG $+3
$SG180218 DB	'E', 00H
	ORG $+2
$SG178451 DB	'HHC02003%s SR: device %04X still busy, proceeding anyway'
	DB	0aH, 00H
	ORG $+2
$SG180223 DB	'W', 00H
	ORG $+2
$SG178452 DB	'suspend_cmd', 00H
$SG178453 DB	'sr.c', 00H
	ORG $+3
$SG180232 DB	'ORB', 00H
$SG178454 DB	'SR: Writing File Header...', 0aH, 00H
$SG180233 DB	'E', 00H
	ORG $+2
$SG178456 DB	'SR: Writing File Header...', 0aH, 00H
$SG180243 DB	'E', 00H
	ORG $+2
$SG178458 DB	'Hercules suspend/resume file', 00H
	ORG $+3
$SG178460 DB	'4.6.0.10893-SDL-DEV-g5b56a850-modified', 00H
	ORG $+1
$SG178462 DB	'SR: Saving System Data...', 0aH, 00H
	ORG $+1
$SG180253 DB	'E', 00H
	ORG $+2
$SG178464 DB	'SR: Saving System Data...', 0aH, 00H
	ORG $+1
$SG180263 DB	'E', 00H
	ORG $+2
$SG178468 DB	'SR: Saving MAINSTOR...', 0aH, 00H
$SG178470 DB	'SR: Saving MAINSTOR...', 0aH, 00H
$SG178473 DB	'SR: Saving Storage Keys...', 0aH, 00H
$SG180273 DB	'E', 00H
	ORG $+2
$SG178475 DB	'SR: Saving Storage Keys...', 0aH, 00H
$SG180282 DB	'ESW', 00H
$SG178478 DB	'SR: Saving Expanded Storage...', 0aH, 00H
$SG178480 DB	'SR: Saving Expanded Storage...', 0aH, 00H
$SG178517 DB	'SR: Saving Service Console State...', 0aH, 00H
	ORG $+3
$SG178519 DB	'SR: Saving Service Console State...', 0aH, 00H
	ORG $+3
$SG178522 DB	'SR: Saving Clock State...', 0aH, 00H
	ORG $+1
$SG180283 DB	'E', 00H
	ORG $+2
$SG178524 DB	'SR: Saving Clock State...', 0aH, 00H
	ORG $+1
$SG180292 DB	'ECW', 00H
$SG178528 DB	'SR: Saving CPU %d Data...', 0aH, 00H
	ORG $+1
$SG180293 DB	'E', 00H
	ORG $+2
$SG178530 DB	'SR: Saving CPU %d Data...', 0aH, 00H
	ORG $+1
$SG180303 DB	'E', 00H
	ORG $+2
$SG178566 DB	'SR: Saving Device %4.4X...', 0aH, 00H
$SG180317 DB	'E', 00H
	ORG $+2
$SG178568 DB	'SR: Saving Device %4.4X...', 0aH, 00H
$SG180327 DB	'E', 00H
	ORG $+2
$SG178606 DB	'SR: Writing EOF', 0aH, 00H
	ORG $+3
$SG180302 DB	'Sense', 00H
	ORG $+2
$SG180326 DB	'DRVPWD', 00H
	ORG $+1
$SG180390 DB	'E', 00H
	ORG $+2
$SG178608 DB	'SR: Writing EOF', 0aH, 00H
	ORG $+3
$SG180398 DB	'E', 00H
	ORG $+2
$SG178610 DB	'SR: Suspend Complete; shutting down...', 0aH, 00H
$SG178612 DB	'SR: Suspend Complete; shutting down...', 0aH, 00H
$SG178614 DB	'HHC02004%s SR: error processing file %s', 0aH, 00H
	ORG $+3
$SG180421 DB	'E', 00H
	ORG $+2
$SG178615 DB	'suspend_cmd', 00H
$SG178616 DB	'sr.c', 00H
	ORG $+3
$SG180441 DB	'E', 00H
	ORG $+2
$SG179711 DB	'hercules.srf', 00H
	ORG $+3
$SG179714 DB	'HHC02000%s SR: too many arguments', 0aH, 00H
	ORG $+1
$SG180445 DB	'E', 00H
	ORG $+2
$SG179715 DB	'resume_cmd', 00H
	ORG $+1
$SG179716 DB	'sr.c', 00H
	ORG $+7
$SG179718 DB	'SR: Begin Resume Processing...', 0aH, 00H
$SG179720 DB	'SR: Begin Resume Processing...', 0aH, 00H
$SG179721 DB	'SR: Waiting for CPUs to stop...', 0aH, 00H
	ORG $+7
$SG179723 DB	'SR: Waiting for CPUs to stop...', 0aH, 00H
	ORG $+7
$SG179726 DB	'HHC02005%s SR: all processors must be stopped to resume', 0aH
	DB	00H
	ORG $+7
$SG179727 DB	'resume_cmd', 00H
	ORG $+1
$SG179728 DB	'sr.c', 00H
	ORG $+7
$SG179733 DB	'HHC02001%s SR: error in function %s: %s', 0aH, 00H
	ORG $+7
$SG179734 DB	'resume_cmd', 00H
	ORG $+1
$SG179735 DB	'sr.c', 00H
	ORG $+7
$SG179736 DB	'SR: Reading File Header...', 0aH, 00H
	ORG $+4
$SG179738 DB	'SR: Reading File Header...', 0aH, 00H
	ORG $+4
$SG179744 DB	'Hercules suspend/resume file', 00H
	ORG $+3
$SG179746 DB	'HHC02006%s SR: file identifier error', 0aH, 00H
	ORG $+2
$SG179747 DB	'resume_cmd', 00H
	ORG $+1
$SG179748 DB	'sr.c', 00H
	ORG $+7
$SG179749 DB	'SR: Deconfiguring all CPUs...', 0aH, 00H
	ORG $+1
$SG179751 DB	'SR: Deconfiguring all CPUs...', 0aH, 00H
	ORG $+1
$SG179752 DB	'sr.c:434', 00H
	ORG $+7
$SG179754 DB	'sr.c:438', 00H
	ORG $+7
$SG179755 DB	'SR: Processing Resume File...', 0aH, 00H
	ORG $+1
$SG179757 DB	'SR: Processing Resume File...', 0aH, 00H
	ORG $+1
$SG179763 DB	'HHC02007%s SR: resuming suspended file created on %s', 0aH
	DB	00H
	ORG $+2
$SG179764 DB	'resume_cmd', 00H
	ORG $+1
$SG179765 DB	'sr.c', 00H
	ORG $+7
$SG179773 DB	'HHC02008%s SR: archmode %s not supported', 0aH, 00H
	ORG $+6
$SG179774 DB	'resume_cmd', 00H
	ORG $+1
$SG179775 DB	'sr.c', 00H
	ORG $+7
$SG179781 DB	'mainsize', 00H
	ORG $+7
$SG179783 DB	'HHC02009%s SR: mismatch in %s: %s found, %s expected', 0aH
	DB	00H
	ORG $+2
$SG179784 DB	'resume_cmd', 00H
	ORG $+1
$SG179785 DB	'sr.c', 00H
	ORG $+7
$SG179787 DB	'SR: Restoring MAINSTOR...', 0aH, 00H
	ORG $+5
$SG179789 DB	'SR: Restoring MAINSTOR...', 0aH, 00H
	ORG $+5
$SG179796 DB	'storkey size', 00H
	ORG $+3
$SG179798 DB	'HHC02009%s SR: mismatch in %s: %s found, %s expected', 0aH
	DB	00H
	ORG $+2
$SG179799 DB	'resume_cmd', 00H
	ORG $+1
$SG179800 DB	'sr.c', 00H
	ORG $+7
$SG179802 DB	'SR: Restoring Storage Keys...', 0aH, 00H
	ORG $+1
$SG179804 DB	'SR: Restoring Storage Keys...', 0aH, 00H
	ORG $+1
$SG179811 DB	'expand size', 00H
	ORG $+4
$SG179813 DB	'HHC02009%s SR: mismatch in %s: %s found, %s expected', 0aH
	DB	00H
	ORG $+2
$SG179814 DB	'resume_cmd', 00H
	ORG $+1
$SG179815 DB	'sr.c', 00H
	ORG $+7
$SG179817 DB	'SR: Restoring Expanded Storage...', 0aH, 00H
	ORG $+5
$SG179819 DB	'SR: Restoring Expanded Storage...', 0aH, 00H
	ORG $+1
$SG179877 DB	'sr.c', 00H
	ORG $+7
$SG179875 DB	'HHC02022%s SR: error loading CRW queue: not enough memor'
	DB	'y for %d CRWs', 0aH, 00H
	ORG $+1
$SG179876 DB	'resume_cmd', 00H
	ORG $+5
$SG179881 DB	'resume_cmd', 00H
	ORG $+1
$SG179882 DB	'sr.c', 00H
	ORG $+7
$SG179883 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG179885 DB	'resume_cmd', 00H
	ORG $+1
$SG179886 DB	'sr.c', 00H
	ORG $+7
$SG179887 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG179889 DB	'SR: Restoring CRW Array...', 0aH, 00H
	ORG $+4
$SG179891 DB	'SR: Restoring CRW Array...', 0aH, 00H
	ORG $+4
$SG179896 DB	'resume_cmd', 00H
	ORG $+1
$SG179897 DB	'sr.c', 00H
	ORG $+7
$SG179898 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG179900 DB	'resume_cmd', 00H
	ORG $+1
$SG179901 DB	'sr.c', 00H
	ORG $+7
$SG179902 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG179908 DB	'resume_cmd', 00H
	ORG $+1
$SG179909 DB	'sr.c', 00H
	ORG $+7
$SG179910 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG179912 DB	'resume_cmd', 00H
	ORG $+1
$SG179913 DB	'sr.c', 00H
	ORG $+7
$SG179914 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG179927 DB	'SR: Restoring Service Console State...', 0aH, 00H
$SG179929 DB	'SR: Restoring Service Console State...', 0aH, 00H
$SG179932 DB	'SR: Restoring Clock State...', 0aH, 00H
	ORG $+2
$SG179934 DB	'SR: Restoring Clock State...', 0aH, 00H
	ORG $+2
$SG179938 DB	'SR: Restoring CPU %d Data...', 0aH, 00H
	ORG $+2
$SG179940 DB	'SR: Restoring CPU %d Data...', 0aH, 00H
	ORG $+2
$SG179943 DB	'HHC02010%s SR: processor CP%02X exceeds max allowed CP%0'
	DB	'2X', 0aH, 00H
	ORG $+4
$SG179944 DB	'resume_cmd', 00H
	ORG $+1
$SG179945 DB	'sr.c', 00H
	ORG $+7
$SG179946 DB	'sr.c:732', 00H
	ORG $+7
$SG179948 DB	'sr.c:735', 00H
	ORG $+7
$SG179950 DB	'HHC02011%s SR: processor %s%02X already configured', 0aH
	DB	00H
	ORG $+4
$SG179951 DB	'resume_cmd', 00H
	ORG $+1
$SG179952 DB	'sr.c', 00H
	ORG $+7
$SG179953 DB	'sr.c:741', 00H
	ORG $+7
$SG179956 DB	'HHC02012%s SR: processor %s%02X unable to configure onli'
	DB	'ne', 0aH, 00H
	ORG $+4
$SG179957 DB	'resume_cmd', 00H
	ORG $+1
$SG179958 DB	'sr.c', 00H
	ORG $+7
$SG179966 DB	'HHC02013%s SR: processor %s%02X invalid psw length %d', 0aH
	DB	00H
	ORG $+1
$SG179967 DB	'resume_cmd', 00H
	ORG $+1
$SG179968 DB	'sr.c', 00H
	ORG $+7
$SG179976 DB	'HHC02014%s SR: processor %s%02X error loading psw, rc %d'
	DB	0aH, 00H
	ORG $+6
$SG179977 DB	'resume_cmd', 00H
	ORG $+1
$SG179978 DB	'sr.c', 00H
	ORG $+7
$SG180199 DB	'SR: Restoring Device %4.4X...', 0aH, 00H
	ORG $+1
$SG180201 DB	'SR: Restoring Device %4.4X...', 0aH, 00H
	ORG $+1
$SG180219 DB	'HHC02015%s SR: %04X: device initialization failed', 0aH, 00H
	ORG $+5
$SG180220 DB	'resume_cmd', 00H
	ORG $+1
$SG180221 DB	'sr.c', 00H
	ORG $+7
$SG180224 DB	'HHC02016%s SR: %04X: device type mismatch; %s found, %s '
	DB	'expected', 0aH, 00H
	ORG $+6
$SG180225 DB	'resume_cmd', 00H
	ORG $+1
$SG180226 DB	'sr.c', 00H
	ORG $+7
$SG180234 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180235 DB	'resume_cmd', 00H
	ORG $+1
$SG180236 DB	'sr.c', 00H
	ORG $+3
$SG180242 DB	'PMCW', 00H
	ORG $+7
$SG180244 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180245 DB	'resume_cmd', 00H
	ORG $+1
$SG180246 DB	'sr.c', 00H
	ORG $+3
$SG180252 DB	'SCSW', 00H
	ORG $+7
$SG180254 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180255 DB	'resume_cmd', 00H
	ORG $+1
$SG180256 DB	'sr.c', 00H
	ORG $+7
$SG180262 DB	'PCI SCSW', 00H
	ORG $+7
$SG180264 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180265 DB	'resume_cmd', 00H
	ORG $+1
$SG180266 DB	'sr.c', 00H
	ORG $+7
$SG180272 DB	'ATTN SCSW', 00H
	ORG $+6
$SG180274 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180275 DB	'resume_cmd', 00H
	ORG $+1
$SG180276 DB	'sr.c', 00H
	ORG $+7
$SG180284 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180285 DB	'resume_cmd', 00H
	ORG $+1
$SG180286 DB	'sr.c', 00H
	ORG $+7
$SG180294 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180295 DB	'resume_cmd', 00H
	ORG $+1
$SG180296 DB	'sr.c', 00H
	ORG $+7
$SG180304 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180305 DB	'resume_cmd', 00H
	ORG $+1
$SG180306 DB	'sr.c', 00H
	ORG $+3
$SG180316 DB	'PGID', 00H
	ORG $+7
$SG180318 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180319 DB	'resume_cmd', 00H
	ORG $+1
$SG180320 DB	'sr.c', 00H
	ORG $+7
$SG180328 DB	'HHC02017%s SR: %04X: %s size mismatch: %d found, %d expe'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG180329 DB	'resume_cmd', 00H
	ORG $+1
$SG180330 DB	'sr.c', 00H
	ORG $+7
$SG180348 DB	'sr.c:1271', 00H
	ORG $+6
$SG180353 DB	'sr.c:1278', 00H
	ORG $+6
$SG180358 DB	'sr.c:1285', 00H
	ORG $+2
$SG180388 DB	'%04X', 00H
	ORG $+3
$SG180389 DB	'%04X', 00H
	ORG $+7
$SG180392 DB	'resume_cmd', 00H
	ORG $+1
$SG180393 DB	'sr.c', 00H
	ORG $+7
$SG180391 DB	'HHC02016%s SR: %04X: device type mismatch; %s found, %s '
	DB	'expected', 0aH, 00H
	ORG $+6
$SG180399 DB	'HHC02018%s SR: invalid key %8.8X', 0aH, 00H
	ORG $+6
$SG180400 DB	'resume_cmd', 00H
	ORG $+1
$SG180401 DB	'sr.c', 00H
	ORG $+7
$SG180403 DB	'SR: Resume File Processing Complete...', 0aH, 00H
$SG180405 DB	'SR: Resume File Processing Complete...', 0aH, 00H
$SG180406 DB	'SR: Resuming Devices...', 0aH, 00H
	ORG $+7
$SG180408 DB	'SR: Resuming Devices...', 0aH, 00H
	ORG $+7
$SG180411 DB	'sr.c:1367', 00H
	ORG $+6
$SG180412 DB	'device thread', 00H
	ORG $+2
$SG180414 DB	'sr.c:1373', 00H
	ORG $+6
$SG180415 DB	'device thread', 00H
	ORG $+2
$SG180417 DB	'sr.c:1379', 00H
	ORG $+6
$SG180418 DB	'device thread', 00H
	ORG $+2
$SG180422 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+6
$SG180423 DB	'resume_cmd', 00H
	ORG $+1
$SG180424 DB	'sr.c', 00H
	ORG $+7
$SG180426 DB	'SR: Resuming CPUs...', 0aH, 00H
	ORG $+2
$SG180428 DB	'SR: Resuming CPUs...', 0aH, 00H
	ORG $+2
$SG180429 DB	'sr.c:1401', 00H
	ORG $+6
$SG180434 DB	'sr.c:1402', 00H
	ORG $+6
$SG180436 DB	'sr.c:1409', 00H
	ORG $+6
$SG180437 DB	'sr.c:1411', 00H
	ORG $+6
$SG180438 DB	'SR: Resume Complete; System Resumed.', 0aH, 00H
	ORG $+2
$SG180440 DB	'SR: Resume Complete; System Resumed.', 0aH, 00H
	ORG $+2
$SG180442 DB	'HHC02019%s SR: CPU key %8.8X found but no active CPU', 0aH
	DB	00H
	ORG $+2
$SG180443 DB	'resume_cmd', 00H
	ORG $+1
$SG180444 DB	'sr.c', 00H
	ORG $+7
$SG180446 DB	'HHC02004%s SR: error processing file %s', 0aH, 00H
	ORG $+7
$SG180447 DB	'resume_cmd', 00H
	ORG $+1
$SG180448 DB	'sr.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:sr_read_skip
	DD	01aH
	DD	0e0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:sr_read_value
	DD	021H
	DD	023aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:sr_read_hdr
	DD	01dH
	DD	0cbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:sr_write_value
	DD	021H
	DD	0168H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:sr_write_hdr
	DD	01cH
	DD	0b5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:resume_cmd
	DD	026H
	DD	0452fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:suspend_cmd
	DD	01fH
	DD	02264H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_dw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
xdata	SEGMENT
$unwind$ctime DD 010901H
	DD	04209H
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$suspend_cmd DD 022719H
	DD	01b0115H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$resume_cmd DD 032e19H
	DD	0264011cH
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	01310H
$unwind$wakeup_cpu DD 010e01H
	DD	0420eH
$unwind$wakeup_cpu_mask DD 010e01H
	DD	0a20eH
$unwind$Interrupt_Lock_Obtained DD 010e01H
	DD	0420eH
$unwind$Obtain_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$Release_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$are_all_cpus_stopped_intlock_held DD 010401H
	DD	02204H
$unwind$are_all_cpus_stopped DD 010401H
	DD	06204H
$unwind$sr_write_hdr DD 012119H
	DD	06212H
	DD	imagerel __GSHandlerCheck
	DD	028H
$unwind$sr_write_value DD 012619H
	DD	08217H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$sr_write_buf DD 011701H
	DD	08217H
$unwind$sr_write_string DD 011201H
	DD	06212H
$unwind$sr_read_hdr DD 012219H
	DD	06213H
	DD	imagerel __GSHandlerCheck
	DD	028H
$unwind$sr_read_value DD 012619H
	DD	0c217H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$sr_read_buf DD 011301H
	DD	08213H
$unwind$sr_read_string DD 011301H
	DD	04213H
$unwind$sr_read_skip DD 022219H
	DD	02b0110H
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$sr_write_error_ DD 010401H
	DD	0c204H
$unwind$sr_read_error_ DD 010401H
	DD	0c204H
$unwind$sr_value_error_ DD 010401H
	DD	08204H
$unwind$sr_string_error_ DD 010401H
	DD	08204H
$unwind$sr_active_devices DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.c
_TEXT	SEGMENT
dev$ = 32
sr_active_devices PROC

; 44   : {

$LN9:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 45   : DEVBLK *dev;
; 46   : 
; 47   :     for (dev = sysblk.firstdev; dev; dev = dev->nextdev)

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0000b	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00012	48 89 44 24 20	 mov	 QWORD PTR dev$[rsp], rax
  00017	eb 0e		 jmp	 SHORT $LN4@sr_active_
$LN2@sr_active_:
  00019	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  0001e	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00022	48 89 44 24 20	 mov	 QWORD PTR dev$[rsp], rax
$LN4@sr_active_:
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0002d	0f 84 b8 00 00
	00		 je	 $LN3@sr_active_

; 48   :     {
; 49   :         obtain_lock (&dev->lock);

  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00038	48 83 c0 38	 add	 rax, 56			; 00000038H
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG177494
  00043	48 8b c8	 mov	 rcx, rax
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 50   :         if (dev->busy && !dev->suspended)

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00051	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00057	c1 e8 13	 shr	 eax, 19
  0005a	83 e0 01	 and	 eax, 1
  0005d	85 c0		 test	 eax, eax
  0005f	74 6c		 je	 SHORT $LN5@sr_active_
  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00066	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0006c	c1 e8 15	 shr	 eax, 21
  0006f	83 e0 01	 and	 eax, 1
  00072	85 c0		 test	 eax, eax
  00074	75 57		 jne	 SHORT $LN5@sr_active_

; 51   :         {
; 52   :             if (dev->devtype != 0x3088)

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  0007b	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0007f	3d 88 30 00 00	 cmp	 eax, 12424		; 00003088H
  00084	74 22		 je	 SHORT $LN6@sr_active_

; 53   :             {
; 54   :                 release_lock (&dev->lock);

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  0008b	48 83 c0 38	 add	 rax, 56			; 00000038H
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG177498
  00096	48 8b c8	 mov	 rcx, rax
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 55   :                 return dev;

  0009f	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  000a4	eb 47		 jmp	 SHORT $LN1@sr_active_

; 56   :             }

  000a6	eb 25		 jmp	 SHORT $LN7@sr_active_
$LN6@sr_active_:

; 57   :             else
; 58   :             {
; 59   :                 usleep(50000);

  000a8	b9 50 c3 00 00	 mov	 ecx, 50000		; 0000c350H
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep

; 60   :                 dev->busy = 0;

  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  000b8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000be	0f ba f0 13	 btr	 eax, 19
  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dev$[rsp]
  000c7	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax
$LN7@sr_active_:
$LN5@sr_active_:

; 61   :             }
; 62   :         }
; 63   :         release_lock (&dev->lock);

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  000d2	48 83 c0 38	 add	 rax, 56			; 00000038H
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG177499
  000dd	48 8b c8	 mov	 rcx, rax
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 64   :     }

  000e6	e9 2e ff ff ff	 jmp	 $LN2@sr_active_
$LN3@sr_active_:

; 65   :     return NULL;

  000eb	33 c0		 xor	 eax, eax
$LN1@sr_active_:

; 66   : }

  000ed	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f1	c3		 ret	 0
sr_active_devices ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
sr_string_error_ PROC

; 842  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 843  :     // "SR: string error, incorrect length"
; 844  :     WRMSG(HHC02021, "E");

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177481
  00016	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177482
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG177483
  00039	ba 4c 03 00 00	 mov	 edx, 844		; 0000034cH
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177484
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 845  : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	c3		 ret	 0
sr_string_error_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
sr_value_error_ PROC

; 836  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 837  :     // "SR: value error, incorrect length"
; 838  :     WRMSG(HHC02020, "E");

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177476
  00016	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177477
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG177478
  00039	ba 46 03 00 00	 mov	 edx, 838		; 00000346H
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177479
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 839  : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	c3		 ret	 0
sr_value_error_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
tv64 = 80
sr_read_error_ PROC

; 824  : {

  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 825  :     // "SR: error in function '%s': '%s'"
; 826  :     WRMSG(HHC02001, "E", "read()", strerror(errno));

  00004	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0000a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00012	48 89 44 24 50	 mov	 QWORD PTR tv64[rsp], rax
  00017	b9 01 00 00 00	 mov	 ecx, 1
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv64[rsp]
  00027	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177464
  00033	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177465
  0003f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177466
  0004b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00050	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00055	41 b9 03 00 00
	00		 mov	 r9d, 3
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG177467
  00062	ba 3a 03 00 00	 mov	 edx, 826		; 0000033aH
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177468
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 827  : }

  00074	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00078	c3		 ret	 0
sr_read_error_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
tv64 = 80
sr_write_error_ PROC

; 818  : {

  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 819  :     // "SR: error in function '%s': '%s'"
; 820  :     WRMSG(HHC02001, "E", "write()", strerror(errno));

  00004	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0000a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00012	48 89 44 24 50	 mov	 QWORD PTR tv64[rsp], rax
  00017	b9 01 00 00 00	 mov	 ecx, 1
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv64[rsp]
  00027	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177458
  00033	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177459
  0003f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177460
  0004b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00050	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00055	41 b9 03 00 00
	00		 mov	 r9d, 3
  0005b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG177461
  00062	ba 34 03 00 00	 mov	 edx, 820		; 00000334H
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177462
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 821  : }

  00074	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00078	c3		 ret	 0
sr_write_error_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
tot$ = 32
siz$ = 40
tv74 = 48
buf$ = 64
__$ArrayPad$ = 320
file$ = 352
len$ = 360
sr_read_skip PROC

; 677  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@sr_read_sk:

; 678  : /* FIXME: Workaround for problem involving gzseek
; 679  :           and large files.  Just read the data. */
; 680  : 
; 681  : BYTE    buf[SR_SKIP_CHUNKSIZE];
; 682  : size_t  siz;
; 683  : size_t  tot;
; 684  : 
; 685  :     TRACE("SR: sr_read_skip:                  len=0x%8.8x\n", len);

  00022	8b 94 24 68 01
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177370
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0003c	85 c0		 test	 eax, eax
  0003e	74 13		 je	 SHORT $LN7@sr_read_sk
  00040	8b 94 24 68 01
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177372
  0004e	e8 00 00 00 00	 call	 DebuggerTrace
$LN7@sr_read_sk:
  00053	33 c0		 xor	 eax, eax
  00055	85 c0		 test	 eax, eax
  00057	75 c9		 jne	 SHORT $LN4@sr_read_sk

; 686  : 
; 687  :     tot = len;

  00059	8b 84 24 68 01
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  00060	48 89 44 24 20	 mov	 QWORD PTR tot$[rsp], rax
$LN5@sr_read_sk:

; 688  : 
; 689  :     while (tot)

  00065	48 83 7c 24 20
	00		 cmp	 QWORD PTR tot$[rsp], 0
  0006b	74 71		 je	 SHORT $LN6@sr_read_sk

; 690  :     {
; 691  :         siz = tot < SR_SKIP_CHUNKSIZE ? tot : SR_SKIP_CHUNKSIZE;

  0006d	48 81 7c 24 20
	00 01 00 00	 cmp	 QWORD PTR tot$[rsp], 256 ; 00000100H
  00076	73 0c		 jae	 SHORT $LN10@sr_read_sk
  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR tot$[rsp]
  0007d	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
  00082	eb 09		 jmp	 SHORT $LN11@sr_read_sk
$LN10@sr_read_sk:
  00084	48 c7 44 24 30
	00 01 00 00	 mov	 QWORD PTR tv74[rsp], 256 ; 00000100H
$LN11@sr_read_sk:
  0008d	48 8b 44 24 30	 mov	 rax, QWORD PTR tv74[rsp]
  00092	48 89 44 24 28	 mov	 QWORD PTR siz$[rsp], rax

; 692  : 
; 693  :         if ((size_t)SR_READ(buf, 1, siz, file) != siz)

  00097	4c 8b 8c 24 60
	01 00 00	 mov	 r9, QWORD PTR file$[rsp]
  0009f	4c 8b 44 24 28	 mov	 r8, QWORD PTR siz$[rsp]
  000a4	ba 01 00 00 00	 mov	 edx, 1
  000a9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  000b4	48 3b 44 24 28	 cmp	 rax, QWORD PTR siz$[rsp]
  000b9	74 0c		 je	 SHORT $LN8@sr_read_sk

; 694  :         {
; 695  :             sr_read_error_();

  000bb	e8 00 00 00 00	 call	 sr_read_error_

; 696  :             return -1;

  000c0	b8 ff ff ff ff	 mov	 eax, -1
  000c5	eb 19		 jmp	 SHORT $LN1@sr_read_sk
$LN8@sr_read_sk:

; 697  :         }
; 698  :         tot -= siz;

  000c7	48 8b 44 24 28	 mov	 rax, QWORD PTR siz$[rsp]
  000cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tot$[rsp]
  000d1	48 2b c8	 sub	 rcx, rax
  000d4	48 8b c1	 mov	 rax, rcx
  000d7	48 89 44 24 20	 mov	 QWORD PTR tot$[rsp], rax

; 699  :     }

  000dc	eb 87		 jmp	 SHORT $LN5@sr_read_sk
$LN6@sr_read_sk:

; 700  :     return 0;

  000de	33 c0		 xor	 eax, eax
$LN1@sr_read_sk:

; 701  : }

  000e0	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e8	48 33 cc	 xor	 rcx, rsp
  000eb	e8 00 00 00 00	 call	 __security_check_cookie
  000f0	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  000f7	c3		 ret	 0
sr_read_skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
file$ = 48
p$ = 56
len$ = 64
sr_read_string PROC

; 707  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@sr_read_st:

; 708  :     TRACE("SR: sr_read_string:                len=0x%8.8x\n", len);

  00013	8b 54 24 40	 mov	 edx, DWORD PTR len$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177385
  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0002a	85 c0		 test	 eax, eax
  0002c	74 10		 je	 SHORT $LN5@sr_read_st
  0002e	8b 54 24 40	 mov	 edx, DWORD PTR len$[rsp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177387
  00039	e8 00 00 00 00	 call	 DebuggerTrace
$LN5@sr_read_st:
  0003e	33 c0		 xor	 eax, eax
  00040	85 c0		 test	 eax, eax
  00042	75 cf		 jne	 SHORT $LN4@sr_read_st

; 709  : 
; 710  :     if (len > SR_MAX_STRING_LENGTH)

  00044	81 7c 24 40 00
	10 00 00	 cmp	 DWORD PTR len$[rsp], 4096 ; 00001000H
  0004c	76 0c		 jbe	 SHORT $LN6@sr_read_st

; 711  :     {
; 712  :         sr_string_error_();

  0004e	e8 00 00 00 00	 call	 sr_string_error_

; 713  :         return -1;

  00053	b8 ff ff ff ff	 mov	 eax, -1
  00058	eb 30		 jmp	 SHORT $LN1@sr_read_st
$LN6@sr_read_st:

; 714  :     }
; 715  :     if ((U32)SR_READ(p, 1, len, file) != len)

  0005a	8b 44 24 40	 mov	 eax, DWORD PTR len$[rsp]
  0005e	4c 8b 4c 24 30	 mov	 r9, QWORD PTR file$[rsp]
  00063	44 8b c0	 mov	 r8d, eax
  00066	ba 01 00 00 00	 mov	 edx, 1
  0006b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR p$[rsp]
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00076	3b 44 24 40	 cmp	 eax, DWORD PTR len$[rsp]
  0007a	74 0c		 je	 SHORT $LN7@sr_read_st

; 716  :     {
; 717  :         sr_read_error_();

  0007c	e8 00 00 00 00	 call	 sr_read_error_

; 718  :         return -1;

  00081	b8 ff ff ff ff	 mov	 eax, -1
  00086	eb 02		 jmp	 SHORT $LN1@sr_read_st
$LN7@sr_read_st:

; 719  :     }
; 720  :     return 0;

  00088	33 c0		 xor	 eax, eax
$LN1@sr_read_st:

; 721  : }

  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	c3		 ret	 0
sr_read_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
siz$ = 32
tot$ = 40
buf$ = 48
tv73 = 56
file$ = 80
p$ = 88
len$ = 96
sr_read_buf PROC

; 727  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 728  : U32    siz;
; 729  : U64    tot  = len;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR len$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR tot$[rsp], rax

; 730  : BYTE*  buf  = p;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax
$LN4@sr_read_bu:

; 731  : 
; 732  :     TRACE("SR: sr_read_buf:                   len=0x%16.16"PRIx64"\n", len);

  00027	48 8b 54 24 60	 mov	 rdx, QWORD PTR len$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177406
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0003f	85 c0		 test	 eax, eax
  00041	74 11		 je	 SHORT $LN7@sr_read_bu
  00043	48 8b 54 24 60	 mov	 rdx, QWORD PTR len$[rsp]
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177408
  0004f	e8 00 00 00 00	 call	 DebuggerTrace
$LN7@sr_read_bu:
  00054	33 c0		 xor	 eax, eax
  00056	85 c0		 test	 eax, eax
  00058	75 cd		 jne	 SHORT $LN4@sr_read_bu
$LN5@sr_read_bu:

; 733  : 
; 734  :     while (tot)

  0005a	48 83 7c 24 28
	00		 cmp	 QWORD PTR tot$[rsp], 0
  00060	0f 84 83 00 00
	00		 je	 $LN6@sr_read_bu

; 735  :     {
; 736  :         siz = tot < SR_BUF_CHUNKSIZE ? tot : SR_BUF_CHUNKSIZE;

  00066	48 81 7c 24 28
	00 00 00 10	 cmp	 QWORD PTR tot$[rsp], 268435456 ; 10000000H
  0006f	73 0c		 jae	 SHORT $LN10@sr_read_bu
  00071	48 8b 44 24 28	 mov	 rax, QWORD PTR tot$[rsp]
  00076	48 89 44 24 38	 mov	 QWORD PTR tv73[rsp], rax
  0007b	eb 09		 jmp	 SHORT $LN11@sr_read_bu
$LN10@sr_read_bu:
  0007d	48 c7 44 24 38
	00 00 00 10	 mov	 QWORD PTR tv73[rsp], 268435456 ; 10000000H
$LN11@sr_read_bu:
  00086	8b 44 24 38	 mov	 eax, DWORD PTR tv73[rsp]
  0008a	89 44 24 20	 mov	 DWORD PTR siz$[rsp], eax

; 737  : 
; 738  :         if ((U32)SR_READ(buf, 1, siz, file) != siz)

  0008e	8b 44 24 20	 mov	 eax, DWORD PTR siz$[rsp]
  00092	4c 8b 4c 24 50	 mov	 r9, QWORD PTR file$[rsp]
  00097	44 8b c0	 mov	 r8d, eax
  0009a	ba 01 00 00 00	 mov	 edx, 1
  0009f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  000aa	3b 44 24 20	 cmp	 eax, DWORD PTR siz$[rsp]
  000ae	74 0c		 je	 SHORT $LN8@sr_read_bu

; 739  :         {
; 740  :             sr_read_error_();

  000b0	e8 00 00 00 00	 call	 sr_read_error_

; 741  :             return -1;

  000b5	b8 ff ff ff ff	 mov	 eax, -1
  000ba	eb 2f		 jmp	 SHORT $LN1@sr_read_bu
$LN8@sr_read_bu:

; 742  :         }
; 743  :         tot -= siz;

  000bc	8b 44 24 20	 mov	 eax, DWORD PTR siz$[rsp]
  000c0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tot$[rsp]
  000c5	48 2b c8	 sub	 rcx, rax
  000c8	48 8b c1	 mov	 rax, rcx
  000cb	48 89 44 24 28	 mov	 QWORD PTR tot$[rsp], rax

; 744  :         buf += siz;

  000d0	8b 44 24 20	 mov	 eax, DWORD PTR siz$[rsp]
  000d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  000d9	48 03 c8	 add	 rcx, rax
  000dc	48 8b c1	 mov	 rax, rcx
  000df	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 745  :     }

  000e4	e9 71 ff ff ff	 jmp	 $LN5@sr_read_bu
$LN6@sr_read_bu:

; 746  : 
; 747  :     return 0;

  000e9	33 c0		 xor	 eax, eax
$LN1@sr_read_bu:

; 748  : }

  000eb	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ef	c3		 ret	 0
sr_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
value$ = 32
tv85 = 40
tv146 = 44
ptr$1 = 48
ptr$2 = 56
ptr$3 = 64
ptr$4 = 72
buf$ = 80
__$ArrayPad$ = 88
file$ = 112
suslen$ = 120
p$ = 128
reslen$ = 136
sr_read_value PROC

; 754  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@sr_read_va:

; 755  : BYTE    buf[8];
; 756  : U64     value;
; 757  : 
; 758  :     TRACE("SR: sr_read_value:              suslen=0x%8.8x, reslen=0x%8.8x,\n", suslen, reslen);

  00026	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR reslen$[rsp]
  0002e	8b 54 24 78	 mov	 edx, DWORD PTR suslen$[rsp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177440
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00045	85 c0		 test	 eax, eax
  00047	74 18		 je	 SHORT $LN12@sr_read_va
  00049	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR reslen$[rsp]
  00051	8b 54 24 78	 mov	 edx, DWORD PTR suslen$[rsp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177442
  0005c	e8 00 00 00 00	 call	 DebuggerTrace
$LN12@sr_read_va:
  00061	33 c0		 xor	 eax, eax
  00063	85 c0		 test	 eax, eax
  00065	75 bf		 jne	 SHORT $LN4@sr_read_va

; 759  : 
; 760  :     if (suslen != 1 && suslen != 2 && suslen != 4 && suslen != 8)

  00067	83 7c 24 78 01	 cmp	 DWORD PTR suslen$[rsp], 1
  0006c	74 24		 je	 SHORT $LN13@sr_read_va
  0006e	83 7c 24 78 02	 cmp	 DWORD PTR suslen$[rsp], 2
  00073	74 1d		 je	 SHORT $LN13@sr_read_va
  00075	83 7c 24 78 04	 cmp	 DWORD PTR suslen$[rsp], 4
  0007a	74 16		 je	 SHORT $LN13@sr_read_va
  0007c	83 7c 24 78 08	 cmp	 DWORD PTR suslen$[rsp], 8
  00081	74 0f		 je	 SHORT $LN13@sr_read_va

; 761  :     {
; 762  :         sr_value_error_();

  00083	e8 00 00 00 00	 call	 sr_value_error_

; 763  :         return -1;

  00088	b8 ff ff ff ff	 mov	 eax, -1
  0008d	e9 a8 01 00 00	 jmp	 $LN1@sr_read_va
$LN13@sr_read_va:

; 764  :     }
; 765  : 
; 766  :     if ((U32)SR_READ(buf, 1, suslen, file) != suslen)

  00092	8b 44 24 78	 mov	 eax, DWORD PTR suslen$[rsp]
  00096	4c 8b 4c 24 70	 mov	 r9, QWORD PTR file$[rsp]
  0009b	44 8b c0	 mov	 r8d, eax
  0009e	ba 01 00 00 00	 mov	 edx, 1
  000a3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  000ae	3b 44 24 78	 cmp	 eax, DWORD PTR suslen$[rsp]
  000b2	74 0f		 je	 SHORT $LN14@sr_read_va

; 767  :     {
; 768  :         sr_read_error_();

  000b4	e8 00 00 00 00	 call	 sr_read_error_

; 769  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	e9 77 01 00 00	 jmp	 $LN1@sr_read_va
$LN14@sr_read_va:

; 770  :     }
; 771  : 
; 772  :     switch (suslen)

  000c3	8b 44 24 78	 mov	 eax, DWORD PTR suslen$[rsp]
  000c7	89 44 24 28	 mov	 DWORD PTR tv85[rsp], eax
  000cb	83 7c 24 28 01	 cmp	 DWORD PTR tv85[rsp], 1
  000d0	74 17		 je	 SHORT $LN15@sr_read_va
  000d2	83 7c 24 28 02	 cmp	 DWORD PTR tv85[rsp], 2
  000d7	74 25		 je	 SHORT $LN16@sr_read_va
  000d9	83 7c 24 28 04	 cmp	 DWORD PTR tv85[rsp], 4
  000de	74 3a		 je	 SHORT $LN17@sr_read_va
  000e0	83 7c 24 28 08	 cmp	 DWORD PTR tv85[rsp], 8
  000e5	74 4d		 je	 SHORT $LN18@sr_read_va
  000e7	eb 64		 jmp	 SHORT $LN19@sr_read_va
$LN15@sr_read_va:

; 773  :     {
; 774  :         case 1:  value = buf[0];         break;

  000e9	b8 01 00 00 00	 mov	 eax, 1
  000ee	48 6b c0 00	 imul	 rax, rax, 0
  000f2	0f b6 44 04 50	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  000f7	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax
  000fc	eb 58		 jmp	 SHORT $LN5@sr_read_va
$LN16@sr_read_va:

; 775  :         case 2:  value = fetch_hw (buf); break;

  000fe	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00103	e8 00 00 00 00	 call	 fetch_hw_noswap
  00108	0f b7 c8	 movzx	 ecx, ax
  0010b	e8 00 00 00 00	 call	 _byteswap_ushort
  00110	0f b7 c0	 movzx	 eax, ax
  00113	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax
  00118	eb 3c		 jmp	 SHORT $LN5@sr_read_va
$LN17@sr_read_va:

; 776  :         case 4:  value = fetch_fw (buf); break;

  0011a	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0011f	e8 00 00 00 00	 call	 fetch_fw_noswap
  00124	8b c8		 mov	 ecx, eax
  00126	e8 00 00 00 00	 call	 _byteswap_ulong
  0012b	8b c0		 mov	 eax, eax
  0012d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax
  00132	eb 22		 jmp	 SHORT $LN5@sr_read_va
$LN18@sr_read_va:

; 777  :         case 8:  value = fetch_dw (buf); break;

  00134	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00139	e8 00 00 00 00	 call	 fetch_dw_noswap
  0013e	48 8b c8	 mov	 rcx, rax
  00141	e8 00 00 00 00	 call	 _byteswap_uint64
  00146	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax
  0014b	eb 09		 jmp	 SHORT $LN5@sr_read_va
$LN19@sr_read_va:

; 778  :         default: value = 0;              break; /* To ward off gcc -Wall */

  0014d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0
$LN5@sr_read_va:
$LN9@sr_read_va:

; 779  :     }
; 780  : 
; 781  :     TRACE("                           val=0x%16.16"PRIx64"\n", value);

  00156	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177450
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0016e	85 c0		 test	 eax, eax
  00170	74 11		 je	 SHORT $LN20@sr_read_va
  00172	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  00177	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177452
  0017e	e8 00 00 00 00	 call	 DebuggerTrace
$LN20@sr_read_va:
  00183	33 c0		 xor	 eax, eax
  00185	85 c0		 test	 eax, eax
  00187	75 cd		 jne	 SHORT $LN9@sr_read_va

; 782  : 
; 783  :     switch (reslen)

  00189	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR reslen$[rsp]
  00190	89 44 24 2c	 mov	 DWORD PTR tv146[rsp], eax
  00194	83 7c 24 2c 01	 cmp	 DWORD PTR tv146[rsp], 1
  00199	74 1a		 je	 SHORT $LN21@sr_read_va
  0019b	83 7c 24 2c 02	 cmp	 DWORD PTR tv146[rsp], 2
  001a0	74 34		 je	 SHORT $LN22@sr_read_va
  001a2	83 7c 24 2c 04	 cmp	 DWORD PTR tv146[rsp], 4
  001a7	74 4f		 je	 SHORT $LN23@sr_read_va
  001a9	83 7c 24 2c 08	 cmp	 DWORD PTR tv146[rsp], 8
  001ae	74 6e		 je	 SHORT $LN24@sr_read_va
  001b0	e9 83 00 00 00	 jmp	 $LN10@sr_read_va
$LN21@sr_read_va:

; 784  :     {
; 785  :         case 1:
; 786  :         {
; 787  :             BYTE* ptr = p;

  001b5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  001bd	48 89 44 24 30	 mov	 QWORD PTR ptr$1[rsp], rax

; 788  :             *ptr = (BYTE)(value & 0xFF);

  001c2	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  001c7	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  001cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ptr$1[rsp]
  001d2	88 01		 mov	 BYTE PTR [rcx], al

; 789  :             break;

  001d4	eb 62		 jmp	 SHORT $LN10@sr_read_va
$LN22@sr_read_va:

; 790  :         }
; 791  :         case 2:
; 792  :         {
; 793  :             U16* ptr = p;

  001d6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  001de	48 89 44 24 38	 mov	 QWORD PTR ptr$2[rsp], rax

; 794  :             *ptr = (U16)(value & 0xFFFF);

  001e3	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  001e8	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  001ee	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ptr$2[rsp]
  001f3	66 89 01	 mov	 WORD PTR [rcx], ax

; 795  :             break;

  001f6	eb 40		 jmp	 SHORT $LN10@sr_read_va
$LN23@sr_read_va:

; 796  :         }
; 797  :         case 4:
; 798  :         {
; 799  :             U32* ptr = p;

  001f8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00200	48 89 44 24 40	 mov	 QWORD PTR ptr$3[rsp], rax

; 800  :             *ptr = (U32)(value & 0xFFFFFFFF);

  00205	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0020a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0020f	48 23 c8	 and	 rcx, rax
  00212	48 8b c1	 mov	 rax, rcx
  00215	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ptr$3[rsp]
  0021a	89 01		 mov	 DWORD PTR [rcx], eax

; 801  :             break;

  0021c	eb 1a		 jmp	 SHORT $LN10@sr_read_va
$LN24@sr_read_va:

; 802  :         }
; 803  :         case 8:
; 804  :         {
; 805  :             U64* ptr = p;

  0021e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00226	48 89 44 24 48	 mov	 QWORD PTR ptr$4[rsp], rax

; 806  :             *ptr = (U64)(value & 0xFFFFFFFFFFFFFFFFULL);

  0022b	48 8b 44 24 48	 mov	 rax, QWORD PTR ptr$4[rsp]
  00230	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00235	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN10@sr_read_va:

; 807  :             break;
; 808  :         }
; 809  :     }
; 810  :     return 0;

  00238	33 c0		 xor	 eax, eax
$LN1@sr_read_va:

; 811  : }

  0023a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0023f	48 33 cc	 xor	 rcx, rsp
  00242	e8 00 00 00 00	 call	 __security_check_cookie
  00247	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0024b	c3		 ret	 0
sr_read_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
buf$ = 32
__$ArrayPad$ = 40
file$ = 64
key$ = 72
len$ = 80
sr_read_hdr PROC

; 656  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 28	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 657  : BYTE  buf[8];
; 658  : 
; 659  :     if (SR_READ(buf, 1, 8, file) != 8)

  00022	4c 8b 4c 24 40	 mov	 r9, QWORD PTR file$[rsp]
  00027	41 b8 08 00 00
	00		 mov	 r8d, 8
  0002d	ba 01 00 00 00	 mov	 edx, 1
  00032	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0003d	48 83 f8 08	 cmp	 rax, 8
  00041	74 0c		 je	 SHORT $LN5@sr_read_hd

; 660  :     {
; 661  :         sr_read_error_();

  00043	e8 00 00 00 00	 call	 sr_read_error_

; 662  :         return -1;

  00048	b8 ff ff ff ff	 mov	 eax, -1
  0004d	eb 7c		 jmp	 SHORT $LN1@sr_read_hd
$LN5@sr_read_hd:

; 663  :     }
; 664  : 
; 665  :     *key = fetch_fw (buf);

  0004f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00054	e8 00 00 00 00	 call	 fetch_fw_noswap
  00059	8b c8		 mov	 ecx, eax
  0005b	e8 00 00 00 00	 call	 _byteswap_ulong
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00065	89 01		 mov	 DWORD PTR [rcx], eax

; 666  :     *len = fetch_fw (buf+4);

  00067	48 8d 44 24 24	 lea	 rax, QWORD PTR buf$[rsp+4]
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 fetch_fw_noswap
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 _byteswap_ulong
  0007b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR len$[rsp]
  00080	89 01		 mov	 DWORD PTR [rcx], eax
$LN4@sr_read_hd:

; 667  : 
; 668  :     TRACE("SR: sr_read_hdr:   key=0x%8.8x, len=0x%8.8x\n", *key, *len);

  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR len$[rsp]
  00087	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  0008a	48 8b 44 24 48	 mov	 rax, QWORD PTR key$[rsp]
  0008f	8b 10		 mov	 edx, DWORD PTR [rax]
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177353
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000a4	85 c0		 test	 eax, eax
  000a6	74 1b		 je	 SHORT $LN6@sr_read_hd
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR len$[rsp]
  000ad	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  000b0	48 8b 44 24 48	 mov	 rax, QWORD PTR key$[rsp]
  000b5	8b 10		 mov	 edx, DWORD PTR [rax]
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177355
  000be	e8 00 00 00 00	 call	 DebuggerTrace
$LN6@sr_read_hd:
  000c3	33 c0		 xor	 eax, eax
  000c5	85 c0		 test	 eax, eax
  000c7	75 b9		 jne	 SHORT $LN4@sr_read_hd

; 669  : 
; 670  :     return 0;

  000c9	33 c0		 xor	 eax, eax
$LN1@sr_read_hd:

; 671  : }

  000cb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d0	48 33 cc	 xor	 rcx, rsp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
sr_read_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
len$ = 32
file$ = 64
key$ = 72
str$ = 80
sr_write_string PROC

; 566  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 567  : size_t len = strlen(str) + 1;

  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00017	e8 00 00 00 00	 call	 strlen
  0001c	48 ff c0	 inc	 rax
  0001f	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax
$LN4@sr_write_s:

; 568  : 
; 569  :     TRACE("SR: sr_write_string: key=0x%8.8x\n", key);

  00024	8b 54 24 48	 mov	 edx, DWORD PTR key$[rsp]
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177282
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0003b	85 c0		 test	 eax, eax
  0003d	74 10		 je	 SHORT $LN5@sr_write_s
  0003f	8b 54 24 48	 mov	 edx, DWORD PTR key$[rsp]
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177284
  0004a	e8 00 00 00 00	 call	 DebuggerTrace
$LN5@sr_write_s:
  0004f	33 c0		 xor	 eax, eax
  00051	85 c0		 test	 eax, eax
  00053	75 cf		 jne	 SHORT $LN4@sr_write_s

; 570  : 
; 571  :     if (len > SR_MAX_STRING_LENGTH)

  00055	48 81 7c 24 20
	00 10 00 00	 cmp	 QWORD PTR len$[rsp], 4096 ; 00001000H
  0005e	76 0c		 jbe	 SHORT $LN6@sr_write_s

; 572  :     {
; 573  :         sr_string_error_();

  00060	e8 00 00 00 00	 call	 sr_string_error_

; 574  :         return -1;

  00065	b8 ff ff ff ff	 mov	 eax, -1
  0006a	eb 4d		 jmp	 SHORT $LN1@sr_write_s
$LN6@sr_write_s:

; 575  :     }
; 576  : 
; 577  :     if (sr_write_hdr(file, key, (U32)len) != 0)

  0006c	44 8b 44 24 20	 mov	 r8d, DWORD PTR len$[rsp]
  00071	8b 54 24 48	 mov	 edx, DWORD PTR key$[rsp]
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR file$[rsp]
  0007a	e8 00 00 00 00	 call	 sr_write_hdr
  0007f	85 c0		 test	 eax, eax
  00081	74 07		 je	 SHORT $LN7@sr_write_s

; 578  :         return -1;

  00083	b8 ff ff ff ff	 mov	 eax, -1
  00088	eb 2f		 jmp	 SHORT $LN1@sr_write_s
$LN7@sr_write_s:

; 579  : 
; 580  :     if ((size_t)SR_WRITE(str, 1, len, file) != len)

  0008a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR file$[rsp]
  0008f	4c 8b 44 24 20	 mov	 r8, QWORD PTR len$[rsp]
  00094	ba 01 00 00 00	 mov	 edx, 1
  00099	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fwrite
  000a4	48 3b 44 24 20	 cmp	 rax, QWORD PTR len$[rsp]
  000a9	74 0c		 je	 SHORT $LN8@sr_write_s

; 581  :     {
; 582  :         sr_write_error_();

  000ab	e8 00 00 00 00	 call	 sr_write_error_

; 583  :         return -1;

  000b0	b8 ff ff ff ff	 mov	 eax, -1
  000b5	eb 02		 jmp	 SHORT $LN1@sr_write_s
$LN8@sr_write_s:

; 584  :     }
; 585  :     return 0;

  000b7	33 c0		 xor	 eax, eax
$LN1@sr_write_s:

; 586  : }

  000b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bd	c3		 ret	 0
sr_write_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
siz$ = 32
tot$ = 40
buf$ = 48
tv80 = 56
file$ = 80
key$ = 88
p$ = 96
len$ = 104
sr_write_buf PROC

; 592  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 593  : U32    siz;
; 594  : U64    tot  = len;

  00017	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR tot$[rsp], rax

; 595  : BYTE*  buf  = p;

  00021	48 8b 44 24 60	 mov	 rax, QWORD PTR p$[rsp]
  00026	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 596  : 
; 597  :     if (sr_write_hdr(file, key, len) != 0)

  0002b	44 8b 44 24 68	 mov	 r8d, DWORD PTR len$[rsp]
  00030	8b 54 24 58	 mov	 edx, DWORD PTR key$[rsp]
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00039	e8 00 00 00 00	 call	 sr_write_hdr
  0003e	85 c0		 test	 eax, eax
  00040	74 0a		 je	 SHORT $LN7@sr_write_b

; 598  :         return -1;

  00042	b8 ff ff ff ff	 mov	 eax, -1
  00047	e9 cc 00 00 00	 jmp	 $LN1@sr_write_b
$LN7@sr_write_b:
$LN4@sr_write_b:

; 599  : 
; 600  :     TRACE("SR: sr_write_buf:    key=0x%8.8x, len=0x%16.16"PRIx64"\n", key, len);

  0004c	4c 8b 44 24 68	 mov	 r8, QWORD PTR len$[rsp]
  00051	8b 54 24 58	 mov	 edx, DWORD PTR key$[rsp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177307
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00068	85 c0		 test	 eax, eax
  0006a	74 15		 je	 SHORT $LN8@sr_write_b
  0006c	4c 8b 44 24 68	 mov	 r8, QWORD PTR len$[rsp]
  00071	8b 54 24 58	 mov	 edx, DWORD PTR key$[rsp]
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177309
  0007c	e8 00 00 00 00	 call	 DebuggerTrace
$LN8@sr_write_b:
  00081	33 c0		 xor	 eax, eax
  00083	85 c0		 test	 eax, eax
  00085	75 c5		 jne	 SHORT $LN4@sr_write_b
$LN5@sr_write_b:

; 601  : 
; 602  :     while (tot)

  00087	48 83 7c 24 28
	00		 cmp	 QWORD PTR tot$[rsp], 0
  0008d	0f 84 83 00 00
	00		 je	 $LN6@sr_write_b

; 603  :     {
; 604  :         siz = tot < SR_BUF_CHUNKSIZE ? tot : SR_BUF_CHUNKSIZE;

  00093	48 81 7c 24 28
	00 00 00 10	 cmp	 QWORD PTR tot$[rsp], 268435456 ; 10000000H
  0009c	73 0c		 jae	 SHORT $LN11@sr_write_b
  0009e	48 8b 44 24 28	 mov	 rax, QWORD PTR tot$[rsp]
  000a3	48 89 44 24 38	 mov	 QWORD PTR tv80[rsp], rax
  000a8	eb 09		 jmp	 SHORT $LN12@sr_write_b
$LN11@sr_write_b:
  000aa	48 c7 44 24 38
	00 00 00 10	 mov	 QWORD PTR tv80[rsp], 268435456 ; 10000000H
$LN12@sr_write_b:
  000b3	8b 44 24 38	 mov	 eax, DWORD PTR tv80[rsp]
  000b7	89 44 24 20	 mov	 DWORD PTR siz$[rsp], eax

; 605  : 
; 606  :         if ((U32)SR_WRITE(buf, 1, siz, file) != siz)

  000bb	8b 44 24 20	 mov	 eax, DWORD PTR siz$[rsp]
  000bf	4c 8b 4c 24 50	 mov	 r9, QWORD PTR file$[rsp]
  000c4	44 8b c0	 mov	 r8d, eax
  000c7	ba 01 00 00 00	 mov	 edx, 1
  000cc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fwrite
  000d7	3b 44 24 20	 cmp	 eax, DWORD PTR siz$[rsp]
  000db	74 0c		 je	 SHORT $LN9@sr_write_b

; 607  :         {
; 608  :             sr_write_error_();

  000dd	e8 00 00 00 00	 call	 sr_write_error_

; 609  :             return -1;

  000e2	b8 ff ff ff ff	 mov	 eax, -1
  000e7	eb 2f		 jmp	 SHORT $LN1@sr_write_b
$LN9@sr_write_b:

; 610  :         }
; 611  :         tot -= siz;

  000e9	8b 44 24 20	 mov	 eax, DWORD PTR siz$[rsp]
  000ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tot$[rsp]
  000f2	48 2b c8	 sub	 rcx, rax
  000f5	48 8b c1	 mov	 rax, rcx
  000f8	48 89 44 24 28	 mov	 QWORD PTR tot$[rsp], rax

; 612  :         buf += siz;

  000fd	8b 44 24 20	 mov	 eax, DWORD PTR siz$[rsp]
  00101	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  00106	48 03 c8	 add	 rcx, rax
  00109	48 8b c1	 mov	 rax, rcx
  0010c	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 613  :     }

  00111	e9 71 ff ff ff	 jmp	 $LN5@sr_write_b
$LN6@sr_write_b:

; 614  : 
; 615  :     return 0;

  00116	33 c0		 xor	 eax, eax
$LN1@sr_write_b:

; 616  : }

  00118	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011c	c3		 ret	 0
sr_write_buf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
tv84 = 32
buf$ = 40
__$ArrayPad$ = 48
file$ = 80
key$ = 88
val$ = 96
len$ = 104
sr_write_value PROC

; 622  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@sr_write_v:

; 623  : BYTE    buf[8];
; 624  : 
; 625  :     TRACE("SR: sr_write_value:  key=0x%8.8x, len=0x%8.8x, val=0x%16.16"PRIx64"\n", key, len, val);

  00026	4c 8b 4c 24 60	 mov	 r9, QWORD PTR val$[rsp]
  0002b	44 8b 44 24 68	 mov	 r8d, DWORD PTR len$[rsp]
  00030	8b 54 24 58	 mov	 edx, DWORD PTR key$[rsp]
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177331
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00047	85 c0		 test	 eax, eax
  00049	74 1a		 je	 SHORT $LN7@sr_write_v
  0004b	4c 8b 4c 24 60	 mov	 r9, QWORD PTR val$[rsp]
  00050	44 8b 44 24 68	 mov	 r8d, DWORD PTR len$[rsp]
  00055	8b 54 24 58	 mov	 edx, DWORD PTR key$[rsp]
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177333
  00060	e8 00 00 00 00	 call	 DebuggerTrace
$LN7@sr_write_v:
  00065	33 c0		 xor	 eax, eax
  00067	85 c0		 test	 eax, eax
  00069	75 bb		 jne	 SHORT $LN4@sr_write_v

; 626  : 
; 627  :     if (len != 1 && len != 2 && len != 4 && len != 8)

  0006b	83 7c 24 68 01	 cmp	 DWORD PTR len$[rsp], 1
  00070	74 24		 je	 SHORT $LN8@sr_write_v
  00072	83 7c 24 68 02	 cmp	 DWORD PTR len$[rsp], 2
  00077	74 1d		 je	 SHORT $LN8@sr_write_v
  00079	83 7c 24 68 04	 cmp	 DWORD PTR len$[rsp], 4
  0007e	74 16		 je	 SHORT $LN8@sr_write_v
  00080	83 7c 24 68 08	 cmp	 DWORD PTR len$[rsp], 8
  00085	74 0f		 je	 SHORT $LN8@sr_write_v

; 628  :     {
; 629  :         sr_value_error_();

  00087	e8 00 00 00 00	 call	 sr_value_error_

; 630  :         return -1;

  0008c	b8 ff ff ff ff	 mov	 eax, -1
  00091	e9 d2 00 00 00	 jmp	 $LN1@sr_write_v
$LN8@sr_write_v:

; 631  :     }
; 632  : 
; 633  :     if (sr_write_hdr(file, key, len) != 0)

  00096	44 8b 44 24 68	 mov	 r8d, DWORD PTR len$[rsp]
  0009b	8b 54 24 58	 mov	 edx, DWORD PTR key$[rsp]
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  000a4	e8 00 00 00 00	 call	 sr_write_hdr
  000a9	85 c0		 test	 eax, eax
  000ab	74 0a		 je	 SHORT $LN9@sr_write_v

; 634  :         return -1;

  000ad	b8 ff ff ff ff	 mov	 eax, -1
  000b2	e9 b1 00 00 00	 jmp	 $LN1@sr_write_v
$LN9@sr_write_v:

; 635  : 
; 636  :     switch (len)

  000b7	8b 44 24 68	 mov	 eax, DWORD PTR len$[rsp]
  000bb	89 44 24 20	 mov	 DWORD PTR tv84[rsp], eax
  000bf	83 7c 24 20 01	 cmp	 DWORD PTR tv84[rsp], 1
  000c4	74 17		 je	 SHORT $LN10@sr_write_v
  000c6	83 7c 24 20 02	 cmp	 DWORD PTR tv84[rsp], 2
  000cb	74 24		 je	 SHORT $LN11@sr_write_v
  000cd	83 7c 24 20 04	 cmp	 DWORD PTR tv84[rsp], 4
  000d2	74 36		 je	 SHORT $LN12@sr_write_v
  000d4	83 7c 24 20 08	 cmp	 DWORD PTR tv84[rsp], 8
  000d9	74 46		 je	 SHORT $LN13@sr_write_v
  000db	eb 5b		 jmp	 SHORT $LN5@sr_write_v
$LN10@sr_write_v:

; 637  :     {
; 638  :         case 1: buf[0]     =  (BYTE)val;  break;

  000dd	b8 01 00 00 00	 mov	 eax, 1
  000e2	48 6b c0 00	 imul	 rax, rax, 0
  000e6	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR val$[rsp]
  000eb	88 4c 04 28	 mov	 BYTE PTR buf$[rsp+rax], cl
  000ef	eb 47		 jmp	 SHORT $LN5@sr_write_v
$LN11@sr_write_v:

; 639  :         case 2: store_hw (buf, (U16)val); break;

  000f1	0f b7 4c 24 60	 movzx	 ecx, WORD PTR val$[rsp]
  000f6	e8 00 00 00 00	 call	 _byteswap_ushort
  000fb	0f b7 d0	 movzx	 edx, ax
  000fe	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buf$[rsp]
  00103	e8 00 00 00 00	 call	 store_hw_noswap
  00108	eb 2e		 jmp	 SHORT $LN5@sr_write_v
$LN12@sr_write_v:

; 640  :         case 4: store_fw (buf, (U32)val); break;

  0010a	8b 4c 24 60	 mov	 ecx, DWORD PTR val$[rsp]
  0010e	e8 00 00 00 00	 call	 _byteswap_ulong
  00113	8b d0		 mov	 edx, eax
  00115	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buf$[rsp]
  0011a	e8 00 00 00 00	 call	 store_fw_noswap
  0011f	eb 17		 jmp	 SHORT $LN5@sr_write_v
$LN13@sr_write_v:

; 641  :         case 8: store_dw (buf, (U64)val); break;

  00121	48 8b 4c 24 60	 mov	 rcx, QWORD PTR val$[rsp]
  00126	e8 00 00 00 00	 call	 _byteswap_uint64
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buf$[rsp]
  00133	e8 00 00 00 00	 call	 store_dw_noswap
$LN5@sr_write_v:

; 642  :     }
; 643  : 
; 644  :     if ((U32)SR_WRITE(buf, 1, len, file) != len)

  00138	8b 44 24 68	 mov	 eax, DWORD PTR len$[rsp]
  0013c	4c 8b 4c 24 50	 mov	 r9, QWORD PTR file$[rsp]
  00141	44 8b c0	 mov	 r8d, eax
  00144	ba 01 00 00 00	 mov	 edx, 1
  00149	48 8d 4c 24 28	 lea	 rcx, QWORD PTR buf$[rsp]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fwrite
  00154	3b 44 24 68	 cmp	 eax, DWORD PTR len$[rsp]
  00158	74 0c		 je	 SHORT $LN14@sr_write_v

; 645  :     {
; 646  :         sr_write_error_();

  0015a	e8 00 00 00 00	 call	 sr_write_error_

; 647  :         return -1;

  0015f	b8 ff ff ff ff	 mov	 eax, -1
  00164	eb 02		 jmp	 SHORT $LN1@sr_write_v
$LN14@sr_write_v:

; 648  :     }
; 649  :     return 0;

  00166	33 c0		 xor	 eax, eax
$LN1@sr_write_v:

; 650  : }

  00168	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0016d	48 33 cc	 xor	 rcx, rsp
  00170	e8 00 00 00 00	 call	 __security_check_cookie
  00175	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00179	c3		 ret	 0
sr_write_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.h
_TEXT	SEGMENT
buf$ = 32
__$ArrayPad$ = 40
file$ = 64
key$ = 72
len$ = 80
sr_write_hdr PROC

; 546  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 44 24 28	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@sr_write_h:

; 547  : BYTE  buf[8];
; 548  : 
; 549  :     TRACE("SR: sr_write_hdr:    key=0x%8.8x, len=0x%8.8x\n", key, len);

  00021	44 8b 44 24 50	 mov	 r8d, DWORD PTR len$[rsp]
  00026	8b 54 24 48	 mov	 edx, DWORD PTR key$[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177265
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0003d	85 c0		 test	 eax, eax
  0003f	74 15		 je	 SHORT $LN5@sr_write_h
  00041	44 8b 44 24 50	 mov	 r8d, DWORD PTR len$[rsp]
  00046	8b 54 24 48	 mov	 edx, DWORD PTR key$[rsp]
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG177267
  00051	e8 00 00 00 00	 call	 DebuggerTrace
$LN5@sr_write_h:
  00056	33 c0		 xor	 eax, eax
  00058	85 c0		 test	 eax, eax
  0005a	75 c5		 jne	 SHORT $LN4@sr_write_h

; 550  : 
; 551  :     store_fw (buf, key);

  0005c	8b 4c 24 48	 mov	 ecx, DWORD PTR key$[rsp]
  00060	e8 00 00 00 00	 call	 _byteswap_ulong
  00065	8b d0		 mov	 edx, eax
  00067	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  0006c	e8 00 00 00 00	 call	 store_fw_noswap

; 552  :     store_fw (buf+4, len);

  00071	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00075	e8 00 00 00 00	 call	 _byteswap_ulong
  0007a	48 8d 4c 24 24	 lea	 rcx, QWORD PTR buf$[rsp+4]
  0007f	8b d0		 mov	 edx, eax
  00081	e8 00 00 00 00	 call	 store_fw_noswap

; 553  : 
; 554  :     if (SR_WRITE(buf, 1, 8, file) != 8)

  00086	4c 8b 4c 24 40	 mov	 r9, QWORD PTR file$[rsp]
  0008b	41 b8 08 00 00
	00		 mov	 r8d, 8
  00091	ba 01 00 00 00	 mov	 edx, 1
  00096	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fwrite
  000a1	48 83 f8 08	 cmp	 rax, 8
  000a5	74 0c		 je	 SHORT $LN6@sr_write_h

; 555  :     {
; 556  :         sr_write_error_();

  000a7	e8 00 00 00 00	 call	 sr_write_error_

; 557  :         return -1;

  000ac	b8 ff ff ff ff	 mov	 eax, -1
  000b1	eb 02		 jmp	 SHORT $LN1@sr_write_h
$LN6@sr_write_h:

; 558  :     }
; 559  :     return 0;

  000b3	33 c0		 xor	 eax, eax
$LN1@sr_write_h:

; 560  : }

  000b5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ba	48 33 cc	 xor	 rcx, rsp
  000bd	e8 00 00 00 00	 call	 __security_check_cookie
  000c2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c6	c3		 ret	 0
sr_write_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
all_stopped$ = 32
are_all_cpus_stopped PROC

; 546  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 547  :     bool all_stopped;
; 548  : 
; 549  :     OBTAIN_INTLOCK( NULL );

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG158973
  0000b	33 c9		 xor	 ecx, ecx
  0000d	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 550  :     {
; 551  :         all_stopped = are_all_cpus_stopped_intlock_held();

  00012	e8 00 00 00 00	 call	 are_all_cpus_stopped_intlock_held
  00017	88 44 24 20	 mov	 BYTE PTR all_stopped$[rsp], al

; 552  :     }
; 553  :     RELEASE_INTLOCK( NULL );

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG158974
  00022	33 c9		 xor	 ecx, ecx
  00024	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 554  :     return all_stopped;

  00029	0f b6 44 24 20	 movzx	 eax, BYTE PTR all_stopped$[rsp]

; 555  : }

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
are_all_cpus_stopped ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
cpu$ = 0
are_all_cpus_stopped_intlock_held PROC

; 516  : {

  00000	48 83 ec 18	 sub	 rsp, 24

; 517  :     int cpu;
; 518  : 
; 519  :     if (sysblk.cpus)

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0000b	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [rax+260], 0
  00012	74 5b		 je	 SHORT $LN5@are_all_cp

; 520  :         for (cpu = 0; cpu < sysblk.hicpu; cpu++)

  00014	c7 04 24 00 00
	00 00		 mov	 DWORD PTR cpu$[rsp], 0
  0001b	eb 08		 jmp	 SHORT $LN4@are_all_cp
$LN2@are_all_cp:
  0001d	8b 04 24	 mov	 eax, DWORD PTR cpu$[rsp]
  00020	ff c0		 inc	 eax
  00022	89 04 24	 mov	 DWORD PTR cpu$[rsp], eax
$LN4@are_all_cp:
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002c	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  00032	39 04 24	 cmp	 DWORD PTR cpu$[rsp], eax
  00035	7d 38		 jge	 SHORT $LN3@are_all_cp

; 521  :             if (IS_CPU_ONLINE( cpu ))

  00037	48 63 04 24	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0004b	74 20		 je	 SHORT $LN6@are_all_cp

; 522  :                 if (sysblk.regs[ cpu ]->cpustate != CPUSTATE_STOPPED)

  0004d	48 63 04 24	 movsxd	 rax, DWORD PTR cpu$[rsp]
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00058	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00060	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  00064	83 f8 03	 cmp	 eax, 3
  00067	74 04		 je	 SHORT $LN7@are_all_cp

; 523  :                     return false;

  00069	32 c0		 xor	 al, al
  0006b	eb 04		 jmp	 SHORT $LN1@are_all_cp
$LN7@are_all_cp:
$LN6@are_all_cp:
  0006d	eb ae		 jmp	 SHORT $LN2@are_all_cp
$LN3@are_all_cp:
$LN5@are_all_cp:

; 524  :     return true;

  0006f	b0 01		 mov	 al, 1
$LN1@are_all_cp:

; 525  : }

  00071	48 83 c4 18	 add	 rsp, 24
  00075	c3		 ret	 0
are_all_cpus_stopped_intlock_held ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Release_Interrupt_Lock PROC

; 403  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Release_In:

; 404  :     UNREFERENCED( regs );

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@Release_In

; 405  :     sysblk.intowner = LOCK_OWNER_NONE;

  00014	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00020	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 406  :     hthread_release_lock( &sysblk.intlock, location );

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00034	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 407  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
Release_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Obtain_Interrupt_Lock PROC

; 379  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Obtain_Int

; 381  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Obtain_Int:

; 382  :     hthread_obtain_lock( &sysblk.intlock, location );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 383  :     Interrupt_Lock_Obtained( regs, location );

  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained

; 384  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Interrupt_Lock_Obtained PROC

; 347  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 348  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	0f 84 db 00 00
	00		 je	 $LN4@Interrupt_
$LN2@Interrupt_:

; 349  :     {
; 350  :         /* Wait for any SYNCHRONIZE_CPUS to finish before proceeding */
; 351  :         while (sysblk.syncing)

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8f 00 00
	00		 je	 $LN3@Interrupt_

; 352  :         {
; 353  :             /* Indicate we have reached the sync point */
; 354  :             sysblk.sync_mask &= ~HOSTREGS->cpubit;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00035	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0003c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00040	48 f7 d0	 not	 rax
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004a	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  00051	48 23 c8	 and	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005e	48 89 81 80 13
	00 00		 mov	 QWORD PTR [rcx+4992], rax

; 355  : 
; 356  :             /* If we're the last CPU to reach this sync point,
; 357  :                signal the CPU that requested the sync that it
; 358  :                may now safely proceed with its exclusive logic.
; 359  :             */
; 360  :             if (!sysblk.sync_mask)

  00065	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006c	48 83 b8 80 13
	00 00 00	 cmp	 QWORD PTR [rax+4992], 0
  00074	75 1b		 jne	 SHORT $LN6@Interrupt_

; 361  :                 hthread_signal_condition( &sysblk.all_synced_cond, location );

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007d	48 05 88 13 00
	00		 add	 rax, 5000		; 00001388H
  00083	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@Interrupt_:

; 362  : 
; 363  :             /* Wait for CPU that requested the sync to indicate
; 364  :                it's done and thus is now safe for us to proceed.
; 365  :             */
; 366  :             hthread_wait_condition( &sysblk.sync_done_cond, &sysblk.intlock, location );

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a5	48 81 c1 90 13
	00 00		 add	 rcx, 5008		; 00001390H
  000ac	4c 8b 44 24 38	 mov	 r8, QWORD PTR location$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 367  :         }

  000ba	e9 5b ff ff ff	 jmp	 $LN2@Interrupt_
$LN3@Interrupt_:

; 368  : 
; 369  :         HOSTREGS->intwait = false;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000c4	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000cb	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0

; 370  :         sysblk.intowner = HOSTREGS->cpuad;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e5	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  000ec	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 371  :     }

  000f3	eb 13		 jmp	 SHORT $LN5@Interrupt_
$LN4@Interrupt_:

; 372  :     else
; 373  :         sysblk.intowner = LOCK_OWNER_OTHER;

  000f5	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00101	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax
$LN5@Interrupt_:

; 374  : }

  00108	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010c	c3		 ret	 0
Interrupt_Lock_Obtained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
i$ = 32
current_waittod$ = 40
lru_regs$ = 48
current_regs$ = 56
lru_waittod$ = 64
mask$ = 96
location$ = 104
wakeup_cpu_mask PROC

; 275  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 276  :     REGS*  current_regs;
; 277  :     REGS*  lru_regs = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR lru_regs$[rsp], 0

; 278  :     TOD    current_waittod;
; 279  :     TOD    lru_waittod;
; 280  :     int    i;
; 281  : 
; 282  :     if (mask)

  00017	48 83 7c 24 60
	00		 cmp	 QWORD PTR mask$[rsp], 0
  0001d	0f 84 d3 00 00
	00		 je	 $LN5@wakeup_cpu

; 283  :     {
; 284  :         for (i=0; mask; mask >>= 1, ++i)

  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002b	eb 17		 jmp	 SHORT $LN4@wakeup_cpu
$LN2@wakeup_cpu:
  0002d	48 8b 44 24 60	 mov	 rax, QWORD PTR mask$[rsp]
  00032	48 d1 e8	 shr	 rax, 1
  00035	48 89 44 24 60	 mov	 QWORD PTR mask$[rsp], rax
  0003a	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0003e	ff c0		 inc	 eax
  00040	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@wakeup_cpu:
  00044	48 83 7c 24 60
	00		 cmp	 QWORD PTR mask$[rsp], 0
  0004a	0f 84 97 00 00
	00		 je	 $LN3@wakeup_cpu

; 285  :         {
; 286  :             if (mask & 1)

  00050	48 8b 44 24 60	 mov	 rax, QWORD PTR mask$[rsp]
  00055	48 83 e0 01	 and	 rax, 1
  00059	48 85 c0	 test	 rax, rax
  0005c	0f 84 80 00 00
	00		 je	 $LN6@wakeup_cpu

; 287  :             {
; 288  :                 current_regs = sysblk.regs[i];

  00062	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0006e	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00076	48 89 44 24 38	 mov	 QWORD PTR current_regs$[rsp], rax

; 289  :                 current_waittod = current_regs->waittod;

  0007b	48 8b 44 24 38	 mov	 rax, QWORD PTR current_regs$[rsp]
  00080	48 8b 80 b8 07
	00 00		 mov	 rax, QWORD PTR [rax+1976]
  00087	48 89 44 24 28	 mov	 QWORD PTR current_waittod$[rsp], rax

; 290  : 
; 291  :                 /* Select least recently used CPU
; 292  :                  *
; 293  :                  * The LRU CPU is chosen to keep the CPU threads active
; 294  :                  * and to distribute the I/O load across the available
; 295  :                  * CPUs.
; 296  :                  *
; 297  :                  * The current_waittod should never be zero; however,
; 298  :                  * we check it in case the cache from another processor
; 299  :                  * has not yet been written back to memory, which can
; 300  :                  * happen once the lock structure is updated for
; 301  :                  * individual CPU locks. (OBTAIN/RELEASE_INTLOCK(regs)
; 302  :                  * at present locks ALL CPUs, despite the specification
; 303  :                  * of regs.)
; 304  :                  */
; 305  :                 if (lru_regs == NULL ||

  0008c	48 83 7c 24 30
	00		 cmp	 QWORD PTR lru_regs$[rsp], 0
  00092	74 3a		 je	 SHORT $LN8@wakeup_cpu
  00094	48 83 7c 24 28
	00		 cmp	 QWORD PTR current_waittod$[rsp], 0
  0009a	76 46		 jbe	 SHORT $LN7@wakeup_cpu
  0009c	48 8b 44 24 40	 mov	 rax, QWORD PTR lru_waittod$[rsp]
  000a1	48 39 44 24 28	 cmp	 QWORD PTR current_waittod$[rsp], rax
  000a6	72 26		 jb	 SHORT $LN9@wakeup_cpu
  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR lru_waittod$[rsp]
  000ad	48 39 44 24 28	 cmp	 QWORD PTR current_waittod$[rsp], rax
  000b2	75 2e		 jne	 SHORT $LN7@wakeup_cpu
  000b4	48 8b 44 24 38	 mov	 rax, QWORD PTR current_regs$[rsp]
  000b9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lru_regs$[rsp]
  000be	48 8b 89 c0 07
	00 00		 mov	 rcx, QWORD PTR [rcx+1984]
  000c5	48 39 88 c0 07
	00 00		 cmp	 QWORD PTR [rax+1984], rcx
  000cc	72 14		 jb	 SHORT $LN7@wakeup_cpu
$LN9@wakeup_cpu:
$LN8@wakeup_cpu:

; 306  :                     (current_waittod > 0 &&
; 307  :                      (current_waittod < lru_waittod ||
; 308  :                       (current_waittod == lru_waittod &&
; 309  :                        current_regs->waittime >= lru_regs->waittime))))
; 310  :                 {
; 311  :                     lru_regs = current_regs;

  000ce	48 8b 44 24 38	 mov	 rax, QWORD PTR current_regs$[rsp]
  000d3	48 89 44 24 30	 mov	 QWORD PTR lru_regs$[rsp], rax

; 312  :                     lru_waittod = current_waittod;

  000d8	48 8b 44 24 28	 mov	 rax, QWORD PTR current_waittod$[rsp]
  000dd	48 89 44 24 40	 mov	 QWORD PTR lru_waittod$[rsp], rax
$LN7@wakeup_cpu:
$LN6@wakeup_cpu:

; 313  :                 }
; 314  :             }
; 315  :         }

  000e2	e9 46 ff ff ff	 jmp	 $LN2@wakeup_cpu
$LN3@wakeup_cpu:

; 316  : 
; 317  :         /* Wake up the least recently used CPU */
; 318  :         wakeup_cpu( lru_regs, location );

  000e7	48 8b 54 24 68	 mov	 rdx, QWORD PTR location$[rsp]
  000ec	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lru_regs$[rsp]
  000f1	e8 00 00 00 00	 call	 wakeup_cpu
$LN5@wakeup_cpu:

; 319  :     }
; 320  : }

  000f6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000fa	c3		 ret	 0
wakeup_cpu_mask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
wakeup_cpu PROC

; 268  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 269  :     hthread_signal_condition( &regs->intcond, location );

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00013	48 05 80 0c 00
	00		 add	 rax, 3200		; 00000c80H
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0001e	48 8b c8	 mov	 rcx, rax
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 270  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
wakeup_cpu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.c
_TEXT	SEGMENT
len$ = 96
i$ = 100
file$ = 104
dev$ = 112
rc$ = 120
regs$ = 128
lcss$ = 136
tv216 = 140
devnum$ = 144
hw$ = 148
key$ = 152
devargx$ = 156
devargc$ = 160
numconfdev$ = 164
ioq$ = 168
tv1059 = 176
tv2263 = 180
i$1 = 184
regs$2 = 192
mask$3 = 200
mainsize$ = 208
xpndsize$ = 216
tv1028 = 224
tv1084 = 228
tv1477 = 232
tv1496 = 236
tv1564 = 240
tv1626 = 244
tv1657 = 248
tv1688 = 252
tv1719 = 256
tv1781 = 260
tv1811 = 264
tv1855 = 268
tv1595 = 272
tv2150 = 276
k$4 = 280
l$5 = 284
k$6 = 288
l$7 = 292
save_sysblk_arch_mode$8 = 296
value$9 = 300
tv1885 = 304
tv950 = 308
wake$10 = 312
fn$ = 320
$T11 = 328
started_mask$ = 336
tv140 = 344
tv972 = 352
tv994 = 360
tv1030 = 368
p$12 = 376
tv1086 = 384
dreg$ = 392
p$13 = 400
tv2296 = 408
tv3527 = 416
devargv$ = 432
zeros$ = 560
buf2$14 = 576
buf1$15 = 600
buf2$16 = 624
buf1$17 = 648
buf2$18 = 672
buf1$19 = 696
buf2$20 = 720
buf1$21 = 744
buf$ = 768
__$ArrayPad$ = 4880
argc$ = 4912
argv$ = 4920
cmdline$ = 4928
resume_cmd PROC

; 366  : {

$LN1019:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	b8 20 13 00 00	 mov	 eax, 4896		; 00001320H
  00014	e8 00 00 00 00	 call	 __chkstk
  00019	48 2b e0	 sub	 rsp, rax
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 10
	13 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 367  : char    *fn = SR_DEFAULT_FILENAME;

  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG179711
  00035	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR fn$[rsp], rax

; 368  : SR_FILE  file;
; 369  : U32      key = 0, len = 0;

  0003d	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR key$[rsp], 0
  00048	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0

; 370  : U64      mainsize = 0;

  00050	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR mainsize$[rsp], 0

; 371  : U64      xpndsize = 0;

  0005c	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR xpndsize$[rsp], 0

; 372  : CPU_BITMAP started_mask = 0;

  00068	48 c7 84 24 50
	01 00 00 00 00
	00 00		 mov	 QWORD PTR started_mask$[rsp], 0

; 373  : int      i, rc = -1;

  00074	c7 44 24 78 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 374  : REGS    *regs = NULL;

  0007c	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR regs$[rsp], 0

; 375  : U16      devnum=0;

  00088	33 c0		 xor	 eax, eax
  0008a	66 89 84 24 90
	00 00 00	 mov	 WORD PTR devnum$[rsp], ax

; 376  : U16      lcss=0;

  00092	33 c0		 xor	 eax, eax
  00094	66 89 84 24 88
	00 00 00	 mov	 WORD PTR lcss$[rsp], ax

; 377  : U16      hw;
; 378  : int      devargc=0;

  0009c	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR devargc$[rsp], 0

; 379  : char    *devargv[16];
; 380  : int      devargx=0;

  000a7	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR devargx$[rsp], 0

; 381  : DEVBLK  *dev = NULL;

  000b2	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR dev$[rsp], 0

; 382  : IOINT   *ioq = NULL;

  000bb	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ioq$[rsp], 0

; 383  : char     buf[SR_MAX_STRING_LENGTH+1];
; 384  : char     zeros[16];
; 385  : S64      dreg;
; 386  : int      numconfdev=0;

  000c7	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR numconfdev$[rsp], 0
$LN4@resume_cmd:

; 387  : 
; 388  :     UNREFERENCED(cmdline);

  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 fa		 jne	 SHORT $LN4@resume_cmd

; 389  : 
; 390  :     if (argc > 2)

  000d8	83 bc 24 30 13
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000e0	7e 51		 jle	 SHORT $LN492@resume_cmd

; 391  :     {
; 392  :         // "SR: too many arguments"
; 393  :         WRMSG(HHC02000, "E");

  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179713
  000f4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179714
  00100	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00105	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00110	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179715
  00117	ba 89 01 00 00	 mov	 edx, 393		; 00000189H
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179716
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 394  :         return -1;

  00129	b8 ff ff ff ff	 mov	 eax, -1
  0012e	e9 fc 43 00 00	 jmp	 $LN1@resume_cmd
$LN492@resume_cmd:

; 395  :     }
; 396  : 
; 397  :     if (argc == 2)

  00133	83 bc 24 30 13
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0013b	75 1d		 jne	 SHORT $LN493@resume_cmd

; 398  :         fn = argv[1];

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 01	 imul	 rax, rax, 1
  00146	48 8b 8c 24 38
	13 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0014e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00152	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR fn$[rsp], rax
$LN493@resume_cmd:

; 399  : 
; 400  :     memset (zeros, 0, sizeof(zeros));

  0015a	48 8d 84 24 30
	02 00 00	 lea	 rax, QWORD PTR zeros$[rsp]
  00162	48 8b f8	 mov	 rdi, rax
  00165	33 c0		 xor	 eax, eax
  00167	b9 10 00 00 00	 mov	 ecx, 16
  0016c	f3 aa		 rep stosb
$LN7@resume_cmd:

; 401  : 
; 402  :     TRACE("SR: Begin Resume Processing...\n");

  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179718
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00181	85 c0		 test	 eax, eax
  00183	74 0c		 je	 SHORT $LN494@resume_cmd
  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179720
  0018c	e8 00 00 00 00	 call	 DebuggerTrace
$LN494@resume_cmd:
  00191	33 c0		 xor	 eax, eax
  00193	85 c0		 test	 eax, eax
  00195	75 d7		 jne	 SHORT $LN7@resume_cmd
$LN10@resume_cmd:

; 403  : 
; 404  :     /* Make sure all CPUs are deconfigured or stopped */
; 405  :     TRACE("SR: Waiting for CPUs to stop...\n");

  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179721
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001aa	85 c0		 test	 eax, eax
  001ac	74 0c		 je	 SHORT $LN495@resume_cmd
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179723
  001b5	e8 00 00 00 00	 call	 DebuggerTrace
$LN495@resume_cmd:
  001ba	33 c0		 xor	 eax, eax
  001bc	85 c0		 test	 eax, eax
  001be	75 d7		 jne	 SHORT $LN10@resume_cmd

; 406  :     if (!are_all_cpus_stopped())

  001c0	e8 00 00 00 00	 call	 are_all_cpus_stopped
  001c5	0f b6 c0	 movzx	 eax, al
  001c8	85 c0		 test	 eax, eax
  001ca	75 51		 jne	 SHORT $LN496@resume_cmd

; 407  :     {
; 408  :         // "SR: all processors must be stopped to resume"
; 409  :         WRMSG(HHC02005, "E");

  001cc	b9 01 00 00 00	 mov	 ecx, 1
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179725
  001de	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179726
  001ea	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179727
  00201	ba 99 01 00 00	 mov	 edx, 409		; 00000199H
  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179728
  0020d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 410  :         return -1;

  00213	b8 ff ff ff ff	 mov	 eax, -1
  00218	e9 12 43 00 00	 jmp	 $LN1@resume_cmd
$LN496@resume_cmd:

; 411  :     }
; 412  : 
; 413  :     file = SR_OPEN (fn, "rb");

  0021d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179729
  00224	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR fn$[rsp]
  0022c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00232	48 89 44 24 68	 mov	 QWORD PTR file$[rsp], rax

; 414  :     if (file == NULL)

  00237	48 83 7c 24 68
	00		 cmp	 QWORD PTR file$[rsp], 0
  0023d	0f 85 80 00 00
	00		 jne	 $LN497@resume_cmd

; 415  :     {
; 416  :         // "SR: error in function '%s': '%s'"
; 417  :         WRMSG(HHC02001, "E", "open()",strerror(errno));

  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00249	8b 08		 mov	 ecx, DWORD PTR [rax]
  0024b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00251	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv140[rsp], rax
  00259	b9 01 00 00 00	 mov	 ecx, 1
  0025e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00264	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv140[rsp]
  0026c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179731
  00278	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179732
  00284	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179733
  00290	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00295	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0029a	41 b9 03 00 00
	00		 mov	 r9d, 3
  002a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179734
  002a7	ba a1 01 00 00	 mov	 edx, 417		; 000001a1H
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179735
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 418  :         return -1;

  002b9	b8 ff ff ff ff	 mov	 eax, -1
  002be	e9 6c 42 00 00	 jmp	 $LN1@resume_cmd
$LN497@resume_cmd:
$LN13@resume_cmd:

; 419  :     }
; 420  : 
; 421  :     /* First key must be SR_HDR_ID and string must match SR_ID */
; 422  :     TRACE("SR: Reading File Header...\n");

  002c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179736
  002ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002d6	85 c0		 test	 eax, eax
  002d8	74 0c		 je	 SHORT $LN498@resume_cmd
  002da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179738
  002e1	e8 00 00 00 00	 call	 DebuggerTrace
$LN498@resume_cmd:
  002e6	33 c0		 xor	 eax, eax
  002e8	85 c0		 test	 eax, eax
  002ea	75 d7		 jne	 SHORT $LN13@resume_cmd
$LN16@resume_cmd:

; 423  :     SR_READ_HDR(file, key, len);

  002ec	4c 8d 84 24 1c
	01 00 00	 lea	 r8, QWORD PTR l$5[rsp]
  002f4	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR k$4[rsp]
  002fc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00301	e8 00 00 00 00	 call	 sr_read_hdr
  00306	85 c0		 test	 eax, eax
  00308	74 0a		 je	 SHORT $LN499@resume_cmd
  0030a	b8 ff ff ff ff	 mov	 eax, -1
  0030f	e9 1b 42 00 00	 jmp	 $LN1@resume_cmd
$LN499@resume_cmd:
  00314	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR k$4[rsp]
  0031b	89 84 24 98 00
	00 00		 mov	 DWORD PTR key$[rsp], eax
  00322	8b 84 24 1c 01
	00 00		 mov	 eax, DWORD PTR l$5[rsp]
  00329	89 44 24 60	 mov	 DWORD PTR len$[rsp], eax
  0032d	33 c0		 xor	 eax, eax
  0032f	85 c0		 test	 eax, eax
  00331	75 b9		 jne	 SHORT $LN16@resume_cmd

; 424  :     if (key == SR_HDR_ID) SR_READ_STRING(file, buf, len);

  00333	81 bc 24 98 00
	00 00 00 00 e0
	ac		 cmp	 DWORD PTR key$[rsp], -1394606080 ; ace00000H
  0033e	75 2b		 jne	 SHORT $LN500@resume_cmd
$LN19@resume_cmd:
  00340	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  00345	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  0034d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00352	e8 00 00 00 00	 call	 sr_read_string
  00357	85 c0		 test	 eax, eax
  00359	74 0a		 je	 SHORT $LN501@resume_cmd
  0035b	b8 ff ff ff ff	 mov	 eax, -1
  00360	e9 ca 41 00 00	 jmp	 $LN1@resume_cmd
$LN501@resume_cmd:
  00365	33 c0		 xor	 eax, eax
  00367	85 c0		 test	 eax, eax
  00369	75 d5		 jne	 SHORT $LN19@resume_cmd
$LN500@resume_cmd:

; 425  :     if (key != SR_HDR_ID || strcmp(buf, SR_ID))

  0036b	81 bc 24 98 00
	00 00 00 00 e0
	ac		 cmp	 DWORD PTR key$[rsp], -1394606080 ; ace00000H
  00376	75 18		 jne	 SHORT $LN503@resume_cmd
  00378	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179744
  0037f	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00387	e8 00 00 00 00	 call	 strcmp
  0038c	85 c0		 test	 eax, eax
  0038e	74 4c		 je	 SHORT $LN502@resume_cmd
$LN503@resume_cmd:

; 426  :     {
; 427  :         // "SR: file identifier error"
; 428  :         WRMSG(HHC02006, "E");

  00390	b9 01 00 00 00	 mov	 ecx, 1
  00395	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0039b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179745
  003a2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179746
  003ae	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b8	41 b9 03 00 00
	00		 mov	 r9d, 3
  003be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179747
  003c5	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  003ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179748
  003d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 429  :         goto sr_error_exit;

  003d7	e9 ef 40 00 00	 jmp	 $sr_error_exit$1020
$LN502@resume_cmd:
$LN22@resume_cmd:

; 430  :     }
; 431  : 
; 432  :     /* Deconfigure all CPUs */
; 433  :     TRACE("SR: Deconfiguring all CPUs...\n");

  003dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179749
  003e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  003e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  003ef	85 c0		 test	 eax, eax
  003f1	74 0c		 je	 SHORT $LN504@resume_cmd
  003f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179751
  003fa	e8 00 00 00 00	 call	 DebuggerTrace
$LN504@resume_cmd:
  003ff	33 c0		 xor	 eax, eax
  00401	85 c0		 test	 eax, eax
  00403	75 d7		 jne	 SHORT $LN22@resume_cmd

; 434  :     OBTAIN_INTLOCK(NULL);

  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179752
  0040c	33 c9		 xor	 ecx, ecx
  0040e	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 435  :     for (i = 0; i < sysblk.maxcpu; i++)

  00413	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0041b	eb 0a		 jmp	 SHORT $LN25@resume_cmd
$LN23@resume_cmd:
  0041d	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00421	ff c0		 inc	 eax
  00423	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN25@resume_cmd:
  00427	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0042e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00434	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  00438	7d 22		 jge	 SHORT $LN24@resume_cmd

; 436  :         if (IS_CPU_ONLINE(i))

  0043a	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  0043f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00446	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0044f	74 09		 je	 SHORT $LN505@resume_cmd

; 437  :             deconfigure_cpu(i);

  00451	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  00455	e8 00 00 00 00	 call	 deconfigure_cpu
$LN505@resume_cmd:
  0045a	eb c1		 jmp	 SHORT $LN23@resume_cmd
$LN24@resume_cmd:

; 438  :     RELEASE_INTLOCK(NULL);

  0045c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179754
  00463	33 c9		 xor	 ecx, ecx
  00465	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN28@resume_cmd:

; 439  : 
; 440  :     TRACE("SR: Processing Resume File...\n");

  0046a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179755
  00471	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00477	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0047d	85 c0		 test	 eax, eax
  0047f	74 0c		 je	 SHORT $LN506@resume_cmd
  00481	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179757
  00488	e8 00 00 00 00	 call	 DebuggerTrace
$LN506@resume_cmd:
  0048d	33 c0		 xor	 eax, eax
  0048f	85 c0		 test	 eax, eax
  00491	75 d7		 jne	 SHORT $LN28@resume_cmd
$LN29@resume_cmd:

; 441  : 
; 442  :     while (key != SR_EOF)

  00493	81 bc 24 98 00
	00 00 ff ff ef
	ac		 cmp	 DWORD PTR key$[rsp], -1393557505 ; acefffffH
  0049e	0f 84 42 3a 00
	00		 je	 $LN30@resume_cmd
$LN33@resume_cmd:

; 443  :     {
; 444  :         SR_READ_HDR(file, key, len);

  004a4	4c 8d 84 24 24
	01 00 00	 lea	 r8, QWORD PTR l$7[rsp]
  004ac	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR k$6[rsp]
  004b4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  004b9	e8 00 00 00 00	 call	 sr_read_hdr
  004be	85 c0		 test	 eax, eax
  004c0	74 0a		 je	 SHORT $LN507@resume_cmd
  004c2	b8 ff ff ff ff	 mov	 eax, -1
  004c7	e9 63 40 00 00	 jmp	 $LN1@resume_cmd
$LN507@resume_cmd:
  004cc	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR k$6[rsp]
  004d3	89 84 24 98 00
	00 00		 mov	 DWORD PTR key$[rsp], eax
  004da	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR l$7[rsp]
  004e1	89 44 24 60	 mov	 DWORD PTR len$[rsp], eax
  004e5	33 c0		 xor	 eax, eax
  004e7	85 c0		 test	 eax, eax
  004e9	75 b9		 jne	 SHORT $LN33@resume_cmd

; 445  :         switch (key) {

  004eb	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  004f2	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv216[rsp], eax
  004f9	81 bc 24 8c 00
	00 00 20 00 e2
	ac		 cmp	 DWORD PTR tv216[rsp], -1394474976 ; ace20020H
  00504	0f 87 ef 00 00
	00		 ja	 $LN1010@resume_cmd
  0050a	81 bc 24 8c 00
	00 00 20 00 e2
	ac		 cmp	 DWORD PTR tv216[rsp], -1394474976 ; ace20020H
  00515	0f 84 c4 19 00
	00		 je	 $LN640@resume_cmd
  0051b	81 bc 24 8c 00
	00 00 00 00 e1
	ac		 cmp	 DWORD PTR tv216[rsp], -1394540544 ; ace10000H
  00526	77 27		 ja	 SHORT $LN1011@resume_cmd
  00528	81 bc 24 8c 00
	00 00 00 00 e1
	ac		 cmp	 DWORD PTR tv216[rsp], -1394540544 ; ace10000H
  00533	0f 84 55 02 00
	00		 je	 $LN511@resume_cmd
  00539	81 bc 24 8c 00
	00 00 02 00 e0
	ac		 cmp	 DWORD PTR tv216[rsp], -1394606078 ; ace00002H
  00544	0f 84 4e 01 00
	00		 je	 $LN508@resume_cmd
  0054a	e9 06 39 00 00	 jmp	 $LN988@resume_cmd
$LN1011@resume_cmd:
  0054f	81 bc 24 8c 00
	00 00 00 10 e1
	ac		 cmp	 DWORD PTR tv216[rsp], -1394536448 ; ace11000H
  0055a	77 54		 ja	 SHORT $LN1012@resume_cmd
  0055c	81 bc 24 8c 00
	00 00 00 10 e1
	ac		 cmp	 DWORD PTR tv216[rsp], -1394536448 ; ace11000H
  00567	0f 84 7d 13 00
	00		 je	 $LN616@resume_cmd
  0056d	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv216[rsp]
  00574	2d 02 00 e1 ac	 sub	 eax, -1394540542	; ace10002H
  00579	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv216[rsp], eax
  00580	83 bc 24 8c 00
	00 00 52	 cmp	 DWORD PTR tv216[rsp], 82 ; 00000052H
  00588	0f 87 c7 38 00
	00		 ja	 $LN988@resume_cmd
  0058e	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv216[rsp]
  00595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0059c	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN1017@resume_cmd[rcx+rax]
  005a4	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN1018@resume_cmd[rcx+rax*4]
  005ab	48 03 c1	 add	 rax, rcx
  005ae	ff e0		 jmp	 rax
$LN1012@resume_cmd:
  005b0	81 bc 24 8c 00
	00 00 00 20 e1
	ac		 cmp	 DWORD PTR tv216[rsp], -1394532352 ; ace12000H
  005bb	0f 84 71 13 00
	00		 je	 $LN619@resume_cmd
  005c1	81 bc 24 8c 00
	00 00 00 00 e2
	ac		 cmp	 DWORD PTR tv216[rsp], -1394475008 ; ace20000H
  005cc	0f 84 a8 13 00
	00		 je	 $LN622@resume_cmd
  005d2	81 bc 24 8c 00
	00 00 02 00 e2
	ac		 cmp	 DWORD PTR tv216[rsp], -1394475006 ; ace20002H
  005dd	0f 84 01 16 00
	00		 je	 $LN628@resume_cmd
  005e3	81 bc 24 8c 00
	00 00 03 00 e2
	ac		 cmp	 DWORD PTR tv216[rsp], -1394475005 ; ace20003H
  005ee	0f 84 3c 16 00
	00		 je	 $LN631@resume_cmd
  005f4	e9 5c 38 00 00	 jmp	 $LN988@resume_cmd
$LN1010@resume_cmd:
  005f9	81 bc 24 8c 00
	00 00 00 00 e3
	ac		 cmp	 DWORD PTR tv216[rsp], -1394409472 ; ace30000H
  00604	77 57		 ja	 SHORT $LN1013@resume_cmd
  00606	81 bc 24 8c 00
	00 00 00 00 e3
	ac		 cmp	 DWORD PTR tv216[rsp], -1394409472 ; ace30000H
  00611	0f 84 59 22 00
	00		 je	 $LN858@resume_cmd
  00617	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv216[rsp]
  0061e	2d 21 00 e2 ac	 sub	 eax, -1394474975	; ace20021H
  00623	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv216[rsp], eax
  0062a	81 bc 24 8c 00
	00 00 3e 01 00
	00		 cmp	 DWORD PTR tv216[rsp], 318 ; 0000013eH
  00635	0f 87 1a 38 00
	00		 ja	 $LN988@resume_cmd
  0063b	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv216[rsp]
  00642	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00649	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN1015@resume_cmd[rcx+rax]
  00651	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN1016@resume_cmd[rcx+rax*4]
  00658	48 03 c1	 add	 rax, rcx
  0065b	ff e0		 jmp	 rax
$LN1013@resume_cmd:
  0065d	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv216[rsp]
  00664	2d 01 00 e3 ac	 sub	 eax, -1394409471	; ace30001H
  00669	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv216[rsp], eax
  00670	83 bc 24 8c 00
	00 00 2b	 cmp	 DWORD PTR tv216[rsp], 43 ; 0000002bH
  00678	0f 87 d7 37 00
	00		 ja	 $LN988@resume_cmd
  0067e	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv216[rsp]
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0068c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN1014@resume_cmd[rcx+rax*4]
  00693	48 03 c1	 add	 rax, rcx
  00696	ff e0		 jmp	 rax
$LN508@resume_cmd:
$LN38@resume_cmd:

; 446  : 
; 447  :         case SR_HDR_DATE:
; 448  :             SR_READ_STRING(file, buf, len);

  00698	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  0069d	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  006a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  006aa	e8 00 00 00 00	 call	 sr_read_string
  006af	85 c0		 test	 eax, eax
  006b1	74 0a		 je	 SHORT $LN509@resume_cmd
  006b3	b8 ff ff ff ff	 mov	 eax, -1
  006b8	e9 72 3e 00 00	 jmp	 $LN1@resume_cmd
$LN509@resume_cmd:
  006bd	33 c0		 xor	 eax, eax
  006bf	85 c0		 test	 eax, eax
  006c1	75 d5		 jne	 SHORT $LN38@resume_cmd

; 449  :             if (len >= 2)

  006c3	83 7c 24 60 02	 cmp	 DWORD PTR len$[rsp], 2
  006c8	72 6b		 jb	 SHORT $LN510@resume_cmd

; 450  :             {
; 451  :                 len -= 2;

  006ca	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  006ce	83 e8 02	 sub	 eax, 2
  006d1	89 44 24 60	 mov	 DWORD PTR len$[rsp], eax
$LN39@resume_cmd:

; 452  :                 while (len > 0 && isspace(buf[len]))

  006d5	83 7c 24 60 00	 cmp	 DWORD PTR len$[rsp], 0
  006da	76 24		 jbe	 SHORT $LN40@resume_cmd
  006dc	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  006e0	0f be 84 04 00
	03 00 00	 movsx	 eax, BYTE PTR buf$[rsp+rax]
  006e8	8b c8		 mov	 ecx, eax
  006ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  006f0	85 c0		 test	 eax, eax
  006f2	74 0c		 je	 SHORT $LN40@resume_cmd

; 453  :                     --len;

  006f4	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  006f8	ff c8		 dec	 eax
  006fa	89 44 24 60	 mov	 DWORD PTR len$[rsp], eax
  006fe	eb d5		 jmp	 SHORT $LN39@resume_cmd
$LN40@resume_cmd:

; 454  :                 buf[len+1]=0;

  00700	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  00704	ff c0		 inc	 eax
  00706	8b c0		 mov	 eax, eax
  00708	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR $T11[rsp], rax
  00710	48 81 bc 24 48
	01 00 00 01 10
	00 00		 cmp	 QWORD PTR $T11[rsp], 4097 ; 00001001H
  0071c	73 02		 jae	 SHORT $LN1008@resume_cmd
  0071e	eb 05		 jmp	 SHORT $LN1009@resume_cmd
$LN1008@resume_cmd:
  00720	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN1009@resume_cmd:
  00725	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR $T11[rsp]
  0072d	c6 84 04 00 03
	00 00 00	 mov	 BYTE PTR buf$[rsp+rax], 0
$LN510@resume_cmd:

; 455  :             }
; 456  :             // "SR: resuming suspended file created on '%s'"
; 457  :             WRMSG(HHC02007, "I", buf);

  00735	b9 01 00 00 00	 mov	 ecx, 1
  0073a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00740	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00748	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0074d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179762
  00754	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00759	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179763
  00760	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00765	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0076a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00770	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179764
  00777	ba c9 01 00 00	 mov	 edx, 457		; 000001c9H
  0077c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179765
  00783	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 458  :             break;

  00789	e9 53 37 00 00	 jmp	 $LN34@resume_cmd
$LN511@resume_cmd:
$LN43@resume_cmd:

; 459  : 
; 460  :         case SR_SYS_STARTED_MASK:
; 461  :             SR_READ_VALUE(file, len, &started_mask, sizeof(started_mask));

  0078e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00794	4c 8d 84 24 50
	01 00 00	 lea	 r8, QWORD PTR started_mask$[rsp]
  0079c	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  007a0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  007a5	e8 00 00 00 00	 call	 sr_read_value
  007aa	85 c0		 test	 eax, eax
  007ac	74 0a		 je	 SHORT $LN512@resume_cmd
  007ae	b8 ff ff ff ff	 mov	 eax, -1
  007b3	e9 77 3d 00 00	 jmp	 $LN1@resume_cmd
$LN512@resume_cmd:
  007b8	33 c0		 xor	 eax, eax
  007ba	85 c0		 test	 eax, eax
  007bc	75 d0		 jne	 SHORT $LN43@resume_cmd

; 462  :             break;

  007be	e9 1e 37 00 00	 jmp	 $LN34@resume_cmd
$LN513@resume_cmd:

; 463  : 
; 464  :         case SR_SYS_ARCH_NAME:
; 465  :         {
; 466  :             int save_sysblk_arch_mode = sysblk.arch_mode;

  007c3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007ca	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  007d0	89 84 24 28 01
	00 00		 mov	 DWORD PTR save_sysblk_arch_mode$8[rsp], eax
$LN46@resume_cmd:

; 467  : 
; 468  :             SR_READ_STRING( file, buf, len );

  007d7	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  007dc	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  007e4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  007e9	e8 00 00 00 00	 call	 sr_read_string
  007ee	85 c0		 test	 eax, eax
  007f0	74 0a		 je	 SHORT $LN514@resume_cmd
  007f2	b8 ff ff ff ff	 mov	 eax, -1
  007f7	e9 33 3d 00 00	 jmp	 $LN1@resume_cmd
$LN514@resume_cmd:
  007fc	33 c0		 xor	 eax, eax
  007fe	85 c0		 test	 eax, eax
  00800	75 d5		 jne	 SHORT $LN46@resume_cmd

; 469  : 
; 470  :             for (i=0; i < NUM_GEN_ARCHS; i++)

  00802	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0080a	eb 0a		 jmp	 SHORT $LN49@resume_cmd
$LN47@resume_cmd:
  0080c	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00810	ff c0		 inc	 eax
  00812	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN49@resume_cmd:
  00816	83 7c 24 64 03	 cmp	 DWORD PTR i$[rsp], 3
  0081b	7d 31		 jge	 SHORT $LN48@resume_cmd

; 471  :             {
; 472  :                 sysblk.arch_mode = i; // (is it this archmode?)

  0081d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00824	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  00828	89 88 88 00 00
	00		 mov	 DWORD PTR [rax+136], ecx

; 473  :                 if (strcasecmp( buf, get_arch_name( NULL )) == 0)

  0082e	33 c9		 xor	 ecx, ecx
  00830	e8 00 00 00 00	 call	 get_arch_name
  00835	48 8b d0	 mov	 rdx, rax
  00838	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00840	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00846	85 c0		 test	 eax, eax
  00848	75 02		 jne	 SHORT $LN515@resume_cmd

; 474  :                     break; // (yep! found it!)

  0084a	eb 02		 jmp	 SHORT $LN48@resume_cmd
$LN515@resume_cmd:

; 475  :             }

  0084c	eb be		 jmp	 SHORT $LN47@resume_cmd
$LN48@resume_cmd:

; 476  : 
; 477  :             if (i >= NUM_GEN_ARCHS)  // (did we find it?)

  0084e	83 7c 24 64 03	 cmp	 DWORD PTR i$[rsp], 3
  00853	7c 6d		 jl	 SHORT $LN516@resume_cmd

; 478  :             {
; 479  :                 sysblk.arch_mode = save_sysblk_arch_mode;

  00855	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0085c	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR save_sysblk_arch_mode$8[rsp]
  00863	89 88 88 00 00
	00		 mov	 DWORD PTR [rax+136], ecx

; 480  :                 // "SR: archmode '%s' not supported"
; 481  :                 WRMSG(HHC02008, "E", buf);

  00869	b9 01 00 00 00	 mov	 ecx, 1
  0086e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00874	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0087c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00881	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179772
  00888	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0088d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179773
  00894	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00899	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0089e	41 b9 03 00 00
	00		 mov	 r9d, 3
  008a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179774
  008ab	ba e1 01 00 00	 mov	 edx, 481		; 000001e1H
  008b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179775
  008b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 482  :                 goto sr_error_exit;

  008bd	e9 09 3c 00 00	 jmp	 $sr_error_exit$1020
$LN516@resume_cmd:

; 483  :             }
; 484  : 
; 485  :             sysblk.pcpu = 0;

  008c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008c9	c7 80 54 13 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4948], 0

; 486  :             sysblk.dummyregs.arch_mode = sysblk.arch_mode;

  008d3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  008e1	8b 89 88 00 00
	00		 mov	 ecx, DWORD PTR [rcx+136]
  008e7	89 88 64 15 00
	00		 mov	 DWORD PTR [rax+5476], ecx

; 487  :         }
; 488  :         break;

  008ed	e9 ef 35 00 00	 jmp	 $LN34@resume_cmd
$LN517@resume_cmd:
$LN52@resume_cmd:

; 489  : 
; 490  :         case SR_SYS_MAINSIZE:
; 491  :             SR_READ_VALUE(file, len, &mainsize, sizeof(mainsize));

  008f2	41 b9 08 00 00
	00		 mov	 r9d, 8
  008f8	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR mainsize$[rsp]
  00900	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00904	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00909	e8 00 00 00 00	 call	 sr_read_value
  0090e	85 c0		 test	 eax, eax
  00910	74 0a		 je	 SHORT $LN518@resume_cmd
  00912	b8 ff ff ff ff	 mov	 eax, -1
  00917	e9 13 3c 00 00	 jmp	 $LN1@resume_cmd
$LN518@resume_cmd:
  0091c	33 c0		 xor	 eax, eax
  0091e	85 c0		 test	 eax, eax
  00920	75 d0		 jne	 SHORT $LN52@resume_cmd

; 492  :             if (mainsize > sysblk.mainsize)

  00922	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00929	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00930	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR mainsize$[rsp], rax
  00938	0f 86 d6 00 00
	00		 jbe	 $LN519@resume_cmd

; 493  :             {
; 494  :                 char buf1[20];
; 495  :                 char buf2[20];
; 496  :                 MSGBUF(buf1, "%dM", (U32)(mainsize / (1024*1024)));

  0093e	33 d2		 xor	 edx, edx
  00940	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mainsize$[rsp]
  00948	b9 00 00 10 00	 mov	 ecx, 1048576		; 00100000H
  0094d	48 f7 f1	 div	 rcx
  00950	44 8b c8	 mov	 r9d, eax
  00953	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179779
  0095a	ba 14 00 00 00	 mov	 edx, 20
  0095f	48 8d 8c 24 58
	02 00 00	 lea	 rcx, QWORD PTR buf1$15[rsp]
  00967	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 497  :                 MSGBUF(buf2, "%dM", (U32)(sysblk.mainsize / (1024*1024)));

  0096d	33 d2		 xor	 edx, edx
  0096f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00976	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0097d	b9 00 00 10 00	 mov	 ecx, 1048576		; 00100000H
  00982	48 f7 f1	 div	 rcx
  00985	44 8b c8	 mov	 r9d, eax
  00988	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179780
  0098f	ba 14 00 00 00	 mov	 edx, 20
  00994	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR buf2$14[rsp]
  0099c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 498  :                 // "SR: mismatch in '%s': '%s' found, '%s' expected"
; 499  :                 WRMSG(HHC02009, "E", "mainsize", buf1, buf2);

  009a2	b9 01 00 00 00	 mov	 ecx, 1
  009a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009ad	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR buf2$14[rsp]
  009b5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  009ba	48 8d 8c 24 58
	02 00 00	 lea	 rcx, QWORD PTR buf1$15[rsp]
  009c2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179781
  009ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179782
  009da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179783
  009e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  009f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179784
  009fd	ba f3 01 00 00	 mov	 edx, 499		; 000001f3H
  00a02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179785
  00a09	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 500  :                 goto sr_error_exit;

  00a0f	e9 b7 3a 00 00	 jmp	 $sr_error_exit$1020
$LN519@resume_cmd:

; 501  :             }
; 502  :             break;

  00a14	e9 c8 34 00 00	 jmp	 $LN34@resume_cmd
$LN520@resume_cmd:
$LN55@resume_cmd:

; 503  : 
; 504  :         case SR_SYS_MAINSTOR:
; 505  :             TRACE("SR: Restoring MAINSTOR...\n");

  00a19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179787
  00a20	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00a26	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00a2c	85 c0		 test	 eax, eax
  00a2e	74 0c		 je	 SHORT $LN521@resume_cmd
  00a30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179789
  00a37	e8 00 00 00 00	 call	 DebuggerTrace
$LN521@resume_cmd:
  00a3c	33 c0		 xor	 eax, eax
  00a3e	85 c0		 test	 eax, eax
  00a40	75 d7		 jne	 SHORT $LN55@resume_cmd
$LN58@resume_cmd:

; 506  :             SR_READ_BUF(file, sysblk.mainstor, mainsize);

  00a42	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mainsize$[rsp]
  00a4a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a51	48 8b 90 98 00
	00 00		 mov	 rdx, QWORD PTR [rax+152]
  00a58	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00a5d	e8 00 00 00 00	 call	 sr_read_buf
  00a62	85 c0		 test	 eax, eax
  00a64	74 0a		 je	 SHORT $LN522@resume_cmd
  00a66	b8 ff ff ff ff	 mov	 eax, -1
  00a6b	e9 bf 3a 00 00	 jmp	 $LN1@resume_cmd
$LN522@resume_cmd:
  00a70	33 c0		 xor	 eax, eax
  00a72	85 c0		 test	 eax, eax
  00a74	75 cc		 jne	 SHORT $LN58@resume_cmd

; 507  :             break;

  00a76	e9 66 34 00 00	 jmp	 $LN34@resume_cmd
$LN523@resume_cmd:
$LN61@resume_cmd:

; 508  : 
; 509  :         case SR_SYS_SKEYSIZE:
; 510  :             SR_READ_VALUE(file, len, &len, sizeof(len));

  00a7b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00a81	4c 8d 44 24 60	 lea	 r8, QWORD PTR len$[rsp]
  00a86	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00a8a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00a8f	e8 00 00 00 00	 call	 sr_read_value
  00a94	85 c0		 test	 eax, eax
  00a96	74 0a		 je	 SHORT $LN524@resume_cmd
  00a98	b8 ff ff ff ff	 mov	 eax, -1
  00a9d	e9 8d 3a 00 00	 jmp	 $LN1@resume_cmd
$LN524@resume_cmd:
  00aa2	33 c0		 xor	 eax, eax
  00aa4	85 c0		 test	 eax, eax
  00aa6	75 d3		 jne	 SHORT $LN61@resume_cmd

; 511  :             if (len > (U32)(sysblk.mainsize/_STORKEY_ARRAY_UNITSIZE))

  00aa8	33 d2		 xor	 edx, edx
  00aaa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00ab1	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00ab8	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00abd	48 f7 f1	 div	 rcx
  00ac0	39 44 24 60	 cmp	 DWORD PTR len$[rsp], eax
  00ac4	0f 86 c6 00 00
	00		 jbe	 $LN525@resume_cmd

; 512  :             {
; 513  :                 char buf1[20];
; 514  :                 char buf2[20];
; 515  :                 MSGBUF(buf1, "%d", len);

  00aca	44 8b 4c 24 60	 mov	 r9d, DWORD PTR len$[rsp]
  00acf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179794
  00ad6	ba 14 00 00 00	 mov	 edx, 20
  00adb	48 8d 8c 24 88
	02 00 00	 lea	 rcx, QWORD PTR buf1$17[rsp]
  00ae3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 516  :                 MSGBUF(buf2, "%d", (U32)(sysblk.mainsize/_STORKEY_ARRAY_UNITSIZE));

  00ae9	33 d2		 xor	 edx, edx
  00aeb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00af2	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00af9	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00afe	48 f7 f1	 div	 rcx
  00b01	44 8b c8	 mov	 r9d, eax
  00b04	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179795
  00b0b	ba 14 00 00 00	 mov	 edx, 20
  00b10	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR buf2$16[rsp]
  00b18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 517  :                 // "SR: mismatch in '%s': '%s' found, '%s' expected"
; 518  :                 WRMSG(HHC02009, "E", "storkey size", buf1, buf2);

  00b1e	b9 01 00 00 00	 mov	 ecx, 1
  00b23	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b29	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR buf2$16[rsp]
  00b31	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00b36	48 8d 8c 24 88
	02 00 00	 lea	 rcx, QWORD PTR buf1$17[rsp]
  00b3e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00b43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179796
  00b4a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179797
  00b56	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179798
  00b62	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b67	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b6c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b72	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179799
  00b79	ba 06 02 00 00	 mov	 edx, 518		; 00000206H
  00b7e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179800
  00b85	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 519  :                 goto sr_error_exit;

  00b8b	e9 3b 39 00 00	 jmp	 $sr_error_exit$1020
$LN525@resume_cmd:

; 520  :             }
; 521  :             break;

  00b90	e9 4c 33 00 00	 jmp	 $LN34@resume_cmd
$LN526@resume_cmd:
$LN64@resume_cmd:

; 522  : 
; 523  :         case SR_SYS_STORKEYS:
; 524  :             TRACE("SR: Restoring Storage Keys...\n");

  00b95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179802
  00b9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00ba2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00ba8	85 c0		 test	 eax, eax
  00baa	74 0c		 je	 SHORT $LN527@resume_cmd
  00bac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179804
  00bb3	e8 00 00 00 00	 call	 DebuggerTrace
$LN527@resume_cmd:
  00bb8	33 c0		 xor	 eax, eax
  00bba	85 c0		 test	 eax, eax
  00bbc	75 d7		 jne	 SHORT $LN64@resume_cmd
$LN67@resume_cmd:

; 525  :             SR_READ_BUF(file, sysblk.storkeys, len);

  00bbe	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  00bc2	44 8b c0	 mov	 r8d, eax
  00bc5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00bcc	48 8b 90 a0 00
	00 00		 mov	 rdx, QWORD PTR [rax+160]
  00bd3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00bd8	e8 00 00 00 00	 call	 sr_read_buf
  00bdd	85 c0		 test	 eax, eax
  00bdf	74 0a		 je	 SHORT $LN528@resume_cmd
  00be1	b8 ff ff ff ff	 mov	 eax, -1
  00be6	e9 44 39 00 00	 jmp	 $LN1@resume_cmd
$LN528@resume_cmd:
  00beb	33 c0		 xor	 eax, eax
  00bed	85 c0		 test	 eax, eax
  00bef	75 cd		 jne	 SHORT $LN67@resume_cmd

; 526  :             break;

  00bf1	e9 eb 32 00 00	 jmp	 $LN34@resume_cmd
$LN529@resume_cmd:
$LN70@resume_cmd:

; 527  : 
; 528  :         case SR_SYS_XPNDSIZE:
; 529  :             SR_READ_VALUE(file, len, &xpndsize, sizeof(xpndsize));

  00bf6	41 b9 08 00 00
	00		 mov	 r9d, 8
  00bfc	4c 8d 84 24 d8
	00 00 00	 lea	 r8, QWORD PTR xpndsize$[rsp]
  00c04	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00c08	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00c0d	e8 00 00 00 00	 call	 sr_read_value
  00c12	85 c0		 test	 eax, eax
  00c14	74 0a		 je	 SHORT $LN530@resume_cmd
  00c16	b8 ff ff ff ff	 mov	 eax, -1
  00c1b	e9 0f 39 00 00	 jmp	 $LN1@resume_cmd
$LN530@resume_cmd:
  00c20	33 c0		 xor	 eax, eax
  00c22	85 c0		 test	 eax, eax
  00c24	75 d0		 jne	 SHORT $LN70@resume_cmd

; 530  :             if (xpndsize > sysblk.xpndsize)

  00c26	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00c2d	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [rax+172]
  00c33	48 39 84 24 d8
	00 00 00	 cmp	 QWORD PTR xpndsize$[rsp], rax
  00c3b	0f 86 d4 00 00
	00		 jbe	 $LN531@resume_cmd

; 531  :             {
; 532  :                 char buf1[20];
; 533  :                 char buf2[20];
; 534  :                 MSGBUF(buf1, "%dM", (U32)(xpndsize / (256)));

  00c41	33 d2		 xor	 edx, edx
  00c43	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR xpndsize$[rsp]
  00c4b	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00c50	48 f7 f1	 div	 rcx
  00c53	44 8b c8	 mov	 r9d, eax
  00c56	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179809
  00c5d	ba 14 00 00 00	 mov	 edx, 20
  00c62	48 8d 8c 24 b8
	02 00 00	 lea	 rcx, QWORD PTR buf1$19[rsp]
  00c6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 535  :                 MSGBUF(buf2, "%dM", sysblk.xpndsize / (256));

  00c70	33 d2		 xor	 edx, edx
  00c72	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00c79	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [rax+172]
  00c7f	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00c84	f7 f1		 div	 ecx
  00c86	44 8b c8	 mov	 r9d, eax
  00c89	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179810
  00c90	ba 14 00 00 00	 mov	 edx, 20
  00c95	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR buf2$18[rsp]
  00c9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 536  :                 // "SR: mismatch in '%s': '%s' found, '%s' expected"
; 537  :                 WRMSG(HHC02009, "E", "expand size", buf1, buf2);

  00ca3	b9 01 00 00 00	 mov	 ecx, 1
  00ca8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cae	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR buf2$18[rsp]
  00cb6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00cbb	48 8d 8c 24 b8
	02 00 00	 lea	 rcx, QWORD PTR buf1$19[rsp]
  00cc3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00cc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179811
  00ccf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00cd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179812
  00cdb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ce0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179813
  00ce7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cf1	41 b9 03 00 00
	00		 mov	 r9d, 3
  00cf7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179814
  00cfe	ba 19 02 00 00	 mov	 edx, 537		; 00000219H
  00d03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179815
  00d0a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 538  :                 goto sr_error_exit;

  00d10	e9 b6 37 00 00	 jmp	 $sr_error_exit$1020
$LN531@resume_cmd:

; 539  :             }
; 540  :             break;

  00d15	e9 c7 31 00 00	 jmp	 $LN34@resume_cmd
$LN532@resume_cmd:
$LN73@resume_cmd:

; 541  : 
; 542  :         case SR_SYS_XPNDSTOR:
; 543  :             TRACE("SR: Restoring Expanded Storage...\n");

  00d1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179817
  00d21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00d27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00d2d	85 c0		 test	 eax, eax
  00d2f	74 0c		 je	 SHORT $LN533@resume_cmd
  00d31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179819
  00d38	e8 00 00 00 00	 call	 DebuggerTrace
$LN533@resume_cmd:
  00d3d	33 c0		 xor	 eax, eax
  00d3f	85 c0		 test	 eax, eax
  00d41	75 d7		 jne	 SHORT $LN73@resume_cmd
$LN76@resume_cmd:

; 544  :             SR_READ_BUF(file, sysblk.xpndstor, xpndsize * 4096);

  00d43	48 69 84 24 d8
	00 00 00 00 10
	00 00		 imul	 rax, QWORD PTR xpndsize$[rsp], 4096 ; 00001000H
  00d4f	4c 8b c0	 mov	 r8, rax
  00d52	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d59	48 8b 90 b0 00
	00 00		 mov	 rdx, QWORD PTR [rax+176]
  00d60	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00d65	e8 00 00 00 00	 call	 sr_read_buf
  00d6a	85 c0		 test	 eax, eax
  00d6c	74 0a		 je	 SHORT $LN534@resume_cmd
  00d6e	b8 ff ff ff ff	 mov	 eax, -1
  00d73	e9 b7 37 00 00	 jmp	 $LN1@resume_cmd
$LN534@resume_cmd:
  00d78	33 c0		 xor	 eax, eax
  00d7a	85 c0		 test	 eax, eax
  00d7c	75 c5		 jne	 SHORT $LN76@resume_cmd

; 545  :             break;

  00d7e	e9 5e 31 00 00	 jmp	 $LN34@resume_cmd
$LN535@resume_cmd:
$LN79@resume_cmd:

; 546  : 
; 547  :         case SR_SYS_CPUID:
; 548  :             SR_READ_VALUE(file, len, &sysblk.cpuid, sizeof(sysblk.cpuid));

  00d83	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d8a	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00d90	41 b9 08 00 00
	00		 mov	 r9d, 8
  00d96	4c 8b c0	 mov	 r8, rax
  00d99	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00d9d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00da2	e8 00 00 00 00	 call	 sr_read_value
  00da7	85 c0		 test	 eax, eax
  00da9	74 0a		 je	 SHORT $LN536@resume_cmd
  00dab	b8 ff ff ff ff	 mov	 eax, -1
  00db0	e9 7a 37 00 00	 jmp	 $LN1@resume_cmd
$LN536@resume_cmd:
  00db5	33 c0		 xor	 eax, eax
  00db7	85 c0		 test	 eax, eax
  00db9	75 c8		 jne	 SHORT $LN79@resume_cmd

; 549  :              break;

  00dbb	e9 21 31 00 00	 jmp	 $LN34@resume_cmd
$LN537@resume_cmd:
$LN82@resume_cmd:

; 550  : 
; 551  :         case SR_SYS_CPUMODEL:
; 552  :             SR_READ_VALUE(file, len, &sysblk.cpumodel, sizeof(sysblk.cpumodel));

  00dc0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00dc7	48 05 d4 00 00
	00		 add	 rax, 212		; 000000d4H
  00dcd	41 b9 02 00 00
	00		 mov	 r9d, 2
  00dd3	4c 8b c0	 mov	 r8, rax
  00dd6	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00dda	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00ddf	e8 00 00 00 00	 call	 sr_read_value
  00de4	85 c0		 test	 eax, eax
  00de6	74 0a		 je	 SHORT $LN538@resume_cmd
  00de8	b8 ff ff ff ff	 mov	 eax, -1
  00ded	e9 3d 37 00 00	 jmp	 $LN1@resume_cmd
$LN538@resume_cmd:
  00df2	33 c0		 xor	 eax, eax
  00df4	85 c0		 test	 eax, eax
  00df6	75 c8		 jne	 SHORT $LN82@resume_cmd

; 553  :              break;

  00df8	e9 e4 30 00 00	 jmp	 $LN34@resume_cmd
$LN539@resume_cmd:
$LN85@resume_cmd:

; 554  : 
; 555  :         case SR_SYS_CPUVERSION:
; 556  :             SR_READ_VALUE(file, len, &sysblk.cpuversion, sizeof(sysblk.cpuversion));

  00dfd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e04	48 05 d6 00 00
	00		 add	 rax, 214		; 000000d6H
  00e0a	41 b9 01 00 00
	00		 mov	 r9d, 1
  00e10	4c 8b c0	 mov	 r8, rax
  00e13	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00e17	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00e1c	e8 00 00 00 00	 call	 sr_read_value
  00e21	85 c0		 test	 eax, eax
  00e23	74 0a		 je	 SHORT $LN540@resume_cmd
  00e25	b8 ff ff ff ff	 mov	 eax, -1
  00e2a	e9 00 37 00 00	 jmp	 $LN1@resume_cmd
$LN540@resume_cmd:
  00e2f	33 c0		 xor	 eax, eax
  00e31	85 c0		 test	 eax, eax
  00e33	75 c8		 jne	 SHORT $LN85@resume_cmd

; 557  :             break;

  00e35	e9 a7 30 00 00	 jmp	 $LN34@resume_cmd
$LN541@resume_cmd:
$LN88@resume_cmd:

; 558  : 
; 559  :         case SR_SYS_CPUSERIAL:
; 560  :             SR_READ_VALUE(file, len, &sysblk.cpuserial, sizeof(sysblk.cpuserial));

  00e3a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e41	48 05 d0 00 00
	00		 add	 rax, 208		; 000000d0H
  00e47	41 b9 04 00 00
	00		 mov	 r9d, 4
  00e4d	4c 8b c0	 mov	 r8, rax
  00e50	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00e54	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00e59	e8 00 00 00 00	 call	 sr_read_value
  00e5e	85 c0		 test	 eax, eax
  00e60	74 0a		 je	 SHORT $LN542@resume_cmd
  00e62	b8 ff ff ff ff	 mov	 eax, -1
  00e67	e9 c3 36 00 00	 jmp	 $LN1@resume_cmd
$LN542@resume_cmd:
  00e6c	33 c0		 xor	 eax, eax
  00e6e	85 c0		 test	 eax, eax
  00e70	75 c8		 jne	 SHORT $LN88@resume_cmd

; 561  :             break;

  00e72	e9 6a 30 00 00	 jmp	 $LN34@resume_cmd
$LN543@resume_cmd:
$LN91@resume_cmd:

; 562  : 
; 563  :         case SR_SYS_OPERATION_MODE:
; 564  :             SR_READ_VALUE (file, len, &sysblk.operation_mode, sizeof(sysblk.operation_mode));

  00e77	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e7e	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  00e84	41 b9 04 00 00
	00		 mov	 r9d, 4
  00e8a	4c 8b c0	 mov	 r8, rax
  00e8d	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00e91	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00e96	e8 00 00 00 00	 call	 sr_read_value
  00e9b	85 c0		 test	 eax, eax
  00e9d	74 0a		 je	 SHORT $LN544@resume_cmd
  00e9f	b8 ff ff ff ff	 mov	 eax, -1
  00ea4	e9 86 36 00 00	 jmp	 $LN1@resume_cmd
$LN544@resume_cmd:
  00ea9	33 c0		 xor	 eax, eax
  00eab	85 c0		 test	 eax, eax
  00ead	75 c8		 jne	 SHORT $LN91@resume_cmd

; 565  :             break;

  00eaf	e9 2d 30 00 00	 jmp	 $LN34@resume_cmd
$LN545@resume_cmd:
$LN94@resume_cmd:

; 566  : 
; 567  :         case SR_SYS_LPARMODE:
; 568  :         {
; 569  :             int value;
; 570  :             SR_READ_VALUE (file, len, &value, sizeof(int));

  00eb4	41 b9 04 00 00
	00		 mov	 r9d, 4
  00eba	4c 8d 84 24 2c
	01 00 00	 lea	 r8, QWORD PTR value$9[rsp]
  00ec2	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00ec6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00ecb	e8 00 00 00 00	 call	 sr_read_value
  00ed0	85 c0		 test	 eax, eax
  00ed2	74 0a		 je	 SHORT $LN546@resume_cmd
  00ed4	b8 ff ff ff ff	 mov	 eax, -1
  00ed9	e9 51 36 00 00	 jmp	 $LN1@resume_cmd
$LN546@resume_cmd:
  00ede	33 c0		 xor	 eax, eax
  00ee0	85 c0		 test	 eax, eax
  00ee2	75 d0		 jne	 SHORT $LN94@resume_cmd

; 571  :             sysblk.lparmode = value;

  00ee4	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR value$9[rsp]
  00eeb	83 e0 01	 and	 eax, 1
  00eee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00ef5	8b 89 ec 00 00
	00		 mov	 ecx, DWORD PTR [rcx+236]
  00efb	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00efe	0b c8		 or	 ecx, eax
  00f00	8b c1		 mov	 eax, ecx
  00f02	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00f09	89 81 ec 00 00
	00		 mov	 DWORD PTR [rcx+236], eax

; 572  :             break;

  00f0f	e9 cd 2f 00 00	 jmp	 $LN34@resume_cmd
$LN547@resume_cmd:
$LN97@resume_cmd:

; 573  :         }
; 574  : 
; 575  :         case SR_SYS_LPARNUM:
; 576  :             SR_READ_VALUE (file, len, &sysblk.lparnum, sizeof(sysblk.lparnum));

  00f14	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f1b	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00f21	41 b9 02 00 00
	00		 mov	 r9d, 2
  00f27	4c 8b c0	 mov	 r8, rax
  00f2a	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00f2e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00f33	e8 00 00 00 00	 call	 sr_read_value
  00f38	85 c0		 test	 eax, eax
  00f3a	74 0a		 je	 SHORT $LN548@resume_cmd
  00f3c	b8 ff ff ff ff	 mov	 eax, -1
  00f41	e9 e9 35 00 00	 jmp	 $LN1@resume_cmd
$LN548@resume_cmd:
  00f46	33 c0		 xor	 eax, eax
  00f48	85 c0		 test	 eax, eax
  00f4a	75 c8		 jne	 SHORT $LN97@resume_cmd

; 577  :             break;

  00f4c	e9 90 2f 00 00	 jmp	 $LN34@resume_cmd
$LN549@resume_cmd:
$LN100@resume_cmd:

; 578  : 
; 579  :         case SR_SYS_CPUIDFMT:
; 580  :             SR_READ_VALUE (file, len, &sysblk.cpuidfmt, sizeof(sysblk.cpuidfmt));

  00f51	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f58	48 05 d7 00 00
	00		 add	 rax, 215		; 000000d7H
  00f5e	41 b9 01 00 00
	00		 mov	 r9d, 1
  00f64	4c 8b c0	 mov	 r8, rax
  00f67	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00f6b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00f70	e8 00 00 00 00	 call	 sr_read_value
  00f75	85 c0		 test	 eax, eax
  00f77	74 0a		 je	 SHORT $LN550@resume_cmd
  00f79	b8 ff ff ff ff	 mov	 eax, -1
  00f7e	e9 ac 35 00 00	 jmp	 $LN1@resume_cmd
$LN550@resume_cmd:
  00f83	33 c0		 xor	 eax, eax
  00f85	85 c0		 test	 eax, eax
  00f87	75 c8		 jne	 SHORT $LN100@resume_cmd

; 581  :             break;

  00f89	e9 53 2f 00 00	 jmp	 $LN34@resume_cmd
$LN551@resume_cmd:
$LN103@resume_cmd:

; 582  : 
; 583  :         case SR_SYS_IPLDEV:
; 584  :             SR_READ_VALUE(file, len, &sysblk.ipldev, sizeof(sysblk.ipldev));

  00f8e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f95	48 05 f2 00 00
	00		 add	 rax, 242		; 000000f2H
  00f9b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00fa1	4c 8b c0	 mov	 r8, rax
  00fa4	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00fa8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00fad	e8 00 00 00 00	 call	 sr_read_value
  00fb2	85 c0		 test	 eax, eax
  00fb4	74 0a		 je	 SHORT $LN552@resume_cmd
  00fb6	b8 ff ff ff ff	 mov	 eax, -1
  00fbb	e9 6f 35 00 00	 jmp	 $LN1@resume_cmd
$LN552@resume_cmd:
  00fc0	33 c0		 xor	 eax, eax
  00fc2	85 c0		 test	 eax, eax
  00fc4	75 c8		 jne	 SHORT $LN103@resume_cmd

; 585  :             break;

  00fc6	e9 16 2f 00 00	 jmp	 $LN34@resume_cmd
$LN553@resume_cmd:
$LN106@resume_cmd:

; 586  : 
; 587  :         case SR_SYS_IPLCPU:
; 588  :             SR_READ_VALUE(file, len, &sysblk.iplcpu, sizeof(sysblk.iplcpu));

  00fcb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00fd2	48 05 f4 00 00
	00		 add	 rax, 244		; 000000f4H
  00fd8	41 b9 04 00 00
	00		 mov	 r9d, 4
  00fde	4c 8b c0	 mov	 r8, rax
  00fe1	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  00fe5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  00fea	e8 00 00 00 00	 call	 sr_read_value
  00fef	85 c0		 test	 eax, eax
  00ff1	74 0a		 je	 SHORT $LN554@resume_cmd
  00ff3	b8 ff ff ff ff	 mov	 eax, -1
  00ff8	e9 32 35 00 00	 jmp	 $LN1@resume_cmd
$LN554@resume_cmd:
  00ffd	33 c0		 xor	 eax, eax
  00fff	85 c0		 test	 eax, eax
  01001	75 c8		 jne	 SHORT $LN106@resume_cmd

; 589  :             break;

  01003	e9 d9 2e 00 00	 jmp	 $LN34@resume_cmd
$LN555@resume_cmd:
$LN109@resume_cmd:

; 590  : 
; 591  :         case SR_SYS_MBO:
; 592  :             SR_READ_VALUE(file, len, &sysblk.mbo, sizeof(sysblk.mbo));

  01008	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0100f	48 05 f0 10 00
	00		 add	 rax, 4336		; 000010f0H
  01015	41 b9 08 00 00
	00		 mov	 r9d, 8
  0101b	4c 8b c0	 mov	 r8, rax
  0101e	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01022	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01027	e8 00 00 00 00	 call	 sr_read_value
  0102c	85 c0		 test	 eax, eax
  0102e	74 0a		 je	 SHORT $LN556@resume_cmd
  01030	b8 ff ff ff ff	 mov	 eax, -1
  01035	e9 f5 34 00 00	 jmp	 $LN1@resume_cmd
$LN556@resume_cmd:
  0103a	33 c0		 xor	 eax, eax
  0103c	85 c0		 test	 eax, eax
  0103e	75 c8		 jne	 SHORT $LN109@resume_cmd

; 593  :             break;

  01040	e9 9c 2e 00 00	 jmp	 $LN34@resume_cmd
$LN557@resume_cmd:
$LN112@resume_cmd:

; 594  : 
; 595  :         case SR_SYS_MBK:
; 596  :             SR_READ_VALUE(file, len, &sysblk.mbk, sizeof(sysblk.mbk));

  01045	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0104c	48 05 f8 10 00
	00		 add	 rax, 4344		; 000010f8H
  01052	41 b9 01 00 00
	00		 mov	 r9d, 1
  01058	4c 8b c0	 mov	 r8, rax
  0105b	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0105f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01064	e8 00 00 00 00	 call	 sr_read_value
  01069	85 c0		 test	 eax, eax
  0106b	74 0a		 je	 SHORT $LN558@resume_cmd
  0106d	b8 ff ff ff ff	 mov	 eax, -1
  01072	e9 b8 34 00 00	 jmp	 $LN1@resume_cmd
$LN558@resume_cmd:
  01077	33 c0		 xor	 eax, eax
  01079	85 c0		 test	 eax, eax
  0107b	75 c8		 jne	 SHORT $LN112@resume_cmd

; 597  :             break;

  0107d	e9 5f 2e 00 00	 jmp	 $LN34@resume_cmd
$LN559@resume_cmd:
$LN115@resume_cmd:

; 598  : 
; 599  :         case SR_SYS_MBM:
; 600  :             SR_READ_VALUE(file, len, &sysblk.mbm, sizeof(sysblk.mbm));

  01082	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01089	48 05 fc 10 00
	00		 add	 rax, 4348		; 000010fcH
  0108f	41 b9 04 00 00
	00		 mov	 r9d, 4
  01095	4c 8b c0	 mov	 r8, rax
  01098	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0109c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  010a1	e8 00 00 00 00	 call	 sr_read_value
  010a6	85 c0		 test	 eax, eax
  010a8	74 0a		 je	 SHORT $LN560@resume_cmd
  010aa	b8 ff ff ff ff	 mov	 eax, -1
  010af	e9 7b 34 00 00	 jmp	 $LN1@resume_cmd
$LN560@resume_cmd:
  010b4	33 c0		 xor	 eax, eax
  010b6	85 c0		 test	 eax, eax
  010b8	75 c8		 jne	 SHORT $LN115@resume_cmd

; 601  :             break;

  010ba	e9 22 2e 00 00	 jmp	 $LN34@resume_cmd
$LN561@resume_cmd:
$LN118@resume_cmd:

; 602  : 
; 603  :         case SR_SYS_MBD:
; 604  :             SR_READ_VALUE(file, len, &sysblk.mbd, sizeof(sysblk.mbd));

  010bf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  010c6	48 05 00 11 00
	00		 add	 rax, 4352		; 00001100H
  010cc	41 b9 04 00 00
	00		 mov	 r9d, 4
  010d2	4c 8b c0	 mov	 r8, rax
  010d5	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  010d9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  010de	e8 00 00 00 00	 call	 sr_read_value
  010e3	85 c0		 test	 eax, eax
  010e5	74 0a		 je	 SHORT $LN562@resume_cmd
  010e7	b8 ff ff ff ff	 mov	 eax, -1
  010ec	e9 3e 34 00 00	 jmp	 $LN1@resume_cmd
$LN562@resume_cmd:
  010f1	33 c0		 xor	 eax, eax
  010f3	85 c0		 test	 eax, eax
  010f5	75 c8		 jne	 SHORT $LN118@resume_cmd

; 605  :             break;

  010f7	e9 e5 2d 00 00	 jmp	 $LN34@resume_cmd
$LN563@resume_cmd:
$LN121@resume_cmd:

; 606  : 
; 607  :         case SR_SYS_IOPENDING_LCSS:
; 608  :             SR_READ_VALUE(file,len,&lcss,sizeof(lcss));

  010fc	41 b9 02 00 00
	00		 mov	 r9d, 2
  01102	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR lcss$[rsp]
  0110a	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0110e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01113	e8 00 00 00 00	 call	 sr_read_value
  01118	85 c0		 test	 eax, eax
  0111a	74 0a		 je	 SHORT $LN564@resume_cmd
  0111c	b8 ff ff ff ff	 mov	 eax, -1
  01121	e9 09 34 00 00	 jmp	 $LN1@resume_cmd
$LN564@resume_cmd:
  01126	33 c0		 xor	 eax, eax
  01128	85 c0		 test	 eax, eax
  0112a	75 d0		 jne	 SHORT $LN121@resume_cmd

; 609  :             break;

  0112c	e9 b0 2d 00 00	 jmp	 $LN34@resume_cmd
$LN565@resume_cmd:
$LN124@resume_cmd:

; 610  : 
; 611  :         case SR_SYS_IOPENDING:
; 612  :             SR_READ_VALUE(file, len, &hw, sizeof(hw));

  01131	41 b9 02 00 00
	00		 mov	 r9d, 2
  01137	4c 8d 84 24 94
	00 00 00	 lea	 r8, QWORD PTR hw$[rsp]
  0113f	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01143	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01148	e8 00 00 00 00	 call	 sr_read_value
  0114d	85 c0		 test	 eax, eax
  0114f	74 0a		 je	 SHORT $LN566@resume_cmd
  01151	b8 ff ff ff ff	 mov	 eax, -1
  01156	e9 d4 33 00 00	 jmp	 $LN1@resume_cmd
$LN566@resume_cmd:
  0115b	33 c0		 xor	 eax, eax
  0115d	85 c0		 test	 eax, eax
  0115f	75 d0		 jne	 SHORT $LN124@resume_cmd

; 613  :             dev = find_device_by_devnum(lcss,hw);

  01161	0f b7 94 24 94
	00 00 00	 movzx	 edx, WORD PTR hw$[rsp]
  01169	0f b7 8c 24 88
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  01171	e8 00 00 00 00	 call	 find_device_by_devnum
  01176	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 614  :             if (dev == NULL) break;

  0117b	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01181	75 05		 jne	 SHORT $LN567@resume_cmd
  01183	e9 59 2d 00 00	 jmp	 $LN34@resume_cmd
$LN567@resume_cmd:

; 615  :             if (ioq == NULL)

  01188	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR ioq$[rsp], 0
  01191	75 1b		 jne	 SHORT $LN568@resume_cmd

; 616  :                 sysblk.iointq = &dev->ioint;

  01193	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  01198	48 05 28 02 00
	00		 add	 rax, 552		; 00000228H
  0119e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  011a5	48 89 81 28 12
	00 00		 mov	 QWORD PTR [rcx+4648], rax
  011ac	eb 16		 jmp	 SHORT $LN569@resume_cmd
$LN568@resume_cmd:

; 617  :             else
; 618  :                 ioq->next = &dev->ioint;

  011ae	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  011b3	48 05 28 02 00
	00		 add	 rax, 552		; 00000228H
  011b9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR ioq$[rsp]
  011c1	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN569@resume_cmd:

; 619  :             ioq = &dev->ioint;

  011c4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  011c9	48 05 28 02 00
	00		 add	 rax, 552		; 00000228H
  011cf	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ioq$[rsp], rax

; 620  :             dev = NULL;

  011d7	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR dev$[rsp], 0

; 621  :             lcss = 0;

  011e0	33 c0		 xor	 eax, eax
  011e2	66 89 84 24 88
	00 00 00	 mov	 WORD PTR lcss$[rsp], ax

; 622  :             break;

  011ea	e9 f2 2c 00 00	 jmp	 $LN34@resume_cmd
$LN570@resume_cmd:
$LN127@resume_cmd:

; 623  : 
; 624  :         case SR_SYS_PCIPENDING_LCSS:
; 625  :             SR_READ_VALUE(file,len,&lcss,sizeof(lcss));

  011ef	41 b9 02 00 00
	00		 mov	 r9d, 2
  011f5	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR lcss$[rsp]
  011fd	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01201	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01206	e8 00 00 00 00	 call	 sr_read_value
  0120b	85 c0		 test	 eax, eax
  0120d	74 0a		 je	 SHORT $LN571@resume_cmd
  0120f	b8 ff ff ff ff	 mov	 eax, -1
  01214	e9 16 33 00 00	 jmp	 $LN1@resume_cmd
$LN571@resume_cmd:
  01219	33 c0		 xor	 eax, eax
  0121b	85 c0		 test	 eax, eax
  0121d	75 d0		 jne	 SHORT $LN127@resume_cmd

; 626  :             break;

  0121f	e9 bd 2c 00 00	 jmp	 $LN34@resume_cmd
$LN572@resume_cmd:
$LN130@resume_cmd:

; 627  : 
; 628  :         case SR_SYS_PCIPENDING:
; 629  :             SR_READ_VALUE(file, len, &hw, sizeof(hw));

  01224	41 b9 02 00 00
	00		 mov	 r9d, 2
  0122a	4c 8d 84 24 94
	00 00 00	 lea	 r8, QWORD PTR hw$[rsp]
  01232	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01236	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0123b	e8 00 00 00 00	 call	 sr_read_value
  01240	85 c0		 test	 eax, eax
  01242	74 0a		 je	 SHORT $LN573@resume_cmd
  01244	b8 ff ff ff ff	 mov	 eax, -1
  01249	e9 e1 32 00 00	 jmp	 $LN1@resume_cmd
$LN573@resume_cmd:
  0124e	33 c0		 xor	 eax, eax
  01250	85 c0		 test	 eax, eax
  01252	75 d0		 jne	 SHORT $LN130@resume_cmd

; 630  :             dev = find_device_by_devnum(lcss,hw);

  01254	0f b7 94 24 94
	00 00 00	 movzx	 edx, WORD PTR hw$[rsp]
  0125c	0f b7 8c 24 88
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  01264	e8 00 00 00 00	 call	 find_device_by_devnum
  01269	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 631  :             if (dev == NULL) break;

  0126e	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01274	75 05		 jne	 SHORT $LN574@resume_cmd
  01276	e9 66 2c 00 00	 jmp	 $LN34@resume_cmd
$LN574@resume_cmd:

; 632  :             if (ioq == NULL)

  0127b	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR ioq$[rsp], 0
  01284	75 1b		 jne	 SHORT $LN575@resume_cmd

; 633  :                 sysblk.iointq = &dev->pciioint;

  01286	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0128b	48 05 40 02 00
	00		 add	 rax, 576		; 00000240H
  01291	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01298	48 89 81 28 12
	00 00		 mov	 QWORD PTR [rcx+4648], rax
  0129f	eb 16		 jmp	 SHORT $LN576@resume_cmd
$LN575@resume_cmd:

; 634  :             else
; 635  :                 ioq->next = &dev->pciioint;

  012a1	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  012a6	48 05 40 02 00
	00		 add	 rax, 576		; 00000240H
  012ac	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR ioq$[rsp]
  012b4	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN576@resume_cmd:

; 636  :             ioq = &dev->pciioint;

  012b7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  012bc	48 05 40 02 00
	00		 add	 rax, 576		; 00000240H
  012c2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ioq$[rsp], rax

; 637  :             dev = NULL;

  012ca	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR dev$[rsp], 0

; 638  :             lcss = 0;

  012d3	33 c0		 xor	 eax, eax
  012d5	66 89 84 24 88
	00 00 00	 mov	 WORD PTR lcss$[rsp], ax

; 639  :             break;

  012dd	e9 ff 2b 00 00	 jmp	 $LN34@resume_cmd
$LN577@resume_cmd:
$LN133@resume_cmd:

; 640  : 
; 641  :         case SR_SYS_ATTNPENDING_LCSS:
; 642  :             SR_READ_VALUE(file,len,&lcss,sizeof(lcss));

  012e2	41 b9 02 00 00
	00		 mov	 r9d, 2
  012e8	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR lcss$[rsp]
  012f0	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  012f4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  012f9	e8 00 00 00 00	 call	 sr_read_value
  012fe	85 c0		 test	 eax, eax
  01300	74 0a		 je	 SHORT $LN578@resume_cmd
  01302	b8 ff ff ff ff	 mov	 eax, -1
  01307	e9 23 32 00 00	 jmp	 $LN1@resume_cmd
$LN578@resume_cmd:
  0130c	33 c0		 xor	 eax, eax
  0130e	85 c0		 test	 eax, eax
  01310	75 d0		 jne	 SHORT $LN133@resume_cmd

; 643  :             break;

  01312	e9 ca 2b 00 00	 jmp	 $LN34@resume_cmd
$LN579@resume_cmd:
$LN136@resume_cmd:

; 644  : 
; 645  :         case SR_SYS_ATTNPENDING:
; 646  :             SR_READ_VALUE(file, len, &hw, sizeof(hw));

  01317	41 b9 02 00 00
	00		 mov	 r9d, 2
  0131d	4c 8d 84 24 94
	00 00 00	 lea	 r8, QWORD PTR hw$[rsp]
  01325	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01329	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0132e	e8 00 00 00 00	 call	 sr_read_value
  01333	85 c0		 test	 eax, eax
  01335	74 0a		 je	 SHORT $LN580@resume_cmd
  01337	b8 ff ff ff ff	 mov	 eax, -1
  0133c	e9 ee 31 00 00	 jmp	 $LN1@resume_cmd
$LN580@resume_cmd:
  01341	33 c0		 xor	 eax, eax
  01343	85 c0		 test	 eax, eax
  01345	75 d0		 jne	 SHORT $LN136@resume_cmd

; 647  :             dev = find_device_by_devnum(lcss,hw);

  01347	0f b7 94 24 94
	00 00 00	 movzx	 edx, WORD PTR hw$[rsp]
  0134f	0f b7 8c 24 88
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  01357	e8 00 00 00 00	 call	 find_device_by_devnum
  0135c	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 648  :             if (dev == NULL) break;

  01361	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01367	75 05		 jne	 SHORT $LN581@resume_cmd
  01369	e9 73 2b 00 00	 jmp	 $LN34@resume_cmd
$LN581@resume_cmd:

; 649  :             if (ioq == NULL)

  0136e	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR ioq$[rsp], 0
  01377	75 1b		 jne	 SHORT $LN582@resume_cmd

; 650  :                 sysblk.iointq = &dev->attnioint;

  01379	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0137e	48 05 58 02 00
	00		 add	 rax, 600		; 00000258H
  01384	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0138b	48 89 81 28 12
	00 00		 mov	 QWORD PTR [rcx+4648], rax
  01392	eb 16		 jmp	 SHORT $LN583@resume_cmd
$LN582@resume_cmd:

; 651  :             else
; 652  :                 ioq->next = &dev->attnioint;

  01394	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  01399	48 05 58 02 00
	00		 add	 rax, 600		; 00000258H
  0139f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR ioq$[rsp]
  013a7	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN583@resume_cmd:

; 653  :             ioq = &dev->attnioint;

  013aa	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  013af	48 05 58 02 00
	00		 add	 rax, 600		; 00000258H
  013b5	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ioq$[rsp], rax

; 654  :             dev = NULL;

  013bd	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR dev$[rsp], 0

; 655  :             lcss = 0;

  013c6	33 c0		 xor	 eax, eax
  013c8	66 89 84 24 88
	00 00 00	 mov	 WORD PTR lcss$[rsp], ax

; 656  :             break;

  013d0	e9 0c 2b 00 00	 jmp	 $LN34@resume_cmd
$LN584@resume_cmd:
$LN139@resume_cmd:

; 657  : 
; 658  :         case SR_SYS_CRWCOUNT:
; 659  :             SR_READ_VALUE( file, len, &sysblk.crwcount, sizeof( sysblk.crwcount ));

  013d5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  013dc	48 05 1c 12 00
	00		 add	 rax, 4636		; 0000121cH
  013e2	41 b9 04 00 00
	00		 mov	 r9d, 4
  013e8	4c 8b c0	 mov	 r8, rax
  013eb	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  013ef	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  013f4	e8 00 00 00 00	 call	 sr_read_value
  013f9	85 c0		 test	 eax, eax
  013fb	74 0a		 je	 SHORT $LN585@resume_cmd
  013fd	b8 ff ff ff ff	 mov	 eax, -1
  01402	e9 28 31 00 00	 jmp	 $LN1@resume_cmd
$LN585@resume_cmd:
  01407	33 c0		 xor	 eax, eax
  01409	85 c0		 test	 eax, eax
  0140b	75 c8		 jne	 SHORT $LN139@resume_cmd

; 660  :             if (sysblk.crwcount)

  0140d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01414	83 b8 1c 12 00
	00 00		 cmp	 DWORD PTR [rax+4636], 0
  0141b	0f 84 b0 00 00
	00		 je	 $LN586@resume_cmd

; 661  :             {
; 662  :                 sysblk.crwarray = malloc( sizeof(U32) * sysblk.crwcount );

  01421	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01428	8b 80 1c 12 00
	00		 mov	 eax, DWORD PTR [rax+4636]
  0142e	48 c1 e0 02	 shl	 rax, 2
  01432	48 8b c8	 mov	 rcx, rax
  01435	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0143b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01442	48 89 81 10 12
	00 00		 mov	 QWORD PTR [rcx+4624], rax

; 663  :                 if (!sysblk.crwarray)

  01449	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01450	48 83 b8 10 12
	00 00 00	 cmp	 QWORD PTR [rax+4624], 0
  01458	75 5d		 jne	 SHORT $LN587@resume_cmd

; 664  :                 {
; 665  :                     // "SR: error loading CRW queue: not enough memory for %d CRWs"
; 666  :                     WRMSG(HHC02022, "E", sysblk.crwcount);

  0145a	b9 01 00 00 00	 mov	 ecx, 1
  0145f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01465	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0146c	8b 89 1c 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4636]
  01472	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01476	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179874
  0147d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01482	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179875
  01489	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0148e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01493	41 b9 03 00 00
	00		 mov	 r9d, 3
  01499	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179876
  014a0	ba 9a 02 00 00	 mov	 edx, 666		; 0000029aH
  014a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179877
  014ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 667  :                     goto sr_error_exit;

  014b2	e9 14 30 00 00	 jmp	 $sr_error_exit$1020
$LN587@resume_cmd:

; 668  :                 }
; 669  :                 sysblk.crwalloc = sysblk.crwcount;

  014b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  014be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  014c5	8b 89 1c 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4636]
  014cb	89 88 18 12 00
	00		 mov	 DWORD PTR [rax+4632], ecx
$LN586@resume_cmd:

; 670  :             }
; 671  :             break;

  014d1	e9 0b 2a 00 00	 jmp	 $LN34@resume_cmd
$LN588@resume_cmd:
$LN142@resume_cmd:

; 672  : 
; 673  :         case SR_SYS_CRWARRAY:
; 674  :             ASSERT( sysblk.crwarray && sysblk.crwcount );

  014d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  014dd	48 83 b8 10 12
	00 00 00	 cmp	 QWORD PTR [rax+4624], 0
  014e5	74 10		 je	 SHORT $LN590@resume_cmd
  014e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  014ee	83 b8 1c 12 00
	00 00		 cmp	 DWORD PTR [rax+4636], 0
  014f5	75 5c		 jne	 SHORT $LN589@resume_cmd
$LN590@resume_cmd:
$LN145@resume_cmd:
  014f7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG179881
  014fe	41 b8 a2 02 00
	00		 mov	 r8d, 674		; 000002a2H
  01504	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179882
  0150b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179883
  01512	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  01518	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0151e	85 c0		 test	 eax, eax
  01520	74 20		 je	 SHORT $LN591@resume_cmd
  01522	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG179885
  01529	41 b8 a2 02 00
	00		 mov	 r8d, 674		; 000002a2H
  0152f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179886
  01536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179887
  0153d	e8 00 00 00 00	 call	 DebuggerTrace
$LN591@resume_cmd:
  01542	33 c0		 xor	 eax, eax
  01544	85 c0		 test	 eax, eax
  01546	75 af		 jne	 SHORT $LN145@resume_cmd
  01548	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0154e	85 c0		 test	 eax, eax
  01550	74 01		 je	 SHORT $LN592@resume_cmd
  01552	cc		 int	 3
$LN592@resume_cmd:
$LN589@resume_cmd:
  01553	33 c0		 xor	 eax, eax
  01555	85 c0		 test	 eax, eax
  01557	0f 85 79 ff ff
	ff		 jne	 $LN142@resume_cmd
$LN148@resume_cmd:

; 675  :             TRACE("SR: Restoring CRW Array...\n");

  0155d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179889
  01564	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0156a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  01570	85 c0		 test	 eax, eax
  01572	74 0c		 je	 SHORT $LN593@resume_cmd
  01574	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179891
  0157b	e8 00 00 00 00	 call	 DebuggerTrace
$LN593@resume_cmd:
  01580	33 c0		 xor	 eax, eax
  01582	85 c0		 test	 eax, eax
  01584	75 d7		 jne	 SHORT $LN148@resume_cmd
$LN151@resume_cmd:

; 676  :             SR_READ_BUF( file, sysblk.crwarray, sizeof(U32) * sysblk.crwcount );

  01586	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0158d	8b 80 1c 12 00
	00		 mov	 eax, DWORD PTR [rax+4636]
  01593	48 c1 e0 02	 shl	 rax, 2
  01597	4c 8b c0	 mov	 r8, rax
  0159a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  015a1	48 8b 90 10 12
	00 00		 mov	 rdx, QWORD PTR [rax+4624]
  015a8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  015ad	e8 00 00 00 00	 call	 sr_read_buf
  015b2	85 c0		 test	 eax, eax
  015b4	74 0a		 je	 SHORT $LN594@resume_cmd
  015b6	b8 ff ff ff ff	 mov	 eax, -1
  015bb	e9 6f 2f 00 00	 jmp	 $LN1@resume_cmd
$LN594@resume_cmd:
  015c0	33 c0		 xor	 eax, eax
  015c2	85 c0		 test	 eax, eax
  015c4	75 c0		 jne	 SHORT $LN151@resume_cmd

; 677  :             break;

  015c6	e9 16 29 00 00	 jmp	 $LN34@resume_cmd
$LN595@resume_cmd:
$LN154@resume_cmd:

; 678  : 
; 679  :         case SR_SYS_CRWINDEX:
; 680  :             ASSERT( sysblk.crwarray && sysblk.crwcount );

  015cb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  015d2	48 83 b8 10 12
	00 00 00	 cmp	 QWORD PTR [rax+4624], 0
  015da	74 10		 je	 SHORT $LN597@resume_cmd
  015dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  015e3	83 b8 1c 12 00
	00 00		 cmp	 DWORD PTR [rax+4636], 0
  015ea	75 5c		 jne	 SHORT $LN596@resume_cmd
$LN597@resume_cmd:
$LN157@resume_cmd:
  015ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG179896
  015f3	41 b8 a8 02 00
	00		 mov	 r8d, 680		; 000002a8H
  015f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179897
  01600	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179898
  01607	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0160d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  01613	85 c0		 test	 eax, eax
  01615	74 20		 je	 SHORT $LN598@resume_cmd
  01617	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG179900
  0161e	41 b8 a8 02 00
	00		 mov	 r8d, 680		; 000002a8H
  01624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179901
  0162b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179902
  01632	e8 00 00 00 00	 call	 DebuggerTrace
$LN598@resume_cmd:
  01637	33 c0		 xor	 eax, eax
  01639	85 c0		 test	 eax, eax
  0163b	75 af		 jne	 SHORT $LN157@resume_cmd
  0163d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  01643	85 c0		 test	 eax, eax
  01645	74 01		 je	 SHORT $LN599@resume_cmd
  01647	cc		 int	 3
$LN599@resume_cmd:
$LN596@resume_cmd:
  01648	33 c0		 xor	 eax, eax
  0164a	85 c0		 test	 eax, eax
  0164c	0f 85 79 ff ff
	ff		 jne	 $LN154@resume_cmd
$LN160@resume_cmd:

; 681  :             SR_READ_VALUE( file, len, &sysblk.crwindex, sizeof( sysblk.crwindex ));

  01652	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01659	48 05 20 12 00
	00		 add	 rax, 4640		; 00001220H
  0165f	41 b9 04 00 00
	00		 mov	 r9d, 4
  01665	4c 8b c0	 mov	 r8, rax
  01668	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0166c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01671	e8 00 00 00 00	 call	 sr_read_value
  01676	85 c0		 test	 eax, eax
  01678	74 0a		 je	 SHORT $LN600@resume_cmd
  0167a	b8 ff ff ff ff	 mov	 eax, -1
  0167f	e9 ab 2e 00 00	 jmp	 $LN1@resume_cmd
$LN600@resume_cmd:
  01684	33 c0		 xor	 eax, eax
  01686	85 c0		 test	 eax, eax
  01688	75 c8		 jne	 SHORT $LN160@resume_cmd

; 682  :             break;

  0168a	e9 52 28 00 00	 jmp	 $LN34@resume_cmd
$LN601@resume_cmd:
$LN163@resume_cmd:

; 683  : 
; 684  :         case SR_SYS_CRWENDIAN:
; 685  :             ASSERT( sysblk.crwarray && sysblk.crwcount );

  0168f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01696	48 83 b8 10 12
	00 00 00	 cmp	 QWORD PTR [rax+4624], 0
  0169e	74 10		 je	 SHORT $LN603@resume_cmd
  016a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  016a7	83 b8 1c 12 00
	00 00		 cmp	 DWORD PTR [rax+4636], 0
  016ae	75 5c		 jne	 SHORT $LN602@resume_cmd
$LN603@resume_cmd:
$LN166@resume_cmd:
  016b0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG179908
  016b7	41 b8 ad 02 00
	00		 mov	 r8d, 685		; 000002adH
  016bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179909
  016c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179910
  016cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  016d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  016d7	85 c0		 test	 eax, eax
  016d9	74 20		 je	 SHORT $LN604@resume_cmd
  016db	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG179912
  016e2	41 b8 ad 02 00
	00		 mov	 r8d, 685		; 000002adH
  016e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179913
  016ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179914
  016f6	e8 00 00 00 00	 call	 DebuggerTrace
$LN604@resume_cmd:
  016fb	33 c0		 xor	 eax, eax
  016fd	85 c0		 test	 eax, eax
  016ff	75 af		 jne	 SHORT $LN166@resume_cmd
  01701	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  01707	85 c0		 test	 eax, eax
  01709	74 01		 je	 SHORT $LN605@resume_cmd
  0170b	cc		 int	 3
$LN605@resume_cmd:
$LN602@resume_cmd:
  0170c	33 c0		 xor	 eax, eax
  0170e	85 c0		 test	 eax, eax
  01710	0f 85 79 ff ff
	ff		 jne	 $LN163@resume_cmd
$LN169@resume_cmd:

; 686  :             SR_READ_VALUE(file, len, &crwendian, 1);

  01716	41 b9 01 00 00
	00		 mov	 r9d, 1
  0171c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:crwendian
  01723	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01727	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0172c	e8 00 00 00 00	 call	 sr_read_value
  01731	85 c0		 test	 eax, eax
  01733	74 0a		 je	 SHORT $LN606@resume_cmd
  01735	b8 ff ff ff ff	 mov	 eax, -1
  0173a	e9 f0 2d 00 00	 jmp	 $LN1@resume_cmd
$LN606@resume_cmd:
  0173f	33 c0		 xor	 eax, eax
  01741	85 c0		 test	 eax, eax
  01743	75 d1		 jne	 SHORT $LN169@resume_cmd

; 687  :             if (ourendian != crwendian)

  01745	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ourendian
  0174c	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR crwendian
  01753	3b c1		 cmp	 eax, ecx
  01755	74 5a		 je	 SHORT $LN607@resume_cmd

; 688  :                 for (i=0; (U32)i < sysblk.crwcount; i++)

  01757	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0175f	eb 0a		 jmp	 SHORT $LN172@resume_cmd
$LN170@resume_cmd:
  01761	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  01765	ff c0		 inc	 eax
  01767	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN172@resume_cmd:
  0176b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01772	8b 80 1c 12 00
	00		 mov	 eax, DWORD PTR [rax+4636]
  01778	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  0177c	73 33		 jae	 SHORT $LN171@resume_cmd

; 689  :                     *(sysblk.crwarray + i) = bswap_32(*(sysblk.crwarray + i));

  0177e	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  01783	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0178a	48 8b 89 10 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4624]
  01791	8b 0c 81	 mov	 ecx, DWORD PTR [rcx+rax*4]
  01794	e8 00 00 00 00	 call	 _byteswap_ulong
  01799	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$[rsp]
  0179e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  017a5	48 8b 92 10 12
	00 00		 mov	 rdx, QWORD PTR [rdx+4624]
  017ac	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  017af	eb b0		 jmp	 SHORT $LN170@resume_cmd
$LN171@resume_cmd:
$LN607@resume_cmd:

; 690  :             break;

  017b1	e9 2b 27 00 00	 jmp	 $LN34@resume_cmd
$LN608@resume_cmd:
$LN175@resume_cmd:

; 691  : 
; 692  :         case SR_SYS_SERVPARM:
; 693  :             SR_READ_VALUE(file, len, &sysblk.servparm, sizeof(sysblk.servparm));

  017b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  017bd	48 05 90 12 00
	00		 add	 rax, 4752		; 00001290H
  017c3	41 b9 04 00 00
	00		 mov	 r9d, 4
  017c9	4c 8b c0	 mov	 r8, rax
  017cc	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  017d0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  017d5	e8 00 00 00 00	 call	 sr_read_value
  017da	85 c0		 test	 eax, eax
  017dc	74 0a		 je	 SHORT $LN609@resume_cmd
  017de	b8 ff ff ff ff	 mov	 eax, -1
  017e3	e9 47 2d 00 00	 jmp	 $LN1@resume_cmd
$LN609@resume_cmd:
  017e8	33 c0		 xor	 eax, eax
  017ea	85 c0		 test	 eax, eax
  017ec	75 c8		 jne	 SHORT $LN175@resume_cmd

; 694  :             break;

  017ee	e9 ee 26 00 00	 jmp	 $LN34@resume_cmd
$LN610@resume_cmd:
$LN178@resume_cmd:

; 695  : 
; 696  :         case SR_SYS_SIGINTREQ:
; 697  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  017f3	41 b9 04 00 00
	00		 mov	 r9d, 4
  017f9	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  017fe	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01802	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01807	e8 00 00 00 00	 call	 sr_read_value
  0180c	85 c0		 test	 eax, eax
  0180e	74 0a		 je	 SHORT $LN611@resume_cmd
  01810	b8 ff ff ff ff	 mov	 eax, -1
  01815	e9 15 2d 00 00	 jmp	 $LN1@resume_cmd
$LN611@resume_cmd:
  0181a	33 c0		 xor	 eax, eax
  0181c	85 c0		 test	 eax, eax
  0181e	75 d3		 jne	 SHORT $LN178@resume_cmd

; 698  :             sysblk.sigintreq = rc;

  01820	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  01824	83 e0 01	 and	 eax, 1
  01827	c1 e0 07	 shl	 eax, 7
  0182a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01831	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  01837	0f ba f1 07	 btr	 ecx, 7
  0183b	0b c8		 or	 ecx, eax
  0183d	8b c1		 mov	 eax, ecx
  0183f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01846	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 699  :             break;

  0184c	e9 90 26 00 00	 jmp	 $LN34@resume_cmd
$LN612@resume_cmd:
$LN181@resume_cmd:

; 700  : 
; 701  :         case SR_SYS_IPLED:
; 702  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  01851	41 b9 04 00 00
	00		 mov	 r9d, 4
  01857	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  0185c	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01860	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01865	e8 00 00 00 00	 call	 sr_read_value
  0186a	85 c0		 test	 eax, eax
  0186c	74 0a		 je	 SHORT $LN613@resume_cmd
  0186e	b8 ff ff ff ff	 mov	 eax, -1
  01873	e9 b7 2c 00 00	 jmp	 $LN1@resume_cmd
$LN613@resume_cmd:
  01878	33 c0		 xor	 eax, eax
  0187a	85 c0		 test	 eax, eax
  0187c	75 d3		 jne	 SHORT $LN181@resume_cmd

; 703  :             sysblk.ipled = rc;

  0187e	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  01882	83 e0 01	 and	 eax, 1
  01885	d1 e0		 shl	 eax, 1
  01887	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0188e	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  01894	83 e1 fd	 and	 ecx, -3			; fffffffdH
  01897	0b c8		 or	 ecx, eax
  01899	8b c1		 mov	 eax, ecx
  0189b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  018a2	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 704  :             break;

  018a8	e9 34 26 00 00	 jmp	 $LN34@resume_cmd
$LN614@resume_cmd:
$LN184@resume_cmd:

; 705  : 
; 706  :         case SR_SYS_LOADPARM:
; 707  :             SR_READ_STRING(file, buf, len);

  018ad	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  018b2	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  018ba	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  018bf	e8 00 00 00 00	 call	 sr_read_string
  018c4	85 c0		 test	 eax, eax
  018c6	74 0a		 je	 SHORT $LN615@resume_cmd
  018c8	b8 ff ff ff ff	 mov	 eax, -1
  018cd	e9 5d 2c 00 00	 jmp	 $LN1@resume_cmd
$LN615@resume_cmd:
  018d2	33 c0		 xor	 eax, eax
  018d4	85 c0		 test	 eax, eax
  018d6	75 d5		 jne	 SHORT $LN184@resume_cmd

; 708  :             set_loadparm ((char *)buf);

  018d8	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  018e0	e8 00 00 00 00	 call	 set_loadparm

; 709  :             break;

  018e5	e9 f7 25 00 00	 jmp	 $LN34@resume_cmd
$LN616@resume_cmd:
$LN187@resume_cmd:

; 710  : 
; 711  :         case SR_SYS_SERVC:
; 712  :             TRACE("SR: Restoring Service Console State...\n");

  018ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179927
  018f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  018f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  018fd	85 c0		 test	 eax, eax
  018ff	74 0c		 je	 SHORT $LN617@resume_cmd
  01901	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179929
  01908	e8 00 00 00 00	 call	 DebuggerTrace
$LN617@resume_cmd:
  0190d	33 c0		 xor	 eax, eax
  0190f	85 c0		 test	 eax, eax
  01911	75 d7		 jne	 SHORT $LN187@resume_cmd

; 713  :             rc = servc_hresume(file);

  01913	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01918	e8 00 00 00 00	 call	 servc_hresume
  0191d	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 714  :             if (rc < 0) goto sr_error_exit;

  01921	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01926	7d 05		 jge	 SHORT $LN618@resume_cmd
  01928	e9 9e 2b 00 00	 jmp	 $sr_error_exit$1020
$LN618@resume_cmd:

; 715  :             break;

  0192d	e9 af 25 00 00	 jmp	 $LN34@resume_cmd
$LN619@resume_cmd:
$LN190@resume_cmd:

; 716  : 
; 717  :         case SR_SYS_CLOCK:
; 718  :             TRACE("SR: Restoring Clock State...\n");

  01932	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179932
  01939	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0193f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  01945	85 c0		 test	 eax, eax
  01947	74 0c		 je	 SHORT $LN620@resume_cmd
  01949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179934
  01950	e8 00 00 00 00	 call	 DebuggerTrace
$LN620@resume_cmd:
  01955	33 c0		 xor	 eax, eax
  01957	85 c0		 test	 eax, eax
  01959	75 d7		 jne	 SHORT $LN190@resume_cmd

; 719  :             rc = clock_hresume(file);

  0195b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01960	e8 00 00 00 00	 call	 clock_hresume
  01965	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 720  :             if (rc < 0) goto sr_error_exit;

  01969	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0196e	7d 05		 jge	 SHORT $LN621@resume_cmd
  01970	e9 56 2b 00 00	 jmp	 $sr_error_exit$1020
$LN621@resume_cmd:

; 721  :             break;

  01975	e9 67 25 00 00	 jmp	 $LN34@resume_cmd
$LN622@resume_cmd:
$LN193@resume_cmd:

; 722  : 
; 723  :         case SR_CPU:
; 724  :             SR_READ_VALUE(file, len, &i, sizeof(i));

  0197a	41 b9 04 00 00
	00		 mov	 r9d, 4
  01980	4c 8d 44 24 64	 lea	 r8, QWORD PTR i$[rsp]
  01985	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01989	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0198e	e8 00 00 00 00	 call	 sr_read_value
  01993	85 c0		 test	 eax, eax
  01995	74 0a		 je	 SHORT $LN623@resume_cmd
  01997	b8 ff ff ff ff	 mov	 eax, -1
  0199c	e9 8e 2b 00 00	 jmp	 $LN1@resume_cmd
$LN623@resume_cmd:
  019a1	33 c0		 xor	 eax, eax
  019a3	85 c0		 test	 eax, eax
  019a5	75 d3		 jne	 SHORT $LN193@resume_cmd
$LN196@resume_cmd:

; 725  :             TRACE("SR: Restoring CPU %d Data...\n", i);

  019a7	8b 54 24 64	 mov	 edx, DWORD PTR i$[rsp]
  019ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179938
  019b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  019b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  019be	85 c0		 test	 eax, eax
  019c0	74 10		 je	 SHORT $LN624@resume_cmd
  019c2	8b 54 24 64	 mov	 edx, DWORD PTR i$[rsp]
  019c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179940
  019cd	e8 00 00 00 00	 call	 DebuggerTrace
$LN624@resume_cmd:
  019d2	33 c0		 xor	 eax, eax
  019d4	85 c0		 test	 eax, eax
  019d6	75 cf		 jne	 SHORT $LN196@resume_cmd

; 726  :             if (i >= sysblk.maxcpu)

  019d8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  019df	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  019e5	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  019e9	7c 75		 jl	 SHORT $LN625@resume_cmd

; 727  :             {
; 728  :                 // "SR: processor CP%02X exceeds max allowed CP%02X"
; 729  :                 WRMSG(HHC02010, "E", i, sysblk.maxcpu-1);

  019eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  019f2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  019f8	ff c8		 dec	 eax
  019fa	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv950[rsp], eax
  01a01	b9 01 00 00 00	 mov	 ecx, 1
  01a06	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01a0c	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv950[rsp]
  01a13	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01a17	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  01a1b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01a1f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179942
  01a26	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01a2b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179943
  01a32	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a37	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01a3c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a42	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179944
  01a49	ba d9 02 00 00	 mov	 edx, 729		; 000002d9H
  01a4e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179945
  01a55	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 730  :                 goto sr_error_exit;

  01a5b	e9 6b 2a 00 00	 jmp	 $sr_error_exit$1020
$LN625@resume_cmd:

; 731  :             }
; 732  :             OBTAIN_INTLOCK(NULL);

  01a60	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179946
  01a67	33 c9		 xor	 ecx, ecx
  01a69	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 733  :             if (IS_CPU_ONLINE(i))

  01a6e	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  01a73	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01a7a	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  01a83	0f 84 91 00 00
	00		 je	 $LN626@resume_cmd

; 734  :             {
; 735  :                 RELEASE_INTLOCK(NULL);

  01a89	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179948
  01a90	33 c9		 xor	 ecx, ecx
  01a92	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 736  :                 // "SR: processor %s%02X already configured"
; 737  :                 WRMSG(HHC02011, "E", PTYPSTR(i), i);

  01a97	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  01a9c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01aa3	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  01aab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01ab1	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv972[rsp], rax
  01ab9	b9 01 00 00 00	 mov	 ecx, 1
  01abe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ac4	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  01ac8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01acc	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv972[rsp]
  01ad4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01ad9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179949
  01ae0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01ae5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179950
  01aec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01af1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01af6	41 b9 03 00 00
	00		 mov	 r9d, 3
  01afc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179951
  01b03	ba e1 02 00 00	 mov	 edx, 737		; 000002e1H
  01b08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179952
  01b0f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 738  :                 goto sr_error_exit;

  01b15	e9 b1 29 00 00	 jmp	 $sr_error_exit$1020
$LN626@resume_cmd:

; 739  :             }
; 740  :             rc = configure_cpu(i);

  01b1a	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  01b1e	e8 00 00 00 00	 call	 configure_cpu
  01b23	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 741  :             RELEASE_INTLOCK(NULL);

  01b27	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG179953
  01b2e	33 c9		 xor	 ecx, ecx
  01b30	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 742  :             if (rc < 0)

  01b35	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01b3a	0f 8d 83 00 00
	00		 jge	 $LN627@resume_cmd

; 743  :             {
; 744  :                 // "SR: processor %s%02X unable to configure online"
; 745  :                 WRMSG(HHC02012, "E", PTYPSTR(i), i);

  01b40	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  01b45	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01b4c	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  01b54	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01b5a	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv994[rsp], rax
  01b62	b9 01 00 00 00	 mov	 ecx, 1
  01b67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01b6d	8b 4c 24 64	 mov	 ecx, DWORD PTR i$[rsp]
  01b71	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01b75	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv994[rsp]
  01b7d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01b82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179955
  01b89	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01b8e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179956
  01b95	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b9a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01b9f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01ba5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179957
  01bac	ba e9 02 00 00	 mov	 edx, 745		; 000002e9H
  01bb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179958
  01bb8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 746  :                 goto sr_error_exit;

  01bbe	e9 08 29 00 00	 jmp	 $sr_error_exit$1020
$LN627@resume_cmd:

; 747  :             }
; 748  :             regs = sysblk.regs[i];

  01bc3	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  01bc8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  01bcf	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  01bd7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 749  :             break;

  01bdf	e9 fd 22 00 00	 jmp	 $LN34@resume_cmd
$LN628@resume_cmd:

; 750  : 
; 751  :         case SR_CPU_PX:
; 752  :             SR_NULL_REGS_CHECK(regs);

  01be4	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  01bed	75 05		 jne	 SHORT $LN629@resume_cmd
  01bef	e9 85 28 00 00	 jmp	 $sr_null_regs_exit$1021
$LN629@resume_cmd:
$LN199@resume_cmd:

; 753  :             SR_READ_VALUE(file, len, &regs->px, sizeof(regs->px));

  01bf4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01bfc	48 83 c0 70	 add	 rax, 112		; 00000070H
  01c00	41 b9 08 00 00
	00		 mov	 r9d, 8
  01c06	4c 8b c0	 mov	 r8, rax
  01c09	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01c0d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01c12	e8 00 00 00 00	 call	 sr_read_value
  01c17	85 c0		 test	 eax, eax
  01c19	74 0a		 je	 SHORT $LN630@resume_cmd
  01c1b	b8 ff ff ff ff	 mov	 eax, -1
  01c20	e9 0a 29 00 00	 jmp	 $LN1@resume_cmd
$LN630@resume_cmd:
  01c25	33 c0		 xor	 eax, eax
  01c27	85 c0		 test	 eax, eax
  01c29	75 c9		 jne	 SHORT $LN199@resume_cmd

; 754  :             break;

  01c2b	e9 b1 22 00 00	 jmp	 $LN34@resume_cmd
$LN631@resume_cmd:

; 755  : 
; 756  :         case SR_CPU_PSW:
; 757  :             SR_NULL_REGS_CHECK(regs);

  01c30	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  01c39	75 05		 jne	 SHORT $LN632@resume_cmd
  01c3b	e9 39 28 00 00	 jmp	 $sr_null_regs_exit$1021
$LN632@resume_cmd:

; 758  :             if (len != 8 && len != 16)

  01c40	83 7c 24 60 08	 cmp	 DWORD PTR len$[rsp], 8
  01c45	0f 84 b9 00 00
	00		 je	 $LN633@resume_cmd
  01c4b	83 7c 24 60 10	 cmp	 DWORD PTR len$[rsp], 16
  01c50	0f 84 ae 00 00
	00		 je	 $LN633@resume_cmd

; 759  :             {
; 760  :                 // "SR: processor %s%02X invalid psw length %d"
; 761  :                 WRMSG(HHC02013, "E", PTYPSTR(regs->cpuad), regs->cpuad, len);

  01c56	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01c5e	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01c65	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv1028[rsp], eax
  01c6c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01c74	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  01c7b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01c82	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  01c8a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01c90	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv1030[rsp], rax
  01c98	b9 01 00 00 00	 mov	 ecx, 1
  01c9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ca3	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  01ca7	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  01cab	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv1028[rsp]
  01cb2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01cb6	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv1030[rsp]
  01cbe	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01cc3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179965
  01cca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01ccf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179966
  01cd6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01cdb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01ce0	41 b9 03 00 00
	00		 mov	 r9d, 3
  01ce6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179967
  01ced	ba f9 02 00 00	 mov	 edx, 761		; 000002f9H
  01cf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179968
  01cf9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 762  :                 goto sr_error_exit;

  01cff	e9 c7 27 00 00	 jmp	 $sr_error_exit$1020
$LN633@resume_cmd:

; 763  :             }
; 764  :             memset(buf, 0, 16);

  01d04	48 8d 84 24 00
	03 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  01d0c	48 8b f8	 mov	 rdi, rax
  01d0f	33 c0		 xor	 eax, eax
  01d11	b9 10 00 00 00	 mov	 ecx, 16
  01d16	f3 aa		 rep stosb
$LN202@resume_cmd:

; 765  :             SR_READ_BUF(file, buf, len);

  01d18	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  01d1c	44 8b c0	 mov	 r8d, eax
  01d1f	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01d27	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01d2c	e8 00 00 00 00	 call	 sr_read_buf
  01d31	85 c0		 test	 eax, eax
  01d33	74 0a		 je	 SHORT $LN634@resume_cmd
  01d35	b8 ff ff ff ff	 mov	 eax, -1
  01d3a	e9 f0 27 00 00	 jmp	 $LN1@resume_cmd
$LN634@resume_cmd:
  01d3f	33 c0		 xor	 eax, eax
  01d41	85 c0		 test	 eax, eax
  01d43	75 d3		 jne	 SHORT $LN202@resume_cmd

; 766  :             switch (regs->arch_mode) {

  01d45	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01d4d	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  01d50	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv1059[rsp], eax
  01d57	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR tv1059[rsp], 0
  01d5f	74 16		 je	 SHORT $LN635@resume_cmd
  01d61	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR tv1059[rsp], 1
  01d69	74 2f		 je	 SHORT $LN636@resume_cmd
  01d6b	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR tv1059[rsp], 2
  01d73	74 48		 je	 SHORT $LN637@resume_cmd
  01d75	eb 69		 jmp	 SHORT $LN638@resume_cmd
$LN635@resume_cmd:

; 767  : #if defined (_370)
; 768  :             case ARCH_370_IDX:
; 769  :                 len = 8;

  01d77	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR len$[rsp], 8

; 770  :                 rc = s370_load_psw(regs, (BYTE *)&buf);

  01d7f	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01d87	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01d8f	e8 00 00 00 00	 call	 s370_load_psw
  01d94	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 771  :                 break;

  01d98	eb 63		 jmp	 SHORT $LN203@resume_cmd
$LN636@resume_cmd:

; 772  : #endif
; 773  : #if defined (_390)
; 774  :             case ARCH_390_IDX:
; 775  :                 len = 8;

  01d9a	c7 44 24 60 08
	00 00 00	 mov	 DWORD PTR len$[rsp], 8

; 776  :                 rc = s390_load_psw(regs, (BYTE *)&buf);

  01da2	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01daa	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01db2	e8 00 00 00 00	 call	 s390_load_psw
  01db7	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 777  :                 break;

  01dbb	eb 40		 jmp	 SHORT $LN203@resume_cmd
$LN637@resume_cmd:

; 778  : #endif
; 779  : #if defined (_900)
; 780  :             case ARCH_900_IDX:
; 781  :                 len = 16;

  01dbd	c7 44 24 60 10
	00 00 00	 mov	 DWORD PTR len$[rsp], 16

; 782  :                 rc = z900_load_psw(regs, (BYTE *)&buf);

  01dc5	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01dcd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01dd5	e8 00 00 00 00	 call	 z900_load_psw
  01dda	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 783  :                 break;

  01dde	eb 1d		 jmp	 SHORT $LN203@resume_cmd
$LN638@resume_cmd:
$LN207@resume_cmd:

; 784  : #endif
; 785  :             default: CRASH();

  01de0	48 c7 84 24 78
	01 00 00 00 00
	00 00		 mov	 QWORD PTR p$12[rsp], 0
  01dec	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR p$12[rsp]
  01df4	c6 00 00	 mov	 BYTE PTR [rax], 0
  01df7	33 c0		 xor	 eax, eax
  01df9	85 c0		 test	 eax, eax
  01dfb	75 e3		 jne	 SHORT $LN207@resume_cmd
$LN203@resume_cmd:

; 786  :             } /* switch (regs->arch_mode) */
; 787  :             if (rc != 0 && memcmp(buf, zeros, len))

  01dfd	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01e02	0f 84 d2 00 00
	00		 je	 $LN639@resume_cmd
  01e08	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  01e0c	44 8b c0	 mov	 r8d, eax
  01e0f	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR zeros$[rsp]
  01e17	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01e1f	e8 00 00 00 00	 call	 memcmp
  01e24	85 c0		 test	 eax, eax
  01e26	0f 84 ae 00 00
	00		 je	 $LN639@resume_cmd

; 788  :             {
; 789  :                 // "SR: processor %s%02X error loading psw, rc %d"
; 790  :                 WRMSG(HHC02014, "E", PTYPSTR(regs->cpuad), regs->cpuad, rc);

  01e2c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01e34	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  01e3b	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv1084[rsp], eax
  01e42	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01e4a	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  01e51	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  01e58	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  01e60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  01e66	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv1086[rsp], rax
  01e6e	b9 01 00 00 00	 mov	 ecx, 1
  01e73	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01e79	8b 4c 24 78	 mov	 ecx, DWORD PTR rc$[rsp]
  01e7d	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  01e81	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv1084[rsp]
  01e88	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01e8c	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv1086[rsp]
  01e94	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01e99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179975
  01ea0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01ea5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179976
  01eac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01eb1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01eb6	41 b9 03 00 00
	00		 mov	 r9d, 3
  01ebc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG179977
  01ec3	ba 16 03 00 00	 mov	 edx, 790		; 00000316H
  01ec8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG179978
  01ecf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 791  :                 goto sr_error_exit;

  01ed5	e9 f1 25 00 00	 jmp	 $sr_error_exit$1020
$LN639@resume_cmd:

; 792  :             }
; 793  :             break;

  01eda	e9 02 20 00 00	 jmp	 $LN34@resume_cmd
$LN640@resume_cmd:
$LN641@resume_cmd:
$LN642@resume_cmd:
$LN643@resume_cmd:
$LN644@resume_cmd:
$LN645@resume_cmd:
$LN646@resume_cmd:
$LN647@resume_cmd:
$LN648@resume_cmd:
$LN649@resume_cmd:
$LN650@resume_cmd:
$LN651@resume_cmd:
$LN652@resume_cmd:
$LN653@resume_cmd:
$LN654@resume_cmd:
$LN655@resume_cmd:

; 794  : 
; 795  :         case SR_CPU_GR_0:
; 796  :         case SR_CPU_GR_1:
; 797  :         case SR_CPU_GR_2:
; 798  :         case SR_CPU_GR_3:
; 799  :         case SR_CPU_GR_4:
; 800  :         case SR_CPU_GR_5:
; 801  :         case SR_CPU_GR_6:
; 802  :         case SR_CPU_GR_7:
; 803  :         case SR_CPU_GR_8:
; 804  :         case SR_CPU_GR_9:
; 805  :         case SR_CPU_GR_10:
; 806  :         case SR_CPU_GR_11:
; 807  :         case SR_CPU_GR_12:
; 808  :         case SR_CPU_GR_13:
; 809  :         case SR_CPU_GR_14:
; 810  :         case SR_CPU_GR_15:
; 811  :             SR_NULL_REGS_CHECK(regs);

  01edf	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  01ee8	75 05		 jne	 SHORT $LN656@resume_cmd
  01eea	e9 8a 25 00 00	 jmp	 $sr_null_regs_exit$1021
$LN656@resume_cmd:

; 812  :             i = key - SR_CPU_GR;

  01eef	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  01ef6	2d 20 00 e2 ac	 sub	 eax, -1394474976	; ace20020H
  01efb	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN210@resume_cmd:

; 813  :             SR_READ_VALUE(file, len, &regs->gr[i], sizeof(regs->gr[0]));

  01eff	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  01f04	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01f0c	48 8d 84 c1 80
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+640]
  01f14	41 b9 08 00 00
	00		 mov	 r9d, 8
  01f1a	4c 8b c0	 mov	 r8, rax
  01f1d	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01f21	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01f26	e8 00 00 00 00	 call	 sr_read_value
  01f2b	85 c0		 test	 eax, eax
  01f2d	74 0a		 je	 SHORT $LN657@resume_cmd
  01f2f	b8 ff ff ff ff	 mov	 eax, -1
  01f34	e9 f6 25 00 00	 jmp	 $LN1@resume_cmd
$LN657@resume_cmd:
  01f39	33 c0		 xor	 eax, eax
  01f3b	85 c0		 test	 eax, eax
  01f3d	75 c0		 jne	 SHORT $LN210@resume_cmd

; 814  :             break;

  01f3f	e9 9d 1f 00 00	 jmp	 $LN34@resume_cmd
$LN658@resume_cmd:
$LN659@resume_cmd:
$LN660@resume_cmd:
$LN661@resume_cmd:
$LN662@resume_cmd:
$LN663@resume_cmd:
$LN664@resume_cmd:
$LN665@resume_cmd:
$LN666@resume_cmd:
$LN667@resume_cmd:
$LN668@resume_cmd:
$LN669@resume_cmd:
$LN670@resume_cmd:
$LN671@resume_cmd:
$LN672@resume_cmd:
$LN673@resume_cmd:

; 815  : 
; 816  :         case SR_CPU_CR_0:
; 817  :         case SR_CPU_CR_1:
; 818  :         case SR_CPU_CR_2:
; 819  :         case SR_CPU_CR_3:
; 820  :         case SR_CPU_CR_4:
; 821  :         case SR_CPU_CR_5:
; 822  :         case SR_CPU_CR_6:
; 823  :         case SR_CPU_CR_7:
; 824  :         case SR_CPU_CR_8:
; 825  :         case SR_CPU_CR_9:
; 826  :         case SR_CPU_CR_10:
; 827  :         case SR_CPU_CR_11:
; 828  :         case SR_CPU_CR_12:
; 829  :         case SR_CPU_CR_13:
; 830  :         case SR_CPU_CR_14:
; 831  :         case SR_CPU_CR_15:
; 832  :             SR_NULL_REGS_CHECK(regs);

  01f44	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  01f4d	75 05		 jne	 SHORT $LN674@resume_cmd
  01f4f	e9 25 25 00 00	 jmp	 $sr_null_regs_exit$1021
$LN674@resume_cmd:

; 833  :             i = key - SR_CPU_CR;

  01f54	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  01f5b	2d 40 00 e2 ac	 sub	 eax, -1394474944	; ace20040H
  01f60	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN213@resume_cmd:

; 834  :             SR_READ_VALUE(file, len, &regs->CR(i), sizeof(regs->CR(0)));

  01f64	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  01f68	ff c0		 inc	 eax
  01f6a	48 98		 cdqe
  01f6c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01f74	48 8d 84 c1 00
	06 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+1536]
  01f7c	41 b9 04 00 00
	00		 mov	 r9d, 4
  01f82	4c 8b c0	 mov	 r8, rax
  01f85	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01f89	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01f8e	e8 00 00 00 00	 call	 sr_read_value
  01f93	85 c0		 test	 eax, eax
  01f95	74 0a		 je	 SHORT $LN675@resume_cmd
  01f97	b8 ff ff ff ff	 mov	 eax, -1
  01f9c	e9 8e 25 00 00	 jmp	 $LN1@resume_cmd
$LN675@resume_cmd:
  01fa1	33 c0		 xor	 eax, eax
  01fa3	85 c0		 test	 eax, eax
  01fa5	75 bd		 jne	 SHORT $LN213@resume_cmd

; 835  :             break;

  01fa7	e9 35 1f 00 00	 jmp	 $LN34@resume_cmd
$LN676@resume_cmd:
$LN677@resume_cmd:
$LN678@resume_cmd:
$LN679@resume_cmd:
$LN680@resume_cmd:
$LN681@resume_cmd:
$LN682@resume_cmd:
$LN683@resume_cmd:
$LN684@resume_cmd:
$LN685@resume_cmd:
$LN686@resume_cmd:
$LN687@resume_cmd:
$LN688@resume_cmd:
$LN689@resume_cmd:
$LN690@resume_cmd:
$LN691@resume_cmd:

; 836  : 
; 837  :         case SR_CPU_AR_0:
; 838  :         case SR_CPU_AR_1:
; 839  :         case SR_CPU_AR_2:
; 840  :         case SR_CPU_AR_3:
; 841  :         case SR_CPU_AR_4:
; 842  :         case SR_CPU_AR_5:
; 843  :         case SR_CPU_AR_6:
; 844  :         case SR_CPU_AR_7:
; 845  :         case SR_CPU_AR_8:
; 846  :         case SR_CPU_AR_9:
; 847  :         case SR_CPU_AR_10:
; 848  :         case SR_CPU_AR_11:
; 849  :         case SR_CPU_AR_12:
; 850  :         case SR_CPU_AR_13:
; 851  :         case SR_CPU_AR_14:
; 852  :         case SR_CPU_AR_15:
; 853  :             SR_NULL_REGS_CHECK(regs);

  01fac	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  01fb5	75 05		 jne	 SHORT $LN692@resume_cmd
  01fb7	e9 bd 24 00 00	 jmp	 $sr_null_regs_exit$1021
$LN692@resume_cmd:

; 854  :             i = key - SR_CPU_AR;

  01fbc	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  01fc3	2d 60 00 e2 ac	 sub	 eax, -1394474912	; ace20060H
  01fc8	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN216@resume_cmd:

; 855  :             SR_READ_VALUE(file, len, &regs->ar[i], sizeof(regs->ar[0]));

  01fcc	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  01fd1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01fd9	48 8d 84 81 00
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax*4+768]
  01fe1	41 b9 04 00 00
	00		 mov	 r9d, 4
  01fe7	4c 8b c0	 mov	 r8, rax
  01fea	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  01fee	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  01ff3	e8 00 00 00 00	 call	 sr_read_value
  01ff8	85 c0		 test	 eax, eax
  01ffa	74 0a		 je	 SHORT $LN693@resume_cmd
  01ffc	b8 ff ff ff ff	 mov	 eax, -1
  02001	e9 29 25 00 00	 jmp	 $LN1@resume_cmd
$LN693@resume_cmd:
  02006	33 c0		 xor	 eax, eax
  02008	85 c0		 test	 eax, eax
  0200a	75 c0		 jne	 SHORT $LN216@resume_cmd

; 856  :             break;

  0200c	e9 d0 1e 00 00	 jmp	 $LN34@resume_cmd
$LN694@resume_cmd:
$LN695@resume_cmd:
$LN696@resume_cmd:
$LN697@resume_cmd:
$LN698@resume_cmd:
$LN699@resume_cmd:
$LN700@resume_cmd:
$LN701@resume_cmd:
$LN702@resume_cmd:
$LN703@resume_cmd:
$LN704@resume_cmd:
$LN705@resume_cmd:
$LN706@resume_cmd:
$LN707@resume_cmd:
$LN708@resume_cmd:
$LN709@resume_cmd:
$LN710@resume_cmd:
$LN711@resume_cmd:
$LN712@resume_cmd:
$LN713@resume_cmd:
$LN714@resume_cmd:
$LN715@resume_cmd:
$LN716@resume_cmd:
$LN717@resume_cmd:
$LN718@resume_cmd:
$LN719@resume_cmd:
$LN720@resume_cmd:
$LN721@resume_cmd:
$LN722@resume_cmd:
$LN723@resume_cmd:
$LN724@resume_cmd:
$LN725@resume_cmd:

; 857  : 
; 858  :         case SR_CPU_FPR_0:
; 859  :         case SR_CPU_FPR_1:
; 860  :         case SR_CPU_FPR_2:
; 861  :         case SR_CPU_FPR_3:
; 862  :         case SR_CPU_FPR_4:
; 863  :         case SR_CPU_FPR_5:
; 864  :         case SR_CPU_FPR_6:
; 865  :         case SR_CPU_FPR_7:
; 866  :         case SR_CPU_FPR_8:
; 867  :         case SR_CPU_FPR_9:
; 868  :         case SR_CPU_FPR_10:
; 869  :         case SR_CPU_FPR_11:
; 870  :         case SR_CPU_FPR_12:
; 871  :         case SR_CPU_FPR_13:
; 872  :         case SR_CPU_FPR_14:
; 873  :         case SR_CPU_FPR_15:
; 874  :         case SR_CPU_FPR_16:
; 875  :         case SR_CPU_FPR_17:
; 876  :         case SR_CPU_FPR_18:
; 877  :         case SR_CPU_FPR_19:
; 878  :         case SR_CPU_FPR_20:
; 879  :         case SR_CPU_FPR_21:
; 880  :         case SR_CPU_FPR_22:
; 881  :         case SR_CPU_FPR_23:
; 882  :         case SR_CPU_FPR_24:
; 883  :         case SR_CPU_FPR_25:
; 884  :         case SR_CPU_FPR_26:
; 885  :         case SR_CPU_FPR_27:
; 886  :         case SR_CPU_FPR_28:
; 887  :         case SR_CPU_FPR_29:
; 888  :         case SR_CPU_FPR_30:
; 889  :         case SR_CPU_FPR_31:
; 890  :             SR_NULL_REGS_CHECK(regs);

  02011	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  0201a	75 05		 jne	 SHORT $LN726@resume_cmd
  0201c	e9 58 24 00 00	 jmp	 $sr_null_regs_exit$1021
$LN726@resume_cmd:

; 891  :             i = key - SR_CPU_FPR;

  02021	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  02028	2d 80 00 e2 ac	 sub	 eax, -1394474880	; ace20080H
  0202d	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN219@resume_cmd:

; 892  :             SR_READ_VALUE(file, len, &regs->fpr[i], sizeof(regs->fpr[0]));

  02031	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  02036	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0203e	48 8d 84 81 40
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax*4+832]
  02046	41 b9 04 00 00
	00		 mov	 r9d, 4
  0204c	4c 8b c0	 mov	 r8, rax
  0204f	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02053	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02058	e8 00 00 00 00	 call	 sr_read_value
  0205d	85 c0		 test	 eax, eax
  0205f	74 0a		 je	 SHORT $LN727@resume_cmd
  02061	b8 ff ff ff ff	 mov	 eax, -1
  02066	e9 c4 24 00 00	 jmp	 $LN1@resume_cmd
$LN727@resume_cmd:
  0206b	33 c0		 xor	 eax, eax
  0206d	85 c0		 test	 eax, eax
  0206f	75 c0		 jne	 SHORT $LN219@resume_cmd

; 893  :             break;

  02071	e9 6b 1e 00 00	 jmp	 $LN34@resume_cmd
$LN728@resume_cmd:

; 894  : 
; 895  :         case SR_CPU_FPC:
; 896  :             SR_NULL_REGS_CHECK(regs);

  02076	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  0207f	75 05		 jne	 SHORT $LN729@resume_cmd
  02081	e9 f3 23 00 00	 jmp	 $sr_null_regs_exit$1021
$LN729@resume_cmd:
$LN222@resume_cmd:

; 897  :             SR_READ_VALUE(file, len, &regs->fpc, sizeof(regs->fpc));

  02086	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0208e	48 05 c0 03 00
	00		 add	 rax, 960		; 000003c0H
  02094	41 b9 04 00 00
	00		 mov	 r9d, 4
  0209a	4c 8b c0	 mov	 r8, rax
  0209d	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  020a1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  020a6	e8 00 00 00 00	 call	 sr_read_value
  020ab	85 c0		 test	 eax, eax
  020ad	74 0a		 je	 SHORT $LN730@resume_cmd
  020af	b8 ff ff ff ff	 mov	 eax, -1
  020b4	e9 76 24 00 00	 jmp	 $LN1@resume_cmd
$LN730@resume_cmd:
  020b9	33 c0		 xor	 eax, eax
  020bb	85 c0		 test	 eax, eax
  020bd	75 c7		 jne	 SHORT $LN222@resume_cmd

; 898  :             break;

  020bf	e9 1d 1e 00 00	 jmp	 $LN34@resume_cmd
$LN731@resume_cmd:

; 899  : 
; 900  :         case SR_CPU_DXC:
; 901  :             SR_NULL_REGS_CHECK(regs);

  020c4	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  020cd	75 05		 jne	 SHORT $LN732@resume_cmd
  020cf	e9 a5 23 00 00	 jmp	 $sr_null_regs_exit$1021
$LN732@resume_cmd:
$LN225@resume_cmd:

; 902  :             SR_READ_VALUE(file, len, &regs->dxc, sizeof(regs->dxc));

  020d4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  020dc	48 05 08 07 00
	00		 add	 rax, 1800		; 00000708H
  020e2	41 b9 04 00 00
	00		 mov	 r9d, 4
  020e8	4c 8b c0	 mov	 r8, rax
  020eb	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  020ef	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  020f4	e8 00 00 00 00	 call	 sr_read_value
  020f9	85 c0		 test	 eax, eax
  020fb	74 0a		 je	 SHORT $LN733@resume_cmd
  020fd	b8 ff ff ff ff	 mov	 eax, -1
  02102	e9 28 24 00 00	 jmp	 $LN1@resume_cmd
$LN733@resume_cmd:
  02107	33 c0		 xor	 eax, eax
  02109	85 c0		 test	 eax, eax
  0210b	75 c7		 jne	 SHORT $LN225@resume_cmd

; 903  :             break;

  0210d	e9 cf 1d 00 00	 jmp	 $LN34@resume_cmd
$LN734@resume_cmd:

; 904  : 
; 905  :         case SR_CPU_MC:
; 906  :             SR_NULL_REGS_CHECK(regs);

  02112	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  0211b	75 05		 jne	 SHORT $LN735@resume_cmd
  0211d	e9 57 23 00 00	 jmp	 $sr_null_regs_exit$1021
$LN735@resume_cmd:
$LN228@resume_cmd:

; 907  :             SR_READ_VALUE(file, len, &regs->mc, sizeof(regs->mc));

  02122	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0212a	48 05 10 07 00
	00		 add	 rax, 1808		; 00000710H
  02130	41 b9 08 00 00
	00		 mov	 r9d, 8
  02136	4c 8b c0	 mov	 r8, rax
  02139	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0213d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02142	e8 00 00 00 00	 call	 sr_read_value
  02147	85 c0		 test	 eax, eax
  02149	74 0a		 je	 SHORT $LN736@resume_cmd
  0214b	b8 ff ff ff ff	 mov	 eax, -1
  02150	e9 da 23 00 00	 jmp	 $LN1@resume_cmd
$LN736@resume_cmd:
  02155	33 c0		 xor	 eax, eax
  02157	85 c0		 test	 eax, eax
  02159	75 c7		 jne	 SHORT $LN228@resume_cmd

; 908  :             break;

  0215b	e9 81 1d 00 00	 jmp	 $LN34@resume_cmd
$LN737@resume_cmd:

; 909  : 
; 910  :         case SR_CPU_EA:
; 911  :             SR_NULL_REGS_CHECK(regs);

  02160	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02169	75 05		 jne	 SHORT $LN738@resume_cmd
  0216b	e9 09 23 00 00	 jmp	 $sr_null_regs_exit$1021
$LN738@resume_cmd:
$LN231@resume_cmd:

; 912  :             SR_READ_VALUE(file, len, &regs->ea, sizeof(regs->ea));

  02170	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  02178	48 05 18 07 00
	00		 add	 rax, 1816		; 00000718H
  0217e	41 b9 08 00 00
	00		 mov	 r9d, 8
  02184	4c 8b c0	 mov	 r8, rax
  02187	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0218b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02190	e8 00 00 00 00	 call	 sr_read_value
  02195	85 c0		 test	 eax, eax
  02197	74 0a		 je	 SHORT $LN739@resume_cmd
  02199	b8 ff ff ff ff	 mov	 eax, -1
  0219e	e9 8c 23 00 00	 jmp	 $LN1@resume_cmd
$LN739@resume_cmd:
  021a3	33 c0		 xor	 eax, eax
  021a5	85 c0		 test	 eax, eax
  021a7	75 c7		 jne	 SHORT $LN231@resume_cmd

; 913  :             break;

  021a9	e9 33 1d 00 00	 jmp	 $LN34@resume_cmd
$LN740@resume_cmd:

; 914  : 
; 915  :         case SR_CPU_PTIMER:
; 916  :             SR_NULL_REGS_CHECK(regs);

  021ae	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  021b7	75 05		 jne	 SHORT $LN741@resume_cmd
  021b9	e9 bb 22 00 00	 jmp	 $sr_null_regs_exit$1021
$LN741@resume_cmd:
$LN234@resume_cmd:

; 917  :             SR_READ_VALUE(file, len, &dreg, sizeof(S64));

  021be	41 b9 08 00 00
	00		 mov	 r9d, 8
  021c4	4c 8d 84 24 88
	01 00 00	 lea	 r8, QWORD PTR dreg$[rsp]
  021cc	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  021d0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  021d5	e8 00 00 00 00	 call	 sr_read_value
  021da	85 c0		 test	 eax, eax
  021dc	74 0a		 je	 SHORT $LN742@resume_cmd
  021de	b8 ff ff ff ff	 mov	 eax, -1
  021e3	e9 47 23 00 00	 jmp	 $LN1@resume_cmd
$LN742@resume_cmd:
  021e8	33 c0		 xor	 eax, eax
  021ea	85 c0		 test	 eax, eax
  021ec	75 d0		 jne	 SHORT $LN234@resume_cmd

; 918  :             set_cpu_timer(regs, dreg);

  021ee	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR dreg$[rsp]
  021f6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  021fe	e8 00 00 00 00	 call	 set_cpu_timer

; 919  :             break;

  02203	e9 d9 1c 00 00	 jmp	 $LN34@resume_cmd
$LN743@resume_cmd:

; 920  : 
; 921  :         case SR_CPU_CLKC:
; 922  :             SR_NULL_REGS_CHECK(regs);

  02208	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02211	75 05		 jne	 SHORT $LN744@resume_cmd
  02213	e9 61 22 00 00	 jmp	 $sr_null_regs_exit$1021
$LN744@resume_cmd:
$LN237@resume_cmd:

; 923  :             SR_READ_VALUE(file, len, &regs->clkc, sizeof(regs->clkc));

  02218	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  02220	48 05 48 07 00
	00		 add	 rax, 1864		; 00000748H
  02226	41 b9 08 00 00
	00		 mov	 r9d, 8
  0222c	4c 8b c0	 mov	 r8, rax
  0222f	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02233	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02238	e8 00 00 00 00	 call	 sr_read_value
  0223d	85 c0		 test	 eax, eax
  0223f	74 0a		 je	 SHORT $LN745@resume_cmd
  02241	b8 ff ff ff ff	 mov	 eax, -1
  02246	e9 e4 22 00 00	 jmp	 $LN1@resume_cmd
$LN745@resume_cmd:
  0224b	33 c0		 xor	 eax, eax
  0224d	85 c0		 test	 eax, eax
  0224f	75 c7		 jne	 SHORT $LN237@resume_cmd

; 924  :             break;

  02251	e9 8b 1c 00 00	 jmp	 $LN34@resume_cmd
$LN746@resume_cmd:

; 925  : 
; 926  :         case SR_CPU_CHANSET:
; 927  :             SR_NULL_REGS_CHECK(regs);

  02256	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  0225f	75 05		 jne	 SHORT $LN747@resume_cmd
  02261	e9 13 22 00 00	 jmp	 $sr_null_regs_exit$1021
$LN747@resume_cmd:
$LN240@resume_cmd:

; 928  :             SR_READ_VALUE(file, len, &regs->chanset, sizeof(regs->chanset));

  02266	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0226e	48 05 38 08 00
	00		 add	 rax, 2104		; 00000838H
  02274	41 b9 02 00 00
	00		 mov	 r9d, 2
  0227a	4c 8b c0	 mov	 r8, rax
  0227d	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02281	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02286	e8 00 00 00 00	 call	 sr_read_value
  0228b	85 c0		 test	 eax, eax
  0228d	74 0a		 je	 SHORT $LN748@resume_cmd
  0228f	b8 ff ff ff ff	 mov	 eax, -1
  02294	e9 96 22 00 00	 jmp	 $LN1@resume_cmd
$LN748@resume_cmd:
  02299	33 c0		 xor	 eax, eax
  0229b	85 c0		 test	 eax, eax
  0229d	75 c7		 jne	 SHORT $LN240@resume_cmd

; 929  :             break;

  0229f	e9 3d 1c 00 00	 jmp	 $LN34@resume_cmd
$LN749@resume_cmd:

; 930  : 
; 931  :         case SR_CPU_TODPR:
; 932  :             SR_NULL_REGS_CHECK(regs);

  022a4	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  022ad	75 05		 jne	 SHORT $LN750@resume_cmd
  022af	e9 c5 21 00 00	 jmp	 $sr_null_regs_exit$1021
$LN750@resume_cmd:
$LN243@resume_cmd:

; 933  :             SR_READ_VALUE(file, len, &regs->todpr, sizeof(regs->todpr));

  022b4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  022bc	48 05 58 07 00
	00		 add	 rax, 1880		; 00000758H
  022c2	41 b9 04 00 00
	00		 mov	 r9d, 4
  022c8	4c 8b c0	 mov	 r8, rax
  022cb	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  022cf	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  022d4	e8 00 00 00 00	 call	 sr_read_value
  022d9	85 c0		 test	 eax, eax
  022db	74 0a		 je	 SHORT $LN751@resume_cmd
  022dd	b8 ff ff ff ff	 mov	 eax, -1
  022e2	e9 48 22 00 00	 jmp	 $LN1@resume_cmd
$LN751@resume_cmd:
  022e7	33 c0		 xor	 eax, eax
  022e9	85 c0		 test	 eax, eax
  022eb	75 c7		 jne	 SHORT $LN243@resume_cmd

; 934  :             break;

  022ed	e9 ef 1b 00 00	 jmp	 $LN34@resume_cmd
$LN752@resume_cmd:

; 935  : 
; 936  :         case SR_CPU_MONCLASS:
; 937  :             SR_NULL_REGS_CHECK(regs);

  022f2	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  022fb	75 05		 jne	 SHORT $LN753@resume_cmd
  022fd	e9 77 21 00 00	 jmp	 $sr_null_regs_exit$1021
$LN753@resume_cmd:
$LN246@resume_cmd:

; 938  :             SR_READ_VALUE(file, len, &regs->monclass, sizeof(regs->monclass));

  02302	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0230a	48 05 3a 08 00
	00		 add	 rax, 2106		; 0000083aH
  02310	41 b9 02 00 00
	00		 mov	 r9d, 2
  02316	4c 8b c0	 mov	 r8, rax
  02319	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0231d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02322	e8 00 00 00 00	 call	 sr_read_value
  02327	85 c0		 test	 eax, eax
  02329	74 0a		 je	 SHORT $LN754@resume_cmd
  0232b	b8 ff ff ff ff	 mov	 eax, -1
  02330	e9 fa 21 00 00	 jmp	 $LN1@resume_cmd
$LN754@resume_cmd:
  02335	33 c0		 xor	 eax, eax
  02337	85 c0		 test	 eax, eax
  02339	75 c7		 jne	 SHORT $LN246@resume_cmd

; 939  :             break;

  0233b	e9 a1 1b 00 00	 jmp	 $LN34@resume_cmd
$LN755@resume_cmd:

; 940  : 
; 941  :         case SR_CPU_EXCARID:
; 942  :             SR_NULL_REGS_CHECK(regs);

  02340	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02349	75 05		 jne	 SHORT $LN756@resume_cmd
  0234b	e9 29 21 00 00	 jmp	 $sr_null_regs_exit$1021
$LN756@resume_cmd:
$LN249@resume_cmd:

; 943  :             SR_READ_VALUE(file, len, &regs->excarid, sizeof(regs->excarid));

  02350	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  02358	48 05 3e 08 00
	00		 add	 rax, 2110		; 0000083eH
  0235e	41 b9 01 00 00
	00		 mov	 r9d, 1
  02364	4c 8b c0	 mov	 r8, rax
  02367	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0236b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02370	e8 00 00 00 00	 call	 sr_read_value
  02375	85 c0		 test	 eax, eax
  02377	74 0a		 je	 SHORT $LN757@resume_cmd
  02379	b8 ff ff ff ff	 mov	 eax, -1
  0237e	e9 ac 21 00 00	 jmp	 $LN1@resume_cmd
$LN757@resume_cmd:
  02383	33 c0		 xor	 eax, eax
  02385	85 c0		 test	 eax, eax
  02387	75 c7		 jne	 SHORT $LN249@resume_cmd

; 944  :             break;

  02389	e9 53 1b 00 00	 jmp	 $LN34@resume_cmd
$LN758@resume_cmd:

; 945  : 
; 946  :         case SR_CPU_BEAR:
; 947  :             SR_NULL_REGS_CHECK(regs);

  0238e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02397	75 05		 jne	 SHORT $LN759@resume_cmd
  02399	e9 db 20 00 00	 jmp	 $sr_null_regs_exit$1021
$LN759@resume_cmd:
$LN252@resume_cmd:

; 948  :             SR_READ_VALUE(file, len, &regs->bear, sizeof(regs->bear));

  0239e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  023a6	48 05 18 02 00
	00		 add	 rax, 536		; 00000218H
  023ac	41 b9 08 00 00
	00		 mov	 r9d, 8
  023b2	4c 8b c0	 mov	 r8, rax
  023b5	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  023b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  023be	e8 00 00 00 00	 call	 sr_read_value
  023c3	85 c0		 test	 eax, eax
  023c5	74 0a		 je	 SHORT $LN760@resume_cmd
  023c7	b8 ff ff ff ff	 mov	 eax, -1
  023cc	e9 5e 21 00 00	 jmp	 $LN1@resume_cmd
$LN760@resume_cmd:
  023d1	33 c0		 xor	 eax, eax
  023d3	85 c0		 test	 eax, eax
  023d5	75 c7		 jne	 SHORT $LN252@resume_cmd

; 949  :             break;

  023d7	e9 05 1b 00 00	 jmp	 $LN34@resume_cmd
$LN761@resume_cmd:

; 950  : 
; 951  :         case SR_CPU_OPNDRID:
; 952  :             SR_NULL_REGS_CHECK(regs);

  023dc	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  023e5	75 05		 jne	 SHORT $LN762@resume_cmd
  023e7	e9 8d 20 00 00	 jmp	 $sr_null_regs_exit$1021
$LN762@resume_cmd:
$LN255@resume_cmd:

; 953  :             SR_READ_VALUE(file, len, &regs->opndrid, sizeof(regs->opndrid));

  023ec	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  023f4	48 05 3f 08 00
	00		 add	 rax, 2111		; 0000083fH
  023fa	41 b9 01 00 00
	00		 mov	 r9d, 1
  02400	4c 8b c0	 mov	 r8, rax
  02403	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02407	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0240c	e8 00 00 00 00	 call	 sr_read_value
  02411	85 c0		 test	 eax, eax
  02413	74 0a		 je	 SHORT $LN763@resume_cmd
  02415	b8 ff ff ff ff	 mov	 eax, -1
  0241a	e9 10 21 00 00	 jmp	 $LN1@resume_cmd
$LN763@resume_cmd:
  0241f	33 c0		 xor	 eax, eax
  02421	85 c0		 test	 eax, eax
  02423	75 c7		 jne	 SHORT $LN255@resume_cmd

; 954  :             break;

  02425	e9 b7 1a 00 00	 jmp	 $LN34@resume_cmd
$LN764@resume_cmd:

; 955  : 
; 956  :         case SR_CPU_CHECKSTOP:
; 957  :             SR_NULL_REGS_CHECK(regs);

  0242a	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02433	75 05		 jne	 SHORT $LN765@resume_cmd
  02435	e9 3f 20 00 00	 jmp	 $sr_null_regs_exit$1021
$LN765@resume_cmd:
$LN258@resume_cmd:

; 958  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  0243a	41 b9 04 00 00
	00		 mov	 r9d, 4
  02440	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  02445	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02449	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0244e	e8 00 00 00 00	 call	 sr_read_value
  02453	85 c0		 test	 eax, eax
  02455	74 0a		 je	 SHORT $LN766@resume_cmd
  02457	b8 ff ff ff ff	 mov	 eax, -1
  0245c	e9 ce 20 00 00	 jmp	 $LN1@resume_cmd
$LN766@resume_cmd:
  02461	33 c0		 xor	 eax, eax
  02463	85 c0		 test	 eax, eax
  02465	75 d3		 jne	 SHORT $LN258@resume_cmd

; 959  :             regs->checkstop = rc;

  02467	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  0246b	83 e0 01	 and	 eax, 1
  0246e	c1 e0 05	 shl	 eax, 5
  02471	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02479	8b 89 28 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1832]
  0247f	83 e1 df	 and	 ecx, -33		; ffffffdfH
  02482	0b c8		 or	 ecx, eax
  02484	8b c1		 mov	 eax, ecx
  02486	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0248e	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 960  :             break;

  02494	e9 48 1a 00 00	 jmp	 $LN34@resume_cmd
$LN767@resume_cmd:

; 961  : 
; 962  :         case SR_CPU_HOSTINT:
; 963  :             SR_NULL_REGS_CHECK(regs);

  02499	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  024a2	75 05		 jne	 SHORT $LN768@resume_cmd
  024a4	e9 d0 1f 00 00	 jmp	 $sr_null_regs_exit$1021
$LN768@resume_cmd:
$LN261@resume_cmd:

; 964  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  024a9	41 b9 04 00 00
	00		 mov	 r9d, 4
  024af	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  024b4	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  024b8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  024bd	e8 00 00 00 00	 call	 sr_read_value
  024c2	85 c0		 test	 eax, eax
  024c4	74 0a		 je	 SHORT $LN769@resume_cmd
  024c6	b8 ff ff ff ff	 mov	 eax, -1
  024cb	e9 5f 20 00 00	 jmp	 $LN1@resume_cmd
$LN769@resume_cmd:
  024d0	33 c0		 xor	 eax, eax
  024d2	85 c0		 test	 eax, eax
  024d4	75 d3		 jne	 SHORT $LN261@resume_cmd

; 965  :             regs->hostint = rc;

  024d6	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  024da	83 e0 01	 and	 eax, 1
  024dd	c1 e0 06	 shl	 eax, 6
  024e0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  024e8	8b 89 28 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1832]
  024ee	83 e1 bf	 and	 ecx, -65		; ffffffbfH
  024f1	0b c8		 or	 ecx, eax
  024f3	8b c1		 mov	 eax, ecx
  024f5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  024fd	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 966  :             break;

  02503	e9 d9 19 00 00	 jmp	 $LN34@resume_cmd
$LN770@resume_cmd:

; 967  : 
; 968  :         case SR_CPU_LOADSTATE:
; 969  :             SR_NULL_REGS_CHECK(regs);

  02508	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02511	75 05		 jne	 SHORT $LN771@resume_cmd
  02513	e9 61 1f 00 00	 jmp	 $sr_null_regs_exit$1021
$LN771@resume_cmd:
$LN264@resume_cmd:

; 970  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  02518	41 b9 04 00 00
	00		 mov	 r9d, 4
  0251e	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  02523	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02527	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0252c	e8 00 00 00 00	 call	 sr_read_value
  02531	85 c0		 test	 eax, eax
  02533	74 0a		 je	 SHORT $LN772@resume_cmd
  02535	b8 ff ff ff ff	 mov	 eax, -1
  0253a	e9 f0 1f 00 00	 jmp	 $LN1@resume_cmd
$LN772@resume_cmd:
  0253f	33 c0		 xor	 eax, eax
  02541	85 c0		 test	 eax, eax
  02543	75 d3		 jne	 SHORT $LN264@resume_cmd

; 971  :             regs->loadstate = rc;

  02545	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  02549	83 e0 01	 and	 eax, 1
  0254c	c1 e0 0c	 shl	 eax, 12
  0254f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02557	8b 89 28 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1832]
  0255d	0f ba f1 0c	 btr	 ecx, 12
  02561	0b c8		 or	 ecx, eax
  02563	8b c1		 mov	 eax, ecx
  02565	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0256d	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 972  :             break;

  02573	e9 69 19 00 00	 jmp	 $LN34@resume_cmd
$LN773@resume_cmd:

; 973  : 
; 974  :         case SR_CPU_INVALIDATE:
; 975  :             SR_NULL_REGS_CHECK(regs);

  02578	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02581	75 05		 jne	 SHORT $LN774@resume_cmd
  02583	e9 f1 1e 00 00	 jmp	 $sr_null_regs_exit$1021
$LN774@resume_cmd:
$LN267@resume_cmd:

; 976  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  02588	41 b9 04 00 00
	00		 mov	 r9d, 4
  0258e	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  02593	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02597	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0259c	e8 00 00 00 00	 call	 sr_read_value
  025a1	85 c0		 test	 eax, eax
  025a3	74 0a		 je	 SHORT $LN775@resume_cmd
  025a5	b8 ff ff ff ff	 mov	 eax, -1
  025aa	e9 80 1f 00 00	 jmp	 $LN1@resume_cmd
$LN775@resume_cmd:
  025af	33 c0		 xor	 eax, eax
  025b1	85 c0		 test	 eax, eax
  025b3	75 d3		 jne	 SHORT $LN267@resume_cmd

; 977  :             regs->invalidate = rc;

  025b5	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  025b9	83 e0 01	 and	 eax, 1
  025bc	c1 e0 0e	 shl	 eax, 14
  025bf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  025c7	8b 89 28 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1832]
  025cd	0f ba f1 0e	 btr	 ecx, 14
  025d1	0b c8		 or	 ecx, eax
  025d3	8b c1		 mov	 eax, ecx
  025d5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  025dd	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 978  :             break;

  025e3	e9 f9 18 00 00	 jmp	 $LN34@resume_cmd
$LN776@resume_cmd:

; 979  : 
; 980  :         case SR_CPU_SIGP_RESET:
; 981  :             SR_NULL_REGS_CHECK(regs);

  025e8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  025f1	75 05		 jne	 SHORT $LN777@resume_cmd
  025f3	e9 81 1e 00 00	 jmp	 $sr_null_regs_exit$1021
$LN777@resume_cmd:
$LN270@resume_cmd:

; 982  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  025f8	41 b9 04 00 00
	00		 mov	 r9d, 4
  025fe	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  02603	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02607	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0260c	e8 00 00 00 00	 call	 sr_read_value
  02611	85 c0		 test	 eax, eax
  02613	74 0a		 je	 SHORT $LN778@resume_cmd
  02615	b8 ff ff ff ff	 mov	 eax, -1
  0261a	e9 10 1f 00 00	 jmp	 $LN1@resume_cmd
$LN778@resume_cmd:
  0261f	33 c0		 xor	 eax, eax
  02621	85 c0		 test	 eax, eax
  02623	75 d3		 jne	 SHORT $LN270@resume_cmd

; 983  :             regs->sigp_reset = rc;

  02625	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  02629	83 e0 01	 and	 eax, 1
  0262c	c1 e0 13	 shl	 eax, 19
  0262f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02637	8b 89 28 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1832]
  0263d	0f ba f1 13	 btr	 ecx, 19
  02641	0b c8		 or	 ecx, eax
  02643	8b c1		 mov	 eax, ecx
  02645	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0264d	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 984  :             break;

  02653	e9 89 18 00 00	 jmp	 $LN34@resume_cmd
$LN779@resume_cmd:

; 985  : 
; 986  :         case SR_CPU_SIGP_INI_RESET:
; 987  :             SR_NULL_REGS_CHECK(regs);

  02658	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02661	75 05		 jne	 SHORT $LN780@resume_cmd
  02663	e9 11 1e 00 00	 jmp	 $sr_null_regs_exit$1021
$LN780@resume_cmd:
$LN273@resume_cmd:

; 988  :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  02668	41 b9 04 00 00
	00		 mov	 r9d, 4
  0266e	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  02673	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02677	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0267c	e8 00 00 00 00	 call	 sr_read_value
  02681	85 c0		 test	 eax, eax
  02683	74 0a		 je	 SHORT $LN781@resume_cmd
  02685	b8 ff ff ff ff	 mov	 eax, -1
  0268a	e9 a0 1e 00 00	 jmp	 $LN1@resume_cmd
$LN781@resume_cmd:
  0268f	33 c0		 xor	 eax, eax
  02691	85 c0		 test	 eax, eax
  02693	75 d3		 jne	 SHORT $LN273@resume_cmd

; 989  :             regs->sigp_ini_reset = rc;

  02695	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  02699	83 e0 01	 and	 eax, 1
  0269c	c1 e0 14	 shl	 eax, 20
  0269f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  026a7	8b 89 28 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1832]
  026ad	0f ba f1 14	 btr	 ecx, 20
  026b1	0b c8		 or	 ecx, eax
  026b3	8b c1		 mov	 eax, ecx
  026b5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  026bd	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 990  :             break;

  026c3	e9 19 18 00 00	 jmp	 $LN34@resume_cmd
$LN782@resume_cmd:

; 991  : 
; 992  :         case SR_CPU_INTS_STATE:
; 993  :             SR_NULL_REGS_CHECK(regs);

  026c8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  026d1	75 05		 jne	 SHORT $LN783@resume_cmd
  026d3	e9 a1 1d 00 00	 jmp	 $sr_null_regs_exit$1021
$LN783@resume_cmd:
$LN276@resume_cmd:

; 994  :             SR_READ_VALUE(file, len, &regs->ints_state, sizeof(regs->ints_state));

  026d8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  026e0	48 83 c0 48	 add	 rax, 72			; 00000048H
  026e4	41 b9 04 00 00
	00		 mov	 r9d, 4
  026ea	4c 8b c0	 mov	 r8, rax
  026ed	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  026f1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  026f6	e8 00 00 00 00	 call	 sr_read_value
  026fb	85 c0		 test	 eax, eax
  026fd	74 0a		 je	 SHORT $LN784@resume_cmd
  026ff	b8 ff ff ff ff	 mov	 eax, -1
  02704	e9 26 1e 00 00	 jmp	 $LN1@resume_cmd
$LN784@resume_cmd:
  02709	33 c0		 xor	 eax, eax
  0270b	85 c0		 test	 eax, eax
  0270d	75 c9		 jne	 SHORT $LN276@resume_cmd
$LN279@resume_cmd:

; 995  :             /* Force CPU to examine the interrupt state */
; 996  :             ON_IC_INTERRUPT(regs);

  0270f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  02717	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0271a	0f ba e8 1f	 bts	 eax, 31
  0271e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02726	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  02729	33 c0		 xor	 eax, eax
  0272b	85 c0		 test	 eax, eax
  0272d	75 e0		 jne	 SHORT $LN279@resume_cmd

; 997  :             break;

  0272f	e9 ad 17 00 00	 jmp	 $LN34@resume_cmd
$LN785@resume_cmd:

; 998  : 
; 999  :         case SR_CPU_INTS_MASK:
; 1000 :             SR_NULL_REGS_CHECK(regs);

  02734	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  0273d	75 05		 jne	 SHORT $LN786@resume_cmd
  0273f	e9 35 1d 00 00	 jmp	 $sr_null_regs_exit$1021
$LN786@resume_cmd:
$LN282@resume_cmd:

; 1001 :             SR_READ_VALUE(file, len, &regs->ints_mask, sizeof(regs->ints_mask));

  02744	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0274c	48 83 c0 4c	 add	 rax, 76			; 0000004cH
  02750	41 b9 04 00 00
	00		 mov	 r9d, 4
  02756	4c 8b c0	 mov	 r8, rax
  02759	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0275d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02762	e8 00 00 00 00	 call	 sr_read_value
  02767	85 c0		 test	 eax, eax
  02769	74 0a		 je	 SHORT $LN787@resume_cmd
  0276b	b8 ff ff ff ff	 mov	 eax, -1
  02770	e9 ba 1d 00 00	 jmp	 $LN1@resume_cmd
$LN787@resume_cmd:
  02775	33 c0		 xor	 eax, eax
  02777	85 c0		 test	 eax, eax
  02779	75 c9		 jne	 SHORT $LN282@resume_cmd

; 1002 :             break;

  0277b	e9 61 17 00 00	 jmp	 $LN34@resume_cmd
$LN788@resume_cmd:
$LN789@resume_cmd:
$LN790@resume_cmd:
$LN791@resume_cmd:
$LN792@resume_cmd:
$LN793@resume_cmd:
$LN794@resume_cmd:
$LN795@resume_cmd:
$LN796@resume_cmd:
$LN797@resume_cmd:
$LN798@resume_cmd:
$LN799@resume_cmd:
$LN800@resume_cmd:
$LN801@resume_cmd:
$LN802@resume_cmd:
$LN803@resume_cmd:
$LN804@resume_cmd:
$LN805@resume_cmd:
$LN806@resume_cmd:
$LN807@resume_cmd:
$LN808@resume_cmd:
$LN809@resume_cmd:
$LN810@resume_cmd:
$LN811@resume_cmd:
$LN812@resume_cmd:
$LN813@resume_cmd:
$LN814@resume_cmd:
$LN815@resume_cmd:
$LN816@resume_cmd:
$LN817@resume_cmd:
$LN818@resume_cmd:
$LN819@resume_cmd:

; 1003 : 
; 1004 :         case SR_CPU_MALFCPU_0:
; 1005 :         case SR_CPU_MALFCPU_1:
; 1006 :         case SR_CPU_MALFCPU_2:
; 1007 :         case SR_CPU_MALFCPU_3:
; 1008 :         case SR_CPU_MALFCPU_4:
; 1009 :         case SR_CPU_MALFCPU_5:
; 1010 :         case SR_CPU_MALFCPU_6:
; 1011 :         case SR_CPU_MALFCPU_7:
; 1012 :         case SR_CPU_MALFCPU_8:
; 1013 :         case SR_CPU_MALFCPU_9:
; 1014 :         case SR_CPU_MALFCPU_10:
; 1015 :         case SR_CPU_MALFCPU_11:
; 1016 :         case SR_CPU_MALFCPU_12:
; 1017 :         case SR_CPU_MALFCPU_13:
; 1018 :         case SR_CPU_MALFCPU_14:
; 1019 :         case SR_CPU_MALFCPU_15:
; 1020 :         case SR_CPU_MALFCPU_16:
; 1021 :         case SR_CPU_MALFCPU_17:
; 1022 :         case SR_CPU_MALFCPU_18:
; 1023 :         case SR_CPU_MALFCPU_19:
; 1024 :         case SR_CPU_MALFCPU_20:
; 1025 :         case SR_CPU_MALFCPU_21:
; 1026 :         case SR_CPU_MALFCPU_22:
; 1027 :         case SR_CPU_MALFCPU_23:
; 1028 :         case SR_CPU_MALFCPU_24:
; 1029 :         case SR_CPU_MALFCPU_25:
; 1030 :         case SR_CPU_MALFCPU_26:
; 1031 :         case SR_CPU_MALFCPU_27:
; 1032 :         case SR_CPU_MALFCPU_28:
; 1033 :         case SR_CPU_MALFCPU_29:
; 1034 :         case SR_CPU_MALFCPU_30:
; 1035 :         case SR_CPU_MALFCPU_31:
; 1036 :             SR_NULL_REGS_CHECK(regs);

  02780	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02789	75 05		 jne	 SHORT $LN820@resume_cmd
  0278b	e9 e9 1c 00 00	 jmp	 $sr_null_regs_exit$1021
$LN820@resume_cmd:

; 1037 :             i = key - SR_CPU_MALFCPU;

  02790	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  02797	2d 20 01 e2 ac	 sub	 eax, -1394474720	; ace20120H
  0279c	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax

; 1038 :             if (i < sysblk.maxcpu)

  027a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  027a7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  027ad	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  027b1	7d 40		 jge	 SHORT $LN821@resume_cmd
$LN285@resume_cmd:

; 1039 :                 SR_READ_VALUE(file, len, &regs->malfcpu[i], sizeof(regs->malfcpu[0]));

  027b3	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  027b8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  027c0	48 8d 84 01 00
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+256]
  027c8	41 b9 01 00 00
	00		 mov	 r9d, 1
  027ce	4c 8b c0	 mov	 r8, rax
  027d1	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  027d5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  027da	e8 00 00 00 00	 call	 sr_read_value
  027df	85 c0		 test	 eax, eax
  027e1	74 0a		 je	 SHORT $LN822@resume_cmd
  027e3	b8 ff ff ff ff	 mov	 eax, -1
  027e8	e9 42 1d 00 00	 jmp	 $LN1@resume_cmd
$LN822@resume_cmd:
  027ed	33 c0		 xor	 eax, eax
  027ef	85 c0		 test	 eax, eax
  027f1	75 c0		 jne	 SHORT $LN285@resume_cmd
$LN821@resume_cmd:

; 1040 :             break;

  027f3	e9 e9 16 00 00	 jmp	 $LN34@resume_cmd
$LN823@resume_cmd:
$LN824@resume_cmd:
$LN825@resume_cmd:
$LN826@resume_cmd:
$LN827@resume_cmd:
$LN828@resume_cmd:
$LN829@resume_cmd:
$LN830@resume_cmd:
$LN831@resume_cmd:
$LN832@resume_cmd:
$LN833@resume_cmd:
$LN834@resume_cmd:
$LN835@resume_cmd:
$LN836@resume_cmd:
$LN837@resume_cmd:
$LN838@resume_cmd:
$LN839@resume_cmd:
$LN840@resume_cmd:
$LN841@resume_cmd:
$LN842@resume_cmd:
$LN843@resume_cmd:
$LN844@resume_cmd:
$LN845@resume_cmd:
$LN846@resume_cmd:
$LN847@resume_cmd:
$LN848@resume_cmd:
$LN849@resume_cmd:
$LN850@resume_cmd:
$LN851@resume_cmd:
$LN852@resume_cmd:
$LN853@resume_cmd:
$LN854@resume_cmd:

; 1041 : 
; 1042 :         case SR_CPU_EMERCPU_0:
; 1043 :         case SR_CPU_EMERCPU_1:
; 1044 :         case SR_CPU_EMERCPU_2:
; 1045 :         case SR_CPU_EMERCPU_3:
; 1046 :         case SR_CPU_EMERCPU_4:
; 1047 :         case SR_CPU_EMERCPU_5:
; 1048 :         case SR_CPU_EMERCPU_6:
; 1049 :         case SR_CPU_EMERCPU_7:
; 1050 :         case SR_CPU_EMERCPU_8:
; 1051 :         case SR_CPU_EMERCPU_9:
; 1052 :         case SR_CPU_EMERCPU_10:
; 1053 :         case SR_CPU_EMERCPU_11:
; 1054 :         case SR_CPU_EMERCPU_12:
; 1055 :         case SR_CPU_EMERCPU_13:
; 1056 :         case SR_CPU_EMERCPU_14:
; 1057 :         case SR_CPU_EMERCPU_15:
; 1058 :         case SR_CPU_EMERCPU_16:
; 1059 :         case SR_CPU_EMERCPU_17:
; 1060 :         case SR_CPU_EMERCPU_18:
; 1061 :         case SR_CPU_EMERCPU_19:
; 1062 :         case SR_CPU_EMERCPU_20:
; 1063 :         case SR_CPU_EMERCPU_21:
; 1064 :         case SR_CPU_EMERCPU_22:
; 1065 :         case SR_CPU_EMERCPU_23:
; 1066 :         case SR_CPU_EMERCPU_24:
; 1067 :         case SR_CPU_EMERCPU_25:
; 1068 :         case SR_CPU_EMERCPU_26:
; 1069 :         case SR_CPU_EMERCPU_27:
; 1070 :         case SR_CPU_EMERCPU_28:
; 1071 :         case SR_CPU_EMERCPU_29:
; 1072 :         case SR_CPU_EMERCPU_30:
; 1073 :         case SR_CPU_EMERCPU_31:
; 1074 :             SR_NULL_REGS_CHECK(regs);

  027f8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR regs$[rsp], 0
  02801	75 05		 jne	 SHORT $LN855@resume_cmd
  02803	e9 71 1c 00 00	 jmp	 $sr_null_regs_exit$1021
$LN855@resume_cmd:

; 1075 :             i = key - SR_CPU_EMERCPU;

  02808	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  0280f	2d 40 01 e2 ac	 sub	 eax, -1394474688	; ace20140H
  02814	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax

; 1076 :             if (i < sysblk.maxcpu)

  02818	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0281f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02825	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  02829	7d 40		 jge	 SHORT $LN856@resume_cmd
$LN288@resume_cmd:

; 1077 :                 SR_READ_VALUE(file, len, &regs->emercpu[i], sizeof(regs->emercpu[0]));

  0282b	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  02830	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02838	48 8d 84 01 80
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+384]
  02840	41 b9 01 00 00
	00		 mov	 r9d, 1
  02846	4c 8b c0	 mov	 r8, rax
  02849	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0284d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02852	e8 00 00 00 00	 call	 sr_read_value
  02857	85 c0		 test	 eax, eax
  02859	74 0a		 je	 SHORT $LN857@resume_cmd
  0285b	b8 ff ff ff ff	 mov	 eax, -1
  02860	e9 ca 1c 00 00	 jmp	 $LN1@resume_cmd
$LN857@resume_cmd:
  02865	33 c0		 xor	 eax, eax
  02867	85 c0		 test	 eax, eax
  02869	75 c0		 jne	 SHORT $LN288@resume_cmd
$LN856@resume_cmd:

; 1078 :             break;

  0286b	e9 71 16 00 00	 jmp	 $LN34@resume_cmd
$LN858@resume_cmd:
$LN291@resume_cmd:

; 1079 : 
; 1080 :         case SR_DEV:
; 1081 :             SR_READ_VALUE(file, len, &devnum, sizeof(devnum));

  02870	41 b9 02 00 00
	00		 mov	 r9d, 2
  02876	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR devnum$[rsp]
  0287e	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02882	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02887	e8 00 00 00 00	 call	 sr_read_value
  0288c	85 c0		 test	 eax, eax
  0288e	74 0a		 je	 SHORT $LN859@resume_cmd
  02890	b8 ff ff ff ff	 mov	 eax, -1
  02895	e9 95 1c 00 00	 jmp	 $LN1@resume_cmd
$LN859@resume_cmd:
  0289a	33 c0		 xor	 eax, eax
  0289c	85 c0		 test	 eax, eax
  0289e	75 d0		 jne	 SHORT $LN291@resume_cmd
$LN294@resume_cmd:

; 1082 :             TRACE("SR: Restoring Device %4.4X...\n", devnum);

  028a0	0f b7 84 24 90
	00 00 00	 movzx	 eax, WORD PTR devnum$[rsp]
  028a8	8b d0		 mov	 edx, eax
  028aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180199
  028b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  028b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  028bd	85 c0		 test	 eax, eax
  028bf	74 16		 je	 SHORT $LN860@resume_cmd
  028c1	0f b7 84 24 90
	00 00 00	 movzx	 eax, WORD PTR devnum$[rsp]
  028c9	8b d0		 mov	 edx, eax
  028cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180201
  028d2	e8 00 00 00 00	 call	 DebuggerTrace
$LN860@resume_cmd:
  028d7	33 c0		 xor	 eax, eax
  028d9	85 c0		 test	 eax, eax
  028db	75 c3		 jne	 SHORT $LN294@resume_cmd

; 1083 :             lcss=0;

  028dd	33 c0		 xor	 eax, eax
  028df	66 89 84 24 88
	00 00 00	 mov	 WORD PTR lcss$[rsp], ax

; 1084 :             break;

  028e7	e9 f5 15 00 00	 jmp	 $LN34@resume_cmd
$LN861@resume_cmd:
$LN297@resume_cmd:

; 1085 : 
; 1086 :         case SR_DEV_LCSS:
; 1087 :             SR_READ_VALUE(file, len, &lcss, sizeof(U16));

  028ec	41 b9 02 00 00
	00		 mov	 r9d, 2
  028f2	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR lcss$[rsp]
  028fa	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  028fe	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02903	e8 00 00 00 00	 call	 sr_read_value
  02908	85 c0		 test	 eax, eax
  0290a	74 0a		 je	 SHORT $LN862@resume_cmd
  0290c	b8 ff ff ff ff	 mov	 eax, -1
  02911	e9 19 1c 00 00	 jmp	 $LN1@resume_cmd
$LN862@resume_cmd:
  02916	33 c0		 xor	 eax, eax
  02918	85 c0		 test	 eax, eax
  0291a	75 d0		 jne	 SHORT $LN297@resume_cmd

; 1088 :             break;

  0291c	e9 c0 15 00 00	 jmp	 $LN34@resume_cmd
$LN863@resume_cmd:
$LN300@resume_cmd:

; 1089 : 
; 1090 :         case SR_DEV_ARGC:
; 1091 :             SR_READ_VALUE(file, len, &devargc, sizeof(devargc));

  02921	41 b9 04 00 00
	00		 mov	 r9d, 4
  02927	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR devargc$[rsp]
  0292f	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02933	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02938	e8 00 00 00 00	 call	 sr_read_value
  0293d	85 c0		 test	 eax, eax
  0293f	74 0a		 je	 SHORT $LN864@resume_cmd
  02941	b8 ff ff ff ff	 mov	 eax, -1
  02946	e9 e4 1b 00 00	 jmp	 $LN1@resume_cmd
$LN864@resume_cmd:
  0294b	33 c0		 xor	 eax, eax
  0294d	85 c0		 test	 eax, eax
  0294f	75 d0		 jne	 SHORT $LN300@resume_cmd

; 1092 :             if (devargc > 16) devargc = 16;

  02951	83 bc 24 a0 00
	00 00 10	 cmp	 DWORD PTR devargc$[rsp], 16
  02959	7e 0b		 jle	 SHORT $LN865@resume_cmd
  0295b	c7 84 24 a0 00
	00 00 10 00 00
	00		 mov	 DWORD PTR devargc$[rsp], 16
$LN865@resume_cmd:

; 1093 :             for (i = 0; i < devargc; i++) devargv[i] = NULL;

  02966	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0296e	eb 0a		 jmp	 SHORT $LN303@resume_cmd
$LN301@resume_cmd:
  02970	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  02974	ff c0		 inc	 eax
  02976	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN303@resume_cmd:
  0297a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR devargc$[rsp]
  02981	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  02985	7d 13		 jge	 SHORT $LN302@resume_cmd
  02987	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  0298c	48 c7 84 c4 b0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR devargv$[rsp+rax*8], 0
  02998	eb d6		 jmp	 SHORT $LN301@resume_cmd
$LN302@resume_cmd:

; 1094 :             devargx = 0;

  0299a	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR devargx$[rsp], 0

; 1095 :             break;

  029a5	e9 37 15 00 00	 jmp	 $LN34@resume_cmd
$LN866@resume_cmd:
$LN306@resume_cmd:

; 1096 : 
; 1097 :         case SR_DEV_NUMCONFDEV:
; 1098 :             SR_READ_VALUE(file, len, &numconfdev, sizeof(numconfdev));

  029aa	41 b9 04 00 00
	00		 mov	 r9d, 4
  029b0	4c 8d 84 24 a4
	00 00 00	 lea	 r8, QWORD PTR numconfdev$[rsp]
  029b8	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  029bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  029c1	e8 00 00 00 00	 call	 sr_read_value
  029c6	85 c0		 test	 eax, eax
  029c8	74 0a		 je	 SHORT $LN867@resume_cmd
  029ca	b8 ff ff ff ff	 mov	 eax, -1
  029cf	e9 5b 1b 00 00	 jmp	 $LN1@resume_cmd
$LN867@resume_cmd:
  029d4	33 c0		 xor	 eax, eax
  029d6	85 c0		 test	 eax, eax
  029d8	75 d0		 jne	 SHORT $LN306@resume_cmd

; 1099 :             break;

  029da	e9 02 15 00 00	 jmp	 $LN34@resume_cmd
$LN868@resume_cmd:
$LN309@resume_cmd:

; 1100 : 
; 1101 :         case SR_DEV_ARGV:
; 1102 :             SR_READ_STRING(file, buf, len);

  029df	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  029e4	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  029ec	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  029f1	e8 00 00 00 00	 call	 sr_read_string
  029f6	85 c0		 test	 eax, eax
  029f8	74 0a		 je	 SHORT $LN869@resume_cmd
  029fa	b8 ff ff ff ff	 mov	 eax, -1
  029ff	e9 2b 1b 00 00	 jmp	 $LN1@resume_cmd
$LN869@resume_cmd:
  02a04	33 c0		 xor	 eax, eax
  02a06	85 c0		 test	 eax, eax
  02a08	75 d5		 jne	 SHORT $LN309@resume_cmd

; 1103 :             if (devargx < devargc) devargv[devargx++] = strdup(buf);

  02a0a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR devargc$[rsp]
  02a11	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR devargx$[rsp], eax
  02a18	7d 2e		 jge	 SHORT $LN870@resume_cmd
  02a1a	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  02a22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  02a28	48 63 8c 24 9c
	00 00 00	 movsxd	 rcx, DWORD PTR devargx$[rsp]
  02a30	48 89 84 cc b0
	01 00 00	 mov	 QWORD PTR devargv$[rsp+rcx*8], rax
  02a38	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR devargx$[rsp]
  02a3f	ff c0		 inc	 eax
  02a41	89 84 24 9c 00
	00 00		 mov	 DWORD PTR devargx$[rsp], eax
$LN870@resume_cmd:

; 1104 :             break;

  02a48	e9 94 14 00 00	 jmp	 $LN34@resume_cmd
$LN871@resume_cmd:
$LN312@resume_cmd:

; 1105 : 
; 1106 :         case SR_DEV_TYPNAME:
; 1107 :             SR_READ_STRING(file, buf, len);

  02a4d	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  02a52	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  02a5a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02a5f	e8 00 00 00 00	 call	 sr_read_string
  02a64	85 c0		 test	 eax, eax
  02a66	74 0a		 je	 SHORT $LN872@resume_cmd
  02a68	b8 ff ff ff ff	 mov	 eax, -1
  02a6d	e9 bd 1a 00 00	 jmp	 $LN1@resume_cmd
$LN872@resume_cmd:
  02a72	33 c0		 xor	 eax, eax
  02a74	85 c0		 test	 eax, eax
  02a76	75 d5		 jne	 SHORT $LN312@resume_cmd

; 1108 :             dev = find_device_by_devnum(lcss,devnum);

  02a78	0f b7 94 24 90
	00 00 00	 movzx	 edx, WORD PTR devnum$[rsp]
  02a80	0f b7 8c 24 88
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  02a88	e8 00 00 00 00	 call	 find_device_by_devnum
  02a8d	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 1109 :             if (dev == NULL)

  02a92	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  02a98	0f 85 c7 00 00
	00		 jne	 $LN873@resume_cmd

; 1110 :             {
; 1111 :                 if (numconfdev == 0) numconfdev = 1;

  02a9e	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR numconfdev$[rsp], 0
  02aa6	75 0b		 jne	 SHORT $LN875@resume_cmd
  02aa8	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR numconfdev$[rsp], 1
$LN875@resume_cmd:

; 1112 :                 if (attach_device (lcss, devnum, buf, devargc, devargv, numconfdev))

  02ab3	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR numconfdev$[rsp]
  02aba	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  02abe	48 8d 84 24 b0
	01 00 00	 lea	 rax, QWORD PTR devargv$[rsp]
  02ac6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02acb	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR devargc$[rsp]
  02ad3	4c 8d 84 24 00
	03 00 00	 lea	 r8, QWORD PTR buf$[rsp]
  02adb	0f b7 94 24 90
	00 00 00	 movzx	 edx, WORD PTR devnum$[rsp]
  02ae3	0f b7 8c 24 88
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  02aeb	e8 00 00 00 00	 call	 attach_device
  02af0	85 c0		 test	 eax, eax
  02af2	74 61		 je	 SHORT $LN876@resume_cmd

; 1113 :                 {
; 1114 :                     // "SR: %04X: device initialization failed"
; 1115 :                     WRMSG(HHC02015, "E", devnum);

  02af4	0f b7 84 24 90
	00 00 00	 movzx	 eax, WORD PTR devnum$[rsp]
  02afc	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv1477[rsp], eax
  02b03	b9 01 00 00 00	 mov	 ecx, 1
  02b08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02b0e	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv1477[rsp]
  02b15	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02b19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180218
  02b20	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02b25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180219
  02b2c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02b31	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02b36	41 b9 03 00 00
	00		 mov	 r9d, 3
  02b3c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180220
  02b43	ba 5b 04 00 00	 mov	 edx, 1115		; 0000045bH
  02b48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180221
  02b4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN876@resume_cmd:

; 1116 :                 }
; 1117 :                 numconfdev = 0;

  02b55	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR numconfdev$[rsp], 0

; 1118 :             }

  02b60	e9 a3 00 00 00	 jmp	 $LN874@resume_cmd
$LN873@resume_cmd:

; 1119 :             else if (strcmp(dev->typname, buf))

  02b65	48 8d 94 24 00
	03 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  02b6d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  02b72	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  02b76	e8 00 00 00 00	 call	 strcmp
  02b7b	85 c0		 test	 eax, eax
  02b7d	0f 84 85 00 00
	00		 je	 $LN877@resume_cmd

; 1120 :             {
; 1121 :                 // "SR: %04X: device type mismatch; '%s' found, '%s' expected"
; 1122 :                 WRMSG(HHC02016, "W", devnum, buf, dev->typname);

  02b83	0f b7 84 24 90
	00 00 00	 movzx	 eax, WORD PTR devnum$[rsp]
  02b8b	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv1496[rsp], eax
  02b92	b9 01 00 00 00	 mov	 ecx, 1
  02b97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02b9d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  02ba2	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  02ba6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02bab	48 8d 8c 24 00
	03 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  02bb3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02bb8	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv1496[rsp]
  02bbf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02bc3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180223
  02bca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02bcf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180224
  02bd6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02bdb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02be0	41 b9 03 00 00
	00		 mov	 r9d, 3
  02be6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180225
  02bed	ba 62 04 00 00	 mov	 edx, 1122		; 00000462H
  02bf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180226
  02bf9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1123 :                 dev = NULL;

  02bff	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR dev$[rsp], 0
$LN877@resume_cmd:
$LN874@resume_cmd:

; 1124 :             }
; 1125 :             for (i = 0; i < devargx; i++)

  02c08	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  02c10	eb 0a		 jmp	 SHORT $LN315@resume_cmd
$LN313@resume_cmd:
  02c12	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  02c16	ff c0		 inc	 eax
  02c18	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN315@resume_cmd:
  02c1c	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR devargx$[rsp]
  02c23	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  02c27	7d 36		 jge	 SHORT $LN314@resume_cmd

; 1126 :             {
; 1127 :                 if (devargv[i]) free(devargv[i]);

  02c29	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  02c2e	48 83 bc c4 b0
	01 00 00 00	 cmp	 QWORD PTR devargv$[rsp+rax*8], 0
  02c37	74 13		 je	 SHORT $LN878@resume_cmd
  02c39	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  02c3e	48 8b 8c c4 b0
	01 00 00	 mov	 rcx, QWORD PTR devargv$[rsp+rax*8]
  02c46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN878@resume_cmd:

; 1128 :                 devargv[i] = NULL;

  02c4c	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  02c51	48 c7 84 c4 b0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR devargv$[rsp+rax*8], 0

; 1129 :             }

  02c5d	eb b3		 jmp	 SHORT $LN313@resume_cmd
$LN314@resume_cmd:

; 1130 :             devnum = devargc = devargx = 0;

  02c5f	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR devargx$[rsp], 0
  02c6a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR devargx$[rsp]
  02c71	89 84 24 a0 00
	00 00		 mov	 DWORD PTR devargc$[rsp], eax
  02c78	0f b7 84 24 a0
	00 00 00	 movzx	 eax, WORD PTR devargc$[rsp]
  02c80	66 89 84 24 90
	00 00 00	 mov	 WORD PTR devnum$[rsp], ax

; 1131 :             break;

  02c88	e9 54 12 00 00	 jmp	 $LN34@resume_cmd
$LN879@resume_cmd:

; 1132 : 
; 1133 :         case SR_DEV_ORB:
; 1134 :             SR_SKIP_NULL_DEV(dev, file, len);

  02c8d	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  02c93	75 27		 jne	 SHORT $LN880@resume_cmd
$LN318@resume_cmd:
  02c95	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02c99	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02c9e	e8 00 00 00 00	 call	 sr_read_skip
  02ca3	85 c0		 test	 eax, eax
  02ca5	74 0a		 je	 SHORT $LN881@resume_cmd
  02ca7	b8 ff ff ff ff	 mov	 eax, -1
  02cac	e9 7e 18 00 00	 jmp	 $LN1@resume_cmd
$LN881@resume_cmd:
  02cb1	33 c0		 xor	 eax, eax
  02cb3	85 c0		 test	 eax, eax
  02cb5	75 de		 jne	 SHORT $LN318@resume_cmd
  02cb7	e9 25 12 00 00	 jmp	 $LN34@resume_cmd
$LN880@resume_cmd:

; 1135 :             if (len != sizeof(ORB))

  02cbc	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  02cc0	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  02cc4	0f 84 83 00 00
	00		 je	 $LN882@resume_cmd

; 1136 :             {
; 1137 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1138 :                 WRMSG(HHC02017, "E", dev->devnum, "ORB", len, (int)sizeof(ORB));

  02cca	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  02ccf	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02cd3	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv1564[rsp], eax
  02cda	b9 01 00 00 00	 mov	 ecx, 1
  02cdf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02ce5	c7 44 24 50 20
	00 00 00	 mov	 DWORD PTR [rsp+80], 32	; 00000020H
  02ced	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  02cf1	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  02cf5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180232
  02cfc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02d01	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv1564[rsp]
  02d08	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02d0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180233
  02d13	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02d18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180234
  02d1f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02d24	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02d29	41 b9 03 00 00
	00		 mov	 r9d, 3
  02d2f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180235
  02d36	ba 72 04 00 00	 mov	 edx, 1138		; 00000472H
  02d3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180236
  02d42	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1139 :                 goto sr_error_exit;

  02d48	e9 7e 17 00 00	 jmp	 $sr_error_exit$1020
$LN882@resume_cmd:
$LN321@resume_cmd:

; 1140 :             }
; 1141 :             SR_READ_BUF(file, &dev->orb, len);

  02d4d	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  02d51	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  02d56	48 81 c1 cc 02
	00 00		 add	 rcx, 716		; 000002ccH
  02d5d	44 8b c0	 mov	 r8d, eax
  02d60	48 8b d1	 mov	 rdx, rcx
  02d63	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02d68	e8 00 00 00 00	 call	 sr_read_buf
  02d6d	85 c0		 test	 eax, eax
  02d6f	74 0a		 je	 SHORT $LN883@resume_cmd
  02d71	b8 ff ff ff ff	 mov	 eax, -1
  02d76	e9 b4 17 00 00	 jmp	 $LN1@resume_cmd
$LN883@resume_cmd:
  02d7b	33 c0		 xor	 eax, eax
  02d7d	85 c0		 test	 eax, eax
  02d7f	75 cc		 jne	 SHORT $LN321@resume_cmd

; 1142 :             break;

  02d81	e9 5b 11 00 00	 jmp	 $LN34@resume_cmd
$LN884@resume_cmd:

; 1143 : 
; 1144 :         case SR_DEV_PMCW:
; 1145 :             SR_SKIP_NULL_DEV(dev, file, len);

  02d86	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  02d8c	75 27		 jne	 SHORT $LN885@resume_cmd
$LN324@resume_cmd:
  02d8e	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02d92	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02d97	e8 00 00 00 00	 call	 sr_read_skip
  02d9c	85 c0		 test	 eax, eax
  02d9e	74 0a		 je	 SHORT $LN886@resume_cmd
  02da0	b8 ff ff ff ff	 mov	 eax, -1
  02da5	e9 85 17 00 00	 jmp	 $LN1@resume_cmd
$LN886@resume_cmd:
  02daa	33 c0		 xor	 eax, eax
  02dac	85 c0		 test	 eax, eax
  02dae	75 de		 jne	 SHORT $LN324@resume_cmd
  02db0	e9 2c 11 00 00	 jmp	 $LN34@resume_cmd
$LN885@resume_cmd:

; 1146 :             if (len != sizeof(PMCW))

  02db5	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  02db9	48 83 f8 1c	 cmp	 rax, 28
  02dbd	0f 84 83 00 00
	00		 je	 $LN887@resume_cmd

; 1147 :             {
; 1148 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1149 :                 WRMSG(HHC02017, "E", dev->devnum, "PMCW", len, (int)sizeof(PMCW));

  02dc3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  02dc8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02dcc	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv1595[rsp], eax
  02dd3	b9 01 00 00 00	 mov	 ecx, 1
  02dd8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02dde	c7 44 24 50 1c
	00 00 00	 mov	 DWORD PTR [rsp+80], 28
  02de6	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  02dea	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  02dee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180242
  02df5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02dfa	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv1595[rsp]
  02e01	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02e05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180243
  02e0c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02e11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180244
  02e18	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02e1d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02e22	41 b9 03 00 00
	00		 mov	 r9d, 3
  02e28	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180245
  02e2f	ba 7d 04 00 00	 mov	 edx, 1149		; 0000047dH
  02e34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180246
  02e3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1150 :                 goto sr_error_exit;

  02e41	e9 85 16 00 00	 jmp	 $sr_error_exit$1020
$LN887@resume_cmd:
$LN327@resume_cmd:

; 1151 :             }
; 1152 :             SR_READ_BUF(file, &dev->pmcw, len);

  02e46	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  02e4a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  02e4f	48 81 c1 ec 02
	00 00		 add	 rcx, 748		; 000002ecH
  02e56	44 8b c0	 mov	 r8d, eax
  02e59	48 8b d1	 mov	 rdx, rcx
  02e5c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02e61	e8 00 00 00 00	 call	 sr_read_buf
  02e66	85 c0		 test	 eax, eax
  02e68	74 0a		 je	 SHORT $LN888@resume_cmd
  02e6a	b8 ff ff ff ff	 mov	 eax, -1
  02e6f	e9 bb 16 00 00	 jmp	 $LN1@resume_cmd
$LN888@resume_cmd:
  02e74	33 c0		 xor	 eax, eax
  02e76	85 c0		 test	 eax, eax
  02e78	75 cc		 jne	 SHORT $LN327@resume_cmd

; 1153 :             break;

  02e7a	e9 62 10 00 00	 jmp	 $LN34@resume_cmd
$LN889@resume_cmd:

; 1154 : 
; 1155 :         case SR_DEV_SCSW:
; 1156 :             SR_SKIP_NULL_DEV(dev, file, len);

  02e7f	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  02e85	75 27		 jne	 SHORT $LN890@resume_cmd
$LN330@resume_cmd:
  02e87	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02e8b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02e90	e8 00 00 00 00	 call	 sr_read_skip
  02e95	85 c0		 test	 eax, eax
  02e97	74 0a		 je	 SHORT $LN891@resume_cmd
  02e99	b8 ff ff ff ff	 mov	 eax, -1
  02e9e	e9 8c 16 00 00	 jmp	 $LN1@resume_cmd
$LN891@resume_cmd:
  02ea3	33 c0		 xor	 eax, eax
  02ea5	85 c0		 test	 eax, eax
  02ea7	75 de		 jne	 SHORT $LN330@resume_cmd
  02ea9	e9 33 10 00 00	 jmp	 $LN34@resume_cmd
$LN890@resume_cmd:

; 1157 :             if (len != sizeof(SCSW))

  02eae	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  02eb2	48 83 f8 0c	 cmp	 rax, 12
  02eb6	0f 84 83 00 00
	00		 je	 $LN892@resume_cmd

; 1158 :             {
; 1159 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1160 :                 WRMSG(HHC02017, "E", dev->devnum, "SCSW", len, (int)sizeof(SCSW));

  02ebc	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  02ec1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02ec5	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv1626[rsp], eax
  02ecc	b9 01 00 00 00	 mov	 ecx, 1
  02ed1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02ed7	c7 44 24 50 0c
	00 00 00	 mov	 DWORD PTR [rsp+80], 12
  02edf	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  02ee3	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  02ee7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180252
  02eee	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02ef3	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv1626[rsp]
  02efa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02efe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180253
  02f05	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02f0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180254
  02f11	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02f16	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02f1b	41 b9 03 00 00
	00		 mov	 r9d, 3
  02f21	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180255
  02f28	ba 88 04 00 00	 mov	 edx, 1160		; 00000488H
  02f2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180256
  02f34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1161 :                 goto sr_error_exit;

  02f3a	e9 8c 15 00 00	 jmp	 $sr_error_exit$1020
$LN892@resume_cmd:
$LN333@resume_cmd:

; 1162 :             }
; 1163 :             SR_READ_BUF(file, &dev->scsw, len);

  02f3f	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  02f43	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  02f48	48 81 c1 08 03
	00 00		 add	 rcx, 776		; 00000308H
  02f4f	44 8b c0	 mov	 r8d, eax
  02f52	48 8b d1	 mov	 rdx, rcx
  02f55	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02f5a	e8 00 00 00 00	 call	 sr_read_buf
  02f5f	85 c0		 test	 eax, eax
  02f61	74 0a		 je	 SHORT $LN893@resume_cmd
  02f63	b8 ff ff ff ff	 mov	 eax, -1
  02f68	e9 c2 15 00 00	 jmp	 $LN1@resume_cmd
$LN893@resume_cmd:
  02f6d	33 c0		 xor	 eax, eax
  02f6f	85 c0		 test	 eax, eax
  02f71	75 cc		 jne	 SHORT $LN333@resume_cmd

; 1164 :             break;

  02f73	e9 69 0f 00 00	 jmp	 $LN34@resume_cmd
$LN894@resume_cmd:

; 1165 : 
; 1166 :         case SR_DEV_PCISCSW:
; 1167 :             SR_SKIP_NULL_DEV(dev, file, len);

  02f78	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  02f7e	75 27		 jne	 SHORT $LN895@resume_cmd
$LN336@resume_cmd:
  02f80	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  02f84	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  02f89	e8 00 00 00 00	 call	 sr_read_skip
  02f8e	85 c0		 test	 eax, eax
  02f90	74 0a		 je	 SHORT $LN896@resume_cmd
  02f92	b8 ff ff ff ff	 mov	 eax, -1
  02f97	e9 93 15 00 00	 jmp	 $LN1@resume_cmd
$LN896@resume_cmd:
  02f9c	33 c0		 xor	 eax, eax
  02f9e	85 c0		 test	 eax, eax
  02fa0	75 de		 jne	 SHORT $LN336@resume_cmd
  02fa2	e9 3a 0f 00 00	 jmp	 $LN34@resume_cmd
$LN895@resume_cmd:

; 1168 :             if (len != sizeof(SCSW))

  02fa7	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  02fab	48 83 f8 0c	 cmp	 rax, 12
  02faf	0f 84 83 00 00
	00		 je	 $LN897@resume_cmd

; 1169 :             {
; 1170 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1171 :                 WRMSG(HHC02017, "E", dev->devnum, "PCI SCSW", len, (int)sizeof(SCSW));

  02fb5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  02fba	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02fbe	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv1657[rsp], eax
  02fc5	b9 01 00 00 00	 mov	 ecx, 1
  02fca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02fd0	c7 44 24 50 0c
	00 00 00	 mov	 DWORD PTR [rsp+80], 12
  02fd8	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  02fdc	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  02fe0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180262
  02fe7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02fec	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv1657[rsp]
  02ff3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02ff7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180263
  02ffe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03003	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180264
  0300a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0300f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03014	41 b9 03 00 00
	00		 mov	 r9d, 3
  0301a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180265
  03021	ba 93 04 00 00	 mov	 edx, 1171		; 00000493H
  03026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180266
  0302d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1172 :                 goto sr_error_exit;

  03033	e9 93 14 00 00	 jmp	 $sr_error_exit$1020
$LN897@resume_cmd:
$LN339@resume_cmd:

; 1173 :             }
; 1174 :             SR_READ_BUF(file, &dev->pciscsw, len);

  03038	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  0303c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03041	48 81 c1 14 03
	00 00		 add	 rcx, 788		; 00000314H
  03048	44 8b c0	 mov	 r8d, eax
  0304b	48 8b d1	 mov	 rdx, rcx
  0304e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03053	e8 00 00 00 00	 call	 sr_read_buf
  03058	85 c0		 test	 eax, eax
  0305a	74 0a		 je	 SHORT $LN898@resume_cmd
  0305c	b8 ff ff ff ff	 mov	 eax, -1
  03061	e9 c9 14 00 00	 jmp	 $LN1@resume_cmd
$LN898@resume_cmd:
  03066	33 c0		 xor	 eax, eax
  03068	85 c0		 test	 eax, eax
  0306a	75 cc		 jne	 SHORT $LN339@resume_cmd

; 1175 :             break;

  0306c	e9 70 0e 00 00	 jmp	 $LN34@resume_cmd
$LN899@resume_cmd:

; 1176 : 
; 1177 :         case SR_DEV_ATTNSCSW:
; 1178 :             SR_SKIP_NULL_DEV(dev, file, len);

  03071	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03077	75 27		 jne	 SHORT $LN900@resume_cmd
$LN342@resume_cmd:
  03079	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0307d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03082	e8 00 00 00 00	 call	 sr_read_skip
  03087	85 c0		 test	 eax, eax
  03089	74 0a		 je	 SHORT $LN901@resume_cmd
  0308b	b8 ff ff ff ff	 mov	 eax, -1
  03090	e9 9a 14 00 00	 jmp	 $LN1@resume_cmd
$LN901@resume_cmd:
  03095	33 c0		 xor	 eax, eax
  03097	85 c0		 test	 eax, eax
  03099	75 de		 jne	 SHORT $LN342@resume_cmd
  0309b	e9 41 0e 00 00	 jmp	 $LN34@resume_cmd
$LN900@resume_cmd:

; 1179 :             if (len != sizeof(SCSW))

  030a0	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  030a4	48 83 f8 0c	 cmp	 rax, 12
  030a8	0f 84 83 00 00
	00		 je	 $LN902@resume_cmd

; 1180 :             {
; 1181 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1182 :                 WRMSG(HHC02017, "E", dev->devnum, "ATTN SCSW", len, (int)sizeof(SCSW));

  030ae	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  030b3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  030b7	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv1688[rsp], eax
  030be	b9 01 00 00 00	 mov	 ecx, 1
  030c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  030c9	c7 44 24 50 0c
	00 00 00	 mov	 DWORD PTR [rsp+80], 12
  030d1	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  030d5	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  030d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180272
  030e0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  030e5	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv1688[rsp]
  030ec	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  030f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180273
  030f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  030fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180274
  03103	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03108	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0310d	41 b9 03 00 00
	00		 mov	 r9d, 3
  03113	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180275
  0311a	ba 9e 04 00 00	 mov	 edx, 1182		; 0000049eH
  0311f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180276
  03126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1183 :                 goto sr_error_exit;

  0312c	e9 9a 13 00 00	 jmp	 $sr_error_exit$1020
$LN902@resume_cmd:
$LN345@resume_cmd:

; 1184 :             }
; 1185 :             SR_READ_BUF(file, &dev->attnscsw, len);

  03131	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  03135	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0313a	48 81 c1 20 03
	00 00		 add	 rcx, 800		; 00000320H
  03141	44 8b c0	 mov	 r8d, eax
  03144	48 8b d1	 mov	 rdx, rcx
  03147	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0314c	e8 00 00 00 00	 call	 sr_read_buf
  03151	85 c0		 test	 eax, eax
  03153	74 0a		 je	 SHORT $LN903@resume_cmd
  03155	b8 ff ff ff ff	 mov	 eax, -1
  0315a	e9 d0 13 00 00	 jmp	 $LN1@resume_cmd
$LN903@resume_cmd:
  0315f	33 c0		 xor	 eax, eax
  03161	85 c0		 test	 eax, eax
  03163	75 cc		 jne	 SHORT $LN345@resume_cmd

; 1186 :             break;

  03165	e9 77 0d 00 00	 jmp	 $LN34@resume_cmd
$LN904@resume_cmd:

; 1187 : 
; 1188 :         case SR_DEV_ESW:
; 1189 :             SR_SKIP_NULL_DEV(dev, file, len);

  0316a	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03170	75 27		 jne	 SHORT $LN905@resume_cmd
$LN348@resume_cmd:
  03172	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03176	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0317b	e8 00 00 00 00	 call	 sr_read_skip
  03180	85 c0		 test	 eax, eax
  03182	74 0a		 je	 SHORT $LN906@resume_cmd
  03184	b8 ff ff ff ff	 mov	 eax, -1
  03189	e9 a1 13 00 00	 jmp	 $LN1@resume_cmd
$LN906@resume_cmd:
  0318e	33 c0		 xor	 eax, eax
  03190	85 c0		 test	 eax, eax
  03192	75 de		 jne	 SHORT $LN348@resume_cmd
  03194	e9 48 0d 00 00	 jmp	 $LN34@resume_cmd
$LN905@resume_cmd:

; 1190 :             if (len != sizeof(ESW))

  03199	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  0319d	48 83 f8 14	 cmp	 rax, 20
  031a1	0f 84 83 00 00
	00		 je	 $LN907@resume_cmd

; 1191 :             {
; 1192 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1193 :                 WRMSG(HHC02017, "E", dev->devnum, "ESW", len, (int)sizeof(ESW));

  031a7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  031ac	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  031b0	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv1719[rsp], eax
  031b7	b9 01 00 00 00	 mov	 ecx, 1
  031bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  031c2	c7 44 24 50 14
	00 00 00	 mov	 DWORD PTR [rsp+80], 20
  031ca	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  031ce	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  031d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180282
  031d9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  031de	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv1719[rsp]
  031e5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  031e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180283
  031f0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  031f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180284
  031fc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03201	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03206	41 b9 03 00 00
	00		 mov	 r9d, 3
  0320c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180285
  03213	ba a9 04 00 00	 mov	 edx, 1193		; 000004a9H
  03218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180286
  0321f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1194 :                 goto sr_error_exit;

  03225	e9 a1 12 00 00	 jmp	 $sr_error_exit$1020
$LN907@resume_cmd:
$LN351@resume_cmd:

; 1195 :             }
; 1196 :             SR_READ_BUF(file, &dev->esw, len);

  0322a	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  0322e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03233	48 81 c1 2c 03
	00 00		 add	 rcx, 812		; 0000032cH
  0323a	44 8b c0	 mov	 r8d, eax
  0323d	48 8b d1	 mov	 rdx, rcx
  03240	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03245	e8 00 00 00 00	 call	 sr_read_buf
  0324a	85 c0		 test	 eax, eax
  0324c	74 0a		 je	 SHORT $LN908@resume_cmd
  0324e	b8 ff ff ff ff	 mov	 eax, -1
  03253	e9 d7 12 00 00	 jmp	 $LN1@resume_cmd
$LN908@resume_cmd:
  03258	33 c0		 xor	 eax, eax
  0325a	85 c0		 test	 eax, eax
  0325c	75 cc		 jne	 SHORT $LN351@resume_cmd

; 1197 :             break;

  0325e	e9 7e 0c 00 00	 jmp	 $LN34@resume_cmd
$LN909@resume_cmd:

; 1198 : 
; 1199 :         case SR_DEV_ECW:
; 1200 :             SR_SKIP_NULL_DEV(dev, file, len);

  03263	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03269	75 27		 jne	 SHORT $LN910@resume_cmd
$LN354@resume_cmd:
  0326b	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0326f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03274	e8 00 00 00 00	 call	 sr_read_skip
  03279	85 c0		 test	 eax, eax
  0327b	74 0a		 je	 SHORT $LN911@resume_cmd
  0327d	b8 ff ff ff ff	 mov	 eax, -1
  03282	e9 a8 12 00 00	 jmp	 $LN1@resume_cmd
$LN911@resume_cmd:
  03287	33 c0		 xor	 eax, eax
  03289	85 c0		 test	 eax, eax
  0328b	75 de		 jne	 SHORT $LN354@resume_cmd
  0328d	e9 4f 0c 00 00	 jmp	 $LN34@resume_cmd
$LN910@resume_cmd:

; 1201 :             if (len != 32)

  03292	83 7c 24 60 20	 cmp	 DWORD PTR len$[rsp], 32	; 00000020H
  03297	0f 84 83 00 00
	00		 je	 $LN912@resume_cmd

; 1202 :             {
; 1203 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1204 :                 WRMSG(HHC02017, "E", dev->devnum, "ECW", len, 32);

  0329d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  032a2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  032a6	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv1781[rsp], eax
  032ad	b9 01 00 00 00	 mov	 ecx, 1
  032b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  032b8	c7 44 24 50 20
	00 00 00	 mov	 DWORD PTR [rsp+80], 32	; 00000020H
  032c0	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  032c4	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  032c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180292
  032cf	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  032d4	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv1781[rsp]
  032db	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  032df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180293
  032e6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  032eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180294
  032f2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  032f7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  032fc	41 b9 03 00 00
	00		 mov	 r9d, 3
  03302	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180295
  03309	ba b4 04 00 00	 mov	 edx, 1204		; 000004b4H
  0330e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180296
  03315	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1205 :                 goto sr_error_exit;

  0331b	e9 ab 11 00 00	 jmp	 $sr_error_exit$1020
$LN912@resume_cmd:
$LN357@resume_cmd:

; 1206 :             }
; 1207 :             SR_READ_BUF(file, &dev->ecw, len);

  03320	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  03324	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03329	48 81 c1 40 03
	00 00		 add	 rcx, 832		; 00000340H
  03330	44 8b c0	 mov	 r8d, eax
  03333	48 8b d1	 mov	 rdx, rcx
  03336	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0333b	e8 00 00 00 00	 call	 sr_read_buf
  03340	85 c0		 test	 eax, eax
  03342	74 0a		 je	 SHORT $LN913@resume_cmd
  03344	b8 ff ff ff ff	 mov	 eax, -1
  03349	e9 e1 11 00 00	 jmp	 $LN1@resume_cmd
$LN913@resume_cmd:
  0334e	33 c0		 xor	 eax, eax
  03350	85 c0		 test	 eax, eax
  03352	75 cc		 jne	 SHORT $LN357@resume_cmd

; 1208 :             break;

  03354	e9 88 0b 00 00	 jmp	 $LN34@resume_cmd
$LN914@resume_cmd:

; 1209 : 
; 1210 :         case SR_DEV_SENSE:
; 1211 :             SR_SKIP_NULL_DEV(dev, file, len);

  03359	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0335f	75 27		 jne	 SHORT $LN915@resume_cmd
$LN360@resume_cmd:
  03361	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03365	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0336a	e8 00 00 00 00	 call	 sr_read_skip
  0336f	85 c0		 test	 eax, eax
  03371	74 0a		 je	 SHORT $LN916@resume_cmd
  03373	b8 ff ff ff ff	 mov	 eax, -1
  03378	e9 b2 11 00 00	 jmp	 $LN1@resume_cmd
$LN916@resume_cmd:
  0337d	33 c0		 xor	 eax, eax
  0337f	85 c0		 test	 eax, eax
  03381	75 de		 jne	 SHORT $LN360@resume_cmd
  03383	e9 59 0b 00 00	 jmp	 $LN34@resume_cmd
$LN915@resume_cmd:

; 1212 :             if (len != 32)

  03388	83 7c 24 60 20	 cmp	 DWORD PTR len$[rsp], 32	; 00000020H
  0338d	0f 84 83 00 00
	00		 je	 $LN917@resume_cmd

; 1213 :             {
; 1214 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1215 :                 WRMSG(HHC02017, "E", dev->devnum, "Sense", len, 32);

  03393	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03398	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0339c	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv1811[rsp], eax
  033a3	b9 01 00 00 00	 mov	 ecx, 1
  033a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  033ae	c7 44 24 50 20
	00 00 00	 mov	 DWORD PTR [rsp+80], 32	; 00000020H
  033b6	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  033ba	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  033be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180302
  033c5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  033ca	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv1811[rsp]
  033d1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  033d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180303
  033dc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  033e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180304
  033e8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  033ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  033f2	41 b9 03 00 00
	00		 mov	 r9d, 3
  033f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180305
  033ff	ba bf 04 00 00	 mov	 edx, 1215		; 000004bfH
  03404	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180306
  0340b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1216 :                 goto sr_error_exit;

  03411	e9 b5 10 00 00	 jmp	 $sr_error_exit$1020
$LN917@resume_cmd:
$LN363@resume_cmd:

; 1217 :             }
; 1218 :             SR_READ_BUF(file, &dev->ecw, len);

  03416	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  0341a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0341f	48 81 c1 40 03
	00 00		 add	 rcx, 832		; 00000340H
  03426	44 8b c0	 mov	 r8d, eax
  03429	48 8b d1	 mov	 rdx, rcx
  0342c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03431	e8 00 00 00 00	 call	 sr_read_buf
  03436	85 c0		 test	 eax, eax
  03438	74 0a		 je	 SHORT $LN918@resume_cmd
  0343a	b8 ff ff ff ff	 mov	 eax, -1
  0343f	e9 eb 10 00 00	 jmp	 $LN1@resume_cmd
$LN918@resume_cmd:
  03444	33 c0		 xor	 eax, eax
  03446	85 c0		 test	 eax, eax
  03448	75 cc		 jne	 SHORT $LN363@resume_cmd

; 1219 :             break;

  0344a	e9 92 0a 00 00	 jmp	 $LN34@resume_cmd
$LN919@resume_cmd:

; 1220 : 
; 1221 :         case SR_DEV_PGSTAT:
; 1222 :             SR_SKIP_NULL_DEV(dev, file, len);

  0344f	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03455	75 27		 jne	 SHORT $LN920@resume_cmd
$LN366@resume_cmd:
  03457	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0345b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03460	e8 00 00 00 00	 call	 sr_read_skip
  03465	85 c0		 test	 eax, eax
  03467	74 0a		 je	 SHORT $LN921@resume_cmd
  03469	b8 ff ff ff ff	 mov	 eax, -1
  0346e	e9 bc 10 00 00	 jmp	 $LN1@resume_cmd
$LN921@resume_cmd:
  03473	33 c0		 xor	 eax, eax
  03475	85 c0		 test	 eax, eax
  03477	75 de		 jne	 SHORT $LN366@resume_cmd
  03479	e9 63 0a 00 00	 jmp	 $LN34@resume_cmd
$LN920@resume_cmd:
$LN369@resume_cmd:

; 1223 :             SR_READ_VALUE(file, len, &dev->pgstat, sizeof(dev->pgstat));

  0347e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03483	48 05 ac 05 00
	00		 add	 rax, 1452		; 000005acH
  03489	41 b9 01 00 00
	00		 mov	 r9d, 1
  0348f	4c 8b c0	 mov	 r8, rax
  03492	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03496	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0349b	e8 00 00 00 00	 call	 sr_read_value
  034a0	85 c0		 test	 eax, eax
  034a2	74 0a		 je	 SHORT $LN922@resume_cmd
  034a4	b8 ff ff ff ff	 mov	 eax, -1
  034a9	e9 81 10 00 00	 jmp	 $LN1@resume_cmd
$LN922@resume_cmd:
  034ae	33 c0		 xor	 eax, eax
  034b0	85 c0		 test	 eax, eax
  034b2	75 ca		 jne	 SHORT $LN369@resume_cmd

; 1224 :             break;

  034b4	e9 28 0a 00 00	 jmp	 $LN34@resume_cmd
$LN923@resume_cmd:

; 1225 : 
; 1226 :         case SR_DEV_PGID:
; 1227 :             SR_SKIP_NULL_DEV(dev, file, len);

  034b9	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  034bf	75 27		 jne	 SHORT $LN924@resume_cmd
$LN372@resume_cmd:
  034c1	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  034c5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  034ca	e8 00 00 00 00	 call	 sr_read_skip
  034cf	85 c0		 test	 eax, eax
  034d1	74 0a		 je	 SHORT $LN925@resume_cmd
  034d3	b8 ff ff ff ff	 mov	 eax, -1
  034d8	e9 52 10 00 00	 jmp	 $LN1@resume_cmd
$LN925@resume_cmd:
  034dd	33 c0		 xor	 eax, eax
  034df	85 c0		 test	 eax, eax
  034e1	75 de		 jne	 SHORT $LN372@resume_cmd
  034e3	e9 f9 09 00 00	 jmp	 $LN34@resume_cmd
$LN924@resume_cmd:

; 1228 :             if (len != 11)

  034e8	83 7c 24 60 0b	 cmp	 DWORD PTR len$[rsp], 11
  034ed	0f 84 83 00 00
	00		 je	 $LN926@resume_cmd

; 1229 :             {
; 1230 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1231 :                 WRMSG(HHC02017, "E", dev->devnum, "PGID", len, 11);

  034f3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  034f8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  034fc	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv1855[rsp], eax
  03503	b9 01 00 00 00	 mov	 ecx, 1
  03508	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0350e	c7 44 24 50 0b
	00 00 00	 mov	 DWORD PTR [rsp+80], 11
  03516	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  0351a	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0351e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180316
  03525	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0352a	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv1855[rsp]
  03531	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03535	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180317
  0353c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180318
  03548	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0354d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03552	41 b9 03 00 00
	00		 mov	 r9d, 3
  03558	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180319
  0355f	ba cf 04 00 00	 mov	 edx, 1231		; 000004cfH
  03564	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180320
  0356b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1232 :                 goto sr_error_exit;

  03571	e9 55 0f 00 00	 jmp	 $sr_error_exit$1020
$LN926@resume_cmd:
$LN375@resume_cmd:

; 1233 :             }
; 1234 :             SR_READ_BUF(file, &dev->pgid, len);

  03576	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  0357a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0357f	48 81 c1 ad 05
	00 00		 add	 rcx, 1453		; 000005adH
  03586	44 8b c0	 mov	 r8d, eax
  03589	48 8b d1	 mov	 rdx, rcx
  0358c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03591	e8 00 00 00 00	 call	 sr_read_buf
  03596	85 c0		 test	 eax, eax
  03598	74 0a		 je	 SHORT $LN927@resume_cmd
  0359a	b8 ff ff ff ff	 mov	 eax, -1
  0359f	e9 8b 0f 00 00	 jmp	 $LN1@resume_cmd
$LN927@resume_cmd:
  035a4	33 c0		 xor	 eax, eax
  035a6	85 c0		 test	 eax, eax
  035a8	75 cc		 jne	 SHORT $LN375@resume_cmd

; 1235 :             break;

  035aa	e9 32 09 00 00	 jmp	 $LN34@resume_cmd
$LN928@resume_cmd:

; 1236 : 
; 1237 :         /* By Adrian - SR_DEV_DRVPWD */
; 1238 :         case SR_DEV_DRVPWD:
; 1239 :             SR_SKIP_NULL_DEV(dev, file, len);

  035af	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  035b5	75 27		 jne	 SHORT $LN929@resume_cmd
$LN378@resume_cmd:
  035b7	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  035bb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  035c0	e8 00 00 00 00	 call	 sr_read_skip
  035c5	85 c0		 test	 eax, eax
  035c7	74 0a		 je	 SHORT $LN930@resume_cmd
  035c9	b8 ff ff ff ff	 mov	 eax, -1
  035ce	e9 5c 0f 00 00	 jmp	 $LN1@resume_cmd
$LN930@resume_cmd:
  035d3	33 c0		 xor	 eax, eax
  035d5	85 c0		 test	 eax, eax
  035d7	75 de		 jne	 SHORT $LN378@resume_cmd
  035d9	e9 03 09 00 00	 jmp	 $LN34@resume_cmd
$LN929@resume_cmd:

; 1240 :             if (len != 11)

  035de	83 7c 24 60 0b	 cmp	 DWORD PTR len$[rsp], 11
  035e3	0f 84 83 00 00
	00		 je	 $LN931@resume_cmd

; 1241 :             {
; 1242 :                 // "SR: %04X: '%s' size mismatch: %d found, %d expected"
; 1243 :                 WRMSG(HHC02017, "E", dev->devnum, "DRVPWD", len, 11);

  035e9	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  035ee	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  035f2	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv1885[rsp], eax
  035f9	b9 01 00 00 00	 mov	 ecx, 1
  035fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03604	c7 44 24 50 0b
	00 00 00	 mov	 DWORD PTR [rsp+80], 11
  0360c	8b 4c 24 60	 mov	 ecx, DWORD PTR len$[rsp]
  03610	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  03614	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180326
  0361b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  03620	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv1885[rsp]
  03627	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0362b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180327
  03632	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180328
  0363e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03643	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03648	41 b9 03 00 00
	00		 mov	 r9d, 3
  0364e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180329
  03655	ba db 04 00 00	 mov	 edx, 1243		; 000004dbH
  0365a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180330
  03661	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1244 :                 goto sr_error_exit;

  03667	e9 5f 0e 00 00	 jmp	 $sr_error_exit$1020
$LN931@resume_cmd:
$LN381@resume_cmd:

; 1245 :             }
; 1246 :             SR_READ_BUF(file, &dev->drvpwd, len);

  0366c	8b 44 24 60	 mov	 eax, DWORD PTR len$[rsp]
  03670	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03675	48 81 c1 e8 05
	00 00		 add	 rcx, 1512		; 000005e8H
  0367c	44 8b c0	 mov	 r8d, eax
  0367f	48 8b d1	 mov	 rdx, rcx
  03682	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03687	e8 00 00 00 00	 call	 sr_read_buf
  0368c	85 c0		 test	 eax, eax
  0368e	74 0a		 je	 SHORT $LN932@resume_cmd
  03690	b8 ff ff ff ff	 mov	 eax, -1
  03695	e9 95 0e 00 00	 jmp	 $LN1@resume_cmd
$LN932@resume_cmd:
  0369a	33 c0		 xor	 eax, eax
  0369c	85 c0		 test	 eax, eax
  0369e	75 cc		 jne	 SHORT $LN381@resume_cmd

; 1247 :             break;

  036a0	e9 3c 08 00 00	 jmp	 $LN34@resume_cmd
$LN933@resume_cmd:

; 1248 : 
; 1249 :         case SR_DEV_BUSY:
; 1250 :             SR_SKIP_NULL_DEV(dev, file, len);

  036a5	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  036ab	75 27		 jne	 SHORT $LN934@resume_cmd
$LN384@resume_cmd:
  036ad	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  036b1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  036b6	e8 00 00 00 00	 call	 sr_read_skip
  036bb	85 c0		 test	 eax, eax
  036bd	74 0a		 je	 SHORT $LN935@resume_cmd
  036bf	b8 ff ff ff ff	 mov	 eax, -1
  036c4	e9 66 0e 00 00	 jmp	 $LN1@resume_cmd
$LN935@resume_cmd:
  036c9	33 c0		 xor	 eax, eax
  036cb	85 c0		 test	 eax, eax
  036cd	75 de		 jne	 SHORT $LN384@resume_cmd
  036cf	e9 0d 08 00 00	 jmp	 $LN34@resume_cmd
$LN934@resume_cmd:
$LN387@resume_cmd:

; 1251 :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  036d4	41 b9 04 00 00
	00		 mov	 r9d, 4
  036da	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  036df	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  036e3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  036e8	e8 00 00 00 00	 call	 sr_read_value
  036ed	85 c0		 test	 eax, eax
  036ef	74 0a		 je	 SHORT $LN936@resume_cmd
  036f1	b8 ff ff ff ff	 mov	 eax, -1
  036f6	e9 34 0e 00 00	 jmp	 $LN1@resume_cmd
$LN936@resume_cmd:
  036fb	33 c0		 xor	 eax, eax
  036fd	85 c0		 test	 eax, eax
  036ff	75 d3		 jne	 SHORT $LN387@resume_cmd

; 1252 :             dev->busy = rc;

  03701	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  03705	83 e0 01	 and	 eax, 1
  03708	c1 e0 13	 shl	 eax, 19
  0370b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03710	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  03716	0f ba f1 13	 btr	 ecx, 19
  0371a	0b c8		 or	 ecx, eax
  0371c	8b c1		 mov	 eax, ecx
  0371e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03723	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1253 :             break;

  03729	e9 b3 07 00 00	 jmp	 $LN34@resume_cmd
$LN937@resume_cmd:

; 1254 : 
; 1255 :         case SR_DEV_RESERVED:
; 1256 :             SR_SKIP_NULL_DEV(dev, file, len);

  0372e	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03734	75 27		 jne	 SHORT $LN938@resume_cmd
$LN390@resume_cmd:
  03736	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0373a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0373f	e8 00 00 00 00	 call	 sr_read_skip
  03744	85 c0		 test	 eax, eax
  03746	74 0a		 je	 SHORT $LN939@resume_cmd
  03748	b8 ff ff ff ff	 mov	 eax, -1
  0374d	e9 dd 0d 00 00	 jmp	 $LN1@resume_cmd
$LN939@resume_cmd:
  03752	33 c0		 xor	 eax, eax
  03754	85 c0		 test	 eax, eax
  03756	75 de		 jne	 SHORT $LN390@resume_cmd
  03758	e9 84 07 00 00	 jmp	 $LN34@resume_cmd
$LN938@resume_cmd:
$LN393@resume_cmd:

; 1257 :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  0375d	41 b9 04 00 00
	00		 mov	 r9d, 4
  03763	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  03768	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0376c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03771	e8 00 00 00 00	 call	 sr_read_value
  03776	85 c0		 test	 eax, eax
  03778	74 0a		 je	 SHORT $LN940@resume_cmd
  0377a	b8 ff ff ff ff	 mov	 eax, -1
  0377f	e9 ab 0d 00 00	 jmp	 $LN1@resume_cmd
$LN940@resume_cmd:
  03784	33 c0		 xor	 eax, eax
  03786	85 c0		 test	 eax, eax
  03788	75 d3		 jne	 SHORT $LN393@resume_cmd

; 1258 :             dev->reserved = rc;

  0378a	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  0378e	83 e0 01	 and	 eax, 1
  03791	c1 e0 14	 shl	 eax, 20
  03794	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03799	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  0379f	0f ba f1 14	 btr	 ecx, 20
  037a3	0b c8		 or	 ecx, eax
  037a5	8b c1		 mov	 eax, ecx
  037a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  037ac	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1259 :             break;

  037b2	e9 2a 07 00 00	 jmp	 $LN34@resume_cmd
$LN941@resume_cmd:

; 1260 : 
; 1261 :         case SR_DEV_SUSPENDED:
; 1262 :             SR_SKIP_NULL_DEV(dev, file, len);

  037b7	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  037bd	75 27		 jne	 SHORT $LN942@resume_cmd
$LN396@resume_cmd:
  037bf	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  037c3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  037c8	e8 00 00 00 00	 call	 sr_read_skip
  037cd	85 c0		 test	 eax, eax
  037cf	74 0a		 je	 SHORT $LN943@resume_cmd
  037d1	b8 ff ff ff ff	 mov	 eax, -1
  037d6	e9 54 0d 00 00	 jmp	 $LN1@resume_cmd
$LN943@resume_cmd:
  037db	33 c0		 xor	 eax, eax
  037dd	85 c0		 test	 eax, eax
  037df	75 de		 jne	 SHORT $LN396@resume_cmd
  037e1	e9 fb 06 00 00	 jmp	 $LN34@resume_cmd
$LN942@resume_cmd:
$LN399@resume_cmd:

; 1263 :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  037e6	41 b9 04 00 00
	00		 mov	 r9d, 4
  037ec	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  037f1	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  037f5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  037fa	e8 00 00 00 00	 call	 sr_read_value
  037ff	85 c0		 test	 eax, eax
  03801	74 0a		 je	 SHORT $LN944@resume_cmd
  03803	b8 ff ff ff ff	 mov	 eax, -1
  03808	e9 22 0d 00 00	 jmp	 $LN1@resume_cmd
$LN944@resume_cmd:
  0380d	33 c0		 xor	 eax, eax
  0380f	85 c0		 test	 eax, eax
  03811	75 d3		 jne	 SHORT $LN399@resume_cmd

; 1264 :             dev->suspended = rc;

  03813	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  03817	83 e0 01	 and	 eax, 1
  0381a	c1 e0 15	 shl	 eax, 21
  0381d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03822	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  03828	0f ba f1 15	 btr	 ecx, 21
  0382c	0b c8		 or	 ecx, eax
  0382e	8b c1		 mov	 eax, ecx
  03830	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03835	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1265 :             break;

  0383b	e9 a1 06 00 00	 jmp	 $LN34@resume_cmd
$LN945@resume_cmd:

; 1266 : 
; 1267 :         case SR_DEV_PENDING:
; 1268 :             SR_SKIP_NULL_DEV(dev, file, len);

  03840	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03846	75 27		 jne	 SHORT $LN946@resume_cmd
$LN402@resume_cmd:
  03848	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0384c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03851	e8 00 00 00 00	 call	 sr_read_skip
  03856	85 c0		 test	 eax, eax
  03858	74 0a		 je	 SHORT $LN947@resume_cmd
  0385a	b8 ff ff ff ff	 mov	 eax, -1
  0385f	e9 cb 0c 00 00	 jmp	 $LN1@resume_cmd
$LN947@resume_cmd:
  03864	33 c0		 xor	 eax, eax
  03866	85 c0		 test	 eax, eax
  03868	75 de		 jne	 SHORT $LN402@resume_cmd
  0386a	e9 72 06 00 00	 jmp	 $LN34@resume_cmd
$LN946@resume_cmd:
$LN405@resume_cmd:

; 1269 :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  0386f	41 b9 04 00 00
	00		 mov	 r9d, 4
  03875	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  0387a	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  0387e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03883	e8 00 00 00 00	 call	 sr_read_value
  03888	85 c0		 test	 eax, eax
  0388a	74 0a		 je	 SHORT $LN948@resume_cmd
  0388c	b8 ff ff ff ff	 mov	 eax, -1
  03891	e9 99 0c 00 00	 jmp	 $LN1@resume_cmd
$LN948@resume_cmd:
  03896	33 c0		 xor	 eax, eax
  03898	85 c0		 test	 eax, eax
  0389a	75 d3		 jne	 SHORT $LN405@resume_cmd

; 1270 :             dev->pending = rc;

  0389c	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  038a0	83 e0 01	 and	 eax, 1
  038a3	c1 e0 16	 shl	 eax, 22
  038a6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  038ab	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  038b1	0f ba f1 16	 btr	 ecx, 22
  038b5	0b c8		 or	 ecx, eax
  038b7	8b c1		 mov	 eax, ecx
  038b9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  038be	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1271 :             QUEUE_IO_INTERRUPT(&dev->ioint,FALSE);

  038c4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  038c9	48 05 28 02 00
	00		 add	 rax, 552		; 00000228H
  038cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180348
  038d6	33 d2		 xor	 edx, edx
  038d8	48 8b c8	 mov	 rcx, rax
  038db	e8 00 00 00 00	 call	 Queue_IO_Interrupt

; 1272 :             break;

  038e0	e9 fc 05 00 00	 jmp	 $LN34@resume_cmd
$LN949@resume_cmd:

; 1273 : 
; 1274 :         case SR_DEV_PCIPENDING:
; 1275 :             SR_SKIP_NULL_DEV(dev, file, len);

  038e5	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  038eb	75 27		 jne	 SHORT $LN950@resume_cmd
$LN408@resume_cmd:
  038ed	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  038f1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  038f6	e8 00 00 00 00	 call	 sr_read_skip
  038fb	85 c0		 test	 eax, eax
  038fd	74 0a		 je	 SHORT $LN951@resume_cmd
  038ff	b8 ff ff ff ff	 mov	 eax, -1
  03904	e9 26 0c 00 00	 jmp	 $LN1@resume_cmd
$LN951@resume_cmd:
  03909	33 c0		 xor	 eax, eax
  0390b	85 c0		 test	 eax, eax
  0390d	75 de		 jne	 SHORT $LN408@resume_cmd
  0390f	e9 cd 05 00 00	 jmp	 $LN34@resume_cmd
$LN950@resume_cmd:
$LN411@resume_cmd:

; 1276 :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  03914	41 b9 04 00 00
	00		 mov	 r9d, 4
  0391a	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  0391f	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03923	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03928	e8 00 00 00 00	 call	 sr_read_value
  0392d	85 c0		 test	 eax, eax
  0392f	74 0a		 je	 SHORT $LN952@resume_cmd
  03931	b8 ff ff ff ff	 mov	 eax, -1
  03936	e9 f4 0b 00 00	 jmp	 $LN1@resume_cmd
$LN952@resume_cmd:
  0393b	33 c0		 xor	 eax, eax
  0393d	85 c0		 test	 eax, eax
  0393f	75 d3		 jne	 SHORT $LN411@resume_cmd

; 1277 :             dev->pcipending = rc;

  03941	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  03945	83 e0 01	 and	 eax, 1
  03948	c1 e0 17	 shl	 eax, 23
  0394b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03950	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  03956	0f ba f1 17	 btr	 ecx, 23
  0395a	0b c8		 or	 ecx, eax
  0395c	8b c1		 mov	 eax, ecx
  0395e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03963	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1278 :             QUEUE_IO_INTERRUPT(&dev->pciioint,FALSE);

  03969	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0396e	48 05 40 02 00
	00		 add	 rax, 576		; 00000240H
  03974	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180353
  0397b	33 d2		 xor	 edx, edx
  0397d	48 8b c8	 mov	 rcx, rax
  03980	e8 00 00 00 00	 call	 Queue_IO_Interrupt

; 1279 :             break;

  03985	e9 57 05 00 00	 jmp	 $LN34@resume_cmd
$LN953@resume_cmd:

; 1280 : 
; 1281 :         case SR_DEV_ATTNPENDING:
; 1282 :             SR_SKIP_NULL_DEV(dev, file, len);

  0398a	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03990	75 27		 jne	 SHORT $LN954@resume_cmd
$LN414@resume_cmd:
  03992	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03996	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  0399b	e8 00 00 00 00	 call	 sr_read_skip
  039a0	85 c0		 test	 eax, eax
  039a2	74 0a		 je	 SHORT $LN955@resume_cmd
  039a4	b8 ff ff ff ff	 mov	 eax, -1
  039a9	e9 81 0b 00 00	 jmp	 $LN1@resume_cmd
$LN955@resume_cmd:
  039ae	33 c0		 xor	 eax, eax
  039b0	85 c0		 test	 eax, eax
  039b2	75 de		 jne	 SHORT $LN414@resume_cmd
  039b4	e9 28 05 00 00	 jmp	 $LN34@resume_cmd
$LN954@resume_cmd:
$LN417@resume_cmd:

; 1283 :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  039b9	41 b9 04 00 00
	00		 mov	 r9d, 4
  039bf	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  039c4	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  039c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  039cd	e8 00 00 00 00	 call	 sr_read_value
  039d2	85 c0		 test	 eax, eax
  039d4	74 0a		 je	 SHORT $LN956@resume_cmd
  039d6	b8 ff ff ff ff	 mov	 eax, -1
  039db	e9 4f 0b 00 00	 jmp	 $LN1@resume_cmd
$LN956@resume_cmd:
  039e0	33 c0		 xor	 eax, eax
  039e2	85 c0		 test	 eax, eax
  039e4	75 d3		 jne	 SHORT $LN417@resume_cmd

; 1284 :             dev->attnpending = rc;

  039e6	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  039ea	83 e0 01	 and	 eax, 1
  039ed	c1 e0 18	 shl	 eax, 24
  039f0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  039f5	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  039fb	0f ba f1 18	 btr	 ecx, 24
  039ff	0b c8		 or	 ecx, eax
  03a01	8b c1		 mov	 eax, ecx
  03a03	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03a08	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1285 :             QUEUE_IO_INTERRUPT(&dev->attnioint,FALSE);

  03a0e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03a13	48 05 58 02 00
	00		 add	 rax, 600		; 00000258H
  03a19	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180358
  03a20	33 d2		 xor	 edx, edx
  03a22	48 8b c8	 mov	 rcx, rax
  03a25	e8 00 00 00 00	 call	 Queue_IO_Interrupt

; 1286 :             break;

  03a2a	e9 b2 04 00 00	 jmp	 $LN34@resume_cmd
$LN957@resume_cmd:

; 1287 : 
; 1288 :         case SR_DEV_STARTPENDING:
; 1289 :             SR_SKIP_NULL_DEV(dev, file, len);

  03a2f	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03a35	75 27		 jne	 SHORT $LN958@resume_cmd
$LN420@resume_cmd:
  03a37	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03a3b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03a40	e8 00 00 00 00	 call	 sr_read_skip
  03a45	85 c0		 test	 eax, eax
  03a47	74 0a		 je	 SHORT $LN959@resume_cmd
  03a49	b8 ff ff ff ff	 mov	 eax, -1
  03a4e	e9 dc 0a 00 00	 jmp	 $LN1@resume_cmd
$LN959@resume_cmd:
  03a53	33 c0		 xor	 eax, eax
  03a55	85 c0		 test	 eax, eax
  03a57	75 de		 jne	 SHORT $LN420@resume_cmd
  03a59	e9 83 04 00 00	 jmp	 $LN34@resume_cmd
$LN958@resume_cmd:
$LN423@resume_cmd:

; 1290 :             SR_READ_VALUE(file, len, &rc, sizeof(rc));

  03a5e	41 b9 04 00 00
	00		 mov	 r9d, 4
  03a64	4c 8d 44 24 78	 lea	 r8, QWORD PTR rc$[rsp]
  03a69	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03a6d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03a72	e8 00 00 00 00	 call	 sr_read_value
  03a77	85 c0		 test	 eax, eax
  03a79	74 0a		 je	 SHORT $LN960@resume_cmd
  03a7b	b8 ff ff ff ff	 mov	 eax, -1
  03a80	e9 aa 0a 00 00	 jmp	 $LN1@resume_cmd
$LN960@resume_cmd:
  03a85	33 c0		 xor	 eax, eax
  03a87	85 c0		 test	 eax, eax
  03a89	75 d3		 jne	 SHORT $LN423@resume_cmd

; 1291 :             dev->startpending = rc;

  03a8b	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  03a8f	83 e0 01	 and	 eax, 1
  03a92	c1 e0 19	 shl	 eax, 25
  03a95	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03a9a	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  03aa0	0f ba f1 19	 btr	 ecx, 25
  03aa4	0b c8		 or	 ecx, eax
  03aa6	8b c1		 mov	 eax, ecx
  03aa8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03aad	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1292 :             break;

  03ab3	e9 29 04 00 00	 jmp	 $LN34@resume_cmd
$LN961@resume_cmd:

; 1293 : 
; 1294 :         case SR_DEV_CCWADDR:
; 1295 :             SR_SKIP_NULL_DEV(dev, file, len);

  03ab8	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03abe	75 27		 jne	 SHORT $LN962@resume_cmd
$LN426@resume_cmd:
  03ac0	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03ac4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03ac9	e8 00 00 00 00	 call	 sr_read_skip
  03ace	85 c0		 test	 eax, eax
  03ad0	74 0a		 je	 SHORT $LN963@resume_cmd
  03ad2	b8 ff ff ff ff	 mov	 eax, -1
  03ad7	e9 53 0a 00 00	 jmp	 $LN1@resume_cmd
$LN963@resume_cmd:
  03adc	33 c0		 xor	 eax, eax
  03ade	85 c0		 test	 eax, eax
  03ae0	75 de		 jne	 SHORT $LN426@resume_cmd
  03ae2	e9 fa 03 00 00	 jmp	 $LN34@resume_cmd
$LN962@resume_cmd:
$LN429@resume_cmd:

; 1296 :             SR_READ_VALUE(file, len, &dev->ccwaddr, sizeof(dev->ccwaddr));

  03ae7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03aec	48 05 80 02 00
	00		 add	 rax, 640		; 00000280H
  03af2	41 b9 04 00 00
	00		 mov	 r9d, 4
  03af8	4c 8b c0	 mov	 r8, rax
  03afb	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03aff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03b04	e8 00 00 00 00	 call	 sr_read_value
  03b09	85 c0		 test	 eax, eax
  03b0b	74 0a		 je	 SHORT $LN964@resume_cmd
  03b0d	b8 ff ff ff ff	 mov	 eax, -1
  03b12	e9 18 0a 00 00	 jmp	 $LN1@resume_cmd
$LN964@resume_cmd:
  03b17	33 c0		 xor	 eax, eax
  03b19	85 c0		 test	 eax, eax
  03b1b	75 ca		 jne	 SHORT $LN429@resume_cmd

; 1297 :             break;

  03b1d	e9 bf 03 00 00	 jmp	 $LN34@resume_cmd
$LN965@resume_cmd:

; 1298 : 
; 1299 :         case SR_DEV_IDAPMASK:
; 1300 :             SR_SKIP_NULL_DEV(dev, file, len);

  03b22	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03b28	75 27		 jne	 SHORT $LN966@resume_cmd
$LN432@resume_cmd:
  03b2a	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03b2e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03b33	e8 00 00 00 00	 call	 sr_read_skip
  03b38	85 c0		 test	 eax, eax
  03b3a	74 0a		 je	 SHORT $LN967@resume_cmd
  03b3c	b8 ff ff ff ff	 mov	 eax, -1
  03b41	e9 e9 09 00 00	 jmp	 $LN1@resume_cmd
$LN967@resume_cmd:
  03b46	33 c0		 xor	 eax, eax
  03b48	85 c0		 test	 eax, eax
  03b4a	75 de		 jne	 SHORT $LN432@resume_cmd
  03b4c	e9 90 03 00 00	 jmp	 $LN34@resume_cmd
$LN966@resume_cmd:
$LN435@resume_cmd:

; 1301 :             SR_READ_VALUE(file, len, &dev->idapmask, sizeof(dev->idapmask));

  03b51	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03b56	48 05 84 02 00
	00		 add	 rax, 644		; 00000284H
  03b5c	41 b9 02 00 00
	00		 mov	 r9d, 2
  03b62	4c 8b c0	 mov	 r8, rax
  03b65	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03b69	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03b6e	e8 00 00 00 00	 call	 sr_read_value
  03b73	85 c0		 test	 eax, eax
  03b75	74 0a		 je	 SHORT $LN968@resume_cmd
  03b77	b8 ff ff ff ff	 mov	 eax, -1
  03b7c	e9 ae 09 00 00	 jmp	 $LN1@resume_cmd
$LN968@resume_cmd:
  03b81	33 c0		 xor	 eax, eax
  03b83	85 c0		 test	 eax, eax
  03b85	75 ca		 jne	 SHORT $LN435@resume_cmd

; 1302 :             break;

  03b87	e9 55 03 00 00	 jmp	 $LN34@resume_cmd
$LN969@resume_cmd:

; 1303 : 
; 1304 :         case SR_DEV_IDAWFMT:
; 1305 :             SR_SKIP_NULL_DEV(dev, file, len);

  03b8c	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03b92	75 27		 jne	 SHORT $LN970@resume_cmd
$LN438@resume_cmd:
  03b94	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03b98	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03b9d	e8 00 00 00 00	 call	 sr_read_skip
  03ba2	85 c0		 test	 eax, eax
  03ba4	74 0a		 je	 SHORT $LN971@resume_cmd
  03ba6	b8 ff ff ff ff	 mov	 eax, -1
  03bab	e9 7f 09 00 00	 jmp	 $LN1@resume_cmd
$LN971@resume_cmd:
  03bb0	33 c0		 xor	 eax, eax
  03bb2	85 c0		 test	 eax, eax
  03bb4	75 de		 jne	 SHORT $LN438@resume_cmd
  03bb6	e9 26 03 00 00	 jmp	 $LN34@resume_cmd
$LN970@resume_cmd:
$LN441@resume_cmd:

; 1306 :             SR_READ_VALUE(file, len, &dev->idawfmt, sizeof(dev->idawfmt));

  03bbb	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03bc0	48 05 86 02 00
	00		 add	 rax, 646		; 00000286H
  03bc6	41 b9 01 00 00
	00		 mov	 r9d, 1
  03bcc	4c 8b c0	 mov	 r8, rax
  03bcf	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03bd3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03bd8	e8 00 00 00 00	 call	 sr_read_value
  03bdd	85 c0		 test	 eax, eax
  03bdf	74 0a		 je	 SHORT $LN972@resume_cmd
  03be1	b8 ff ff ff ff	 mov	 eax, -1
  03be6	e9 44 09 00 00	 jmp	 $LN1@resume_cmd
$LN972@resume_cmd:
  03beb	33 c0		 xor	 eax, eax
  03bed	85 c0		 test	 eax, eax
  03bef	75 ca		 jne	 SHORT $LN441@resume_cmd

; 1307 :             break;

  03bf1	e9 eb 02 00 00	 jmp	 $LN34@resume_cmd
$LN973@resume_cmd:

; 1308 : 
; 1309 :         case SR_DEV_CCWFMT:
; 1310 :             SR_SKIP_NULL_DEV(dev, file, len);

  03bf6	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03bfc	75 27		 jne	 SHORT $LN974@resume_cmd
$LN444@resume_cmd:
  03bfe	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03c02	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03c07	e8 00 00 00 00	 call	 sr_read_skip
  03c0c	85 c0		 test	 eax, eax
  03c0e	74 0a		 je	 SHORT $LN975@resume_cmd
  03c10	b8 ff ff ff ff	 mov	 eax, -1
  03c15	e9 15 09 00 00	 jmp	 $LN1@resume_cmd
$LN975@resume_cmd:
  03c1a	33 c0		 xor	 eax, eax
  03c1c	85 c0		 test	 eax, eax
  03c1e	75 de		 jne	 SHORT $LN444@resume_cmd
  03c20	e9 bc 02 00 00	 jmp	 $LN34@resume_cmd
$LN974@resume_cmd:
$LN447@resume_cmd:

; 1311 :             SR_READ_VALUE(file, len, &dev->ccwfmt, sizeof(dev->ccwfmt));

  03c25	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03c2a	48 05 87 02 00
	00		 add	 rax, 647		; 00000287H
  03c30	41 b9 01 00 00
	00		 mov	 r9d, 1
  03c36	4c 8b c0	 mov	 r8, rax
  03c39	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03c3d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03c42	e8 00 00 00 00	 call	 sr_read_value
  03c47	85 c0		 test	 eax, eax
  03c49	74 0a		 je	 SHORT $LN976@resume_cmd
  03c4b	b8 ff ff ff ff	 mov	 eax, -1
  03c50	e9 da 08 00 00	 jmp	 $LN1@resume_cmd
$LN976@resume_cmd:
  03c55	33 c0		 xor	 eax, eax
  03c57	85 c0		 test	 eax, eax
  03c59	75 ca		 jne	 SHORT $LN447@resume_cmd

; 1312 :             break;

  03c5b	e9 81 02 00 00	 jmp	 $LN34@resume_cmd
$LN977@resume_cmd:

; 1313 : 
; 1314 :         case SR_DEV_CCWKEY:
; 1315 :             SR_SKIP_NULL_DEV(dev, file, len);

  03c60	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03c66	75 27		 jne	 SHORT $LN978@resume_cmd
$LN450@resume_cmd:
  03c68	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03c6c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03c71	e8 00 00 00 00	 call	 sr_read_skip
  03c76	85 c0		 test	 eax, eax
  03c78	74 0a		 je	 SHORT $LN979@resume_cmd
  03c7a	b8 ff ff ff ff	 mov	 eax, -1
  03c7f	e9 ab 08 00 00	 jmp	 $LN1@resume_cmd
$LN979@resume_cmd:
  03c84	33 c0		 xor	 eax, eax
  03c86	85 c0		 test	 eax, eax
  03c88	75 de		 jne	 SHORT $LN450@resume_cmd
  03c8a	e9 52 02 00 00	 jmp	 $LN34@resume_cmd
$LN978@resume_cmd:
$LN453@resume_cmd:

; 1316 :             SR_READ_VALUE(file, len, &dev->ccwkey, sizeof(dev->ccwkey));

  03c8f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03c94	48 05 88 02 00
	00		 add	 rax, 648		; 00000288H
  03c9a	41 b9 01 00 00
	00		 mov	 r9d, 1
  03ca0	4c 8b c0	 mov	 r8, rax
  03ca3	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03ca7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03cac	e8 00 00 00 00	 call	 sr_read_value
  03cb1	85 c0		 test	 eax, eax
  03cb3	74 0a		 je	 SHORT $LN980@resume_cmd
  03cb5	b8 ff ff ff ff	 mov	 eax, -1
  03cba	e9 70 08 00 00	 jmp	 $LN1@resume_cmd
$LN980@resume_cmd:
  03cbf	33 c0		 xor	 eax, eax
  03cc1	85 c0		 test	 eax, eax
  03cc3	75 ca		 jne	 SHORT $LN453@resume_cmd

; 1317 :             break;

  03cc5	e9 17 02 00 00	 jmp	 $LN34@resume_cmd
$LN981@resume_cmd:

; 1318 : 
; 1319 :         /* This is the trigger to call the device dependent resume routine */
; 1320 :         case SR_DEV_DEVTYPE:
; 1321 :             SR_SKIP_NULL_DEV(dev, file, len);

  03cca	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03cd0	75 27		 jne	 SHORT $LN982@resume_cmd
$LN456@resume_cmd:
  03cd2	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03cd6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03cdb	e8 00 00 00 00	 call	 sr_read_skip
  03ce0	85 c0		 test	 eax, eax
  03ce2	74 0a		 je	 SHORT $LN983@resume_cmd
  03ce4	b8 ff ff ff ff	 mov	 eax, -1
  03ce9	e9 41 08 00 00	 jmp	 $LN1@resume_cmd
$LN983@resume_cmd:
  03cee	33 c0		 xor	 eax, eax
  03cf0	85 c0		 test	 eax, eax
  03cf2	75 de		 jne	 SHORT $LN456@resume_cmd
  03cf4	e9 e8 01 00 00	 jmp	 $LN34@resume_cmd
$LN982@resume_cmd:
$LN459@resume_cmd:

; 1322 :             SR_READ_VALUE(file, len, &hw, sizeof(hw));

  03cf9	41 b9 02 00 00
	00		 mov	 r9d, 2
  03cff	4c 8d 84 24 94
	00 00 00	 lea	 r8, QWORD PTR hw$[rsp]
  03d07	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03d0b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03d10	e8 00 00 00 00	 call	 sr_read_value
  03d15	85 c0		 test	 eax, eax
  03d17	74 0a		 je	 SHORT $LN984@resume_cmd
  03d19	b8 ff ff ff ff	 mov	 eax, -1
  03d1e	e9 0c 08 00 00	 jmp	 $LN1@resume_cmd
$LN984@resume_cmd:
  03d23	33 c0		 xor	 eax, eax
  03d25	85 c0		 test	 eax, eax
  03d27	75 d0		 jne	 SHORT $LN459@resume_cmd

; 1323 :             if (hw != dev->devtype)

  03d29	0f b7 84 24 94
	00 00 00	 movzx	 eax, WORD PTR hw$[rsp]
  03d31	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03d36	0f b7 49 4a	 movzx	 ecx, WORD PTR [rcx+74]
  03d3a	3b c1		 cmp	 eax, ecx
  03d3c	0f 84 cc 00 00
	00		 je	 $LN985@resume_cmd

; 1324 :             {
; 1325 :                 char buf1[20];
; 1326 :                 char buf2[20];
; 1327 :                 MSGBUF(buf1, "%04X", hw);

  03d42	0f b7 84 24 94
	00 00 00	 movzx	 eax, WORD PTR hw$[rsp]
  03d4a	44 8b c8	 mov	 r9d, eax
  03d4d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180388
  03d54	ba 14 00 00 00	 mov	 edx, 20
  03d59	48 8d 8c 24 e8
	02 00 00	 lea	 rcx, QWORD PTR buf1$21[rsp]
  03d61	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1328 :                 MSGBUF(buf2, "%04X", dev->devtype);

  03d67	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03d6c	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  03d70	44 8b c8	 mov	 r9d, eax
  03d73	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180389
  03d7a	ba 14 00 00 00	 mov	 edx, 20
  03d7f	48 8d 8c 24 d0
	02 00 00	 lea	 rcx, QWORD PTR buf2$20[rsp]
  03d87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1329 :                 // "SR: %04X: device type mismatch; '%s' found, '%s' expected"
; 1330 :                 WRMSG(HHC02016, "E", dev->devnum, buf1, buf2);

  03d8d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03d92	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03d96	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv2150[rsp], eax
  03d9d	b9 01 00 00 00	 mov	 ecx, 1
  03da2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03da8	48 8d 8c 24 d0
	02 00 00	 lea	 rcx, QWORD PTR buf2$20[rsp]
  03db0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03db5	48 8d 8c 24 e8
	02 00 00	 lea	 rcx, QWORD PTR buf1$21[rsp]
  03dbd	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  03dc2	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv2150[rsp]
  03dc9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03dcd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180390
  03dd4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03dd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180391
  03de0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03de5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03dea	41 b9 03 00 00
	00		 mov	 r9d, 3
  03df0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180392
  03df7	ba 32 05 00 00	 mov	 edx, 1330		; 00000532H
  03dfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180393
  03e03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1331 :                 goto sr_error_exit;

  03e09	e9 bd 06 00 00	 jmp	 $sr_error_exit$1020
$LN985@resume_cmd:

; 1332 :             }
; 1333 :             if (dev->hnd->hresume)

  03e0e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03e13	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  03e1a	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  03e22	74 2c		 je	 SHORT $LN986@resume_cmd

; 1334 :             {
; 1335 :                 rc = (dev->hnd->hresume) (dev, file);

  03e24	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03e29	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  03e30	48 8b 54 24 68	 mov	 rdx, QWORD PTR file$[rsp]
  03e35	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03e3a	ff 90 c0 00 00
	00		 call	 QWORD PTR [rax+192]
  03e40	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 1336 :                 if (rc < 0) goto sr_error_exit;

  03e44	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  03e49	7d 05		 jge	 SHORT $LN987@resume_cmd
  03e4b	e9 7b 06 00 00	 jmp	 $sr_error_exit$1020
$LN987@resume_cmd:
$LN986@resume_cmd:

; 1337 :             }
; 1338 :             break;

  03e50	e9 8c 00 00 00	 jmp	 $LN34@resume_cmd
$LN988@resume_cmd:

; 1339 : 
; 1340 :         default:
; 1341 :             if ((key & SR_KEY_ID_MASK) != SR_KEY_ID)

  03e55	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR key$[rsp]
  03e5c	25 00 00 f0 ff	 and	 eax, -1048576		; fff00000H
  03e61	3d 00 00 e0 ac	 cmp	 eax, -1394606080	; ace00000H
  03e66	74 57		 je	 SHORT $LN989@resume_cmd

; 1342 :             {
; 1343 :                 // "SR: invalid key %8.8X"
; 1344 :                 WRMSG(HHC02018, "E", key);

  03e68	b9 01 00 00 00	 mov	 ecx, 1
  03e6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03e73	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR key$[rsp]
  03e7a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03e7e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180398
  03e85	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03e8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180399
  03e91	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03e96	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03e9b	41 b9 03 00 00
	00		 mov	 r9d, 3
  03ea1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180400
  03ea8	ba 40 05 00 00	 mov	 edx, 1344		; 00000540H
  03ead	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180401
  03eb4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1345 :                 goto sr_error_exit;

  03eba	e9 0c 06 00 00	 jmp	 $sr_error_exit$1020
$LN989@resume_cmd:
$LN462@resume_cmd:

; 1346 :             }
; 1347 :             SR_READ_SKIP(file, len);

  03ebf	8b 54 24 60	 mov	 edx, DWORD PTR len$[rsp]
  03ec3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  03ec8	e8 00 00 00 00	 call	 sr_read_skip
  03ecd	85 c0		 test	 eax, eax
  03ecf	74 0a		 je	 SHORT $LN990@resume_cmd
  03ed1	b8 ff ff ff ff	 mov	 eax, -1
  03ed6	e9 54 06 00 00	 jmp	 $LN1@resume_cmd
$LN990@resume_cmd:
  03edb	33 c0		 xor	 eax, eax
  03edd	85 c0		 test	 eax, eax
  03edf	75 de		 jne	 SHORT $LN462@resume_cmd
$LN34@resume_cmd:

; 1348 :             break;
; 1349 : 
; 1350 :         } /* switch (key) */
; 1351 : 
; 1352 :     } /* while (key != SR_EOF) */

  03ee1	e9 ad c5 ff ff	 jmp	 $LN29@resume_cmd
$LN30@resume_cmd:
$LN465@resume_cmd:

; 1353 : 
; 1354 :     TRACE("SR: Resume File Processing Complete...\n");

  03ee6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180403
  03eed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  03ef3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  03ef9	85 c0		 test	 eax, eax
  03efb	74 0c		 je	 SHORT $LN991@resume_cmd
  03efd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180405
  03f04	e8 00 00 00 00	 call	 DebuggerTrace
$LN991@resume_cmd:
  03f09	33 c0		 xor	 eax, eax
  03f0b	85 c0		 test	 eax, eax
  03f0d	75 d7		 jne	 SHORT $LN465@resume_cmd
$LN468@resume_cmd:

; 1355 :     TRACE("SR: Resuming Devices...\n");

  03f0f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180406
  03f16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  03f1c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  03f22	85 c0		 test	 eax, eax
  03f24	74 0c		 je	 SHORT $LN992@resume_cmd
  03f26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180408
  03f2d	e8 00 00 00 00	 call	 DebuggerTrace
$LN992@resume_cmd:
  03f32	33 c0		 xor	 eax, eax
  03f34	85 c0		 test	 eax, eax
  03f36	75 d7		 jne	 SHORT $LN468@resume_cmd

; 1356 : 
; 1357 :     /* For all suspended devices, resume the `suspended' state */
; 1358 :     for (dev = sysblk.firstdev; dev; dev = dev->nextdev)

  03f38	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03f3f	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  03f46	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax
  03f4b	eb 0e		 jmp	 SHORT $LN471@resume_cmd
$LN469@resume_cmd:
  03f4d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03f52	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  03f56	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax
$LN471@resume_cmd:
  03f5b	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  03f61	0f 84 00 02 00
	00		 je	 $LN470@resume_cmd

; 1359 :     {
; 1360 :         if (dev->suspended && (dev->pmcw.flag5 & PMCW5_V))

  03f67	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03f6c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03f72	c1 e8 15	 shr	 eax, 21
  03f75	83 e0 01	 and	 eax, 1
  03f78	85 c0		 test	 eax, eax
  03f7a	0f 84 e2 01 00
	00		 je	 $LN993@resume_cmd
  03f80	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03f85	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  03f8c	83 e0 01	 and	 eax, 1
  03f8f	85 c0		 test	 eax, eax
  03f91	0f 84 cb 01 00
	00		 je	 $LN993@resume_cmd

; 1361 :         {
; 1362 :             dev->resumesuspended=1;

  03f97	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  03f9c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03fa2	0f ba e8 1a	 bts	 eax, 26
  03fa6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03fab	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1363 :             switch (sysblk.arch_mode) {

  03fb1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03fb8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  03fbe	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv2263[rsp], eax
  03fc5	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR tv2263[rsp], 0
  03fcd	74 1d		 je	 SHORT $LN994@resume_cmd
  03fcf	83 bc 24 b4 00
	00 00 01	 cmp	 DWORD PTR tv2263[rsp], 1
  03fd7	74 62		 je	 SHORT $LN995@resume_cmd
  03fd9	83 bc 24 b4 00
	00 00 02	 cmp	 DWORD PTR tv2263[rsp], 2
  03fe1	0f 84 a0 00 00
	00		 je	 $LN996@resume_cmd
  03fe7	e9 e7 00 00 00	 jmp	 $LN997@resume_cmd
$LN994@resume_cmd:

; 1364 : #if defined(_370)
; 1365 :             case ARCH_370_IDX:
; 1366 :                 rc = create_thread (&dev->tid, DETACHED,

  03fec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03ff3	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  03ff9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  03ffe	48 81 c1 14 02
	00 00		 add	 rcx, 532		; 00000214H
  04005	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180411
  0400c	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  04011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180412
  04018	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0401d	4c 8b 4c 24 70	 mov	 r9, QWORD PTR dev$[rsp]
  04022	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:s370_execute_ccw_chain
  04029	48 8b d0	 mov	 rdx, rax
  0402c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  04032	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 1367 :                                     s370_execute_ccw_chain, dev, "device thread");
; 1368 :                 break;

  04036	e9 b5 00 00 00	 jmp	 $LN472@resume_cmd
$LN995@resume_cmd:

; 1369 : #endif
; 1370 : #if defined(_390)
; 1371 :             case ARCH_390_IDX:
; 1372 :                 rc = create_thread (&dev->tid, DETACHED,

  0403b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  04042	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  04048	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0404d	48 81 c1 14 02
	00 00		 add	 rcx, 532		; 00000214H
  04054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180414
  0405b	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  04060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180415
  04067	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0406c	4c 8b 4c 24 70	 mov	 r9, QWORD PTR dev$[rsp]
  04071	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:s390_execute_ccw_chain
  04078	48 8b d0	 mov	 rdx, rax
  0407b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  04081	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 1373 :                                     s390_execute_ccw_chain, dev, "device thread");
; 1374 :                 break;

  04085	eb 69		 jmp	 SHORT $LN472@resume_cmd
$LN996@resume_cmd:

; 1375 : #endif
; 1376 : #if defined(_900)
; 1377 :             case ARCH_900_IDX:
; 1378 :                 rc = create_thread (&dev->tid, DETACHED,

  04087	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0408e	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  04094	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  04099	48 81 c1 14 02
	00 00		 add	 rcx, 532		; 00000214H
  040a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180417
  040a7	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  040ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180418
  040b3	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  040b8	4c 8b 4c 24 70	 mov	 r9, QWORD PTR dev$[rsp]
  040bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:z900_execute_ccw_chain
  040c4	48 8b d0	 mov	 rdx, rax
  040c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  040cd	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 1379 :                                     z900_execute_ccw_chain, dev, "device thread");
; 1380 :                 break;

  040d1	eb 1d		 jmp	 SHORT $LN472@resume_cmd
$LN997@resume_cmd:
$LN476@resume_cmd:

; 1381 : #endif
; 1382 :             default: CRASH();

  040d3	48 c7 84 24 90
	01 00 00 00 00
	00 00		 mov	 QWORD PTR p$13[rsp], 0
  040df	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR p$13[rsp]
  040e7	c6 00 00	 mov	 BYTE PTR [rax], 0
  040ea	33 c0		 xor	 eax, eax
  040ec	85 c0		 test	 eax, eax
  040ee	75 e3		 jne	 SHORT $LN476@resume_cmd
$LN472@resume_cmd:

; 1383 :             } /* switch (sysblk.arch_mode) */
; 1384 :             if (rc != 0)

  040f0	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  040f5	74 6b		 je	 SHORT $LN998@resume_cmd

; 1385 :             {
; 1386 :                 // "Error in function create_thread(): %s"
; 1387 :                 WRMSG(HHC00102, "E", strerror(rc));

  040f7	8b 4c 24 78	 mov	 ecx, DWORD PTR rc$[rsp]
  040fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  04101	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv2296[rsp], rax
  04109	b9 01 00 00 00	 mov	 ecx, 1
  0410e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04114	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR tv2296[rsp]
  0411c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  04121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180421
  04128	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0412d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180422
  04134	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04139	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0413e	41 b9 03 00 00
	00		 mov	 r9d, 3
  04144	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180423
  0414b	ba 6b 05 00 00	 mov	 edx, 1387		; 0000056bH
  04150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180424
  04157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1388 :                 goto sr_error_exit;

  0415d	e9 69 03 00 00	 jmp	 $sr_error_exit$1020
$LN998@resume_cmd:
$LN993@resume_cmd:

; 1389 :             }
; 1390 :         } /* If suspended device */
; 1391 :     } /* For each device */

  04162	e9 e6 fd ff ff	 jmp	 $LN469@resume_cmd
$LN470@resume_cmd:

; 1392 : 
; 1393 :     /* Indicate crw pending for any new devices */
; 1394 : #if defined(_370)
; 1395 :     if (sysblk.arch_mode != ARCH_370_IDX)

  04167	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0416e	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  04175	74 05		 je	 SHORT $LN999@resume_cmd

; 1396 : #endif
; 1397 :     machine_check_crwpend();

  04177	e8 00 00 00 00	 call	 machine_check_crwpend
$LN999@resume_cmd:
$LN479@resume_cmd:

; 1398 : 
; 1399 :     /* Start the CPUs */
; 1400 :     TRACE("SR: Resuming CPUs...\n");

  0417c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180426
  04183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  04189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0418f	85 c0		 test	 eax, eax
  04191	74 0c		 je	 SHORT $LN1000@resume_cmd
  04193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180428
  0419a	e8 00 00 00 00	 call	 DebuggerTrace
$LN1000@resume_cmd:
  0419f	33 c0		 xor	 eax, eax
  041a1	85 c0		 test	 eax, eax
  041a3	75 d7		 jne	 SHORT $LN479@resume_cmd

; 1401 :     OBTAIN_INTLOCK(NULL);

  041a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180429
  041ac	33 c9		 xor	 ecx, ecx
  041ae	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
$LN482@resume_cmd:

; 1402 :     ON_IC_IOPENDING;

  041b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  041ba	48 8b 80 b0 12
	00 00		 mov	 rax, QWORD PTR [rax+4784]
  041c1	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR mask$3[rsp], rax
  041c9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  041d0	8b 80 a0 12 00
	00		 mov	 eax, DWORD PTR [rax+4768]
  041d6	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  041db	85 c0		 test	 eax, eax
  041dd	0f 85 27 01 00
	00		 jne	 $LN1001@resume_cmd
  041e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  041ea	8b 80 a0 12 00
	00		 mov	 eax, DWORD PTR [rax+4768]
  041f0	0f ba e8 1e	 bts	 eax, 30
  041f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  041fb	89 81 a0 12 00
	00		 mov	 DWORD PTR [rcx+4768], eax
  04201	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR mask$3[rsp]
  04209	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR wake$10[rsp], rax
  04211	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$1[rsp], 0
  0421c	eb 23		 jmp	 SHORT $LN485@resume_cmd
$LN483@resume_cmd:
  0421e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR mask$3[rsp]
  04226	48 d1 e8	 shr	 rax, 1
  04229	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR mask$3[rsp], rax
  04231	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR i$1[rsp]
  04238	ff c0		 inc	 eax
  0423a	89 84 24 b8 00
	00 00		 mov	 DWORD PTR i$1[rsp], eax
$LN485@resume_cmd:
  04241	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR mask$3[rsp], 0
  0424a	0f 84 a6 00 00
	00		 je	 $LN484@resume_cmd
  04250	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR mask$3[rsp]
  04258	48 83 e0 01	 and	 rax, 1
  0425c	48 85 c0	 test	 rax, rax
  0425f	0f 84 8c 00 00
	00		 je	 $LN1002@resume_cmd
  04265	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR i$1[rsp]
  0426d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  04274	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0427c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR regs$2[rsp], rax
  04284	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$2[rsp]
  0428c	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  0428f	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  04294	85 c0		 test	 eax, eax
  04296	74 1d		 je	 SHORT $LN1003@resume_cmd
  04298	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$2[rsp]
  042a0	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  042a3	0d 00 00 00 c0	 or	 eax, -1073741824	; c0000000H
  042a8	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR regs$2[rsp]
  042b0	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  042b3	eb 3c		 jmp	 SHORT $LN1004@resume_cmd
$LN1003@resume_cmd:
  042b5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$2[rsp]
  042bd	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  042c0	0f ba e8 1e	 bts	 eax, 30
  042c4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR regs$2[rsp]
  042cc	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  042cf	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR regs$2[rsp]
  042d7	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  042db	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR wake$10[rsp]
  042e3	48 33 c8	 xor	 rcx, rax
  042e6	48 8b c1	 mov	 rax, rcx
  042e9	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR wake$10[rsp], rax
$LN1004@resume_cmd:
$LN1002@resume_cmd:
  042f1	e9 28 ff ff ff	 jmp	 $LN483@resume_cmd
$LN484@resume_cmd:
  042f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180434
  042fd	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR wake$10[rsp]
  04305	e8 00 00 00 00	 call	 wakeup_cpu_mask
$LN1001@resume_cmd:
  0430a	33 c0		 xor	 eax, eax
  0430c	85 c0		 test	 eax, eax
  0430e	0f 85 9f fe ff
	ff		 jne	 $LN482@resume_cmd

; 1403 :     for (i = 0; i < sysblk.maxcpu; i++)

  04314	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0431c	eb 0a		 jmp	 SHORT $LN488@resume_cmd
$LN486@resume_cmd:
  0431e	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  04322	ff c0		 inc	 eax
  04324	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN488@resume_cmd:
  04328	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0432f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04335	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  04339	0f 8d fc 00 00
	00		 jge	 $LN487@resume_cmd

; 1404 :         if (IS_CPU_ONLINE(i) && (started_mask & CPU_BIT(i)))

  0433f	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  04344	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0434b	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  04354	0f 84 dc 00 00
	00		 je	 $LN1005@resume_cmd
  0435a	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0435e	b9 01 00 00 00	 mov	 ecx, 1
  04363	48 89 8c 24 a0
	01 00 00	 mov	 QWORD PTR tv3527[rsp], rcx
  0436b	0f b6 c8	 movzx	 ecx, al
  0436e	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR tv3527[rsp]
  04376	48 d3 e0	 shl	 rax, cl
  04379	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR started_mask$[rsp]
  04381	48 23 c8	 and	 rcx, rax
  04384	48 8b c1	 mov	 rax, rcx
  04387	48 85 c0	 test	 rax, rax
  0438a	0f 84 a6 00 00
	00		 je	 $LN1005@resume_cmd

; 1405 :         {
; 1406 :             sysblk.regs[i]->opinterv = 0;

  04390	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  04395	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0439c	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  043a4	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  043aa	83 e0 ef	 and	 eax, -17		; ffffffefH
  043ad	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$[rsp]
  043b2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  043b9	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  043c1	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 1407 :             sysblk.regs[i]->cpustate = CPUSTATE_STARTED;

  043c7	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  043cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  043d3	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  043db	c6 40 60 01	 mov	 BYTE PTR [rax+96], 1

; 1408 :             sysblk.regs[i]->checkstop = 0;

  043df	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  043e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  043eb	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  043f3	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  043f9	83 e0 df	 and	 eax, -33		; ffffffdfH
  043fc	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR i$[rsp]
  04401	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  04408	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  04410	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 1409 :             WAKEUP_CPU(sysblk.regs[i]);

  04416	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  0441b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180436
  04422	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  04429	48 8b 8c c1 98
	0b 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+2968]
  04431	e8 00 00 00 00	 call	 wakeup_cpu
$LN1005@resume_cmd:

; 1410 :         }

  04436	e9 e3 fe ff ff	 jmp	 $LN486@resume_cmd
$LN487@resume_cmd:

; 1411 :     RELEASE_INTLOCK(NULL);

  0443b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG180437
  04442	33 c9		 xor	 ecx, ecx
  04444	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN491@resume_cmd:

; 1412 : 
; 1413 :     TRACE("SR: Resume Complete; System Resumed.\n");

  04449	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180438
  04450	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  04456	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0445c	85 c0		 test	 eax, eax
  0445e	74 0c		 je	 SHORT $LN1006@resume_cmd
  04460	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180440
  04467	e8 00 00 00 00	 call	 DebuggerTrace
$LN1006@resume_cmd:
  0446c	33 c0		 xor	 eax, eax
  0446e	85 c0		 test	 eax, eax
  04470	75 d7		 jne	 SHORT $LN491@resume_cmd

; 1414 :     return 0;

  04472	33 c0		 xor	 eax, eax
  04474	e9 b6 00 00 00	 jmp	 $LN1@resume_cmd
$sr_null_regs_exit$1021:

; 1415 : 
; 1416 : sr_null_regs_exit:
; 1417 :     // "SR: CPU key %8.8X found but no active CPU"
; 1418 :     WRMSG(HHC02019, "E", key);

  04479	b9 01 00 00 00	 mov	 ecx, 1
  0447e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04484	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR key$[rsp]
  0448b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0448f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180441
  04496	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0449b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180442
  044a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  044a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  044ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  044b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180443
  044b9	ba 8a 05 00 00	 mov	 edx, 1418		; 0000058aH
  044be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180444
  044c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$sr_error_exit$1020:

; 1419 :     goto sr_error_exit;
; 1420 : sr_error_exit:
; 1421 :     // "SR: error processing file '%s'"
; 1422 :     WRMSG(HHC02004, "E", fn);

  044cb	b9 01 00 00 00	 mov	 ecx, 1
  044d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  044d6	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR fn$[rsp]
  044de	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  044e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180445
  044ea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  044ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180446
  044f6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  044fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04500	41 b9 03 00 00
	00		 mov	 r9d, 3
  04506	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG180447
  0450d	ba 8e 05 00 00	 mov	 edx, 1422		; 0000058eH
  04512	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG180448
  04519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1423 :     SR_CLOSE (file);

  0451f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR file$[rsp]
  04524	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 1424 :     return -1;

  0452a	b8 ff ff ff ff	 mov	 eax, -1
$LN1@resume_cmd:
$LN1007@resume_cmd:

; 1425 : }

  0452f	48 8b 8c 24 10
	13 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  04537	48 33 cc	 xor	 rcx, rsp
  0453a	e8 00 00 00 00	 call	 __security_check_cookie
  0453f	48 81 c4 20 13
	00 00		 add	 rsp, 4896		; 00001320H
  04546	5f		 pop	 rdi
  04547	c3		 ret	 0
$LN1018@resume_cmd:
  04548	00 00 00 00	 DD	 $LN513@resume_cmd
  0454c	00 00 00 00	 DD	 $LN517@resume_cmd
  04550	00 00 00 00	 DD	 $LN520@resume_cmd
  04554	00 00 00 00	 DD	 $LN523@resume_cmd
  04558	00 00 00 00	 DD	 $LN526@resume_cmd
  0455c	00 00 00 00	 DD	 $LN529@resume_cmd
  04560	00 00 00 00	 DD	 $LN532@resume_cmd
  04564	00 00 00 00	 DD	 $LN535@resume_cmd
  04568	00 00 00 00	 DD	 $LN551@resume_cmd
  0456c	00 00 00 00	 DD	 $LN553@resume_cmd
  04570	00 00 00 00	 DD	 $LN555@resume_cmd
  04574	00 00 00 00	 DD	 $LN557@resume_cmd
  04578	00 00 00 00	 DD	 $LN559@resume_cmd
  0457c	00 00 00 00	 DD	 $LN561@resume_cmd
  04580	00 00 00 00	 DD	 $LN565@resume_cmd
  04584	00 00 00 00	 DD	 $LN572@resume_cmd
  04588	00 00 00 00	 DD	 $LN579@resume_cmd
  0458c	00 00 00 00	 DD	 $LN612@resume_cmd
  04590	00 00 00 00	 DD	 $LN584@resume_cmd
  04594	00 00 00 00	 DD	 $LN588@resume_cmd
  04598	00 00 00 00	 DD	 $LN595@resume_cmd
  0459c	00 00 00 00	 DD	 $LN601@resume_cmd
  045a0	00 00 00 00	 DD	 $LN608@resume_cmd
  045a4	00 00 00 00	 DD	 $LN610@resume_cmd
  045a8	00 00 00 00	 DD	 $LN614@resume_cmd
  045ac	00 00 00 00	 DD	 $LN563@resume_cmd
  045b0	00 00 00 00	 DD	 $LN570@resume_cmd
  045b4	00 00 00 00	 DD	 $LN577@resume_cmd
  045b8	00 00 00 00	 DD	 $LN537@resume_cmd
  045bc	00 00 00 00	 DD	 $LN539@resume_cmd
  045c0	00 00 00 00	 DD	 $LN541@resume_cmd
  045c4	00 00 00 00	 DD	 $LN545@resume_cmd
  045c8	00 00 00 00	 DD	 $LN547@resume_cmd
  045cc	00 00 00 00	 DD	 $LN549@resume_cmd
  045d0	00 00 00 00	 DD	 $LN543@resume_cmd
  045d4	00 00 00 00	 DD	 $LN988@resume_cmd
$LN1017@resume_cmd:
  045d8	00		 DB	 0
  045d9	23		 DB	 35			; 00000023H
  045da	23		 DB	 35			; 00000023H
  045db	23		 DB	 35			; 00000023H
  045dc	23		 DB	 35			; 00000023H
  045dd	01		 DB	 1
  045de	02		 DB	 2
  045df	03		 DB	 3
  045e0	04		 DB	 4
  045e1	05		 DB	 5
  045e2	06		 DB	 6
  045e3	07		 DB	 7
  045e4	08		 DB	 8
  045e5	09		 DB	 9
  045e6	0a		 DB	 10
  045e7	0b		 DB	 11
  045e8	0c		 DB	 12
  045e9	0d		 DB	 13
  045ea	23		 DB	 35			; 00000023H
  045eb	23		 DB	 35			; 00000023H
  045ec	23		 DB	 35			; 00000023H
  045ed	23		 DB	 35			; 00000023H
  045ee	23		 DB	 35			; 00000023H
  045ef	23		 DB	 35			; 00000023H
  045f0	23		 DB	 35			; 00000023H
  045f1	23		 DB	 35			; 00000023H
  045f2	23		 DB	 35			; 00000023H
  045f3	23		 DB	 35			; 00000023H
  045f4	23		 DB	 35			; 00000023H
  045f5	23		 DB	 35			; 00000023H
  045f6	23		 DB	 35			; 00000023H
  045f7	0e		 DB	 14
  045f8	0f		 DB	 15
  045f9	10		 DB	 16
  045fa	23		 DB	 35			; 00000023H
  045fb	23		 DB	 35			; 00000023H
  045fc	23		 DB	 35			; 00000023H
  045fd	23		 DB	 35			; 00000023H
  045fe	23		 DB	 35			; 00000023H
  045ff	23		 DB	 35			; 00000023H
  04600	23		 DB	 35			; 00000023H
  04601	23		 DB	 35			; 00000023H
  04602	23		 DB	 35			; 00000023H
  04603	23		 DB	 35			; 00000023H
  04604	23		 DB	 35			; 00000023H
  04605	23		 DB	 35			; 00000023H
  04606	11		 DB	 17
  04607	12		 DB	 18
  04608	13		 DB	 19
  04609	14		 DB	 20
  0460a	15		 DB	 21
  0460b	23		 DB	 35			; 00000023H
  0460c	23		 DB	 35			; 00000023H
  0460d	23		 DB	 35			; 00000023H
  0460e	23		 DB	 35			; 00000023H
  0460f	23		 DB	 35			; 00000023H
  04610	23		 DB	 35			; 00000023H
  04611	23		 DB	 35			; 00000023H
  04612	23		 DB	 35			; 00000023H
  04613	23		 DB	 35			; 00000023H
  04614	23		 DB	 35			; 00000023H
  04615	23		 DB	 35			; 00000023H
  04616	16		 DB	 22
  04617	17		 DB	 23
  04618	23		 DB	 35			; 00000023H
  04619	23		 DB	 35			; 00000023H
  0461a	18		 DB	 24
  0461b	19		 DB	 25
  0461c	1a		 DB	 26
  0461d	1b		 DB	 27
  0461e	1c		 DB	 28
  0461f	1d		 DB	 29
  04620	23		 DB	 35			; 00000023H
  04621	23		 DB	 35			; 00000023H
  04622	23		 DB	 35			; 00000023H
  04623	23		 DB	 35			; 00000023H
  04624	23		 DB	 35			; 00000023H
  04625	23		 DB	 35			; 00000023H
  04626	1e		 DB	 30
  04627	1f		 DB	 31
  04628	20		 DB	 32			; 00000020H
  04629	21		 DB	 33			; 00000021H
  0462a	22		 DB	 34			; 00000022H
  0462b	90		 npad	 1
$LN1016@resume_cmd:
  0462c	00 00 00 00	 DD	 $LN641@resume_cmd
  04630	00 00 00 00	 DD	 $LN642@resume_cmd
  04634	00 00 00 00	 DD	 $LN643@resume_cmd
  04638	00 00 00 00	 DD	 $LN644@resume_cmd
  0463c	00 00 00 00	 DD	 $LN645@resume_cmd
  04640	00 00 00 00	 DD	 $LN646@resume_cmd
  04644	00 00 00 00	 DD	 $LN647@resume_cmd
  04648	00 00 00 00	 DD	 $LN648@resume_cmd
  0464c	00 00 00 00	 DD	 $LN649@resume_cmd
  04650	00 00 00 00	 DD	 $LN650@resume_cmd
  04654	00 00 00 00	 DD	 $LN651@resume_cmd
  04658	00 00 00 00	 DD	 $LN652@resume_cmd
  0465c	00 00 00 00	 DD	 $LN653@resume_cmd
  04660	00 00 00 00	 DD	 $LN654@resume_cmd
  04664	00 00 00 00	 DD	 $LN655@resume_cmd
  04668	00 00 00 00	 DD	 $LN658@resume_cmd
  0466c	00 00 00 00	 DD	 $LN659@resume_cmd
  04670	00 00 00 00	 DD	 $LN660@resume_cmd
  04674	00 00 00 00	 DD	 $LN661@resume_cmd
  04678	00 00 00 00	 DD	 $LN662@resume_cmd
  0467c	00 00 00 00	 DD	 $LN663@resume_cmd
  04680	00 00 00 00	 DD	 $LN664@resume_cmd
  04684	00 00 00 00	 DD	 $LN665@resume_cmd
  04688	00 00 00 00	 DD	 $LN666@resume_cmd
  0468c	00 00 00 00	 DD	 $LN667@resume_cmd
  04690	00 00 00 00	 DD	 $LN668@resume_cmd
  04694	00 00 00 00	 DD	 $LN669@resume_cmd
  04698	00 00 00 00	 DD	 $LN670@resume_cmd
  0469c	00 00 00 00	 DD	 $LN671@resume_cmd
  046a0	00 00 00 00	 DD	 $LN672@resume_cmd
  046a4	00 00 00 00	 DD	 $LN673@resume_cmd
  046a8	00 00 00 00	 DD	 $LN676@resume_cmd
  046ac	00 00 00 00	 DD	 $LN677@resume_cmd
  046b0	00 00 00 00	 DD	 $LN678@resume_cmd
  046b4	00 00 00 00	 DD	 $LN679@resume_cmd
  046b8	00 00 00 00	 DD	 $LN680@resume_cmd
  046bc	00 00 00 00	 DD	 $LN681@resume_cmd
  046c0	00 00 00 00	 DD	 $LN682@resume_cmd
  046c4	00 00 00 00	 DD	 $LN683@resume_cmd
  046c8	00 00 00 00	 DD	 $LN684@resume_cmd
  046cc	00 00 00 00	 DD	 $LN685@resume_cmd
  046d0	00 00 00 00	 DD	 $LN686@resume_cmd
  046d4	00 00 00 00	 DD	 $LN687@resume_cmd
  046d8	00 00 00 00	 DD	 $LN688@resume_cmd
  046dc	00 00 00 00	 DD	 $LN689@resume_cmd
  046e0	00 00 00 00	 DD	 $LN690@resume_cmd
  046e4	00 00 00 00	 DD	 $LN691@resume_cmd
  046e8	00 00 00 00	 DD	 $LN694@resume_cmd
  046ec	00 00 00 00	 DD	 $LN695@resume_cmd
  046f0	00 00 00 00	 DD	 $LN696@resume_cmd
  046f4	00 00 00 00	 DD	 $LN697@resume_cmd
  046f8	00 00 00 00	 DD	 $LN698@resume_cmd
  046fc	00 00 00 00	 DD	 $LN699@resume_cmd
  04700	00 00 00 00	 DD	 $LN700@resume_cmd
  04704	00 00 00 00	 DD	 $LN701@resume_cmd
  04708	00 00 00 00	 DD	 $LN702@resume_cmd
  0470c	00 00 00 00	 DD	 $LN703@resume_cmd
  04710	00 00 00 00	 DD	 $LN704@resume_cmd
  04714	00 00 00 00	 DD	 $LN705@resume_cmd
  04718	00 00 00 00	 DD	 $LN706@resume_cmd
  0471c	00 00 00 00	 DD	 $LN707@resume_cmd
  04720	00 00 00 00	 DD	 $LN708@resume_cmd
  04724	00 00 00 00	 DD	 $LN709@resume_cmd
  04728	00 00 00 00	 DD	 $LN710@resume_cmd
  0472c	00 00 00 00	 DD	 $LN711@resume_cmd
  04730	00 00 00 00	 DD	 $LN712@resume_cmd
  04734	00 00 00 00	 DD	 $LN713@resume_cmd
  04738	00 00 00 00	 DD	 $LN714@resume_cmd
  0473c	00 00 00 00	 DD	 $LN715@resume_cmd
  04740	00 00 00 00	 DD	 $LN716@resume_cmd
  04744	00 00 00 00	 DD	 $LN717@resume_cmd
  04748	00 00 00 00	 DD	 $LN718@resume_cmd
  0474c	00 00 00 00	 DD	 $LN719@resume_cmd
  04750	00 00 00 00	 DD	 $LN720@resume_cmd
  04754	00 00 00 00	 DD	 $LN721@resume_cmd
  04758	00 00 00 00	 DD	 $LN722@resume_cmd
  0475c	00 00 00 00	 DD	 $LN723@resume_cmd
  04760	00 00 00 00	 DD	 $LN724@resume_cmd
  04764	00 00 00 00	 DD	 $LN725@resume_cmd
  04768	00 00 00 00	 DD	 $LN728@resume_cmd
  0476c	00 00 00 00	 DD	 $LN731@resume_cmd
  04770	00 00 00 00	 DD	 $LN734@resume_cmd
  04774	00 00 00 00	 DD	 $LN737@resume_cmd
  04778	00 00 00 00	 DD	 $LN740@resume_cmd
  0477c	00 00 00 00	 DD	 $LN743@resume_cmd
  04780	00 00 00 00	 DD	 $LN746@resume_cmd
  04784	00 00 00 00	 DD	 $LN749@resume_cmd
  04788	00 00 00 00	 DD	 $LN752@resume_cmd
  0478c	00 00 00 00	 DD	 $LN755@resume_cmd
  04790	00 00 00 00	 DD	 $LN782@resume_cmd
  04794	00 00 00 00	 DD	 $LN785@resume_cmd
  04798	00 00 00 00	 DD	 $LN758@resume_cmd
  0479c	00 00 00 00	 DD	 $LN761@resume_cmd
  047a0	00 00 00 00	 DD	 $LN764@resume_cmd
  047a4	00 00 00 00	 DD	 $LN767@resume_cmd
  047a8	00 00 00 00	 DD	 $LN770@resume_cmd
  047ac	00 00 00 00	 DD	 $LN773@resume_cmd
  047b0	00 00 00 00	 DD	 $LN776@resume_cmd
  047b4	00 00 00 00	 DD	 $LN779@resume_cmd
  047b8	00 00 00 00	 DD	 $LN788@resume_cmd
  047bc	00 00 00 00	 DD	 $LN789@resume_cmd
  047c0	00 00 00 00	 DD	 $LN790@resume_cmd
  047c4	00 00 00 00	 DD	 $LN791@resume_cmd
  047c8	00 00 00 00	 DD	 $LN792@resume_cmd
  047cc	00 00 00 00	 DD	 $LN793@resume_cmd
  047d0	00 00 00 00	 DD	 $LN794@resume_cmd
  047d4	00 00 00 00	 DD	 $LN795@resume_cmd
  047d8	00 00 00 00	 DD	 $LN796@resume_cmd
  047dc	00 00 00 00	 DD	 $LN797@resume_cmd
  047e0	00 00 00 00	 DD	 $LN798@resume_cmd
  047e4	00 00 00 00	 DD	 $LN799@resume_cmd
  047e8	00 00 00 00	 DD	 $LN800@resume_cmd
  047ec	00 00 00 00	 DD	 $LN801@resume_cmd
  047f0	00 00 00 00	 DD	 $LN802@resume_cmd
  047f4	00 00 00 00	 DD	 $LN803@resume_cmd
  047f8	00 00 00 00	 DD	 $LN804@resume_cmd
  047fc	00 00 00 00	 DD	 $LN805@resume_cmd
  04800	00 00 00 00	 DD	 $LN806@resume_cmd
  04804	00 00 00 00	 DD	 $LN807@resume_cmd
  04808	00 00 00 00	 DD	 $LN808@resume_cmd
  0480c	00 00 00 00	 DD	 $LN809@resume_cmd
  04810	00 00 00 00	 DD	 $LN810@resume_cmd
  04814	00 00 00 00	 DD	 $LN811@resume_cmd
  04818	00 00 00 00	 DD	 $LN812@resume_cmd
  0481c	00 00 00 00	 DD	 $LN813@resume_cmd
  04820	00 00 00 00	 DD	 $LN814@resume_cmd
  04824	00 00 00 00	 DD	 $LN815@resume_cmd
  04828	00 00 00 00	 DD	 $LN816@resume_cmd
  0482c	00 00 00 00	 DD	 $LN817@resume_cmd
  04830	00 00 00 00	 DD	 $LN818@resume_cmd
  04834	00 00 00 00	 DD	 $LN819@resume_cmd
  04838	00 00 00 00	 DD	 $LN823@resume_cmd
  0483c	00 00 00 00	 DD	 $LN824@resume_cmd
  04840	00 00 00 00	 DD	 $LN825@resume_cmd
  04844	00 00 00 00	 DD	 $LN826@resume_cmd
  04848	00 00 00 00	 DD	 $LN827@resume_cmd
  0484c	00 00 00 00	 DD	 $LN828@resume_cmd
  04850	00 00 00 00	 DD	 $LN829@resume_cmd
  04854	00 00 00 00	 DD	 $LN830@resume_cmd
  04858	00 00 00 00	 DD	 $LN831@resume_cmd
  0485c	00 00 00 00	 DD	 $LN832@resume_cmd
  04860	00 00 00 00	 DD	 $LN833@resume_cmd
  04864	00 00 00 00	 DD	 $LN834@resume_cmd
  04868	00 00 00 00	 DD	 $LN835@resume_cmd
  0486c	00 00 00 00	 DD	 $LN836@resume_cmd
  04870	00 00 00 00	 DD	 $LN837@resume_cmd
  04874	00 00 00 00	 DD	 $LN838@resume_cmd
  04878	00 00 00 00	 DD	 $LN839@resume_cmd
  0487c	00 00 00 00	 DD	 $LN840@resume_cmd
  04880	00 00 00 00	 DD	 $LN841@resume_cmd
  04884	00 00 00 00	 DD	 $LN842@resume_cmd
  04888	00 00 00 00	 DD	 $LN843@resume_cmd
  0488c	00 00 00 00	 DD	 $LN844@resume_cmd
  04890	00 00 00 00	 DD	 $LN845@resume_cmd
  04894	00 00 00 00	 DD	 $LN846@resume_cmd
  04898	00 00 00 00	 DD	 $LN847@resume_cmd
  0489c	00 00 00 00	 DD	 $LN848@resume_cmd
  048a0	00 00 00 00	 DD	 $LN849@resume_cmd
  048a4	00 00 00 00	 DD	 $LN850@resume_cmd
  048a8	00 00 00 00	 DD	 $LN851@resume_cmd
  048ac	00 00 00 00	 DD	 $LN852@resume_cmd
  048b0	00 00 00 00	 DD	 $LN853@resume_cmd
  048b4	00 00 00 00	 DD	 $LN854@resume_cmd
  048b8	00 00 00 00	 DD	 $LN988@resume_cmd
$LN1015@resume_cmd:
  048bc	00		 DB	 0
  048bd	01		 DB	 1
  048be	02		 DB	 2
  048bf	03		 DB	 3
  048c0	04		 DB	 4
  048c1	05		 DB	 5
  048c2	06		 DB	 6
  048c3	07		 DB	 7
  048c4	08		 DB	 8
  048c5	09		 DB	 9
  048c6	0a		 DB	 10
  048c7	0b		 DB	 11
  048c8	0c		 DB	 12
  048c9	0d		 DB	 13
  048ca	0e		 DB	 14
  048cb	a3		 DB	 -93			; ffffffffffffffa3H
  048cc	a3		 DB	 -93			; ffffffffffffffa3H
  048cd	a3		 DB	 -93			; ffffffffffffffa3H
  048ce	a3		 DB	 -93			; ffffffffffffffa3H
  048cf	a3		 DB	 -93			; ffffffffffffffa3H
  048d0	a3		 DB	 -93			; ffffffffffffffa3H
  048d1	a3		 DB	 -93			; ffffffffffffffa3H
  048d2	a3		 DB	 -93			; ffffffffffffffa3H
  048d3	a3		 DB	 -93			; ffffffffffffffa3H
  048d4	a3		 DB	 -93			; ffffffffffffffa3H
  048d5	a3		 DB	 -93			; ffffffffffffffa3H
  048d6	a3		 DB	 -93			; ffffffffffffffa3H
  048d7	a3		 DB	 -93			; ffffffffffffffa3H
  048d8	a3		 DB	 -93			; ffffffffffffffa3H
  048d9	a3		 DB	 -93			; ffffffffffffffa3H
  048da	a3		 DB	 -93			; ffffffffffffffa3H
  048db	0f		 DB	 15
  048dc	10		 DB	 16
  048dd	11		 DB	 17
  048de	12		 DB	 18
  048df	13		 DB	 19
  048e0	14		 DB	 20
  048e1	15		 DB	 21
  048e2	16		 DB	 22
  048e3	17		 DB	 23
  048e4	18		 DB	 24
  048e5	19		 DB	 25
  048e6	1a		 DB	 26
  048e7	1b		 DB	 27
  048e8	1c		 DB	 28
  048e9	1d		 DB	 29
  048ea	1e		 DB	 30
  048eb	a3		 DB	 -93			; ffffffffffffffa3H
  048ec	a3		 DB	 -93			; ffffffffffffffa3H
  048ed	a3		 DB	 -93			; ffffffffffffffa3H
  048ee	a3		 DB	 -93			; ffffffffffffffa3H
  048ef	a3		 DB	 -93			; ffffffffffffffa3H
  048f0	a3		 DB	 -93			; ffffffffffffffa3H
  048f1	a3		 DB	 -93			; ffffffffffffffa3H
  048f2	a3		 DB	 -93			; ffffffffffffffa3H
  048f3	a3		 DB	 -93			; ffffffffffffffa3H
  048f4	a3		 DB	 -93			; ffffffffffffffa3H
  048f5	a3		 DB	 -93			; ffffffffffffffa3H
  048f6	a3		 DB	 -93			; ffffffffffffffa3H
  048f7	a3		 DB	 -93			; ffffffffffffffa3H
  048f8	a3		 DB	 -93			; ffffffffffffffa3H
  048f9	a3		 DB	 -93			; ffffffffffffffa3H
  048fa	a3		 DB	 -93			; ffffffffffffffa3H
  048fb	1f		 DB	 31
  048fc	20		 DB	 32			; 00000020H
  048fd	21		 DB	 33			; 00000021H
  048fe	22		 DB	 34			; 00000022H
  048ff	23		 DB	 35			; 00000023H
  04900	24		 DB	 36			; 00000024H
  04901	25		 DB	 37			; 00000025H
  04902	26		 DB	 38			; 00000026H
  04903	27		 DB	 39			; 00000027H
  04904	28		 DB	 40			; 00000028H
  04905	29		 DB	 41			; 00000029H
  04906	2a		 DB	 42			; 0000002aH
  04907	2b		 DB	 43			; 0000002bH
  04908	2c		 DB	 44			; 0000002cH
  04909	2d		 DB	 45			; 0000002dH
  0490a	2e		 DB	 46			; 0000002eH
  0490b	a3		 DB	 -93			; ffffffffffffffa3H
  0490c	a3		 DB	 -93			; ffffffffffffffa3H
  0490d	a3		 DB	 -93			; ffffffffffffffa3H
  0490e	a3		 DB	 -93			; ffffffffffffffa3H
  0490f	a3		 DB	 -93			; ffffffffffffffa3H
  04910	a3		 DB	 -93			; ffffffffffffffa3H
  04911	a3		 DB	 -93			; ffffffffffffffa3H
  04912	a3		 DB	 -93			; ffffffffffffffa3H
  04913	a3		 DB	 -93			; ffffffffffffffa3H
  04914	a3		 DB	 -93			; ffffffffffffffa3H
  04915	a3		 DB	 -93			; ffffffffffffffa3H
  04916	a3		 DB	 -93			; ffffffffffffffa3H
  04917	a3		 DB	 -93			; ffffffffffffffa3H
  04918	a3		 DB	 -93			; ffffffffffffffa3H
  04919	a3		 DB	 -93			; ffffffffffffffa3H
  0491a	a3		 DB	 -93			; ffffffffffffffa3H
  0491b	2f		 DB	 47			; 0000002fH
  0491c	30		 DB	 48			; 00000030H
  0491d	31		 DB	 49			; 00000031H
  0491e	32		 DB	 50			; 00000032H
  0491f	33		 DB	 51			; 00000033H
  04920	34		 DB	 52			; 00000034H
  04921	35		 DB	 53			; 00000035H
  04922	36		 DB	 54			; 00000036H
  04923	37		 DB	 55			; 00000037H
  04924	38		 DB	 56			; 00000038H
  04925	39		 DB	 57			; 00000039H
  04926	3a		 DB	 58			; 0000003aH
  04927	3b		 DB	 59			; 0000003bH
  04928	3c		 DB	 60			; 0000003cH
  04929	3d		 DB	 61			; 0000003dH
  0492a	3e		 DB	 62			; 0000003eH
  0492b	3f		 DB	 63			; 0000003fH
  0492c	40		 DB	 64			; 00000040H
  0492d	41		 DB	 65			; 00000041H
  0492e	42		 DB	 66			; 00000042H
  0492f	43		 DB	 67			; 00000043H
  04930	44		 DB	 68			; 00000044H
  04931	45		 DB	 69			; 00000045H
  04932	46		 DB	 70			; 00000046H
  04933	47		 DB	 71			; 00000047H
  04934	48		 DB	 72			; 00000048H
  04935	49		 DB	 73			; 00000049H
  04936	4a		 DB	 74			; 0000004aH
  04937	4b		 DB	 75			; 0000004bH
  04938	4c		 DB	 76			; 0000004cH
  04939	4d		 DB	 77			; 0000004dH
  0493a	4e		 DB	 78			; 0000004eH
  0493b	a3		 DB	 -93			; ffffffffffffffa3H
  0493c	a3		 DB	 -93			; ffffffffffffffa3H
  0493d	a3		 DB	 -93			; ffffffffffffffa3H
  0493e	a3		 DB	 -93			; ffffffffffffffa3H
  0493f	a3		 DB	 -93			; ffffffffffffffa3H
  04940	a3		 DB	 -93			; ffffffffffffffa3H
  04941	a3		 DB	 -93			; ffffffffffffffa3H
  04942	a3		 DB	 -93			; ffffffffffffffa3H
  04943	a3		 DB	 -93			; ffffffffffffffa3H
  04944	a3		 DB	 -93			; ffffffffffffffa3H
  04945	a3		 DB	 -93			; ffffffffffffffa3H
  04946	a3		 DB	 -93			; ffffffffffffffa3H
  04947	a3		 DB	 -93			; ffffffffffffffa3H
  04948	a3		 DB	 -93			; ffffffffffffffa3H
  04949	a3		 DB	 -93			; ffffffffffffffa3H
  0494a	a3		 DB	 -93			; ffffffffffffffa3H
  0494b	a3		 DB	 -93			; ffffffffffffffa3H
  0494c	a3		 DB	 -93			; ffffffffffffffa3H
  0494d	a3		 DB	 -93			; ffffffffffffffa3H
  0494e	a3		 DB	 -93			; ffffffffffffffa3H
  0494f	a3		 DB	 -93			; ffffffffffffffa3H
  04950	a3		 DB	 -93			; ffffffffffffffa3H
  04951	a3		 DB	 -93			; ffffffffffffffa3H
  04952	a3		 DB	 -93			; ffffffffffffffa3H
  04953	a3		 DB	 -93			; ffffffffffffffa3H
  04954	a3		 DB	 -93			; ffffffffffffffa3H
  04955	a3		 DB	 -93			; ffffffffffffffa3H
  04956	a3		 DB	 -93			; ffffffffffffffa3H
  04957	a3		 DB	 -93			; ffffffffffffffa3H
  04958	a3		 DB	 -93			; ffffffffffffffa3H
  04959	a3		 DB	 -93			; ffffffffffffffa3H
  0495a	a3		 DB	 -93			; ffffffffffffffa3H
  0495b	a3		 DB	 -93			; ffffffffffffffa3H
  0495c	a3		 DB	 -93			; ffffffffffffffa3H
  0495d	a3		 DB	 -93			; ffffffffffffffa3H
  0495e	a3		 DB	 -93			; ffffffffffffffa3H
  0495f	a3		 DB	 -93			; ffffffffffffffa3H
  04960	a3		 DB	 -93			; ffffffffffffffa3H
  04961	a3		 DB	 -93			; ffffffffffffffa3H
  04962	a3		 DB	 -93			; ffffffffffffffa3H
  04963	a3		 DB	 -93			; ffffffffffffffa3H
  04964	a3		 DB	 -93			; ffffffffffffffa3H
  04965	a3		 DB	 -93			; ffffffffffffffa3H
  04966	a3		 DB	 -93			; ffffffffffffffa3H
  04967	a3		 DB	 -93			; ffffffffffffffa3H
  04968	a3		 DB	 -93			; ffffffffffffffa3H
  04969	a3		 DB	 -93			; ffffffffffffffa3H
  0496a	a3		 DB	 -93			; ffffffffffffffa3H
  0496b	a3		 DB	 -93			; ffffffffffffffa3H
  0496c	a3		 DB	 -93			; ffffffffffffffa3H
  0496d	a3		 DB	 -93			; ffffffffffffffa3H
  0496e	a3		 DB	 -93			; ffffffffffffffa3H
  0496f	a3		 DB	 -93			; ffffffffffffffa3H
  04970	a3		 DB	 -93			; ffffffffffffffa3H
  04971	a3		 DB	 -93			; ffffffffffffffa3H
  04972	a3		 DB	 -93			; ffffffffffffffa3H
  04973	a3		 DB	 -93			; ffffffffffffffa3H
  04974	a3		 DB	 -93			; ffffffffffffffa3H
  04975	a3		 DB	 -93			; ffffffffffffffa3H
  04976	a3		 DB	 -93			; ffffffffffffffa3H
  04977	a3		 DB	 -93			; ffffffffffffffa3H
  04978	a3		 DB	 -93			; ffffffffffffffa3H
  04979	a3		 DB	 -93			; ffffffffffffffa3H
  0497a	a3		 DB	 -93			; ffffffffffffffa3H
  0497b	a3		 DB	 -93			; ffffffffffffffa3H
  0497c	a3		 DB	 -93			; ffffffffffffffa3H
  0497d	a3		 DB	 -93			; ffffffffffffffa3H
  0497e	a3		 DB	 -93			; ffffffffffffffa3H
  0497f	a3		 DB	 -93			; ffffffffffffffa3H
  04980	a3		 DB	 -93			; ffffffffffffffa3H
  04981	a3		 DB	 -93			; ffffffffffffffa3H
  04982	a3		 DB	 -93			; ffffffffffffffa3H
  04983	a3		 DB	 -93			; ffffffffffffffa3H
  04984	a3		 DB	 -93			; ffffffffffffffa3H
  04985	a3		 DB	 -93			; ffffffffffffffa3H
  04986	a3		 DB	 -93			; ffffffffffffffa3H
  04987	a3		 DB	 -93			; ffffffffffffffa3H
  04988	a3		 DB	 -93			; ffffffffffffffa3H
  04989	a3		 DB	 -93			; ffffffffffffffa3H
  0498a	a3		 DB	 -93			; ffffffffffffffa3H
  0498b	a3		 DB	 -93			; ffffffffffffffa3H
  0498c	a3		 DB	 -93			; ffffffffffffffa3H
  0498d	a3		 DB	 -93			; ffffffffffffffa3H
  0498e	a3		 DB	 -93			; ffffffffffffffa3H
  0498f	a3		 DB	 -93			; ffffffffffffffa3H
  04990	a3		 DB	 -93			; ffffffffffffffa3H
  04991	a3		 DB	 -93			; ffffffffffffffa3H
  04992	a3		 DB	 -93			; ffffffffffffffa3H
  04993	a3		 DB	 -93			; ffffffffffffffa3H
  04994	a3		 DB	 -93			; ffffffffffffffa3H
  04995	a3		 DB	 -93			; ffffffffffffffa3H
  04996	a3		 DB	 -93			; ffffffffffffffa3H
  04997	a3		 DB	 -93			; ffffffffffffffa3H
  04998	a3		 DB	 -93			; ffffffffffffffa3H
  04999	a3		 DB	 -93			; ffffffffffffffa3H
  0499a	a3		 DB	 -93			; ffffffffffffffa3H
  0499b	4f		 DB	 79			; 0000004fH
  0499c	50		 DB	 80			; 00000050H
  0499d	51		 DB	 81			; 00000051H
  0499e	52		 DB	 82			; 00000052H
  0499f	53		 DB	 83			; 00000053H
  049a0	54		 DB	 84			; 00000054H
  049a1	55		 DB	 85			; 00000055H
  049a2	56		 DB	 86			; 00000056H
  049a3	57		 DB	 87			; 00000057H
  049a4	58		 DB	 88			; 00000058H
  049a5	59		 DB	 89			; 00000059H
  049a6	5a		 DB	 90			; 0000005aH
  049a7	a3		 DB	 -93			; ffffffffffffffa3H
  049a8	5b		 DB	 91			; 0000005bH
  049a9	a3		 DB	 -93			; ffffffffffffffa3H
  049aa	a3		 DB	 -93			; ffffffffffffffa3H
  049ab	5c		 DB	 92			; 0000005cH
  049ac	5d		 DB	 93			; 0000005dH
  049ad	5e		 DB	 94			; 0000005eH
  049ae	a3		 DB	 -93			; ffffffffffffffa3H
  049af	a3		 DB	 -93			; ffffffffffffffa3H
  049b0	a3		 DB	 -93			; ffffffffffffffa3H
  049b1	5f		 DB	 95			; 0000005fH
  049b2	60		 DB	 96			; 00000060H
  049b3	a3		 DB	 -93			; ffffffffffffffa3H
  049b4	61		 DB	 97			; 00000061H
  049b5	62		 DB	 98			; 00000062H
  049b6	a3		 DB	 -93			; ffffffffffffffa3H
  049b7	a3		 DB	 -93			; ffffffffffffffa3H
  049b8	a3		 DB	 -93			; ffffffffffffffa3H
  049b9	a3		 DB	 -93			; ffffffffffffffa3H
  049ba	a3		 DB	 -93			; ffffffffffffffa3H
  049bb	63		 DB	 99			; 00000063H
  049bc	64		 DB	 100			; 00000064H
  049bd	65		 DB	 101			; 00000065H
  049be	66		 DB	 102			; 00000066H
  049bf	67		 DB	 103			; 00000067H
  049c0	68		 DB	 104			; 00000068H
  049c1	69		 DB	 105			; 00000069H
  049c2	6a		 DB	 106			; 0000006aH
  049c3	6b		 DB	 107			; 0000006bH
  049c4	6c		 DB	 108			; 0000006cH
  049c5	6d		 DB	 109			; 0000006dH
  049c6	6e		 DB	 110			; 0000006eH
  049c7	6f		 DB	 111			; 0000006fH
  049c8	70		 DB	 112			; 00000070H
  049c9	71		 DB	 113			; 00000071H
  049ca	72		 DB	 114			; 00000072H
  049cb	73		 DB	 115			; 00000073H
  049cc	74		 DB	 116			; 00000074H
  049cd	75		 DB	 117			; 00000075H
  049ce	76		 DB	 118			; 00000076H
  049cf	77		 DB	 119			; 00000077H
  049d0	78		 DB	 120			; 00000078H
  049d1	79		 DB	 121			; 00000079H
  049d2	7a		 DB	 122			; 0000007aH
  049d3	7b		 DB	 123			; 0000007bH
  049d4	7c		 DB	 124			; 0000007cH
  049d5	7d		 DB	 125			; 0000007dH
  049d6	7e		 DB	 126			; 0000007eH
  049d7	7f		 DB	 127			; 0000007fH
  049d8	80		 DB	 -128			; ffffffffffffff80H
  049d9	81		 DB	 -127			; ffffffffffffff81H
  049da	82		 DB	 -126			; ffffffffffffff82H
  049db	83		 DB	 -125			; ffffffffffffff83H
  049dc	84		 DB	 -124			; ffffffffffffff84H
  049dd	85		 DB	 -123			; ffffffffffffff85H
  049de	86		 DB	 -122			; ffffffffffffff86H
  049df	87		 DB	 -121			; ffffffffffffff87H
  049e0	88		 DB	 -120			; ffffffffffffff88H
  049e1	89		 DB	 -119			; ffffffffffffff89H
  049e2	8a		 DB	 -118			; ffffffffffffff8aH
  049e3	8b		 DB	 -117			; ffffffffffffff8bH
  049e4	8c		 DB	 -116			; ffffffffffffff8cH
  049e5	8d		 DB	 -115			; ffffffffffffff8dH
  049e6	8e		 DB	 -114			; ffffffffffffff8eH
  049e7	8f		 DB	 -113			; ffffffffffffff8fH
  049e8	90		 DB	 -112			; ffffffffffffff90H
  049e9	91		 DB	 -111			; ffffffffffffff91H
  049ea	92		 DB	 -110			; ffffffffffffff92H
  049eb	93		 DB	 -109			; ffffffffffffff93H
  049ec	94		 DB	 -108			; ffffffffffffff94H
  049ed	95		 DB	 -107			; ffffffffffffff95H
  049ee	96		 DB	 -106			; ffffffffffffff96H
  049ef	97		 DB	 -105			; ffffffffffffff97H
  049f0	98		 DB	 -104			; ffffffffffffff98H
  049f1	99		 DB	 -103			; ffffffffffffff99H
  049f2	9a		 DB	 -102			; ffffffffffffff9aH
  049f3	9b		 DB	 -101			; ffffffffffffff9bH
  049f4	9c		 DB	 -100			; ffffffffffffff9cH
  049f5	9d		 DB	 -99			; ffffffffffffff9dH
  049f6	9e		 DB	 -98			; ffffffffffffff9eH
  049f7	9f		 DB	 -97			; ffffffffffffff9fH
  049f8	a0		 DB	 -96			; ffffffffffffffa0H
  049f9	a1		 DB	 -95			; ffffffffffffffa1H
  049fa	a2		 DB	 -94			; ffffffffffffffa2H
  049fb	90		 npad	 1
$LN1014@resume_cmd:
  049fc	00 00 00 00	 DD	 $LN981@resume_cmd
  04a00	00 00 00 00	 DD	 $LN863@resume_cmd
  04a04	00 00 00 00	 DD	 $LN868@resume_cmd
  04a08	00 00 00 00	 DD	 $LN871@resume_cmd
  04a0c	00 00 00 00	 DD	 $LN861@resume_cmd
  04a10	00 00 00 00	 DD	 $LN988@resume_cmd
  04a14	00 00 00 00	 DD	 $LN988@resume_cmd
  04a18	00 00 00 00	 DD	 $LN988@resume_cmd
  04a1c	00 00 00 00	 DD	 $LN988@resume_cmd
  04a20	00 00 00 00	 DD	 $LN988@resume_cmd
  04a24	00 00 00 00	 DD	 $LN988@resume_cmd
  04a28	00 00 00 00	 DD	 $LN988@resume_cmd
  04a2c	00 00 00 00	 DD	 $LN988@resume_cmd
  04a30	00 00 00 00	 DD	 $LN988@resume_cmd
  04a34	00 00 00 00	 DD	 $LN988@resume_cmd
  04a38	00 00 00 00	 DD	 $LN879@resume_cmd
  04a3c	00 00 00 00	 DD	 $LN884@resume_cmd
  04a40	00 00 00 00	 DD	 $LN889@resume_cmd
  04a44	00 00 00 00	 DD	 $LN894@resume_cmd
  04a48	00 00 00 00	 DD	 $LN899@resume_cmd
  04a4c	00 00 00 00	 DD	 $LN988@resume_cmd
  04a50	00 00 00 00	 DD	 $LN988@resume_cmd
  04a54	00 00 00 00	 DD	 $LN988@resume_cmd
  04a58	00 00 00 00	 DD	 $LN904@resume_cmd
  04a5c	00 00 00 00	 DD	 $LN909@resume_cmd
  04a60	00 00 00 00	 DD	 $LN914@resume_cmd
  04a64	00 00 00 00	 DD	 $LN919@resume_cmd
  04a68	00 00 00 00	 DD	 $LN923@resume_cmd
  04a6c	00 00 00 00	 DD	 $LN928@resume_cmd
  04a70	00 00 00 00	 DD	 $LN866@resume_cmd
  04a74	00 00 00 00	 DD	 $LN988@resume_cmd
  04a78	00 00 00 00	 DD	 $LN933@resume_cmd
  04a7c	00 00 00 00	 DD	 $LN937@resume_cmd
  04a80	00 00 00 00	 DD	 $LN941@resume_cmd
  04a84	00 00 00 00	 DD	 $LN945@resume_cmd
  04a88	00 00 00 00	 DD	 $LN949@resume_cmd
  04a8c	00 00 00 00	 DD	 $LN953@resume_cmd
  04a90	00 00 00 00	 DD	 $LN957@resume_cmd
  04a94	00 00 00 00	 DD	 $LN988@resume_cmd
  04a98	00 00 00 00	 DD	 $LN961@resume_cmd
  04a9c	00 00 00 00	 DD	 $LN965@resume_cmd
  04aa0	00 00 00 00	 DD	 $LN969@resume_cmd
  04aa4	00 00 00 00	 DD	 $LN973@resume_cmd
  04aa8	00 00 00 00	 DD	 $LN977@resume_cmd
resume_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\sr.c
_TEXT	SEGMENT
file$ = 80
j$ = 88
i$ = 92
dev$ = 96
regs$ = 104
ioq$ = 112
tv214 = 120
tv260 = 124
rc$ = 128
fn$ = 136
tv82 = 144
tv$ = 152
tt$ = 160
started_mask$ = 168
psw$ = 176
__$ArrayPad$ = 192
argc$ = 224
argv$ = 232
cmdline$ = 240
suspend_cmd PROC

; 69   : {

$LN575:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 70   : char    *fn = SR_DEFAULT_FILENAME;

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG178407
  0002e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR fn$[rsp], rax
$LN4@suspend_cm:

; 71   : SR_FILE  file;
; 72   : CPU_BITMAP started_mask;
; 73   : struct   timeval tv;
; 74   : time_t   tt;
; 75   : int      i, j, rc;
; 76   : REGS    *regs;
; 77   : DEVBLK  *dev;
; 78   : IOINT   *ioq;
; 79   : BYTE     psw[16];
; 80   : 
; 81   :     UNREFERENCED(cmdline);

  00036	33 c0		 xor	 eax, eax
  00038	85 c0		 test	 eax, eax
  0003a	75 fa		 jne	 SHORT $LN4@suspend_cm

; 82   : 
; 83   :     if (argc > 2)

  0003c	83 bc 24 e0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00044	7e 51		 jle	 SHORT $LN429@suspend_cm

; 84   :     {
; 85   :         // "SR: too many arguments"
; 86   :         WRMSG(HHC02000, "E");

  00046	b9 01 00 00 00	 mov	 ecx, 1
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178409
  00058	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178410
  00064	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00069	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178411
  0007b	ba 56 00 00 00	 mov	 edx, 86			; 00000056H
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178412
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 87   :         return -1;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
  00092	e9 cd 21 00 00	 jmp	 $LN1@suspend_cm
$LN429@suspend_cm:

; 88   :     }
; 89   : 
; 90   :     if (argc == 2)

  00097	83 bc 24 e0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0009f	75 1d		 jne	 SHORT $LN430@suspend_cm

; 91   :         fn = argv[1];

  000a1	b8 08 00 00 00	 mov	 eax, 8
  000a6	48 6b c0 01	 imul	 rax, rax, 1
  000aa	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000b6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR fn$[rsp], rax
$LN430@suspend_cm:

; 92   : 
; 93   :     file = SR_OPEN (fn, "wb");

  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178414
  000c5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR fn$[rsp]
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  000d3	48 89 44 24 50	 mov	 QWORD PTR file$[rsp], rax

; 94   :     if (file == NULL)

  000d8	48 83 7c 24 50
	00		 cmp	 QWORD PTR file$[rsp], 0
  000de	0f 85 80 00 00
	00		 jne	 $LN431@suspend_cm

; 95   :     {
; 96   :         // "SR: error in function '%s': '%s'"
; 97   :         WRMSG(HHC02001, "E","open()",strerror(errno));

  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000ea	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000f2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv82[rsp], rax
  000fa	b9 01 00 00 00	 mov	 ecx, 1
  000ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00105	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv82[rsp]
  0010d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178416
  00119	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178417
  00125	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178418
  00131	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00136	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0013b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00141	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178419
  00148	ba 61 00 00 00	 mov	 edx, 97			; 00000061H
  0014d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178420
  00154	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 98   :         return -1;

  0015a	b8 ff ff ff ff	 mov	 eax, -1
  0015f	e9 00 21 00 00	 jmp	 $LN1@suspend_cm
$LN431@suspend_cm:
$LN7@suspend_cm:

; 99   :     }
; 100  : 
; 101  :     TRACE("SR: Begin Suspend Processing...\n");

  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178421
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00177	85 c0		 test	 eax, eax
  00179	74 0c		 je	 SHORT $LN432@suspend_cm
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178423
  00182	e8 00 00 00 00	 call	 DebuggerTrace
$LN432@suspend_cm:
  00187	33 c0		 xor	 eax, eax
  00189	85 c0		 test	 eax, eax
  0018b	75 d7		 jne	 SHORT $LN7@suspend_cm
$LN10@suspend_cm:

; 102  : 
; 103  :     /* Save CPU state and stop all CPU's */
; 104  :     TRACE("SR: Stopping All CPUs...\n");

  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178424
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001a0	85 c0		 test	 eax, eax
  001a2	74 0c		 je	 SHORT $LN433@suspend_cm
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178426
  001ab	e8 00 00 00 00	 call	 DebuggerTrace
$LN433@suspend_cm:
  001b0	33 c0		 xor	 eax, eax
  001b2	85 c0		 test	 eax, eax
  001b4	75 d7		 jne	 SHORT $LN10@suspend_cm

; 105  :     OBTAIN_INTLOCK(NULL);

  001b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178427
  001bd	33 c9		 xor	 ecx, ecx
  001bf	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 106  :     started_mask = sysblk.started_mask;

  001c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001cb	48 8b 80 b0 12
	00 00		 mov	 rax, QWORD PTR [rax+4784]
  001d2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR started_mask$[rsp], rax
$LN11@suspend_cm:

; 107  :     while (sysblk.started_mask)

  001da	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001e1	48 83 b8 b0 12
	00 00 00	 cmp	 QWORD PTR [rax+4784], 0
  001e9	0f 84 ed 00 00
	00		 je	 $LN12@suspend_cm

; 108  :     {
; 109  :         for (i = 0; i < sysblk.maxcpu; i++)

  001ef	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001f7	eb 0a		 jmp	 SHORT $LN15@suspend_cm
$LN13@suspend_cm:
  001f9	8b 44 24 5c	 mov	 eax, DWORD PTR i$[rsp]
  001fd	ff c0		 inc	 eax
  001ff	89 44 24 5c	 mov	 DWORD PTR i$[rsp], eax
$LN15@suspend_cm:
  00203	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0020a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00210	39 44 24 5c	 cmp	 DWORD PTR i$[rsp], eax
  00214	0f 8d 96 00 00
	00		 jge	 $LN14@suspend_cm

; 110  :         {
; 111  :             if (IS_CPU_ONLINE(i))

  0021a	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  0021f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00226	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0022f	74 7a		 je	 SHORT $LN434@suspend_cm

; 112  :             {
; 113  :                 sysblk.regs[i]->cpustate = CPUSTATE_STOPPING;

  00231	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  00236	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0023d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00245	c6 40 60 02	 mov	 BYTE PTR [rax+96], 2
$LN18@suspend_cm:

; 114  :                 ON_IC_INTERRUPT(sysblk.regs[i]);

  00249	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  0024e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00255	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0025d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00260	0f ba e8 1f	 bts	 eax, 31
  00264	48 63 4c 24 5c	 movsxd	 rcx, DWORD PTR i$[rsp]
  00269	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00270	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00278	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0027b	33 c0		 xor	 eax, eax
  0027d	85 c0		 test	 eax, eax
  0027f	75 c8		 jne	 SHORT $LN18@suspend_cm

; 115  :                 signal_condition(&sysblk.regs[i]->intcond);

  00281	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  00286	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0028d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00295	48 05 80 0c 00
	00		 add	 rax, 3200		; 00000c80H
  0029b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178429
  002a2	48 8b c8	 mov	 rcx, rax
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN434@suspend_cm:

; 116  :             }
; 117  :         }

  002ab	e9 49 ff ff ff	 jmp	 $LN13@suspend_cm
$LN14@suspend_cm:

; 118  :         RELEASE_INTLOCK(NULL);

  002b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178430
  002b7	33 c9		 xor	 ecx, ecx
  002b9	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 119  :         usleep (1000);

  002be	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  002c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep

; 120  :         OBTAIN_INTLOCK(NULL);

  002c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178431
  002d0	33 c9		 xor	 ecx, ecx
  002d2	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 121  :     }

  002d7	e9 fe fe ff ff	 jmp	 $LN11@suspend_cm
$LN12@suspend_cm:

; 122  :     RELEASE_INTLOCK(NULL);

  002dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178432
  002e3	33 c9		 xor	 ecx, ecx
  002e5	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN21@suspend_cm:

; 123  : 
; 124  :     /* Wait for I/O queue to clear out */
; 125  :     TRACE("SR: Waiting for I/O Queue to clear...\n");

  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178433
  002f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  002f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002fd	85 c0		 test	 eax, eax
  002ff	74 0c		 je	 SHORT $LN435@suspend_cm
  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178435
  00308	e8 00 00 00 00	 call	 DebuggerTrace
$LN435@suspend_cm:
  0030d	33 c0		 xor	 eax, eax
  0030f	85 c0		 test	 eax, eax
  00311	75 d7		 jne	 SHORT $LN21@suspend_cm

; 126  :     obtain_lock (&sysblk.ioqlock);

  00313	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0031a	48 05 38 12 00
	00		 add	 rax, 4664		; 00001238H
  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178436
  00327	48 8b c8	 mov	 rcx, rax
  0032a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN22@suspend_cm:

; 127  :     while (sysblk.ioq)

  00330	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00337	48 83 b8 30 12
	00 00 00	 cmp	 QWORD PTR [rax+4656], 0
  0033f	74 47		 je	 SHORT $LN23@suspend_cm

; 128  :     {
; 129  :         release_lock (&sysblk.ioqlock);

  00341	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00348	48 05 38 12 00
	00		 add	 rax, 4664		; 00001238H
  0034e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178437
  00355	48 8b c8	 mov	 rcx, rax
  00358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 130  :         usleep (1000);

  0035e	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00363	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep

; 131  :         obtain_lock (&sysblk.ioqlock);

  00369	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00370	48 05 38 12 00
	00		 add	 rax, 4664		; 00001238H
  00376	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178438
  0037d	48 8b c8	 mov	 rcx, rax
  00380	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 132  :     }

  00386	eb a8		 jmp	 SHORT $LN22@suspend_cm
$LN23@suspend_cm:

; 133  :     release_lock (&sysblk.ioqlock);

  00388	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0038f	48 05 38 12 00
	00		 add	 rax, 4664		; 00001238H
  00395	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG178439
  0039c	48 8b c8	 mov	 rcx, rax
  0039f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN26@suspend_cm:

; 134  : 
; 135  :     /* Wait for active I/Os to complete */
; 136  :     TRACE("SR: Waiting for Active I/Os to Complete...\n");

  003a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178440
  003ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  003b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  003b8	85 c0		 test	 eax, eax
  003ba	74 0c		 je	 SHORT $LN436@suspend_cm
  003bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178442
  003c3	e8 00 00 00 00	 call	 DebuggerTrace
$LN436@suspend_cm:
  003c8	33 c0		 xor	 eax, eax
  003ca	85 c0		 test	 eax, eax
  003cc	75 d7		 jne	 SHORT $LN26@suspend_cm

; 137  :     for (i = 1; i < 5000; i++)

  003ce	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  003d6	eb 0a		 jmp	 SHORT $LN29@suspend_cm
$LN27@suspend_cm:
  003d8	8b 44 24 5c	 mov	 eax, DWORD PTR i$[rsp]
  003dc	ff c0		 inc	 eax
  003de	89 44 24 5c	 mov	 DWORD PTR i$[rsp], eax
$LN29@suspend_cm:
  003e2	81 7c 24 5c 88
	13 00 00	 cmp	 DWORD PTR i$[rsp], 5000	; 00001388H
  003ea	0f 8d 92 00 00
	00		 jge	 $LN28@suspend_cm

; 138  :     {
; 139  :         dev = sr_active_devices();

  003f0	e8 00 00 00 00	 call	 sr_active_devices
  003f5	48 89 44 24 60	 mov	 QWORD PTR dev$[rsp], rax

; 140  :         if (dev == NULL) break;

  003fa	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00400	75 02		 jne	 SHORT $LN437@suspend_cm
  00402	eb 7e		 jmp	 SHORT $LN28@suspend_cm
$LN437@suspend_cm:

; 141  :         if (i % 500 == 0)

  00404	8b 44 24 5c	 mov	 eax, DWORD PTR i$[rsp]
  00408	99		 cdq
  00409	b9 f4 01 00 00	 mov	 ecx, 500		; 000001f4H
  0040e	f7 f9		 idiv	 ecx
  00410	8b c2		 mov	 eax, edx
  00412	85 c0		 test	 eax, eax
  00414	75 5c		 jne	 SHORT $LN438@suspend_cm

; 142  :         {
; 143  :             // "SR: waiting for device %04X"
; 144  :             WRMSG(HHC02002, "W", dev->devnum);

  00416	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0041b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0041f	89 44 24 78	 mov	 DWORD PTR tv214[rsp], eax
  00423	b9 01 00 00 00	 mov	 ecx, 1
  00428	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0042e	8b 4c 24 78	 mov	 ecx, DWORD PTR tv214[rsp]
  00432	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00436	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178445
  0043d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00442	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178446
  00449	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0044e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00453	41 b9 03 00 00
	00		 mov	 r9d, 3
  00459	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178447
  00460	ba 90 00 00 00	 mov	 edx, 144		; 00000090H
  00465	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178448
  0046c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN438@suspend_cm:

; 145  :         }
; 146  :         usleep (10000);

  00472	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00477	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep

; 147  :     }

  0047d	e9 56 ff ff ff	 jmp	 $LN27@suspend_cm
$LN28@suspend_cm:

; 148  :     if (dev != NULL)

  00482	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00488	74 5c		 je	 SHORT $LN439@suspend_cm

; 149  :     {
; 150  :         // "SR: device %04X still busy, proceeding anyway"
; 151  :         WRMSG(HHC02003, "W",dev->devnum);

  0048a	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0048f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00493	89 44 24 7c	 mov	 DWORD PTR tv260[rsp], eax
  00497	b9 01 00 00 00	 mov	 ecx, 1
  0049c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004a2	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv260[rsp]
  004a6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  004aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178450
  004b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178451
  004bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  004cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178452
  004d4	ba 97 00 00 00	 mov	 edx, 151		; 00000097H
  004d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178453
  004e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN439@suspend_cm:
$LN32@suspend_cm:

; 152  :     }
; 153  : 
; 154  :     /* Write header */
; 155  :     TRACE("SR: Writing File Header...\n");

  004e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178454
  004ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  004f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  004f9	85 c0		 test	 eax, eax
  004fb	74 0c		 je	 SHORT $LN440@suspend_cm
  004fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178456
  00504	e8 00 00 00 00	 call	 DebuggerTrace
$LN440@suspend_cm:
  00509	33 c0		 xor	 eax, eax
  0050b	85 c0		 test	 eax, eax
  0050d	75 d7		 jne	 SHORT $LN32@suspend_cm
$LN35@suspend_cm:

; 156  :     SR_WRITE_STRING(file, SR_HDR_ID, SR_ID);

  0050f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178458
  00516	ba 00 00 e0 ac	 mov	 edx, -1394606080	; ace00000H
  0051b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00520	e8 00 00 00 00	 call	 sr_write_string
  00525	85 c0		 test	 eax, eax
  00527	74 0a		 je	 SHORT $LN441@suspend_cm
  00529	b8 ff ff ff ff	 mov	 eax, -1
  0052e	e9 31 1d 00 00	 jmp	 $LN1@suspend_cm
$LN441@suspend_cm:
  00533	33 c0		 xor	 eax, eax
  00535	85 c0		 test	 eax, eax
  00537	75 d6		 jne	 SHORT $LN35@suspend_cm
$LN38@suspend_cm:

; 157  :     SR_WRITE_STRING(file, SR_HDR_VERSION, VERSION);

  00539	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178460
  00540	ba 01 00 e0 ac	 mov	 edx, -1394606079	; ace00001H
  00545	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0054a	e8 00 00 00 00	 call	 sr_write_string
  0054f	85 c0		 test	 eax, eax
  00551	74 0a		 je	 SHORT $LN442@suspend_cm
  00553	b8 ff ff ff ff	 mov	 eax, -1
  00558	e9 07 1d 00 00	 jmp	 $LN1@suspend_cm
$LN442@suspend_cm:
  0055d	33 c0		 xor	 eax, eax
  0055f	85 c0		 test	 eax, eax
  00561	75 d6		 jne	 SHORT $LN38@suspend_cm

; 158  :     gettimeofday(&tv, NULL); tt = tv.tv_sec;

  00563	33 d2		 xor	 edx, edx
  00565	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  0056d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gettimeofday
  00573	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR tv$[rsp]
  0057b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tt$[rsp], rax
$LN41@suspend_cm:

; 159  :     SR_WRITE_STRING(file, SR_HDR_DATE, ctime(&tt));

  00583	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR tt$[rsp]
  0058b	e8 00 00 00 00	 call	 ctime
  00590	4c 8b c0	 mov	 r8, rax
  00593	ba 02 00 e0 ac	 mov	 edx, -1394606078	; ace00002H
  00598	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0059d	e8 00 00 00 00	 call	 sr_write_string
  005a2	85 c0		 test	 eax, eax
  005a4	74 0a		 je	 SHORT $LN443@suspend_cm
  005a6	b8 ff ff ff ff	 mov	 eax, -1
  005ab	e9 b4 1c 00 00	 jmp	 $LN1@suspend_cm
$LN443@suspend_cm:
  005b0	33 c0		 xor	 eax, eax
  005b2	85 c0		 test	 eax, eax
  005b4	75 cd		 jne	 SHORT $LN41@suspend_cm
$LN44@suspend_cm:

; 160  : 
; 161  :     /* Write system data */
; 162  :     TRACE("SR: Saving System Data...\n");

  005b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178462
  005bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  005c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  005c9	85 c0		 test	 eax, eax
  005cb	74 0c		 je	 SHORT $LN444@suspend_cm
  005cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178464
  005d4	e8 00 00 00 00	 call	 DebuggerTrace
$LN444@suspend_cm:
  005d9	33 c0		 xor	 eax, eax
  005db	85 c0		 test	 eax, eax
  005dd	75 d7		 jne	 SHORT $LN44@suspend_cm
$LN47@suspend_cm:

; 163  :     SR_WRITE_STRING(file,SR_SYS_ARCH_NAME, get_arch_name( NULL ));

  005df	33 c9		 xor	 ecx, ecx
  005e1	e8 00 00 00 00	 call	 get_arch_name
  005e6	4c 8b c0	 mov	 r8, rax
  005e9	ba 02 00 e1 ac	 mov	 edx, -1394540542	; ace10002H
  005ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  005f3	e8 00 00 00 00	 call	 sr_write_string
  005f8	85 c0		 test	 eax, eax
  005fa	74 0a		 je	 SHORT $LN445@suspend_cm
  005fc	b8 ff ff ff ff	 mov	 eax, -1
  00601	e9 5e 1c 00 00	 jmp	 $LN1@suspend_cm
$LN445@suspend_cm:
  00606	33 c0		 xor	 eax, eax
  00608	85 c0		 test	 eax, eax
  0060a	75 d3		 jne	 SHORT $LN47@suspend_cm
$LN50@suspend_cm:

; 164  :     SR_WRITE_VALUE (file,SR_SYS_STARTED_MASK,started_mask,sizeof(started_mask));

  0060c	41 b9 08 00 00
	00		 mov	 r9d, 8
  00612	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR started_mask$[rsp]
  0061a	ba 00 00 e1 ac	 mov	 edx, -1394540544	; ace10000H
  0061f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00624	e8 00 00 00 00	 call	 sr_write_value
  00629	85 c0		 test	 eax, eax
  0062b	74 0a		 je	 SHORT $LN446@suspend_cm
  0062d	b8 ff ff ff ff	 mov	 eax, -1
  00632	e9 2d 1c 00 00	 jmp	 $LN1@suspend_cm
$LN446@suspend_cm:
  00637	33 c0		 xor	 eax, eax
  00639	85 c0		 test	 eax, eax
  0063b	75 cf		 jne	 SHORT $LN50@suspend_cm
$LN53@suspend_cm:

; 165  :     SR_WRITE_VALUE (file,SR_SYS_MAINSIZE,sysblk.mainsize,sizeof(sysblk.mainsize));

  0063d	41 b9 08 00 00
	00		 mov	 r9d, 8
  00643	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0064a	4c 8b 80 90 00
	00 00		 mov	 r8, QWORD PTR [rax+144]
  00651	ba 07 00 e1 ac	 mov	 edx, -1394540537	; ace10007H
  00656	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0065b	e8 00 00 00 00	 call	 sr_write_value
  00660	85 c0		 test	 eax, eax
  00662	74 0a		 je	 SHORT $LN447@suspend_cm
  00664	b8 ff ff ff ff	 mov	 eax, -1
  00669	e9 f6 1b 00 00	 jmp	 $LN1@suspend_cm
$LN447@suspend_cm:
  0066e	33 c0		 xor	 eax, eax
  00670	85 c0		 test	 eax, eax
  00672	75 c9		 jne	 SHORT $LN53@suspend_cm
$LN56@suspend_cm:

; 166  :     TRACE("SR: Saving MAINSTOR...\n");

  00674	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178468
  0067b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00681	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00687	85 c0		 test	 eax, eax
  00689	74 0c		 je	 SHORT $LN448@suspend_cm
  0068b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178470
  00692	e8 00 00 00 00	 call	 DebuggerTrace
$LN448@suspend_cm:
  00697	33 c0		 xor	 eax, eax
  00699	85 c0		 test	 eax, eax
  0069b	75 d7		 jne	 SHORT $LN56@suspend_cm
$LN59@suspend_cm:

; 167  :     SR_WRITE_BUF   (file,SR_SYS_MAINSTOR,sysblk.mainstor,sysblk.mainsize);

  0069d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  006a4	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  006ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  006b2	4c 8b 80 98 00
	00 00		 mov	 r8, QWORD PTR [rax+152]
  006b9	ba 08 00 e1 ac	 mov	 edx, -1394540536	; ace10008H
  006be	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  006c3	e8 00 00 00 00	 call	 sr_write_buf
  006c8	85 c0		 test	 eax, eax
  006ca	74 0a		 je	 SHORT $LN449@suspend_cm
  006cc	b8 ff ff ff ff	 mov	 eax, -1
  006d1	e9 8e 1b 00 00	 jmp	 $LN1@suspend_cm
$LN449@suspend_cm:
  006d6	33 c0		 xor	 eax, eax
  006d8	85 c0		 test	 eax, eax
  006da	75 c1		 jne	 SHORT $LN59@suspend_cm
$LN62@suspend_cm:

; 168  :     SR_WRITE_VALUE (file,SR_SYS_SKEYSIZE,(sysblk.mainsize/_STORKEY_ARRAY_UNITSIZE),sizeof(U32));

  006dc	33 d2		 xor	 edx, edx
  006de	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  006e5	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  006ec	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  006f1	48 f7 f1	 div	 rcx
  006f4	41 b9 04 00 00
	00		 mov	 r9d, 4
  006fa	4c 8b c0	 mov	 r8, rax
  006fd	ba 09 00 e1 ac	 mov	 edx, -1394540535	; ace10009H
  00702	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00707	e8 00 00 00 00	 call	 sr_write_value
  0070c	85 c0		 test	 eax, eax
  0070e	74 0a		 je	 SHORT $LN450@suspend_cm
  00710	b8 ff ff ff ff	 mov	 eax, -1
  00715	e9 4a 1b 00 00	 jmp	 $LN1@suspend_cm
$LN450@suspend_cm:
  0071a	33 c0		 xor	 eax, eax
  0071c	85 c0		 test	 eax, eax
  0071e	75 bc		 jne	 SHORT $LN62@suspend_cm
$LN65@suspend_cm:

; 169  :     TRACE("SR: Saving Storage Keys...\n");

  00720	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178473
  00727	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0072d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00733	85 c0		 test	 eax, eax
  00735	74 0c		 je	 SHORT $LN451@suspend_cm
  00737	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178475
  0073e	e8 00 00 00 00	 call	 DebuggerTrace
$LN451@suspend_cm:
  00743	33 c0		 xor	 eax, eax
  00745	85 c0		 test	 eax, eax
  00747	75 d7		 jne	 SHORT $LN65@suspend_cm
$LN68@suspend_cm:

; 170  :     SR_WRITE_BUF   (file,SR_SYS_STORKEYS,sysblk.storkeys,sysblk.mainsize/_STORKEY_ARRAY_UNITSIZE);

  00749	33 d2		 xor	 edx, edx
  0074b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00752	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00759	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0075e	48 f7 f1	 div	 rcx
  00761	4c 8b c8	 mov	 r9, rax
  00764	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0076b	4c 8b 80 a0 00
	00 00		 mov	 r8, QWORD PTR [rax+160]
  00772	ba 0a 00 e1 ac	 mov	 edx, -1394540534	; ace1000aH
  00777	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0077c	e8 00 00 00 00	 call	 sr_write_buf
  00781	85 c0		 test	 eax, eax
  00783	74 0a		 je	 SHORT $LN452@suspend_cm
  00785	b8 ff ff ff ff	 mov	 eax, -1
  0078a	e9 d5 1a 00 00	 jmp	 $LN1@suspend_cm
$LN452@suspend_cm:
  0078f	33 c0		 xor	 eax, eax
  00791	85 c0		 test	 eax, eax
  00793	75 b4		 jne	 SHORT $LN68@suspend_cm
$LN71@suspend_cm:

; 171  :     SR_WRITE_VALUE (file,SR_SYS_XPNDSIZE,sysblk.xpndsize,sizeof(sysblk.xpndsize));

  00795	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0079c	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [rax+172]
  007a2	41 b9 04 00 00
	00		 mov	 r9d, 4
  007a8	44 8b c0	 mov	 r8d, eax
  007ab	ba 0b 00 e1 ac	 mov	 edx, -1394540533	; ace1000bH
  007b0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  007b5	e8 00 00 00 00	 call	 sr_write_value
  007ba	85 c0		 test	 eax, eax
  007bc	74 0a		 je	 SHORT $LN453@suspend_cm
  007be	b8 ff ff ff ff	 mov	 eax, -1
  007c3	e9 9c 1a 00 00	 jmp	 $LN1@suspend_cm
$LN453@suspend_cm:
  007c8	33 c0		 xor	 eax, eax
  007ca	85 c0		 test	 eax, eax
  007cc	75 c7		 jne	 SHORT $LN71@suspend_cm
$LN74@suspend_cm:

; 172  :     TRACE("SR: Saving Expanded Storage...\n");

  007ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178478
  007d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  007db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  007e1	85 c0		 test	 eax, eax
  007e3	74 0c		 je	 SHORT $LN454@suspend_cm
  007e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178480
  007ec	e8 00 00 00 00	 call	 DebuggerTrace
$LN454@suspend_cm:
  007f1	33 c0		 xor	 eax, eax
  007f3	85 c0		 test	 eax, eax
  007f5	75 d7		 jne	 SHORT $LN74@suspend_cm
$LN77@suspend_cm:

; 173  :     SR_WRITE_BUF   (file,SR_SYS_XPNDSTOR,sysblk.xpndstor,4096*sysblk.xpndsize);

  007f7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007fe	69 80 ac 00 00
	00 00 10 00 00	 imul	 eax, DWORD PTR [rax+172], 4096 ; 00001000H
  00808	8b c0		 mov	 eax, eax
  0080a	44 8b c8	 mov	 r9d, eax
  0080d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00814	4c 8b 80 b0 00
	00 00		 mov	 r8, QWORD PTR [rax+176]
  0081b	ba 0c 00 e1 ac	 mov	 edx, -1394540532	; ace1000cH
  00820	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00825	e8 00 00 00 00	 call	 sr_write_buf
  0082a	85 c0		 test	 eax, eax
  0082c	74 0a		 je	 SHORT $LN455@suspend_cm
  0082e	b8 ff ff ff ff	 mov	 eax, -1
  00833	e9 2c 1a 00 00	 jmp	 $LN1@suspend_cm
$LN455@suspend_cm:
  00838	33 c0		 xor	 eax, eax
  0083a	85 c0		 test	 eax, eax
  0083c	75 b9		 jne	 SHORT $LN77@suspend_cm
$LN80@suspend_cm:

; 174  :     SR_WRITE_VALUE (file,SR_SYS_CPUID,sysblk.cpuid,sizeof(sysblk.cpuid));

  0083e	41 b9 08 00 00
	00		 mov	 r9d, 8
  00844	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0084b	4c 8b 80 c8 00
	00 00		 mov	 r8, QWORD PTR [rax+200]
  00852	ba 0d 00 e1 ac	 mov	 edx, -1394540531	; ace1000dH
  00857	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0085c	e8 00 00 00 00	 call	 sr_write_value
  00861	85 c0		 test	 eax, eax
  00863	74 0a		 je	 SHORT $LN456@suspend_cm
  00865	b8 ff ff ff ff	 mov	 eax, -1
  0086a	e9 f5 19 00 00	 jmp	 $LN1@suspend_cm
$LN456@suspend_cm:
  0086f	33 c0		 xor	 eax, eax
  00871	85 c0		 test	 eax, eax
  00873	75 c9		 jne	 SHORT $LN80@suspend_cm
$LN83@suspend_cm:

; 175  :     SR_WRITE_VALUE (file,SR_SYS_CPUMODEL,sysblk.cpumodel,sizeof(sysblk.cpumodel));

  00875	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0087c	0f b7 80 d4 00
	00 00		 movzx	 eax, WORD PTR [rax+212]
  00883	41 b9 02 00 00
	00		 mov	 r9d, 2
  00889	44 8b c0	 mov	 r8d, eax
  0088c	ba 48 00 e1 ac	 mov	 edx, -1394540472	; ace10048H
  00891	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00896	e8 00 00 00 00	 call	 sr_write_value
  0089b	85 c0		 test	 eax, eax
  0089d	74 0a		 je	 SHORT $LN457@suspend_cm
  0089f	b8 ff ff ff ff	 mov	 eax, -1
  008a4	e9 bb 19 00 00	 jmp	 $LN1@suspend_cm
$LN457@suspend_cm:
  008a9	33 c0		 xor	 eax, eax
  008ab	85 c0		 test	 eax, eax
  008ad	75 c6		 jne	 SHORT $LN83@suspend_cm
$LN86@suspend_cm:

; 176  :     SR_WRITE_VALUE (file,SR_SYS_CPUVERSION,sysblk.cpuversion,sizeof(sysblk.cpuversion));

  008af	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008b6	0f b6 80 d6 00
	00 00		 movzx	 eax, BYTE PTR [rax+214]
  008bd	41 b9 01 00 00
	00		 mov	 r9d, 1
  008c3	44 8b c0	 mov	 r8d, eax
  008c6	ba 49 00 e1 ac	 mov	 edx, -1394540471	; ace10049H
  008cb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  008d0	e8 00 00 00 00	 call	 sr_write_value
  008d5	85 c0		 test	 eax, eax
  008d7	74 0a		 je	 SHORT $LN458@suspend_cm
  008d9	b8 ff ff ff ff	 mov	 eax, -1
  008de	e9 81 19 00 00	 jmp	 $LN1@suspend_cm
$LN458@suspend_cm:
  008e3	33 c0		 xor	 eax, eax
  008e5	85 c0		 test	 eax, eax
  008e7	75 c6		 jne	 SHORT $LN86@suspend_cm
$LN89@suspend_cm:

; 177  :     SR_WRITE_VALUE (file,SR_SYS_CPUSERIAL,sysblk.cpuserial,sizeof(sysblk.cpuserial));

  008e9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008f0	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  008f6	41 b9 04 00 00
	00		 mov	 r9d, 4
  008fc	44 8b c0	 mov	 r8d, eax
  008ff	ba 50 00 e1 ac	 mov	 edx, -1394540464	; ace10050H
  00904	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00909	e8 00 00 00 00	 call	 sr_write_value
  0090e	85 c0		 test	 eax, eax
  00910	74 0a		 je	 SHORT $LN459@suspend_cm
  00912	b8 ff ff ff ff	 mov	 eax, -1
  00917	e9 48 19 00 00	 jmp	 $LN1@suspend_cm
$LN459@suspend_cm:
  0091c	33 c0		 xor	 eax, eax
  0091e	85 c0		 test	 eax, eax
  00920	75 c7		 jne	 SHORT $LN89@suspend_cm
$LN92@suspend_cm:

; 178  :     SR_WRITE_VALUE (file,SR_SYS_OPERATION_MODE,(int)sysblk.operation_mode,sizeof(sysblk.operation_mode));

  00922	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00929	48 63 80 e8 00
	00 00		 movsxd	 rax, DWORD PTR [rax+232]
  00930	41 b9 04 00 00
	00		 mov	 r9d, 4
  00936	4c 8b c0	 mov	 r8, rax
  00939	ba 54 00 e1 ac	 mov	 edx, -1394540460	; ace10054H
  0093e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00943	e8 00 00 00 00	 call	 sr_write_value
  00948	85 c0		 test	 eax, eax
  0094a	74 0a		 je	 SHORT $LN460@suspend_cm
  0094c	b8 ff ff ff ff	 mov	 eax, -1
  00951	e9 0e 19 00 00	 jmp	 $LN1@suspend_cm
$LN460@suspend_cm:
  00956	33 c0		 xor	 eax, eax
  00958	85 c0		 test	 eax, eax
  0095a	75 c6		 jne	 SHORT $LN92@suspend_cm
$LN95@suspend_cm:

; 179  :     SR_WRITE_VALUE (file,SR_SYS_LPARMODE,(int)sysblk.lparmode,sizeof(int));

  0095c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00963	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00969	83 e0 01	 and	 eax, 1
  0096c	48 98		 cdqe
  0096e	41 b9 04 00 00
	00		 mov	 r9d, 4
  00974	4c 8b c0	 mov	 r8, rax
  00977	ba 51 00 e1 ac	 mov	 edx, -1394540463	; ace10051H
  0097c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00981	e8 00 00 00 00	 call	 sr_write_value
  00986	85 c0		 test	 eax, eax
  00988	74 0a		 je	 SHORT $LN461@suspend_cm
  0098a	b8 ff ff ff ff	 mov	 eax, -1
  0098f	e9 d0 18 00 00	 jmp	 $LN1@suspend_cm
$LN461@suspend_cm:
  00994	33 c0		 xor	 eax, eax
  00996	85 c0		 test	 eax, eax
  00998	75 c2		 jne	 SHORT $LN95@suspend_cm
$LN98@suspend_cm:

; 180  :     SR_WRITE_VALUE (file,SR_SYS_LPARNUM,sysblk.lparnum,sizeof(sysblk.lparnum));

  0099a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009a1	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  009a8	41 b9 02 00 00
	00		 mov	 r9d, 2
  009ae	44 8b c0	 mov	 r8d, eax
  009b1	ba 52 00 e1 ac	 mov	 edx, -1394540462	; ace10052H
  009b6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  009bb	e8 00 00 00 00	 call	 sr_write_value
  009c0	85 c0		 test	 eax, eax
  009c2	74 0a		 je	 SHORT $LN462@suspend_cm
  009c4	b8 ff ff ff ff	 mov	 eax, -1
  009c9	e9 96 18 00 00	 jmp	 $LN1@suspend_cm
$LN462@suspend_cm:
  009ce	33 c0		 xor	 eax, eax
  009d0	85 c0		 test	 eax, eax
  009d2	75 c6		 jne	 SHORT $LN98@suspend_cm
$LN101@suspend_cm:

; 181  :     SR_WRITE_VALUE (file,SR_SYS_CPUIDFMT,sysblk.cpuidfmt,sizeof(sysblk.cpuidfmt));

  009d4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009db	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  009e2	41 b9 01 00 00
	00		 mov	 r9d, 1
  009e8	44 8b c0	 mov	 r8d, eax
  009eb	ba 53 00 e1 ac	 mov	 edx, -1394540461	; ace10053H
  009f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  009f5	e8 00 00 00 00	 call	 sr_write_value
  009fa	85 c0		 test	 eax, eax
  009fc	74 0a		 je	 SHORT $LN463@suspend_cm
  009fe	b8 ff ff ff ff	 mov	 eax, -1
  00a03	e9 5c 18 00 00	 jmp	 $LN1@suspend_cm
$LN463@suspend_cm:
  00a08	33 c0		 xor	 eax, eax
  00a0a	85 c0		 test	 eax, eax
  00a0c	75 c6		 jne	 SHORT $LN101@suspend_cm
$LN104@suspend_cm:

; 182  :     SR_WRITE_VALUE (file,SR_SYS_IPLDEV,sysblk.ipldev,sizeof(sysblk.ipldev));

  00a0e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a15	0f b7 80 f2 00
	00 00		 movzx	 eax, WORD PTR [rax+242]
  00a1c	41 b9 02 00 00
	00		 mov	 r9d, 2
  00a22	44 8b c0	 mov	 r8d, eax
  00a25	ba 0e 00 e1 ac	 mov	 edx, -1394540530	; ace1000eH
  00a2a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00a2f	e8 00 00 00 00	 call	 sr_write_value
  00a34	85 c0		 test	 eax, eax
  00a36	74 0a		 je	 SHORT $LN464@suspend_cm
  00a38	b8 ff ff ff ff	 mov	 eax, -1
  00a3d	e9 22 18 00 00	 jmp	 $LN1@suspend_cm
$LN464@suspend_cm:
  00a42	33 c0		 xor	 eax, eax
  00a44	85 c0		 test	 eax, eax
  00a46	75 c6		 jne	 SHORT $LN104@suspend_cm
$LN107@suspend_cm:

; 183  :     SR_WRITE_VALUE (file,SR_SYS_IPLCPU,sysblk.iplcpu,sizeof(sysblk.iplcpu));

  00a48	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a4f	48 63 80 f4 00
	00 00		 movsxd	 rax, DWORD PTR [rax+244]
  00a56	41 b9 04 00 00
	00		 mov	 r9d, 4
  00a5c	4c 8b c0	 mov	 r8, rax
  00a5f	ba 0f 00 e1 ac	 mov	 edx, -1394540529	; ace1000fH
  00a64	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00a69	e8 00 00 00 00	 call	 sr_write_value
  00a6e	85 c0		 test	 eax, eax
  00a70	74 0a		 je	 SHORT $LN465@suspend_cm
  00a72	b8 ff ff ff ff	 mov	 eax, -1
  00a77	e9 e8 17 00 00	 jmp	 $LN1@suspend_cm
$LN465@suspend_cm:
  00a7c	33 c0		 xor	 eax, eax
  00a7e	85 c0		 test	 eax, eax
  00a80	75 c6		 jne	 SHORT $LN107@suspend_cm
$LN110@suspend_cm:

; 184  :     SR_WRITE_VALUE (file,SR_SYS_MBO,sysblk.mbo,sizeof(sysblk.mbo));

  00a82	41 b9 08 00 00
	00		 mov	 r9d, 8
  00a88	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a8f	4c 8b 80 f0 10
	00 00		 mov	 r8, QWORD PTR [rax+4336]
  00a96	ba 10 00 e1 ac	 mov	 edx, -1394540528	; ace10010H
  00a9b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00aa0	e8 00 00 00 00	 call	 sr_write_value
  00aa5	85 c0		 test	 eax, eax
  00aa7	74 0a		 je	 SHORT $LN466@suspend_cm
  00aa9	b8 ff ff ff ff	 mov	 eax, -1
  00aae	e9 b1 17 00 00	 jmp	 $LN1@suspend_cm
$LN466@suspend_cm:
  00ab3	33 c0		 xor	 eax, eax
  00ab5	85 c0		 test	 eax, eax
  00ab7	75 c9		 jne	 SHORT $LN110@suspend_cm
$LN113@suspend_cm:

; 185  :     SR_WRITE_VALUE (file,SR_SYS_MBK,sysblk.mbk,sizeof(sysblk.mbk));

  00ab9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00ac0	0f b6 80 f8 10
	00 00		 movzx	 eax, BYTE PTR [rax+4344]
  00ac7	41 b9 01 00 00
	00		 mov	 r9d, 1
  00acd	44 8b c0	 mov	 r8d, eax
  00ad0	ba 11 00 e1 ac	 mov	 edx, -1394540527	; ace10011H
  00ad5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00ada	e8 00 00 00 00	 call	 sr_write_value
  00adf	85 c0		 test	 eax, eax
  00ae1	74 0a		 je	 SHORT $LN467@suspend_cm
  00ae3	b8 ff ff ff ff	 mov	 eax, -1
  00ae8	e9 77 17 00 00	 jmp	 $LN1@suspend_cm
$LN467@suspend_cm:
  00aed	33 c0		 xor	 eax, eax
  00aef	85 c0		 test	 eax, eax
  00af1	75 c6		 jne	 SHORT $LN113@suspend_cm
$LN116@suspend_cm:

; 186  :     SR_WRITE_VALUE (file,SR_SYS_MBM,sysblk.mbm,sizeof(sysblk.mbm));

  00af3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00afa	48 63 80 fc 10
	00 00		 movsxd	 rax, DWORD PTR [rax+4348]
  00b01	41 b9 04 00 00
	00		 mov	 r9d, 4
  00b07	4c 8b c0	 mov	 r8, rax
  00b0a	ba 12 00 e1 ac	 mov	 edx, -1394540526	; ace10012H
  00b0f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00b14	e8 00 00 00 00	 call	 sr_write_value
  00b19	85 c0		 test	 eax, eax
  00b1b	74 0a		 je	 SHORT $LN468@suspend_cm
  00b1d	b8 ff ff ff ff	 mov	 eax, -1
  00b22	e9 3d 17 00 00	 jmp	 $LN1@suspend_cm
$LN468@suspend_cm:
  00b27	33 c0		 xor	 eax, eax
  00b29	85 c0		 test	 eax, eax
  00b2b	75 c6		 jne	 SHORT $LN116@suspend_cm
$LN119@suspend_cm:

; 187  :     SR_WRITE_VALUE (file,SR_SYS_MBD,sysblk.mbd,sizeof(sysblk.mbd));

  00b2d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b34	48 63 80 00 11
	00 00		 movsxd	 rax, DWORD PTR [rax+4352]
  00b3b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00b41	4c 8b c0	 mov	 r8, rax
  00b44	ba 13 00 e1 ac	 mov	 edx, -1394540525	; ace10013H
  00b49	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00b4e	e8 00 00 00 00	 call	 sr_write_value
  00b53	85 c0		 test	 eax, eax
  00b55	74 0a		 je	 SHORT $LN469@suspend_cm
  00b57	b8 ff ff ff ff	 mov	 eax, -1
  00b5c	e9 03 17 00 00	 jmp	 $LN1@suspend_cm
$LN469@suspend_cm:
  00b61	33 c0		 xor	 eax, eax
  00b63	85 c0		 test	 eax, eax
  00b65	75 c6		 jne	 SHORT $LN119@suspend_cm

; 188  : 
; 189  :     for (ioq = sysblk.iointq; ioq; ioq = ioq->next)

  00b67	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b6e	48 8b 80 28 12
	00 00		 mov	 rax, QWORD PTR [rax+4648]
  00b75	48 89 44 24 70	 mov	 QWORD PTR ioq$[rsp], rax
  00b7a	eb 0d		 jmp	 SHORT $LN122@suspend_cm
$LN120@suspend_cm:
  00b7c	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00b81	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b84	48 89 44 24 70	 mov	 QWORD PTR ioq$[rsp], rax
$LN122@suspend_cm:
  00b89	48 83 7c 24 70
	00		 cmp	 QWORD PTR ioq$[rsp], 0
  00b8f	0f 84 91 01 00
	00		 je	 $LN121@suspend_cm

; 190  :         if (ioq->pcipending)

  00b95	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00b9a	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00b9d	d1 e8		 shr	 eax, 1
  00b9f	83 e0 01	 and	 eax, 1
  00ba2	85 c0		 test	 eax, eax
  00ba4	74 7b		 je	 SHORT $LN470@suspend_cm
$LN125@suspend_cm:

; 191  :         {
; 192  :             SR_WRITE_VALUE(file,SR_SYS_PCIPENDING_LCSS, SSID_TO_LCSS(ioq->dev->ssid),sizeof(U16));

  00ba6	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00bab	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00baf	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00bb3	d1 f8		 sar	 eax, 1
  00bb5	48 98		 cdqe
  00bb7	41 b9 02 00 00
	00		 mov	 r9d, 2
  00bbd	4c 8b c0	 mov	 r8, rax
  00bc0	ba 46 00 e1 ac	 mov	 edx, -1394540474	; ace10046H
  00bc5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00bca	e8 00 00 00 00	 call	 sr_write_value
  00bcf	85 c0		 test	 eax, eax
  00bd1	74 0a		 je	 SHORT $LN472@suspend_cm
  00bd3	b8 ff ff ff ff	 mov	 eax, -1
  00bd8	e9 87 16 00 00	 jmp	 $LN1@suspend_cm
$LN472@suspend_cm:
  00bdd	33 c0		 xor	 eax, eax
  00bdf	85 c0		 test	 eax, eax
  00be1	75 c3		 jne	 SHORT $LN125@suspend_cm
$LN128@suspend_cm:

; 193  :             SR_WRITE_VALUE(file,SR_SYS_PCIPENDING, ioq->dev->devnum,sizeof(ioq->dev->devnum));

  00be3	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00be8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00bec	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00bf0	41 b9 02 00 00
	00		 mov	 r9d, 2
  00bf6	44 8b c0	 mov	 r8d, eax
  00bf9	ba 22 00 e1 ac	 mov	 edx, -1394540510	; ace10022H
  00bfe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00c03	e8 00 00 00 00	 call	 sr_write_value
  00c08	85 c0		 test	 eax, eax
  00c0a	74 0a		 je	 SHORT $LN473@suspend_cm
  00c0c	b8 ff ff ff ff	 mov	 eax, -1
  00c11	e9 4e 16 00 00	 jmp	 $LN1@suspend_cm
$LN473@suspend_cm:
  00c16	33 c0		 xor	 eax, eax
  00c18	85 c0		 test	 eax, eax
  00c1a	75 c7		 jne	 SHORT $LN128@suspend_cm

; 194  :         }

  00c1c	e9 00 01 00 00	 jmp	 $LN471@suspend_cm
$LN470@suspend_cm:

; 195  :         else if (ioq->attnpending)

  00c21	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00c26	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00c29	c1 e8 02	 shr	 eax, 2
  00c2c	83 e0 01	 and	 eax, 1
  00c2f	85 c0		 test	 eax, eax
  00c31	74 78		 je	 SHORT $LN474@suspend_cm
$LN131@suspend_cm:

; 196  :         {
; 197  :             SR_WRITE_VALUE(file,SR_SYS_ATTNPENDING_LCSS, SSID_TO_LCSS(ioq->dev->ssid),sizeof(U16));

  00c33	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00c38	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00c3c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00c40	d1 f8		 sar	 eax, 1
  00c42	48 98		 cdqe
  00c44	41 b9 02 00 00
	00		 mov	 r9d, 2
  00c4a	4c 8b c0	 mov	 r8, rax
  00c4d	ba 47 00 e1 ac	 mov	 edx, -1394540473	; ace10047H
  00c52	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00c57	e8 00 00 00 00	 call	 sr_write_value
  00c5c	85 c0		 test	 eax, eax
  00c5e	74 0a		 je	 SHORT $LN476@suspend_cm
  00c60	b8 ff ff ff ff	 mov	 eax, -1
  00c65	e9 fa 15 00 00	 jmp	 $LN1@suspend_cm
$LN476@suspend_cm:
  00c6a	33 c0		 xor	 eax, eax
  00c6c	85 c0		 test	 eax, eax
  00c6e	75 c3		 jne	 SHORT $LN131@suspend_cm
$LN134@suspend_cm:

; 198  :             SR_WRITE_VALUE(file,SR_SYS_ATTNPENDING, ioq->dev->devnum,sizeof(ioq->dev->devnum));

  00c70	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00c75	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00c79	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00c7d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00c83	44 8b c0	 mov	 r8d, eax
  00c86	ba 23 00 e1 ac	 mov	 edx, -1394540509	; ace10023H
  00c8b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00c90	e8 00 00 00 00	 call	 sr_write_value
  00c95	85 c0		 test	 eax, eax
  00c97	74 0a		 je	 SHORT $LN477@suspend_cm
  00c99	b8 ff ff ff ff	 mov	 eax, -1
  00c9e	e9 c1 15 00 00	 jmp	 $LN1@suspend_cm
$LN477@suspend_cm:
  00ca3	33 c0		 xor	 eax, eax
  00ca5	85 c0		 test	 eax, eax
  00ca7	75 c7		 jne	 SHORT $LN134@suspend_cm

; 199  :         }

  00ca9	eb 76		 jmp	 SHORT $LN475@suspend_cm
$LN474@suspend_cm:
$LN137@suspend_cm:

; 200  :         else
; 201  :         {
; 202  :             SR_WRITE_VALUE(file,SR_SYS_IOPENDING_LCSS, SSID_TO_LCSS(ioq->dev->ssid),sizeof(U16));

  00cab	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00cb0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00cb4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00cb8	d1 f8		 sar	 eax, 1
  00cba	48 98		 cdqe
  00cbc	41 b9 02 00 00
	00		 mov	 r9d, 2
  00cc2	4c 8b c0	 mov	 r8, rax
  00cc5	ba 45 00 e1 ac	 mov	 edx, -1394540475	; ace10045H
  00cca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00ccf	e8 00 00 00 00	 call	 sr_write_value
  00cd4	85 c0		 test	 eax, eax
  00cd6	74 0a		 je	 SHORT $LN478@suspend_cm
  00cd8	b8 ff ff ff ff	 mov	 eax, -1
  00cdd	e9 82 15 00 00	 jmp	 $LN1@suspend_cm
$LN478@suspend_cm:
  00ce2	33 c0		 xor	 eax, eax
  00ce4	85 c0		 test	 eax, eax
  00ce6	75 c3		 jne	 SHORT $LN137@suspend_cm
$LN140@suspend_cm:

; 203  :             SR_WRITE_VALUE(file,SR_SYS_IOPENDING, ioq->dev->devnum,sizeof(ioq->dev->devnum));

  00ce8	48 8b 44 24 70	 mov	 rax, QWORD PTR ioq$[rsp]
  00ced	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00cf1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00cf5	41 b9 02 00 00
	00		 mov	 r9d, 2
  00cfb	44 8b c0	 mov	 r8d, eax
  00cfe	ba 21 00 e1 ac	 mov	 edx, -1394540511	; ace10021H
  00d03	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00d08	e8 00 00 00 00	 call	 sr_write_value
  00d0d	85 c0		 test	 eax, eax
  00d0f	74 0a		 je	 SHORT $LN479@suspend_cm
  00d11	b8 ff ff ff ff	 mov	 eax, -1
  00d16	e9 49 15 00 00	 jmp	 $LN1@suspend_cm
$LN479@suspend_cm:
  00d1b	33 c0		 xor	 eax, eax
  00d1d	85 c0		 test	 eax, eax
  00d1f	75 c7		 jne	 SHORT $LN140@suspend_cm
$LN475@suspend_cm:
$LN471@suspend_cm:

; 204  :         }

  00d21	e9 56 fe ff ff	 jmp	 $LN120@suspend_cm
$LN121@suspend_cm:
$LN143@suspend_cm:

; 205  : 
; 206  :     SR_WRITE_VALUE ( file, SR_SYS_CRWCOUNT, sysblk.crwcount, sizeof( sysblk.crwcount ));

  00d26	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d2d	8b 80 1c 12 00
	00		 mov	 eax, DWORD PTR [rax+4636]
  00d33	41 b9 04 00 00
	00		 mov	 r9d, 4
  00d39	44 8b c0	 mov	 r8d, eax
  00d3c	ba 31 00 e1 ac	 mov	 edx, -1394540495	; ace10031H
  00d41	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00d46	e8 00 00 00 00	 call	 sr_write_value
  00d4b	85 c0		 test	 eax, eax
  00d4d	74 0a		 je	 SHORT $LN480@suspend_cm
  00d4f	b8 ff ff ff ff	 mov	 eax, -1
  00d54	e9 0b 15 00 00	 jmp	 $LN1@suspend_cm
$LN480@suspend_cm:
  00d59	33 c0		 xor	 eax, eax
  00d5b	85 c0		 test	 eax, eax
  00d5d	75 c7		 jne	 SHORT $LN143@suspend_cm

; 207  :     if (sysblk.crwcount)

  00d5f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d66	83 b8 1c 12 00
	00 00		 cmp	 DWORD PTR [rax+4636], 0
  00d6d	0f 84 b1 00 00
	00		 je	 $LN481@suspend_cm
$LN146@suspend_cm:

; 208  :     {
; 209  :         SR_WRITE_BUF   ( file, SR_SYS_CRWARRAY,  sysblk.crwarray, sizeof( U32 ) * sysblk.crwcount );

  00d73	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d7a	8b 80 1c 12 00
	00		 mov	 eax, DWORD PTR [rax+4636]
  00d80	48 c1 e0 02	 shl	 rax, 2
  00d84	4c 8b c8	 mov	 r9, rax
  00d87	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00d8e	4c 8b 80 10 12
	00 00		 mov	 r8, QWORD PTR [rax+4624]
  00d95	ba 32 00 e1 ac	 mov	 edx, -1394540494	; ace10032H
  00d9a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00d9f	e8 00 00 00 00	 call	 sr_write_buf
  00da4	85 c0		 test	 eax, eax
  00da6	74 0a		 je	 SHORT $LN482@suspend_cm
  00da8	b8 ff ff ff ff	 mov	 eax, -1
  00dad	e9 b2 14 00 00	 jmp	 $LN1@suspend_cm
$LN482@suspend_cm:
  00db2	33 c0		 xor	 eax, eax
  00db4	85 c0		 test	 eax, eax
  00db6	75 bb		 jne	 SHORT $LN146@suspend_cm
$LN149@suspend_cm:

; 210  :         SR_WRITE_VALUE ( file, SR_SYS_CRWINDEX,  sysblk.crwindex, sizeof( sysblk.crwindex ) );

  00db8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00dbf	8b 80 20 12 00
	00		 mov	 eax, DWORD PTR [rax+4640]
  00dc5	41 b9 04 00 00
	00		 mov	 r9d, 4
  00dcb	44 8b c0	 mov	 r8d, eax
  00dce	ba 33 00 e1 ac	 mov	 edx, -1394540493	; ace10033H
  00dd3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00dd8	e8 00 00 00 00	 call	 sr_write_value
  00ddd	85 c0		 test	 eax, eax
  00ddf	74 0a		 je	 SHORT $LN483@suspend_cm
  00de1	b8 ff ff ff ff	 mov	 eax, -1
  00de6	e9 79 14 00 00	 jmp	 $LN1@suspend_cm
$LN483@suspend_cm:
  00deb	33 c0		 xor	 eax, eax
  00ded	85 c0		 test	 eax, eax
  00def	75 c7		 jne	 SHORT $LN149@suspend_cm
$LN152@suspend_cm:

; 211  :         SR_WRITE_VALUE ( file, SR_SYS_CRWENDIAN, ourendian, 1 );

  00df1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ourendian
  00df8	41 b9 01 00 00
	00		 mov	 r9d, 1
  00dfe	44 8b c0	 mov	 r8d, eax
  00e01	ba 34 00 e1 ac	 mov	 edx, -1394540492	; ace10034H
  00e06	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00e0b	e8 00 00 00 00	 call	 sr_write_value
  00e10	85 c0		 test	 eax, eax
  00e12	74 0a		 je	 SHORT $LN484@suspend_cm
  00e14	b8 ff ff ff ff	 mov	 eax, -1
  00e19	e9 46 14 00 00	 jmp	 $LN1@suspend_cm
$LN484@suspend_cm:
  00e1e	33 c0		 xor	 eax, eax
  00e20	85 c0		 test	 eax, eax
  00e22	75 cd		 jne	 SHORT $LN152@suspend_cm
$LN481@suspend_cm:
$LN155@suspend_cm:

; 212  :     }
; 213  : 
; 214  :     SR_WRITE_VALUE (file,SR_SYS_SERVPARM,sysblk.servparm,sizeof(sysblk.servparm));

  00e24	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e2b	8b 80 90 12 00
	00		 mov	 eax, DWORD PTR [rax+4752]
  00e31	41 b9 04 00 00
	00		 mov	 r9d, 4
  00e37	44 8b c0	 mov	 r8d, eax
  00e3a	ba 40 00 e1 ac	 mov	 edx, -1394540480	; ace10040H
  00e3f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00e44	e8 00 00 00 00	 call	 sr_write_value
  00e49	85 c0		 test	 eax, eax
  00e4b	74 0a		 je	 SHORT $LN485@suspend_cm
  00e4d	b8 ff ff ff ff	 mov	 eax, -1
  00e52	e9 0d 14 00 00	 jmp	 $LN1@suspend_cm
$LN485@suspend_cm:
  00e57	33 c0		 xor	 eax, eax
  00e59	85 c0		 test	 eax, eax
  00e5b	75 c7		 jne	 SHORT $LN155@suspend_cm
$LN158@suspend_cm:

; 215  :     SR_WRITE_VALUE (file,SR_SYS_SIGINTREQ,sysblk.sigintreq,1);

  00e5d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e64	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00e6a	c1 e8 07	 shr	 eax, 7
  00e6d	83 e0 01	 and	 eax, 1
  00e70	8b c0		 mov	 eax, eax
  00e72	41 b9 01 00 00
	00		 mov	 r9d, 1
  00e78	44 8b c0	 mov	 r8d, eax
  00e7b	ba 41 00 e1 ac	 mov	 edx, -1394540479	; ace10041H
  00e80	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00e85	e8 00 00 00 00	 call	 sr_write_value
  00e8a	85 c0		 test	 eax, eax
  00e8c	74 0a		 je	 SHORT $LN486@suspend_cm
  00e8e	b8 ff ff ff ff	 mov	 eax, -1
  00e93	e9 cc 13 00 00	 jmp	 $LN1@suspend_cm
$LN486@suspend_cm:
  00e98	33 c0		 xor	 eax, eax
  00e9a	85 c0		 test	 eax, eax
  00e9c	75 bf		 jne	 SHORT $LN158@suspend_cm
$LN161@suspend_cm:

; 216  :     SR_WRITE_VALUE (file,SR_SYS_IPLED,sysblk.ipled,1);

  00e9e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00ea5	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00eab	d1 e8		 shr	 eax, 1
  00ead	83 e0 01	 and	 eax, 1
  00eb0	8b c0		 mov	 eax, eax
  00eb2	41 b9 01 00 00
	00		 mov	 r9d, 1
  00eb8	44 8b c0	 mov	 r8d, eax
  00ebb	ba 30 00 e1 ac	 mov	 edx, -1394540496	; ace10030H
  00ec0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00ec5	e8 00 00 00 00	 call	 sr_write_value
  00eca	85 c0		 test	 eax, eax
  00ecc	74 0a		 je	 SHORT $LN487@suspend_cm
  00ece	b8 ff ff ff ff	 mov	 eax, -1
  00ed3	e9 8c 13 00 00	 jmp	 $LN1@suspend_cm
$LN487@suspend_cm:
  00ed8	33 c0		 xor	 eax, eax
  00eda	85 c0		 test	 eax, eax
  00edc	75 c0		 jne	 SHORT $LN161@suspend_cm
$LN164@suspend_cm:

; 217  :     SR_WRITE_STRING(file,SR_SYS_LOADPARM,str_loadparm());

  00ede	e8 00 00 00 00	 call	 str_loadparm
  00ee3	4c 8b c0	 mov	 r8, rax
  00ee6	ba 44 00 e1 ac	 mov	 edx, -1394540476	; ace10044H
  00eeb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00ef0	e8 00 00 00 00	 call	 sr_write_string
  00ef5	85 c0		 test	 eax, eax
  00ef7	74 0a		 je	 SHORT $LN488@suspend_cm
  00ef9	b8 ff ff ff ff	 mov	 eax, -1
  00efe	e9 61 13 00 00	 jmp	 $LN1@suspend_cm
$LN488@suspend_cm:
  00f03	33 c0		 xor	 eax, eax
  00f05	85 c0		 test	 eax, eax
  00f07	75 d5		 jne	 SHORT $LN164@suspend_cm
$LN167@suspend_cm:

; 218  :     SR_WRITE_VALUE (file,SR_SYS_INTS_STATE,sysblk.ints_state,sizeof(sysblk.ints_state));

  00f09	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f10	8b 80 a0 12 00
	00		 mov	 eax, DWORD PTR [rax+4768]
  00f16	41 b9 04 00 00
	00		 mov	 r9d, 4
  00f1c	44 8b c0	 mov	 r8d, eax
  00f1f	ba 01 00 e1 ac	 mov	 edx, -1394540543	; ace10001H
  00f24	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00f29	e8 00 00 00 00	 call	 sr_write_value
  00f2e	85 c0		 test	 eax, eax
  00f30	74 0a		 je	 SHORT $LN489@suspend_cm
  00f32	b8 ff ff ff ff	 mov	 eax, -1
  00f37	e9 28 13 00 00	 jmp	 $LN1@suspend_cm
$LN489@suspend_cm:
  00f3c	33 c0		 xor	 eax, eax
  00f3e	85 c0		 test	 eax, eax
  00f40	75 c7		 jne	 SHORT $LN167@suspend_cm
$LN170@suspend_cm:

; 219  :     SR_WRITE_HDR(file, SR_DELIMITER, 0);

  00f42	45 33 c0	 xor	 r8d, r8d
  00f45	ba fe ff ef ac	 mov	 edx, -1393557506	; aceffffeH
  00f4a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00f4f	e8 00 00 00 00	 call	 sr_write_hdr
  00f54	85 c0		 test	 eax, eax
  00f56	74 0a		 je	 SHORT $LN490@suspend_cm
  00f58	b8 ff ff ff ff	 mov	 eax, -1
  00f5d	e9 02 13 00 00	 jmp	 $LN1@suspend_cm
$LN490@suspend_cm:
  00f62	33 c0		 xor	 eax, eax
  00f64	85 c0		 test	 eax, eax
  00f66	75 da		 jne	 SHORT $LN170@suspend_cm
$LN173@suspend_cm:

; 220  : 
; 221  :     /* Save service console state */
; 222  :     TRACE("SR: Saving Service Console State...\n");

  00f68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178517
  00f6f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00f75	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00f7b	85 c0		 test	 eax, eax
  00f7d	74 0c		 je	 SHORT $LN491@suspend_cm
  00f7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178519
  00f86	e8 00 00 00 00	 call	 DebuggerTrace
$LN491@suspend_cm:
  00f8b	33 c0		 xor	 eax, eax
  00f8d	85 c0		 test	 eax, eax
  00f8f	75 d7		 jne	 SHORT $LN173@suspend_cm
$LN176@suspend_cm:

; 223  :     SR_WRITE_HDR(file, SR_SYS_SERVC, 0);

  00f91	45 33 c0	 xor	 r8d, r8d
  00f94	ba 00 10 e1 ac	 mov	 edx, -1394536448	; ace11000H
  00f99	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00f9e	e8 00 00 00 00	 call	 sr_write_hdr
  00fa3	85 c0		 test	 eax, eax
  00fa5	74 0a		 je	 SHORT $LN492@suspend_cm
  00fa7	b8 ff ff ff ff	 mov	 eax, -1
  00fac	e9 b3 12 00 00	 jmp	 $LN1@suspend_cm
$LN492@suspend_cm:
  00fb1	33 c0		 xor	 eax, eax
  00fb3	85 c0		 test	 eax, eax
  00fb5	75 da		 jne	 SHORT $LN176@suspend_cm

; 224  :     servc_hsuspend(file);

  00fb7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00fbc	e8 00 00 00 00	 call	 servc_hsuspend
$LN179@suspend_cm:

; 225  :     SR_WRITE_HDR(file, SR_DELIMITER, 0);

  00fc1	45 33 c0	 xor	 r8d, r8d
  00fc4	ba fe ff ef ac	 mov	 edx, -1393557506	; aceffffeH
  00fc9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  00fce	e8 00 00 00 00	 call	 sr_write_hdr
  00fd3	85 c0		 test	 eax, eax
  00fd5	74 0a		 je	 SHORT $LN493@suspend_cm
  00fd7	b8 ff ff ff ff	 mov	 eax, -1
  00fdc	e9 83 12 00 00	 jmp	 $LN1@suspend_cm
$LN493@suspend_cm:
  00fe1	33 c0		 xor	 eax, eax
  00fe3	85 c0		 test	 eax, eax
  00fe5	75 da		 jne	 SHORT $LN179@suspend_cm
$LN182@suspend_cm:

; 226  : 
; 227  :     /* Save clock state */
; 228  :     TRACE("SR: Saving Clock State...\n");

  00fe7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178522
  00fee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00ff4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00ffa	85 c0		 test	 eax, eax
  00ffc	74 0c		 je	 SHORT $LN494@suspend_cm
  00ffe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178524
  01005	e8 00 00 00 00	 call	 DebuggerTrace
$LN494@suspend_cm:
  0100a	33 c0		 xor	 eax, eax
  0100c	85 c0		 test	 eax, eax
  0100e	75 d7		 jne	 SHORT $LN182@suspend_cm
$LN185@suspend_cm:

; 229  :     SR_WRITE_HDR(file, SR_SYS_CLOCK, 0);

  01010	45 33 c0	 xor	 r8d, r8d
  01013	ba 00 20 e1 ac	 mov	 edx, -1394532352	; ace12000H
  01018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0101d	e8 00 00 00 00	 call	 sr_write_hdr
  01022	85 c0		 test	 eax, eax
  01024	74 0a		 je	 SHORT $LN495@suspend_cm
  01026	b8 ff ff ff ff	 mov	 eax, -1
  0102b	e9 34 12 00 00	 jmp	 $LN1@suspend_cm
$LN495@suspend_cm:
  01030	33 c0		 xor	 eax, eax
  01032	85 c0		 test	 eax, eax
  01034	75 da		 jne	 SHORT $LN185@suspend_cm

; 230  :     clock_hsuspend(file);

  01036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0103b	e8 00 00 00 00	 call	 clock_hsuspend
$LN188@suspend_cm:

; 231  :     SR_WRITE_HDR(file, SR_DELIMITER, 0);

  01040	45 33 c0	 xor	 r8d, r8d
  01043	ba fe ff ef ac	 mov	 edx, -1393557506	; aceffffeH
  01048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0104d	e8 00 00 00 00	 call	 sr_write_hdr
  01052	85 c0		 test	 eax, eax
  01054	74 0a		 je	 SHORT $LN496@suspend_cm
  01056	b8 ff ff ff ff	 mov	 eax, -1
  0105b	e9 04 12 00 00	 jmp	 $LN1@suspend_cm
$LN496@suspend_cm:
  01060	33 c0		 xor	 eax, eax
  01062	85 c0		 test	 eax, eax
  01064	75 da		 jne	 SHORT $LN188@suspend_cm

; 232  : 
; 233  :     /* Write CPU data */
; 234  :     for (i = 0; i < sysblk.maxcpu; i++)

  01066	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0106e	eb 0a		 jmp	 SHORT $LN191@suspend_cm
$LN189@suspend_cm:
  01070	8b 44 24 5c	 mov	 eax, DWORD PTR i$[rsp]
  01074	ff c0		 inc	 eax
  01076	89 44 24 5c	 mov	 DWORD PTR i$[rsp], eax
$LN191@suspend_cm:
  0107a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01081	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01087	39 44 24 5c	 cmp	 DWORD PTR i$[rsp], eax
  0108b	0f 8d e9 08 00
	00		 jge	 $LN190@suspend_cm

; 235  :     {
; 236  :         if (!IS_CPU_ONLINE(i)) continue;

  01091	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  01096	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0109d	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  010a6	75 02		 jne	 SHORT $LN497@suspend_cm
  010a8	eb c6		 jmp	 SHORT $LN189@suspend_cm
$LN497@suspend_cm:
$LN194@suspend_cm:

; 237  : 
; 238  :         TRACE("SR: Saving CPU %d Data...\n", i);

  010aa	8b 54 24 5c	 mov	 edx, DWORD PTR i$[rsp]
  010ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178528
  010b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  010bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  010c1	85 c0		 test	 eax, eax
  010c3	74 10		 je	 SHORT $LN498@suspend_cm
  010c5	8b 54 24 5c	 mov	 edx, DWORD PTR i$[rsp]
  010c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178530
  010d0	e8 00 00 00 00	 call	 DebuggerTrace
$LN498@suspend_cm:
  010d5	33 c0		 xor	 eax, eax
  010d7	85 c0		 test	 eax, eax
  010d9	75 cf		 jne	 SHORT $LN194@suspend_cm

; 239  : 
; 240  :         regs = sysblk.regs[i];

  010db	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  010e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  010e7	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  010ef	48 89 44 24 68	 mov	 QWORD PTR regs$[rsp], rax
$LN197@suspend_cm:

; 241  :         SR_WRITE_VALUE(file, SR_CPU, i, sizeof(i));

  010f4	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  010f9	41 b9 04 00 00
	00		 mov	 r9d, 4
  010ff	4c 8b c0	 mov	 r8, rax
  01102	ba 00 00 e2 ac	 mov	 edx, -1394475008	; ace20000H
  01107	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0110c	e8 00 00 00 00	 call	 sr_write_value
  01111	85 c0		 test	 eax, eax
  01113	74 0a		 je	 SHORT $LN499@suspend_cm
  01115	b8 ff ff ff ff	 mov	 eax, -1
  0111a	e9 45 11 00 00	 jmp	 $LN1@suspend_cm
$LN499@suspend_cm:
  0111f	33 c0		 xor	 eax, eax
  01121	85 c0		 test	 eax, eax
  01123	75 cf		 jne	 SHORT $LN197@suspend_cm
$LN200@suspend_cm:

; 242  :         SR_WRITE_VALUE(file, SR_CPU_ARCHMODE, regs->arch_mode,sizeof(regs->arch_mode));

  01125	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0112a	48 63 40 64	 movsxd	 rax, DWORD PTR [rax+100]
  0112e	41 b9 04 00 00
	00		 mov	 r9d, 4
  01134	4c 8b c0	 mov	 r8, rax
  01137	ba 01 00 e2 ac	 mov	 edx, -1394475007	; ace20001H
  0113c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01141	e8 00 00 00 00	 call	 sr_write_value
  01146	85 c0		 test	 eax, eax
  01148	74 0a		 je	 SHORT $LN500@suspend_cm
  0114a	b8 ff ff ff ff	 mov	 eax, -1
  0114f	e9 10 11 00 00	 jmp	 $LN1@suspend_cm
$LN500@suspend_cm:
  01154	33 c0		 xor	 eax, eax
  01156	85 c0		 test	 eax, eax
  01158	75 cb		 jne	 SHORT $LN200@suspend_cm
$LN203@suspend_cm:

; 243  :         SR_WRITE_VALUE(file, SR_CPU_PX, regs->PX_G,sizeof(regs->PX_G));

  0115a	41 b9 08 00 00
	00		 mov	 r9d, 8
  01160	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  01165	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  01169	ba 02 00 e2 ac	 mov	 edx, -1394475006	; ace20002H
  0116e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01173	e8 00 00 00 00	 call	 sr_write_value
  01178	85 c0		 test	 eax, eax
  0117a	74 0a		 je	 SHORT $LN501@suspend_cm
  0117c	b8 ff ff ff ff	 mov	 eax, -1
  01181	e9 de 10 00 00	 jmp	 $LN1@suspend_cm
$LN501@suspend_cm:
  01186	33 c0		 xor	 eax, eax
  01188	85 c0		 test	 eax, eax
  0118a	75 ce		 jne	 SHORT $LN203@suspend_cm

; 244  :         copy_psw (regs, psw);

  0118c	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR psw$[rsp]
  01194	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  01199	e8 00 00 00 00	 call	 copy_psw
$LN206@suspend_cm:

; 245  :         SR_WRITE_BUF(file, SR_CPU_PSW, psw, 16);

  0119e	41 b9 10 00 00
	00		 mov	 r9d, 16
  011a4	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR psw$[rsp]
  011ac	ba 03 00 e2 ac	 mov	 edx, -1394475005	; ace20003H
  011b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  011b6	e8 00 00 00 00	 call	 sr_write_buf
  011bb	85 c0		 test	 eax, eax
  011bd	74 0a		 je	 SHORT $LN502@suspend_cm
  011bf	b8 ff ff ff ff	 mov	 eax, -1
  011c4	e9 9b 10 00 00	 jmp	 $LN1@suspend_cm
$LN502@suspend_cm:
  011c9	33 c0		 xor	 eax, eax
  011cb	85 c0		 test	 eax, eax
  011cd	75 cf		 jne	 SHORT $LN206@suspend_cm

; 246  :         for (j = 0; j < 16; j++)

  011cf	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  011d7	eb 0a		 jmp	 SHORT $LN209@suspend_cm
$LN207@suspend_cm:
  011d9	8b 44 24 58	 mov	 eax, DWORD PTR j$[rsp]
  011dd	ff c0		 inc	 eax
  011df	89 44 24 58	 mov	 DWORD PTR j$[rsp], eax
$LN209@suspend_cm:
  011e3	83 7c 24 58 10	 cmp	 DWORD PTR j$[rsp], 16
  011e8	7d 44		 jge	 SHORT $LN208@suspend_cm
$LN212@suspend_cm:

; 247  :             SR_WRITE_VALUE(file, SR_CPU_GR+j, regs->GR_G(j),sizeof(regs->GR_G(0)));

  011ea	48 63 44 24 58	 movsxd	 rax, DWORD PTR j$[rsp]
  011ef	8b 4c 24 58	 mov	 ecx, DWORD PTR j$[rsp]
  011f3	81 c1 20 00 e2
	ac		 add	 ecx, -1394474976	; ace20020H
  011f9	41 b9 08 00 00
	00		 mov	 r9d, 8
  011ff	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  01204	4c 8b 84 c2 80
	02 00 00	 mov	 r8, QWORD PTR [rdx+rax*8+640]
  0120c	8b d1		 mov	 edx, ecx
  0120e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01213	e8 00 00 00 00	 call	 sr_write_value
  01218	85 c0		 test	 eax, eax
  0121a	74 0a		 je	 SHORT $LN503@suspend_cm
  0121c	b8 ff ff ff ff	 mov	 eax, -1
  01221	e9 3e 10 00 00	 jmp	 $LN1@suspend_cm
$LN503@suspend_cm:
  01226	33 c0		 xor	 eax, eax
  01228	85 c0		 test	 eax, eax
  0122a	75 be		 jne	 SHORT $LN212@suspend_cm
  0122c	eb ab		 jmp	 SHORT $LN207@suspend_cm
$LN208@suspend_cm:

; 248  :         for (j = 0; j < 16; j++)

  0122e	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01236	eb 0a		 jmp	 SHORT $LN215@suspend_cm
$LN213@suspend_cm:
  01238	8b 44 24 58	 mov	 eax, DWORD PTR j$[rsp]
  0123c	ff c0		 inc	 eax
  0123e	89 44 24 58	 mov	 DWORD PTR j$[rsp], eax
$LN215@suspend_cm:
  01242	83 7c 24 58 10	 cmp	 DWORD PTR j$[rsp], 16
  01247	7d 47		 jge	 SHORT $LN214@suspend_cm
$LN218@suspend_cm:

; 249  :             SR_WRITE_VALUE(file, SR_CPU_CR+j, regs->CR_G(j),sizeof(regs->CR_G(0)));

  01249	8b 44 24 58	 mov	 eax, DWORD PTR j$[rsp]
  0124d	ff c0		 inc	 eax
  0124f	48 98		 cdqe
  01251	8b 4c 24 58	 mov	 ecx, DWORD PTR j$[rsp]
  01255	81 c1 40 00 e2
	ac		 add	 ecx, -1394474944	; ace20040H
  0125b	41 b9 08 00 00
	00		 mov	 r9d, 8
  01261	48 8b 54 24 68	 mov	 rdx, QWORD PTR regs$[rsp]
  01266	4c 8b 84 c2 00
	06 00 00	 mov	 r8, QWORD PTR [rdx+rax*8+1536]
  0126e	8b d1		 mov	 edx, ecx
  01270	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01275	e8 00 00 00 00	 call	 sr_write_value
  0127a	85 c0		 test	 eax, eax
  0127c	74 0a		 je	 SHORT $LN504@suspend_cm
  0127e	b8 ff ff ff ff	 mov	 eax, -1
  01283	e9 dc 0f 00 00	 jmp	 $LN1@suspend_cm
$LN504@suspend_cm:
  01288	33 c0		 xor	 eax, eax
  0128a	85 c0		 test	 eax, eax
  0128c	75 bb		 jne	 SHORT $LN218@suspend_cm
  0128e	eb a8		 jmp	 SHORT $LN213@suspend_cm
$LN214@suspend_cm:

; 250  :         for (j = 0; j < 16; j++)

  01290	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01298	eb 0a		 jmp	 SHORT $LN221@suspend_cm
$LN219@suspend_cm:
  0129a	8b 44 24 58	 mov	 eax, DWORD PTR j$[rsp]
  0129e	ff c0		 inc	 eax
  012a0	89 44 24 58	 mov	 DWORD PTR j$[rsp], eax
$LN221@suspend_cm:
  012a4	83 7c 24 58 10	 cmp	 DWORD PTR j$[rsp], 16
  012a9	7d 46		 jge	 SHORT $LN220@suspend_cm
$LN224@suspend_cm:

; 251  :             SR_WRITE_VALUE(file, SR_CPU_AR+j, regs->ar[j],sizeof(regs->ar[0]));

  012ab	48 63 44 24 58	 movsxd	 rax, DWORD PTR j$[rsp]
  012b0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  012b5	8b 84 81 00 03
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+768]
  012bc	8b 4c 24 58	 mov	 ecx, DWORD PTR j$[rsp]
  012c0	81 c1 60 00 e2
	ac		 add	 ecx, -1394474912	; ace20060H
  012c6	41 b9 04 00 00
	00		 mov	 r9d, 4
  012cc	44 8b c0	 mov	 r8d, eax
  012cf	8b d1		 mov	 edx, ecx
  012d1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  012d6	e8 00 00 00 00	 call	 sr_write_value
  012db	85 c0		 test	 eax, eax
  012dd	74 0a		 je	 SHORT $LN505@suspend_cm
  012df	b8 ff ff ff ff	 mov	 eax, -1
  012e4	e9 7b 0f 00 00	 jmp	 $LN1@suspend_cm
$LN505@suspend_cm:
  012e9	33 c0		 xor	 eax, eax
  012eb	85 c0		 test	 eax, eax
  012ed	75 bc		 jne	 SHORT $LN224@suspend_cm
  012ef	eb a9		 jmp	 SHORT $LN219@suspend_cm
$LN220@suspend_cm:

; 252  :         for (j = 0; j < 32; j++)

  012f1	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  012f9	eb 0a		 jmp	 SHORT $LN227@suspend_cm
$LN225@suspend_cm:
  012fb	8b 44 24 58	 mov	 eax, DWORD PTR j$[rsp]
  012ff	ff c0		 inc	 eax
  01301	89 44 24 58	 mov	 DWORD PTR j$[rsp], eax
$LN227@suspend_cm:
  01305	83 7c 24 58 20	 cmp	 DWORD PTR j$[rsp], 32	; 00000020H
  0130a	7d 46		 jge	 SHORT $LN226@suspend_cm
$LN230@suspend_cm:

; 253  :             SR_WRITE_VALUE(file, SR_CPU_FPR+j, regs->fpr[j],sizeof(regs->fpr[0]));

  0130c	48 63 44 24 58	 movsxd	 rax, DWORD PTR j$[rsp]
  01311	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  01316	8b 84 81 40 03
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+832]
  0131d	8b 4c 24 58	 mov	 ecx, DWORD PTR j$[rsp]
  01321	81 c1 80 00 e2
	ac		 add	 ecx, -1394474880	; ace20080H
  01327	41 b9 04 00 00
	00		 mov	 r9d, 4
  0132d	44 8b c0	 mov	 r8d, eax
  01330	8b d1		 mov	 edx, ecx
  01332	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01337	e8 00 00 00 00	 call	 sr_write_value
  0133c	85 c0		 test	 eax, eax
  0133e	74 0a		 je	 SHORT $LN506@suspend_cm
  01340	b8 ff ff ff ff	 mov	 eax, -1
  01345	e9 1a 0f 00 00	 jmp	 $LN1@suspend_cm
$LN506@suspend_cm:
  0134a	33 c0		 xor	 eax, eax
  0134c	85 c0		 test	 eax, eax
  0134e	75 bc		 jne	 SHORT $LN230@suspend_cm
  01350	eb a9		 jmp	 SHORT $LN225@suspend_cm
$LN226@suspend_cm:
$LN233@suspend_cm:

; 254  :         SR_WRITE_VALUE(file, SR_CPU_FPC, regs->fpc, sizeof(regs->fpc));

  01352	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  01357	8b 80 c0 03 00
	00		 mov	 eax, DWORD PTR [rax+960]
  0135d	41 b9 04 00 00
	00		 mov	 r9d, 4
  01363	44 8b c0	 mov	 r8d, eax
  01366	ba 00 01 e2 ac	 mov	 edx, -1394474752	; ace20100H
  0136b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01370	e8 00 00 00 00	 call	 sr_write_value
  01375	85 c0		 test	 eax, eax
  01377	74 0a		 je	 SHORT $LN507@suspend_cm
  01379	b8 ff ff ff ff	 mov	 eax, -1
  0137e	e9 e1 0e 00 00	 jmp	 $LN1@suspend_cm
$LN507@suspend_cm:
  01383	33 c0		 xor	 eax, eax
  01385	85 c0		 test	 eax, eax
  01387	75 c9		 jne	 SHORT $LN233@suspend_cm
$LN236@suspend_cm:

; 255  :         SR_WRITE_VALUE(file, SR_CPU_DXC, regs->dxc, sizeof(regs->dxc));

  01389	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0138e	8b 80 08 07 00
	00		 mov	 eax, DWORD PTR [rax+1800]
  01394	41 b9 04 00 00
	00		 mov	 r9d, 4
  0139a	44 8b c0	 mov	 r8d, eax
  0139d	ba 01 01 e2 ac	 mov	 edx, -1394474751	; ace20101H
  013a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  013a7	e8 00 00 00 00	 call	 sr_write_value
  013ac	85 c0		 test	 eax, eax
  013ae	74 0a		 je	 SHORT $LN508@suspend_cm
  013b0	b8 ff ff ff ff	 mov	 eax, -1
  013b5	e9 aa 0e 00 00	 jmp	 $LN1@suspend_cm
$LN508@suspend_cm:
  013ba	33 c0		 xor	 eax, eax
  013bc	85 c0		 test	 eax, eax
  013be	75 c9		 jne	 SHORT $LN236@suspend_cm
$LN239@suspend_cm:

; 256  :         SR_WRITE_VALUE(file, SR_CPU_MC, regs->MC_G, sizeof(regs->MC_G));

  013c0	41 b9 08 00 00
	00		 mov	 r9d, 8
  013c6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  013cb	4c 8b 80 10 07
	00 00		 mov	 r8, QWORD PTR [rax+1808]
  013d2	ba 02 01 e2 ac	 mov	 edx, -1394474750	; ace20102H
  013d7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  013dc	e8 00 00 00 00	 call	 sr_write_value
  013e1	85 c0		 test	 eax, eax
  013e3	74 0a		 je	 SHORT $LN509@suspend_cm
  013e5	b8 ff ff ff ff	 mov	 eax, -1
  013ea	e9 75 0e 00 00	 jmp	 $LN1@suspend_cm
$LN509@suspend_cm:
  013ef	33 c0		 xor	 eax, eax
  013f1	85 c0		 test	 eax, eax
  013f3	75 cb		 jne	 SHORT $LN239@suspend_cm
$LN242@suspend_cm:

; 257  :         SR_WRITE_VALUE(file, SR_CPU_EA, regs->EA_G, sizeof(regs->EA_G));

  013f5	41 b9 08 00 00
	00		 mov	 r9d, 8
  013fb	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  01400	4c 8b 80 18 07
	00 00		 mov	 r8, QWORD PTR [rax+1816]
  01407	ba 03 01 e2 ac	 mov	 edx, -1394474749	; ace20103H
  0140c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01411	e8 00 00 00 00	 call	 sr_write_value
  01416	85 c0		 test	 eax, eax
  01418	74 0a		 je	 SHORT $LN510@suspend_cm
  0141a	b8 ff ff ff ff	 mov	 eax, -1
  0141f	e9 40 0e 00 00	 jmp	 $LN1@suspend_cm
$LN510@suspend_cm:
  01424	33 c0		 xor	 eax, eax
  01426	85 c0		 test	 eax, eax
  01428	75 cb		 jne	 SHORT $LN242@suspend_cm
$LN245@suspend_cm:

; 258  :         SR_WRITE_VALUE(file, SR_CPU_PTIMER, get_cpu_timer(regs), sizeof(S64));

  0142a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0142f	e8 00 00 00 00	 call	 get_cpu_timer
  01434	41 b9 08 00 00
	00		 mov	 r9d, 8
  0143a	4c 8b c0	 mov	 r8, rax
  0143d	ba 04 01 e2 ac	 mov	 edx, -1394474748	; ace20104H
  01442	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01447	e8 00 00 00 00	 call	 sr_write_value
  0144c	85 c0		 test	 eax, eax
  0144e	74 0a		 je	 SHORT $LN511@suspend_cm
  01450	b8 ff ff ff ff	 mov	 eax, -1
  01455	e9 0a 0e 00 00	 jmp	 $LN1@suspend_cm
$LN511@suspend_cm:
  0145a	33 c0		 xor	 eax, eax
  0145c	85 c0		 test	 eax, eax
  0145e	75 ca		 jne	 SHORT $LN245@suspend_cm
$LN248@suspend_cm:

; 259  :         SR_WRITE_VALUE(file, SR_CPU_CLKC, regs->clkc, sizeof(regs->clkc));

  01460	41 b9 08 00 00
	00		 mov	 r9d, 8
  01466	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0146b	4c 8b 80 48 07
	00 00		 mov	 r8, QWORD PTR [rax+1864]
  01472	ba 05 01 e2 ac	 mov	 edx, -1394474747	; ace20105H
  01477	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0147c	e8 00 00 00 00	 call	 sr_write_value
  01481	85 c0		 test	 eax, eax
  01483	74 0a		 je	 SHORT $LN512@suspend_cm
  01485	b8 ff ff ff ff	 mov	 eax, -1
  0148a	e9 d5 0d 00 00	 jmp	 $LN1@suspend_cm
$LN512@suspend_cm:
  0148f	33 c0		 xor	 eax, eax
  01491	85 c0		 test	 eax, eax
  01493	75 cb		 jne	 SHORT $LN248@suspend_cm
$LN251@suspend_cm:

; 260  :         SR_WRITE_VALUE(file, SR_CPU_CHANSET, regs->chanset, sizeof(regs->chanset));

  01495	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0149a	0f b7 80 38 08
	00 00		 movzx	 eax, WORD PTR [rax+2104]
  014a1	41 b9 02 00 00
	00		 mov	 r9d, 2
  014a7	44 8b c0	 mov	 r8d, eax
  014aa	ba 06 01 e2 ac	 mov	 edx, -1394474746	; ace20106H
  014af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  014b4	e8 00 00 00 00	 call	 sr_write_value
  014b9	85 c0		 test	 eax, eax
  014bb	74 0a		 je	 SHORT $LN513@suspend_cm
  014bd	b8 ff ff ff ff	 mov	 eax, -1
  014c2	e9 9d 0d 00 00	 jmp	 $LN1@suspend_cm
$LN513@suspend_cm:
  014c7	33 c0		 xor	 eax, eax
  014c9	85 c0		 test	 eax, eax
  014cb	75 c8		 jne	 SHORT $LN251@suspend_cm
$LN254@suspend_cm:

; 261  :         SR_WRITE_VALUE(file, SR_CPU_TODPR, regs->todpr, sizeof(regs->todpr));

  014cd	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  014d2	8b 80 58 07 00
	00		 mov	 eax, DWORD PTR [rax+1880]
  014d8	41 b9 04 00 00
	00		 mov	 r9d, 4
  014de	44 8b c0	 mov	 r8d, eax
  014e1	ba 07 01 e2 ac	 mov	 edx, -1394474745	; ace20107H
  014e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  014eb	e8 00 00 00 00	 call	 sr_write_value
  014f0	85 c0		 test	 eax, eax
  014f2	74 0a		 je	 SHORT $LN514@suspend_cm
  014f4	b8 ff ff ff ff	 mov	 eax, -1
  014f9	e9 66 0d 00 00	 jmp	 $LN1@suspend_cm
$LN514@suspend_cm:
  014fe	33 c0		 xor	 eax, eax
  01500	85 c0		 test	 eax, eax
  01502	75 c9		 jne	 SHORT $LN254@suspend_cm
$LN257@suspend_cm:

; 262  :         SR_WRITE_VALUE(file, SR_CPU_MONCLASS, regs->monclass, sizeof(regs->monclass));

  01504	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  01509	0f b7 80 3a 08
	00 00		 movzx	 eax, WORD PTR [rax+2106]
  01510	41 b9 02 00 00
	00		 mov	 r9d, 2
  01516	44 8b c0	 mov	 r8d, eax
  01519	ba 08 01 e2 ac	 mov	 edx, -1394474744	; ace20108H
  0151e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01523	e8 00 00 00 00	 call	 sr_write_value
  01528	85 c0		 test	 eax, eax
  0152a	74 0a		 je	 SHORT $LN515@suspend_cm
  0152c	b8 ff ff ff ff	 mov	 eax, -1
  01531	e9 2e 0d 00 00	 jmp	 $LN1@suspend_cm
$LN515@suspend_cm:
  01536	33 c0		 xor	 eax, eax
  01538	85 c0		 test	 eax, eax
  0153a	75 c8		 jne	 SHORT $LN257@suspend_cm
$LN260@suspend_cm:

; 263  :         SR_WRITE_VALUE(file, SR_CPU_EXCARID, regs->excarid, sizeof(regs->excarid));

  0153c	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  01541	0f b6 80 3e 08
	00 00		 movzx	 eax, BYTE PTR [rax+2110]
  01548	41 b9 01 00 00
	00		 mov	 r9d, 1
  0154e	44 8b c0	 mov	 r8d, eax
  01551	ba 09 01 e2 ac	 mov	 edx, -1394474743	; ace20109H
  01556	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0155b	e8 00 00 00 00	 call	 sr_write_value
  01560	85 c0		 test	 eax, eax
  01562	74 0a		 je	 SHORT $LN516@suspend_cm
  01564	b8 ff ff ff ff	 mov	 eax, -1
  01569	e9 f6 0c 00 00	 jmp	 $LN1@suspend_cm
$LN516@suspend_cm:
  0156e	33 c0		 xor	 eax, eax
  01570	85 c0		 test	 eax, eax
  01572	75 c8		 jne	 SHORT $LN260@suspend_cm
$LN263@suspend_cm:

; 264  :         SR_WRITE_VALUE(file, SR_CPU_BEAR, regs->bear, sizeof(regs->bear));

  01574	41 b9 08 00 00
	00		 mov	 r9d, 8
  0157a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0157f	4c 8b 80 18 02
	00 00		 mov	 r8, QWORD PTR [rax+536]
  01586	ba 0d 01 e2 ac	 mov	 edx, -1394474739	; ace2010dH
  0158b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01590	e8 00 00 00 00	 call	 sr_write_value
  01595	85 c0		 test	 eax, eax
  01597	74 0a		 je	 SHORT $LN517@suspend_cm
  01599	b8 ff ff ff ff	 mov	 eax, -1
  0159e	e9 c1 0c 00 00	 jmp	 $LN1@suspend_cm
$LN517@suspend_cm:
  015a3	33 c0		 xor	 eax, eax
  015a5	85 c0		 test	 eax, eax
  015a7	75 cb		 jne	 SHORT $LN263@suspend_cm
$LN266@suspend_cm:

; 265  :         SR_WRITE_VALUE(file, SR_CPU_OPNDRID, regs->opndrid, sizeof(regs->opndrid));

  015a9	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  015ae	0f b6 80 3f 08
	00 00		 movzx	 eax, BYTE PTR [rax+2111]
  015b5	41 b9 01 00 00
	00		 mov	 r9d, 1
  015bb	44 8b c0	 mov	 r8d, eax
  015be	ba 10 01 e2 ac	 mov	 edx, -1394474736	; ace20110H
  015c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  015c8	e8 00 00 00 00	 call	 sr_write_value
  015cd	85 c0		 test	 eax, eax
  015cf	74 0a		 je	 SHORT $LN518@suspend_cm
  015d1	b8 ff ff ff ff	 mov	 eax, -1
  015d6	e9 89 0c 00 00	 jmp	 $LN1@suspend_cm
$LN518@suspend_cm:
  015db	33 c0		 xor	 eax, eax
  015dd	85 c0		 test	 eax, eax
  015df	75 c8		 jne	 SHORT $LN266@suspend_cm
$LN269@suspend_cm:

; 266  :         SR_WRITE_VALUE(file, SR_CPU_CHECKSTOP, regs->checkstop, 1);

  015e1	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  015e6	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  015ec	c1 e8 05	 shr	 eax, 5
  015ef	83 e0 01	 and	 eax, 1
  015f2	8b c0		 mov	 eax, eax
  015f4	41 b9 01 00 00
	00		 mov	 r9d, 1
  015fa	44 8b c0	 mov	 r8d, eax
  015fd	ba 11 01 e2 ac	 mov	 edx, -1394474735	; ace20111H
  01602	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01607	e8 00 00 00 00	 call	 sr_write_value
  0160c	85 c0		 test	 eax, eax
  0160e	74 0a		 je	 SHORT $LN519@suspend_cm
  01610	b8 ff ff ff ff	 mov	 eax, -1
  01615	e9 4a 0c 00 00	 jmp	 $LN1@suspend_cm
$LN519@suspend_cm:
  0161a	33 c0		 xor	 eax, eax
  0161c	85 c0		 test	 eax, eax
  0161e	75 c1		 jne	 SHORT $LN269@suspend_cm
$LN272@suspend_cm:

; 267  :         SR_WRITE_VALUE(file, SR_CPU_HOSTINT, regs->hostint, 1);

  01620	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  01625	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  0162b	c1 e8 06	 shr	 eax, 6
  0162e	83 e0 01	 and	 eax, 1
  01631	8b c0		 mov	 eax, eax
  01633	41 b9 01 00 00
	00		 mov	 r9d, 1
  01639	44 8b c0	 mov	 r8d, eax
  0163c	ba 12 01 e2 ac	 mov	 edx, -1394474734	; ace20112H
  01641	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01646	e8 00 00 00 00	 call	 sr_write_value
  0164b	85 c0		 test	 eax, eax
  0164d	74 0a		 je	 SHORT $LN520@suspend_cm
  0164f	b8 ff ff ff ff	 mov	 eax, -1
  01654	e9 0b 0c 00 00	 jmp	 $LN1@suspend_cm
$LN520@suspend_cm:
  01659	33 c0		 xor	 eax, eax
  0165b	85 c0		 test	 eax, eax
  0165d	75 c1		 jne	 SHORT $LN272@suspend_cm
$LN275@suspend_cm:

; 268  :         SR_WRITE_VALUE(file, SR_CPU_EXECFLAG, regs->execflag, 1);

  0165f	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  01664	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  0166a	83 e0 01	 and	 eax, 1
  0166d	8b c0		 mov	 eax, eax
  0166f	41 b9 01 00 00
	00		 mov	 r9d, 1
  01675	44 8b c0	 mov	 r8d, eax
  01678	ba 13 01 e2 ac	 mov	 edx, -1394474733	; ace20113H
  0167d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01682	e8 00 00 00 00	 call	 sr_write_value
  01687	85 c0		 test	 eax, eax
  01689	74 0a		 je	 SHORT $LN521@suspend_cm
  0168b	b8 ff ff ff ff	 mov	 eax, -1
  01690	e9 cf 0b 00 00	 jmp	 $LN1@suspend_cm
$LN521@suspend_cm:
  01695	33 c0		 xor	 eax, eax
  01697	85 c0		 test	 eax, eax
  01699	75 c4		 jne	 SHORT $LN275@suspend_cm
$LN278@suspend_cm:

; 269  : //      SR_WRITE_VALUE(file, SR_CPU_INSTVALID, regs->instvalid, 1);
; 270  :         SR_WRITE_VALUE(file, SR_CPU_PERMODE, regs->permode, 1);

  0169b	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  016a0	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  016a6	c1 e8 02	 shr	 eax, 2
  016a9	83 e0 01	 and	 eax, 1
  016ac	8b c0		 mov	 eax, eax
  016ae	41 b9 01 00 00
	00		 mov	 r9d, 1
  016b4	44 8b c0	 mov	 r8d, eax
  016b7	ba 15 01 e2 ac	 mov	 edx, -1394474731	; ace20115H
  016bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  016c1	e8 00 00 00 00	 call	 sr_write_value
  016c6	85 c0		 test	 eax, eax
  016c8	74 0a		 je	 SHORT $LN522@suspend_cm
  016ca	b8 ff ff ff ff	 mov	 eax, -1
  016cf	e9 90 0b 00 00	 jmp	 $LN1@suspend_cm
$LN522@suspend_cm:
  016d4	33 c0		 xor	 eax, eax
  016d6	85 c0		 test	 eax, eax
  016d8	75 c1		 jne	 SHORT $LN278@suspend_cm
$LN281@suspend_cm:

; 271  :         SR_WRITE_VALUE(file, SR_CPU_LOADSTATE, regs->loadstate, 1);

  016da	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  016df	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  016e5	c1 e8 0c	 shr	 eax, 12
  016e8	83 e0 01	 and	 eax, 1
  016eb	8b c0		 mov	 eax, eax
  016ed	41 b9 01 00 00
	00		 mov	 r9d, 1
  016f3	44 8b c0	 mov	 r8d, eax
  016f6	ba 16 01 e2 ac	 mov	 edx, -1394474730	; ace20116H
  016fb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01700	e8 00 00 00 00	 call	 sr_write_value
  01705	85 c0		 test	 eax, eax
  01707	74 0a		 je	 SHORT $LN523@suspend_cm
  01709	b8 ff ff ff ff	 mov	 eax, -1
  0170e	e9 51 0b 00 00	 jmp	 $LN1@suspend_cm
$LN523@suspend_cm:
  01713	33 c0		 xor	 eax, eax
  01715	85 c0		 test	 eax, eax
  01717	75 c1		 jne	 SHORT $LN281@suspend_cm
$LN284@suspend_cm:

; 272  :         SR_WRITE_VALUE(file, SR_CPU_INVALIDATE, regs->invalidate, 1);

  01719	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0171e	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  01724	c1 e8 0e	 shr	 eax, 14
  01727	83 e0 01	 and	 eax, 1
  0172a	8b c0		 mov	 eax, eax
  0172c	41 b9 01 00 00
	00		 mov	 r9d, 1
  01732	44 8b c0	 mov	 r8d, eax
  01735	ba 17 01 e2 ac	 mov	 edx, -1394474729	; ace20117H
  0173a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0173f	e8 00 00 00 00	 call	 sr_write_value
  01744	85 c0		 test	 eax, eax
  01746	74 0a		 je	 SHORT $LN524@suspend_cm
  01748	b8 ff ff ff ff	 mov	 eax, -1
  0174d	e9 12 0b 00 00	 jmp	 $LN1@suspend_cm
$LN524@suspend_cm:
  01752	33 c0		 xor	 eax, eax
  01754	85 c0		 test	 eax, eax
  01756	75 c1		 jne	 SHORT $LN284@suspend_cm
$LN287@suspend_cm:

; 273  :         SR_WRITE_VALUE(file, SR_CPU_SIGP_RESET, regs->sigp_reset, 1);

  01758	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0175d	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  01763	c1 e8 13	 shr	 eax, 19
  01766	83 e0 01	 and	 eax, 1
  01769	8b c0		 mov	 eax, eax
  0176b	41 b9 01 00 00
	00		 mov	 r9d, 1
  01771	44 8b c0	 mov	 r8d, eax
  01774	ba 19 01 e2 ac	 mov	 edx, -1394474727	; ace20119H
  01779	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0177e	e8 00 00 00 00	 call	 sr_write_value
  01783	85 c0		 test	 eax, eax
  01785	74 0a		 je	 SHORT $LN525@suspend_cm
  01787	b8 ff ff ff ff	 mov	 eax, -1
  0178c	e9 d3 0a 00 00	 jmp	 $LN1@suspend_cm
$LN525@suspend_cm:
  01791	33 c0		 xor	 eax, eax
  01793	85 c0		 test	 eax, eax
  01795	75 c1		 jne	 SHORT $LN287@suspend_cm
$LN290@suspend_cm:

; 274  :         SR_WRITE_VALUE(file, SR_CPU_SIGP_INI_RESET, regs->sigp_ini_reset, 1);

  01797	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0179c	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  017a2	c1 e8 14	 shr	 eax, 20
  017a5	83 e0 01	 and	 eax, 1
  017a8	8b c0		 mov	 eax, eax
  017aa	41 b9 01 00 00
	00		 mov	 r9d, 1
  017b0	44 8b c0	 mov	 r8d, eax
  017b3	ba 1a 01 e2 ac	 mov	 edx, -1394474726	; ace2011aH
  017b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  017bd	e8 00 00 00 00	 call	 sr_write_value
  017c2	85 c0		 test	 eax, eax
  017c4	74 0a		 je	 SHORT $LN526@suspend_cm
  017c6	b8 ff ff ff ff	 mov	 eax, -1
  017cb	e9 94 0a 00 00	 jmp	 $LN1@suspend_cm
$LN526@suspend_cm:
  017d0	33 c0		 xor	 eax, eax
  017d2	85 c0		 test	 eax, eax
  017d4	75 c1		 jne	 SHORT $LN290@suspend_cm
$LN293@suspend_cm:

; 275  :         SR_WRITE_VALUE(file, SR_CPU_INTS_STATE, regs->ints_state, sizeof(regs->ints_state));

  017d6	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  017db	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  017de	41 b9 04 00 00
	00		 mov	 r9d, 4
  017e4	44 8b c0	 mov	 r8d, eax
  017e7	ba 0a 01 e2 ac	 mov	 edx, -1394474742	; ace2010aH
  017ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  017f1	e8 00 00 00 00	 call	 sr_write_value
  017f6	85 c0		 test	 eax, eax
  017f8	74 0a		 je	 SHORT $LN527@suspend_cm
  017fa	b8 ff ff ff ff	 mov	 eax, -1
  017ff	e9 60 0a 00 00	 jmp	 $LN1@suspend_cm
$LN527@suspend_cm:
  01804	33 c0		 xor	 eax, eax
  01806	85 c0		 test	 eax, eax
  01808	75 cc		 jne	 SHORT $LN293@suspend_cm
$LN296@suspend_cm:

; 276  :         SR_WRITE_VALUE(file, SR_CPU_INTS_MASK, regs->ints_mask, sizeof(regs->ints_mask));

  0180a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0180f	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  01812	41 b9 04 00 00
	00		 mov	 r9d, 4
  01818	44 8b c0	 mov	 r8d, eax
  0181b	ba 0b 01 e2 ac	 mov	 edx, -1394474741	; ace2010bH
  01820	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01825	e8 00 00 00 00	 call	 sr_write_value
  0182a	85 c0		 test	 eax, eax
  0182c	74 0a		 je	 SHORT $LN528@suspend_cm
  0182e	b8 ff ff ff ff	 mov	 eax, -1
  01833	e9 2c 0a 00 00	 jmp	 $LN1@suspend_cm
$LN528@suspend_cm:
  01838	33 c0		 xor	 eax, eax
  0183a	85 c0		 test	 eax, eax
  0183c	75 cc		 jne	 SHORT $LN296@suspend_cm

; 277  :         for (j = 0; j < sysblk.maxcpu; j++)

  0183e	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01846	eb 0a		 jmp	 SHORT $LN299@suspend_cm
$LN297@suspend_cm:
  01848	8b 44 24 58	 mov	 eax, DWORD PTR j$[rsp]
  0184c	ff c0		 inc	 eax
  0184e	89 44 24 58	 mov	 DWORD PTR j$[rsp], eax
$LN299@suspend_cm:
  01852	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01859	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0185f	39 44 24 58	 cmp	 DWORD PTR j$[rsp], eax
  01863	7d 47		 jge	 SHORT $LN298@suspend_cm
$LN302@suspend_cm:

; 278  :             SR_WRITE_VALUE(file, SR_CPU_MALFCPU+j, regs->malfcpu[j], sizeof(regs->malfcpu[0]));

  01865	48 63 44 24 58	 movsxd	 rax, DWORD PTR j$[rsp]
  0186a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  0186f	0f b6 84 01 00
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+256]
  01877	8b 4c 24 58	 mov	 ecx, DWORD PTR j$[rsp]
  0187b	81 c1 20 01 e2
	ac		 add	 ecx, -1394474720	; ace20120H
  01881	41 b9 01 00 00
	00		 mov	 r9d, 1
  01887	44 8b c0	 mov	 r8d, eax
  0188a	8b d1		 mov	 edx, ecx
  0188c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01891	e8 00 00 00 00	 call	 sr_write_value
  01896	85 c0		 test	 eax, eax
  01898	74 0a		 je	 SHORT $LN529@suspend_cm
  0189a	b8 ff ff ff ff	 mov	 eax, -1
  0189f	e9 c0 09 00 00	 jmp	 $LN1@suspend_cm
$LN529@suspend_cm:
  018a4	33 c0		 xor	 eax, eax
  018a6	85 c0		 test	 eax, eax
  018a8	75 bb		 jne	 SHORT $LN302@suspend_cm
  018aa	eb 9c		 jmp	 SHORT $LN297@suspend_cm
$LN298@suspend_cm:

; 279  :         for (j = 0; j < sysblk.maxcpu; j++)

  018ac	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  018b4	eb 0a		 jmp	 SHORT $LN305@suspend_cm
$LN303@suspend_cm:
  018b6	8b 44 24 58	 mov	 eax, DWORD PTR j$[rsp]
  018ba	ff c0		 inc	 eax
  018bc	89 44 24 58	 mov	 DWORD PTR j$[rsp], eax
$LN305@suspend_cm:
  018c0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  018c7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  018cd	39 44 24 58	 cmp	 DWORD PTR j$[rsp], eax
  018d1	7d 47		 jge	 SHORT $LN304@suspend_cm
$LN308@suspend_cm:

; 280  :             SR_WRITE_VALUE(file, SR_CPU_EMERCPU+j, regs->emercpu[j], sizeof(regs->emercpu[0]));

  018d3	48 63 44 24 58	 movsxd	 rax, DWORD PTR j$[rsp]
  018d8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  018dd	0f b6 84 01 80
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+384]
  018e5	8b 4c 24 58	 mov	 ecx, DWORD PTR j$[rsp]
  018e9	81 c1 40 01 e2
	ac		 add	 ecx, -1394474688	; ace20140H
  018ef	41 b9 01 00 00
	00		 mov	 r9d, 1
  018f5	44 8b c0	 mov	 r8d, eax
  018f8	8b d1		 mov	 edx, ecx
  018fa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  018ff	e8 00 00 00 00	 call	 sr_write_value
  01904	85 c0		 test	 eax, eax
  01906	74 0a		 je	 SHORT $LN530@suspend_cm
  01908	b8 ff ff ff ff	 mov	 eax, -1
  0190d	e9 52 09 00 00	 jmp	 $LN1@suspend_cm
$LN530@suspend_cm:
  01912	33 c0		 xor	 eax, eax
  01914	85 c0		 test	 eax, eax
  01916	75 bb		 jne	 SHORT $LN308@suspend_cm
  01918	eb 9c		 jmp	 SHORT $LN303@suspend_cm
$LN304@suspend_cm:
$LN311@suspend_cm:

; 281  :         SR_WRITE_VALUE(file, SR_CPU_EXTCCPU, regs->extccpu, sizeof(regs->extccpu));

  0191a	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0191f	0f b7 40 62	 movzx	 eax, WORD PTR [rax+98]
  01923	41 b9 02 00 00
	00		 mov	 r9d, 2
  01929	44 8b c0	 mov	 r8d, eax
  0192c	ba 0c 01 e2 ac	 mov	 edx, -1394474740	; ace2010cH
  01931	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01936	e8 00 00 00 00	 call	 sr_write_value
  0193b	85 c0		 test	 eax, eax
  0193d	74 0a		 je	 SHORT $LN531@suspend_cm
  0193f	b8 ff ff ff ff	 mov	 eax, -1
  01944	e9 1b 09 00 00	 jmp	 $LN1@suspend_cm
$LN531@suspend_cm:
  01949	33 c0		 xor	 eax, eax
  0194b	85 c0		 test	 eax, eax
  0194d	75 cb		 jne	 SHORT $LN311@suspend_cm
$LN314@suspend_cm:

; 282  :         SR_WRITE_HDR(file, SR_DELIMITER, 0);

  0194f	45 33 c0	 xor	 r8d, r8d
  01952	ba fe ff ef ac	 mov	 edx, -1393557506	; aceffffeH
  01957	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0195c	e8 00 00 00 00	 call	 sr_write_hdr
  01961	85 c0		 test	 eax, eax
  01963	74 0a		 je	 SHORT $LN532@suspend_cm
  01965	b8 ff ff ff ff	 mov	 eax, -1
  0196a	e9 f5 08 00 00	 jmp	 $LN1@suspend_cm
$LN532@suspend_cm:
  0196f	33 c0		 xor	 eax, eax
  01971	85 c0		 test	 eax, eax
  01973	75 da		 jne	 SHORT $LN314@suspend_cm

; 283  :     }

  01975	e9 f6 f6 ff ff	 jmp	 $LN189@suspend_cm
$LN190@suspend_cm:

; 284  : 
; 285  :     /* Write Device data */
; 286  :     for (dev = sysblk.firstdev; dev; dev = dev->nextdev)

  0197a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01981	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  01988	48 89 44 24 60	 mov	 QWORD PTR dev$[rsp], rax
  0198d	eb 0e		 jmp	 SHORT $LN317@suspend_cm
$LN315@suspend_cm:
  0198f	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01994	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  01998	48 89 44 24 60	 mov	 QWORD PTR dev$[rsp], rax
$LN317@suspend_cm:
  0199d	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$[rsp], 0
  019a3	0f 84 cb 07 00
	00		 je	 $LN316@suspend_cm

; 287  :     {
; 288  :         if (!(dev->pmcw.flag5 & PMCW5_V)) continue;

  019a9	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  019ae	0f b6 80 f1 02
	00 00		 movzx	 eax, BYTE PTR [rax+753]
  019b5	83 e0 01	 and	 eax, 1
  019b8	85 c0		 test	 eax, eax
  019ba	75 02		 jne	 SHORT $LN533@suspend_cm
  019bc	eb d1		 jmp	 SHORT $LN315@suspend_cm
$LN533@suspend_cm:
$LN320@suspend_cm:

; 289  : 
; 290  :         TRACE("SR: Saving Device %4.4X...\n", dev->devnum);

  019be	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  019c3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  019c7	8b d0		 mov	 edx, eax
  019c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178566
  019d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  019d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  019dc	85 c0		 test	 eax, eax
  019de	74 17		 je	 SHORT $LN534@suspend_cm
  019e0	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  019e5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  019e9	8b d0		 mov	 edx, eax
  019eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178568
  019f2	e8 00 00 00 00	 call	 DebuggerTrace
$LN534@suspend_cm:
  019f7	33 c0		 xor	 eax, eax
  019f9	85 c0		 test	 eax, eax
  019fb	75 c1		 jne	 SHORT $LN320@suspend_cm
$LN323@suspend_cm:

; 291  : 
; 292  :         /* These fields must come first so the device could be attached */
; 293  :         SR_WRITE_VALUE(file, SR_DEV, dev->devnum, sizeof(dev->devnum));

  019fd	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01a02	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01a06	41 b9 02 00 00
	00		 mov	 r9d, 2
  01a0c	44 8b c0	 mov	 r8d, eax
  01a0f	ba 00 00 e3 ac	 mov	 edx, -1394409472	; ace30000H
  01a14	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01a19	e8 00 00 00 00	 call	 sr_write_value
  01a1e	85 c0		 test	 eax, eax
  01a20	74 0a		 je	 SHORT $LN535@suspend_cm
  01a22	b8 ff ff ff ff	 mov	 eax, -1
  01a27	e9 38 08 00 00	 jmp	 $LN1@suspend_cm
$LN535@suspend_cm:
  01a2c	33 c0		 xor	 eax, eax
  01a2e	85 c0		 test	 eax, eax
  01a30	75 cb		 jne	 SHORT $LN323@suspend_cm
$LN326@suspend_cm:

; 294  :         SR_WRITE_VALUE(file, SR_DEV_LCSS, SSID_TO_LCSS(dev->ssid), sizeof(U16));

  01a32	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01a37	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01a3b	d1 f8		 sar	 eax, 1
  01a3d	48 98		 cdqe
  01a3f	41 b9 02 00 00
	00		 mov	 r9d, 2
  01a45	4c 8b c0	 mov	 r8, rax
  01a48	ba 05 00 e3 ac	 mov	 edx, -1394409467	; ace30005H
  01a4d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01a52	e8 00 00 00 00	 call	 sr_write_value
  01a57	85 c0		 test	 eax, eax
  01a59	74 0a		 je	 SHORT $LN536@suspend_cm
  01a5b	b8 ff ff ff ff	 mov	 eax, -1
  01a60	e9 ff 07 00 00	 jmp	 $LN1@suspend_cm
$LN536@suspend_cm:
  01a65	33 c0		 xor	 eax, eax
  01a67	85 c0		 test	 eax, eax
  01a69	75 c7		 jne	 SHORT $LN326@suspend_cm
$LN329@suspend_cm:

; 295  :         SR_WRITE_VALUE(file, SR_DEV_ARGC, dev->argc, sizeof(dev->argc));

  01a6b	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01a70	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  01a74	41 b9 04 00 00
	00		 mov	 r9d, 4
  01a7a	4c 8b c0	 mov	 r8, rax
  01a7d	ba 02 00 e3 ac	 mov	 edx, -1394409470	; ace30002H
  01a82	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01a87	e8 00 00 00 00	 call	 sr_write_value
  01a8c	85 c0		 test	 eax, eax
  01a8e	74 0a		 je	 SHORT $LN537@suspend_cm
  01a90	b8 ff ff ff ff	 mov	 eax, -1
  01a95	e9 ca 07 00 00	 jmp	 $LN1@suspend_cm
$LN537@suspend_cm:
  01a9a	33 c0		 xor	 eax, eax
  01a9c	85 c0		 test	 eax, eax
  01a9e	75 cb		 jne	 SHORT $LN329@suspend_cm

; 296  :         for (i = 0; i < dev->argc; i++)

  01aa0	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01aa8	eb 0a		 jmp	 SHORT $LN332@suspend_cm
$LN330@suspend_cm:
  01aaa	8b 44 24 5c	 mov	 eax, DWORD PTR i$[rsp]
  01aae	ff c0		 inc	 eax
  01ab0	89 44 24 5c	 mov	 DWORD PTR i$[rsp], eax
$LN332@suspend_cm:
  01ab4	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01ab9	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  01abc	39 44 24 5c	 cmp	 DWORD PTR i$[rsp], eax
  01ac0	7d 7b		 jge	 SHORT $LN331@suspend_cm

; 297  :             if (dev->argv[i])

  01ac2	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  01ac7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  01acc	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  01ad0	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  01ad5	74 37		 je	 SHORT $LN538@suspend_cm
$LN335@suspend_cm:

; 298  :             {
; 299  :                 SR_WRITE_STRING(file, SR_DEV_ARGV, dev->argv[i]);

  01ad7	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$[rsp]
  01adc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  01ae1	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  01ae5	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01ae9	ba 03 00 e3 ac	 mov	 edx, -1394409469	; ace30003H
  01aee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01af3	e8 00 00 00 00	 call	 sr_write_string
  01af8	85 c0		 test	 eax, eax
  01afa	74 0a		 je	 SHORT $LN540@suspend_cm
  01afc	b8 ff ff ff ff	 mov	 eax, -1
  01b01	e9 5e 07 00 00	 jmp	 $LN1@suspend_cm
$LN540@suspend_cm:
  01b06	33 c0		 xor	 eax, eax
  01b08	85 c0		 test	 eax, eax
  01b0a	75 cb		 jne	 SHORT $LN335@suspend_cm

; 300  :             }

  01b0c	eb 2a		 jmp	 SHORT $LN539@suspend_cm
$LN538@suspend_cm:
$LN338@suspend_cm:

; 301  :             else
; 302  :             {
; 303  :                 SR_WRITE_STRING(file, SR_DEV_ARGV, "");

  01b0e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178576
  01b15	ba 03 00 e3 ac	 mov	 edx, -1394409469	; ace30003H
  01b1a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01b1f	e8 00 00 00 00	 call	 sr_write_string
  01b24	85 c0		 test	 eax, eax
  01b26	74 0a		 je	 SHORT $LN541@suspend_cm
  01b28	b8 ff ff ff ff	 mov	 eax, -1
  01b2d	e9 32 07 00 00	 jmp	 $LN1@suspend_cm
$LN541@suspend_cm:
  01b32	33 c0		 xor	 eax, eax
  01b34	85 c0		 test	 eax, eax
  01b36	75 d6		 jne	 SHORT $LN338@suspend_cm
$LN539@suspend_cm:

; 304  :             }

  01b38	e9 6d ff ff ff	 jmp	 $LN330@suspend_cm
$LN331@suspend_cm:
$LN341@suspend_cm:

; 305  :         SR_WRITE_VALUE(file, SR_DEV_NUMCONFDEV, dev->numconfdev, sizeof(dev->numconfdev));

  01b3d	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01b42	48 63 40 78	 movsxd	 rax, DWORD PTR [rax+120]
  01b46	41 b9 04 00 00
	00		 mov	 r9d, 4
  01b4c	4c 8b c0	 mov	 r8, rax
  01b4f	ba 1e 00 e3 ac	 mov	 edx, -1394409442	; ace3001eH
  01b54	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01b59	e8 00 00 00 00	 call	 sr_write_value
  01b5e	85 c0		 test	 eax, eax
  01b60	74 0a		 je	 SHORT $LN542@suspend_cm
  01b62	b8 ff ff ff ff	 mov	 eax, -1
  01b67	e9 f8 06 00 00	 jmp	 $LN1@suspend_cm
$LN542@suspend_cm:
  01b6c	33 c0		 xor	 eax, eax
  01b6e	85 c0		 test	 eax, eax
  01b70	75 cb		 jne	 SHORT $LN341@suspend_cm
$LN344@suspend_cm:

; 306  :         SR_WRITE_STRING(file, SR_DEV_TYPNAME, dev->typname);

  01b72	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01b77	4c 8b 40 50	 mov	 r8, QWORD PTR [rax+80]
  01b7b	ba 04 00 e3 ac	 mov	 edx, -1394409468	; ace30004H
  01b80	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01b85	e8 00 00 00 00	 call	 sr_write_string
  01b8a	85 c0		 test	 eax, eax
  01b8c	74 0a		 je	 SHORT $LN543@suspend_cm
  01b8e	b8 ff ff ff ff	 mov	 eax, -1
  01b93	e9 cc 06 00 00	 jmp	 $LN1@suspend_cm
$LN543@suspend_cm:
  01b98	33 c0		 xor	 eax, eax
  01b9a	85 c0		 test	 eax, eax
  01b9c	75 d4		 jne	 SHORT $LN344@suspend_cm
$LN347@suspend_cm:

; 307  : 
; 308  :         /* Common device fields */
; 309  :         SR_WRITE_BUF  (file, SR_DEV_ORB, &dev->orb, sizeof(ORB));

  01b9e	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01ba3	48 05 cc 02 00
	00		 add	 rax, 716		; 000002ccH
  01ba9	41 b9 20 00 00
	00		 mov	 r9d, 32			; 00000020H
  01baf	4c 8b c0	 mov	 r8, rax
  01bb2	ba 10 00 e3 ac	 mov	 edx, -1394409456	; ace30010H
  01bb7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01bbc	e8 00 00 00 00	 call	 sr_write_buf
  01bc1	85 c0		 test	 eax, eax
  01bc3	74 0a		 je	 SHORT $LN544@suspend_cm
  01bc5	b8 ff ff ff ff	 mov	 eax, -1
  01bca	e9 95 06 00 00	 jmp	 $LN1@suspend_cm
$LN544@suspend_cm:
  01bcf	33 c0		 xor	 eax, eax
  01bd1	85 c0		 test	 eax, eax
  01bd3	75 c9		 jne	 SHORT $LN347@suspend_cm
$LN350@suspend_cm:

; 310  :         SR_WRITE_BUF  (file, SR_DEV_PMCW, &dev->pmcw, sizeof(PMCW));

  01bd5	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01bda	48 05 ec 02 00
	00		 add	 rax, 748		; 000002ecH
  01be0	41 b9 1c 00 00
	00		 mov	 r9d, 28
  01be6	4c 8b c0	 mov	 r8, rax
  01be9	ba 11 00 e3 ac	 mov	 edx, -1394409455	; ace30011H
  01bee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01bf3	e8 00 00 00 00	 call	 sr_write_buf
  01bf8	85 c0		 test	 eax, eax
  01bfa	74 0a		 je	 SHORT $LN545@suspend_cm
  01bfc	b8 ff ff ff ff	 mov	 eax, -1
  01c01	e9 5e 06 00 00	 jmp	 $LN1@suspend_cm
$LN545@suspend_cm:
  01c06	33 c0		 xor	 eax, eax
  01c08	85 c0		 test	 eax, eax
  01c0a	75 c9		 jne	 SHORT $LN350@suspend_cm
$LN353@suspend_cm:

; 311  :         SR_WRITE_BUF  (file, SR_DEV_SCSW, &dev->scsw, sizeof(SCSW));

  01c0c	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01c11	48 05 08 03 00
	00		 add	 rax, 776		; 00000308H
  01c17	41 b9 0c 00 00
	00		 mov	 r9d, 12
  01c1d	4c 8b c0	 mov	 r8, rax
  01c20	ba 12 00 e3 ac	 mov	 edx, -1394409454	; ace30012H
  01c25	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01c2a	e8 00 00 00 00	 call	 sr_write_buf
  01c2f	85 c0		 test	 eax, eax
  01c31	74 0a		 je	 SHORT $LN546@suspend_cm
  01c33	b8 ff ff ff ff	 mov	 eax, -1
  01c38	e9 27 06 00 00	 jmp	 $LN1@suspend_cm
$LN546@suspend_cm:
  01c3d	33 c0		 xor	 eax, eax
  01c3f	85 c0		 test	 eax, eax
  01c41	75 c9		 jne	 SHORT $LN353@suspend_cm
$LN356@suspend_cm:

; 312  :         SR_WRITE_BUF  (file, SR_DEV_PCISCSW, &dev->pciscsw, sizeof(SCSW));

  01c43	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01c48	48 05 14 03 00
	00		 add	 rax, 788		; 00000314H
  01c4e	41 b9 0c 00 00
	00		 mov	 r9d, 12
  01c54	4c 8b c0	 mov	 r8, rax
  01c57	ba 13 00 e3 ac	 mov	 edx, -1394409453	; ace30013H
  01c5c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01c61	e8 00 00 00 00	 call	 sr_write_buf
  01c66	85 c0		 test	 eax, eax
  01c68	74 0a		 je	 SHORT $LN547@suspend_cm
  01c6a	b8 ff ff ff ff	 mov	 eax, -1
  01c6f	e9 f0 05 00 00	 jmp	 $LN1@suspend_cm
$LN547@suspend_cm:
  01c74	33 c0		 xor	 eax, eax
  01c76	85 c0		 test	 eax, eax
  01c78	75 c9		 jne	 SHORT $LN356@suspend_cm
$LN359@suspend_cm:

; 313  :         SR_WRITE_BUF  (file, SR_DEV_ATTNSCSW, &dev->attnscsw, sizeof(SCSW));

  01c7a	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01c7f	48 05 20 03 00
	00		 add	 rax, 800		; 00000320H
  01c85	41 b9 0c 00 00
	00		 mov	 r9d, 12
  01c8b	4c 8b c0	 mov	 r8, rax
  01c8e	ba 14 00 e3 ac	 mov	 edx, -1394409452	; ace30014H
  01c93	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01c98	e8 00 00 00 00	 call	 sr_write_buf
  01c9d	85 c0		 test	 eax, eax
  01c9f	74 0a		 je	 SHORT $LN548@suspend_cm
  01ca1	b8 ff ff ff ff	 mov	 eax, -1
  01ca6	e9 b9 05 00 00	 jmp	 $LN1@suspend_cm
$LN548@suspend_cm:
  01cab	33 c0		 xor	 eax, eax
  01cad	85 c0		 test	 eax, eax
  01caf	75 c9		 jne	 SHORT $LN359@suspend_cm
$LN362@suspend_cm:

; 314  :         SR_WRITE_BUF  (file, SR_DEV_ESW, &dev->esw, sizeof(ESW));

  01cb1	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01cb6	48 05 2c 03 00
	00		 add	 rax, 812		; 0000032cH
  01cbc	41 b9 14 00 00
	00		 mov	 r9d, 20
  01cc2	4c 8b c0	 mov	 r8, rax
  01cc5	ba 18 00 e3 ac	 mov	 edx, -1394409448	; ace30018H
  01cca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01ccf	e8 00 00 00 00	 call	 sr_write_buf
  01cd4	85 c0		 test	 eax, eax
  01cd6	74 0a		 je	 SHORT $LN549@suspend_cm
  01cd8	b8 ff ff ff ff	 mov	 eax, -1
  01cdd	e9 82 05 00 00	 jmp	 $LN1@suspend_cm
$LN549@suspend_cm:
  01ce2	33 c0		 xor	 eax, eax
  01ce4	85 c0		 test	 eax, eax
  01ce6	75 c9		 jne	 SHORT $LN362@suspend_cm
$LN365@suspend_cm:

; 315  :         SR_WRITE_BUF  (file, SR_DEV_ECW, dev->ecw, 32);

  01ce8	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01ced	48 05 40 03 00
	00		 add	 rax, 832		; 00000340H
  01cf3	41 b9 20 00 00
	00		 mov	 r9d, 32			; 00000020H
  01cf9	4c 8b c0	 mov	 r8, rax
  01cfc	ba 19 00 e3 ac	 mov	 edx, -1394409447	; ace30019H
  01d01	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01d06	e8 00 00 00 00	 call	 sr_write_buf
  01d0b	85 c0		 test	 eax, eax
  01d0d	74 0a		 je	 SHORT $LN550@suspend_cm
  01d0f	b8 ff ff ff ff	 mov	 eax, -1
  01d14	e9 4b 05 00 00	 jmp	 $LN1@suspend_cm
$LN550@suspend_cm:
  01d19	33 c0		 xor	 eax, eax
  01d1b	85 c0		 test	 eax, eax
  01d1d	75 c9		 jne	 SHORT $LN365@suspend_cm
$LN368@suspend_cm:

; 316  :         SR_WRITE_BUF  (file, SR_DEV_SENSE, dev->sense, 32);

  01d1f	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01d24	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  01d2a	41 b9 20 00 00
	00		 mov	 r9d, 32			; 00000020H
  01d30	4c 8b c0	 mov	 r8, rax
  01d33	ba 1a 00 e3 ac	 mov	 edx, -1394409446	; ace3001aH
  01d38	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01d3d	e8 00 00 00 00	 call	 sr_write_buf
  01d42	85 c0		 test	 eax, eax
  01d44	74 0a		 je	 SHORT $LN551@suspend_cm
  01d46	b8 ff ff ff ff	 mov	 eax, -1
  01d4b	e9 14 05 00 00	 jmp	 $LN1@suspend_cm
$LN551@suspend_cm:
  01d50	33 c0		 xor	 eax, eax
  01d52	85 c0		 test	 eax, eax
  01d54	75 c9		 jne	 SHORT $LN368@suspend_cm
$LN371@suspend_cm:

; 317  :         SR_WRITE_VALUE(file, SR_DEV_PGSTAT, dev->pgstat, sizeof(dev->pgstat));

  01d56	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01d5b	0f b6 80 ac 05
	00 00		 movzx	 eax, BYTE PTR [rax+1452]
  01d62	41 b9 01 00 00
	00		 mov	 r9d, 1
  01d68	44 8b c0	 mov	 r8d, eax
  01d6b	ba 1b 00 e3 ac	 mov	 edx, -1394409445	; ace3001bH
  01d70	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01d75	e8 00 00 00 00	 call	 sr_write_value
  01d7a	85 c0		 test	 eax, eax
  01d7c	74 0a		 je	 SHORT $LN552@suspend_cm
  01d7e	b8 ff ff ff ff	 mov	 eax, -1
  01d83	e9 dc 04 00 00	 jmp	 $LN1@suspend_cm
$LN552@suspend_cm:
  01d88	33 c0		 xor	 eax, eax
  01d8a	85 c0		 test	 eax, eax
  01d8c	75 c8		 jne	 SHORT $LN371@suspend_cm
$LN374@suspend_cm:

; 318  :         SR_WRITE_BUF  (file, SR_DEV_PGID, dev->pgid, 11);

  01d8e	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01d93	48 05 ad 05 00
	00		 add	 rax, 1453		; 000005adH
  01d99	41 b9 0b 00 00
	00		 mov	 r9d, 11
  01d9f	4c 8b c0	 mov	 r8, rax
  01da2	ba 1c 00 e3 ac	 mov	 edx, -1394409444	; ace3001cH
  01da7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01dac	e8 00 00 00 00	 call	 sr_write_buf
  01db1	85 c0		 test	 eax, eax
  01db3	74 0a		 je	 SHORT $LN553@suspend_cm
  01db5	b8 ff ff ff ff	 mov	 eax, -1
  01dba	e9 a5 04 00 00	 jmp	 $LN1@suspend_cm
$LN553@suspend_cm:
  01dbf	33 c0		 xor	 eax, eax
  01dc1	85 c0		 test	 eax, eax
  01dc3	75 c9		 jne	 SHORT $LN374@suspend_cm
$LN377@suspend_cm:

; 319  :         /* By Adrian - SR_DEV_DRVPWD */
; 320  :         SR_WRITE_BUF  (file, SR_DEV_DRVPWD, dev->drvpwd, 11);

  01dc5	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01dca	48 05 e8 05 00
	00		 add	 rax, 1512		; 000005e8H
  01dd0	41 b9 0b 00 00
	00		 mov	 r9d, 11
  01dd6	4c 8b c0	 mov	 r8, rax
  01dd9	ba 1d 00 e3 ac	 mov	 edx, -1394409443	; ace3001dH
  01dde	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01de3	e8 00 00 00 00	 call	 sr_write_buf
  01de8	85 c0		 test	 eax, eax
  01dea	74 0a		 je	 SHORT $LN554@suspend_cm
  01dec	b8 ff ff ff ff	 mov	 eax, -1
  01df1	e9 6e 04 00 00	 jmp	 $LN1@suspend_cm
$LN554@suspend_cm:
  01df6	33 c0		 xor	 eax, eax
  01df8	85 c0		 test	 eax, eax
  01dfa	75 c9		 jne	 SHORT $LN377@suspend_cm
$LN380@suspend_cm:

; 321  :         SR_WRITE_VALUE(file, SR_DEV_BUSY, dev->busy, 1);

  01dfc	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01e01	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01e07	c1 e8 13	 shr	 eax, 19
  01e0a	83 e0 01	 and	 eax, 1
  01e0d	8b c0		 mov	 eax, eax
  01e0f	41 b9 01 00 00
	00		 mov	 r9d, 1
  01e15	44 8b c0	 mov	 r8d, eax
  01e18	ba 20 00 e3 ac	 mov	 edx, -1394409440	; ace30020H
  01e1d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01e22	e8 00 00 00 00	 call	 sr_write_value
  01e27	85 c0		 test	 eax, eax
  01e29	74 0a		 je	 SHORT $LN555@suspend_cm
  01e2b	b8 ff ff ff ff	 mov	 eax, -1
  01e30	e9 2f 04 00 00	 jmp	 $LN1@suspend_cm
$LN555@suspend_cm:
  01e35	33 c0		 xor	 eax, eax
  01e37	85 c0		 test	 eax, eax
  01e39	75 c1		 jne	 SHORT $LN380@suspend_cm
$LN383@suspend_cm:

; 322  :         SR_WRITE_VALUE(file, SR_DEV_RESERVED, dev->reserved, 1);

  01e3b	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01e40	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01e46	c1 e8 14	 shr	 eax, 20
  01e49	83 e0 01	 and	 eax, 1
  01e4c	8b c0		 mov	 eax, eax
  01e4e	41 b9 01 00 00
	00		 mov	 r9d, 1
  01e54	44 8b c0	 mov	 r8d, eax
  01e57	ba 21 00 e3 ac	 mov	 edx, -1394409439	; ace30021H
  01e5c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01e61	e8 00 00 00 00	 call	 sr_write_value
  01e66	85 c0		 test	 eax, eax
  01e68	74 0a		 je	 SHORT $LN556@suspend_cm
  01e6a	b8 ff ff ff ff	 mov	 eax, -1
  01e6f	e9 f0 03 00 00	 jmp	 $LN1@suspend_cm
$LN556@suspend_cm:
  01e74	33 c0		 xor	 eax, eax
  01e76	85 c0		 test	 eax, eax
  01e78	75 c1		 jne	 SHORT $LN383@suspend_cm
$LN386@suspend_cm:

; 323  :         SR_WRITE_VALUE(file, SR_DEV_SUSPENDED, dev->suspended, 1);

  01e7a	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01e7f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01e85	c1 e8 15	 shr	 eax, 21
  01e88	83 e0 01	 and	 eax, 1
  01e8b	8b c0		 mov	 eax, eax
  01e8d	41 b9 01 00 00
	00		 mov	 r9d, 1
  01e93	44 8b c0	 mov	 r8d, eax
  01e96	ba 22 00 e3 ac	 mov	 edx, -1394409438	; ace30022H
  01e9b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01ea0	e8 00 00 00 00	 call	 sr_write_value
  01ea5	85 c0		 test	 eax, eax
  01ea7	74 0a		 je	 SHORT $LN557@suspend_cm
  01ea9	b8 ff ff ff ff	 mov	 eax, -1
  01eae	e9 b1 03 00 00	 jmp	 $LN1@suspend_cm
$LN557@suspend_cm:
  01eb3	33 c0		 xor	 eax, eax
  01eb5	85 c0		 test	 eax, eax
  01eb7	75 c1		 jne	 SHORT $LN386@suspend_cm
$LN389@suspend_cm:

; 324  :         SR_WRITE_VALUE(file, SR_DEV_PCIPENDING, dev->pcipending, 1);

  01eb9	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01ebe	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01ec4	c1 e8 17	 shr	 eax, 23
  01ec7	83 e0 01	 and	 eax, 1
  01eca	8b c0		 mov	 eax, eax
  01ecc	41 b9 01 00 00
	00		 mov	 r9d, 1
  01ed2	44 8b c0	 mov	 r8d, eax
  01ed5	ba 24 00 e3 ac	 mov	 edx, -1394409436	; ace30024H
  01eda	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01edf	e8 00 00 00 00	 call	 sr_write_value
  01ee4	85 c0		 test	 eax, eax
  01ee6	74 0a		 je	 SHORT $LN558@suspend_cm
  01ee8	b8 ff ff ff ff	 mov	 eax, -1
  01eed	e9 72 03 00 00	 jmp	 $LN1@suspend_cm
$LN558@suspend_cm:
  01ef2	33 c0		 xor	 eax, eax
  01ef4	85 c0		 test	 eax, eax
  01ef6	75 c1		 jne	 SHORT $LN389@suspend_cm
$LN392@suspend_cm:

; 325  :         SR_WRITE_VALUE(file, SR_DEV_ATTNPENDING, dev->attnpending, 1);

  01ef8	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01efd	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01f03	c1 e8 18	 shr	 eax, 24
  01f06	83 e0 01	 and	 eax, 1
  01f09	8b c0		 mov	 eax, eax
  01f0b	41 b9 01 00 00
	00		 mov	 r9d, 1
  01f11	44 8b c0	 mov	 r8d, eax
  01f14	ba 25 00 e3 ac	 mov	 edx, -1394409435	; ace30025H
  01f19	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01f1e	e8 00 00 00 00	 call	 sr_write_value
  01f23	85 c0		 test	 eax, eax
  01f25	74 0a		 je	 SHORT $LN559@suspend_cm
  01f27	b8 ff ff ff ff	 mov	 eax, -1
  01f2c	e9 33 03 00 00	 jmp	 $LN1@suspend_cm
$LN559@suspend_cm:
  01f31	33 c0		 xor	 eax, eax
  01f33	85 c0		 test	 eax, eax
  01f35	75 c1		 jne	 SHORT $LN392@suspend_cm
$LN395@suspend_cm:

; 326  :         SR_WRITE_VALUE(file, SR_DEV_PENDING, dev->pending, 1);

  01f37	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01f3c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01f42	c1 e8 16	 shr	 eax, 22
  01f45	83 e0 01	 and	 eax, 1
  01f48	8b c0		 mov	 eax, eax
  01f4a	41 b9 01 00 00
	00		 mov	 r9d, 1
  01f50	44 8b c0	 mov	 r8d, eax
  01f53	ba 23 00 e3 ac	 mov	 edx, -1394409437	; ace30023H
  01f58	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01f5d	e8 00 00 00 00	 call	 sr_write_value
  01f62	85 c0		 test	 eax, eax
  01f64	74 0a		 je	 SHORT $LN560@suspend_cm
  01f66	b8 ff ff ff ff	 mov	 eax, -1
  01f6b	e9 f4 02 00 00	 jmp	 $LN1@suspend_cm
$LN560@suspend_cm:
  01f70	33 c0		 xor	 eax, eax
  01f72	85 c0		 test	 eax, eax
  01f74	75 c1		 jne	 SHORT $LN395@suspend_cm
$LN398@suspend_cm:

; 327  :         SR_WRITE_VALUE(file, SR_DEV_STARTPENDING, dev->startpending, 1);

  01f76	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01f7b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01f81	c1 e8 19	 shr	 eax, 25
  01f84	83 e0 01	 and	 eax, 1
  01f87	8b c0		 mov	 eax, eax
  01f89	41 b9 01 00 00
	00		 mov	 r9d, 1
  01f8f	44 8b c0	 mov	 r8d, eax
  01f92	ba 26 00 e3 ac	 mov	 edx, -1394409434	; ace30026H
  01f97	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01f9c	e8 00 00 00 00	 call	 sr_write_value
  01fa1	85 c0		 test	 eax, eax
  01fa3	74 0a		 je	 SHORT $LN561@suspend_cm
  01fa5	b8 ff ff ff ff	 mov	 eax, -1
  01faa	e9 b5 02 00 00	 jmp	 $LN1@suspend_cm
$LN561@suspend_cm:
  01faf	33 c0		 xor	 eax, eax
  01fb1	85 c0		 test	 eax, eax
  01fb3	75 c1		 jne	 SHORT $LN398@suspend_cm
$LN401@suspend_cm:

; 328  :         SR_WRITE_VALUE(file, SR_DEV_CCWADDR, dev->ccwaddr, sizeof(dev->ccwaddr));

  01fb5	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01fba	8b 80 80 02 00
	00		 mov	 eax, DWORD PTR [rax+640]
  01fc0	41 b9 04 00 00
	00		 mov	 r9d, 4
  01fc6	44 8b c0	 mov	 r8d, eax
  01fc9	ba 28 00 e3 ac	 mov	 edx, -1394409432	; ace30028H
  01fce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  01fd3	e8 00 00 00 00	 call	 sr_write_value
  01fd8	85 c0		 test	 eax, eax
  01fda	74 0a		 je	 SHORT $LN562@suspend_cm
  01fdc	b8 ff ff ff ff	 mov	 eax, -1
  01fe1	e9 7e 02 00 00	 jmp	 $LN1@suspend_cm
$LN562@suspend_cm:
  01fe6	33 c0		 xor	 eax, eax
  01fe8	85 c0		 test	 eax, eax
  01fea	75 c9		 jne	 SHORT $LN401@suspend_cm
$LN404@suspend_cm:

; 329  :         SR_WRITE_VALUE(file, SR_DEV_IDAPMASK, dev->idapmask, sizeof(dev->idapmask));

  01fec	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  01ff1	0f b7 80 84 02
	00 00		 movzx	 eax, WORD PTR [rax+644]
  01ff8	41 b9 02 00 00
	00		 mov	 r9d, 2
  01ffe	44 8b c0	 mov	 r8d, eax
  02001	ba 29 00 e3 ac	 mov	 edx, -1394409431	; ace30029H
  02006	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0200b	e8 00 00 00 00	 call	 sr_write_value
  02010	85 c0		 test	 eax, eax
  02012	74 0a		 je	 SHORT $LN563@suspend_cm
  02014	b8 ff ff ff ff	 mov	 eax, -1
  02019	e9 46 02 00 00	 jmp	 $LN1@suspend_cm
$LN563@suspend_cm:
  0201e	33 c0		 xor	 eax, eax
  02020	85 c0		 test	 eax, eax
  02022	75 c8		 jne	 SHORT $LN404@suspend_cm
$LN407@suspend_cm:

; 330  :         SR_WRITE_VALUE(file, SR_DEV_IDAWFMT, dev->idawfmt, sizeof(dev->idawfmt));

  02024	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  02029	0f b6 80 86 02
	00 00		 movzx	 eax, BYTE PTR [rax+646]
  02030	41 b9 01 00 00
	00		 mov	 r9d, 1
  02036	44 8b c0	 mov	 r8d, eax
  02039	ba 2a 00 e3 ac	 mov	 edx, -1394409430	; ace3002aH
  0203e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  02043	e8 00 00 00 00	 call	 sr_write_value
  02048	85 c0		 test	 eax, eax
  0204a	74 0a		 je	 SHORT $LN564@suspend_cm
  0204c	b8 ff ff ff ff	 mov	 eax, -1
  02051	e9 0e 02 00 00	 jmp	 $LN1@suspend_cm
$LN564@suspend_cm:
  02056	33 c0		 xor	 eax, eax
  02058	85 c0		 test	 eax, eax
  0205a	75 c8		 jne	 SHORT $LN407@suspend_cm
$LN410@suspend_cm:

; 331  :         SR_WRITE_VALUE(file, SR_DEV_CCWFMT, dev->ccwfmt, sizeof(dev->ccwfmt));

  0205c	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  02061	0f b6 80 87 02
	00 00		 movzx	 eax, BYTE PTR [rax+647]
  02068	41 b9 01 00 00
	00		 mov	 r9d, 1
  0206e	44 8b c0	 mov	 r8d, eax
  02071	ba 2b 00 e3 ac	 mov	 edx, -1394409429	; ace3002bH
  02076	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  0207b	e8 00 00 00 00	 call	 sr_write_value
  02080	85 c0		 test	 eax, eax
  02082	74 0a		 je	 SHORT $LN565@suspend_cm
  02084	b8 ff ff ff ff	 mov	 eax, -1
  02089	e9 d6 01 00 00	 jmp	 $LN1@suspend_cm
$LN565@suspend_cm:
  0208e	33 c0		 xor	 eax, eax
  02090	85 c0		 test	 eax, eax
  02092	75 c8		 jne	 SHORT $LN410@suspend_cm
$LN413@suspend_cm:

; 332  :         SR_WRITE_VALUE(file, SR_DEV_CCWKEY, dev->ccwkey, sizeof(dev->ccwkey));

  02094	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  02099	0f b6 80 88 02
	00 00		 movzx	 eax, BYTE PTR [rax+648]
  020a0	41 b9 01 00 00
	00		 mov	 r9d, 1
  020a6	44 8b c0	 mov	 r8d, eax
  020a9	ba 2c 00 e3 ac	 mov	 edx, -1394409428	; ace3002cH
  020ae	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  020b3	e8 00 00 00 00	 call	 sr_write_value
  020b8	85 c0		 test	 eax, eax
  020ba	74 0a		 je	 SHORT $LN566@suspend_cm
  020bc	b8 ff ff ff ff	 mov	 eax, -1
  020c1	e9 9e 01 00 00	 jmp	 $LN1@suspend_cm
$LN566@suspend_cm:
  020c6	33 c0		 xor	 eax, eax
  020c8	85 c0		 test	 eax, eax
  020ca	75 c8		 jne	 SHORT $LN413@suspend_cm
$LN416@suspend_cm:

; 333  : 
; 334  :         /* Device type specific data */
; 335  :         SR_WRITE_VALUE(file, SR_DEV_DEVTYPE, dev->devtype, sizeof(dev->devtype));

  020cc	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  020d1	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  020d5	41 b9 02 00 00
	00		 mov	 r9d, 2
  020db	44 8b c0	 mov	 r8d, eax
  020de	ba 01 00 e3 ac	 mov	 edx, -1394409471	; ace30001H
  020e3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  020e8	e8 00 00 00 00	 call	 sr_write_value
  020ed	85 c0		 test	 eax, eax
  020ef	74 0a		 je	 SHORT $LN567@suspend_cm
  020f1	b8 ff ff ff ff	 mov	 eax, -1
  020f6	e9 69 01 00 00	 jmp	 $LN1@suspend_cm
$LN567@suspend_cm:
  020fb	33 c0		 xor	 eax, eax
  020fd	85 c0		 test	 eax, eax
  020ff	75 cb		 jne	 SHORT $LN416@suspend_cm

; 336  :         if (dev->hnd->hsuspend)

  02101	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  02106	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  0210d	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  02115	74 32		 je	 SHORT $LN568@suspend_cm

; 337  :         {
; 338  :             rc = (dev->hnd->hsuspend) (dev, file);

  02117	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0211c	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  02123	48 8b 54 24 50	 mov	 rdx, QWORD PTR file$[rsp]
  02128	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  0212d	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]
  02133	89 84 24 80 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 339  :             if (rc < 0) goto sr_error_exit;

  0213a	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  02142	7d 05		 jge	 SHORT $LN569@suspend_cm
  02144	e9 b7 00 00 00	 jmp	 $sr_error_exit$576
$LN569@suspend_cm:
$LN568@suspend_cm:
$LN419@suspend_cm:

; 340  :         }
; 341  :         SR_WRITE_HDR(file, SR_DELIMITER, 0);

  02149	45 33 c0	 xor	 r8d, r8d
  0214c	ba fe ff ef ac	 mov	 edx, -1393557506	; aceffffeH
  02151	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  02156	e8 00 00 00 00	 call	 sr_write_hdr
  0215b	85 c0		 test	 eax, eax
  0215d	74 0a		 je	 SHORT $LN570@suspend_cm
  0215f	b8 ff ff ff ff	 mov	 eax, -1
  02164	e9 fb 00 00 00	 jmp	 $LN1@suspend_cm
$LN570@suspend_cm:
  02169	33 c0		 xor	 eax, eax
  0216b	85 c0		 test	 eax, eax
  0216d	75 da		 jne	 SHORT $LN419@suspend_cm

; 342  :     }

  0216f	e9 1b f8 ff ff	 jmp	 $LN315@suspend_cm
$LN316@suspend_cm:
$LN422@suspend_cm:

; 343  : 
; 344  :     TRACE("SR: Writing EOF\n");

  02174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178606
  0217b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  02181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  02187	85 c0		 test	 eax, eax
  02189	74 0c		 je	 SHORT $LN571@suspend_cm
  0218b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178608
  02192	e8 00 00 00 00	 call	 DebuggerTrace
$LN571@suspend_cm:
  02197	33 c0		 xor	 eax, eax
  02199	85 c0		 test	 eax, eax
  0219b	75 d7		 jne	 SHORT $LN422@suspend_cm
$LN425@suspend_cm:

; 345  : 
; 346  :     SR_WRITE_HDR(file, SR_EOF, 0);

  0219d	45 33 c0	 xor	 r8d, r8d
  021a0	ba ff ff ef ac	 mov	 edx, -1393557505	; acefffffH
  021a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  021aa	e8 00 00 00 00	 call	 sr_write_hdr
  021af	85 c0		 test	 eax, eax
  021b1	74 0a		 je	 SHORT $LN572@suspend_cm
  021b3	b8 ff ff ff ff	 mov	 eax, -1
  021b8	e9 a7 00 00 00	 jmp	 $LN1@suspend_cm
$LN572@suspend_cm:
  021bd	33 c0		 xor	 eax, eax
  021bf	85 c0		 test	 eax, eax
  021c1	75 da		 jne	 SHORT $LN425@suspend_cm

; 347  :     SR_CLOSE (file);

  021c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  021c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
$LN428@suspend_cm:

; 348  : 
; 349  :     TRACE("SR: Suspend Complete; shutting down...\n");

  021ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178610
  021d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  021db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  021e1	85 c0		 test	 eax, eax
  021e3	74 0c		 je	 SHORT $LN573@suspend_cm
  021e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178612
  021ec	e8 00 00 00 00	 call	 DebuggerTrace
$LN573@suspend_cm:
  021f1	33 c0		 xor	 eax, eax
  021f3	85 c0		 test	 eax, eax
  021f5	75 d7		 jne	 SHORT $LN428@suspend_cm

; 350  : 
; 351  :     /* Shutdown */
; 352  :     do_shutdown();

  021f7	e8 00 00 00 00	 call	 do_shutdown

; 353  : 
; 354  :     return 0;

  021fc	33 c0		 xor	 eax, eax
  021fe	eb 64		 jmp	 SHORT $LN1@suspend_cm
$sr_error_exit$576:

; 355  : 
; 356  : sr_error_exit:
; 357  :     // "SR: error processing file '%s'"
; 358  :     WRMSG(HHC02004, "E", fn);

  02200	b9 01 00 00 00	 mov	 ecx, 1
  02205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0220b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR fn$[rsp]
  02213	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178613
  0221f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178614
  0222b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02230	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02235	41 b9 03 00 00
	00		 mov	 r9d, 3
  0223b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG178615
  02242	ba 66 01 00 00	 mov	 edx, 358		; 00000166H
  02247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG178616
  0224e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 359  :     SR_CLOSE (file);

  02254	48 8b 4c 24 50	 mov	 rcx, QWORD PTR file$[rsp]
  02259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 360  :     return -1;

  0225f	b8 ff ff ff ff	 mov	 eax, -1
$LN1@suspend_cm:

; 361  : }

  02264	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0226c	48 33 cc	 xor	 rcx, rsp
  0226f	e8 00 00 00 00	 call	 __security_check_cookie
  02274	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  0227b	c3		 ret	 0
suspend_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_dw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_dw_noswap PROC					; COMDAT

; 834  :     inline void store_dw_noswap(void *ptr, U64 value) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 835  :       memcpy((BYTE *)ptr, (BYTE *)&value, 8);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR value$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :     }

  00017	c3		 ret	 0
store_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_dw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_dw_noswap PROC					; COMDAT

; 816  :     inline U64 fetch_dw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 817  :       U64 value;
; 818  :       memcpy(&value, (BYTE *)ptr, 8);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 04 24	 mov	 QWORD PTR value$[rsp], rax

; 819  :       return value;

  00015	48 8b 04 24	 mov	 rax, QWORD PTR value$[rsp]

; 820  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_fw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_fw_noswap PROC					; COMDAT

; 764  :     inline void store_fw_noswap(void *ptr, U32 value) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 765  :       memcpy((BYTE *)ptr, (BYTE *)&value, 4);

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR value$[rsp]
  00012	89 08		 mov	 DWORD PTR [rax], ecx

; 766  :     }

  00014	c3		 ret	 0
store_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
ctime	PROC

; 474  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 475  :             return _ctime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ctime64

; 476  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
ctime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
