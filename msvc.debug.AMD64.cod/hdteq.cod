; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG159052 DB	'1052', 00H
	ORG $+3
$SG159053 DB	'3270', 00H
	ORG $+3
$SG159054 DB	'3215', 00H
	ORG $+3
$SG159055 DB	'3270', 00H
	ORG $+3
$SG159056 DB	'3287', 00H
	ORG $+3
$SG159057 DB	'3270', 00H
	ORG $+3
$SG159058 DB	'SYSG', 00H
	ORG $+3
$SG159059 DB	'3270', 00H
	ORG $+3
$SG159060 DB	'1052-C', 00H
	ORG $+1
$SG159061 DB	'1052c', 00H
	ORG $+2
$SG159062 DB	'3215-C', 00H
	ORG $+1
$SG159063 DB	'1052c', 00H
	ORG $+2
$SG159064 DB	'1442', 00H
	ORG $+3
$SG159065 DB	'3505', 00H
	ORG $+3
$SG159066 DB	'2501', 00H
	ORG $+3
$SG159067 DB	'3505', 00H
	ORG $+3
$SG159068 DB	'3203', 00H
	ORG $+3
$SG159069 DB	'1403', 00H
	ORG $+3
$SG159070 DB	'3211', 00H
	ORG $+3
$SG159071 DB	'1403', 00H
	ORG $+3
$SG159072 DB	'3410', 00H
	ORG $+3
$SG159073 DB	'3420', 00H
	ORG $+3
$SG159074 DB	'3411', 00H
	ORG $+3
$SG159075 DB	'3420', 00H
	ORG $+3
$SG159076 DB	'3480', 00H
	ORG $+3
$SG159077 DB	'3420', 00H
	ORG $+3
$SG159078 DB	'3490', 00H
	ORG $+3
$SG159079 DB	'3420', 00H
	ORG $+3
$SG159080 DB	'3590', 00H
	ORG $+3
$SG159081 DB	'3420', 00H
	ORG $+3
$SG159082 DB	'9347', 00H
	ORG $+3
$SG159083 DB	'3420', 00H
	ORG $+3
$SG159084 DB	'9348', 00H
	ORG $+3
$SG159085 DB	'3420', 00H
	ORG $+3
$SG159086 DB	'8809', 00H
	ORG $+3
$SG159087 DB	'3420', 00H
	ORG $+3
$SG159088 DB	'3422', 00H
	ORG $+3
$SG159089 DB	'3420', 00H
	ORG $+3
$SG159090 DB	'3430', 00H
	ORG $+3
$SG159091 DB	'3420', 00H
	ORG $+3
$SG159092 DB	'V3480', 00H
	ORG $+2
$SG159093 DB	'3480V', 00H
	ORG $+2
$SG159094 DB	'V3490', 00H
	ORG $+2
$SG159095 DB	'3480V', 00H
	ORG $+2
$SG159096 DB	'V3590', 00H
	ORG $+2
$SG159097 DB	'3480V', 00H
	ORG $+2
$SG159098 DB	'DW3480', 00H
	ORG $+1
$SG159099 DB	'3590D', 00H
	ORG $+2
$SG159100 DB	'DW3490', 00H
	ORG $+1
$SG159101 DB	'3590D', 00H
	ORG $+2
$SG159102 DB	'DW3590', 00H
	ORG $+1
$SG159103 DB	'3590D', 00H
	ORG $+2
$SG159104 DB	'TH3480', 00H
	ORG $+1
$SG159105 DB	'3590D', 00H
	ORG $+2
$SG159106 DB	'TH3490', 00H
	ORG $+1
$SG159107 DB	'3590D', 00H
	ORG $+2
$SG159108 DB	'TH3590', 00H
	ORG $+1
$SG159109 DB	'3590D', 00H
	ORG $+2
$SG159110 DB	'8232C', 00H
	ORG $+2
$SG159111 DB	'8232', 00H
	ORG $+3
$SG159112 DB	'OSA', 00H
$SG159113 DB	'QETH', 00H
	ORG $+3
$SG159114 DB	'OSD', 00H
$SG159115 DB	'QETH', 00H
	ORG $+3
$SG159116 DB	'LCS', 00H
$SG159117 DB	'3088', 00H
	ORG $+3
$SG159118 DB	'CTCI', 00H
	ORG $+3
$SG159119 DB	'3088', 00H
	ORG $+3
$SG159120 DB	'CTCT', 00H
	ORG $+3
$SG159121 DB	'3088', 00H
	ORG $+3
$SG159122 DB	'CTCE', 00H
	ORG $+3
$SG159123 DB	'3088', 00H
	ORG $+3
$SG159124 DB	'HCHAN', 00H
	ORG $+2
$SG159125 DB	'2880', 00H
	ORG $+3
$SG159126 DB	'2870', 00H
	ORG $+3
$SG159127 DB	'2880', 00H
	ORG $+3
$SG159128 DB	'2860', 00H
	ORG $+3
$SG159129 DB	'2880', 00H
	ORG $+3
$SG159130 DB	'9032', 00H
	ORG $+3
$SG159131 DB	'2880', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	hdl_check_depends_ep
PUBLIC	hdl_register_symbols_ep
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_rtrim:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_hdl_next:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$list_devequs DD imagerel list_devequs
	DD	imagerel list_devequs+635
	DD	imagerel $unwind$list_devequs
$pdata$devequ_func DD imagerel devequ_func
	DD	imagerel devequ_func+154
	DD	imagerel $unwind$devequ_func
$pdata$hdl_check_depends_ep DD imagerel $LN7
	DD	imagerel $LN7+68
	DD	imagerel $unwind$hdl_check_depends_ep
$pdata$hdl_register_symbols_ep DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$hdl_register_symbols_ep
pdata	ENDS
_DATA	SEGMENT
	ORG $+15
equtab	DQ	FLAT:$SG159052
	DQ	FLAT:$SG159053
	DQ	FLAT:$SG159054
	DQ	FLAT:$SG159055
	DQ	FLAT:$SG159056
	DQ	FLAT:$SG159057
	DQ	FLAT:$SG159058
	DQ	FLAT:$SG159059
	DQ	FLAT:$SG159060
	DQ	FLAT:$SG159061
	DQ	FLAT:$SG159062
	DQ	FLAT:$SG159063
	DQ	FLAT:$SG159064
	DQ	FLAT:$SG159065
	DQ	FLAT:$SG159066
	DQ	FLAT:$SG159067
	DQ	FLAT:$SG159068
	DQ	FLAT:$SG159069
	DQ	FLAT:$SG159070
	DQ	FLAT:$SG159071
	DQ	FLAT:$SG159072
	DQ	FLAT:$SG159073
	DQ	FLAT:$SG159074
	DQ	FLAT:$SG159075
	DQ	FLAT:$SG159076
	DQ	FLAT:$SG159077
	DQ	FLAT:$SG159078
	DQ	FLAT:$SG159079
	DQ	FLAT:$SG159080
	DQ	FLAT:$SG159081
	DQ	FLAT:$SG159082
	DQ	FLAT:$SG159083
	DQ	FLAT:$SG159084
	DQ	FLAT:$SG159085
	DQ	FLAT:$SG159086
	DQ	FLAT:$SG159087
	DQ	FLAT:$SG159088
	DQ	FLAT:$SG159089
	DQ	FLAT:$SG159090
	DQ	FLAT:$SG159091
	DQ	FLAT:$SG159092
	DQ	FLAT:$SG159093
	DQ	FLAT:$SG159094
	DQ	FLAT:$SG159095
	DQ	FLAT:$SG159096
	DQ	FLAT:$SG159097
	DQ	FLAT:$SG159098
	DQ	FLAT:$SG159099
	DQ	FLAT:$SG159100
	DQ	FLAT:$SG159101
	DQ	FLAT:$SG159102
	DQ	FLAT:$SG159103
	DQ	FLAT:$SG159104
	DQ	FLAT:$SG159105
	DQ	FLAT:$SG159106
	DQ	FLAT:$SG159107
	DQ	FLAT:$SG159108
	DQ	FLAT:$SG159109
	DQ	FLAT:$SG159110
	DQ	FLAT:$SG159111
	DQ	FLAT:$SG159112
	DQ	FLAT:$SG159113
	DQ	FLAT:$SG159114
	DQ	FLAT:$SG159115
	DQ	FLAT:$SG159116
	DQ	FLAT:$SG159117
	DQ	FLAT:$SG159118
	DQ	FLAT:$SG159119
	DQ	FLAT:$SG159120
	DQ	FLAT:$SG159121
	DQ	FLAT:$SG159122
	DQ	FLAT:$SG159123
	DQ	FLAT:$SG159124
	DQ	FLAT:$SG159125
	DQ	FLAT:$SG159126
	DQ	FLAT:$SG159127
	DQ	FLAT:$SG159128
	DQ	FLAT:$SG159129
	DQ	FLAT:$SG159130
	DQ	FLAT:$SG159131
$SG159142 DB	'HHC01539I HDL:                 typ      mod      typ    '
	DB	'  mod      typ      mod', 0aH, 00H
	ORG $+3
$SG159149 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159150 DB	'I', 00H
	ORG $+2
$SG159143 DB	'list_devequs', 00H
	ORG $+3
$SG159144 DB	'hdteq.c', 00H
$SG159147 DB	'hdteq.c', 00H
$SG159145 DB	'HHC01539I HDL:                ------   -----    ------  '
	DB	' -----    ------   -----', 0aH, 00H
	ORG $+2
$SG159155 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159156 DB	'I', 00H
	ORG $+2
$SG159146 DB	'list_devequs', 00H
	ORG $+3
$SG159151 DB	'HHC01539%s HDL: devtyp/hdlmod: %s', 0aH, 00H
	ORG $+5
$SG159152 DB	'list_devequs', 00H
	ORG $+3
$SG159153 DB	'hdteq.c', 00H
$SG159154 DB	'%-6s = %-5s    ', 00H
$SG159157 DB	'HHC01539%s HDL: devtyp/hdlmod: %s', 0aH, 00H
	ORG $+5
$SG159158 DB	'list_devequs', 00H
	ORG $+3
$SG159159 DB	'hdteq.c', 00H
$SG159184 DB	'SDL 4.60', 00H
	ORG $+7
$SG159185 DB	'HERCULES', 00H
	ORG $+7
$SG159191 DB	'hdl_devequ', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:list_devequs
	DD	013H
	DD	0262H
voltbl	ENDS
xdata	SEGMENT
$unwind$list_devequs DD 031b19H
	DD	01e0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$devequ_func DD 010901H
	DD	06209H
$unwind$hdl_check_depends_ep DD 010901H
	DD	06209H
$unwind$hdl_register_symbols_ep DD 010901H
	DD	04209H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hdteq.c
_TEXT	SEGMENT
regsym$ = 48
hdl_register_symbols_ep PROC

; 178  : HDL_REGISTER_SECTION;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 179  : {
; 180  :     HDL_REGISTER( hdl_devequ, devequ_func );

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:devequ_func
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159191
  00017	ff 54 24 30	 call	 QWORD PTR regsym$[rsp]

; 181  : }
; 182  : END_REGISTER_SECTION

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
hdl_register_symbols_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hdteq.c
_TEXT	SEGMENT
depchk_rc$ = 32
depchk$ = 64
hdl_check_depends_ep PROC

; 170  : HDL_DEPENDENCY_SECTION;

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 0
$LN4@hdl_check_:

; 171  : {
; 172  :      HDL_DEPENDENCY( HERCULES );

  00011	41 b8 08 00 00
	00		 mov	 r8d, 8
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159184
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159185
  00025	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00029	85 c0		 test	 eax, eax
  0002b	74 08		 je	 SHORT $LN5@hdl_check_
  0002d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN5@hdl_check_:
  00035	33 c0		 xor	 eax, eax
  00037	85 c0		 test	 eax, eax
  00039	75 d6		 jne	 SHORT $LN4@hdl_check_

; 173  : }
; 174  : END_DEPENDENCY_SECTION

  0003b	8b 44 24 20	 mov	 eax, DWORD PTR depchk_rc$[rsp]
  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
hdl_check_depends_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hdteq.c
_TEXT	SEGMENT
i$ = 32
next_devequ_func$ = 40
typname$ = 64
devequ_func PROC

; 122  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 123  :     DEVEQU* next_devequ_func;
; 124  :     size_t  i;
; 125  : 
; 126  :     /* Request to list equates? */
; 127  :     if (!typname)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR typname$[rsp], 0
  0000f	75 07		 jne	 SHORT $LN5@devequ_fun

; 128  :         list_devequs();

  00011	e8 00 00 00 00	 call	 list_devequs
  00016	eb 56		 jmp	 SHORT $LN6@devequ_fun
$LN5@devequ_fun:

; 129  :     else /* Request to translate device-type */
; 130  :     {
; 131  :         /* Search device equates table for match */
; 132  :         for (i=0; i < _countof( equtab ); i++)

  00018	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00021	eb 0d		 jmp	 SHORT $LN4@devequ_fun
$LN2@devequ_fun:
  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00028	48 ff c0	 inc	 rax
  0002b	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN4@devequ_fun:
  00030	48 83 7c 24 20
	28		 cmp	 QWORD PTR i$[rsp], 40	; 00000028H
  00036	73 36		 jae	 SHORT $LN3@devequ_fun

; 133  :         {
; 134  :             /* Is this the device-type they're requesting? */
; 135  :             if (strcasecmp( equtab[i].alias, typname ) == 0)

  00038	48 6b 44 24 20
	10		 imul	 rax, QWORD PTR i$[rsp], 16
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:equtab
  00045	48 8b 54 24 40	 mov	 rdx, QWORD PTR typname$[rsp]
  0004a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00054	85 c0		 test	 eax, eax
  00056	75 14		 jne	 SHORT $LN7@devequ_fun

; 136  :             {
; 137  :                 /* Yes, then use this device-type name instead */
; 138  :                 return equtab[i].name;

  00058	48 6b 44 24 20
	10		 imul	 rax, QWORD PTR i$[rsp], 16
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:equtab
  00065	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  0006a	eb 29		 jmp	 SHORT $LN1@devequ_fun
$LN7@devequ_fun:

; 139  :             }
; 140  :         }

  0006c	eb b5		 jmp	 SHORT $LN2@devequ_fun
$LN3@devequ_fun:
$LN6@devequ_fun:

; 141  :     }
; 142  : 
; 143  :     /* Call next device-type-equates function, if any */
; 144  :     if (!(next_devequ_func = (DEVEQU*) hdl_next( &devequ_func )))

  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:devequ_func
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_next
  0007b	48 89 44 24 28	 mov	 QWORD PTR next_devequ_func$[rsp], rax
  00080	48 83 7c 24 28
	00		 cmp	 QWORD PTR next_devequ_func$[rsp], 0
  00086	75 04		 jne	 SHORT $LN8@devequ_fun

; 145  :         return NULL;

  00088	33 c0		 xor	 eax, eax
  0008a	eb 09		 jmp	 SHORT $LN1@devequ_fun
$LN8@devequ_fun:

; 146  :     return next_devequ_func( typname );

  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR typname$[rsp]
  00091	ff 54 24 28	 call	 QWORD PTR next_devequ_func$[rsp]
$LN1@devequ_fun:

; 147  : }

  00095	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00099	c3		 ret	 0
devequ_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hdteq.c
_TEXT	SEGMENT
i$ = 64
n$ = 72
$T1 = 80
tv92 = 88
tv140 = 96
wrk$ = 104
buf$ = 144
__$ArrayPad$ = 224
list_devequs PROC

; 90   : {

  00000	40 57		 push	 rdi
  00002	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 91   :     char buf[ 80 ] = {0};

  0001b	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  00023	48 8b f8	 mov	 rdi, rax
  00026	33 c0		 xor	 eax, eax
  00028	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0002d	f3 aa		 rep stosb

; 92   :     char wrk[ 32 ] = {0};

  0002f	48 8d 44 24 68	 lea	 rax, QWORD PTR wrk$[rsp]
  00034	48 8b f8	 mov	 rdi, rax
  00037	33 c0		 xor	 eax, eax
  00039	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0003e	f3 aa		 rep stosb

; 93   : 
; 94   :     size_t  i, n;
; 95   : 
; 96   :     LOGMSG( "HHC01539I HDL:                 typ      mod      typ      mod      typ      mod\n" );

  00040	b9 01 00 00 00	 mov	 ecx, 1
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159142
  00052	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00062	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159143
  00069	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159144
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 97   :     LOGMSG( "HHC01539I HDL:                ------   -----    ------   -----    ------   -----\n" );

  0007b	b9 01 00 00 00	 mov	 ecx, 1
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159145
  0008d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00092	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00097	41 b9 03 00 00
	00		 mov	 r9d, 3
  0009d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159146
  000a4	ba 61 00 00 00	 mov	 edx, 97			; 00000061H
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159147
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 98   : 
; 99   :     for (i=0, n=1; i < _countof( equtab ); i++, n++)

  000b6	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000bf	48 c7 44 24 48
	01 00 00 00	 mov	 QWORD PTR n$[rsp], 1
  000c8	eb 1a		 jmp	 SHORT $LN4@list_deveq
$LN2@list_deveq:
  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  000cf	48 ff c0	 inc	 rax
  000d2	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
  000d7	48 8b 44 24 48	 mov	 rax, QWORD PTR n$[rsp]
  000dc	48 ff c0	 inc	 rax
  000df	48 89 44 24 48	 mov	 QWORD PTR n$[rsp], rax
$LN4@list_deveq:
  000e4	48 83 7c 24 40
	28		 cmp	 QWORD PTR i$[rsp], 40	; 00000028H
  000ea	0f 83 07 01 00
	00		 jae	 $LN3@list_deveq

; 100  :     {
; 101  :         if (n >= 4)

  000f0	48 83 7c 24 48
	04		 cmp	 QWORD PTR n$[rsp], 4
  000f6	0f 82 9e 00 00
	00		 jb	 $LN5@list_deveq

; 102  :         {
; 103  :             // "HDL: devtyp/hdlmod: %s"
; 104  :             WRMSG( HHC01539, "I", RTRIM( buf ));

  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159149
  00103	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  00111	48 89 44 24 58	 mov	 QWORD PTR tv92[rsp], rax
  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00121	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv92[rsp]
  00126	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159150
  00132	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159151
  0013e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00143	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00148	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159152
  00155	ba 68 00 00 00	 mov	 edx, 104		; 00000068H
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159153
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 105  :             n = 1;

  00167	48 c7 44 24 48
	01 00 00 00	 mov	 QWORD PTR n$[rsp], 1

; 106  :             buf[0] = 0;

  00170	b8 01 00 00 00	 mov	 eax, 1
  00175	48 6b c0 00	 imul	 rax, rax, 0
  00179	48 89 44 24 50	 mov	 QWORD PTR $T1[rsp], rax
  0017e	48 83 7c 24 50
	50		 cmp	 QWORD PTR $T1[rsp], 80	; 00000050H
  00184	73 02		 jae	 SHORT $LN7@list_deveq
  00186	eb 05		 jmp	 SHORT $LN8@list_deveq
$LN7@list_deveq:
  00188	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN8@list_deveq:
  0018d	48 8b 44 24 50	 mov	 rax, QWORD PTR $T1[rsp]
  00192	c6 84 04 90 00
	00 00 00	 mov	 BYTE PTR buf$[rsp+rax], 0
$LN5@list_deveq:

; 107  :         }
; 108  : 
; 109  :         MSGBUF( wrk, "%-6s = %-5s    ", equtab[i].alias,

  0019a	48 6b 44 24 40
	10		 imul	 rax, QWORD PTR i$[rsp], 16
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:equtab
  001a7	48 6b 54 24 40
	10		 imul	 rdx, QWORD PTR i$[rsp], 16
  001ad	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:equtab
  001b4	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  001b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001be	4c 8b 0c 17	 mov	 r9, QWORD PTR [rdi+rdx]
  001c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159154
  001c9	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  001ce	48 8d 4c 24 68	 lea	 rcx, QWORD PTR wrk$[rsp]
  001d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 110  :                                         equtab[i].name );
; 111  :         STRLCAT( buf, wrk );

  001d9	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  001df	48 8d 54 24 68	 lea	 rdx, QWORD PTR wrk$[rsp]
  001e4	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 112  :     }

  001f2	e9 d3 fe ff ff	 jmp	 $LN2@list_deveq
$LN3@list_deveq:

; 113  : 
; 114  :     // "HDL: devtyp/hdlmod: %s"
; 115  :     WRMSG( HHC01539, "I", RTRIM( buf ));

  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159155
  001fe	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  0020c	48 89 44 24 60	 mov	 QWORD PTR tv140[rsp], rax
  00211	b9 01 00 00 00	 mov	 ecx, 1
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0021c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv140[rsp]
  00221	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159156
  0022d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159157
  00239	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0023e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00243	41 b9 03 00 00
	00		 mov	 r9d, 3
  00249	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159158
  00250	ba 73 00 00 00	 mov	 edx, 115		; 00000073H
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159159
  0025c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@list_deveq:

; 116  : }

  00262	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0026a	48 33 cc	 xor	 rcx, rsp
  0026d	e8 00 00 00 00	 call	 __security_check_cookie
  00272	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00279	5f		 pop	 rdi
  0027a	c3		 ret	 0
list_devequs ENDP
_TEXT	ENDS
END
